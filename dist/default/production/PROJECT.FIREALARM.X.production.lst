

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 16 19:07:05 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.45
   122                           ; Generated 16/11/2017 GMT
   123                           ; 
   124                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F452 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataCOMRAM
   157  006B31                     __pidataCOMRAM:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _timerVerificarSinal
   161  006B31  05                 	db	5
   162                           
   163                           	psect	idataBANK0
   164  006B32                     __pidataBANK0:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _dtl_posicao
   168  006B32  3C                 	db	60
   169                           
   170                           ;initializer for _status_estacionaria
   171  006B33  01                 	db	1
   172                           
   173                           ;initializer for _status_principal
   174  006B34  01                 	db	1
   175                           
   176                           ;initializer for _status_jockey
   177  006B35  01                 	db	1
   178                           
   179                           ;initializer for _timerIntervaloEntreBombas
   180  006B36  0A                 	db	10
   181                           
   182                           ;initializer for _intensidadeSinal
   183  006B37  20                 	db	32
   184                           
   185                           	psect	idataBANK1
   186  006B38                     __pidataBANK1:
   187                           	opt stack 0
   188                           
   189                           ;initializer for intToFloatStr@F2544
   190  006B38  20                 	db	32
   191  006B39  20                 	db	32
   192  006B3A  20                 	db	32
   193  006B3B  20                 	db	32
   194                           
   195                           ;initializer for _ultimoEstadoLCD
   196  006B3C  0064               	dw	100
   197  006B3E  0000               	dw	0
   198                           
   199                           	psect	mediumconst
   200  007A70                     __pmediumconst:
   201                           	opt stack 0
   202  007A70  00                 	db	0
   203  007A71                     criarCaracteresCGRAM@F2969:
   204                           	opt stack 0
   205  007A71  00                 	db	0
   206  007A72  1F                 	db	31
   207  007A73  0E                 	db	14
   208  007A74  04                 	db	4
   209  007A75  04                 	db	4
   210  007A76  04                 	db	4
   211  007A77  04                 	db	4
   212  007A78  04                 	db	4
   213  007A79  00                 	db	0
   214  007A7A  00                 	db	0
   215  007A7B  00                 	db	0
   216  007A7C  00                 	db	0
   217  007A7D  00                 	db	0
   218  007A7E  10                 	db	16
   219  007A7F  10                 	db	16
   220  007A80  10                 	db	16
   221  007A81  00                 	db	0
   222  007A82  00                 	db	0
   223  007A83  00                 	db	0
   224  007A84  04                 	db	4
   225  007A85  04                 	db	4
   226  007A86  14                 	db	20
   227  007A87  14                 	db	20
   228  007A88  14                 	db	20
   229  007A89  00                 	db	0
   230  007A8A  01                 	db	1
   231  007A8B  01                 	db	1
   232  007A8C  05                 	db	5
   233  007A8D  05                 	db	5
   234  007A8E  15                 	db	21
   235  007A8F  15                 	db	21
   236  007A90  15                 	db	21
   237  007A91  0A                 	db	10
   238  007A92  0A                 	db	10
   239  007A93  1F                 	db	31
   240  007A94  11                 	db	17
   241  007A95  11                 	db	17
   242  007A96  0E                 	db	14
   243  007A97  04                 	db	4
   244  007A98  04                 	db	4
   245  007A99  00                 	db	0
   246  007A9A  00                 	db	0
   247  007A9B  00                 	db	0
   248  007A9C  00                 	db	0
   249  007A9D  00                 	db	0
   250  007A9E  00                 	db	0
   251  007A9F  00                 	db	0
   252  007AA0  00                 	db	0
   253  007AA1                     __end_ofcriarCaracteresCGRAM@F2969:
   254                           	opt stack 0
   255  007AA1                     _dpowers:
   256                           	opt stack 0
   257  007AA1  0001               	dw	1
   258  007AA3  000A               	dw	10
   259  007AA5  0064               	dw	100
   260  007AA7  03E8               	dw	1000
   261  007AA9  2710               	dw	10000
   262  007AAB                     __end_of_dpowers:
   263                           	opt stack 0
   264  0000                     _SSPBUF	set	4041
   265  0000                     _SSPSTAT	set	4039
   266  0000                     _SSPADD	set	4040
   267  0000                     _SSPCON2	set	4037
   268  0000                     _SSPCON1	set	4038
   269  0000                     _RCREG	set	4014
   270  0000                     _TMR0L	set	4054
   271  0000                     _TMR0H	set	4055
   272  0000                     _LATCbits	set	3979
   273  0000                     _LATEbits	set	3981
   274  0000                     _LATDbits	set	3980
   275  0000                     _LATAbits	set	3977
   276  0000                     _PORTBbits	set	3969
   277  0000                     _TXREG	set	4013
   278  0000                     _ADRESL	set	4035
   279  0000                     _ADRESH	set	4036
   280  0000                     _ADCON0bits	set	4034
   281  0000                     _PORTCbits	set	3970
   282  0000                     _PORTEbits	set	3972
   283  0000                     _PORTDbits	set	3971
   284  0000                     _TRISEbits	set	3990
   285  0000                     _TRISBbits	set	3987
   286  0000                     _PIE1bits	set	3997
   287  0000                     _PIR1bits	set	3998
   288  0000                     _INTCONbits	set	4082
   289  0000                     _SPBRG	set	4015
   290  0000                     _RCSTAbits	set	4011
   291  0000                     _TXSTAbits	set	4012
   292  0000                     _TRISCbits	set	3988
   293  0000                     _TRISDbits	set	3989
   294  0000                     _INTCON3	set	4080
   295  0000                     _INTCON2	set	4081
   296  0000                     _INTCON	set	4082
   297  0000                     _T0CON	set	4053
   298  0000                     _PORTAbits	set	3968
   299  0000                     _TRISAbits	set	3986
   300  0000                     _ADCON1	set	4033
   301  0000                     _ADCON0	set	4034
   302  0000                     _ACKEN	set	32300
   303  0000                     _ACKDT	set	32301
   304  0000                     _RCEN	set	32299
   305  0000                     _PEN	set	32298
   306  0000                     _RSEN	set	32297
   307  0000                     _SEN	set	32296
   308  0000                     _RCIF	set	31989
   309  0000                     _TMR0IF	set	32658
   310  007AAB                     STR_14:
   311                           
   312                           ; BSR set to: 1
   313  007AAB  54                 	db	84	;'T'
   314  007AAC  45                 	db	69	;'E'
   315  007AAD  43                 	db	67	;'C'
   316  007AAE  48                 	db	72	;'H'
   317  007AAF  4E                 	db	78	;'N'
   318  007AB0  4F                 	db	79	;'O'
   319  007AB1  57                 	db	87	;'W'
   320  007AB2  20                 	db	32
   321  007AB3  53                 	db	83	;'S'
   322  007AB4  69                 	db	105	;'i'
   323  007AB5  73                 	db	115	;'s'
   324  007AB6  74                 	db	116	;'t'
   325  007AB7  65                 	db	101	;'e'
   326  007AB8  6D                 	db	109	;'m'
   327  007AB9  61                 	db	97	;'a'
   328  007ABA  73                 	db	115	;'s'
   329  007ABB  20                 	db	32
   330  007ABC  65                 	db	101	;'e'
   331  007ABD  6D                 	db	109	;'m'
   332  007ABE  62                 	db	98	;'b'
   333  007ABF  61                 	db	97	;'a'
   334  007AC0  72                 	db	114	;'r'
   335  007AC1  63                 	db	99	;'c'
   336  007AC2  61                 	db	97	;'a'
   337  007AC3  64                 	db	100	;'d'
   338  007AC4  6F                 	db	111	;'o'
   339  007AC5  73                 	db	115	;'s'
   340  007AC6  0D                 	db	13
   341  007AC7  0A                 	db	10
   342  007AC8  0D                 	db	13
   343  007AC9  0A                 	db	10
   344  007ACA  54                 	db	84	;'T'
   345  007ACB  65                 	db	101	;'e'
   346  007ACC  73                 	db	115	;'s'
   347  007ACD  74                 	db	116	;'t'
   348  007ACE  65                 	db	101	;'e'
   349  007ACF  20                 	db	32
   350  007AD0  6D                 	db	109	;'m'
   351  007AD1  61                 	db	97	;'a'
   352  007AD2  6E                 	db	110	;'n'
   353  007AD3  75                 	db	117	;'u'
   354  007AD4  61                 	db	97	;'a'
   355  007AD5  6C                 	db	108	;'l'
   356  007AD6  20                 	db	32
   357  007AD7  64                 	db	100	;'d'
   358  007AD8  65                 	db	101	;'e'
   359  007AD9  20                 	db	32
   360  007ADA  63                 	db	99	;'c'
   361  007ADB  6F                 	db	111	;'o'
   362  007ADC  6D                 	db	109	;'m'
   363  007ADD  75                 	db	117	;'u'
   364  007ADE  6E                 	db	110	;'n'
   365  007ADF  69                 	db	105	;'i'
   366  007AE0  63                 	db	99	;'c'
   367  007AE1  61                 	db	97	;'a'
   368  007AE2  63                 	db	99	;'c'
   369  007AE3  61                 	db	97	;'a'
   370  007AE4  6F                 	db	111	;'o'
   371  007AE5  2E                 	db	46
   372  007AE6  0D                 	db	13
   373  007AE7  0A                 	db	10
   374  007AE8  44                 	db	68	;'D'
   375  007AE9  61                 	db	97	;'a'
   376  007AEA  74                 	db	116	;'t'
   377  007AEB  61                 	db	97	;'a'
   378  007AEC  3A                 	db	58	;':'
   379  007AED  20                 	db	32
   380  007AEE  25                 	db	37
   381  007AEF  30                 	db	48	;'0'
   382  007AF0  32                 	db	50	;'2'
   383  007AF1  64                 	db	100	;'d'
   384  007AF2  2F                 	db	47
   385  007AF3  25                 	db	37
   386  007AF4  30                 	db	48	;'0'
   387  007AF5  32                 	db	50	;'2'
   388  007AF6  64                 	db	100	;'d'
   389  007AF7  2F                 	db	47
   390  007AF8  25                 	db	37
   391  007AF9  30                 	db	48	;'0'
   392  007AFA  32                 	db	50	;'2'
   393  007AFB  64                 	db	100	;'d'
   394  007AFC  20                 	db	32
   395  007AFD  25                 	db	37
   396  007AFE  30                 	db	48	;'0'
   397  007AFF  32                 	db	50	;'2'
   398  007B00  64                 	db	100	;'d'
   399  007B01  3A                 	db	58	;':'
   400  007B02  25                 	db	37
   401  007B03  30                 	db	48	;'0'
   402  007B04  32                 	db	50	;'2'
   403  007B05  64                 	db	100	;'d'
   404  007B06  3A                 	db	58	;':'
   405  007B07  25                 	db	37
   406  007B08  30                 	db	48	;'0'
   407  007B09  32                 	db	50	;'2'
   408  007B0A  64                 	db	100	;'d'
   409  007B0B  0D                 	db	13
   410  007B0C  0A                 	db	10
   411  007B0D  0D                 	db	13
   412  007B0E  0A                 	db	10
   413  007B0F  0D                 	db	13
   414  007B10  0A                 	db	10
   415  007B11  56                 	db	86	;'V'
   416  007B12  65                 	db	101	;'e'
   417  007B13  72                 	db	114	;'r'
   418  007B14  73                 	db	115	;'s'
   419  007B15  61                 	db	97	;'a'
   420  007B16  6F                 	db	111	;'o'
   421  007B17  20                 	db	32
   422  007B18  64                 	db	100	;'d'
   423  007B19  6F                 	db	111	;'o'
   424  007B1A  20                 	db	32
   425  007B1B  73                 	db	115	;'s'
   426  007B1C  69                 	db	105	;'i'
   427  007B1D  73                 	db	115	;'s'
   428  007B1E  74                 	db	116	;'t'
   429  007B1F  65                 	db	101	;'e'
   430  007B20  6D                 	db	109	;'m'
   431  007B21  61                 	db	97	;'a'
   432  007B22  3A                 	db	58	;':'
   433  007B23  20                 	db	32
   434  007B24  25                 	db	37
   435  007B25  73                 	db	115	;'s'
   436  007B26  0D                 	db	13
   437  007B27  0A                 	db	10
   438  007B28  00                 	db	0
   439  007B29                     STR_26:
   440                           
   441                           ; BSR set to: 1
   442  007B29  54                 	db	84	;'T'
   443  007B2A  45                 	db	69	;'E'
   444  007B2B  53                 	db	83	;'S'
   445  007B2C  54                 	db	84	;'T'
   446  007B2D  45                 	db	69	;'E'
   447  007B2E  20                 	db	32
   448  007B2F  44                 	db	68	;'D'
   449  007B30  45                 	db	69	;'E'
   450  007B31  20                 	db	32
   451  007B32  42                 	db	66	;'B'
   452  007B33  4F                 	db	79	;'O'
   453  007B34  4D                 	db	77	;'M'
   454  007B35  42                 	db	66	;'B'
   455  007B36  41                 	db	65	;'A'
   456  007B37  53                 	db	83	;'S'
   457  007B38  20                 	db	32
   458  007B39  52                 	db	82	;'R'
   459  007B3A  45                 	db	69	;'E'
   460  007B3B  41                 	db	65	;'A'
   461  007B3C  4C                 	db	76	;'L'
   462  007B3D  49                 	db	73	;'I'
   463  007B3E  5A                 	db	90	;'Z'
   464  007B3F  41                 	db	65	;'A'
   465  007B40  44                 	db	68	;'D'
   466  007B41  4F                 	db	79	;'O'
   467  007B42  0D                 	db	13
   468  007B43  0A                 	db	10
   469  007B44  45                 	db	69	;'E'
   470  007B45  4D                 	db	77	;'M'
   471  007B46  20                 	db	32
   472  007B47  25                 	db	37
   473  007B48  30                 	db	48	;'0'
   474  007B49  32                 	db	50	;'2'
   475  007B4A  64                 	db	100	;'d'
   476  007B4B  3A                 	db	58	;':'
   477  007B4C  25                 	db	37
   478  007B4D  30                 	db	48	;'0'
   479  007B4E  32                 	db	50	;'2'
   480  007B4F  64                 	db	100	;'d'
   481  007B50  3A                 	db	58	;':'
   482  007B51  25                 	db	37
   483  007B52  30                 	db	48	;'0'
   484  007B53  32                 	db	50	;'2'
   485  007B54  64                 	db	100	;'d'
   486  007B55  20                 	db	32
   487  007B56  25                 	db	37
   488  007B57  30                 	db	48	;'0'
   489  007B58  32                 	db	50	;'2'
   490  007B59  64                 	db	100	;'d'
   491  007B5A  2F                 	db	47
   492  007B5B  25                 	db	37
   493  007B5C  30                 	db	48	;'0'
   494  007B5D  32                 	db	50	;'2'
   495  007B5E  64                 	db	100	;'d'
   496  007B5F  2F                 	db	47
   497  007B60  25                 	db	37
   498  007B61  30                 	db	48	;'0'
   499  007B62  32                 	db	50	;'2'
   500  007B63  64                 	db	100	;'d'
   501  007B64  0D                 	db	13
   502  007B65  0A                 	db	10
   503  007B66  4A                 	db	74	;'J'
   504  007B67  4F                 	db	79	;'O'
   505  007B68  43                 	db	67	;'C'
   506  007B69  4B                 	db	75	;'K'
   507  007B6A  45                 	db	69	;'E'
   508  007B6B  59                 	db	89	;'Y'
   509  007B6C  3A                 	db	58	;':'
   510  007B6D  20                 	db	32
   511  007B6E  25                 	db	37
   512  007B6F  73                 	db	115	;'s'
   513  007B70  0D                 	db	13
   514  007B71  0A                 	db	10
   515  007B72  50                 	db	80	;'P'
   516  007B73  52                 	db	82	;'R'
   517  007B74  49                 	db	73	;'I'
   518  007B75  4E                 	db	78	;'N'
   519  007B76  43                 	db	67	;'C'
   520  007B77  49                 	db	73	;'I'
   521  007B78  50                 	db	80	;'P'
   522  007B79  41                 	db	65	;'A'
   523  007B7A  4C                 	db	76	;'L'
   524  007B7B  3A                 	db	58	;':'
   525  007B7C  20                 	db	32
   526  007B7D  25                 	db	37
   527  007B7E  73                 	db	115	;'s'
   528  007B7F  0D                 	db	13
   529  007B80  0A                 	db	10
   530  007B81  43                 	db	67	;'C'
   531  007B82  4F                 	db	79	;'O'
   532  007B83  4D                 	db	77	;'M'
   533  007B84  42                 	db	66	;'B'
   534  007B85  55                 	db	85	;'U'
   535  007B86  53                 	db	83	;'S'
   536  007B87  54                 	db	84	;'T'
   537  007B88  41                 	db	65	;'A'
   538  007B89  4F                 	db	79	;'O'
   539  007B8A  3A                 	db	58	;':'
   540  007B8B  20                 	db	32
   541  007B8C  25                 	db	37
   542  007B8D  73                 	db	115	;'s'
   543  007B8E  0D                 	db	13
   544  007B8F  0A                 	db	10
   545  007B90  00                 	db	0
   546  007B91                     STR_25:
   547                           
   548                           ; BSR set to: 1
   549  007B91  44                 	db	68	;'D'
   550  007B92  49                 	db	73	;'I'
   551  007B93  53                 	db	83	;'S'
   552  007B94  50                 	db	80	;'P'
   553  007B95  41                 	db	65	;'A'
   554  007B96  52                 	db	82	;'R'
   555  007B97  4F                 	db	79	;'O'
   556  007B98  20                 	db	32
   557  007B99  41                 	db	65	;'A'
   558  007B9A  4C                 	db	76	;'L'
   559  007B9B  41                 	db	65	;'A'
   560  007B9C  52                 	db	82	;'R'
   561  007B9D  4D                 	db	77	;'M'
   562  007B9E  45                 	db	69	;'E'
   563  007B9F  20                 	db	32
   564  007BA0  44                 	db	68	;'D'
   565  007BA1  45                 	db	69	;'E'
   566  007BA2  20                 	db	32
   567  007BA3  49                 	db	73	;'I'
   568  007BA4  4E                 	db	78	;'N'
   569  007BA5  43                 	db	67	;'C'
   570  007BA6  45                 	db	69	;'E'
   571  007BA7  4E                 	db	78	;'N'
   572  007BA8  44                 	db	68	;'D'
   573  007BA9  49                 	db	73	;'I'
   574  007BAA  4F                 	db	79	;'O'
   575  007BAB  0D                 	db	13
   576  007BAC  0A                 	db	10
   577  007BAD  45                 	db	69	;'E'
   578  007BAE  4D                 	db	77	;'M'
   579  007BAF  20                 	db	32
   580  007BB0  25                 	db	37
   581  007BB1  30                 	db	48	;'0'
   582  007BB2  32                 	db	50	;'2'
   583  007BB3  64                 	db	100	;'d'
   584  007BB4  3A                 	db	58	;':'
   585  007BB5  25                 	db	37
   586  007BB6  30                 	db	48	;'0'
   587  007BB7  32                 	db	50	;'2'
   588  007BB8  64                 	db	100	;'d'
   589  007BB9  3A                 	db	58	;':'
   590  007BBA  25                 	db	37
   591  007BBB  30                 	db	48	;'0'
   592  007BBC  32                 	db	50	;'2'
   593  007BBD  64                 	db	100	;'d'
   594  007BBE  20                 	db	32
   595  007BBF  25                 	db	37
   596  007BC0  30                 	db	48	;'0'
   597  007BC1  32                 	db	50	;'2'
   598  007BC2  64                 	db	100	;'d'
   599  007BC3  2F                 	db	47
   600  007BC4  25                 	db	37
   601  007BC5  30                 	db	48	;'0'
   602  007BC6  32                 	db	50	;'2'
   603  007BC7  64                 	db	100	;'d'
   604  007BC8  2F                 	db	47
   605  007BC9  25                 	db	37
   606  007BCA  30                 	db	48	;'0'
   607  007BCB  32                 	db	50	;'2'
   608  007BCC  64                 	db	100	;'d'
   609  007BCD  0D                 	db	13
   610  007BCE  0A                 	db	10
   611  007BCF  00                 	db	0
   612  007BD0                     STR_79:
   613                           
   614                           ; BSR set to: 1
   615  007BD0  44                 	db	68	;'D'
   616  007BD1  61                 	db	97	;'a'
   617  007BD2  74                 	db	116	;'t'
   618  007BD3  61                 	db	97	;'a'
   619  007BD4  3A                 	db	58	;':'
   620  007BD5  20                 	db	32
   621  007BD6  25                 	db	37
   622  007BD7  30                 	db	48	;'0'
   623  007BD8  32                 	db	50	;'2'
   624  007BD9  64                 	db	100	;'d'
   625  007BDA  2F                 	db	47
   626  007BDB  25                 	db	37
   627  007BDC  30                 	db	48	;'0'
   628  007BDD  32                 	db	50	;'2'
   629  007BDE  64                 	db	100	;'d'
   630  007BDF  2F                 	db	47
   631  007BE0  25                 	db	37
   632  007BE1  30                 	db	48	;'0'
   633  007BE2  32                 	db	50	;'2'
   634  007BE3  64                 	db	100	;'d'
   635  007BE4  20                 	db	32
   636  007BE5  25                 	db	37
   637  007BE6  30                 	db	48	;'0'
   638  007BE7  32                 	db	50	;'2'
   639  007BE8  64                 	db	100	;'d'
   640  007BE9  3A                 	db	58	;':'
   641  007BEA  25                 	db	37
   642  007BEB  30                 	db	48	;'0'
   643  007BEC  32                 	db	50	;'2'
   644  007BED  64                 	db	100	;'d'
   645  007BEE  00                 	db	0
   646  007BEF                     STR_92:
   647                           
   648                           ; BSR set to: 1
   649  007BEF  25                 	db	37
   650  007BF0  64                 	db	100	;'d'
   651  007BF1  2D                 	db	45
   652  007BF2  25                 	db	37
   653  007BF3  64                 	db	100	;'d'
   654  007BF4  2D                 	db	45
   655  007BF5  25                 	db	37
   656  007BF6  64                 	db	100	;'d'
   657  007BF7  2D                 	db	45
   658  007BF8  25                 	db	37
   659  007BF9  64                 	db	100	;'d'
   660  007BFA  2D                 	db	45
   661  007BFB  25                 	db	37
   662  007BFC  64                 	db	100	;'d'
   663  007BFD  2D                 	db	45
   664  007BFE  25                 	db	37
   665  007BFF  64                 	db	100	;'d'
   666  007C00  20                 	db	32
   667  007C01  3E                 	db	62	;'>'
   668  007C02  20                 	db	32
   669  007C03  25                 	db	37
   670  007C04  64                 	db	100	;'d'
   671  007C05  2D                 	db	45
   672  007C06  25                 	db	37
   673  007C07  64                 	db	100	;'d'
   674  007C08  00                 	db	0
   675  007C09                     STR_58:
   676                           
   677                           ; BSR set to: 1
   678  007C09  20                 	db	32
   679  007C0A  25                 	db	37
   680  007C0B  30                 	db	48	;'0'
   681  007C0C  32                 	db	50	;'2'
   682  007C0D  64                 	db	100	;'d'
   683  007C0E  3A                 	db	58	;':'
   684  007C0F  25                 	db	37
   685  007C10  30                 	db	48	;'0'
   686  007C11  32                 	db	50	;'2'
   687  007C12  64                 	db	100	;'d'
   688  007C13  20                 	db	32
   689  007C14  25                 	db	37
   690  007C15  30                 	db	48	;'0'
   691  007C16  32                 	db	50	;'2'
   692  007C17  64                 	db	100	;'d'
   693  007C18  2F                 	db	47
   694  007C19  25                 	db	37
   695  007C1A  30                 	db	48	;'0'
   696  007C1B  32                 	db	50	;'2'
   697  007C1C  64                 	db	100	;'d'
   698  007C1D  00                 	db	0
   699  007C1E                     STR_63:
   700                           
   701                           ; BSR set to: 1
   702  007C1E  20                 	db	32
   703  007C1F  2A                 	db	42
   704  007C20  66                 	db	102	;'f'
   705  007C21  61                 	db	97	;'a'
   706  007C22  6C                 	db	108	;'l'
   707  007C23  68                 	db	104	;'h'
   708  007C24  61                 	db	97	;'a'
   709  007C25  20                 	db	32
   710  007C26  42                 	db	66	;'B'
   711  007C27  2E                 	db	46
   712  007C28  20                 	db	32
   713  007C29  70                 	db	112	;'p'
   714  007C2A  72                 	db	114	;'r'
   715  007C2B  69                 	db	105	;'i'
   716  007C2C  6E                 	db	110	;'n'
   717  007C2D  63                 	db	99	;'c'
   718  007C2E  69                 	db	105	;'i'
   719  007C2F  70                 	db	112	;'p'
   720  007C30  61                 	db	97	;'a'
   721  007C31  6C                 	db	108	;'l'
   722  007C32  00                 	db	0
   723  007C33                     STR_64:
   724                           
   725                           ; BSR set to: 1
   726  007C33  20                 	db	32
   727  007C34  2A                 	db	42
   728  007C35  66                 	db	102	;'f'
   729  007C36  61                 	db	97	;'a'
   730  007C37  6C                 	db	108	;'l'
   731  007C38  68                 	db	104	;'h'
   732  007C39  61                 	db	97	;'a'
   733  007C3A  20                 	db	32
   734  007C3B  42                 	db	66	;'B'
   735  007C3C  2E                 	db	46
   736  007C3D  20                 	db	32
   737  007C3E  63                 	db	99	;'c'
   738  007C3F  6F                 	db	111	;'o'
   739  007C40  6D                 	db	109	;'m'
   740  007C41  62                 	db	98	;'b'
   741  007C42  75                 	db	117	;'u'
   742  007C43  73                 	db	115	;'s'
   743  007C44  74                 	db	116	;'t'
   744  007C45  61                 	db	97	;'a'
   745  007C46  6F                 	db	111	;'o'
   746  007C47  00                 	db	0
   747  007C48                     STR_73:
   748                           
   749                           ; BSR set to: 1
   750  007C48  23                 	db	35
   751  007C49  50                 	db	80	;'P'
   752  007C4A  72                 	db	114	;'r'
   753  007C4B  6F                 	db	111	;'o'
   754  007C4C  78                 	db	120	;'x'
   755  007C4D  69                 	db	105	;'i'
   756  007C4E  6D                 	db	109	;'m'
   757  007C4F  6F                 	db	111	;'o'
   758  007C50  20                 	db	32
   759  007C51  65                 	db	101	;'e'
   760  007C52  6D                 	db	109	;'m'
   761  007C53  20                 	db	32
   762  007C54  25                 	db	37
   763  007C55  32                 	db	50	;'2'
   764  007C56  64                 	db	100	;'d'
   765  007C57  20                 	db	32
   766  007C58  64                 	db	100	;'d'
   767  007C59  69                 	db	105	;'i'
   768  007C5A  61                 	db	97	;'a'
   769  007C5B  73                 	db	115	;'s'
   770  007C5C  00                 	db	0
   771  007C5D                     STR_38:
   772                           
   773                           ; BSR set to: 1
   774  007C5D  44                 	db	68	;'D'
   775  007C5E  65                 	db	101	;'e'
   776  007C5F  73                 	db	115	;'s'
   777  007C60  70                 	db	112	;'p'
   778  007C61  72                 	db	114	;'r'
   779  007C62  65                 	db	101	;'e'
   780  007C63  73                 	db	115	;'s'
   781  007C64  73                 	db	115	;'s'
   782  007C65  75                 	db	117	;'u'
   783  007C66  72                 	db	114	;'r'
   784  007C67  69                 	db	105	;'i'
   785  007C68  7A                 	db	122	;'z'
   786  007C69  61                 	db	97	;'a'
   787  007C6A  6E                 	db	110	;'n'
   788  007C6B  64                 	db	100	;'d'
   789  007C6C  6F                 	db	111	;'o'
   790  007C6D  2E                 	db	46
   791  007C6E  2E                 	db	46
   792  007C6F  2E                 	db	46
   793  007C70  00                 	db	0
   794  007C71                     STR_65:
   795                           
   796                           ; BSR set to: 1
   797  007C71  20                 	db	32
   798  007C72  41                 	db	65	;'A'
   799  007C73  4C                 	db	76	;'L'
   800  007C74  45                 	db	69	;'E'
   801  007C75  52                 	db	82	;'R'
   802  007C76  54                 	db	84	;'T'
   803  007C77  41                 	db	65	;'A'
   804  007C78  20                 	db	32
   805  007C79  44                 	db	68	;'D'
   806  007C7A  45                 	db	69	;'E'
   807  007C7B  20                 	db	32
   808  007C7C  49                 	db	73	;'I'
   809  007C7D  4E                 	db	78	;'N'
   810  007C7E  43                 	db	67	;'C'
   811  007C7F  45                 	db	69	;'E'
   812  007C80  4E                 	db	78	;'N'
   813  007C81  44                 	db	68	;'D'
   814  007C82  49                 	db	73	;'I'
   815  007C83  4F                 	db	79	;'O'
   816  007C84  00                 	db	0
   817  007C85                     STR_61:
   818                           
   819                           ; BSR set to: 1
   820  007C85  20                 	db	32
   821  007C86  2A                 	db	42
   822  007C87  66                 	db	102	;'f'
   823  007C88  61                 	db	97	;'a'
   824  007C89  6C                 	db	108	;'l'
   825  007C8A  68                 	db	104	;'h'
   826  007C8B  61                 	db	97	;'a'
   827  007C8C  20                 	db	32
   828  007C8D  76                 	db	118	;'v'
   829  007C8E  61                 	db	97	;'a'
   830  007C8F  6C                 	db	108	;'l'
   831  007C90  2E                 	db	46
   832  007C91  20                 	db	32
   833  007C92  6C                 	db	108	;'l'
   834  007C93  61                 	db	97	;'a'
   835  007C94  64                 	db	100	;'d'
   836  007C95  72                 	db	114	;'r'
   837  007C96  61                 	db	97	;'a'
   838  007C97  6F                 	db	111	;'o'
   839  007C98  00                 	db	0
   840  007C99                     STR_74:
   841                           
   842                           ; BSR set to: 1
   843  007C99  49                 	db	73	;'I'
   844  007C9A  4E                 	db	78	;'N'
   845  007C9B  54                 	db	84	;'T'
   846  007C9C  45                 	db	69	;'E'
   847  007C9D  52                 	db	82	;'R'
   848  007C9E  56                 	db	86	;'V'
   849  007C9F  41                 	db	65	;'A'
   850  007CA0  4C                 	db	76	;'L'
   851  007CA1  4F                 	db	79	;'O'
   852  007CA2  3A                 	db	58	;':'
   853  007CA3  20                 	db	32
   854  007CA4  25                 	db	37
   855  007CA5  32                 	db	50	;'2'
   856  007CA6  64                 	db	100	;'d'
   857  007CA7  20                 	db	32
   858  007CA8  64                 	db	100	;'d'
   859  007CA9  69                 	db	105	;'i'
   860  007CAA  61                 	db	97	;'a'
   861  007CAB  73                 	db	115	;'s'
   862  007CAC  00                 	db	0
   863  007CAD                     STR_75:
   864                           
   865                           ; BSR set to: 1
   866  007CAD  48                 	db	72	;'H'
   867  007CAE  4F                 	db	79	;'O'
   868  007CAF  52                 	db	82	;'R'
   869  007CB0  41                 	db	65	;'A'
   870  007CB1  52                 	db	82	;'R'
   871  007CB2  49                 	db	73	;'I'
   872  007CB3  4F                 	db	79	;'O'
   873  007CB4  3A                 	db	58	;':'
   874  007CB5  20                 	db	32
   875  007CB6  25                 	db	37
   876  007CB7  30                 	db	48	;'0'
   877  007CB8  32                 	db	50	;'2'
   878  007CB9  64                 	db	100	;'d'
   879  007CBA  20                 	db	32
   880  007CBB  68                 	db	104	;'h'
   881  007CBC  6F                 	db	111	;'o'
   882  007CBD  72                 	db	114	;'r'
   883  007CBE  61                 	db	97	;'a'
   884  007CBF  73                 	db	115	;'s'
   885  007CC0  00                 	db	0
   886  007CC1                     STR_91:
   887                           
   888                           ; BSR set to: 1
   889  007CC1  53                 	db	83	;'S'
   890  007CC2  69                 	db	105	;'i'
   891  007CC3  73                 	db	115	;'s'
   892  007CC4  74                 	db	116	;'t'
   893  007CC5  65                 	db	101	;'e'
   894  007CC6  6D                 	db	109	;'m'
   895  007CC7  61                 	db	97	;'a'
   896  007CC8  73                 	db	115	;'s'
   897  007CC9  20                 	db	32
   898  007CCA  65                 	db	101	;'e'
   899  007CCB  6D                 	db	109	;'m'
   900  007CCC  62                 	db	98	;'b'
   901  007CCD  61                 	db	97	;'a'
   902  007CCE  72                 	db	114	;'r'
   903  007CCF  63                 	db	99	;'c'
   904  007CD0  61                 	db	97	;'a'
   905  007CD1  64                 	db	100	;'d'
   906  007CD2  6F                 	db	111	;'o'
   907  007CD3  73                 	db	115	;'s'
   908  007CD4  00                 	db	0
   909  007CD5                     STR_68:
   910                           
   911                           ; BSR set to: 1
   912  007CD5  20                 	db	32
   913  007CD6  50                 	db	80	;'P'
   914  007CD7  72                 	db	114	;'r'
   915  007CD8  65                 	db	101	;'e'
   916  007CD9  73                 	db	115	;'s'
   917  007CDA  73                 	db	115	;'s'
   918  007CDB  20                 	db	32
   919  007CDC  45                 	db	69	;'E'
   920  007CDD  53                 	db	83	;'S'
   921  007CDE  43                 	db	67	;'C'
   922  007CDF  20                 	db	32
   923  007CE0  70                 	db	112	;'p'
   924  007CE1  2F                 	db	47
   925  007CE2  20                 	db	32
   926  007CE3  52                 	db	82	;'R'
   927  007CE4  65                 	db	101	;'e'
   928  007CE5  73                 	db	115	;'s'
   929  007CE6  65                 	db	101	;'e'
   930  007CE7  74                 	db	116	;'t'
   931  007CE8  00                 	db	0
   932  007CE9                     STR_42:
   933                           
   934                           ; BSR set to: 1
   935  007CE9  42                 	db	66	;'B'
   936  007CEA  6F                 	db	111	;'o'
   937  007CEB  6D                 	db	109	;'m'
   938  007CEC  62                 	db	98	;'b'
   939  007CED  61                 	db	97	;'a'
   940  007CEE  20                 	db	32
   941  007CEF  50                 	db	80	;'P'
   942  007CF0  72                 	db	114	;'r'
   943  007CF1  69                 	db	105	;'i'
   944  007CF2  6E                 	db	110	;'n'
   945  007CF3  63                 	db	99	;'c'
   946  007CF4  69                 	db	105	;'i'
   947  007CF5  70                 	db	112	;'p'
   948  007CF6  61                 	db	97	;'a'
   949  007CF7  6C                 	db	108	;'l'
   950  007CF8  2E                 	db	46
   951  007CF9  2E                 	db	46
   952  007CFA  2E                 	db	46
   953  007CFB  00                 	db	0
   954  007CFC                     STR_43:
   955                           
   956                           ; BSR set to: 1
   957  007CFC  42                 	db	66	;'B'
   958  007CFD  6F                 	db	111	;'o'
   959  007CFE  6D                 	db	109	;'m'
   960  007CFF  62                 	db	98	;'b'
   961  007D00  61                 	db	97	;'a'
   962  007D01  20                 	db	32
   963  007D02  43                 	db	67	;'C'
   964  007D03  6F                 	db	111	;'o'
   965  007D04  6D                 	db	109	;'m'
   966  007D05  62                 	db	98	;'b'
   967  007D06  75                 	db	117	;'u'
   968  007D07  73                 	db	115	;'s'
   969  007D08  74                 	db	116	;'t'
   970  007D09  61                 	db	97	;'a'
   971  007D0A  6F                 	db	111	;'o'
   972  007D0B  2E                 	db	46
   973  007D0C  2E                 	db	46
   974  007D0D  2E                 	db	46
   975  007D0E  00                 	db	0
   976  007D0F                     STR_100:
   977                           
   978                           ; BSR set to: 1
   979  007D0F  43                 	db	67	;'C'
   980  007D10  6F                 	db	111	;'o'
   981  007D11  6E                 	db	110	;'n'
   982  007D12  66                 	db	102	;'f'
   983  007D13  69                 	db	105	;'i'
   984  007D14  67                 	db	103	;'g'
   985  007D15  75                 	db	117	;'u'
   986  007D16  72                 	db	114	;'r'
   987  007D17  61                 	db	97	;'a'
   988  007D18  63                 	db	99	;'c'
   989  007D19  61                 	db	97	;'a'
   990  007D1A  6F                 	db	111	;'o'
   991  007D1B  20                 	db	32
   992  007D1C  74                 	db	116	;'t'
   993  007D1D  65                 	db	101	;'e'
   994  007D1E  6D                 	db	109	;'m'
   995  007D1F  70                 	db	112	;'p'
   996  007D20  6F                 	db	111	;'o'
   997  007D21  00                 	db	0
   998  007D22                     STR_66:
   999                           
  1000                           ; BSR set to: 1
  1001  007D22  45                 	db	69	;'E'
  1002  007D23  72                 	db	114	;'r'
  1003  007D24  72                 	db	114	;'r'
  1004  007D25  6F                 	db	111	;'o'
  1005  007D26  20                 	db	32
  1006  007D27  6E                 	db	110	;'n'
  1007  007D28  6F                 	db	111	;'o'
  1008  007D29  20                 	db	32
  1009  007D2A  54                 	db	84	;'T'
  1010  007D2B  72                 	db	114	;'r'
  1011  007D2C  61                 	db	97	;'a'
  1012  007D2D  6E                 	db	110	;'n'
  1013  007D2E  73                 	db	115	;'s'
  1014  007D2F  64                 	db	100	;'d'
  1015  007D30  75                 	db	117	;'u'
  1016  007D31  74                 	db	116	;'t'
  1017  007D32  6F                 	db	111	;'o'
  1018  007D33  72                 	db	114	;'r'
  1019  007D34  00                 	db	0
  1020  007D35                     STR_12:
  1021                           
  1022                           ; BSR set to: 1
  1023  007D35  41                 	db	65	;'A'
  1024  007D36  54                 	db	84	;'T'
  1025  007D37  2B                 	db	43
  1026  007D38  43                 	db	67	;'C'
  1027  007D39  4D                 	db	77	;'M'
  1028  007D3A  47                 	db	71	;'G'
  1029  007D3B  53                 	db	83	;'S'
  1030  007D3C  3D                 	db	61	;'='
  1031  007D3D  22                 	db	34
  1032  007D3E  2B                 	db	43
  1033  007D3F  35                 	db	53	;'5'
  1034  007D40  35                 	db	53	;'5'
  1035  007D41  25                 	db	37
  1036  007D42  73                 	db	115	;'s'
  1037  007D43  22                 	db	34
  1038  007D44  0D                 	db	13
  1039  007D45  0A                 	db	10
  1040  007D46  00                 	db	0
  1041  007D47                     STR_121:
  1042                           
  1043                           ; BSR set to: 1
  1044  007D47  50                 	db	80	;'P'
  1045  007D48  41                 	db	65	;'A'
  1046  007D49  52                 	db	82	;'R'
  1047  007D4A  54                 	db	84	;'T'
  1048  007D4B  49                 	db	73	;'I'
  1049  007D4C  44                 	db	68	;'D'
  1050  007D4D  41                 	db	65	;'A'
  1051  007D4E  20                 	db	32
  1052  007D4F  43                 	db	67	;'C'
  1053  007D50  4F                 	db	79	;'O'
  1054  007D51  4D                 	db	77	;'M'
  1055  007D52  42                 	db	66	;'B'
  1056  007D53  55                 	db	85	;'U'
  1057  007D54  53                 	db	83	;'S'
  1058  007D55  54                 	db	84	;'T'
  1059  007D56  41                 	db	65	;'A'
  1060  007D57  4F                 	db	79	;'O'
  1061  007D58  00                 	db	0
  1062  007D59                     STR_123:
  1063                           
  1064                           ; BSR set to: 1
  1065  007D59  50                 	db	80	;'P'
  1066  007D5A  45                 	db	69	;'E'
  1067  007D5B  52                 	db	82	;'R'
  1068  007D5C  49                 	db	73	;'I'
  1069  007D5D  4F                 	db	79	;'O'
  1070  007D5E  44                 	db	68	;'D'
  1071  007D5F  4F                 	db	79	;'O'
  1072  007D60  20                 	db	32
  1073  007D61  44                 	db	68	;'D'
  1074  007D62  45                 	db	69	;'E'
  1075  007D63  20                 	db	32
  1076  007D64  54                 	db	84	;'T'
  1077  007D65  45                 	db	69	;'E'
  1078  007D66  53                 	db	83	;'S'
  1079  007D67  54                 	db	84	;'T'
  1080  007D68  45                 	db	69	;'E'
  1081  007D69  53                 	db	83	;'S'
  1082  007D6A  00                 	db	0
  1083  007D6B                     STR_105:
  1084                           
  1085                           ; BSR set to: 1
  1086  007D6B  68                 	db	104	;'h'
  1087  007D6C  6F                 	db	111	;'o'
  1088  007D6D  72                 	db	114	;'r'
  1089  007D6E  69                 	db	105	;'i'
  1090  007D6F  6D                 	db	109	;'m'
  1091  007D70  65                 	db	101	;'e'
  1092  007D71  74                 	db	116	;'t'
  1093  007D72  72                 	db	114	;'r'
  1094  007D73  6F                 	db	111	;'o'
  1095  007D74  3A                 	db	58	;':'
  1096  007D75  25                 	db	37
  1097  007D76  35                 	db	53	;'5'
  1098  007D77  64                 	db	100	;'d'
  1099  007D78  20                 	db	32
  1100  007D79  6D                 	db	109	;'m'
  1101  007D7A  69                 	db	105	;'i'
  1102  007D7B  6E                 	db	110	;'n'
  1103  007D7C  00                 	db	0
  1104  007D7D                     STR_62:
  1105                           
  1106                           ; BSR set to: 1
  1107  007D7D  20                 	db	32
  1108  007D7E  2A                 	db	42
  1109  007D7F  66                 	db	102	;'f'
  1110  007D80  61                 	db	97	;'a'
  1111  007D81  6C                 	db	108	;'l'
  1112  007D82  68                 	db	104	;'h'
  1113  007D83  61                 	db	97	;'a'
  1114  007D84  20                 	db	32
  1115  007D85  42                 	db	66	;'B'
  1116  007D86  2E                 	db	46
  1117  007D87  20                 	db	32
  1118  007D88  6A                 	db	106	;'j'
  1119  007D89  6F                 	db	111	;'o'
  1120  007D8A  63                 	db	99	;'c'
  1121  007D8B  6B                 	db	107	;'k'
  1122  007D8C  65                 	db	101	;'e'
  1123  007D8D  79                 	db	121	;'y'
  1124  007D8E  00                 	db	0
  1125  007D8F                     STR_47:
  1126                           
  1127                           ; BSR set to: 1
  1128  007D8F  54                 	db	84	;'T'
  1129  007D90  65                 	db	101	;'e'
  1130  007D91  73                 	db	115	;'s'
  1131  007D92  74                 	db	116	;'t'
  1132  007D93  65                 	db	101	;'e'
  1133  007D94  20                 	db	32
  1134  007D95  43                 	db	67	;'C'
  1135  007D96  6F                 	db	111	;'o'
  1136  007D97  6E                 	db	110	;'n'
  1137  007D98  63                 	db	99	;'c'
  1138  007D99  6C                 	db	108	;'l'
  1139  007D9A  75                 	db	117	;'u'
  1140  007D9B  69                 	db	105	;'i'
  1141  007D9C  64                 	db	100	;'d'
  1142  007D9D  6F                 	db	111	;'o'
  1143  007D9E  21                 	db	33
  1144  007D9F  00                 	db	0
  1145  007DA0                     STR_59:
  1146                           
  1147                           ; BSR set to: 1
  1148  007DA0  20                 	db	32
  1149  007DA1  2A                 	db	42
  1150  007DA2  66                 	db	102	;'f'
  1151  007DA3  61                 	db	97	;'a'
  1152  007DA4  6C                 	db	108	;'l'
  1153  007DA5  68                 	db	104	;'h'
  1154  007DA6  61                 	db	97	;'a'
  1155  007DA7  20                 	db	32
  1156  007DA8  65                 	db	101	;'e'
  1157  007DA9  6C                 	db	108	;'l'
  1158  007DAA  65                 	db	101	;'e'
  1159  007DAB  74                 	db	116	;'t'
  1160  007DAC  72                 	db	114	;'r'
  1161  007DAD  69                 	db	105	;'i'
  1162  007DAE  63                 	db	99	;'c'
  1163  007DAF  61                 	db	97	;'a'
  1164  007DB0  00                 	db	0
  1165  007DB1                     STR_99:
  1166                           
  1167                           ; BSR set to: 1
  1168  007DB1  45                 	db	69	;'E'
  1169  007DB2  6E                 	db	110	;'n'
  1170  007DB3  76                 	db	118	;'v'
  1171  007DB4  69                 	db	105	;'i'
  1172  007DB5  61                 	db	97	;'a'
  1173  007DB6  72                 	db	114	;'r'
  1174  007DB7  20                 	db	32
  1175  007DB8  73                 	db	115	;'s'
  1176  007DB9  6D                 	db	109	;'m'
  1177  007DBA  73                 	db	115	;'s'
  1178  007DBB  20                 	db	32
  1179  007DBC  74                 	db	116	;'t'
  1180  007DBD  65                 	db	101	;'e'
  1181  007DBE  73                 	db	115	;'s'
  1182  007DBF  74                 	db	116	;'t'
  1183  007DC0  65                 	db	101	;'e'
  1184  007DC1  00                 	db	0
  1185  007DC2                     STR_57:
  1186                           
  1187                           ; BSR set to: 1
  1188  007DC2  65                 	db	101	;'e'
  1189  007DC3  6E                 	db	110	;'n'
  1190  007DC4  76                 	db	118	;'v'
  1191  007DC5  69                 	db	105	;'i'
  1192  007DC6  61                 	db	97	;'a'
  1193  007DC7  6E                 	db	110	;'n'
  1194  007DC8  64                 	db	100	;'d'
  1195  007DC9  6F                 	db	111	;'o'
  1196  007DCA  20                 	db	32
  1197  007DCB  53                 	db	83	;'S'
  1198  007DCC  4D                 	db	77	;'M'
  1199  007DCD  53                 	db	83	;'S'
  1200  007DCE  2E                 	db	46
  1201  007DCF  2E                 	db	46
  1202  007DD0  2E                 	db	46
  1203  007DD1  00                 	db	0
  1204  007DD2                     STR_41:
  1205                           
  1206                           ; BSR set to: 1
  1207  007DD2  42                 	db	66	;'B'
  1208  007DD3  6F                 	db	111	;'o'
  1209  007DD4  6D                 	db	109	;'m'
  1210  007DD5  62                 	db	98	;'b'
  1211  007DD6  61                 	db	97	;'a'
  1212  007DD7  20                 	db	32
  1213  007DD8  4A                 	db	74	;'J'
  1214  007DD9  6F                 	db	111	;'o'
  1215  007DDA  63                 	db	99	;'c'
  1216  007DDB  6B                 	db	107	;'k'
  1217  007DDC  65                 	db	101	;'e'
  1218  007DDD  79                 	db	121	;'y'
  1219  007DDE  2E                 	db	46
  1220  007DDF  2E                 	db	46
  1221  007DE0  2E                 	db	46
  1222  007DE1  00                 	db	0
  1223  007DE2                     STR_120:
  1224                           
  1225                           ; BSR set to: 1
  1226  007DE2  50                 	db	80	;'P'
  1227  007DE3  52                 	db	82	;'R'
  1228  007DE4  45                 	db	69	;'E'
  1229  007DE5  53                 	db	83	;'S'
  1230  007DE6  53                 	db	83	;'S'
  1231  007DE7  41                 	db	65	;'A'
  1232  007DE8  4F                 	db	79	;'O'
  1233  007DE9  20                 	db	32
  1234  007DEA  44                 	db	68	;'D'
  1235  007DEB  41                 	db	65	;'A'
  1236  007DEC  20                 	db	32
  1237  007DED  52                 	db	82	;'R'
  1238  007DEE  45                 	db	69	;'E'
  1239  007DEF  44                 	db	68	;'D'
  1240  007DF0  45                 	db	69	;'E'
  1241  007DF1  00                 	db	0
  1242  007DF2                     STR_40:
  1243                           
  1244                           ; BSR set to: 1
  1245  007DF2  50                 	db	80	;'P'
  1246  007DF3  72                 	db	114	;'r'
  1247  007DF4  65                 	db	101	;'e'
  1248  007DF5  73                 	db	115	;'s'
  1249  007DF6  73                 	db	115	;'s'
  1250  007DF7  61                 	db	97	;'a'
  1251  007DF8  6F                 	db	111	;'o'
  1252  007DF9  20                 	db	32
  1253  007DFA  25                 	db	37
  1254  007DFB  73                 	db	115	;'s'
  1255  007DFC  20                 	db	32
  1256  007DFD  42                 	db	66	;'B'
  1257  007DFE  41                 	db	65	;'A'
  1258  007DFF  52                 	db	82	;'R'
  1259  007E00  00                 	db	0
  1260  007E01                     STR_70:
  1261                           
  1262                           ; BSR set to: 1
  1263  007E01  25                 	db	37
  1264  007E02  30                 	db	48	;'0'
  1265  007E03  32                 	db	50	;'2'
  1266  007E04  64                 	db	100	;'d'
  1267  007E05  2F                 	db	47
  1268  007E06  25                 	db	37
  1269  007E07  30                 	db	48	;'0'
  1270  007E08  32                 	db	50	;'2'
  1271  007E09  64                 	db	100	;'d'
  1272  007E0A  2F                 	db	47
  1273  007E0B  25                 	db	37
  1274  007E0C  30                 	db	48	;'0'
  1275  007E0D  32                 	db	50	;'2'
  1276  007E0E  64                 	db	100	;'d'
  1277  007E0F  00                 	db	0
  1278  007E10                     STR_72:
  1279                           
  1280                           ; BSR set to: 1
  1281  007E10  25                 	db	37
  1282  007E11  30                 	db	48	;'0'
  1283  007E12  32                 	db	50	;'2'
  1284  007E13  64                 	db	100	;'d'
  1285  007E14  3A                 	db	58	;':'
  1286  007E15  25                 	db	37
  1287  007E16  30                 	db	48	;'0'
  1288  007E17  32                 	db	50	;'2'
  1289  007E18  64                 	db	100	;'d'
  1290  007E19  3A                 	db	58	;':'
  1291  007E1A  25                 	db	37
  1292  007E1B  30                 	db	48	;'0'
  1293  007E1C  32                 	db	50	;'2'
  1294  007E1D  64                 	db	100	;'d'
  1295  007E1E  00                 	db	0
  1296  007E1F                     STR_51:
  1297                           
  1298                           ; BSR set to: 1
  1299  007E1F  50                 	db	80	;'P'
  1300  007E20  52                 	db	82	;'R'
  1301  007E21  49                 	db	73	;'I'
  1302  007E22  4E                 	db	78	;'N'
  1303  007E23  43                 	db	67	;'C'
  1304  007E24  49                 	db	73	;'I'
  1305  007E25  50                 	db	80	;'P'
  1306  007E26  41                 	db	65	;'A'
  1307  007E27  4C                 	db	76	;'L'
  1308  007E28  20                 	db	32
  1309  007E29  3A                 	db	58	;':'
  1310  007E2A  20                 	db	32
  1311  007E2B  25                 	db	37
  1312  007E2C  73                 	db	115	;'s'
  1313  007E2D  00                 	db	0
  1314  007E2E                     STR_54:
  1315                           
  1316                           ; BSR set to: 1
  1317  007E2E  43                 	db	67	;'C'
  1318  007E2F  4F                 	db	79	;'O'
  1319  007E30  4D                 	db	77	;'M'
  1320  007E31  42                 	db	66	;'B'
  1321  007E32  55                 	db	85	;'U'
  1322  007E33  53                 	db	83	;'S'
  1323  007E34  54                 	db	84	;'T'
  1324  007E35  41                 	db	65	;'A'
  1325  007E36  4F                 	db	79	;'O'
  1326  007E37  20                 	db	32
  1327  007E38  3A                 	db	58	;':'
  1328  007E39  20                 	db	32
  1329  007E3A  25                 	db	37
  1330  007E3B  73                 	db	115	;'s'
  1331  007E3C  00                 	db	0
  1332  007E3D                     STR_39:
  1333                           
  1334                           ; BSR set to: 1
  1335  007E3D  41                 	db	65	;'A'
  1336  007E3E  67                 	db	103	;'g'
  1337  007E3F  75                 	db	117	;'u'
  1338  007E40  61                 	db	97	;'a'
  1339  007E41  72                 	db	114	;'r'
  1340  007E42  64                 	db	100	;'d'
  1341  007E43  65                 	db	101	;'e'
  1342  007E44  2E                 	db	46
  1343  007E45  2E                 	db	46
  1344  007E46  2E                 	db	46
  1345  007E47  20                 	db	32
  1346  007E48  25                 	db	37
  1347  007E49  64                 	db	100	;'d'
  1348  007E4A  73                 	db	115	;'s'
  1349  007E4B  00                 	db	0
  1350  007E4C                     STR_126:
  1351                           
  1352                           ; BSR set to: 1
  1353  007E4C  49                 	db	73	;'I'
  1354  007E4D  6E                 	db	110	;'n'
  1355  007E4E  69                 	db	105	;'i'
  1356  007E4F  63                 	db	99	;'c'
  1357  007E50  69                 	db	105	;'i'
  1358  007E51  61                 	db	97	;'a'
  1359  007E52  72                 	db	114	;'r'
  1360  007E53  20                 	db	32
  1361  007E54  54                 	db	84	;'T'
  1362  007E55  65                 	db	101	;'e'
  1363  007E56  73                 	db	115	;'s'
  1364  007E57  74                 	db	116	;'t'
  1365  007E58  65                 	db	101	;'e'
  1366  007E59  73                 	db	115	;'s'
  1367  007E5A  00                 	db	0
  1368  007E5B                     STR_116:
  1369                           
  1370                           ; BSR set to: 1
  1371  007E5B  56                 	db	86	;'V'
  1372  007E5C  65                 	db	101	;'e'
  1373  007E5D  72                 	db	114	;'r'
  1374  007E5E  73                 	db	115	;'s'
  1375  007E5F  61                 	db	97	;'a'
  1376  007E60  6F                 	db	111	;'o'
  1377  007E61  20                 	db	32
  1378  007E62  53                 	db	83	;'S'
  1379  007E63  6F                 	db	111	;'o'
  1380  007E64  66                 	db	102	;'f'
  1381  007E65  74                 	db	116	;'t'
  1382  007E66  2E                 	db	46
  1383  007E67  3A                 	db	58	;':'
  1384  007E68  00                 	db	0
  1385  007E69                     STR_101:
  1386                           
  1387                           ; BSR set to: 1
  1388  007E69  4D                 	db	77	;'M'
  1389  007E6A  61                 	db	97	;'a'
  1390  007E6B  78                 	db	120	;'x'
  1391  007E6C  2E                 	db	46
  1392  007E6D  20                 	db	32
  1393  007E6E  50                 	db	80	;'P'
  1394  007E6F  41                 	db	65	;'A'
  1395  007E70  52                 	db	82	;'R'
  1396  007E71  54                 	db	84	;'T'
  1397  007E72  49                 	db	73	;'I'
  1398  007E73  44                 	db	68	;'D'
  1399  007E74  41                 	db	65	;'A'
  1400  007E75  3A                 	db	58	;':'
  1401  007E76  00                 	db	0
  1402  007E77                     STR_84:
  1403                           
  1404                           ; BSR set to: 1
  1405  007E77  50                 	db	80	;'P'
  1406  007E78  72                 	db	114	;'r'
  1407  007E79  69                 	db	105	;'i'
  1408  007E7A  6E                 	db	110	;'n'
  1409  007E7B  63                 	db	99	;'c'
  1410  007E7C  69                 	db	105	;'i'
  1411  007E7D  70                 	db	112	;'p'
  1412  007E7E  61                 	db	97	;'a'
  1413  007E7F  6C                 	db	108	;'l'
  1414  007E80  3A                 	db	58	;':'
  1415  007E81  20                 	db	32
  1416  007E82  25                 	db	37
  1417  007E83  73                 	db	115	;'s'
  1418  007E84  00                 	db	0
  1419  007E85                     STR_87:
  1420                           
  1421                           ; BSR set to: 1
  1422  007E85  43                 	db	67	;'C'
  1423  007E86  6F                 	db	111	;'o'
  1424  007E87  6D                 	db	109	;'m'
  1425  007E88  62                 	db	98	;'b'
  1426  007E89  75                 	db	117	;'u'
  1427  007E8A  73                 	db	115	;'s'
  1428  007E8B  74                 	db	116	;'t'
  1429  007E8C  61                 	db	97	;'a'
  1430  007E8D  6F                 	db	111	;'o'
  1431  007E8E  3A                 	db	58	;':'
  1432  007E8F  20                 	db	32
  1433  007E90  25                 	db	37
  1434  007E91  73                 	db	115	;'s'
  1435  007E92  00                 	db	0
  1436  007E93                     STR_98:
  1437                           
  1438                           ; BSR set to: 1
  1439  007E93  20                 	db	32
  1440  007E94  61                 	db	97	;'a'
  1441  007E95  67                 	db	103	;'g'
  1442  007E96  75                 	db	117	;'u'
  1443  007E97  61                 	db	97	;'a'
  1444  007E98  72                 	db	114	;'r'
  1445  007E99  64                 	db	100	;'d'
  1446  007E9A  65                 	db	101	;'e'
  1447  007E9B  2E                 	db	46
  1448  007E9C  2E                 	db	46
  1449  007E9D  2E                 	db	46
  1450  007E9E  20                 	db	32
  1451  007E9F  00                 	db	0
  1452  007EA0                     STR_46:
  1453                           
  1454                           ; BSR set to: 1
  1455  007EA0  52                 	db	82	;'R'
  1456  007EA1  65                 	db	101	;'e'
  1457  007EA2  6C                 	db	108	;'l'
  1458  007EA3  69                 	db	105	;'i'
  1459  007EA4  67                 	db	103	;'g'
  1460  007EA5  61                 	db	97	;'a'
  1461  007EA6  6E                 	db	110	;'n'
  1462  007EA7  64                 	db	100	;'d'
  1463  007EA8  6F                 	db	111	;'o'
  1464  007EA9  2E                 	db	46
  1465  007EAA  2E                 	db	46
  1466  007EAB  2E                 	db	46
  1467  007EAC  00                 	db	0
  1468  007EAD                     STR_10:
  1469                           
  1470                           ; BSR set to: 1
  1471  007EAD  41                 	db	65	;'A'
  1472  007EAE  54                 	db	84	;'T'
  1473  007EAF  2B                 	db	43
  1474  007EB0  43                 	db	67	;'C'
  1475  007EB1  4D                 	db	77	;'M'
  1476  007EB2  47                 	db	71	;'G'
  1477  007EB3  46                 	db	70	;'F'
  1478  007EB4  3D                 	db	61	;'='
  1479  007EB5  31                 	db	49	;'1'
  1480  007EB6  0D                 	db	13
  1481  007EB7  0A                 	db	10
  1482  007EB8  00                 	db	0
  1483  007EB9                     STR_15:
  1484                           
  1485                           ; BSR set to: 1
  1486  007EB9  4A                 	db	74	;'J'
  1487  007EBA  75                 	db	117	;'u'
  1488  007EBB  6C                 	db	108	;'l'
  1489  007EBC  20                 	db	32
  1490  007EBD  31                 	db	49	;'1'
  1491  007EBE  36                 	db	54	;'6'
  1492  007EBF  20                 	db	32
  1493  007EC0  32                 	db	50	;'2'
  1494  007EC1  30                 	db	48	;'0'
  1495  007EC2  32                 	db	50	;'2'
  1496  007EC3  30                 	db	48	;'0'
  1497  007EC4  00                 	db	0
  1498  007EC5                     STR_103:
  1499                           
  1500                           ; BSR set to: 1
  1501  007EC5  4D                 	db	77	;'M'
  1502  007EC6  61                 	db	97	;'a'
  1503  007EC7  78                 	db	120	;'x'
  1504  007EC8  2E                 	db	46
  1505  007EC9  20                 	db	32
  1506  007ECA  54                 	db	84	;'T'
  1507  007ECB  45                 	db	69	;'E'
  1508  007ECC  53                 	db	83	;'S'
  1509  007ECD  54                 	db	84	;'T'
  1510  007ECE  45                 	db	69	;'E'
  1511  007ECF  3A                 	db	58	;':'
  1512  007ED0  00                 	db	0
  1513  007ED1                     STR_36:
  1514                           
  1515                           ; BSR set to: 1
  1516  007ED1  4E                 	db	78	;'N'
  1517  007ED2  4F                 	db	79	;'O'
  1518  007ED3  20                 	db	32
  1519  007ED4  44                 	db	68	;'D'
  1520  007ED5  49                 	db	73	;'I'
  1521  007ED6  41                 	db	65	;'A'
  1522  007ED7  4C                 	db	76	;'L'
  1523  007ED8  54                 	db	84	;'T'
  1524  007ED9  4F                 	db	79	;'O'
  1525  007EDA  4E                 	db	78	;'N'
  1526  007EDB  45                 	db	69	;'E'
  1527  007EDC  00                 	db	0
  1528  007EDD                     STR_60:
  1529                           
  1530                           ; BSR set to: 1
  1531  007EDD  20                 	db	32
  1532  007EDE  2A                 	db	42
  1533  007EDF  66                 	db	102	;'f'
  1534  007EE0  61                 	db	97	;'a'
  1535  007EE1  6C                 	db	108	;'l'
  1536  007EE2  68                 	db	104	;'h'
  1537  007EE3  61                 	db	97	;'a'
  1538  007EE4  20                 	db	32
  1539  007EE5  47                 	db	71	;'G'
  1540  007EE6  53                 	db	83	;'S'
  1541  007EE7  4D                 	db	77	;'M'
  1542  007EE8  00                 	db	0
  1543  007EE9                     STR_125:
  1544                           
  1545                           ; BSR set to: 1
  1546  007EE9  49                 	db	73	;'I'
  1547  007EEA  4E                 	db	78	;'N'
  1548  007EEB  46                 	db	70	;'F'
  1549  007EEC  4F                 	db	79	;'O'
  1550  007EED  20                 	db	32
  1551  007EEE  56                 	db	86	;'V'
  1552  007EEF  45                 	db	69	;'E'
  1553  007EF0  52                 	db	82	;'R'
  1554  007EF1  53                 	db	83	;'S'
  1555  007EF2  41                 	db	65	;'A'
  1556  007EF3  4F                 	db	79	;'O'
  1557  007EF4  00                 	db	0
  1558  007EF5                     STR_93:
  1559                           
  1560                           ; BSR set to: 1
  1561  007EF5  76                 	db	118	;'v'
  1562  007EF6  65                 	db	101	;'e'
  1563  007EF7  72                 	db	114	;'r'
  1564  007EF8  73                 	db	115	;'s'
  1565  007EF9  61                 	db	97	;'a'
  1566  007EFA  6F                 	db	111	;'o'
  1567  007EFB  20                 	db	32
  1568  007EFC  2D                 	db	45
  1569  007EFD  20                 	db	32
  1570  007EFE  25                 	db	37
  1571  007EFF  73                 	db	115	;'s'
  1572  007F00  00                 	db	0
  1573  007F01                     STR_35:
  1574                           
  1575                           ; BSR set to: 1
  1576  007F01  41                 	db	65	;'A'
  1577  007F02  54                 	db	84	;'T'
  1578  007F03  44                 	db	68	;'D'
  1579  007F04  20                 	db	32
  1580  007F05  30                 	db	48	;'0'
  1581  007F06  25                 	db	37
  1582  007F07  73                 	db	115	;'s'
  1583  007F08  3B                 	db	59	;';'
  1584  007F09  0D                 	db	13
  1585  007F0A  0A                 	db	10
  1586  007F0B  00                 	db	0
  1587  007F0C                     
  1588                           ; BSR set to: 1
  1589  007F0C  74                 	db	116	;'t'
  1590  007F0D  65                 	db	101	;'e'
  1591  007F0E  74                 	db	116	;'t'
  1592  007F0F  61                 	db	97	;'a'
  1593  007F10  70                 	db	112	;'p'
  1594  007F11  61                 	db	97	;'a'
  1595  007F12  20                 	db	32
  1596  007F13  25                 	db	37
  1597  007F14  64                 	db	100	;'d'
  1598  007F15  20                 	db	32
  1599  007F16  00                 	db	0
  1600  007F17                     STR_83:
  1601                           
  1602                           ; BSR set to: 1
  1603  007F17  23                 	db	35
  1604  007F18  25                 	db	37
  1605  007F19  30                 	db	48	;'0'
  1606  007F1A  32                 	db	50	;'2'
  1607  007F1B  64                 	db	100	;'d'
  1608  007F1C  2F                 	db	47
  1609  007F1D  25                 	db	37
  1610  007F1E  30                 	db	48	;'0'
  1611  007F1F  32                 	db	50	;'2'
  1612  007F20  64                 	db	100	;'d'
  1613  007F21  00                 	db	0
  1614  007F22                     STR_106:
  1615                           
  1616                           ; BSR set to: 1
  1617  007F22  47                 	db	71	;'G'
  1618  007F23  45                 	db	69	;'E'
  1619  007F24  52                 	db	82	;'R'
  1620  007F25  41                 	db	65	;'A'
  1621  007F26  4C                 	db	76	;'L'
  1622  007F27  20                 	db	32
  1623  007F28  3A                 	db	58	;':'
  1624  007F29  20                 	db	32
  1625  007F2A  25                 	db	37
  1626  007F2B  73                 	db	115	;'s'
  1627  007F2C  00                 	db	0
  1628  007F2D                     STR_48:
  1629                           
  1630                           ; BSR set to: 1
  1631  007F2D  4A                 	db	74	;'J'
  1632  007F2E  4F                 	db	79	;'O'
  1633  007F2F  4B                 	db	75	;'K'
  1634  007F30  45                 	db	69	;'E'
  1635  007F31  59                 	db	89	;'Y'
  1636  007F32  20                 	db	32
  1637  007F33  3A                 	db	58	;':'
  1638  007F34  20                 	db	32
  1639  007F35  25                 	db	37
  1640  007F36  73                 	db	115	;'s'
  1641  007F37  00                 	db	0
  1642  007F38                     STR_76:
  1643                           
  1644                           ; BSR set to: 1
  1645  007F38  41                 	db	65	;'A'
  1646  007F39  54                 	db	84	;'T'
  1647  007F3A  49                 	db	73	;'I'
  1648  007F3B  56                 	db	86	;'V'
  1649  007F3C  41                 	db	65	;'A'
  1650  007F3D  52                 	db	82	;'R'
  1651  007F3E  3A                 	db	58	;':'
  1652  007F3F  20                 	db	32
  1653  007F40  25                 	db	37
  1654  007F41  73                 	db	115	;'s'
  1655  007F42  00                 	db	0
  1656  007F43                     STR_45:
  1657                           
  1658                           ; BSR set to: 1
  1659  007F43  4C                 	db	76	;'L'
  1660  007F44  69                 	db	105	;'i'
  1661  007F45  67                 	db	103	;'g'
  1662  007F46  61                 	db	97	;'a'
  1663  007F47  64                 	db	100	;'d'
  1664  007F48  61                 	db	97	;'a'
  1665  007F49  2E                 	db	46
  1666  007F4A  2E                 	db	46
  1667  007F4B  2E                 	db	46
  1668  007F4C  00                 	db	0
  1669  007F4D                     STR_119:
  1670                           
  1671                           ; BSR set to: 1
  1672  007F4D  44                 	db	68	;'D'
  1673  007F4E  41                 	db	65	;'A'
  1674  007F4F  54                 	db	84	;'T'
  1675  007F50  41                 	db	65	;'A'
  1676  007F51  2F                 	db	47
  1677  007F52  48                 	db	72	;'H'
  1678  007F53  4F                 	db	79	;'O'
  1679  007F54  52                 	db	82	;'R'
  1680  007F55  41                 	db	65	;'A'
  1681  007F56  00                 	db	0
  1682  007F57                     STR_124:
  1683                           
  1684                           ; BSR set to: 1
  1685  007F57  44                 	db	68	;'D'
  1686  007F58  41                 	db	65	;'A'
  1687  007F59  54                 	db	84	;'T'
  1688  007F5A  41                 	db	65	;'A'
  1689  007F5B  4C                 	db	76	;'L'
  1690  007F5C  4F                 	db	79	;'O'
  1691  007F5D  47                 	db	71	;'G'
  1692  007F5E  45                 	db	69	;'E'
  1693  007F5F  52                 	db	82	;'R'
  1694  007F60  00                 	db	0
  1695  007F61                     STR_122:
  1696                           
  1697                           ; BSR set to: 1
  1698  007F61  54                 	db	84	;'T'
  1699  007F62  45                 	db	69	;'E'
  1700  007F63  4C                 	db	76	;'L'
  1701  007F64  45                 	db	69	;'E'
  1702  007F65  46                 	db	70	;'F'
  1703  007F66  4F                 	db	79	;'O'
  1704  007F67  4E                 	db	78	;'N'
  1705  007F68  45                 	db	69	;'E'
  1706  007F69  53                 	db	83	;'S'
  1707  007F6A  00                 	db	0
  1708  007F6B                     
  1709                           ; BSR set to: 1
  1710  007F6B  74                 	db	116	;'t'
  1711  007F6C  73                 	db	115	;'s'
  1712  007F6D  69                 	db	105	;'i'
  1713  007F6E  6E                 	db	110	;'n'
  1714  007F6F  61                 	db	97	;'a'
  1715  007F70  6C                 	db	108	;'l'
  1716  007F71  20                 	db	32
  1717  007F72  25                 	db	37
  1718  007F73  64                 	db	100	;'d'
  1719  007F74  00                 	db	0
  1720  007F75                     STR_80:
  1721                           
  1722                           ; BSR set to: 1
  1723  007F75  4A                 	db	74	;'J'
  1724  007F76  6F                 	db	111	;'o'
  1725  007F77  6B                 	db	107	;'k'
  1726  007F78  65                 	db	101	;'e'
  1727  007F79  79                 	db	121	;'y'
  1728  007F7A  3A                 	db	58	;':'
  1729  007F7B  20                 	db	32
  1730  007F7C  25                 	db	37
  1731  007F7D  73                 	db	115	;'s'
  1732  007F7E  00                 	db	0
  1733  007F7F                     STR_3:
  1734                           
  1735                           ; BSR set to: 1
  1736  007F7F  41                 	db	65	;'A'
  1737  007F80  54                 	db	84	;'T'
  1738  007F81  2B                 	db	43
  1739  007F82  43                 	db	67	;'C'
  1740  007F83  53                 	db	83	;'S'
  1741  007F84  51                 	db	81	;'Q'
  1742  007F85  0D                 	db	13
  1743  007F86  0A                 	db	10
  1744  007F87  00                 	db	0
  1745  007F88                     
  1746                           ; BSR set to: 1
  1747  007F88  65                 	db	101	;'e'
  1748  007F89  74                 	db	116	;'t'
  1749  007F8A  61                 	db	97	;'a'
  1750  007F8B  70                 	db	112	;'p'
  1751  007F8C  61                 	db	97	;'a'
  1752  007F8D  20                 	db	32
  1753  007F8E  25                 	db	37
  1754  007F8F  64                 	db	100	;'d'
  1755  007F90  00                 	db	0
  1756  007F91                     STR_44:
  1757                           
  1758                           ; BSR set to: 1
  1759  007F91  42                 	db	66	;'B'
  1760  007F92  6F                 	db	111	;'o'
  1761  007F93  6D                 	db	109	;'m'
  1762  007F94  62                 	db	98	;'b'
  1763  007F95  61                 	db	97	;'a'
  1764  007F96  20                 	db	32
  1765  007F97  25                 	db	37
  1766  007F98  73                 	db	115	;'s'
  1767  007F99  00                 	db	0
  1768  007F9A                     STR_90:
  1769                           
  1770                           ; BSR set to: 1
  1771  007F9A  54                 	db	84	;'T'
  1772  007F9B  45                 	db	69	;'E'
  1773  007F9C  43                 	db	67	;'C'
  1774  007F9D  48                 	db	72	;'H'
  1775  007F9E  4E                 	db	78	;'N'
  1776  007F9F  4F                 	db	79	;'O'
  1777  007FA0  57                 	db	87	;'W'
  1778  007FA1  00                 	db	0
  1779  007FA2                     STR_127:
  1780                           
  1781                           ; BSR set to: 1
  1782  007FA2  28                 	db	40
  1783  007FA3  6E                 	db	110	;'n'
  1784  007FA4  75                 	db	117	;'u'
  1785  007FA5  6C                 	db	108	;'l'
  1786  007FA6  6C                 	db	108	;'l'
  1787  007FA7  29                 	db	41
  1788  007FA8  00                 	db	0
  1789  007FA9                     STR_21:
  1790                           
  1791                           ; BSR set to: 1
  1792  007FA9  41                 	db	65	;'A'
  1793  007FAA  54                 	db	84	;'T'
  1794  007FAB  48                 	db	72	;'H'
  1795  007FAC  30                 	db	48	;'0'
  1796  007FAD  0D                 	db	13
  1797  007FAE  0A                 	db	10
  1798  007FAF  00                 	db	0
  1799  007FB0                     STR_6:
  1800                           
  1801                           ; BSR set to: 1
  1802  007FB0  2B                 	db	43
  1803  007FB1  43                 	db	67	;'C'
  1804  007FB2  53                 	db	83	;'S'
  1805  007FB3  51                 	db	81	;'Q'
  1806  007FB4  3A                 	db	58	;':'
  1807  007FB5  20                 	db	32
  1808  007FB6  00                 	db	0
  1809  007FB7                     STR_95:
  1810                           
  1811                           ; BSR set to: 1
  1812  007FB7  54                 	db	84	;'T'
  1813  007FB8  31                 	db	49	;'1'
  1814  007FB9  3A                 	db	58	;':'
  1815  007FBA  20                 	db	32
  1816  007FBB  25                 	db	37
  1817  007FBC  73                 	db	115	;'s'
  1818  007FBD  00                 	db	0
  1819  007FBE                     STR_96:
  1820                           
  1821                           ; BSR set to: 1
  1822  007FBE  54                 	db	84	;'T'
  1823  007FBF  32                 	db	50	;'2'
  1824  007FC0  3A                 	db	58	;':'
  1825  007FC1  20                 	db	32
  1826  007FC2  25                 	db	37
  1827  007FC3  73                 	db	115	;'s'
  1828  007FC4  00                 	db	0
  1829  007FC5                     STR_71:
  1830                           
  1831                           ; BSR set to: 1
  1832  007FC5  48                 	db	72	;'H'
  1833  007FC6  4F                 	db	79	;'O'
  1834  007FC7  52                 	db	82	;'R'
  1835  007FC8  41                 	db	65	;'A'
  1836  007FC9  3A                 	db	58	;':'
  1837  007FCA  00                 	db	0
  1838  007FCB                     STR_69:
  1839                           
  1840                           ; BSR set to: 1
  1841  007FCB  44                 	db	68	;'D'
  1842  007FCC  41                 	db	65	;'A'
  1843  007FCD  54                 	db	84	;'T'
  1844  007FCE  41                 	db	65	;'A'
  1845  007FCF  3A                 	db	58	;':'
  1846  007FD0  00                 	db	0
  1847  007FD1                     STR_28:
  1848                           
  1849                           ; BSR set to: 1
  1850  007FD1  46                 	db	70	;'F'
  1851  007FD2  41                 	db	65	;'A'
  1852  007FD3  4C                 	db	76	;'L'
  1853  007FD4  48                 	db	72	;'H'
  1854  007FD5  41                 	db	65	;'A'
  1855  007FD6  00                 	db	0
  1856  007FD7                     STR_17:
  1857                           
  1858                           ; BSR set to: 1
  1859  007FD7  45                 	db	69	;'E'
  1860  007FD8  52                 	db	82	;'R'
  1861  007FD9  52                 	db	82	;'R'
  1862  007FDA  4F                 	db	79	;'O'
  1863  007FDB  52                 	db	82	;'R'
  1864  007FDC  00                 	db	0
  1865  007FDD                     STR_4:
  1866                           
  1867                           ; BSR set to: 1
  1868  007FDD  41                 	db	65	;'A'
  1869  007FDE  54                 	db	84	;'T'
  1870  007FDF  0D                 	db	13
  1871  007FE0  0A                 	db	10
  1872  007FE1  00                 	db	0
  1873  007FE2                     STR_50:
  1874                           
  1875                           ; BSR set to: 1
  1876  007FE2  45                 	db	69	;'E'
  1877  007FE3  52                 	db	82	;'R'
  1878  007FE4  52                 	db	82	;'R'
  1879  007FE5  4F                 	db	79	;'O'
  1880  007FE6  00                 	db	0
  1881  007FE7                     STR_1:
  1882                           
  1883                           ; BSR set to: 1
  1884  007FE7  25                 	db	37
  1885  007FE8  73                 	db	115	;'s'
  1886  007FE9  25                 	db	37
  1887  007FEA  63                 	db	99	;'c'
  1888  007FEB  00                 	db	0
  1889  007FEC                     STR_102:
  1890                           
  1891                           ; BSR set to: 1
  1892  007FEC  25                 	db	37
  1893  007FED  33                 	db	51	;'3'
  1894  007FEE  64                 	db	100	;'d'
  1895  007FEF  73                 	db	115	;'s'
  1896  007FF0  00                 	db	0
  1897  007FF1                     STR_78:
  1898                           
  1899                           ; BSR set to: 1
  1900  007FF1  53                 	db	83	;'S'
  1901  007FF2  69                 	db	105	;'i'
  1902  007FF3  6D                 	db	109	;'m'
  1903  007FF4  00                 	db	0
  1904  007FF5                     STR_77:
  1905                           
  1906                           ; BSR set to: 1
  1907  007FF5  4E                 	db	78	;'N'
  1908  007FF6  61                 	db	97	;'a'
  1909  007FF7  6F                 	db	111	;'o'
  1910  007FF8  00                 	db	0
  1911  007FF9                     STR_5:
  1912                           
  1913                           ; BSR set to: 1
  1914  007FF9  4F                 	db	79	;'O'
  1915  007FFA  4B                 	db	75	;'K'
  1916  007FFB  00                 	db	0
  1917  007FFC                     STR_13:
  1918                           
  1919                           ; BSR set to: 1
  1920  007FFC  3E                 	db	62	;'>'
  1921  007FFD  00                 	db	0
  1922  0000                     
  1923                           ; #config settings
  1924  007FFE  00                 	db	0	; dummy byte at the end
  1925  0000                     
  1926                           	psect	cinit
  1927  0077B8                     __pcinit:
  1928                           	opt stack 0
  1929  0077B8                     start_initialization:
  1930                           	opt stack 0
  1931  0077B8                     __initialization:
  1932                           	opt stack 0
  1933                           
  1934                           ; Initialize objects allocated to BANK1 (8 bytes)
  1935                           ; load TBLPTR registers with __pidataBANK1
  1936  0077B8  0E38               	movlw	low __pidataBANK1
  1937  0077BA  6EF6               	movwf	tblptrl,c
  1938  0077BC  0E6B               	movlw	high __pidataBANK1
  1939  0077BE  6EF7               	movwf	tblptrh,c
  1940  0077C0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1941  0077C2  6EF8               	movwf	tblptru,c
  1942  0077C4  EE01  F0DF         	lfsr	0,__pdataBANK1
  1943  0077C8  EE10 F008          	lfsr	1,8
  1944  0077CC                     copy_data0:
  1945  0077CC  0009               	tblrd		*+
  1946  0077CE  CFF5 FFEE          	movff	tablat,postinc0
  1947  0077D2  50E5               	movf	postdec1,w,c
  1948  0077D4  50E1               	movf	fsr1l,w,c
  1949  0077D6  E1FA               	bnz	copy_data0
  1950                           
  1951                           ; Initialize objects allocated to BANK0 (6 bytes)
  1952                           ; load TBLPTR registers with __pidataBANK0
  1953  0077D8  0E32               	movlw	low __pidataBANK0
  1954  0077DA  6EF6               	movwf	tblptrl,c
  1955  0077DC  0E6B               	movlw	high __pidataBANK0
  1956  0077DE  6EF7               	movwf	tblptrh,c
  1957  0077E0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1958  0077E2  6EF8               	movwf	tblptru,c
  1959  0077E4  EE00  F0FA         	lfsr	0,__pdataBANK0
  1960  0077E8  EE10 F006          	lfsr	1,6
  1961  0077EC                     copy_data1:
  1962  0077EC  0009               	tblrd		*+
  1963  0077EE  CFF5 FFEE          	movff	tablat,postinc0
  1964  0077F2  50E5               	movf	postdec1,w,c
  1965  0077F4  50E1               	movf	fsr1l,w,c
  1966  0077F6  E1FA               	bnz	copy_data1
  1967                           
  1968                           ; Initialize objects allocated to COMRAM (1 bytes)
  1969                           ; load TBLPTR registers with __pidataCOMRAM
  1970  0077F8  0E31               	movlw	low __pidataCOMRAM
  1971  0077FA  6EF6               	movwf	tblptrl,c
  1972  0077FC  0E6B               	movlw	high __pidataCOMRAM
  1973  0077FE  6EF7               	movwf	tblptrh,c
  1974  007800  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1975  007802  6EF8               	movwf	tblptru,c
  1976  007804  0009               	tblrd		*+	;fetch initializer
  1977  007806  CFF5 F07E          	movff	tablat,__pdataCOMRAM
  1978                           
  1979                           ; Clear objects allocated to BANK1 (223 bytes)
  1980  00780A  EE01  F000         	lfsr	0,__pbssBANK1
  1981  00780E  0EDF               	movlw	223
  1982  007810                     clear_0:
  1983  007810  6AEE               	clrf	postinc0,c
  1984  007812  06E8               	decf	wreg,f,c
  1985  007814  E1FD               	bnz	clear_0
  1986                           
  1987                           ; Clear objects allocated to BANK0 (31 bytes)
  1988  007816  EE00  F0DB         	lfsr	0,__pbssBANK0
  1989  00781A  0E1F               	movlw	31
  1990  00781C                     clear_1:
  1991  00781C  6AEE               	clrf	postinc0,c
  1992  00781E  06E8               	decf	wreg,f,c
  1993  007820  E1FD               	bnz	clear_1
  1994                           
  1995                           ; Clear objects allocated to COMRAM (28 bytes)
  1996  007822  EE00  F062         	lfsr	0,__pbssCOMRAM
  1997  007826  0E1C               	movlw	28
  1998  007828                     clear_2:
  1999  007828  6AEE               	clrf	postinc0,c
  2000  00782A  06E8               	decf	wreg,f,c
  2001  00782C  E1FD               	bnz	clear_2
  2002  00782E                     end_of_initialization:
  2003                           	opt stack 0
  2004  00782E                     __end_of__initialization:
  2005                           	opt stack 0
  2006  00782E  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2007  007830  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2008  007832  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2009  007834  6EF8               	movwf	tblptru,c
  2010  007836  0100               	movlb	0
  2011  007838  EF36  F005         	goto	_main	;jump to C main() function
  2012                           tblptru	equ	0xFF8
  2013                           tblptrh	equ	0xFF7
  2014                           tblptrl	equ	0xFF6
  2015                           tablat	equ	0xFF5
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           postdec1	equ	0xFE5
  2019                           fsr1l	equ	0xFE1
  2020                           
  2021                           	psect	bssCOMRAM
  2022  000062                     __pbssCOMRAM:
  2023                           	opt stack 0
  2024  000062                     _etapaComunicacao:
  2025                           	opt stack 0
  2026  000062                     	ds	2
  2027  000064                     _dtl_posi_visualizar:
  2028                           	opt stack 0
  2029  000064                     	ds	1
  2030  000065                     _totalLogs:
  2031                           	opt stack 0
  2032  000065                     	ds	1
  2033  000066                     _isPressed:
  2034                           	opt stack 0
  2035  000066                     	ds	1
  2036  000067                     _cbf:
  2037                           	opt stack 0
  2038  000067                     	ds	1
  2039  000068                     _blinkk:
  2040                           	opt stack 0
  2041  000068                     	ds	1
  2042  000069                     _tempo_limite_teste_estacionaria:
  2043                           	opt stack 0
  2044  000069                     	ds	1
  2045  00006A                     _tempo_limite_partida:
  2046                           	opt stack 0
  2047  00006A                     	ds	1
  2048  00006B                     _tempo_partida:
  2049                           	opt stack 0
  2050  00006B                     	ds	1
  2051  00006C                     _posicaoColetaLeitura:
  2052                           	opt stack 0
  2053  00006C                     	ds	1
  2054  00006D                     _ultimoEstadoSaidas:
  2055                           	opt stack 0
  2056  00006D                     	ds	1
  2057  00006E                     _etapaTesteBombas:
  2058                           	opt stack 0
  2059  00006E                     	ds	1
  2060  00006F                     _flagErroTransdutor:
  2061                           	opt stack 0
  2062  00006F                     	ds	1
  2063  000070                     _textoAlternativo:
  2064                           	opt stack 0
  2065  000070                     	ds	1
  2066  000071                     _timerColetaLeitura:
  2067                           	opt stack 0
  2068  000071                     	ds	1
  2069  000072                     _timerPiscarLCD:
  2070                           	opt stack 0
  2071  000072                     	ds	1
  2072  000073                     _timerBase:
  2073                           	opt stack 0
  2074  000073                     	ds	1
  2075  000074                     _timerAtrasoLCD:
  2076                           	opt stack 0
  2077  000074                     	ds	1
  2078  000075                     _timerTrocarTextoLcd:
  2079                           	opt stack 0
  2080  000075                     	ds	1
  2081  000076                     _tentativasVerificarGSM:
  2082                           	opt stack 0
  2083  000076                     	ds	1
  2084  000077                     _rtc:
  2085                           	opt stack 0
  2086  000077                     	ds	7
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1l	equ	0xFE1
  2095                           
  2096                           	psect	dataCOMRAM
  2097  00007E                     __pdataCOMRAM:
  2098                           	opt stack 0
  2099  00007E                     _timerVerificarSinal:
  2100                           	opt stack 0
  2101  00007E                     	ds	1
  2102                           tblptru	equ	0xFF8
  2103                           tblptrh	equ	0xFF7
  2104                           tblptrl	equ	0xFF6
  2105                           tablat	equ	0xFF5
  2106                           postinc0	equ	0xFEE
  2107                           wreg	equ	0xFE8
  2108                           postdec1	equ	0xFE5
  2109                           fsr1l	equ	0xFE1
  2110                           
  2111                           	psect	bssBANK0
  2112  0000DB                     __pbssBANK0:
  2113                           	opt stack 0
  2114  0000DB                     _pressao:
  2115                           	opt stack 0
  2116  0000DB                     	ds	2
  2117  0000DD                     _timerTesteBombas:
  2118                           	opt stack 0
  2119  0000DD                     	ds	2
  2120  0000DF                     _ajust_tel:
  2121                           	opt stack 0
  2122  0000DF                     	ds	1
  2123  0000E0                     _tel_posi:
  2124                           	opt stack 0
  2125  0000E0                     	ds	1
  2126  0000E1                     __menu_posi:
  2127                           	opt stack 0
  2128  0000E1                     	ds	1
  2129  0000E2                     _menu_posi:
  2130                           	opt stack 0
  2131  0000E2                     	ds	1
  2132  0000E3                     _option_posi:
  2133                           	opt stack 0
  2134  0000E3                     	ds	1
  2135  0000E4                     _sp_estacionaria:
  2136                           	opt stack 0
  2137  0000E4                     	ds	1
  2138  0000E5                     _sp_principal:
  2139                           	opt stack 0
  2140  0000E5                     	ds	1
  2141  0000E6                     _sp_jockey:
  2142                           	opt stack 0
  2143  0000E6                     	ds	1
  2144  0000E7                     _sp_pressao_rede:
  2145                           	opt stack 0
  2146  0000E7                     	ds	1
  2147  0000E8                     _tempo_limite_estacionaria:
  2148                           	opt stack 0
  2149  0000E8                     	ds	1
  2150  0000E9                     _horario_de_teste:
  2151                           	opt stack 0
  2152  0000E9                     	ds	1
  2153  0000EA                     _dias_restante_teste:
  2154                           	opt stack 0
  2155  0000EA                     	ds	1
  2156  0000EB                     _intervalo_teste_dia:
  2157                           	opt stack 0
  2158  0000EB                     	ds	1
  2159  0000EC                     __ano:
  2160                           	opt stack 0
  2161  0000EC                     	ds	1
  2162  0000ED                     __mes:
  2163                           	opt stack 0
  2164  0000ED                     	ds	1
  2165  0000EE                     __dia:
  2166                           	opt stack 0
  2167  0000EE                     	ds	1
  2168  0000EF                     __hor:
  2169                           	opt stack 0
  2170  0000EF                     	ds	1
  2171  0000F0                     __min:
  2172                           	opt stack 0
  2173  0000F0                     	ds	1
  2174  0000F1                     __sec:
  2175                           	opt stack 0
  2176  0000F1                     	ds	1
  2177  0000F2                     _habilitaTesteAutomatico:
  2178                           	opt stack 0
  2179  0000F2                     	ds	1
  2180  0000F3                     _ocorrendoIncendio:
  2181                           	opt stack 0
  2182  0000F3                     	ds	1
  2183  0000F4                     _codigoErro:
  2184                           	opt stack 0
  2185  0000F4                     	ds	1
  2186  0000F5                     _gsmOcupado:
  2187                           	opt stack 0
  2188  0000F5                     	ds	1
  2189  0000F6                     _timerEtapaComunicacao:
  2190                           	opt stack 0
  2191  0000F6                     	ds	1
  2192  0000F7                     _timerReenvioSMS:
  2193                           	opt stack 0
  2194  0000F7                     	ds	1
  2195  0000F8                     _telefoneSelecionado:
  2196                           	opt stack 0
  2197  0000F8                     	ds	1
  2198  0000F9                     _out_BOMBA_ESTACIONARIA:
  2199                           	opt stack 0
  2200  0000F9                     	ds	1
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           postinc0	equ	0xFEE
  2206                           wreg	equ	0xFE8
  2207                           postdec1	equ	0xFE5
  2208                           fsr1l	equ	0xFE1
  2209                           
  2210                           	psect	dataBANK0
  2211  0000FA                     __pdataBANK0:
  2212                           	opt stack 0
  2213  0000FA                     _dtl_posicao:
  2214                           	opt stack 0
  2215  0000FA                     	ds	1
  2216  0000FB                     _status_estacionaria:
  2217                           	opt stack 0
  2218  0000FB                     	ds	1
  2219  0000FC                     _status_principal:
  2220                           	opt stack 0
  2221  0000FC                     	ds	1
  2222  0000FD                     _status_jockey:
  2223                           	opt stack 0
  2224  0000FD                     	ds	1
  2225  0000FE                     _timerIntervaloEntreBombas:
  2226                           	opt stack 0
  2227  0000FE                     	ds	1
  2228  0000FF                     _intensidadeSinal:
  2229                           	opt stack 0
  2230  0000FF                     	ds	1
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           postdec1	equ	0xFE5
  2238                           fsr1l	equ	0xFE1
  2239                           
  2240                           	psect	bssBANK1
  2241  000100                     __pbssBANK1:
  2242                           	opt stack 0
  2243  000100                     _coletaMedias:
  2244                           	opt stack 0
  2245  000100                     	ds	10
  2246  00010A                     _horimetro:
  2247                           	opt stack 0
  2248  00010A                     	ds	2
  2249  00010C                     _dtl_carregar_log:
  2250                           	opt stack 0
  2251  00010C                     	ds	1
  2252  00010D                     _dtl_estacionaria:
  2253                           	opt stack 0
  2254  00010D                     	ds	1
  2255  00010E                     _dtl_principal:
  2256                           	opt stack 0
  2257  00010E                     	ds	1
  2258  00010F                     _dtl_jockey:
  2259                           	opt stack 0
  2260  00010F                     	ds	1
  2261  000110                     _dtl_min:
  2262                           	opt stack 0
  2263  000110                     	ds	1
  2264  000111                     _dtl_hora:
  2265                           	opt stack 0
  2266  000111                     	ds	1
  2267  000112                     _dtl_ano:
  2268                           	opt stack 0
  2269  000112                     	ds	1
  2270  000113                     _dtl_mes:
  2271                           	opt stack 0
  2272  000113                     	ds	1
  2273  000114                     _dtl_dia:
  2274                           	opt stack 0
  2275  000114                     	ds	1
  2276  000115                     _counterPressedTime:
  2277                           	opt stack 0
  2278  000115                     	ds	1
  2279  000116                     __b_ok:
  2280                           	opt stack 0
  2281  000116                     	ds	1
  2282  000117                     _flag_b_ok:
  2283                           	opt stack 0
  2284  000117                     	ds	1
  2285  000118                     __b_mais:
  2286                           	opt stack 0
  2287  000118                     	ds	1
  2288  000119                     _flag_b_mais:
  2289                           	opt stack 0
  2290  000119                     	ds	1
  2291  00011A                     __b_menos:
  2292                           	opt stack 0
  2293  00011A                     	ds	1
  2294  00011B                     _flag_b_menos:
  2295                           	opt stack 0
  2296  00011B                     	ds	1
  2297  00011C                     __b_esc:
  2298                           	opt stack 0
  2299  00011C                     	ds	1
  2300  00011D                     _flag_b_esc:
  2301                           	opt stack 0
  2302  00011D                     	ds	1
  2303  00011E                     _ajst_rtc:
  2304                           	opt stack 0
  2305  00011E                     	ds	1
  2306  00011F                     _tela_menu_posi:
  2307                           	opt stack 0
  2308  00011F                     	ds	1
  2309  000120                     _sub_menu_posi:
  2310                           	opt stack 0
  2311  000120                     	ds	1
  2312  000121                     __sec_aux:
  2313                           	opt stack 0
  2314  000121                     	ds	1
  2315  000122                     __sec_partida:
  2316                           	opt stack 0
  2317  000122                     	ds	1
  2318  000123                     _bufferSerial:
  2319                           	opt stack 0
  2320  000123                     	ds	60
  2321  00015F                     _line4:
  2322                           	opt stack 0
  2323  00015F                     	ds	21
  2324  000174                     _line3:
  2325                           	opt stack 0
  2326  000174                     	ds	21
  2327  000189                     _line2:
  2328                           	opt stack 0
  2329  000189                     	ds	21
  2330  00019E                     _line1:
  2331                           	opt stack 0
  2332  00019E                     	ds	21
  2333  0001B3                     _bufferAUX:
  2334                           	opt stack 0
  2335  0001B3                     	ds	20
  2336  0001C7                     _tel2:
  2337                           	opt stack 0
  2338  0001C7                     	ds	12
  2339  0001D3                     _tel1:
  2340                           	opt stack 0
  2341  0001D3                     	ds	12
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           postdec1	equ	0xFE5
  2349                           fsr1l	equ	0xFE1
  2350                           
  2351                           	psect	dataBANK1
  2352  0001DF                     __pdataBANK1:
  2353                           	opt stack 0
  2354  0001DF                     intToFloatStr@F2544:
  2355                           	opt stack 0
  2356  0001DF                     	ds	4
  2357  0001E3                     _ultimoEstadoLCD:
  2358                           	opt stack 0
  2359  0001E3                     	ds	4
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           postinc0	equ	0xFEE
  2365                           wreg	equ	0xFE8
  2366                           postdec1	equ	0xFE5
  2367                           fsr1l	equ	0xFE1
  2368                           
  2369                           	psect	cstackBANK0
  2370  000080                     __pcstackBANK0:
  2371                           	opt stack 0
  2372  000080                     ??_isdigit:
  2373  000080                     ??_monitorarAlteracaoEstado:
  2374  000080                     ??_I2C_Wait:
  2375  000080                     ?_strlen:
  2376                           	opt stack 0
  2377  000080                     ?_strchr:
  2378                           	opt stack 0
  2379  000080                     ?___wmul:
  2380                           	opt stack 0
  2381  000080                     ?___awdiv:
  2382                           	opt stack 0
  2383  000080                     ?___awmod:
  2384                           	opt stack 0
  2385  000080                     ?___lwdiv:
  2386                           	opt stack 0
  2387  000080                     ?___lmul:
  2388                           	opt stack 0
  2389  000080                     ?___aldiv:
  2390                           	opt stack 0
  2391  000080                     ?___lldiv:
  2392                           	opt stack 0
  2393  000080                     putch@c:
  2394                           	opt stack 0
  2395  000080                     btPress@bt:
  2396                           	opt stack 0
  2397  000080                     partidaBombaEstacionaria@acao:
  2398                           	opt stack 0
  2399  000080                     Lcd_Port@a:
  2400                           	opt stack 0
  2401  000080                     BCDtoDEC@val:
  2402                           	opt stack 0
  2403  000080                     writeChar@hex:
  2404                           	opt stack 0
  2405  000080                     blink@line:
  2406                           	opt stack 0
  2407  000080                     delay@x:
  2408                           	opt stack 0
  2409  000080                     ___wmul@multiplier:
  2410                           	opt stack 0
  2411  000080                     ___awdiv@dividend:
  2412                           	opt stack 0
  2413  000080                     ___awmod@dividend:
  2414                           	opt stack 0
  2415  000080                     ___lwdiv@dividend:
  2416                           	opt stack 0
  2417  000080                     memset@p1:
  2418                           	opt stack 0
  2419  000080                     strlen@s:
  2420                           	opt stack 0
  2421  000080                     strchr@ptr:
  2422                           	opt stack 0
  2423  000080                     ___lmul@multiplier:
  2424                           	opt stack 0
  2425  000080                     ___aldiv@dividend:
  2426                           	opt stack 0
  2427  000080                     ___lldiv@dividend:
  2428                           	opt stack 0
  2429                           
  2430                           ; 4 bytes @ 0x0
  2431  000080                     	ds	1
  2432  000081                     ??_Lcd_Cmd:
  2433  000081                     ?_I2C_Read:
  2434                           	opt stack 0
  2435  000081                     Lcd_Write_Char@tempp:
  2436                           	opt stack 0
  2437  000081                     _isdigit$2062:
  2438                           	opt stack 0
  2439  000081                     I2C_Read@a:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x1
  2443  000081                     	ds	1
  2444  000082                     ??_delay:
  2445  000082                     ??_strlen:
  2446  000082                     Lcd_Cmd@a:
  2447                           	opt stack 0
  2448  000082                     Lcd_Write_Char@y:
  2449                           	opt stack 0
  2450  000082                     blink@start:
  2451                           	opt stack 0
  2452  000082                     isdigit@c:
  2453                           	opt stack 0
  2454  000082                     monitorarAlteracaoEstado@estado:
  2455                           	opt stack 0
  2456  000082                     ___wmul@multiplicand:
  2457                           	opt stack 0
  2458  000082                     ___awdiv@divisor:
  2459                           	opt stack 0
  2460  000082                     ___awmod@divisor:
  2461                           	opt stack 0
  2462  000082                     ___lwdiv@divisor:
  2463                           	opt stack 0
  2464  000082                     memset@c:
  2465                           	opt stack 0
  2466  000082                     strchr@chr:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x2
  2470  000082                     	ds	1
  2471  000083                     ??_Lcd_Init:
  2472  000083                     Lcd_Set_Cursor@b:
  2473                           	opt stack 0
  2474  000083                     Lcd_Write_Char@a:
  2475                           	opt stack 0
  2476  000083                     blink@end:
  2477                           	opt stack 0
  2478  000083                     I2C_Read@temp:
  2479                           	opt stack 0
  2480                           
  2481                           ; 2 bytes @ 0x3
  2482  000083                     	ds	1
  2483  000084                     ??_criarCaracteresCGRAM:
  2484  000084                     Lcd_Set_Cursor@a:
  2485                           	opt stack 0
  2486  000084                     blink@i:
  2487                           	opt stack 0
  2488  000084                     ___awdiv@counter:
  2489                           	opt stack 0
  2490  000084                     ___awmod@counter:
  2491                           	opt stack 0
  2492  000084                     Lcd_Write_String@a:
  2493                           	opt stack 0
  2494  000084                     ___wmul@product:
  2495                           	opt stack 0
  2496  000084                     ___lwdiv@quotient:
  2497                           	opt stack 0
  2498  000084                     memset@n:
  2499                           	opt stack 0
  2500  000084                     strlen@cp:
  2501                           	opt stack 0
  2502  000084                     ___lmul@multiplicand:
  2503                           	opt stack 0
  2504  000084                     ___aldiv@divisor:
  2505                           	opt stack 0
  2506  000084                     ___lldiv@divisor:
  2507                           	opt stack 0
  2508                           
  2509                           ; 4 bytes @ 0x4
  2510  000084                     	ds	1
  2511  000085                     Lcd_Set_Cursor@z:
  2512                           	opt stack 0
  2513  000085                     ___awdiv@sign:
  2514                           	opt stack 0
  2515  000085                     ___awmod@sign:
  2516                           	opt stack 0
  2517                           
  2518                           ; 1 bytes @ 0x5
  2519  000085                     	ds	1
  2520  000086                     ?_strncmp:
  2521                           	opt stack 0
  2522  000086                     Lcd_Set_Cursor@y:
  2523                           	opt stack 0
  2524  000086                     Lcd_Write_String@i:
  2525                           	opt stack 0
  2526  000086                     ___lwdiv@counter:
  2527                           	opt stack 0
  2528  000086                     ___awdiv@quotient:
  2529                           	opt stack 0
  2530  000086                     memset@p:
  2531                           	opt stack 0
  2532  000086                     strncmp@s1:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x6
  2536  000086                     	ds	1
  2537  000087                     ?___lwmod:
  2538                           	opt stack 0
  2539  000087                     Lcd_Set_Cursor@temp:
  2540                           	opt stack 0
  2541  000087                     ___lwmod@dividend:
  2542                           	opt stack 0
  2543  000087                     criarCaracteresCGRAM@character:
  2544                           	opt stack 0
  2545                           
  2546                           ; 48 bytes @ 0x7
  2547  000087                     	ds	1
  2548  000088                     DECtoBCD@val:
  2549                           	opt stack 0
  2550  000088                     ___aldiv@counter:
  2551                           	opt stack 0
  2552  000088                     atualizarLCD@line1:
  2553                           	opt stack 0
  2554  000088                     strncmp@s2:
  2555                           	opt stack 0
  2556  000088                     ___lmul@product:
  2557                           	opt stack 0
  2558  000088                     ___lldiv@quotient:
  2559                           	opt stack 0
  2560                           
  2561                           ; 4 bytes @ 0x8
  2562  000088                     	ds	1
  2563  000089                     DECtoBCD@res:
  2564                           	opt stack 0
  2565  000089                     ___aldiv@sign:
  2566                           	opt stack 0
  2567  000089                     ___lwmod@divisor:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x9
  2571  000089                     	ds	1
  2572  00008A                     atualizarLCD@line2:
  2573                           	opt stack 0
  2574  00008A                     I2C_Write@d:
  2575                           	opt stack 0
  2576  00008A                     strncmp@len:
  2577                           	opt stack 0
  2578  00008A                     ___aldiv@quotient:
  2579                           	opt stack 0
  2580                           
  2581                           ; 4 bytes @ 0xA
  2582  00008A                     	ds	1
  2583  00008B                     ___lwmod@counter:
  2584                           	opt stack 0
  2585                           
  2586                           ; 1 bytes @ 0xB
  2587  00008B                     	ds	1
  2588  00008C                     ??_strncmp:
  2589  00008C                     ?__doprnt:
  2590                           	opt stack 0
  2591  00008C                     writeEEPROM_ext@data:
  2592                           	opt stack 0
  2593  00008C                     readEEPROM_ext@adress:
  2594                           	opt stack 0
  2595  00008C                     ___lldiv@counter:
  2596                           	opt stack 0
  2597  00008C                     setDS1307TimeDate@ptrToUserVal:
  2598                           	opt stack 0
  2599  00008C                     getDS1307TimeDate@ptrToUserVal:
  2600                           	opt stack 0
  2601  00008C                     atualizarLCD@line3:
  2602                           	opt stack 0
  2603  00008C                     __doprnt@pb:
  2604                           	opt stack 0
  2605                           
  2606                           ; 2 bytes @ 0xC
  2607  00008C                     	ds	1
  2608  00008D                     writeEEPROM_ext@adress:
  2609                           	opt stack 0
  2610  00008D                     readEEPROM_ext@data:
  2611                           	opt stack 0
  2612  00008D                     I2C_Master_Init@c:
  2613                           	opt stack 0
  2614                           
  2615                           ; 4 bytes @ 0xD
  2616  00008D                     	ds	1
  2617  00008E                     ??_setDS1307TimeDate:
  2618  00008E                     ??_salvarLOG:
  2619  00008E                     ?_map:
  2620                           	opt stack 0
  2621  00008E                     ?_readEEPROM16_ext:
  2622                           	opt stack 0
  2623  00008E                     atualizarLCD@line4:
  2624                           	opt stack 0
  2625  00008E                     map@x:
  2626                           	opt stack 0
  2627  00008E                     __doprnt@f:
  2628                           	opt stack 0
  2629                           
  2630                           ; 2 bytes @ 0xE
  2631  00008E                     	ds	1
  2632  00008F                     ?_strstr:
  2633                           	opt stack 0
  2634  00008F                     salvarLOG@ultimoLogSalvo:
  2635                           	opt stack 0
  2636  00008F                     strstr@s1:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0xF
  2640  00008F                     	ds	1
  2641  000090                     ??_readEEPROM16_ext:
  2642  000090                     ??_atualizarLCD:
  2643  000090                     map@in_min:
  2644                           	opt stack 0
  2645  000090                     __doprnt@ap:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x10
  2649  000090                     	ds	1
  2650  000091                     ??_I2C_Master_Init:
  2651  000091                     readEEPROM16_ext@data:
  2652                           	opt stack 0
  2653  000091                     strstr@s2:
  2654                           	opt stack 0
  2655                           
  2656                           ; 2 bytes @ 0x11
  2657  000091                     	ds	1
  2658  000092                     ??__doprnt:
  2659  000092                     map@in_max:
  2660                           	opt stack 0
  2661                           
  2662                           ; 2 bytes @ 0x12
  2663  000092                     	ds	1
  2664  000093                     readEEPROM16_ext@adress:
  2665                           	opt stack 0
  2666  000093                     aguardaBuffer@str:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0x13
  2670  000093                     	ds	1
  2671  000094                     lerParametros@verifica_memoria_nova:
  2672                           	opt stack 0
  2673  000094                     map@out_min:
  2674                           	opt stack 0
  2675                           
  2676                           ; 2 bytes @ 0x14
  2677  000094                     	ds	1
  2678  000095                     lerParametros@i:
  2679                           	opt stack 0
  2680  000095                     atualizarLCD@lcdEstado:
  2681                           	opt stack 0
  2682                           
  2683                           ; 4 bytes @ 0x15
  2684  000095                     	ds	1
  2685  000096                     __doprnt@prec:
  2686                           	opt stack 0
  2687  000096                     map@out_max:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x16
  2691  000096                     	ds	1
  2692  000097                     __doprnt@val:
  2693                           	opt stack 0
  2694                           
  2695                           ; 2 bytes @ 0x17
  2696  000097                     	ds	1
  2697  000098                     ??_map:
  2698                           
  2699                           ; 1 bytes @ 0x18
  2700  000098                     	ds	1
  2701  000099                     atualizarLCD@i:
  2702                           	opt stack 0
  2703  000099                     __doprnt@len:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x19
  2707  000099                     	ds	1
  2708  00009A                     map@d:
  2709                           	opt stack 0
  2710                           
  2711                           ; 4 bytes @ 0x1A
  2712  00009A                     	ds	1
  2713  00009B                     __doprnt@flag:
  2714                           	opt stack 0
  2715                           
  2716                           ; 1 bytes @ 0x1B
  2717  00009B                     	ds	1
  2718  00009C                     __doprnt@cp:
  2719                           	opt stack 0
  2720                           
  2721                           ; 2 bytes @ 0x1C
  2722  00009C                     	ds	2
  2723  00009E                     __doprnt@width:
  2724                           	opt stack 0
  2725  00009E                     map@e:
  2726                           	opt stack 0
  2727                           
  2728                           ; 4 bytes @ 0x1E
  2729  00009E                     	ds	2
  2730  0000A0                     __doprnt@c:
  2731                           	opt stack 0
  2732                           
  2733                           ; 1 bytes @ 0x20
  2734  0000A0                     	ds	1
  2735  0000A1                     ?_sprintf:
  2736                           	opt stack 0
  2737  0000A1                     ?_printf:
  2738                           	opt stack 0
  2739  0000A1                     printf@f:
  2740                           	opt stack 0
  2741  0000A1                     sprintf@wh:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x21
  2745  0000A1                     	ds	1
  2746  0000A2                     map@a:
  2747                           	opt stack 0
  2748                           
  2749                           ; 2 bytes @ 0x22
  2750  0000A2                     	ds	1
  2751  0000A3                     sprintf@f:
  2752                           	opt stack 0
  2753                           
  2754                           ; 2 bytes @ 0x23
  2755  0000A3                     	ds	1
  2756  0000A4                     map@b:
  2757                           	opt stack 0
  2758                           
  2759                           ; 2 bytes @ 0x24
  2760  0000A4                     	ds	2
  2761  0000A6                     map@c:
  2762                           	opt stack 0
  2763                           
  2764                           ; 2 bytes @ 0x26
  2765  0000A6                     	ds	2
  2766  0000A8                     map@result:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0x28
  2770  0000A8                     	ds	2
  2771  0000AA                     ??_lerTransdutor:
  2772                           
  2773                           ; 1 bytes @ 0x2A
  2774  0000AA                     	ds	2
  2775  0000AC                     lerTransdutor@mediaLeitura:
  2776                           	opt stack 0
  2777                           
  2778                           ; 2 bytes @ 0x2C
  2779  0000AC                     	ds	2
  2780  0000AE                     lerTransdutor@_pressao:
  2781                           	opt stack 0
  2782                           
  2783                           ; 2 bytes @ 0x2E
  2784  0000AE                     	ds	2
  2785  0000B0                     lerTransdutor@adc:
  2786                           	opt stack 0
  2787                           
  2788                           ; 2 bytes @ 0x30
  2789  0000B0                     	ds	2
  2790  0000B2                     lerTransdutor@i:
  2791                           	opt stack 0
  2792                           
  2793                           ; 1 bytes @ 0x32
  2794  0000B2                     	ds	3
  2795  0000B5                     printf@ap:
  2796                           	opt stack 0
  2797  0000B5                     sprintf@ap:
  2798                           	opt stack 0
  2799                           
  2800                           ; 2 bytes @ 0x35
  2801  0000B5                     	ds	2
  2802  0000B7                     _criarCaracteresCGRAM$1552:
  2803                           	opt stack 0
  2804  0000B7                     printf@pb:
  2805                           	opt stack 0
  2806  0000B7                     sprintf@pb:
  2807                           	opt stack 0
  2808                           
  2809                           ; 4 bytes @ 0x37
  2810  0000B7                     	ds	2
  2811  0000B9                     criarCaracteresCGRAM@k:
  2812                           	opt stack 0
  2813                           
  2814                           ; 1 bytes @ 0x39
  2815  0000B9                     	ds	1
  2816  0000BA                     criarCaracteresCGRAM@j:
  2817                           	opt stack 0
  2818                           
  2819                           ; 1 bytes @ 0x3A
  2820  0000BA                     	ds	1
  2821  0000BB                     ??_comunicarTeste:
  2822  0000BB                     ??_enviaSMS:
  2823  0000BB                     ??_tela_testeBombas:
  2824  0000BB                     ??_dataLoger:
  2825  0000BB                     ??_informacoes:
  2826  0000BB                     ?_intToFloatStr:
  2827                           	opt stack 0
  2828  0000BB                     ?_getSerial:
  2829                           	opt stack 0
  2830  0000BB                     criarCaracteresCGRAM@i:
  2831                           	opt stack 0
  2832  0000BB                     getSerial@str:
  2833                           	opt stack 0
  2834                           
  2835                           ; 2 bytes @ 0x3B
  2836  0000BB                     	ds	1
  2837  0000BC                     
  2838                           ; 1 bytes @ 0x3C
  2839  0000BC                     	ds	1
  2840  0000BD                     getSerial@end:
  2841                           	opt stack 0
  2842  0000BD                     _comunicarTeste$1370:
  2843                           	opt stack 0
  2844  0000BD                     _enviaSMS$1385:
  2845                           	opt stack 0
  2846  0000BD                     _tela_testeBombas$1600:
  2847                           	opt stack 0
  2848  0000BD                     intToFloatStr@end:
  2849                           	opt stack 0
  2850                           
  2851                           ; 4 bytes @ 0x3D
  2852  0000BD                     	ds	1
  2853  0000BE                     ??_getSerial:
  2854                           
  2855                           ; 1 bytes @ 0x3E
  2856  0000BE                     	ds	1
  2857  0000BF                     ??_configuraTelefones:
  2858  0000BF                     _enviaSMS$1398:
  2859                           	opt stack 0
  2860                           
  2861                           ; 2 bytes @ 0x3F
  2862  0000BF                     	ds	1
  2863  0000C0                     getSerial@length:
  2864                           	opt stack 0
  2865  0000C0                     _dataLoger$1619:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x40
  2869  0000C0                     	ds	1
  2870  0000C1                     _enviaSMS$1399:
  2871                           	opt stack 0
  2872  0000C1                     _configuraTelefones$1645:
  2873                           	opt stack 0
  2874  0000C1                     intToFloatStr@conv:
  2875                           	opt stack 0
  2876                           
  2877                           ; 4 bytes @ 0x41
  2878  0000C1                     	ds	1
  2879  0000C2                     getSerial@i:
  2880                           	opt stack 0
  2881  0000C2                     _dataLoger$1625:
  2882                           	opt stack 0
  2883                           
  2884                           ; 2 bytes @ 0x42
  2885  0000C2                     	ds	1
  2886  0000C3                     configuraTelefones@i:
  2887                           	opt stack 0
  2888  0000C3                     getSerial@ret:
  2889                           	opt stack 0
  2890  0000C3                     _enviaSMS$1400:
  2891                           	opt stack 0
  2892                           
  2893                           ; 2 bytes @ 0x43
  2894  0000C3                     	ds	1
  2895  0000C4                     _dataLoger$1630:
  2896                           	opt stack 0
  2897                           
  2898                           ; 2 bytes @ 0x44
  2899  0000C4                     	ds	1
  2900  0000C5                     ?_atoi:
  2901                           	opt stack 0
  2902  0000C5                     intToFloatStr@valor:
  2903                           	opt stack 0
  2904  0000C5                     _enviaSMS$1405:
  2905                           	opt stack 0
  2906  0000C5                     atoi@s:
  2907                           	opt stack 0
  2908                           
  2909                           ; 2 bytes @ 0x45
  2910  0000C5                     	ds	1
  2911  0000C6                     dataLoger@logs:
  2912                           	opt stack 0
  2913  0000C6                     intToFloatStr@pr:
  2914                           	opt stack 0
  2915                           
  2916                           ; 2 bytes @ 0x46
  2917  0000C6                     	ds	1
  2918  0000C7                     ??_atoi:
  2919  0000C7                     enviaSMS@tipo:
  2920                           	opt stack 0
  2921                           
  2922                           ; 1 bytes @ 0x47
  2923  0000C7                     	ds	1
  2924  0000C8                     ??_acaoBombas:
  2925  0000C8                     ??_acaoTesteBombas:
  2926  0000C8                     _telaPrincipal$2570:
  2927                           	opt stack 0
  2928  0000C8                     _ajusteSP_Bombas$2571:
  2929                           	opt stack 0
  2930                           
  2931                           ; 2 bytes @ 0x48
  2932  0000C8                     	ds	1
  2933  0000C9                     atoi@sign:
  2934                           	opt stack 0
  2935                           
  2936                           ; 1 bytes @ 0x49
  2937  0000C9                     	ds	1
  2938  0000CA                     atoi@a:
  2939                           	opt stack 0
  2940                           
  2941                           ; 2 bytes @ 0x4A
  2942  0000CA                     	ds	2
  2943  0000CC                     ??_getSinalSIM800L:
  2944                           
  2945                           ; 1 bytes @ 0x4C
  2946  0000CC                     	ds	1
  2947  0000CD                     acaoTesteBombas@i:
  2948                           	opt stack 0
  2949                           
  2950                           ; 1 bytes @ 0x4D
  2951  0000CD                     	ds	1
  2952  0000CE                     getSinalSIM800L@sinal:
  2953                           	opt stack 0
  2954  0000CE                     _acaoTesteBombas$2569:
  2955                           	opt stack 0
  2956                           
  2957                           ; 2 bytes @ 0x4E
  2958  0000CE                     	ds	2
  2959  0000D0                     _acaoTesteBombas$1485:
  2960                           	opt stack 0
  2961                           
  2962                           ; 2 bytes @ 0x50
  2963  0000D0                     	ds	2
  2964  0000D2                     _acaoTesteBombas$1497:
  2965                           	opt stack 0
  2966                           
  2967                           ; 2 bytes @ 0x52
  2968  0000D2                     	ds	2
  2969  0000D4                     _acaoTesteBombas$1504:
  2970                           	opt stack 0
  2971                           
  2972                           ; 2 bytes @ 0x54
  2973  0000D4                     	ds	2
  2974  0000D6                     _acaoTesteBombas$1509:
  2975                           	opt stack 0
  2976                           
  2977                           ; 2 bytes @ 0x56
  2978  0000D6                     	ds	2
  2979  0000D8                     _acaoTesteBombas$1514:
  2980                           	opt stack 0
  2981                           
  2982                           ; 2 bytes @ 0x58
  2983  0000D8                     	ds	2
  2984  0000DA                     acaoTesteBombas@intervalo:
  2985                           	opt stack 0
  2986                           
  2987                           ; 1 bytes @ 0x5A
  2988  0000DA                     	ds	1
  2989  0000DB                     tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           postinc0	equ	0xFEE
  2994                           wreg	equ	0xFE8
  2995                           postdec1	equ	0xFE5
  2996                           fsr1l	equ	0xFE1
  2997                           
  2998                           ; 1 bytes @ 0x5B
  2999                           
  3000                           	psect	cstackCOMRAM
  3001  000001                     __pcstackCOMRAM:
  3002                           	opt stack 0
  3003  000001                     ??i2_I2C_Wait:
  3004  000001                     i2Lcd_Port@a:
  3005                           	opt stack 0
  3006  000001                     i2BCDtoDEC@val:
  3007                           	opt stack 0
  3008  000001                     i2delay@x:
  3009                           	opt stack 0
  3010                           
  3011                           ; 2 bytes @ 0x0
  3012  000001                     	ds	1
  3013  000002                     ??i2_Lcd_Cmd:
  3014  000002                     ?i2_I2C_Read:
  3015                           	opt stack 0
  3016  000002                     i2Lcd_Write_Char@tempp:
  3017                           	opt stack 0
  3018  000002                     i2I2C_Write@d:
  3019                           	opt stack 0
  3020  000002                     i2I2C_Read@a:
  3021                           	opt stack 0
  3022                           
  3023                           ; 2 bytes @ 0x1
  3024  000002                     	ds	1
  3025  000003                     ??i2_delay:
  3026  000003                     i2Lcd_Cmd@a:
  3027                           	opt stack 0
  3028  000003                     i2Lcd_Write_Char@y:
  3029                           	opt stack 0
  3030                           
  3031                           ; 1 bytes @ 0x2
  3032  000003                     	ds	1
  3033  000004                     ??i2_Lcd_Init:
  3034  000004                     i2writeEEPROM_ext@data:
  3035                           	opt stack 0
  3036  000004                     i2Lcd_Write_Char@a:
  3037                           	opt stack 0
  3038  000004                     i2I2C_Read@temp:
  3039                           	opt stack 0
  3040                           
  3041                           ; 2 bytes @ 0x3
  3042  000004                     	ds	1
  3043  000005                     ??i2_criarCaracteresCGRAM:
  3044  000005                     i2writeEEPROM_ext@adress:
  3045                           	opt stack 0
  3046                           
  3047                           ; 1 bytes @ 0x4
  3048  000005                     	ds	1
  3049  000006                     writeEEPROM16_ext@data:
  3050                           	opt stack 0
  3051  000006                     i2getDS1307TimeDate@ptrToUserVal:
  3052                           	opt stack 0
  3053                           
  3054                           ; 2 bytes @ 0x5
  3055  000006                     	ds	2
  3056  000008                     writeEEPROM16_ext@adress:
  3057                           	opt stack 0
  3058  000008                     i2criarCaracteresCGRAM@character:
  3059                           	opt stack 0
  3060                           
  3061                           ; 48 bytes @ 0x7
  3062  000008                     	ds	48
  3063  000038                     i2_criarCaracteresCGRAM$1552:
  3064                           	opt stack 0
  3065                           
  3066                           ; 2 bytes @ 0x37
  3067  000038                     	ds	2
  3068  00003A                     i2criarCaracteresCGRAM@k:
  3069                           	opt stack 0
  3070                           
  3071                           ; 1 bytes @ 0x39
  3072  00003A                     	ds	1
  3073  00003B                     i2criarCaracteresCGRAM@j:
  3074                           	opt stack 0
  3075                           
  3076                           ; 1 bytes @ 0x3A
  3077  00003B                     	ds	1
  3078  00003C                     i2criarCaracteresCGRAM@i:
  3079                           	opt stack 0
  3080                           
  3081                           ; 1 bytes @ 0x3B
  3082  00003C                     	ds	1
  3083  00003D                     ??_TIMER:
  3084  00003D                     
  3085                           ; 1 bytes @ 0x3C
  3086  00003D                     	ds	18
  3087  00004F                     _TIMER$1671:
  3088                           	opt stack 0
  3089                           
  3090                           ; 2 bytes @ 0x4E
  3091  00004F                     	ds	2
  3092  000051                     _TIMER$1672:
  3093                           	opt stack 0
  3094                           
  3095                           ; 2 bytes @ 0x50
  3096  000051                     	ds	2
  3097  000053                     _TIMER$1673:
  3098                           	opt stack 0
  3099                           
  3100                           ; 2 bytes @ 0x52
  3101  000053                     	ds	2
  3102  000055                     _TIMER$1674:
  3103                           	opt stack 0
  3104                           
  3105                           ; 2 bytes @ 0x54
  3106  000055                     	ds	2
  3107  000057                     _TIMER$1675:
  3108                           	opt stack 0
  3109                           
  3110                           ; 2 bytes @ 0x56
  3111  000057                     	ds	2
  3112  000059                     _TIMER$1678:
  3113                           	opt stack 0
  3114                           
  3115                           ; 2 bytes @ 0x58
  3116  000059                     	ds	2
  3117  00005B                     _TIMER$1679:
  3118                           	opt stack 0
  3119                           
  3120                           ; 2 bytes @ 0x5A
  3121  00005B                     	ds	2
  3122  00005D                     _TIMER$1680:
  3123                           	opt stack 0
  3124                           
  3125                           ; 2 bytes @ 0x5C
  3126  00005D                     	ds	2
  3127  00005F                     _TIMER$1681:
  3128                           	opt stack 0
  3129                           
  3130                           ; 2 bytes @ 0x5E
  3131  00005F                     	ds	2
  3132  000061                     TIMER@c:
  3133                           	opt stack 0
  3134                           
  3135                           ; 1 bytes @ 0x60
  3136  000061                     	ds	1
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           postinc0	equ	0xFEE
  3142                           wreg	equ	0xFE8
  3143                           postdec1	equ	0xFE5
  3144                           fsr1l	equ	0xFE1
  3145                           
  3146 ;;
  3147 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3148 ;;
  3149 ;; *************** function _main *****************
  3150 ;; Defined at:
  3151 ;;		line 78 in file "Main.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;		None
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3165 ;;      Params:         0       0       0       0       0       0       0
  3166 ;;      Locals:         0       0       0       0       0       0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0
  3168 ;;      Totals:         0       0       0       0       0       0       0
  3169 ;;Total ram usage:        0 bytes
  3170 ;; Hardware stack levels required when called:   12
  3171 ;; This function calls:
  3172 ;;		_I2C_Master_Init
  3173 ;;		_Lcd_Clear
  3174 ;;		_Lcd_Init
  3175 ;;		_RTC_Init
  3176 ;;		_acaoBombas
  3177 ;;		_acaoTesteBombas
  3178 ;;		_ajusteSP_Bombas
  3179 ;;		_atualizarLCD
  3180 ;;		_btPress
  3181 ;;		_configuraRegistradores
  3182 ;;		_configuraTelefones
  3183 ;;		_configurarEstacionaria
  3184 ;;		_criarCaracteresCGRAM
  3185 ;;		_dataLoger
  3186 ;;		_delay
  3187 ;;		_getDS1307TimeDate
  3188 ;;		_getSinalSIM800L
  3189 ;;		_informacoes
  3190 ;;		_lerParametros
  3191 ;;		_lerTransdutor
  3192 ;;		_monitorarAlteracaoEstado
  3193 ;;		_partidaBombaEstacionaria
  3194 ;;		_sprintf
  3195 ;;		_telaPrincipal
  3196 ;;		_tela_ajusteRTC
  3197 ;;		_tela_testeBombas
  3198 ;;		_verificarIntervaloTesteBombas
  3199 ;; This function is called by:
  3200 ;;		Startup code after reset
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text0
  3205  000A6C                     __ptext0:
  3206                           	opt stack 0
  3207  000A6C                     _main:
  3208                           	opt stack 0
  3209  000A6C  FFFF               	dw	65535	; assembler added errata NOP
  3210                           
  3211                           ;Main.c: 79: configuraRegistradores();
  3212                           
  3213                           ;incstack = 0
  3214  000A6E  EC1E  F03B         	call	_configuraRegistradores	;wreg free
  3215                           
  3216                           ;Main.c: 80: I2C_Master_Init(100000);
  3217  000A72  0EA0               	movlw	160
  3218  000A74  0100               	movlb	0	; () banked
  3219  000A76  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3220  000A78  0E86               	movlw	134
  3221  000A7A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3222  000A7C  0E01               	movlw	1
  3223  000A7E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3224  000A80  0E00               	movlw	0
  3225  000A82  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3226  000A84  EC7B  F03A         	call	_I2C_Master_Init	;wreg free
  3227                           
  3228                           ;Main.c: 81: delay(200);
  3229  000A88  0E00               	movlw	0
  3230  000A8A  0100               	movlb	0	; () banked
  3231  000A8C  6F81               	movwf	(delay@x+1)& (0+255),b
  3232  000A8E  0EC8               	movlw	200
  3233  000A90  6F80               	movwf	delay@x& (0+255),b
  3234  000A92  EC0A  F037         	call	_delay	;wreg free
  3235                           
  3236                           ;Main.c: 82: RTC_Init();
  3237  000A96  EC40  F037         	call	_RTC_Init	;wreg free
  3238                           
  3239                           ;Main.c: 83: delay(100);
  3240  000A9A  0E00               	movlw	0
  3241  000A9C  0100               	movlb	0	; () banked
  3242  000A9E  6F81               	movwf	(delay@x+1)& (0+255),b
  3243  000AA0  0E64               	movlw	100
  3244  000AA2  6F80               	movwf	delay@x& (0+255),b
  3245  000AA4  EC0A  F037         	call	_delay	;wreg free
  3246                           
  3247                           ;Main.c: 84: getDS1307TimeDate(&rtc);
  3248  000AA8  0E77               	movlw	low _rtc
  3249  000AAA  0100               	movlb	0	; () banked
  3250  000AAC  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  3251  000AAE  0E00               	movlw	high _rtc
  3252  000AB0  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  3253  000AB2  EC3E  F017         	call	_getDS1307TimeDate	;wreg free
  3254                           
  3255                           ;Main.c: 85: Lcd_Init();
  3256  000AB6  EC61  F03C         	call	_Lcd_Init	;wreg free
  3257                           
  3258                           ;Main.c: 86: Lcd_Clear();
  3259  000ABA  ECD9  F035         	call	_Lcd_Clear	;wreg free
  3260                           
  3261                           ;Main.c: 87: criarCaracteresCGRAM();
  3262  000ABE  EC61  F01D         	call	_criarCaracteresCGRAM	;wreg free
  3263                           
  3264                           ;Main.c: 88: delay(100);
  3265  000AC2  0E00               	movlw	0
  3266  000AC4  0100               	movlb	0	; () banked
  3267  000AC6  6F81               	movwf	(delay@x+1)& (0+255),b
  3268  000AC8  0E64               	movlw	100
  3269  000ACA  6F80               	movwf	delay@x& (0+255),b
  3270  000ACC  EC0A  F037         	call	_delay	;wreg free
  3271                           
  3272                           ;Main.c: 89: lerParametros();
  3273  000AD0  ECFE  F018         	call	_lerParametros	;wreg free
  3274                           
  3275                           ;Main.c: 90: sprintf(line1, "TECHNOW");
  3276  000AD4  0E9E               	movlw	low _line1
  3277  000AD6  0100               	movlb	0	; () banked
  3278  000AD8  6FA1               	movwf	sprintf@wh& (0+255),b
  3279  000ADA  0E01               	movlw	high _line1
  3280  000ADC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3281  000ADE  0E9A               	movlw	low STR_90
  3282  000AE0  6FA3               	movwf	sprintf@f& (0+255),b
  3283  000AE2  0E7F               	movlw	high STR_90
  3284  000AE4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3285  000AE6  EC29  F039         	call	_sprintf	;wreg free
  3286                           
  3287                           ;Main.c: 91: sprintf(line2, "Sistemas embarcados");
  3288  000AEA  0E89               	movlw	low _line2
  3289  000AEC  0100               	movlb	0	; () banked
  3290  000AEE  6FA1               	movwf	sprintf@wh& (0+255),b
  3291  000AF0  0E01               	movlw	high _line2
  3292  000AF2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3293  000AF4  0EC1               	movlw	low STR_91
  3294  000AF6  6FA3               	movwf	sprintf@f& (0+255),b
  3295  000AF8  0E7C               	movlw	high STR_91
  3296  000AFA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3297  000AFC  EC29  F039         	call	_sprintf	;wreg free
  3298                           
  3299                           ;Main.c: 92: sprintf(line3, "Versao Soft.:");
  3300  000B00  0E74               	movlw	low _line3
  3301  000B02  0100               	movlb	0	; () banked
  3302  000B04  6FA1               	movwf	sprintf@wh& (0+255),b
  3303  000B06  0E01               	movlw	high _line3
  3304  000B08  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3305  000B0A  0E5B               	movlw	low STR_116
  3306  000B0C  6FA3               	movwf	sprintf@f& (0+255),b
  3307  000B0E  0E7E               	movlw	high STR_116
  3308  000B10  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3309  000B12  EC29  F039         	call	_sprintf	;wreg free
  3310                           
  3311                           ;Main.c: 93: sprintf(&line4[9], "%s", "Jul 16 2020");
  3312  000B16  0E68               	movlw	low (_line4+9)
  3313  000B18  0100               	movlb	0	; () banked
  3314  000B1A  6FA1               	movwf	sprintf@wh& (0+255),b
  3315  000B1C  0E01               	movlw	high (_line4+9)
  3316  000B1E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3317  000B20  0EFE               	movlw	low (STR_93+9)
  3318  000B22  6FA3               	movwf	sprintf@f& (0+255),b
  3319  000B24  0E7E               	movlw	high (STR_93+9)
  3320  000B26  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3321  000B28  0EB9               	movlw	low STR_15
  3322  000B2A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3323  000B2C  0E7E               	movlw	high STR_15
  3324  000B2E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3325  000B30  EC29  F039         	call	_sprintf	;wreg free
  3326                           
  3327                           ;Main.c: 94: atualizarLCD(line1, line2, line3, line4);
  3328  000B34  0E9E               	movlw	low _line1
  3329  000B36  0100               	movlb	0	; () banked
  3330  000B38  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3331  000B3A  0E01               	movlw	high _line1
  3332  000B3C  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3333  000B3E  0E89               	movlw	low _line2
  3334  000B40  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3335  000B42  0E01               	movlw	high _line2
  3336  000B44  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3337  000B46  0E74               	movlw	low _line3
  3338  000B48  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3339  000B4A  0E01               	movlw	high _line3
  3340  000B4C  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3341  000B4E  0E5F               	movlw	low _line4
  3342  000B50  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3343  000B52  0E01               	movlw	high _line4
  3344  000B54  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3345  000B56  ECF7  F011         	call	_atualizarLCD	;wreg free
  3346                           
  3347                           ;Main.c: 96: delay(2500);
  3348  000B5A  0E09               	movlw	9
  3349  000B5C  0100               	movlb	0	; () banked
  3350  000B5E  6F81               	movwf	(delay@x+1)& (0+255),b
  3351  000B60  0EC4               	movlw	196
  3352  000B62  6F80               	movwf	delay@x& (0+255),b
  3353  000B64  EC0A  F037         	call	_delay	;wreg free
  3354  000B68                     l971:
  3355  000B68  FFFF               	dw	65535	; assembler added errata NOP
  3356  000B6A  0004               	clrwdt		;# 
  3357                           
  3358                           ;Main.c: 101: if (timerColetaLeitura == 0) {
  3359  000B6C  5071               	movf	_timerColetaLeitura,w,c
  3360  000B6E  A4D8               	btfss	status,2,c
  3361  000B70  D004               	goto	l972
  3362                           
  3363                           ;Main.c: 102: timerColetaLeitura = 3;
  3364  000B72  0E03               	movlw	3
  3365  000B74  6E71               	movwf	_timerColetaLeitura,c
  3366                           
  3367                           ;Main.c: 103: lerTransdutor();
  3368  000B76  EC99  F016         	call	_lerTransdutor	;wreg free
  3369  000B7A                     l972:
  3370  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  3371                           
  3372                           ;Main.c: 104: }
  3373                           ;Main.c: 106: partidaBombaEstacionaria(out_BOMBA_ESTACIONARIA);
  3374  000B7C  0100               	movlb	0	; () banked
  3375  000B7E  51F9               	movf	_out_BOMBA_ESTACIONARIA& (0+255),w,b
  3376  000B80  ECAD  F03A         	call	_partidaBombaEstacionaria
  3377                           
  3378                           ;Main.c: 108: if (menu_posi != 28 && !flagErroTransdutor) {
  3379  000B84  0E1C               	movlw	28
  3380  000B86  0100               	movlb	0	; () banked
  3381  000B88  19E2               	xorwf	_menu_posi& (0+255),w,b
  3382  000B8A  B4D8               	btfsc	status,2,c
  3383  000B8C  D007               	goto	l973
  3384                           
  3385                           ; BSR set to: 0
  3386  000B8E  506F               	movf	_flagErroTransdutor,w,c
  3387  000B90  A4D8               	btfss	status,2,c
  3388  000B92  D004               	goto	l973
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;Main.c: 109: acaoBombas();
  3392  000B94  ECFC  F01C         	call	_acaoBombas	;wreg free
  3393                           
  3394                           ;Main.c: 110: verificarIntervaloTesteBombas();
  3395  000B98  EC78  F037         	call	_verificarIntervaloTesteBombas	;wreg free
  3396  000B9C                     l973:
  3397  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  3398                           
  3399                           ;Main.c: 111: }
  3400                           ;Main.c: 113: if (menu_posi != 28) {
  3401  000B9E  0E1C               	movlw	28
  3402  000BA0  0100               	movlb	0	; () banked
  3403  000BA2  19E2               	xorwf	_menu_posi& (0+255),w,b
  3404  000BA4  A4D8               	btfss	status,2,c
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;Main.c: 114: LATEbits.LATE2 = 0;
  3408  000BA6  948D               	bcf	3981,2,c	;volatile
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;Main.c: 115: }
  3412                           ;Main.c: 117: if (!timerVerificarSinal && !gsmOcupado) {
  3413                           
  3414                           ; BSR set to: 0
  3415  000BA8  507E               	movf	_timerVerificarSinal,w,c
  3416  000BAA  A4D8               	btfss	status,2,c
  3417  000BAC  D08B               	goto	l976
  3418                           
  3419                           ; BSR set to: 0
  3420  000BAE  51F5               	movf	_gsmOcupado& (0+255),w,b
  3421  000BB0  A4D8               	btfss	status,2,c
  3422  000BB2  D088               	goto	l976
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;Main.c: 118: getSinalSIM800L();
  3426  000BB4  ECE1  F014         	call	_getSinalSIM800L	;wreg free
  3427                           
  3428                           ;Main.c: 119: }
  3429                           ;Main.c: 121: switch (menu_posi) {
  3430  000BB8  D085               	goto	l976
  3431  000BBA  FFFF               	dw	65535	; assembler added errata NOP
  3432                           
  3433                           ;Main.c: 123: telaPrincipal();
  3434  000BBC  ECC3  F00F         	call	_telaPrincipal	;wreg free
  3435                           
  3436                           ;Main.c: 124: break;
  3437  000BC0  D0A6               	goto	l978
  3438  000BC2  FFFF               	dw	65535	; assembler added errata NOP
  3439                           
  3440                           ;Main.c: 126: sprintf(&line1[1], "DATA/HORA");
  3441  000BC4  0E9F               	movlw	low (_line1+1)
  3442  000BC6  0100               	movlb	0	; () banked
  3443  000BC8  6FA1               	movwf	sprintf@wh& (0+255),b
  3444  000BCA  0E01               	movlw	high (_line1+1)
  3445  000BCC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3446  000BCE  0E4D               	movlw	low STR_119
  3447  000BD0  6FA3               	movwf	sprintf@f& (0+255),b
  3448  000BD2  0E7F               	movlw	high STR_119
  3449  000BD4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3450  000BD6  EC29  F039         	call	_sprintf	;wreg free
  3451                           
  3452                           ;Main.c: 127: sprintf(&line2[1], "PRESSAO DA REDE");
  3453  000BDA  0E8A               	movlw	low (_line2+1)
  3454  000BDC  0100               	movlb	0	; () banked
  3455  000BDE  6FA1               	movwf	sprintf@wh& (0+255),b
  3456  000BE0  0E01               	movlw	high (_line2+1)
  3457  000BE2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3458  000BE4  0EE2               	movlw	low STR_120
  3459  000BE6  6FA3               	movwf	sprintf@f& (0+255),b
  3460  000BE8  0E7D               	movlw	high STR_120
  3461  000BEA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3462  000BEC  EC29  F039         	call	_sprintf	;wreg free
  3463                           
  3464                           ;Main.c: 128: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  3465  000BF0  0E75               	movlw	low (_line3+1)
  3466  000BF2  0100               	movlb	0	; () banked
  3467  000BF4  6FA1               	movwf	sprintf@wh& (0+255),b
  3468  000BF6  0E01               	movlw	high (_line3+1)
  3469  000BF8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3470  000BFA  0E47               	movlw	low STR_121
  3471  000BFC  6FA3               	movwf	sprintf@f& (0+255),b
  3472  000BFE  0E7D               	movlw	high STR_121
  3473  000C00  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3474  000C02  EC29  F039         	call	_sprintf	;wreg free
  3475                           
  3476                           ;Main.c: 129: sprintf(&line4[1], "TELEFONES");
  3477  000C06  0E60               	movlw	low (_line4+1)
  3478  000C08  0100               	movlb	0	; () banked
  3479  000C0A  6FA1               	movwf	sprintf@wh& (0+255),b
  3480  000C0C  0E01               	movlw	high (_line4+1)
  3481  000C0E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3482  000C10  0E61               	movlw	low STR_122
  3483  000C12  6FA3               	movwf	sprintf@f& (0+255),b
  3484  000C14  0E7F               	movlw	high STR_122
  3485  000C16  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3486  000C18  EC29  F039         	call	_sprintf	;wreg free
  3487                           
  3488                           ;Main.c: 130: break;
  3489  000C1C  D078               	goto	l978
  3490  000C1E  FFFF               	dw	65535	; assembler added errata NOP
  3491                           
  3492                           ;Main.c: 132: sprintf(&line1[1], "PERIODO DE TESTES");
  3493  000C20  0E9F               	movlw	low (_line1+1)
  3494  000C22  0100               	movlb	0	; () banked
  3495  000C24  6FA1               	movwf	sprintf@wh& (0+255),b
  3496  000C26  0E01               	movlw	high (_line1+1)
  3497  000C28  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3498  000C2A  0E59               	movlw	low STR_123
  3499  000C2C  6FA3               	movwf	sprintf@f& (0+255),b
  3500  000C2E  0E7D               	movlw	high STR_123
  3501  000C30  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3502  000C32  EC29  F039         	call	_sprintf	;wreg free
  3503                           
  3504                           ;Main.c: 133: sprintf(&line2[1], "DATALOGER");
  3505  000C36  0E8A               	movlw	low (_line2+1)
  3506  000C38  0100               	movlb	0	; () banked
  3507  000C3A  6FA1               	movwf	sprintf@wh& (0+255),b
  3508  000C3C  0E01               	movlw	high (_line2+1)
  3509  000C3E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3510  000C40  0E57               	movlw	low STR_124
  3511  000C42  6FA3               	movwf	sprintf@f& (0+255),b
  3512  000C44  0E7F               	movlw	high STR_124
  3513  000C46  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3514  000C48  EC29  F039         	call	_sprintf	;wreg free
  3515                           
  3516                           ;Main.c: 134: sprintf(&line3[1], "INFO VERSAO");
  3517  000C4C  0E75               	movlw	low (_line3+1)
  3518  000C4E  0100               	movlb	0	; () banked
  3519  000C50  6FA1               	movwf	sprintf@wh& (0+255),b
  3520  000C52  0E01               	movlw	high (_line3+1)
  3521  000C54  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3522  000C56  0EE9               	movlw	low STR_125
  3523  000C58  6FA3               	movwf	sprintf@f& (0+255),b
  3524  000C5A  0E7E               	movlw	high STR_125
  3525  000C5C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3526  000C5E  EC29  F039         	call	_sprintf	;wreg free
  3527                           
  3528                           ;Main.c: 135: sprintf(&line4[1], "Iniciar Testes");
  3529  000C62  0E60               	movlw	low (_line4+1)
  3530  000C64  0100               	movlb	0	; () banked
  3531  000C66  6FA1               	movwf	sprintf@wh& (0+255),b
  3532  000C68  0E01               	movlw	high (_line4+1)
  3533  000C6A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3534  000C6C  0E4C               	movlw	low STR_126
  3535  000C6E  6FA3               	movwf	sprintf@f& (0+255),b
  3536  000C70  0E7E               	movlw	high STR_126
  3537  000C72  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3538  000C74  EC29  F039         	call	_sprintf	;wreg free
  3539                           
  3540                           ;Main.c: 136: break;
  3541  000C78  D04A               	goto	l978
  3542  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  3543                           
  3544                           ;Main.c: 138: tela_ajusteRTC();
  3545  000C7C  ECDF  F010         	call	_tela_ajusteRTC	;wreg free
  3546                           
  3547                           ;Main.c: 139: break;
  3548  000C80  D046               	goto	l978
  3549  000C82  FFFF               	dw	65535	; assembler added errata NOP
  3550                           
  3551                           ;Main.c: 141: ajusteSP_Bombas();
  3552  000C84  EC6A  F00D         	call	_ajusteSP_Bombas	;wreg free
  3553                           
  3554                           ;Main.c: 142: break;
  3555  000C88  D042               	goto	l978
  3556  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  3557                           
  3558                           ;Main.c: 144: configurarEstacionaria();
  3559  000C8C  ECC1  F015         	call	_configurarEstacionaria	;wreg free
  3560                           
  3561                           ;Main.c: 145: break;
  3562  000C90  D03E               	goto	l978
  3563  000C92  FFFF               	dw	65535	; assembler added errata NOP
  3564                           
  3565                           ;Main.c: 147: configuraTelefones();
  3566  000C94  ECDB  F009         	call	_configuraTelefones	;wreg free
  3567                           
  3568                           ;Main.c: 148: break;
  3569  000C98  D03A               	goto	l978
  3570  000C9A  FFFF               	dw	65535	; assembler added errata NOP
  3571                           
  3572                           ;Main.c: 150: tela_testeBombas();
  3573  000C9C  ECF6  F013         	call	_tela_testeBombas	;wreg free
  3574                           
  3575                           ;Main.c: 151: break;
  3576  000CA0  D036               	goto	l978
  3577  000CA2  FFFF               	dw	65535	; assembler added errata NOP
  3578                           
  3579                           ;Main.c: 153: dataLoger();
  3580  000CA4  EC9A  F00E         	call	_dataLoger	;wreg free
  3581                           
  3582                           ;Main.c: 154: break;
  3583  000CA8  D032               	goto	l978
  3584  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  3585                           
  3586                           ;Main.c: 156: informacoes();
  3587  000CAC  ECD8  F017         	call	_informacoes	;wreg free
  3588                           
  3589                           ;Main.c: 157: break;
  3590  000CB0  D02E               	goto	l978
  3591  000CB2  FFFF               	dw	65535	; assembler added errata NOP
  3592                           
  3593                           ;Main.c: 159: acaoTesteBombas();
  3594  000CB4  EC8E  F007         	call	_acaoTesteBombas	;wreg free
  3595                           
  3596                           ;Main.c: 160: break;
  3597  000CB8  D02A               	goto	l978
  3598  000CBA  FFFF               	dw	65535	; assembler added errata NOP
  3599  000CBC  0E00               	movlw	0
  3600  000CBE  0100               	movlb	0	; () banked
  3601  000CC0  6FE2               	movwf	_menu_posi& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;Main.c: 164: }
  3605                           
  3606                           ;Main.c: 163: break;
  3607  000CC2  D025               	goto	l978
  3608  000CC4                     l976:
  3609  000CC4  FFFF               	dw	65535	; assembler added errata NOP
  3610                           
  3611                           ; BSR set to: 0
  3612  000CC6  0100               	movlb	0	; () banked
  3613  000CC8  51E2               	movf	_menu_posi& (0+255),w,b
  3614                           
  3615                           ; Switch size 1, requested type "space"
  3616                           ; Number of cases is 11, Range of values is 0 to 28
  3617                           ; switch strategies available:
  3618                           ; Name         Instructions Cycles
  3619                           ; simple_byte           34    18 (average)
  3620                           ;	Chosen strategy is simple_byte
  3621  000CCA  0A00               	xorlw	0	; case 0
  3622  000CCC  B4D8               	btfsc	status,2,c
  3623  000CCE  D775               	goto	l977
  3624  000CD0  0A01               	xorlw	1	; case 1
  3625  000CD2  B4D8               	btfsc	status,2,c
  3626  000CD4  D776               	goto	l979
  3627  000CD6  0A03               	xorlw	3	; case 2
  3628  000CD8  B4D8               	btfsc	status,2,c
  3629  000CDA  D7A1               	goto	l980
  3630  000CDC  0A16               	xorlw	22	; case 20
  3631  000CDE  B4D8               	btfsc	status,2,c
  3632  000CE0  D7CC               	goto	l981
  3633  000CE2  0A01               	xorlw	1	; case 21
  3634  000CE4  B4D8               	btfsc	status,2,c
  3635  000CE6  D7CD               	goto	l982
  3636  000CE8  0A03               	xorlw	3	; case 22
  3637  000CEA  B4D8               	btfsc	status,2,c
  3638  000CEC  D7CE               	goto	l983
  3639  000CEE  0A01               	xorlw	1	; case 23
  3640  000CF0  B4D8               	btfsc	status,2,c
  3641  000CF2  D7CF               	goto	l984
  3642  000CF4  0A0F               	xorlw	15	; case 24
  3643  000CF6  B4D8               	btfsc	status,2,c
  3644  000CF8  D7D0               	goto	l985
  3645  000CFA  0A01               	xorlw	1	; case 25
  3646  000CFC  B4D8               	btfsc	status,2,c
  3647  000CFE  D7D1               	goto	l986
  3648  000D00  0A02               	xorlw	2	; case 27
  3649  000D02  B4D8               	btfsc	status,2,c
  3650  000D04  D7D2               	goto	l987
  3651  000D06  0A07               	xorlw	7	; case 28
  3652  000D08  B4D8               	btfsc	status,2,c
  3653  000D0A  D7D3               	goto	l988
  3654  000D0C  D7D6               	goto	l989
  3655  000D0E                     l978:
  3656  000D0E  FFFF               	dw	65535	; assembler added errata NOP
  3657                           
  3658                           ;Main.c: 166: if (menu_posi == 1 | menu_posi == 2) {
  3659                           
  3660                           ; BSR set to: 0
  3661  000D10  0100               	movlb	0	; () banked
  3662  000D12  05E2               	decf	_menu_posi& (0+255),w,b
  3663  000D14  B4D8               	btfsc	status,2,c
  3664  000D16  D09F               	goto	l993
  3665                           
  3666                           ; BSR set to: 0
  3667  000D18  0E02               	movlw	2
  3668  000D1A  19E2               	xorwf	_menu_posi& (0+255),w,b
  3669  000D1C  B4D8               	btfsc	status,2,c
  3670  000D1E  D09B               	goto	l993
  3671  000D20  D0D7               	goto	l1014
  3672  000D22  FFFF               	dw	65535	; assembler added errata NOP
  3673                           
  3674                           ;Main.c: 170: menu_posi = 1;
  3675                           
  3676                           ; BSR set to: 0
  3677  000D24  0E01               	movlw	1
  3678  000D26  0100               	movlb	0	; () banked
  3679  000D28  6FE2               	movwf	_menu_posi& (0+255),b
  3680                           
  3681                           ;Main.c: 171: line1[0] = '>';
  3682  000D2A  0E3E               	movlw	62
  3683  000D2C  0101               	movlb	1	; () banked
  3684  000D2E  6F9E               	movwf	_line1& (0+255),b
  3685                           
  3686                           ; BSR set to: 1
  3687                           ;Main.c: 172: if (btPress(4)) {
  3688  000D30  0E04               	movlw	4
  3689  000D32  EC9A  F03B         	call	_btPress
  3690  000D36  0900               	iorlw	0
  3691  000D38  B4D8               	btfsc	status,2,c
  3692  000D3A  D0A9               	goto	l996
  3693                           
  3694                           ;Main.c: 173: _menu_posi = menu_posi;
  3695  000D3C  C0E2  F0E1         	movff	_menu_posi,__menu_posi
  3696                           
  3697                           ;Main.c: 174: menu_posi = 20;
  3698  000D40  0E14               	movlw	20
  3699  000D42  D085               	goto	L6
  3700  000D44  FFFF               	dw	65535	; assembler added errata NOP
  3701                           
  3702                           ;Main.c: 178: menu_posi = 1;
  3703                           
  3704                           ; BSR set to: 0
  3705  000D46  0E01               	movlw	1
  3706  000D48  0100               	movlb	0	; () banked
  3707  000D4A  6FE2               	movwf	_menu_posi& (0+255),b
  3708                           
  3709                           ;Main.c: 179: line2[0] = '>';
  3710  000D4C  0E3E               	movlw	62
  3711  000D4E  0101               	movlb	1	; () banked
  3712  000D50  6F89               	movwf	_line2& (0+255),b
  3713                           
  3714                           ; BSR set to: 1
  3715                           ;Main.c: 180: if (btPress(4)) {
  3716  000D52  0E04               	movlw	4
  3717  000D54  EC9A  F03B         	call	_btPress
  3718  000D58  0900               	iorlw	0
  3719  000D5A  B4D8               	btfsc	status,2,c
  3720  000D5C  D098               	goto	l996
  3721                           
  3722                           ;Main.c: 181: _menu_posi = menu_posi;
  3723  000D5E  C0E2  F0E1         	movff	_menu_posi,__menu_posi
  3724                           
  3725                           ;Main.c: 182: menu_posi = 21;
  3726  000D62  0E15               	movlw	21
  3727  000D64  D074               	goto	L6
  3728  000D66  FFFF               	dw	65535	; assembler added errata NOP
  3729                           
  3730                           ;Main.c: 186: menu_posi = 1;
  3731                           
  3732                           ; BSR set to: 0
  3733  000D68  0E01               	movlw	1
  3734  000D6A  0100               	movlb	0	; () banked
  3735  000D6C  6FE2               	movwf	_menu_posi& (0+255),b
  3736                           
  3737                           ;Main.c: 187: line3[0] = '>';
  3738  000D6E  0E3E               	movlw	62
  3739  000D70  0101               	movlb	1	; () banked
  3740  000D72  6F74               	movwf	_line3& (0+255),b
  3741                           
  3742                           ; BSR set to: 1
  3743                           ;Main.c: 188: if (btPress(4)) {
  3744  000D74  0E04               	movlw	4
  3745  000D76  EC9A  F03B         	call	_btPress
  3746  000D7A  0900               	iorlw	0
  3747  000D7C  B4D8               	btfsc	status,2,c
  3748  000D7E  D087               	goto	l996
  3749                           
  3750                           ;Main.c: 189: _menu_posi = menu_posi;
  3751  000D80  C0E2  F0E1         	movff	_menu_posi,__menu_posi
  3752                           
  3753                           ;Main.c: 190: menu_posi = 22;
  3754  000D84  0E16               	movlw	22
  3755  000D86  D063               	goto	L6
  3756  000D88  FFFF               	dw	65535	; assembler added errata NOP
  3757                           
  3758                           ;Main.c: 194: menu_posi = 1;
  3759                           
  3760                           ; BSR set to: 0
  3761  000D8A  0E01               	movlw	1
  3762  000D8C  0100               	movlb	0	; () banked
  3763  000D8E  6FE2               	movwf	_menu_posi& (0+255),b
  3764                           
  3765                           ;Main.c: 195: line4[0] = '>';
  3766  000D90  0E3E               	movlw	62
  3767  000D92  0101               	movlb	1	; () banked
  3768  000D94  6F5F               	movwf	_line4& (0+255),b
  3769                           
  3770                           ; BSR set to: 1
  3771                           ;Main.c: 196: if (btPress(4)) {
  3772  000D96  0E04               	movlw	4
  3773  000D98  EC9A  F03B         	call	_btPress
  3774  000D9C  0900               	iorlw	0
  3775  000D9E  B4D8               	btfsc	status,2,c
  3776  000DA0  D076               	goto	l996
  3777                           
  3778                           ;Main.c: 197: _menu_posi = menu_posi;
  3779  000DA2  C0E2  F0E1         	movff	_menu_posi,__menu_posi
  3780                           
  3781                           ;Main.c: 198: menu_posi = 23;
  3782  000DA6  0E17               	movlw	23
  3783  000DA8  D052               	goto	L6
  3784  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  3785                           
  3786                           ;Main.c: 202: menu_posi = 2;
  3787                           
  3788                           ; BSR set to: 0
  3789  000DAC  0E02               	movlw	2
  3790  000DAE  0100               	movlb	0	; () banked
  3791  000DB0  6FE2               	movwf	_menu_posi& (0+255),b
  3792                           
  3793                           ;Main.c: 203: line1[0] = '>';
  3794  000DB2  0E3E               	movlw	62
  3795  000DB4  0101               	movlb	1	; () banked
  3796  000DB6  6F9E               	movwf	_line1& (0+255),b
  3797                           
  3798                           ; BSR set to: 1
  3799                           ;Main.c: 204: if (btPress(4)) {
  3800  000DB8  0E04               	movlw	4
  3801  000DBA  EC9A  F03B         	call	_btPress
  3802  000DBE  0900               	iorlw	0
  3803  000DC0  B4D8               	btfsc	status,2,c
  3804  000DC2  D065               	goto	l996
  3805                           
  3806                           ;Main.c: 205: _menu_posi = menu_posi;
  3807  000DC4  C0E2  F0E1         	movff	_menu_posi,__menu_posi
  3808                           
  3809                           ;Main.c: 206: menu_posi = 24;
  3810  000DC8  0E18               	movlw	24
  3811  000DCA  D041               	goto	L6
  3812  000DCC  FFFF               	dw	65535	; assembler added errata NOP
  3813                           
  3814                           ;Main.c: 210: line2[0] = '>';
  3815                           
  3816                           ; BSR set to: 0
  3817  000DCE  0E3E               	movlw	62
  3818  000DD0  0101               	movlb	1	; () banked
  3819  000DD2  6F89               	movwf	_line2& (0+255),b
  3820                           
  3821                           ;Main.c: 211: menu_posi = 2;
  3822  000DD4  0E02               	movlw	2
  3823  000DD6  0100               	movlb	0	; () banked
  3824  000DD8  6FE2               	movwf	_menu_posi& (0+255),b
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;Main.c: 212: if (btPress(4)) {
  3828  000DDA  0E04               	movlw	4
  3829  000DDC  EC9A  F03B         	call	_btPress
  3830  000DE0  0900               	iorlw	0
  3831  000DE2  B4D8               	btfsc	status,2,c
  3832  000DE4  D054               	goto	l996
  3833                           
  3834                           ;Main.c: 213: _menu_posi = menu_posi;
  3835  000DE6  C0E2  F0E1         	movff	_menu_posi,__menu_posi
  3836                           
  3837                           ;Main.c: 214: menu_posi = 25;
  3838  000DEA  0E19               	movlw	25
  3839  000DEC  0100               	movlb	0	; () banked
  3840  000DEE  6FE2               	movwf	_menu_posi& (0+255),b
  3841                           
  3842                           ;Main.c: 215: dtl_carregar_log = 1;
  3843  000DF0  0E01               	movlw	1
  3844  000DF2  0101               	movlb	1	; () banked
  3845  000DF4  6F0C               	movwf	_dtl_carregar_log& (0+255),b
  3846                           
  3847                           ; BSR set to: 1
  3848                           ;Main.c: 216: }
  3849                           ;Main.c: 217: break;
  3850  000DF6  D04B               	goto	l996
  3851  000DF8  FFFF               	dw	65535	; assembler added errata NOP
  3852                           
  3853                           ; BSR set to: 1
  3854                           ;Main.c: 219: line3[0] = '>';
  3855                           
  3856                           ; BSR set to: 1
  3857  000DFA  0E3E               	movlw	62
  3858  000DFC  6F74               	movwf	_line3& (0+255),b
  3859                           
  3860                           ;Main.c: 220: menu_posi = 2;
  3861  000DFE  0E02               	movlw	2
  3862  000E00  0100               	movlb	0	; () banked
  3863  000E02  6FE2               	movwf	_menu_posi& (0+255),b
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;Main.c: 221: if (btPress(4)) {
  3867  000E04  0E04               	movlw	4
  3868  000E06  EC9A  F03B         	call	_btPress
  3869  000E0A  0900               	iorlw	0
  3870  000E0C  B4D8               	btfsc	status,2,c
  3871  000E0E  D03F               	goto	l996
  3872                           
  3873                           ;Main.c: 222: _menu_posi = menu_posi;
  3874  000E10  C0E2  F0E1         	movff	_menu_posi,__menu_posi
  3875                           
  3876                           ;Main.c: 223: menu_posi = 27;
  3877  000E14  0E1B               	movlw	27
  3878  000E16  D01B               	goto	L6
  3879  000E18  FFFF               	dw	65535	; assembler added errata NOP
  3880                           
  3881                           ;Main.c: 227: line4[0] = '>';
  3882                           
  3883                           ; BSR set to: 0
  3884  000E1A  0E3E               	movlw	62
  3885  000E1C  0101               	movlb	1	; () banked
  3886  000E1E  6F5F               	movwf	_line4& (0+255),b
  3887                           
  3888                           ;Main.c: 228: menu_posi = 2;
  3889  000E20  0E02               	movlw	2
  3890  000E22  0100               	movlb	0	; () banked
  3891  000E24  6FE2               	movwf	_menu_posi& (0+255),b
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;Main.c: 229: if (btPress(4) && !ocorrendoIncendio) {
  3895  000E26  0E04               	movlw	4
  3896  000E28  EC9A  F03B         	call	_btPress
  3897  000E2C  0900               	iorlw	0
  3898  000E2E  B4D8               	btfsc	status,2,c
  3899  000E30  D02E               	goto	l996
  3900  000E32  0100               	movlb	0	; () banked
  3901  000E34  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
  3902  000E36  A4D8               	btfss	status,2,c
  3903  000E38  D02A               	goto	l996
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;Main.c: 230: menu_posi = 28;
  3907  000E3A  0E1C               	movlw	28
  3908  000E3C  6FE2               	movwf	_menu_posi& (0+255),b
  3909                           
  3910                           ;Main.c: 231: etapaTesteBombas = 0;
  3911  000E3E  0E00               	movlw	0
  3912  000E40  6E6E               	movwf	_etapaTesteBombas,c
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;Main.c: 232: }
  3916                           ;Main.c: 233: break;
  3917  000E42  D025               	goto	l996
  3918  000E44  FFFF               	dw	65535	; assembler added errata NOP
  3919                           
  3920                           ;Main.c: 235: sub_menu_posi = 1;
  3921                           
  3922                           ; BSR set to: 0
  3923  000E46  0E01               	movlw	1
  3924  000E48  0101               	movlb	1	; () banked
  3925  000E4A  6F20               	movwf	_sub_menu_posi& (0+255),b
  3926                           
  3927                           ;Main.c: 236: menu_posi = 1;
  3928  000E4C  0E01               	movlw	1
  3929  000E4E                     L6:
  3930  000E4E  FFFF               	dw	65535	; assembler added errata NOP
  3931  000E50  0100               	movlb	0	; () banked
  3932  000E52  6FE2               	movwf	_menu_posi& (0+255),b
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;Main.c: 238: }
  3936                           
  3937                           ;Main.c: 237: break;
  3938  000E54  D01C               	goto	l996
  3939  000E56                     l993:
  3940  000E56  FFFF               	dw	65535	; assembler added errata NOP
  3941                           
  3942                           ; BSR set to: 0
  3943                           
  3944                           ; BSR set to: 0
  3945  000E58  0101               	movlb	1	; () banked
  3946  000E5A  5120               	movf	_sub_menu_posi& (0+255),w,b
  3947                           
  3948                           ; Switch size 1, requested type "space"
  3949                           ; Number of cases is 8, Range of values is 1 to 8
  3950                           ; switch strategies available:
  3951                           ; Name         Instructions Cycles
  3952                           ; simple_byte           25    13 (average)
  3953                           ;	Chosen strategy is simple_byte
  3954  000E5C  0A01               	xorlw	1	; case 1
  3955  000E5E  B4D8               	btfsc	status,2,c
  3956  000E60  D760               	goto	l994
  3957  000E62  0A03               	xorlw	3	; case 2
  3958  000E64  B4D8               	btfsc	status,2,c
  3959  000E66  D76E               	goto	l997
  3960  000E68  0A01               	xorlw	1	; case 3
  3961  000E6A  B4D8               	btfsc	status,2,c
  3962  000E6C  D77C               	goto	l999
  3963  000E6E  0A07               	xorlw	7	; case 4
  3964  000E70  B4D8               	btfsc	status,2,c
  3965  000E72  D78A               	goto	l1001
  3966  000E74  0A01               	xorlw	1	; case 5
  3967  000E76  B4D8               	btfsc	status,2,c
  3968  000E78  D798               	goto	l1003
  3969  000E7A  0A03               	xorlw	3	; case 6
  3970  000E7C  B4D8               	btfsc	status,2,c
  3971  000E7E  D7A6               	goto	l1005
  3972  000E80  0A01               	xorlw	1	; case 7
  3973  000E82  B4D8               	btfsc	status,2,c
  3974  000E84  D7B9               	goto	l1007
  3975  000E86  0A0F               	xorlw	15	; case 8
  3976  000E88  B4D8               	btfsc	status,2,c
  3977  000E8A  D7C6               	goto	l1009
  3978  000E8C  D7DB               	goto	l1011
  3979  000E8E                     l996:
  3980  000E8E  FFFF               	dw	65535	; assembler added errata NOP
  3981                           
  3982                           ;Main.c: 240: if (btPress(3)) {
  3983                           
  3984                           ; BSR set to: 1
  3985  000E90  0E03               	movlw	3
  3986  000E92  EC9A  F03B         	call	_btPress
  3987  000E96  0900               	iorlw	0
  3988  000E98  B4D8               	btfsc	status,2,c
  3989  000E9A  D002               	goto	l1012
  3990                           
  3991                           ;Main.c: 241: sub_menu_posi--;
  3992  000E9C  0101               	movlb	1	; () banked
  3993  000E9E  0720               	decf	_sub_menu_posi& (0+255),f,b
  3994  000EA0                     l1012:
  3995  000EA0  FFFF               	dw	65535	; assembler added errata NOP
  3996                           
  3997                           ;Main.c: 242: }
  3998                           ;Main.c: 243: if (btPress(2)) {
  3999                           
  4000                           ; BSR set to: 1
  4001  000EA2  0E02               	movlw	2
  4002  000EA4  EC9A  F03B         	call	_btPress
  4003  000EA8  0900               	iorlw	0
  4004  000EAA  B4D8               	btfsc	status,2,c
  4005  000EAC  D002               	goto	l1013
  4006                           
  4007                           ;Main.c: 244: sub_menu_posi++;
  4008  000EAE  0101               	movlb	1	; () banked
  4009  000EB0  2B20               	incf	_sub_menu_posi& (0+255),f,b
  4010  000EB2                     l1013:
  4011  000EB2  FFFF               	dw	65535	; assembler added errata NOP
  4012                           
  4013                           ;Main.c: 245: }
  4014                           ;Main.c: 246: if (btPress(1)) {
  4015                           
  4016                           ; BSR set to: 1
  4017  000EB4  0E01               	movlw	1
  4018  000EB6  EC9A  F03B         	call	_btPress
  4019  000EBA  0900               	iorlw	0
  4020  000EBC  B4D8               	btfsc	status,2,c
  4021  000EBE  D008               	goto	l1014
  4022                           
  4023                           ;Main.c: 247: menu_posi = 0;
  4024  000EC0  0E00               	movlw	0
  4025  000EC2  0100               	movlb	0	; () banked
  4026  000EC4  6FE2               	movwf	_menu_posi& (0+255),b
  4027                           
  4028                           ;Main.c: 248: option_posi = 0;
  4029  000EC6  0E00               	movlw	0
  4030  000EC8  6FE3               	movwf	_option_posi& (0+255),b
  4031                           
  4032                           ;Main.c: 249: sub_menu_posi = 1;
  4033  000ECA  0E01               	movlw	1
  4034  000ECC  0101               	movlb	1	; () banked
  4035  000ECE  6F20               	movwf	_sub_menu_posi& (0+255),b
  4036  000ED0                     l1014:
  4037  000ED0  FFFF               	dw	65535	; assembler added errata NOP
  4038                           
  4039                           ;Main.c: 250: }
  4040                           ;Main.c: 251: }
  4041                           ;Main.c: 253: if (menu_posi == 20) {
  4042                           
  4043                           ; BSR set to: 1
  4044                           
  4045                           ; BSR set to: 1
  4046  000ED2  0E14               	movlw	20
  4047  000ED4  0100               	movlb	0	; () banked
  4048  000ED6  19E2               	xorwf	_menu_posi& (0+255),w,b
  4049  000ED8  A4D8               	btfss	status,2,c
  4050  000EDA  D002               	goto	l1015
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;Main.c: 254: ajst_rtc = 1;
  4054  000EDC  0E01               	movlw	1
  4055  000EDE  D002               	goto	L7
  4056  000EE0                     l1015:
  4057  000EE0  FFFF               	dw	65535	; assembler added errata NOP
  4058                           
  4059                           ;Main.c: 256: ajst_rtc = 0;
  4060                           
  4061                           ; BSR set to: 1
  4062  000EE2  0E00               	movlw	0
  4063  000EE4                     L7:
  4064  000EE4  FFFF               	dw	65535	; assembler added errata NOP
  4065  000EE6  0101               	movlb	1	; () banked
  4066  000EE8  6F1E               	movwf	_ajst_rtc& (0+255),b
  4067                           
  4068                           ; BSR set to: 1
  4069                           ;Main.c: 257: }
  4070                           ;Main.c: 259: monitorarAlteracaoEstado();
  4071                           
  4072                           ; BSR set to: 1
  4073  000EEA  EC5B  F03B         	call	_monitorarAlteracaoEstado	;wreg free
  4074                           
  4075                           ;Main.c: 260: if (timerAtrasoLCD == 0) {
  4076  000EEE  5074               	movf	_timerAtrasoLCD,w,c
  4077  000EF0  A4D8               	btfss	status,2,c
  4078  000EF2  D63A               	goto	l971
  4079                           
  4080                           ;Main.c: 261: atualizarLCD(line1, line2, line3, line4);
  4081  000EF4  0E9E               	movlw	low _line1
  4082  000EF6  0100               	movlb	0	; () banked
  4083  000EF8  6F88               	movwf	atualizarLCD@line1& (0+255),b
  4084  000EFA  0E01               	movlw	high _line1
  4085  000EFC  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  4086  000EFE  0E89               	movlw	low _line2
  4087  000F00  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  4088  000F02  0E01               	movlw	high _line2
  4089  000F04  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  4090  000F06  0E74               	movlw	low _line3
  4091  000F08  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  4092  000F0A  0E01               	movlw	high _line3
  4093  000F0C  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  4094  000F0E  0E5F               	movlw	low _line4
  4095  000F10  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  4096  000F12  0E01               	movlw	high _line4
  4097  000F14  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  4098  000F16  ECF7  F011         	call	_atualizarLCD	;wreg free
  4099  000F1A  D626               	goto	l971
  4100  000F1C                     __end_of_main:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           postinc0	equ	0xFEE
  4107                           wreg	equ	0xFE8
  4108                           postdec1	equ	0xFE5
  4109                           fsr1l	equ	0xFE1
  4110                           status	equ	0xFD8
  4111                           
  4112 ;; *************** function _verificarIntervaloTesteBombas *****************
  4113 ;; Defined at:
  4114 ;;		line 74 in file "controle.h"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;		None
  4117 ;; Auto vars:     Size  Location     Type
  4118 ;;		None
  4119 ;; Return value:  Size  Location     Type
  4120 ;;                  1    wreg      void 
  4121 ;; Registers used:
  4122 ;;		wreg, status,2, status,0, cstack
  4123 ;; Tracked objects:
  4124 ;;		On entry : 0/0
  4125 ;;		On exit  : 0/0
  4126 ;;		Unchanged: 0/0
  4127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4128 ;;      Params:         0       0       0       0       0       0       0
  4129 ;;      Locals:         0       0       0       0       0       0       0
  4130 ;;      Temps:          0       0       0       0       0       0       0
  4131 ;;      Totals:         0       0       0       0       0       0       0
  4132 ;;Total ram usage:        0 bytes
  4133 ;; Hardware stack levels used:    1
  4134 ;; Hardware stack levels required when called:    9
  4135 ;; This function calls:
  4136 ;;		_writeEEPROM_ext
  4137 ;; This function is called by:
  4138 ;;		_main
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           	psect	text1
  4143  006EF0                     __ptext1:
  4144                           	opt stack 0
  4145  006EF0                     _verificarIntervaloTesteBombas:
  4146                           	opt stack 0
  4147  006EF0  FFFF               	dw	65535	; assembler added errata NOP
  4148                           
  4149                           ;controle.h: 75: if (dias_restante_teste >= intervalo_teste_dia && habilitaTesteAutomati
      +                          co == 1) {
  4150                           
  4151                           ;incstack = 0
  4152  006EF2  0100               	movlb	0	; () banked
  4153  006EF4  51EB               	movf	_intervalo_teste_dia& (0+255),w,b
  4154  006EF6  5DEA               	subwf	_dias_restante_teste& (0+255),w,b
  4155  006EF8  A0D8               	btfss	status,0,c
  4156  006EFA  D013               	goto	l526
  4157                           
  4158                           ; BSR set to: 0
  4159  006EFC  05F2               	decf	_habilitaTesteAutomatico& (0+255),w,b
  4160  006EFE  A4D8               	btfss	status,2,c
  4161  006F00  D010               	goto	l526
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;controle.h: 76: if (_hor == horario_de_teste) {
  4165  006F02  51E9               	movf	_horario_de_teste& (0+255),w,b
  4166  006F04  19EF               	xorwf	__hor& (0+255),w,b
  4167  006F06  A4D8               	btfss	status,2,c
  4168  006F08  D00C               	goto	l526
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;controle.h: 77: dias_restante_teste = 0;
  4172  006F0A  0E00               	movlw	0
  4173  006F0C  6FEA               	movwf	_dias_restante_teste& (0+255),b
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;controle.h: 78: writeEEPROM_ext(10, dias_restante_teste);
  4177  006F0E  C0EA  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
  4178  006F12  0E0A               	movlw	10
  4179  006F14  EC06  F039         	call	_writeEEPROM_ext
  4180                           
  4181                           ;controle.h: 79: etapaTesteBombas = 0;
  4182  006F18  0E00               	movlw	0
  4183  006F1A  6E6E               	movwf	_etapaTesteBombas,c
  4184                           
  4185                           ;controle.h: 80: menu_posi = 28;
  4186  006F1C  0E1C               	movlw	28
  4187  006F1E  0100               	movlb	0	; () banked
  4188  006F20  6FE2               	movwf	_menu_posi& (0+255),b
  4189  006F22                     l526:
  4190  006F22  FFFF               	dw	65535	; assembler added errata NOP
  4191                           
  4192                           ; BSR set to: 0
  4193                           
  4194                           ; BSR set to: 0
  4195                           
  4196                           ; BSR set to: 0
  4197  006F24  0012               	return		;funcret
  4198  006F26  FFFF               	dw	65535	; errata NOP
  4199  006F28                     __end_of_verificarIntervaloTesteBombas:
  4200                           	opt stack 0
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           postdec1	equ	0xFE5
  4208                           fsr1l	equ	0xFE1
  4209                           status	equ	0xFD8
  4210                           
  4211 ;; *************** function _tela_testeBombas *****************
  4212 ;; Defined at:
  4213 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;		None
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;		None
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      void 
  4220 ;; Registers used:
  4221 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4227 ;;      Params:         0       0       0       0       0       0       0
  4228 ;;      Locals:         0       2       0       0       0       0       0
  4229 ;;      Temps:          0       2       0       0       0       0       0
  4230 ;;      Totals:         0       4       0       0       0       0       0
  4231 ;;Total ram usage:        4 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    9
  4234 ;; This function calls:
  4235 ;;		_blink
  4236 ;;		_btPress
  4237 ;;		_sprintf
  4238 ;;		_writeEEPROM_ext
  4239 ;; This function is called by:
  4240 ;;		_main
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text2
  4245  0027EC                     __ptext2:
  4246                           	opt stack 0
  4247  0027EC                     _tela_testeBombas:
  4248                           	opt stack 0
  4249  0027EC  FFFF               	dw	65535	; assembler added errata NOP
  4250                           
  4251                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;incstack = 0
  4255  0027EE  0E9E               	movlw	low _line1
  4256  0027F0  0100               	movlb	0	; () banked
  4257  0027F2  6FA1               	movwf	sprintf@wh& (0+255),b
  4258  0027F4  0E01               	movlw	high _line1
  4259  0027F6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4260  0027F8  0E48               	movlw	low STR_73
  4261  0027FA  6FA3               	movwf	sprintf@f& (0+255),b
  4262  0027FC  0E7C               	movlw	high STR_73
  4263  0027FE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4264  002800  51EA               	movf	_dias_restante_teste& (0+255),w,b
  4265  002802  6FBB               	movwf	??_tela_testeBombas& (0+255),b
  4266  002804  6BBC               	clrf	(??_tela_testeBombas+1)& (0+255),b
  4267  002806  1FBB               	comf	??_tela_testeBombas& (0+255),f,b
  4268  002808  1FBC               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  4269  00280A  4BBB               	infsnz	??_tela_testeBombas& (0+255),f,b
  4270  00280C  2BBC               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  4271  00280E  51EB               	movf	_intervalo_teste_dia& (0+255),w,b
  4272  002810  25BB               	addwf	??_tela_testeBombas& (0+255),w,b
  4273  002812  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  4274  002814  0E00               	movlw	0
  4275  002816  21BC               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  4276  002818  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  4277  00281A  EC29  F039         	call	_sprintf	;wreg free
  4278                           
  4279                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  4280  00281E  0E89               	movlw	low _line2
  4281  002820  0100               	movlb	0	; () banked
  4282  002822  6FA1               	movwf	sprintf@wh& (0+255),b
  4283  002824  0E01               	movlw	high _line2
  4284  002826  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4285  002828  0E99               	movlw	low STR_74
  4286  00282A  6FA3               	movwf	sprintf@f& (0+255),b
  4287  00282C  0E7C               	movlw	high STR_74
  4288  00282E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4289  002830  C0EB  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  4290  002834  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4291  002836  EC29  F039         	call	_sprintf	;wreg free
  4292                           
  4293                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  4294  00283A  0E74               	movlw	low _line3
  4295  00283C  0100               	movlb	0	; () banked
  4296  00283E  6FA1               	movwf	sprintf@wh& (0+255),b
  4297  002840  0E01               	movlw	high _line3
  4298  002842  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4299  002844  0EAD               	movlw	low STR_75
  4300  002846  6FA3               	movwf	sprintf@f& (0+255),b
  4301  002848  0E7C               	movlw	high STR_75
  4302  00284A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4303  00284C  C0E9  F0A5         	movff	_horario_de_teste,?_sprintf+4
  4304  002850  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4305  002852  EC29  F039         	call	_sprintf	;wreg free
  4306                           
  4307                           ;tela_TESTE_BOMBAS.h: 13: sprintf(line4, "ATIVAR: %s", habilitaTesteAutomatico == 0 ? "N
      +                          ao" : "Sim");
  4308  002856  0100               	movlb	0	; () banked
  4309  002858  51F2               	movf	_habilitaTesteAutomatico& (0+255),w,b
  4310  00285A  B4D8               	btfsc	status,2,c
  4311  00285C  D004               	goto	l753
  4312                           
  4313                           ; BSR set to: 0
  4314  00285E  0EF1               	movlw	low STR_78
  4315  002860  6FBD               	movwf	_tela_testeBombas$1600& (0+255),b
  4316  002862  0E7F               	movlw	high STR_78
  4317  002864  D004               	goto	L8
  4318  002866                     l753:
  4319  002866  FFFF               	dw	65535	; assembler added errata NOP
  4320                           
  4321                           ; BSR set to: 0
  4322                           
  4323                           ; BSR set to: 0
  4324  002868  0EF5               	movlw	low STR_77
  4325  00286A  6FBD               	movwf	_tela_testeBombas$1600& (0+255),b
  4326  00286C  0E7F               	movlw	high STR_77
  4327  00286E                     L8:
  4328  00286E  FFFF               	dw	65535	; assembler added errata NOP
  4329  002870  6FBE               	movwf	(_tela_testeBombas$1600+1)& (0+255),b
  4330                           
  4331                           ; BSR set to: 0
  4332                           
  4333                           ; BSR set to: 0
  4334  002872  0E5F               	movlw	low _line4
  4335  002874  6FA1               	movwf	sprintf@wh& (0+255),b
  4336  002876  0E01               	movlw	high _line4
  4337  002878  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4338  00287A  0E38               	movlw	low STR_76
  4339  00287C  6FA3               	movwf	sprintf@f& (0+255),b
  4340  00287E  0E7F               	movlw	high STR_76
  4341  002880  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4342  002882  C0BD  F0A5         	movff	_tela_testeBombas$1600,?_sprintf+4
  4343  002886  C0BE  F0A6         	movff	_tela_testeBombas$1600+1,?_sprintf+5
  4344  00288A  EC29  F039         	call	_sprintf	;wreg free
  4345                           
  4346                           ;tela_TESTE_BOMBAS.h: 15: switch (option_posi) {
  4347  00288E  D067               	goto	l756
  4348  002890  FFFF               	dw	65535	; assembler added errata NOP
  4349                           
  4350                           ;tela_TESTE_BOMBAS.h: 17: blink(line2, 11, 14);
  4351  002892  0E89               	movlw	low _line2
  4352  002894  0100               	movlb	0	; () banked
  4353  002896  6F80               	movwf	blink@line& (0+255),b
  4354  002898  0E01               	movlw	high _line2
  4355  00289A  6F81               	movwf	(blink@line+1)& (0+255),b
  4356  00289C  0E0B               	movlw	11
  4357  00289E  6F82               	movwf	blink@start& (0+255),b
  4358  0028A0  0E0E               	movlw	14
  4359  0028A2  6F83               	movwf	blink@end& (0+255),b
  4360  0028A4  EC45  F038         	call	_blink	;wreg free
  4361                           
  4362                           ;tela_TESTE_BOMBAS.h: 18: if (btPress(3)) {
  4363  0028A8  0E03               	movlw	3
  4364  0028AA  EC9A  F03B         	call	_btPress
  4365  0028AE  0900               	iorlw	0
  4366  0028B0  B4D8               	btfsc	status,2,c
  4367  0028B2  D002               	goto	l758
  4368                           
  4369                           ;tela_TESTE_BOMBAS.h: 19: intervalo_teste_dia++;
  4370  0028B4  0100               	movlb	0	; () banked
  4371  0028B6  2BEB               	incf	_intervalo_teste_dia& (0+255),f,b
  4372  0028B8                     l758:
  4373  0028B8  FFFF               	dw	65535	; assembler added errata NOP
  4374                           
  4375                           ;tela_TESTE_BOMBAS.h: 20: }
  4376                           ;tela_TESTE_BOMBAS.h: 21: if (btPress(2)) {
  4377                           
  4378                           ; BSR set to: 0
  4379  0028BA  0E02               	movlw	2
  4380  0028BC  EC9A  F03B         	call	_btPress
  4381  0028C0  0900               	iorlw	0
  4382  0028C2  B4D8               	btfsc	status,2,c
  4383  0028C4  D059               	goto	l760
  4384                           
  4385                           ;tela_TESTE_BOMBAS.h: 22: intervalo_teste_dia--;
  4386  0028C6  0100               	movlb	0	; () banked
  4387  0028C8  07EB               	decf	_intervalo_teste_dia& (0+255),f,b
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;tela_TESTE_BOMBAS.h: 23: }
  4391                           ;tela_TESTE_BOMBAS.h: 24: break;
  4392  0028CA  D056               	goto	l760
  4393  0028CC  FFFF               	dw	65535	; assembler added errata NOP
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;tela_TESTE_BOMBAS.h: 26: blink(line3, 9, 11);
  4397                           
  4398                           ; BSR set to: 0
  4399  0028CE  0E74               	movlw	low _line3
  4400  0028D0  6F80               	movwf	blink@line& (0+255),b
  4401  0028D2  0E01               	movlw	high _line3
  4402  0028D4  6F81               	movwf	(blink@line+1)& (0+255),b
  4403  0028D6  0E09               	movlw	9
  4404  0028D8  6F82               	movwf	blink@start& (0+255),b
  4405  0028DA  0E0B               	movlw	11
  4406  0028DC  6F83               	movwf	blink@end& (0+255),b
  4407  0028DE  EC45  F038         	call	_blink	;wreg free
  4408                           
  4409                           ;tela_TESTE_BOMBAS.h: 27: if (btPress(3)) {
  4410  0028E2  0E03               	movlw	3
  4411  0028E4  EC9A  F03B         	call	_btPress
  4412  0028E8  0900               	iorlw	0
  4413  0028EA  B4D8               	btfsc	status,2,c
  4414  0028EC  D002               	goto	l762
  4415                           
  4416                           ;tela_TESTE_BOMBAS.h: 28: horario_de_teste++;
  4417  0028EE  0100               	movlb	0	; () banked
  4418  0028F0  2BE9               	incf	_horario_de_teste& (0+255),f,b
  4419  0028F2                     l762:
  4420  0028F2  FFFF               	dw	65535	; assembler added errata NOP
  4421                           
  4422                           ;tela_TESTE_BOMBAS.h: 29: }
  4423                           ;tela_TESTE_BOMBAS.h: 30: if (btPress(2)) {
  4424                           
  4425                           ; BSR set to: 0
  4426  0028F4  0E02               	movlw	2
  4427  0028F6  EC9A  F03B         	call	_btPress
  4428  0028FA  0900               	iorlw	0
  4429  0028FC  B4D8               	btfsc	status,2,c
  4430  0028FE  D002               	goto	l763
  4431                           
  4432                           ;tela_TESTE_BOMBAS.h: 31: horario_de_teste--;
  4433  002900  0100               	movlb	0	; () banked
  4434  002902  07E9               	decf	_horario_de_teste& (0+255),f,b
  4435  002904                     l763:
  4436  002904  FFFF               	dw	65535	; assembler added errata NOP
  4437                           
  4438                           ;tela_TESTE_BOMBAS.h: 32: }
  4439                           ;tela_TESTE_BOMBAS.h: 33: if (horario_de_teste > 23 || horario_de_teste < 0) {
  4440                           
  4441                           ; BSR set to: 0
  4442  002906  0E18               	movlw	24
  4443  002908  0100               	movlb	0	; () banked
  4444  00290A  61E9               	cpfslt	_horario_de_teste& (0+255),b
  4445  00290C  D001               	goto	l766
  4446  00290E  D034               	goto	l760
  4447  002910                     l766:
  4448  002910  FFFF               	dw	65535	; assembler added errata NOP
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;tela_TESTE_BOMBAS.h: 34: horario_de_teste = 0;
  4452                           
  4453                           ; BSR set to: 0
  4454  002912  0E00               	movlw	0
  4455  002914  6FE9               	movwf	_horario_de_teste& (0+255),b
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;tela_TESTE_BOMBAS.h: 35: }
  4459                           ;tela_TESTE_BOMBAS.h: 36: break;
  4460  002916  D030               	goto	l760
  4461  002918  FFFF               	dw	65535	; assembler added errata NOP
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;tela_TESTE_BOMBAS.h: 38: blink(line4, 9, 11);
  4465                           
  4466                           ; BSR set to: 0
  4467  00291A  0E5F               	movlw	low _line4
  4468  00291C  6F80               	movwf	blink@line& (0+255),b
  4469  00291E  0E01               	movlw	high _line4
  4470  002920  6F81               	movwf	(blink@line+1)& (0+255),b
  4471  002922  0E09               	movlw	9
  4472  002924  6F82               	movwf	blink@start& (0+255),b
  4473  002926  0E0B               	movlw	11
  4474  002928  6F83               	movwf	blink@end& (0+255),b
  4475  00292A  EC45  F038         	call	_blink	;wreg free
  4476                           
  4477                           ;tela_TESTE_BOMBAS.h: 39: if (btPress(3)) {
  4478  00292E  0E03               	movlw	3
  4479  002930  EC9A  F03B         	call	_btPress
  4480  002934  0900               	iorlw	0
  4481  002936  B4D8               	btfsc	status,2,c
  4482  002938  D003               	goto	l768
  4483                           
  4484                           ;tela_TESTE_BOMBAS.h: 40: habilitaTesteAutomatico = 1;
  4485  00293A  0E01               	movlw	1
  4486  00293C  0100               	movlb	0	; () banked
  4487  00293E  6FF2               	movwf	_habilitaTesteAutomatico& (0+255),b
  4488  002940                     l768:
  4489  002940  FFFF               	dw	65535	; assembler added errata NOP
  4490                           
  4491                           ;tela_TESTE_BOMBAS.h: 41: }
  4492                           ;tela_TESTE_BOMBAS.h: 42: if (btPress(2)) {
  4493                           
  4494                           ; BSR set to: 0
  4495  002942  0E02               	movlw	2
  4496  002944  EC9A  F03B         	call	_btPress
  4497  002948  0900               	iorlw	0
  4498  00294A  B4D8               	btfsc	status,2,c
  4499  00294C  D015               	goto	l760
  4500                           
  4501                           ;tela_TESTE_BOMBAS.h: 43: habilitaTesteAutomatico = 0;
  4502  00294E  0E00               	movlw	0
  4503  002950  0100               	movlb	0	; () banked
  4504  002952  6FF2               	movwf	_habilitaTesteAutomatico& (0+255),b
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;tela_TESTE_BOMBAS.h: 44: }
  4508                           ;tela_TESTE_BOMBAS.h: 45: break;
  4509  002954  D011               	goto	l760
  4510  002956  FFFF               	dw	65535	; assembler added errata NOP
  4511                           
  4512                           ; BSR set to: 0
  4513                           
  4514                           ; BSR set to: 0
  4515  002958  0E00               	movlw	0
  4516  00295A  6FE3               	movwf	_option_posi& (0+255),b
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;tela_TESTE_BOMBAS.h: 48: }
  4520                           
  4521                           ;tela_TESTE_BOMBAS.h: 47: break;
  4522  00295C  D00D               	goto	l760
  4523  00295E                     l756:
  4524  00295E  FFFF               	dw	65535	; assembler added errata NOP
  4525                           
  4526                           ; BSR set to: 0
  4527  002960  0100               	movlb	0	; () banked
  4528  002962  51E3               	movf	_option_posi& (0+255),w,b
  4529                           
  4530                           ; Switch size 1, requested type "space"
  4531                           ; Number of cases is 3, Range of values is 0 to 2
  4532                           ; switch strategies available:
  4533                           ; Name         Instructions Cycles
  4534                           ; simple_byte           10     6 (average)
  4535                           ;	Chosen strategy is simple_byte
  4536  002964  0A00               	xorlw	0	; case 0
  4537  002966  B4D8               	btfsc	status,2,c
  4538  002968  D793               	goto	l757
  4539  00296A  0A01               	xorlw	1	; case 1
  4540  00296C  B4D8               	btfsc	status,2,c
  4541  00296E  D7AE               	goto	l761
  4542  002970  0A03               	xorlw	3	; case 2
  4543  002972  B4D8               	btfsc	status,2,c
  4544  002974  D7D1               	goto	l767
  4545  002976  D7EF               	goto	l770
  4546  002978                     l760:
  4547  002978  FFFF               	dw	65535	; assembler added errata NOP
  4548                           
  4549                           ;tela_TESTE_BOMBAS.h: 50: if (btPress(1)) {
  4550                           
  4551                           ; BSR set to: 0
  4552  00297A  0E01               	movlw	1
  4553  00297C  EC9A  F03B         	call	_btPress
  4554  002980  0900               	iorlw	0
  4555  002982  B4D8               	btfsc	status,2,c
  4556  002984  D012               	goto	l771
  4557                           
  4558                           ;tela_TESTE_BOMBAS.h: 51: writeEEPROM_ext(6, intervalo_teste_dia);
  4559  002986  C0EB  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  4560  00298A  0E06               	movlw	6
  4561  00298C  EC06  F039         	call	_writeEEPROM_ext
  4562                           
  4563                           ;tela_TESTE_BOMBAS.h: 52: writeEEPROM_ext(11, horario_de_teste);
  4564  002990  C0E9  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  4565  002994  0E0B               	movlw	11
  4566  002996  EC06  F039         	call	_writeEEPROM_ext
  4567                           
  4568                           ;tela_TESTE_BOMBAS.h: 53: writeEEPROM_ext(15, habilitaTesteAutomatico);
  4569  00299A  C0F2  F08C         	movff	_habilitaTesteAutomatico,writeEEPROM_ext@data
  4570  00299E  0E0F               	movlw	15
  4571  0029A0  EC06  F039         	call	_writeEEPROM_ext
  4572                           
  4573                           ;tela_TESTE_BOMBAS.h: 54: menu_posi = _menu_posi;
  4574  0029A4  C0E1  F0E2         	movff	__menu_posi,_menu_posi
  4575                           
  4576                           ;tela_TESTE_BOMBAS.h: 55: } else if (btPress(4)) {
  4577  0029A8  D009               	goto	l773
  4578  0029AA                     l771:
  4579  0029AA  FFFF               	dw	65535	; assembler added errata NOP
  4580  0029AC  0E04               	movlw	4
  4581  0029AE  EC9A  F03B         	call	_btPress
  4582  0029B2  0900               	iorlw	0
  4583  0029B4  B4D8               	btfsc	status,2,c
  4584  0029B6  D002               	goto	l773
  4585                           
  4586                           ;tela_TESTE_BOMBAS.h: 56: option_posi++;
  4587  0029B8  0100               	movlb	0	; () banked
  4588  0029BA  2BE3               	incf	_option_posi& (0+255),f,b
  4589  0029BC                     l773:
  4590  0029BC  FFFF               	dw	65535	; assembler added errata NOP
  4591                           
  4592                           ; BSR set to: 0
  4593                           
  4594                           ; BSR set to: 0
  4595  0029BE  0012               	return		;funcret
  4596  0029C0  FFFF               	dw	65535	; errata NOP
  4597  0029C2                     __end_of_tela_testeBombas:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           postdec1	equ	0xFE5
  4606                           fsr1l	equ	0xFE1
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function _tela_ajusteRTC *****************
  4610 ;; Defined at:
  4611 ;;		line 11 in file "tela_RELOGIO.h"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;		None
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      void 
  4618 ;; Registers used:
  4619 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4625 ;;      Params:         0       0       0       0       0       0       0
  4626 ;;      Locals:         0       0       0       0       0       0       0
  4627 ;;      Temps:          0       0       0       0       0       0       0
  4628 ;;      Totals:         0       0       0       0       0       0       0
  4629 ;;Total ram usage:        0 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    9
  4632 ;; This function calls:
  4633 ;;		_blink
  4634 ;;		_btPress
  4635 ;;		_setDS1307TimeDate
  4636 ;;		_sprintf
  4637 ;;		_validaRTC
  4638 ;; This function is called by:
  4639 ;;		_main
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text3
  4644  0021BE                     __ptext3:
  4645                           	opt stack 0
  4646  0021BE                     _tela_ajusteRTC:
  4647                           	opt stack 0
  4648  0021BE  FFFF               	dw	65535	; assembler added errata NOP
  4649                           
  4650                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  4651                           
  4652                           ;incstack = 0
  4653  0021C0  0E9E               	movlw	low _line1
  4654  0021C2  0100               	movlb	0	; () banked
  4655  0021C4  6FA1               	movwf	sprintf@wh& (0+255),b
  4656  0021C6  0E01               	movlw	high _line1
  4657  0021C8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4658  0021CA  0ECB               	movlw	low STR_69
  4659  0021CC  6FA3               	movwf	sprintf@f& (0+255),b
  4660  0021CE  0E7F               	movlw	high STR_69
  4661  0021D0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4662  0021D2  EC29  F039         	call	_sprintf	;wreg free
  4663                           
  4664                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  4665  0021D6  0E89               	movlw	low _line2
  4666  0021D8  0100               	movlb	0	; () banked
  4667  0021DA  6FA1               	movwf	sprintf@wh& (0+255),b
  4668  0021DC  0E01               	movlw	high _line2
  4669  0021DE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4670  0021E0  0E01               	movlw	low STR_70
  4671  0021E2  6FA3               	movwf	sprintf@f& (0+255),b
  4672  0021E4  0E7E               	movlw	high STR_70
  4673  0021E6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4674  0021E8  C07B  F0A5         	movff	_rtc+4,?_sprintf+4
  4675  0021EC  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4676  0021EE  C07C  F0A7         	movff	_rtc+5,?_sprintf+6
  4677  0021F2  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4678  0021F4  C07D  F0A9         	movff	_rtc+6,?_sprintf+8
  4679  0021F8  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4680  0021FA  EC29  F039         	call	_sprintf	;wreg free
  4681                           
  4682                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  4683  0021FE  0EA9               	movlw	low (_line1+11)
  4684  002200  0100               	movlb	0	; () banked
  4685  002202  6FA1               	movwf	sprintf@wh& (0+255),b
  4686  002204  0E01               	movlw	high (_line1+11)
  4687  002206  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4688  002208  0EC5               	movlw	low STR_71
  4689  00220A  6FA3               	movwf	sprintf@f& (0+255),b
  4690  00220C  0E7F               	movlw	high STR_71
  4691  00220E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4692  002210  EC29  F039         	call	_sprintf	;wreg free
  4693                           
  4694                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  4695  002214  0E94               	movlw	low (_line2+11)
  4696  002216  0100               	movlb	0	; () banked
  4697  002218  6FA1               	movwf	sprintf@wh& (0+255),b
  4698  00221A  0E01               	movlw	high (_line2+11)
  4699  00221C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4700  00221E  0E10               	movlw	low STR_72
  4701  002220  6FA3               	movwf	sprintf@f& (0+255),b
  4702  002222  0E7E               	movlw	high STR_72
  4703  002224  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4704  002226  C07A  F0A5         	movff	_rtc+3,?_sprintf+4
  4705  00222A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4706  00222C  C079  F0A7         	movff	_rtc+2,?_sprintf+6
  4707  002230  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4708  002232  C078  F0A9         	movff	_rtc+1,?_sprintf+8
  4709  002236  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4710  002238  EC29  F039         	call	_sprintf	;wreg free
  4711                           
  4712                           ;tela_RELOGIO.h: 17: switch (option_posi) {
  4713  00223C  D0A1               	goto	l725
  4714  00223E  FFFF               	dw	65535	; assembler added errata NOP
  4715                           
  4716                           ;tela_RELOGIO.h: 19: blink(line2, 1, 2);
  4717  002240  0E89               	movlw	low _line2
  4718  002242  0100               	movlb	0	; () banked
  4719  002244  6F80               	movwf	blink@line& (0+255),b
  4720  002246  0E01               	movlw	high _line2
  4721  002248  6F81               	movwf	(blink@line+1)& (0+255),b
  4722  00224A  0E01               	movlw	1
  4723  00224C  6F82               	movwf	blink@start& (0+255),b
  4724  00224E  0E02               	movlw	2
  4725  002250  6F83               	movwf	blink@end& (0+255),b
  4726  002252  EC45  F038         	call	_blink	;wreg free
  4727                           
  4728                           ;tela_RELOGIO.h: 20: if (btPress(3)) {
  4729  002256  0E03               	movlw	3
  4730  002258  EC9A  F03B         	call	_btPress
  4731  00225C  0900               	iorlw	0
  4732  00225E  A4D8               	btfss	status,2,c
  4733                           
  4734                           ;tela_RELOGIO.h: 21: rtc.date++;
  4735  002260  2A7B               	incf	_rtc+4,f,c
  4736                           
  4737                           ;tela_RELOGIO.h: 22: }
  4738                           ;tela_RELOGIO.h: 23: if (btPress(2)) {
  4739  002262  0E02               	movlw	2
  4740  002264  EC9A  F03B         	call	_btPress
  4741  002268  0900               	iorlw	0
  4742  00226A  B4D8               	btfsc	status,2,c
  4743  00226C  D09F               	goto	l729
  4744                           
  4745                           ;tela_RELOGIO.h: 24: rtc.date--;
  4746  00226E  067B               	decf	_rtc+4,f,c
  4747                           
  4748                           ;tela_RELOGIO.h: 25: }
  4749                           ;tela_RELOGIO.h: 26: break;
  4750  002270  D09D               	goto	l729
  4751  002272  FFFF               	dw	65535	; assembler added errata NOP
  4752                           
  4753                           ;tela_RELOGIO.h: 28: blink(line2, 4, 5);
  4754  002274  0E89               	movlw	low _line2
  4755  002276  0100               	movlb	0	; () banked
  4756  002278  6F80               	movwf	blink@line& (0+255),b
  4757  00227A  0E01               	movlw	high _line2
  4758  00227C  6F81               	movwf	(blink@line+1)& (0+255),b
  4759  00227E  0E04               	movlw	4
  4760  002280  6F82               	movwf	blink@start& (0+255),b
  4761  002282  0E05               	movlw	5
  4762  002284  6F83               	movwf	blink@end& (0+255),b
  4763  002286  EC45  F038         	call	_blink	;wreg free
  4764                           
  4765                           ;tela_RELOGIO.h: 29: if (btPress(3)) {
  4766  00228A  0E03               	movlw	3
  4767  00228C  EC9A  F03B         	call	_btPress
  4768  002290  0900               	iorlw	0
  4769  002292  A4D8               	btfss	status,2,c
  4770                           
  4771                           ;tela_RELOGIO.h: 30: rtc.month++;
  4772  002294  2A7C               	incf	_rtc+5,f,c
  4773                           
  4774                           ;tela_RELOGIO.h: 31: }
  4775                           ;tela_RELOGIO.h: 32: if (btPress(2)) {
  4776  002296  0E02               	movlw	2
  4777  002298  EC9A  F03B         	call	_btPress
  4778  00229C  0900               	iorlw	0
  4779  00229E  B4D8               	btfsc	status,2,c
  4780  0022A0  D085               	goto	l729
  4781                           
  4782                           ;tela_RELOGIO.h: 33: rtc.month--;
  4783  0022A2  067C               	decf	_rtc+5,f,c
  4784                           
  4785                           ;tela_RELOGIO.h: 34: }
  4786                           ;tela_RELOGIO.h: 35: break;
  4787  0022A4  D083               	goto	l729
  4788  0022A6  FFFF               	dw	65535	; assembler added errata NOP
  4789                           
  4790                           ;tela_RELOGIO.h: 37: blink(line2, 7, 8);
  4791  0022A8  0E89               	movlw	low _line2
  4792  0022AA  0100               	movlb	0	; () banked
  4793  0022AC  6F80               	movwf	blink@line& (0+255),b
  4794  0022AE  0E01               	movlw	high _line2
  4795  0022B0  6F81               	movwf	(blink@line+1)& (0+255),b
  4796  0022B2  0E07               	movlw	7
  4797  0022B4  6F82               	movwf	blink@start& (0+255),b
  4798  0022B6  0E08               	movlw	8
  4799  0022B8  6F83               	movwf	blink@end& (0+255),b
  4800  0022BA  EC45  F038         	call	_blink	;wreg free
  4801                           
  4802                           ;tela_RELOGIO.h: 38: if (btPress(3)) {
  4803  0022BE  0E03               	movlw	3
  4804  0022C0  EC9A  F03B         	call	_btPress
  4805  0022C4  0900               	iorlw	0
  4806  0022C6  A4D8               	btfss	status,2,c
  4807                           
  4808                           ;tela_RELOGIO.h: 39: rtc.year++;
  4809  0022C8  2A7D               	incf	_rtc+6,f,c
  4810                           
  4811                           ;tela_RELOGIO.h: 40: }
  4812                           ;tela_RELOGIO.h: 41: if (btPress(2)) {
  4813  0022CA  0E02               	movlw	2
  4814  0022CC  EC9A  F03B         	call	_btPress
  4815  0022D0  0900               	iorlw	0
  4816  0022D2  B4D8               	btfsc	status,2,c
  4817  0022D4  D06B               	goto	l729
  4818                           
  4819                           ;tela_RELOGIO.h: 42: rtc.year--;
  4820  0022D6  067D               	decf	_rtc+6,f,c
  4821                           
  4822                           ;tela_RELOGIO.h: 43: }
  4823                           ;tela_RELOGIO.h: 44: break;
  4824  0022D8  D069               	goto	l729
  4825  0022DA  FFFF               	dw	65535	; assembler added errata NOP
  4826                           
  4827                           ;tela_RELOGIO.h: 46: blink(line2, 12, 13);
  4828  0022DC  0E89               	movlw	low _line2
  4829  0022DE  0100               	movlb	0	; () banked
  4830  0022E0  6F80               	movwf	blink@line& (0+255),b
  4831  0022E2  0E01               	movlw	high _line2
  4832  0022E4  6F81               	movwf	(blink@line+1)& (0+255),b
  4833  0022E6  0E0C               	movlw	12
  4834  0022E8  6F82               	movwf	blink@start& (0+255),b
  4835  0022EA  0E0D               	movlw	13
  4836  0022EC  6F83               	movwf	blink@end& (0+255),b
  4837  0022EE  EC45  F038         	call	_blink	;wreg free
  4838                           
  4839                           ;tela_RELOGIO.h: 47: if (btPress(3)) {
  4840  0022F2  0E03               	movlw	3
  4841  0022F4  EC9A  F03B         	call	_btPress
  4842  0022F8  0900               	iorlw	0
  4843  0022FA  A4D8               	btfss	status,2,c
  4844                           
  4845                           ;tela_RELOGIO.h: 48: rtc.hour++;
  4846  0022FC  2A7A               	incf	_rtc+3,f,c
  4847                           
  4848                           ;tela_RELOGIO.h: 49: }
  4849                           ;tela_RELOGIO.h: 50: if (btPress(2)) {
  4850  0022FE  0E02               	movlw	2
  4851  002300  EC9A  F03B         	call	_btPress
  4852  002304  0900               	iorlw	0
  4853  002306  B4D8               	btfsc	status,2,c
  4854  002308  D051               	goto	l729
  4855                           
  4856                           ;tela_RELOGIO.h: 51: rtc.hour--;
  4857  00230A  067A               	decf	_rtc+3,f,c
  4858                           
  4859                           ;tela_RELOGIO.h: 52: }
  4860                           ;tela_RELOGIO.h: 53: break;
  4861  00230C  D04F               	goto	l729
  4862  00230E  FFFF               	dw	65535	; assembler added errata NOP
  4863                           
  4864                           ;tela_RELOGIO.h: 55: blink(line2, 15, 16);
  4865  002310  0E89               	movlw	low _line2
  4866  002312  0100               	movlb	0	; () banked
  4867  002314  6F80               	movwf	blink@line& (0+255),b
  4868  002316  0E01               	movlw	high _line2
  4869  002318  6F81               	movwf	(blink@line+1)& (0+255),b
  4870  00231A  0E0F               	movlw	15
  4871  00231C  6F82               	movwf	blink@start& (0+255),b
  4872  00231E  0E10               	movlw	16
  4873  002320  6F83               	movwf	blink@end& (0+255),b
  4874  002322  EC45  F038         	call	_blink	;wreg free
  4875                           
  4876                           ;tela_RELOGIO.h: 56: if (btPress(3)) {
  4877  002326  0E03               	movlw	3
  4878  002328  EC9A  F03B         	call	_btPress
  4879  00232C  0900               	iorlw	0
  4880  00232E  A4D8               	btfss	status,2,c
  4881                           
  4882                           ;tela_RELOGIO.h: 57: rtc.min++;
  4883  002330  2A79               	incf	_rtc+2,f,c
  4884                           
  4885                           ;tela_RELOGIO.h: 58: }
  4886                           ;tela_RELOGIO.h: 59: if (btPress(2)) {
  4887  002332  0E02               	movlw	2
  4888  002334  EC9A  F03B         	call	_btPress
  4889  002338  0900               	iorlw	0
  4890  00233A  B4D8               	btfsc	status,2,c
  4891  00233C  D037               	goto	l729
  4892                           
  4893                           ;tela_RELOGIO.h: 60: rtc.min--;
  4894  00233E  0679               	decf	_rtc+2,f,c
  4895                           
  4896                           ;tela_RELOGIO.h: 61: }
  4897                           ;tela_RELOGIO.h: 62: break;
  4898  002340  D035               	goto	l729
  4899  002342  FFFF               	dw	65535	; assembler added errata NOP
  4900                           
  4901                           ;tela_RELOGIO.h: 64: blink(line2, 18, 19);
  4902  002344  0E89               	movlw	low _line2
  4903  002346  0100               	movlb	0	; () banked
  4904  002348  6F80               	movwf	blink@line& (0+255),b
  4905  00234A  0E01               	movlw	high _line2
  4906  00234C  6F81               	movwf	(blink@line+1)& (0+255),b
  4907  00234E  0E12               	movlw	18
  4908  002350  6F82               	movwf	blink@start& (0+255),b
  4909  002352  0E13               	movlw	19
  4910  002354  6F83               	movwf	blink@end& (0+255),b
  4911  002356  EC45  F038         	call	_blink	;wreg free
  4912                           
  4913                           ;tela_RELOGIO.h: 65: if (btPress(3)) {
  4914  00235A  0E03               	movlw	3
  4915  00235C  EC9A  F03B         	call	_btPress
  4916  002360  0900               	iorlw	0
  4917  002362  A4D8               	btfss	status,2,c
  4918                           
  4919                           ;tela_RELOGIO.h: 66: rtc.sec++;
  4920  002364  2A78               	incf	_rtc+1,f,c
  4921                           
  4922                           ;tela_RELOGIO.h: 67: }
  4923                           ;tela_RELOGIO.h: 68: if (btPress(2)) {
  4924  002366  0E02               	movlw	2
  4925  002368  EC9A  F03B         	call	_btPress
  4926  00236C  0900               	iorlw	0
  4927  00236E  B4D8               	btfsc	status,2,c
  4928  002370  D01D               	goto	l729
  4929                           
  4930                           ;tela_RELOGIO.h: 69: rtc.sec--;
  4931  002372  0678               	decf	_rtc+1,f,c
  4932                           
  4933                           ;tela_RELOGIO.h: 70: }
  4934                           ;tela_RELOGIO.h: 71: break;
  4935  002374  D01B               	goto	l729
  4936  002376  FFFF               	dw	65535	; assembler added errata NOP
  4937  002378  0E01               	movlw	1
  4938  00237A  0100               	movlb	0	; () banked
  4939  00237C  6FE3               	movwf	_option_posi& (0+255),b
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;tela_RELOGIO.h: 74: }
  4943                           
  4944                           ;tela_RELOGIO.h: 73: break;
  4945  00237E  D016               	goto	l729
  4946  002380                     l725:
  4947  002380  FFFF               	dw	65535	; assembler added errata NOP
  4948                           
  4949                           ; BSR set to: 0
  4950  002382  0100               	movlb	0	; () banked
  4951  002384  51E3               	movf	_option_posi& (0+255),w,b
  4952                           
  4953                           ; Switch size 1, requested type "space"
  4954                           ; Number of cases is 6, Range of values is 1 to 6
  4955                           ; switch strategies available:
  4956                           ; Name         Instructions Cycles
  4957                           ; simple_byte           19    10 (average)
  4958                           ;	Chosen strategy is simple_byte
  4959  002386  0A01               	xorlw	1	; case 1
  4960  002388  B4D8               	btfsc	status,2,c
  4961  00238A  D759               	goto	l726
  4962  00238C  0A03               	xorlw	3	; case 2
  4963  00238E  B4D8               	btfsc	status,2,c
  4964  002390  D770               	goto	l730
  4965  002392  0A01               	xorlw	1	; case 3
  4966  002394  B4D8               	btfsc	status,2,c
  4967  002396  D787               	goto	l733
  4968  002398  0A07               	xorlw	7	; case 4
  4969  00239A  B4D8               	btfsc	status,2,c
  4970  00239C  D79E               	goto	l736
  4971  00239E  0A01               	xorlw	1	; case 5
  4972  0023A0  B4D8               	btfsc	status,2,c
  4973  0023A2  D7B5               	goto	l739
  4974  0023A4  0A03               	xorlw	3	; case 6
  4975  0023A6  B4D8               	btfsc	status,2,c
  4976  0023A8  D7CC               	goto	l742
  4977  0023AA  D7E5               	goto	l745
  4978  0023AC                     l729:
  4979  0023AC  FFFF               	dw	65535	; assembler added errata NOP
  4980                           
  4981                           ;tela_RELOGIO.h: 75: validaRTC();
  4982                           
  4983                           ; BSR set to: 0
  4984  0023AE  EC4D  F039         	call	_validaRTC	;wreg free
  4985                           
  4986                           ;tela_RELOGIO.h: 77: if (btPress(4)) {
  4987  0023B2  0E04               	movlw	4
  4988  0023B4  EC9A  F03B         	call	_btPress
  4989  0023B8  0900               	iorlw	0
  4990  0023BA  B4D8               	btfsc	status,2,c
  4991  0023BC  D003               	goto	l746
  4992                           
  4993                           ;tela_RELOGIO.h: 78: option_posi++;
  4994  0023BE  0100               	movlb	0	; () banked
  4995  0023C0  2BE3               	incf	_option_posi& (0+255),f,b
  4996                           
  4997                           ;tela_RELOGIO.h: 79: } else if (btPress(1)) {
  4998  0023C2  D012               	goto	l748
  4999  0023C4                     l746:
  5000  0023C4  FFFF               	dw	65535	; assembler added errata NOP
  5001                           
  5002                           ; BSR set to: 0
  5003  0023C6  0E01               	movlw	1
  5004  0023C8  EC9A  F03B         	call	_btPress
  5005  0023CC  0900               	iorlw	0
  5006  0023CE  B4D8               	btfsc	status,2,c
  5007  0023D0  D00B               	goto	l748
  5008                           
  5009                           ;tela_RELOGIO.h: 80: option_posi = 0;
  5010  0023D2  0E00               	movlw	0
  5011  0023D4  0100               	movlb	0	; () banked
  5012  0023D6  6FE3               	movwf	_option_posi& (0+255),b
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;tela_RELOGIO.h: 81: setDS1307TimeDate(&rtc);
  5016  0023D8  0E77               	movlw	low _rtc
  5017  0023DA  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  5018  0023DC  0E00               	movlw	high _rtc
  5019  0023DE  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  5020  0023E0  EC1E  F01A         	call	_setDS1307TimeDate	;wreg free
  5021                           
  5022                           ;tela_RELOGIO.h: 82: menu_posi = _menu_posi;
  5023  0023E4  C0E1  F0E2         	movff	__menu_posi,_menu_posi
  5024  0023E8                     l748:
  5025  0023E8  FFFF               	dw	65535	; assembler added errata NOP
  5026  0023EA  0012               	return		;funcret
  5027  0023EC  FFFF               	dw	65535	; errata NOP
  5028  0023EE                     __end_of_tela_ajusteRTC:
  5029                           	opt stack 0
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           postinc0	equ	0xFEE
  5035                           wreg	equ	0xFE8
  5036                           postdec1	equ	0xFE5
  5037                           fsr1l	equ	0xFE1
  5038                           status	equ	0xFD8
  5039                           
  5040 ;; *************** function _validaRTC *****************
  5041 ;; Defined at:
  5042 ;;		line 107 in file "ds1307.h"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;		None
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;		None
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  2  308[None  ] int 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2, status,0
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/0
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5056 ;;      Params:         0       0       0       0       0       0       0
  5057 ;;      Locals:         0       0       0       0       0       0       0
  5058 ;;      Temps:          0       0       0       0       0       0       0
  5059 ;;      Totals:         0       0       0       0       0       0       0
  5060 ;;Total ram usage:        0 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; Hardware stack levels required when called:    6
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_tela_ajusteRTC
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           	psect	text4
  5071  00729A                     __ptext4:
  5072                           	opt stack 0
  5073  00729A                     _validaRTC:
  5074                           	opt stack 0
  5075  00729A  FFFF               	dw	65535	; assembler added errata NOP
  5076                           
  5077                           ;ds1307.h: 108: if (rtc.date > 31) rtc.date = 0;
  5078                           
  5079                           ;incstack = 0
  5080  00729C  0E1F               	movlw	31
  5081  00729E  647B               	cpfsgt	_rtc+4,c
  5082  0072A0  D002               	goto	l309
  5083  0072A2  0E00               	movlw	0
  5084  0072A4  6E7B               	movwf	_rtc+4,c
  5085  0072A6                     l309:
  5086  0072A6  FFFF               	dw	65535	; assembler added errata NOP
  5087                           
  5088                           ;ds1307.h: 109: if (rtc.hour > 23) rtc.hour = 0;
  5089  0072A8  0E17               	movlw	23
  5090  0072AA  647A               	cpfsgt	_rtc+3,c
  5091  0072AC  D002               	goto	l310
  5092  0072AE  0E00               	movlw	0
  5093  0072B0  6E7A               	movwf	_rtc+3,c
  5094  0072B2                     l310:
  5095  0072B2  FFFF               	dw	65535	; assembler added errata NOP
  5096                           
  5097                           ;ds1307.h: 110: if (rtc.min > 59) rtc.min = 0;
  5098  0072B4  0E3B               	movlw	59
  5099  0072B6  6479               	cpfsgt	_rtc+2,c
  5100  0072B8  D002               	goto	l311
  5101  0072BA  0E00               	movlw	0
  5102  0072BC  6E79               	movwf	_rtc+2,c
  5103  0072BE                     l311:
  5104  0072BE  FFFF               	dw	65535	; assembler added errata NOP
  5105                           
  5106                           ;ds1307.h: 111: if (rtc.month > 12) rtc.month = 0;
  5107  0072C0  0E0C               	movlw	12
  5108  0072C2  647C               	cpfsgt	_rtc+5,c
  5109  0072C4  D002               	goto	l312
  5110  0072C6  0E00               	movlw	0
  5111  0072C8  6E7C               	movwf	_rtc+5,c
  5112  0072CA                     l312:
  5113  0072CA  FFFF               	dw	65535	; assembler added errata NOP
  5114                           
  5115                           ;ds1307.h: 112: if (rtc.sec > 59) rtc.sec = 0;
  5116  0072CC  0E3B               	movlw	59
  5117  0072CE  6478               	cpfsgt	_rtc+1,c
  5118  0072D0  D002               	goto	l313
  5119  0072D2  0E00               	movlw	0
  5120  0072D4  6E78               	movwf	_rtc+1,c
  5121  0072D6                     l313:
  5122  0072D6  FFFF               	dw	65535	; assembler added errata NOP
  5123                           
  5124                           ;ds1307.h: 113: if (rtc.year > 99) rtc.year = 0;
  5125  0072D8  0E63               	movlw	99
  5126  0072DA  647D               	cpfsgt	_rtc+6,c
  5127  0072DC  D002               	goto	l314
  5128  0072DE  0E00               	movlw	0
  5129  0072E0  6E7D               	movwf	_rtc+6,c
  5130  0072E2                     l314:
  5131  0072E2  FFFF               	dw	65535	; assembler added errata NOP
  5132  0072E4  0012               	return		;funcret
  5133  0072E6  FFFF               	dw	65535	; errata NOP
  5134  0072E8                     __end_of_validaRTC:
  5135                           	opt stack 0
  5136                           tblptru	equ	0xFF8
  5137                           tblptrh	equ	0xFF7
  5138                           tblptrl	equ	0xFF6
  5139                           tablat	equ	0xFF5
  5140                           postinc0	equ	0xFEE
  5141                           wreg	equ	0xFE8
  5142                           postdec1	equ	0xFE5
  5143                           fsr1l	equ	0xFE1
  5144                           status	equ	0xFD8
  5145                           
  5146 ;; *************** function _setDS1307TimeDate *****************
  5147 ;; Defined at:
  5148 ;;		line 36 in file "ds1307.h"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  5151 ;;		 -> rtc(7), 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5163 ;;      Params:         0       2       0       0       0       0       0
  5164 ;;      Locals:         0       0       0       0       0       0       0
  5165 ;;      Temps:          0       1       0       0       0       0       0
  5166 ;;      Totals:         0       3       0       0       0       0       0
  5167 ;;Total ram usage:        3 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    8
  5170 ;; This function calls:
  5171 ;;		_DECtoBCD
  5172 ;;		_I2C_Start
  5173 ;;		_I2C_Stop
  5174 ;;		_I2C_Write
  5175 ;; This function is called by:
  5176 ;;		_tela_ajusteRTC
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text5
  5181  00343C                     __ptext5:
  5182                           	opt stack 0
  5183  00343C                     _setDS1307TimeDate:
  5184                           	opt stack 0
  5185  00343C  FFFF               	dw	65535	; assembler added errata NOP
  5186                           
  5187                           ;ds1307.h: 38: I2C_Start();
  5188                           
  5189                           ;incstack = 0
  5190  00343E  ECB2  F035         	call	_I2C_Start	;wreg free
  5191                           
  5192                           ;ds1307.h: 39: I2C_Write(0xD0);
  5193  003442  0E00               	movlw	0
  5194  003444  0100               	movlb	0	; () banked
  5195  003446  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  5196  003448  0ED0               	movlw	208
  5197  00344A  6F8A               	movwf	I2C_Write@d& (0+255),b
  5198  00344C  ECCB  F035         	call	_I2C_Write	;wreg free
  5199                           
  5200                           ;ds1307.h: 40: I2C_Write(0x00);
  5201  003450  0E00               	movlw	0
  5202  003452  0100               	movlb	0	; () banked
  5203  003454  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  5204  003456  0E00               	movlw	0
  5205  003458  6F8A               	movwf	I2C_Write@d& (0+255),b
  5206  00345A  ECCB  F035         	call	_I2C_Write	;wreg free
  5207                           
  5208                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  5209  00345E  0100               	movlb	0	; () banked
  5210  003460  EE20 F001          	lfsr	2,1
  5211  003464  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5212  003466  26D9               	addwf	fsr2l,f,c
  5213  003468  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5214  00346A  22DA               	addwfc	fsr2h,f,c
  5215  00346C  50DF               	movf	indf2,w,c
  5216  00346E  ECC3  F038         	call	_DECtoBCD
  5217  003472  0100               	movlb	0	; () banked
  5218  003474  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5219  003476  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5220  003478  6F8A               	movwf	I2C_Write@d& (0+255),b
  5221  00347A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5222  00347C  ECCB  F035         	call	_I2C_Write	;wreg free
  5223                           
  5224                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  5225  003480  0100               	movlb	0	; () banked
  5226  003482  EE20 F002          	lfsr	2,2
  5227  003486  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5228  003488  26D9               	addwf	fsr2l,f,c
  5229  00348A  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5230  00348C  22DA               	addwfc	fsr2h,f,c
  5231  00348E  50DF               	movf	indf2,w,c
  5232  003490  ECC3  F038         	call	_DECtoBCD
  5233  003494  0100               	movlb	0	; () banked
  5234  003496  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5235  003498  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5236  00349A  6F8A               	movwf	I2C_Write@d& (0+255),b
  5237  00349C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5238  00349E  ECCB  F035         	call	_I2C_Write	;wreg free
  5239                           
  5240                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  5241  0034A2  0100               	movlb	0	; () banked
  5242  0034A4  EE20 F003          	lfsr	2,3
  5243  0034A8  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5244  0034AA  26D9               	addwf	fsr2l,f,c
  5245  0034AC  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5246  0034AE  22DA               	addwfc	fsr2h,f,c
  5247  0034B0  50DF               	movf	indf2,w,c
  5248  0034B2  ECC3  F038         	call	_DECtoBCD
  5249  0034B6  0100               	movlb	0	; () banked
  5250  0034B8  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5251  0034BA  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5252  0034BC  6F8A               	movwf	I2C_Write@d& (0+255),b
  5253  0034BE  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5254  0034C0  ECCB  F035         	call	_I2C_Write	;wreg free
  5255                           
  5256                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  5257  0034C4  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  5258  0034C8  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  5259  0034CC  50DF               	movf	indf2,w,c
  5260  0034CE  ECC3  F038         	call	_DECtoBCD
  5261  0034D2  0100               	movlb	0	; () banked
  5262  0034D4  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5263  0034D6  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5264  0034D8  6F8A               	movwf	I2C_Write@d& (0+255),b
  5265  0034DA  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5266  0034DC  ECCB  F035         	call	_I2C_Write	;wreg free
  5267                           
  5268                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  5269  0034E0  0100               	movlb	0	; () banked
  5270  0034E2  EE20 F004          	lfsr	2,4
  5271  0034E6  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5272  0034E8  26D9               	addwf	fsr2l,f,c
  5273  0034EA  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5274  0034EC  22DA               	addwfc	fsr2h,f,c
  5275  0034EE  50DF               	movf	indf2,w,c
  5276  0034F0  ECC3  F038         	call	_DECtoBCD
  5277  0034F4  0100               	movlb	0	; () banked
  5278  0034F6  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5279  0034F8  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5280  0034FA  6F8A               	movwf	I2C_Write@d& (0+255),b
  5281  0034FC  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5282  0034FE  ECCB  F035         	call	_I2C_Write	;wreg free
  5283                           
  5284                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  5285  003502  0100               	movlb	0	; () banked
  5286  003504  EE20 F005          	lfsr	2,5
  5287  003508  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5288  00350A  26D9               	addwf	fsr2l,f,c
  5289  00350C  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5290  00350E  22DA               	addwfc	fsr2h,f,c
  5291  003510  50DF               	movf	indf2,w,c
  5292  003512  ECC3  F038         	call	_DECtoBCD
  5293  003516  0100               	movlb	0	; () banked
  5294  003518  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5295  00351A  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5296  00351C  6F8A               	movwf	I2C_Write@d& (0+255),b
  5297  00351E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5298  003520  ECCB  F035         	call	_I2C_Write	;wreg free
  5299                           
  5300                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  5301  003524  0100               	movlb	0	; () banked
  5302  003526  EE20 F006          	lfsr	2,6
  5303  00352A  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5304  00352C  26D9               	addwf	fsr2l,f,c
  5305  00352E  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5306  003530  22DA               	addwfc	fsr2h,f,c
  5307  003532  50DF               	movf	indf2,w,c
  5308  003534  ECC3  F038         	call	_DECtoBCD
  5309  003538  0100               	movlb	0	; () banked
  5310  00353A  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5311  00353C  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5312  00353E  6F8A               	movwf	I2C_Write@d& (0+255),b
  5313  003540  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5314  003542  ECCB  F035         	call	_I2C_Write	;wreg free
  5315                           
  5316                           ;ds1307.h: 48: I2C_Stop();
  5317  003546  ECB8  F035         	call	_I2C_Stop	;wreg free
  5318  00354A  0012               	return		;funcret
  5319  00354C  FFFF               	dw	65535	; errata NOP
  5320  00354E                     __end_of_setDS1307TimeDate:
  5321                           	opt stack 0
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           postinc0	equ	0xFEE
  5327                           wreg	equ	0xFE8
  5328                           postdec1	equ	0xFE5
  5329                           fsr1l	equ	0xFE1
  5330                           indf2	equ	0xFDF
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _DECtoBCD *****************
  5336 ;; Defined at:
  5337 ;;		line 24 in file "function.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  val             1    wreg     unsigned char 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  val             1    8[BANK0 ] unsigned char 
  5342 ;;  res             1    9[BANK0 ] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      unsigned char 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5352 ;;      Params:         0       0       0       0       0       0       0
  5353 ;;      Locals:         0       2       0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0
  5355 ;;      Totals:         0       2       0       0       0       0       0
  5356 ;;Total ram usage:        2 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    7
  5359 ;; This function calls:
  5360 ;;		___awdiv
  5361 ;;		___awmod
  5362 ;; This function is called by:
  5363 ;;		_setDS1307TimeDate
  5364 ;;		_setDS1307Time
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text6
  5369  007186                     __ptext6:
  5370                           	opt stack 0
  5371  007186                     _DECtoBCD:
  5372                           	opt stack 0
  5373  007186  FFFF               	dw	65535	; assembler added errata NOP
  5374                           
  5375                           ;incstack = 0
  5376                           ;DECtoBCD@val stored from wreg
  5377  007188  0100               	movlb	0	; () banked
  5378  00718A  6F88               	movwf	DECtoBCD@val& (0+255),b
  5379                           
  5380                           ;function.c: 25: char res;
  5381                           ;function.c: 26: res = (val / 10) << 4;
  5382  00718C  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  5383  007190  0100               	movlb	0	; () banked
  5384  007192  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5385  007194  0E00               	movlw	0
  5386  007196  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5387  007198  0E0A               	movlw	10
  5388  00719A  6F82               	movwf	___awdiv@divisor& (0+255),b
  5389  00719C  ECE9  F01E         	call	___awdiv	;wreg free
  5390  0071A0  0100               	movlb	0	; () banked
  5391  0071A2  3980               	swapf	?___awdiv& (0+255),w,b
  5392  0071A4  0BF0               	andlw	240
  5393  0071A6  6F89               	movwf	DECtoBCD@res& (0+255),b
  5394                           
  5395                           ;function.c: 27: res = res | (val % 10);
  5396  0071A8  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  5397  0071AC  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5398  0071AE  0E00               	movlw	0
  5399  0071B0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5400  0071B2  0E0A               	movlw	10
  5401  0071B4  6F82               	movwf	___awmod@divisor& (0+255),b
  5402  0071B6  EC1E  F03C         	call	___awmod	;wreg free
  5403  0071BA  0100               	movlb	0	; () banked
  5404  0071BC  5180               	movf	?___awmod& (0+255),w,b
  5405  0071BE  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  5406  0071C0  6F89               	movwf	DECtoBCD@res& (0+255),b
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;function.c: 28: return res;
  5410  0071C2  5189               	movf	DECtoBCD@res& (0+255),w,b
  5411                           
  5412                           ; BSR set to: 0
  5413                           
  5414                           ; BSR set to: 0
  5415  0071C4  0012               	return		;funcret
  5416  0071C6  FFFF               	dw	65535	; errata NOP
  5417  0071C8                     __end_of_DECtoBCD:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           postinc0	equ	0xFEE
  5424                           wreg	equ	0xFE8
  5425                           postdec1	equ	0xFE5
  5426                           fsr1l	equ	0xFE1
  5427                           indf2	equ	0xFDF
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function _telaPrincipal *****************
  5433 ;; Defined at:
  5434 ;;		line 30 in file "tela_PRINCIPAL.h"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;		None
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5448 ;;      Params:         0       0       0       0       0       0       0
  5449 ;;      Locals:         0       2       0       0       0       0       0
  5450 ;;      Temps:          0       0       0       0       0       0       0
  5451 ;;      Totals:         0       2       0       0       0       0       0
  5452 ;;Total ram usage:        2 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:   11
  5455 ;; This function calls:
  5456 ;;		_blink
  5457 ;;		_btPress
  5458 ;;		_intToFloatStr
  5459 ;;		_resetParametros
  5460 ;;		_sprintf
  5461 ;; This function is called by:
  5462 ;;		_main
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text7
  5467  001F86                     __ptext7:
  5468                           	opt stack 0
  5469  001F86                     _telaPrincipal:
  5470                           	opt stack 0
  5471  001F86  FFFF               	dw	65535	; assembler added errata NOP
  5472                           
  5473                           ;tela_PRINCIPAL.h: 32: sprintf(&line1[4], " %02d:%02d %02d/%02d", _hor, _min, _dia, _mes
      +                          );
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;incstack = 0
  5477  001F88  0EA2               	movlw	low (_line1+4)
  5478  001F8A  0100               	movlb	0	; () banked
  5479  001F8C  6FA1               	movwf	sprintf@wh& (0+255),b
  5480  001F8E  0E01               	movlw	high (_line1+4)
  5481  001F90  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5482  001F92  0E09               	movlw	low STR_58
  5483  001F94  6FA3               	movwf	sprintf@f& (0+255),b
  5484  001F96  0E7C               	movlw	high STR_58
  5485  001F98  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5486  001F9A  C0EF  F0A5         	movff	__hor,?_sprintf+4
  5487  001F9E  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  5488  001FA0  C0F0  F0A7         	movff	__min,?_sprintf+6
  5489  001FA4  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5490  001FA6  C0EE  F0A9         	movff	__dia,?_sprintf+8
  5491  001FAA  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  5492  001FAC  C0ED  F0AB         	movff	__mes,?_sprintf+10
  5493  001FB0  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  5494  001FB2  EC29  F039         	call	_sprintf	;wreg free
  5495                           
  5496                           ;tela_PRINCIPAL.h: 34: line1[0] = 0x01;
  5497  001FB6  0E01               	movlw	1
  5498  001FB8  0101               	movlb	1	; () banked
  5499  001FBA  6F9E               	movwf	_line1& (0+255),b
  5500                           
  5501                           ; BSR set to: 1
  5502                           ;tela_PRINCIPAL.h: 35: line1[1] = intensidadeSinal;
  5503  001FBC  C0FF  F19F         	movff	_intensidadeSinal,_line1+1
  5504                           
  5505                           ; BSR set to: 1
  5506                           ;tela_PRINCIPAL.h: 36: line1[19] = 0x05;
  5507  001FC0  0E05               	movlw	5
  5508  001FC2  6FB1               	movwf	(_line1+19)& (0+255),b
  5509                           
  5510                           ;tela_PRINCIPAL.h: 38: switch (codigoErro) {
  5511  001FC4  D050               	goto	l697
  5512  001FC6  FFFF               	dw	65535	; assembler added errata NOP
  5513                           
  5514                           ;tela_PRINCIPAL.h: 40: sprintf(line4, " *falha eletrica");
  5515                           
  5516                           ; BSR set to: 1
  5517  001FC8  0E5F               	movlw	low _line4
  5518  001FCA  0100               	movlb	0	; () banked
  5519  001FCC  6FA1               	movwf	sprintf@wh& (0+255),b
  5520  001FCE  0E01               	movlw	high _line4
  5521  001FD0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5522  001FD2  0EA0               	movlw	low STR_59
  5523  001FD4  6FA3               	movwf	sprintf@f& (0+255),b
  5524  001FD6  0E7D               	movlw	high STR_59
  5525  001FD8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5526  001FDA  EC29  F039         	call	_sprintf	;wreg free
  5527                           
  5528                           ;tela_PRINCIPAL.h: 41: break;
  5529  001FDE  D058               	goto	l699
  5530  001FE0  FFFF               	dw	65535	; assembler added errata NOP
  5531                           
  5532                           ;tela_PRINCIPAL.h: 43: sprintf(line4, " *falha GSM");
  5533  001FE2  0E5F               	movlw	low _line4
  5534  001FE4  0100               	movlb	0	; () banked
  5535  001FE6  6FA1               	movwf	sprintf@wh& (0+255),b
  5536  001FE8  0E01               	movlw	high _line4
  5537  001FEA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5538  001FEC  0EDD               	movlw	low STR_60
  5539  001FEE  6FA3               	movwf	sprintf@f& (0+255),b
  5540  001FF0  0E7E               	movlw	high STR_60
  5541  001FF2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5542  001FF4  EC29  F039         	call	_sprintf	;wreg free
  5543                           
  5544                           ;tela_PRINCIPAL.h: 44: break;
  5545  001FF8  D04B               	goto	l699
  5546  001FFA  FFFF               	dw	65535	; assembler added errata NOP
  5547                           
  5548                           ;tela_PRINCIPAL.h: 46: sprintf(line4, " *falha val. ladrao");
  5549  001FFC  0E5F               	movlw	low _line4
  5550  001FFE  0100               	movlb	0	; () banked
  5551  002000  6FA1               	movwf	sprintf@wh& (0+255),b
  5552  002002  0E01               	movlw	high _line4
  5553  002004  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5554  002006  0E85               	movlw	low STR_61
  5555  002008  6FA3               	movwf	sprintf@f& (0+255),b
  5556  00200A  0E7C               	movlw	high STR_61
  5557  00200C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5558  00200E  EC29  F039         	call	_sprintf	;wreg free
  5559  002012  D026               	goto	l7169
  5560  002014  FFFF               	dw	65535	; assembler added errata NOP
  5561                           
  5562                           ;tela_PRINCIPAL.h: 50: sprintf(line4, " *falha B. jockey");
  5563  002016  0E5F               	movlw	low _line4
  5564  002018  0100               	movlb	0	; () banked
  5565  00201A  6FA1               	movwf	sprintf@wh& (0+255),b
  5566  00201C  0E01               	movlw	high _line4
  5567  00201E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5568  002020  0E7D               	movlw	low STR_62
  5569  002022  6FA3               	movwf	sprintf@f& (0+255),b
  5570  002024  0E7D               	movlw	high STR_62
  5571  002026  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5572  002028  EC29  F039         	call	_sprintf	;wreg free
  5573  00202C  D019               	goto	l7169
  5574  00202E  FFFF               	dw	65535	; assembler added errata NOP
  5575                           
  5576                           ;tela_PRINCIPAL.h: 54: sprintf(line4, " *falha B. principal");
  5577  002030  0E5F               	movlw	low _line4
  5578  002032  0100               	movlb	0	; () banked
  5579  002034  6FA1               	movwf	sprintf@wh& (0+255),b
  5580  002036  0E01               	movlw	high _line4
  5581  002038  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5582  00203A  0E1E               	movlw	low STR_63
  5583  00203C  6FA3               	movwf	sprintf@f& (0+255),b
  5584  00203E  0E7C               	movlw	high STR_63
  5585  002040  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5586  002042  EC29  F039         	call	_sprintf	;wreg free
  5587  002046  D00C               	goto	l7169
  5588  002048  FFFF               	dw	65535	; assembler added errata NOP
  5589                           
  5590                           ;tela_PRINCIPAL.h: 58: sprintf(line4, " *falha B. combustao");
  5591  00204A  0E5F               	movlw	low _line4
  5592  00204C  0100               	movlb	0	; () banked
  5593  00204E  6FA1               	movwf	sprintf@wh& (0+255),b
  5594  002050  0E01               	movlw	high _line4
  5595  002052  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5596  002054  0E33               	movlw	low STR_64
  5597  002056  6FA3               	movwf	sprintf@f& (0+255),b
  5598  002058  0E7C               	movlw	high STR_64
  5599  00205A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5600  00205C  EC29  F039         	call	_sprintf	;wreg free
  5601  002060                     l7169:
  5602  002060  FFFF               	dw	65535	; assembler added errata NOP
  5603                           
  5604                           ;tela_PRINCIPAL.h: 59: LATCbits.LATC1 = 1;
  5605  002062  828B               	bsf	3979,1,c	;volatile
  5606                           
  5607                           ;tela_PRINCIPAL.h: 61: }
  5608                           
  5609                           ;tela_PRINCIPAL.h: 60: break;
  5610  002064  D015               	goto	l699
  5611  002066                     l697:
  5612  002066  FFFF               	dw	65535	; assembler added errata NOP
  5613  002068  0100               	movlb	0	; () banked
  5614  00206A  51F4               	movf	_codigoErro& (0+255),w,b
  5615                           
  5616                           ; Switch size 1, requested type "space"
  5617                           ; Number of cases is 6, Range of values is 1 to 6
  5618                           ; switch strategies available:
  5619                           ; Name         Instructions Cycles
  5620                           ; simple_byte           19    10 (average)
  5621                           ;	Chosen strategy is simple_byte
  5622  00206C  0A01               	xorlw	1	; case 1
  5623  00206E  B4D8               	btfsc	status,2,c
  5624  002070  D7AA               	goto	l698
  5625  002072  0A03               	xorlw	3	; case 2
  5626  002074  B4D8               	btfsc	status,2,c
  5627  002076  D7B4               	goto	l700
  5628  002078  0A01               	xorlw	1	; case 3
  5629  00207A  B4D8               	btfsc	status,2,c
  5630  00207C  D7BE               	goto	l701
  5631  00207E  0A07               	xorlw	7	; case 4
  5632  002080  B4D8               	btfsc	status,2,c
  5633  002082  D7C8               	goto	l702
  5634  002084  0A01               	xorlw	1	; case 5
  5635  002086  B4D8               	btfsc	status,2,c
  5636  002088  D7D2               	goto	l703
  5637  00208A  0A03               	xorlw	3	; case 6
  5638  00208C  B4D8               	btfsc	status,2,c
  5639  00208E  D7DC               	goto	l704
  5640  002090                     l699:
  5641  002090  FFFF               	dw	65535	; assembler added errata NOP
  5642                           
  5643                           ;tela_PRINCIPAL.h: 63: if (ocorrendoIncendio == 1) {
  5644                           
  5645                           ; BSR set to: 0
  5646  002092  0100               	movlb	0	; () banked
  5647  002094  05F3               	decf	_ocorrendoIncendio& (0+255),w,b
  5648  002096  A4D8               	btfss	status,2,c
  5649  002098  D00A               	goto	l705
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;tela_PRINCIPAL.h: 64: sprintf(line2, " ALERTA DE INCENDIO");
  5653  00209A  0E89               	movlw	low _line2
  5654  00209C  6FA1               	movwf	sprintf@wh& (0+255),b
  5655  00209E  0E01               	movlw	high _line2
  5656  0020A0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5657  0020A2  0E71               	movlw	low STR_65
  5658  0020A4  6FA3               	movwf	sprintf@f& (0+255),b
  5659  0020A6  0E7C               	movlw	high STR_65
  5660  0020A8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5661  0020AA  EC29  F039         	call	_sprintf	;wreg free
  5662  0020AE                     l705:
  5663  0020AE  FFFF               	dw	65535	; assembler added errata NOP
  5664                           
  5665                           ;tela_PRINCIPAL.h: 65: }
  5666                           ;tela_PRINCIPAL.h: 67: if (flagErroTransdutor) {
  5667  0020B0  506F               	movf	_flagErroTransdutor,w,c
  5668  0020B2  B4D8               	btfsc	status,2,c
  5669  0020B4  D014               	goto	l706
  5670                           
  5671                           ;tela_PRINCIPAL.h: 68: sprintf(&line3[1], "Erro no Transdutor");
  5672  0020B6  0E75               	movlw	low (_line3+1)
  5673  0020B8  0100               	movlb	0	; () banked
  5674  0020BA  6FA1               	movwf	sprintf@wh& (0+255),b
  5675  0020BC  0E01               	movlw	high (_line3+1)
  5676  0020BE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5677  0020C0  0E22               	movlw	low STR_66
  5678  0020C2  6FA3               	movwf	sprintf@f& (0+255),b
  5679  0020C4  0E7D               	movlw	high STR_66
  5680  0020C6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5681  0020C8  EC29  F039         	call	_sprintf	;wreg free
  5682                           
  5683                           ;tela_PRINCIPAL.h: 69: ocorrendoIncendio = 0;
  5684  0020CC  0E00               	movlw	0
  5685  0020CE  0100               	movlb	0	; () banked
  5686  0020D0  6FF3               	movwf	_ocorrendoIncendio& (0+255),b
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;tela_PRINCIPAL.h: 70: LATCbits.LATC1 = 1;
  5690  0020D2  828B               	bsf	3979,1,c	;volatile
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;tela_PRINCIPAL.h: 71: LATDbits.LATD7 = 0;
  5694  0020D4  9E8C               	bcf	3980,7,c	;volatile
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;tela_PRINCIPAL.h: 72: LATAbits.LATA3 = 0;
  5698  0020D6  9689               	bcf	3977,3,c	;volatile
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;tela_PRINCIPAL.h: 73: out_BOMBA_ESTACIONARIA = 0;
  5702  0020D8  0E00               	movlw	0
  5703  0020DA  6FF9               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
  5704                           
  5705                           ;tela_PRINCIPAL.h: 75: } else {
  5706  0020DC  D018               	goto	l707
  5707  0020DE                     l706:
  5708  0020DE  FFFF               	dw	65535	; assembler added errata NOP
  5709                           
  5710                           ;tela_PRINCIPAL.h: 76: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5711                           
  5712                           ; BSR set to: 0
  5713  0020E0  0100               	movlb	0	; () banked
  5714  0020E2  51DB               	movf	_pressao& (0+255),w,b
  5715  0020E4  ECEE  F03C         	call	_intToFloatStr
  5716  0020E8  C0BB  F0C8         	movff	?_intToFloatStr,_telaPrincipal$2570
  5717  0020EC  C0BC  F0C9         	movff	?_intToFloatStr+1,_telaPrincipal$2570+1
  5718                           
  5719                           ;tela_PRINCIPAL.h: 76: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5720  0020F0  0E76               	movlw	low (_line3+2)
  5721  0020F2  0100               	movlb	0	; () banked
  5722  0020F4  6FA1               	movwf	sprintf@wh& (0+255),b
  5723  0020F6  0E01               	movlw	high (_line3+2)
  5724  0020F8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5725  0020FA  0EF2               	movlw	low STR_40
  5726  0020FC  6FA3               	movwf	sprintf@f& (0+255),b
  5727  0020FE  0E7D               	movlw	high STR_40
  5728  002100  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5729  002102  C0C8  F0A5         	movff	_telaPrincipal$2570,?_sprintf+4
  5730  002106  C0C9  F0A6         	movff	_telaPrincipal$2570+1,?_sprintf+5
  5731  00210A  EC29  F039         	call	_sprintf	;wreg free
  5732  00210E                     l707:
  5733  00210E  FFFF               	dw	65535	; assembler added errata NOP
  5734                           
  5735                           ;tela_PRINCIPAL.h: 77: }
  5736                           ;tela_PRINCIPAL.h: 79: if (codigoErro > 1 || ocorrendoIncendio == 1) {
  5737  002110  0E02               	movlw	2
  5738  002112  0100               	movlb	0	; () banked
  5739  002114  61F4               	cpfslt	_codigoErro& (0+255),b
  5740  002116  D003               	goto	u7650
  5741                           
  5742                           ; BSR set to: 0
  5743  002118  05F3               	decf	_ocorrendoIncendio& (0+255),w,b
  5744  00211A  A4D8               	btfss	status,2,c
  5745  00211C  D00E               	goto	l711
  5746  00211E                     u7650:
  5747  00211E  FFFF               	dw	65535	; assembler added errata NOP
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;tela_PRINCIPAL.h: 80: if (textoAlternativo) {
  5751                           
  5752                           ; BSR set to: 0
  5753  002120  5070               	movf	_textoAlternativo,w,c
  5754  002122  B4D8               	btfsc	status,2,c
  5755  002124  D00A               	goto	l711
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;tela_PRINCIPAL.h: 81: sprintf(line4, " Press ESC p/ Reset");
  5759  002126  0E5F               	movlw	low _line4
  5760  002128  6FA1               	movwf	sprintf@wh& (0+255),b
  5761  00212A  0E01               	movlw	high _line4
  5762  00212C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5763  00212E  0ED5               	movlw	low STR_68
  5764  002130  6FA3               	movwf	sprintf@f& (0+255),b
  5765  002132  0E7C               	movlw	high STR_68
  5766  002134  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5767  002136  EC29  F039         	call	_sprintf	;wreg free
  5768  00213A                     l711:
  5769  00213A  FFFF               	dw	65535	; assembler added errata NOP
  5770                           
  5771                           ;tela_PRINCIPAL.h: 82: }
  5772                           ;tela_PRINCIPAL.h: 83: }
  5773                           ;tela_PRINCIPAL.h: 85: if (btPress(1)) {
  5774  00213C  0E01               	movlw	1
  5775  00213E  EC9A  F03B         	call	_btPress
  5776  002142  0900               	iorlw	0
  5777  002144  B4D8               	btfsc	status,2,c
  5778  002146  D003               	goto	l712
  5779                           
  5780                           ;tela_PRINCIPAL.h: 86: resetParametros();
  5781  002148  EC64  F038         	call	_resetParametros	;wreg free
  5782                           
  5783                           ;tela_PRINCIPAL.h: 87: } else if (btPress(4)) {
  5784  00214C  D00D               	goto	l714
  5785  00214E                     l712:
  5786  00214E  FFFF               	dw	65535	; assembler added errata NOP
  5787  002150  0E04               	movlw	4
  5788  002152  EC9A  F03B         	call	_btPress
  5789  002156  0900               	iorlw	0
  5790  002158  B4D8               	btfsc	status,2,c
  5791  00215A  D006               	goto	l714
  5792                           
  5793                           ;tela_PRINCIPAL.h: 88: menu_posi = 1;
  5794  00215C  0E01               	movlw	1
  5795  00215E  0100               	movlb	0	; () banked
  5796  002160  6FE2               	movwf	_menu_posi& (0+255),b
  5797                           
  5798                           ;tela_PRINCIPAL.h: 89: sub_menu_posi = 1;
  5799  002162  0E01               	movlw	1
  5800  002164  0101               	movlb	1	; () banked
  5801  002166  6F20               	movwf	_sub_menu_posi& (0+255),b
  5802  002168                     l714:
  5803  002168  FFFF               	dw	65535	; assembler added errata NOP
  5804                           
  5805                           ;tela_PRINCIPAL.h: 90: }
  5806                           ;tela_PRINCIPAL.h: 92: if (!PORTCbits.RC0) {
  5807                           
  5808                           ; BSR set to: 1
  5809                           
  5810                           ; BSR set to: 1
  5811  00216A  B082               	btfsc	3970,0,c	;volatile
  5812  00216C  D011               	goto	l716
  5813                           
  5814                           ;tela_PRINCIPAL.h: 93: blink(line1, 20, 20);
  5815  00216E  0E9E               	movlw	low _line1
  5816  002170  0100               	movlb	0	; () banked
  5817  002172  6F80               	movwf	blink@line& (0+255),b
  5818  002174  0E01               	movlw	high _line1
  5819  002176  6F81               	movwf	(blink@line+1)& (0+255),b
  5820  002178  0E14               	movlw	20
  5821  00217A  6F82               	movwf	blink@start& (0+255),b
  5822  00217C  0E14               	movlw	20
  5823  00217E  6F83               	movwf	blink@end& (0+255),b
  5824  002180  EC45  F038         	call	_blink	;wreg free
  5825                           
  5826                           ;tela_PRINCIPAL.h: 94: if (codigoErro == 0) {
  5827  002184  0100               	movlb	0	; () banked
  5828  002186  51F4               	movf	_codigoErro& (0+255),w,b
  5829  002188  A4D8               	btfss	status,2,c
  5830  00218A  D002               	goto	l716
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;tela_PRINCIPAL.h: 95: codigoErro = 1;
  5834  00218C  0E01               	movlw	1
  5835  00218E  6FF4               	movwf	_codigoErro& (0+255),b
  5836  002190                     l716:
  5837  002190  FFFF               	dw	65535	; assembler added errata NOP
  5838                           
  5839                           ;tela_PRINCIPAL.h: 96: }
  5840                           ;tela_PRINCIPAL.h: 97: }
  5841                           ;tela_PRINCIPAL.h: 99: if (status_jockey == 0) {
  5842                           
  5843                           ; BSR set to: 0
  5844  002192  0100               	movlb	0	; () banked
  5845  002194  51FD               	movf	_status_jockey& (0+255),w,b
  5846  002196  A4D8               	btfss	status,2,c
  5847  002198  D002               	goto	l717
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;tela_PRINCIPAL.h: 100: codigoErro = 4;
  5851  00219A  0E04               	movlw	4
  5852  00219C  D00B               	goto	L10
  5853  00219E                     l717:
  5854  00219E  FFFF               	dw	65535	; assembler added errata NOP
  5855                           
  5856                           ; BSR set to: 0
  5857                           
  5858                           ; BSR set to: 0
  5859  0021A0  51FC               	movf	_status_principal& (0+255),w,b
  5860  0021A2  A4D8               	btfss	status,2,c
  5861  0021A4  D002               	goto	l719
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;tela_PRINCIPAL.h: 102: codigoErro = 5;
  5865  0021A6  0E05               	movlw	5
  5866  0021A8  D005               	goto	L10
  5867  0021AA                     l719:
  5868  0021AA  FFFF               	dw	65535	; assembler added errata NOP
  5869                           
  5870                           ; BSR set to: 0
  5871                           
  5872                           ; BSR set to: 0
  5873  0021AC  51FB               	movf	_status_estacionaria& (0+255),w,b
  5874  0021AE  A4D8               	btfss	status,2,c
  5875  0021B0  D003               	goto	l721
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;tela_PRINCIPAL.h: 104: codigoErro = 6;
  5879  0021B2  0E06               	movlw	6
  5880  0021B4                     L10:
  5881  0021B4  FFFF               	dw	65535	; assembler added errata NOP
  5882  0021B6  6FF4               	movwf	_codigoErro& (0+255),b
  5883  0021B8                     l721:
  5884  0021B8  FFFF               	dw	65535	; assembler added errata NOP
  5885                           
  5886                           ; BSR set to: 0
  5887                           
  5888                           ; BSR set to: 0
  5889                           
  5890                           ; BSR set to: 0
  5891                           
  5892                           ; BSR set to: 0
  5893  0021BA  0012               	return		;funcret
  5894  0021BC  FFFF               	dw	65535	; errata NOP
  5895  0021BE                     __end_of_telaPrincipal:
  5896                           	opt stack 0
  5897                           tblptru	equ	0xFF8
  5898                           tblptrh	equ	0xFF7
  5899                           tblptrl	equ	0xFF6
  5900                           tablat	equ	0xFF5
  5901                           postinc0	equ	0xFEE
  5902                           wreg	equ	0xFE8
  5903                           postdec1	equ	0xFE5
  5904                           fsr1l	equ	0xFE1
  5905                           indf2	equ	0xFDF
  5906                           fsr2h	equ	0xFDA
  5907                           fsr2l	equ	0xFD9
  5908                           status	equ	0xFD8
  5909                           
  5910 ;; *************** function _resetParametros *****************
  5911 ;; Defined at:
  5912 ;;		line 12 in file "tela_PRINCIPAL.h"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;		None
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;		None
  5917 ;; Return value:  Size  Location     Type
  5918 ;;                  1    wreg      void 
  5919 ;; Registers used:
  5920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5926 ;;      Params:         0       0       0       0       0       0       0
  5927 ;;      Locals:         0       0       0       0       0       0       0
  5928 ;;      Temps:          0       0       0       0       0       0       0
  5929 ;;      Totals:         0       0       0       0       0       0       0
  5930 ;;Total ram usage:        0 bytes
  5931 ;; Hardware stack levels used:    1
  5932 ;; Hardware stack levels required when called:   10
  5933 ;; This function calls:
  5934 ;;		_reiniciaLCD
  5935 ;; This function is called by:
  5936 ;;		_telaPrincipal
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text8
  5941  0070C8                     __ptext8:
  5942                           	opt stack 0
  5943  0070C8                     _resetParametros:
  5944                           	opt stack 0
  5945  0070C8  FFFF               	dw	65535	; assembler added errata NOP
  5946                           
  5947                           ;tela_PRINCIPAL.h: 13: timerIntervaloEntreBombas = 3;
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;incstack = 0
  5951  0070CA  0E03               	movlw	3
  5952  0070CC  0100               	movlb	0	; () banked
  5953  0070CE  6FFE               	movwf	_timerIntervaloEntreBombas& (0+255),b
  5954                           
  5955                           ;tela_PRINCIPAL.h: 14: ocorrendoIncendio = 0;
  5956  0070D0  0E00               	movlw	0
  5957  0070D2  6FF3               	movwf	_ocorrendoIncendio& (0+255),b
  5958                           
  5959                           ;tela_PRINCIPAL.h: 15: codigoErro = 0;
  5960  0070D4  0E00               	movlw	0
  5961  0070D6  6FF4               	movwf	_codigoErro& (0+255),b
  5962                           
  5963                           ;tela_PRINCIPAL.h: 16: status_estacionaria = 1;
  5964  0070D8  0E01               	movlw	1
  5965  0070DA  6FFB               	movwf	_status_estacionaria& (0+255),b
  5966                           
  5967                           ;tela_PRINCIPAL.h: 17: status_jockey = 1;
  5968  0070DC  0E01               	movlw	1
  5969  0070DE  6FFD               	movwf	_status_jockey& (0+255),b
  5970                           
  5971                           ;tela_PRINCIPAL.h: 18: status_principal = 1;
  5972  0070E0  0E01               	movlw	1
  5973  0070E2  6FFC               	movwf	_status_principal& (0+255),b
  5974                           
  5975                           ;tela_PRINCIPAL.h: 19: gsmOcupado = 0;
  5976  0070E4  0E00               	movlw	0
  5977  0070E6  6FF5               	movwf	_gsmOcupado& (0+255),b
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;tela_PRINCIPAL.h: 20: LATDbits.LATD7 = 0;
  5981  0070E8  9E8C               	bcf	3980,7,c	;volatile
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;tela_PRINCIPAL.h: 21: LATAbits.LATA3 = 0;
  5985  0070EA  9689               	bcf	3977,3,c	;volatile
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;tela_PRINCIPAL.h: 22: LATCbits.LATC1 = 0;
  5989  0070EC  928B               	bcf	3979,1,c	;volatile
  5990                           
  5991                           ;tela_PRINCIPAL.h: 23: out_BOMBA_ESTACIONARIA = 0;
  5992  0070EE  0E00               	movlw	0
  5993  0070F0  6FF9               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
  5994                           
  5995                           ;tela_PRINCIPAL.h: 24: tempo_limite_partida = 0;
  5996  0070F2  0E00               	movlw	0
  5997  0070F4  6E6A               	movwf	_tempo_limite_partida,c
  5998                           
  5999                           ;tela_PRINCIPAL.h: 25: tempo_partida = 0;
  6000  0070F6  0E00               	movlw	0
  6001  0070F8  6E6B               	movwf	_tempo_partida,c
  6002                           
  6003                           ;tela_PRINCIPAL.h: 26: flagErroTransdutor = 0;
  6004  0070FA  0E00               	movlw	0
  6005  0070FC  6E6F               	movwf	_flagErroTransdutor,c
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;tela_PRINCIPAL.h: 27: reiniciaLCD();
  6009  0070FE  EC40  F036         	call	_reiniciaLCD	;wreg free
  6010  007102  0012               	return		;funcret
  6011  007104  FFFF               	dw	65535	; errata NOP
  6012  007106                     __end_of_resetParametros:
  6013                           	opt stack 0
  6014                           tblptru	equ	0xFF8
  6015                           tblptrh	equ	0xFF7
  6016                           tblptrl	equ	0xFF6
  6017                           tablat	equ	0xFF5
  6018                           postinc0	equ	0xFEE
  6019                           wreg	equ	0xFE8
  6020                           postdec1	equ	0xFE5
  6021                           fsr1l	equ	0xFE1
  6022                           indf2	equ	0xFDF
  6023                           fsr2h	equ	0xFDA
  6024                           fsr2l	equ	0xFD9
  6025                           status	equ	0xFD8
  6026                           
  6027 ;; *************** function _reiniciaLCD *****************
  6028 ;; Defined at:
  6029 ;;		line 205 in file "lcd.h"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;		None
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;		None
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      void 
  6036 ;; Registers used:
  6037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6043 ;;      Params:         0       0       0       0       0       0       0
  6044 ;;      Locals:         0       0       0       0       0       0       0
  6045 ;;      Temps:          0       0       0       0       0       0       0
  6046 ;;      Totals:         0       0       0       0       0       0       0
  6047 ;;Total ram usage:        0 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    9
  6050 ;; This function calls:
  6051 ;;		_Lcd_Init
  6052 ;;		_criarCaracteresCGRAM
  6053 ;; This function is called by:
  6054 ;;		_resetParametros
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           	psect	text9
  6059  006C80                     __ptext9:
  6060                           	opt stack 0
  6061  006C80                     _reiniciaLCD:
  6062                           	opt stack 0
  6063  006C80  FFFF               	dw	65535	; assembler added errata NOP
  6064                           
  6065                           ;lcd.h: 206: Lcd_Init();
  6066                           
  6067                           ;incstack = 0
  6068  006C82  EC61  F03C         	call	_Lcd_Init	;wreg free
  6069                           
  6070                           ;lcd.h: 207: criarCaracteresCGRAM();
  6071  006C86  EC61  F01D         	call	_criarCaracteresCGRAM	;wreg free
  6072                           
  6073                           ;lcd.h: 209: timerAtrasoLCD = 1;
  6074  006C8A  0E01               	movlw	1
  6075  006C8C  6E74               	movwf	_timerAtrasoLCD,c
  6076                           
  6077                           ;lcd.h: 210: ultimoEstadoLCD = 0;
  6078  006C8E  0E00               	movlw	0
  6079  006C90  0101               	movlb	1	; () banked
  6080  006C92  6FE3               	movwf	_ultimoEstadoLCD& (0+255),b
  6081  006C94  0E00               	movlw	0
  6082  006C96  6FE4               	movwf	(_ultimoEstadoLCD+1)& (0+255),b
  6083  006C98  0E00               	movlw	0
  6084  006C9A  6FE5               	movwf	(_ultimoEstadoLCD+2)& (0+255),b
  6085  006C9C  0E00               	movlw	0
  6086  006C9E  6FE6               	movwf	(_ultimoEstadoLCD+3)& (0+255),b
  6087                           
  6088                           ; BSR set to: 1
  6089  006CA0  0012               	return		;funcret
  6090  006CA2  FFFF               	dw	65535	; errata NOP
  6091  006CA4                     __end_of_reiniciaLCD:
  6092                           	opt stack 0
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           postinc0	equ	0xFEE
  6098                           wreg	equ	0xFE8
  6099                           postdec1	equ	0xFE5
  6100                           fsr1l	equ	0xFE1
  6101                           indf2	equ	0xFDF
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _criarCaracteresCGRAM *****************
  6107 ;; Defined at:
  6108 ;;		line 175 in file "lcd.h"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;		None
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  character      48    7[BANK0 ] const unsigned char [8][
  6113 ;;  i               1   59[BANK0 ] unsigned char 
  6114 ;;  j               1   58[BANK0 ] unsigned char 
  6115 ;;  k               1   57[BANK0 ] unsigned char 
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      void 
  6118 ;; Registers used:
  6119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6125 ;;      Params:         0       0       0       0       0       0       0
  6126 ;;      Locals:         0      53       0       0       0       0       0
  6127 ;;      Temps:          0       3       0       0       0       0       0
  6128 ;;      Totals:         0      56       0       0       0       0       0
  6129 ;;Total ram usage:       56 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    8
  6132 ;; This function calls:
  6133 ;;		_Lcd_Cmd
  6134 ;;		_Lcd_Write_Char
  6135 ;; This function is called by:
  6136 ;;		_reiniciaLCD
  6137 ;;		_main
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           	psect	text10
  6142  003AC2                     __ptext10:
  6143                           	opt stack 0
  6144  003AC2                     _criarCaracteresCGRAM:
  6145                           	opt stack 0
  6146  003AC2  FFFF               	dw	65535	; assembler added errata NOP
  6147                           
  6148                           ;lcd.h: 176: const char character[6][8] = {
  6149                           ;lcd.h: 177: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  6150                           ;lcd.h: 178: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  6151                           ;lcd.h: 179: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  6152                           ;lcd.h: 180: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  6153                           ;lcd.h: 181: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  6154                           ;lcd.h: 182: };
  6155                           
  6156                           ; BSR set to: 1
  6157                           ;incstack = 0
  6158  003AC4  0E71               	movlw	low criarCaracteresCGRAM@F2969
  6159  003AC6  6EF6               	movwf	tblptrl,c
  6160  003AC8                     	if	1	;There is more than 1 active tblptr byte
  6161  003AC8  0E7A               	movlw	high criarCaracteresCGRAM@F2969
  6162  003ACA  6EF7               	movwf	tblptrh,c
  6163  003ACC                     	endif
  6164  003ACC                     	if	0	;There are less than 3 active tblptr bytes
  6165  003ACC                     	endif
  6166  003ACC  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  6167  003AD0  0E2F               	movlw	47
  6168  003AD2                     u4910:
  6169  003AD2  0009               	tblrd		*+
  6170  003AD4  FFFF               	dw	65535	; errata NOP
  6171  003AD6  CFF5 FFDE          	movff	tablat,postinc2
  6172  003ADA  06E8               	decf	wreg,f,c
  6173  003ADC  E2FA               	bc	u4910
  6174                           
  6175                           ;lcd.h: 183: Lcd_Cmd(0b0100);
  6176  003ADE  0E04               	movlw	4
  6177  003AE0  EC79  F036         	call	_Lcd_Cmd
  6178                           
  6179                           ;lcd.h: 184: Lcd_Cmd(0b0000);
  6180  003AE4  0E00               	movlw	0
  6181  003AE6  EC79  F036         	call	_Lcd_Cmd
  6182                           
  6183                           ;lcd.h: 185: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6184  003AEA  0E32               	movlw	50
  6185  003AEC                     u9117:
  6186  003AEC  FFFF               	dw	65535	; errata NOP
  6187  003AEE  2EE8               	decfsz	wreg,f,c
  6188  003AF0  D7FD               	bra	u9117
  6189                           
  6190                           ;lcd.h: 186: char i = 0, j = 0, k = 0;
  6191  003AF2  0E00               	movlw	0
  6192  003AF4  0100               	movlb	0	; () banked
  6193  003AF6  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  6194                           
  6195                           ; BSR set to: 0
  6196  003AF8  0E00               	movlw	0
  6197  003AFA  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  6198                           
  6199                           ; BSR set to: 0
  6200  003AFC  0E00               	movlw	0
  6201  003AFE  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;lcd.h: 187: for (i = 0; i < 5; i++) {
  6205  003B00  0E00               	movlw	0
  6206  003B02  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  6207  003B04                     l5277:
  6208  003B04  FFFF               	dw	65535	; assembler added errata NOP
  6209                           
  6210                           ; BSR set to: 0
  6211  003B06  0E04               	movlw	4
  6212  003B08  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  6213  003B0A  D001               	goto	l651
  6214  003B0C  D03A               	goto	u4970
  6215  003B0E                     l651:
  6216  003B0E  FFFF               	dw	65535	; assembler added errata NOP
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;lcd.h: 188: if (k == 1) i = 0;
  6220                           
  6221                           ; BSR set to: 0
  6222  003B10  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  6223  003B12  A4D8               	btfss	status,2,c
  6224  003B14  D002               	goto	l653
  6225                           
  6226                           ; BSR set to: 0
  6227  003B16  0E00               	movlw	0
  6228  003B18  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  6229  003B1A                     l653:
  6230  003B1A  FFFF               	dw	65535	; assembler added errata NOP
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;lcd.h: 189: for (j = 0; j < 8; j++) {
  6234  003B1C  0E00               	movlw	0
  6235  003B1E  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  6236  003B20                     l5285:
  6237  003B20  FFFF               	dw	65535	; assembler added errata NOP
  6238                           
  6239                           ; BSR set to: 0
  6240  003B22  0E07               	movlw	7
  6241  003B24  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  6242  003B26  D001               	goto	l654
  6243  003B28  D028               	goto	u4960
  6244  003B2A                     l654:
  6245  003B2A  FFFF               	dw	65535	; assembler added errata NOP
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;lcd.h: 190: Lcd_Write_Char((k) ? character[i][j] : 0);
  6249                           
  6250                           ; BSR set to: 0
  6251  003B2C  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  6252  003B2E  A4D8               	btfss	status,2,c
  6253  003B30  D005               	goto	l657
  6254                           
  6255                           ; BSR set to: 0
  6256  003B32  0E00               	movlw	0
  6257  003B34  6FB8               	movwf	(_criarCaracteresCGRAM$1552+1)& (0+255),b
  6258  003B36  0E00               	movlw	0
  6259  003B38  6FB7               	movwf	_criarCaracteresCGRAM$1552& (0+255),b
  6260  003B3A  D018               	goto	l659
  6261  003B3C                     l657:
  6262  003B3C  FFFF               	dw	65535	; assembler added errata NOP
  6263                           
  6264                           ; BSR set to: 0
  6265                           
  6266                           ; BSR set to: 0
  6267  003B3E  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  6268  003B40  0D08               	mullw	8
  6269  003B42  0E87               	movlw	low criarCaracteresCGRAM@character
  6270  003B44  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  6271  003B46  0E00               	movlw	high criarCaracteresCGRAM@character
  6272  003B48  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  6273  003B4A  50F3               	movf	prodl,w,c
  6274  003B4C  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  6275  003B4E  50F4               	movf	prodh,w,c
  6276  003B50  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  6277  003B52  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  6278  003B54  0D01               	mullw	1
  6279  003B56  50F3               	movf	prodl,w,c
  6280  003B58  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  6281  003B5A  6ED9               	movwf	fsr2l,c
  6282  003B5C  50F4               	movf	prodh,w,c
  6283  003B5E  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  6284  003B60  6EDA               	movwf	fsr2h,c
  6285  003B62  50DF               	movf	indf2,w,c
  6286  003B64  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  6287  003B66  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  6288  003B68  6FB7               	movwf	_criarCaracteresCGRAM$1552& (0+255),b
  6289  003B6A  6BB8               	clrf	(_criarCaracteresCGRAM$1552+1)& (0+255),b
  6290  003B6C                     l659:
  6291  003B6C  FFFF               	dw	65535	; assembler added errata NOP
  6292                           
  6293                           ; BSR set to: 0
  6294                           
  6295                           ; BSR set to: 0
  6296  003B6E  51B7               	movf	_criarCaracteresCGRAM$1552& (0+255),w,b
  6297  003B70  ECF0  F039         	call	_Lcd_Write_Char
  6298  003B74  0100               	movlb	0	; () banked
  6299  003B76  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  6300  003B78  D7D3               	goto	l5285
  6301  003B7A                     u4960:
  6302  003B7A  FFFF               	dw	65535	; assembler added errata NOP
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;lcd.h: 191: }
  6306                           ;lcd.h: 192: k++;
  6307                           
  6308                           ; BSR set to: 0
  6309  003B7C  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  6310  003B7E  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  6311  003B80  D7C1               	goto	l5277
  6312  003B82                     u4970:
  6313  003B82  FFFF               	dw	65535	; assembler added errata NOP
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318  003B84  0012               	return		;funcret
  6319  003B86  FFFF               	dw	65535	; errata NOP
  6320  003B88                     __end_of_criarCaracteresCGRAM:
  6321                           	opt stack 0
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           postinc0	equ	0xFEE
  6329                           wreg	equ	0xFE8
  6330                           postdec1	equ	0xFE5
  6331                           fsr1l	equ	0xFE1
  6332                           indf2	equ	0xFDF
  6333                           postinc2	equ	0xFDE
  6334                           fsr2h	equ	0xFDA
  6335                           fsr2l	equ	0xFD9
  6336                           status	equ	0xFD8
  6337                           
  6338 ;; *************** function _Lcd_Init *****************
  6339 ;; Defined at:
  6340 ;;		line 13 in file "lcd.h"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;		None
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;		None
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6354 ;;      Params:         0       0       0       0       0       0       0
  6355 ;;      Locals:         0       0       0       0       0       0       0
  6356 ;;      Temps:          0       1       0       0       0       0       0
  6357 ;;      Totals:         0       1       0       0       0       0       0
  6358 ;;Total ram usage:        1 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    8
  6361 ;; This function calls:
  6362 ;;		_Lcd_Cmd
  6363 ;;		_Lcd_Port
  6364 ;; This function is called by:
  6365 ;;		_reiniciaLCD
  6366 ;;		_main
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text11
  6371  0078C2                     __ptext11:
  6372                           	opt stack 0
  6373  0078C2                     _Lcd_Init:
  6374                           	opt stack 0
  6375  0078C2  FFFF               	dw	65535	; assembler added errata NOP
  6376                           
  6377                           ;lcd.h: 22: Lcd_Port(0x00);
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;incstack = 0
  6381  0078C4  0E00               	movlw	0
  6382  0078C6  ECE4  F038         	call	_Lcd_Port
  6383                           
  6384                           ;lcd.h: 23: _delay((unsigned long)((30)*(8000000/4000.0)));
  6385  0078CA  0E3B               	movlw	59
  6386  0078CC  0100               	movlb	0	; () banked
  6387  0078CE  6F83               	movwf	??_Lcd_Init& (0+255),b
  6388  0078D0  0E79               	movlw	121
  6389  0078D2                     u9127:
  6390  0078D2  FFFF               	dw	65535	; errata NOP
  6391  0078D4  2EE8               	decfsz	wreg,f,c
  6392  0078D6  D7FD               	bra	u9127
  6393  0078D8  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  6394  0078DA  D7FB               	bra	u9127
  6395  0078DC  D000               	nop2	
  6396  0078DE  F000               	nop	
  6397                           
  6398                           ;lcd.h: 24: Lcd_Cmd(0x03);
  6399  0078E0  0E03               	movlw	3
  6400  0078E2  EC79  F036         	call	_Lcd_Cmd
  6401                           
  6402                           ;lcd.h: 25: _delay((unsigned long)((15)*(8000000/4000.0)));
  6403  0078E6  0E1E               	movlw	30
  6404  0078E8  0100               	movlb	0	; () banked
  6405  0078EA  6F83               	movwf	??_Lcd_Init& (0+255),b
  6406  0078EC  0E3C               	movlw	60
  6407  0078EE                     u9137:
  6408  0078EE  FFFF               	dw	65535	; errata NOP
  6409  0078F0  2EE8               	decfsz	wreg,f,c
  6410  0078F2  D7FD               	bra	u9137
  6411  0078F4  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  6412  0078F6  D7FB               	bra	u9137
  6413  0078F8  F000               	nop	
  6414                           
  6415                           ;lcd.h: 26: Lcd_Cmd(0x03);
  6416  0078FA  0E03               	movlw	3
  6417  0078FC  EC79  F036         	call	_Lcd_Cmd
  6418                           
  6419                           ;lcd.h: 27: _delay((unsigned long)((20)*(8000000/4000.0)));
  6420  007900  0E27               	movlw	39
  6421  007902  0100               	movlb	0	; () banked
  6422  007904  6F83               	movwf	??_Lcd_Init& (0+255),b
  6423  007906  0EFB               	movlw	251
  6424  007908                     u9147:
  6425  007908  FFFF               	dw	65535	; errata NOP
  6426  00790A  2EE8               	decfsz	wreg,f,c
  6427  00790C  D7FD               	bra	u9147
  6428  00790E  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  6429  007910  D7FB               	bra	u9147
  6430  007912  D000               	nop2	
  6431  007914  F000               	nop	
  6432                           
  6433                           ;lcd.h: 28: Lcd_Cmd(0x03);
  6434  007916  0E03               	movlw	3
  6435  007918  EC79  F036         	call	_Lcd_Cmd
  6436                           
  6437                           ;lcd.h: 30: Lcd_Cmd(0x02);
  6438  00791C  0E02               	movlw	2
  6439  00791E  EC79  F036         	call	_Lcd_Cmd
  6440                           
  6441                           ;lcd.h: 31: Lcd_Cmd(0x02);
  6442  007922  0E02               	movlw	2
  6443  007924  EC79  F036         	call	_Lcd_Cmd
  6444                           
  6445                           ;lcd.h: 32: Lcd_Cmd(0x08);
  6446  007928  0E08               	movlw	8
  6447  00792A  EC79  F036         	call	_Lcd_Cmd
  6448                           
  6449                           ;lcd.h: 33: Lcd_Cmd(0x00);
  6450  00792E  0E00               	movlw	0
  6451  007930  EC79  F036         	call	_Lcd_Cmd
  6452                           
  6453                           ;lcd.h: 34: Lcd_Cmd(0x0C);
  6454  007934  0E0C               	movlw	12
  6455  007936  EC79  F036         	call	_Lcd_Cmd
  6456                           
  6457                           ;lcd.h: 35: Lcd_Cmd(0x00);
  6458  00793A  0E00               	movlw	0
  6459  00793C  EC79  F036         	call	_Lcd_Cmd
  6460                           
  6461                           ;lcd.h: 36: Lcd_Cmd(0x06);
  6462  007940  0E06               	movlw	6
  6463  007942  EC79  F036         	call	_Lcd_Cmd
  6464  007946  0012               	return		;funcret
  6465  007948  FFFF               	dw	65535	; errata NOP
  6466  00794A                     __end_of_Lcd_Init:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           postinc0	equ	0xFEE
  6475                           wreg	equ	0xFE8
  6476                           postdec1	equ	0xFE5
  6477                           fsr1l	equ	0xFE1
  6478                           indf2	equ	0xFDF
  6479                           postinc2	equ	0xFDE
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _partidaBombaEstacionaria *****************
  6485 ;; Defined at:
  6486 ;;		line 44 in file "controle.h"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;  acao            1    wreg     unsigned char 
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  acao            1    0[BANK0 ] unsigned char 
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      void 
  6493 ;; Registers used:
  6494 ;;		wreg, status,2, status,0
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6500 ;;      Params:         0       0       0       0       0       0       0
  6501 ;;      Locals:         0       1       0       0       0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0       0
  6503 ;;      Totals:         0       1       0       0       0       0       0
  6504 ;;Total ram usage:        1 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    6
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		_main
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text12
  6515  00755A                     __ptext12:
  6516                           	opt stack 0
  6517  00755A                     _partidaBombaEstacionaria:
  6518                           	opt stack 0
  6519  00755A  FFFF               	dw	65535	; assembler added errata NOP
  6520                           
  6521                           ;incstack = 0
  6522                           ;partidaBombaEstacionaria@acao stored from wreg
  6523  00755C  0100               	movlb	0	; () banked
  6524  00755E  6F80               	movwf	partidaBombaEstacionaria@acao& (0+255),b
  6525                           
  6526                           ;controle.h: 45: if (acao && status_estacionaria == 1) {
  6527  007560  0100               	movlb	0	; () banked
  6528  007562  5180               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
  6529  007564  B4D8               	btfsc	status,2,c
  6530  007566  D023               	goto	l513
  6531                           
  6532                           ; BSR set to: 0
  6533  007568  05FB               	decf	_status_estacionaria& (0+255),w,b
  6534  00756A  A4D8               	btfss	status,2,c
  6535  00756C  D020               	goto	l513
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;controle.h: 46: LATEbits.LATE1 = 1;
  6539  00756E  828D               	bsf	3981,1,c	;volatile
  6540                           
  6541                           ;controle.h: 48: if (!PORTAbits.RA5) {
  6542  007570  BA80               	btfsc	3968,5,c	;volatile
  6543  007572  D003               	goto	l514
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;controle.h: 49: tempo_partida = 11;
  6547  007574  0E0B               	movlw	11
  6548  007576  6E6B               	movwf	_tempo_partida,c
  6549  007578  D00A               	goto	u7040
  6550  00757A                     l514:
  6551  00757A  FFFF               	dw	65535	; assembler added errata NOP
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;controle.h: 52: if (tempo_partida <= 7) {
  6555                           
  6556                           ; BSR set to: 0
  6557  00757C  0E08               	movlw	8
  6558  00757E  606B               	cpfslt	_tempo_partida,c
  6559  007580  D002               	goto	l516
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;controle.h: 53: LATEbits.LATE0 = 1;
  6563  007582  808D               	bsf	3981,0,c	;volatile
  6564                           
  6565                           ;controle.h: 54: } else if (tempo_partida <= (7 + 8)) {
  6566  007584  D00A               	goto	l519
  6567  007586                     l516:
  6568  007586  FFFF               	dw	65535	; assembler added errata NOP
  6569                           
  6570                           ; BSR set to: 0
  6571                           
  6572                           ; BSR set to: 0
  6573  007588  0E10               	movlw	16
  6574  00758A  606B               	cpfslt	_tempo_partida,c
  6575  00758C  D003               	goto	l518
  6576  00758E                     u7040:
  6577  00758E  FFFF               	dw	65535	; assembler added errata NOP
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;controle.h: 55: LATEbits.LATE0 = 0;
  6581  007590  908D               	bcf	3981,0,c	;volatile
  6582                           
  6583                           ;controle.h: 56: } else {
  6584  007592  D003               	goto	l519
  6585  007594                     l518:
  6586  007594  FFFF               	dw	65535	; assembler added errata NOP
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;controle.h: 57: tempo_partida = 0;
  6590                           
  6591                           ; BSR set to: 0
  6592  007596  0E00               	movlw	0
  6593  007598  6E6B               	movwf	_tempo_partida,c
  6594  00759A                     l519:
  6595  00759A  FFFF               	dw	65535	; assembler added errata NOP
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;controle.h: 58: }
  6599                           ;controle.h: 59: }
  6600                           ;controle.h: 61: if (tempo_limite_partida > tempo_limite_estacionaria) {
  6601                           
  6602                           ; BSR set to: 0
  6603                           
  6604                           ; BSR set to: 0
  6605                           
  6606                           ; BSR set to: 0
  6607  00759C  506A               	movf	_tempo_limite_partida,w,c
  6608  00759E  5DE8               	subwf	_tempo_limite_estacionaria& (0+255),w,b
  6609  0075A0  B0D8               	btfsc	status,0,c
  6610  0075A2  D00C               	goto	l521
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;controle.h: 62: tempo_limite_partida = 0;
  6614  0075A4  0E00               	movlw	0
  6615  0075A6  6E6A               	movwf	_tempo_limite_partida,c
  6616                           
  6617                           ;controle.h: 63: status_estacionaria = 0;
  6618  0075A8  0E00               	movlw	0
  6619  0075AA  6FFB               	movwf	_status_estacionaria& (0+255),b
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;controle.h: 64: }
  6623                           ;controle.h: 66: } else {
  6624  0075AC  D007               	goto	l521
  6625  0075AE                     l513:
  6626  0075AE  FFFF               	dw	65535	; assembler added errata NOP
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;controle.h: 67: LATEbits.LATE0 = 0;
  6630  0075B0  908D               	bcf	3981,0,c	;volatile
  6631                           
  6632                           ;controle.h: 68: LATEbits.LATE1 = 0;
  6633  0075B2  928D               	bcf	3981,1,c	;volatile
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;controle.h: 69: tempo_partida = 0;
  6637  0075B4  0E00               	movlw	0
  6638  0075B6  6E6B               	movwf	_tempo_partida,c
  6639                           
  6640                           ;controle.h: 70: tempo_limite_partida = 0;
  6641  0075B8  0E00               	movlw	0
  6642  0075BA  6E6A               	movwf	_tempo_limite_partida,c
  6643  0075BC                     l521:
  6644  0075BC  FFFF               	dw	65535	; assembler added errata NOP
  6645                           
  6646                           ; BSR set to: 0
  6647                           
  6648                           ; BSR set to: 0
  6649  0075BE  0012               	return		;funcret
  6650  0075C0  FFFF               	dw	65535	; errata NOP
  6651  0075C2                     __end_of_partidaBombaEstacionaria:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           postinc0	equ	0xFEE
  6660                           wreg	equ	0xFE8
  6661                           postdec1	equ	0xFE5
  6662                           fsr1l	equ	0xFE1
  6663                           indf2	equ	0xFDF
  6664                           postinc2	equ	0xFDE
  6665                           fsr2h	equ	0xFDA
  6666                           fsr2l	equ	0xFD9
  6667                           status	equ	0xFD8
  6668                           
  6669 ;; *************** function _monitorarAlteracaoEstado *****************
  6670 ;; Defined at:
  6671 ;;		line 93 in file "controle.h"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  estado          2    2[BANK0 ] int 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2, status,0
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6685 ;;      Params:         0       0       0       0       0       0       0
  6686 ;;      Locals:         0       2       0       0       0       0       0
  6687 ;;      Temps:          0       2       0       0       0       0       0
  6688 ;;      Totals:         0       4       0       0       0       0       0
  6689 ;;Total ram usage:        4 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    6
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_main
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           	psect	text13
  6700  0076B6                     __ptext13:
  6701                           	opt stack 0
  6702  0076B6                     _monitorarAlteracaoEstado:
  6703                           	opt stack 0
  6704  0076B6  FFFF               	dw	65535	; assembler added errata NOP
  6705                           
  6706                           ;controle.h: 94: int estado = 0;
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;incstack = 0
  6710  0076B8  0E00               	movlw	0
  6711  0076BA  0100               	movlb	0	; () banked
  6712  0076BC  6F83               	movwf	(monitorarAlteracaoEstado@estado+1)& (0+255),b
  6713  0076BE  0E00               	movlw	0
  6714  0076C0  6F82               	movwf	monitorarAlteracaoEstado@estado& (0+255),b
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;controle.h: 96: if (LATEbits.LATE0) estado += 1;
  6718  0076C2  A08D               	btfss	3981,0,c	;volatile
  6719  0076C4  D002               	goto	l534
  6720                           
  6721                           ; BSR set to: 0
  6722  0076C6  4B82               	infsnz	monitorarAlteracaoEstado@estado& (0+255),f,b
  6723  0076C8  2B83               	incf	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6724  0076CA                     l534:
  6725  0076CA  FFFF               	dw	65535	; assembler added errata NOP
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;controle.h: 97: if (LATAbits.LATA3) estado += 2;
  6729                           
  6730                           ; BSR set to: 0
  6731  0076CC  A689               	btfss	3977,3,c	;volatile
  6732  0076CE  D004               	goto	l535
  6733                           
  6734                           ; BSR set to: 0
  6735  0076D0  0E02               	movlw	2
  6736  0076D2  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6737  0076D4  0E00               	movlw	0
  6738  0076D6  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6739  0076D8                     l535:
  6740  0076D8  FFFF               	dw	65535	; assembler added errata NOP
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;controle.h: 98: if (LATCbits.LATC1) estado += 3;
  6744                           
  6745                           ; BSR set to: 0
  6746  0076DA  A28B               	btfss	3979,1,c	;volatile
  6747  0076DC  D004               	goto	l536
  6748                           
  6749                           ; BSR set to: 0
  6750  0076DE  0E03               	movlw	3
  6751  0076E0  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6752  0076E2  0E00               	movlw	0
  6753  0076E4  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6754  0076E6                     l536:
  6755  0076E6  FFFF               	dw	65535	; assembler added errata NOP
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;controle.h: 99: if (LATDbits.LATD7) estado += 4;
  6759                           
  6760                           ; BSR set to: 0
  6761  0076E8  AE8C               	btfss	3980,7,c	;volatile
  6762  0076EA  D004               	goto	l537
  6763                           
  6764                           ; BSR set to: 0
  6765  0076EC  0E04               	movlw	4
  6766  0076EE  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6767  0076F0  0E00               	movlw	0
  6768  0076F2  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6769  0076F4                     l537:
  6770  0076F4  FFFF               	dw	65535	; assembler added errata NOP
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;controle.h: 100: if (LATEbits.LATE1) estado += 5;
  6774                           
  6775                           ; BSR set to: 0
  6776  0076F6  A28D               	btfss	3981,1,c	;volatile
  6777  0076F8  D004               	goto	l538
  6778                           
  6779                           ; BSR set to: 0
  6780  0076FA  0E05               	movlw	5
  6781  0076FC  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6782  0076FE  0E00               	movlw	0
  6783  007700  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6784  007702                     l538:
  6785  007702  FFFF               	dw	65535	; assembler added errata NOP
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;controle.h: 101: if (LATEbits.LATE2) estado += 6;
  6789                           
  6790                           ; BSR set to: 0
  6791  007704  A48D               	btfss	3981,2,c	;volatile
  6792  007706  D004               	goto	l539
  6793                           
  6794                           ; BSR set to: 0
  6795  007708  0E06               	movlw	6
  6796  00770A  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6797  00770C  0E00               	movlw	0
  6798  00770E  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6799  007710                     l539:
  6800  007710  FFFF               	dw	65535	; assembler added errata NOP
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;controle.h: 103: if (estado != ultimoEstadoSaidas) {
  6804  007712  506D               	movf	_ultimoEstadoSaidas,w,c
  6805  007714  6F80               	movwf	??_monitorarAlteracaoEstado& (0+255),b
  6806  007716  6B81               	clrf	(??_monitorarAlteracaoEstado+1)& (0+255),b
  6807  007718  5182               	movf	monitorarAlteracaoEstado@estado& (0+255),w,b
  6808  00771A  1980               	xorwf	??_monitorarAlteracaoEstado& (0+255),w,b
  6809  00771C  E104               	bnz	u7150
  6810  00771E  5183               	movf	(monitorarAlteracaoEstado@estado+1)& (0+255),w,b
  6811  007720  1981               	xorwf	(??_monitorarAlteracaoEstado+1)& (0+255),w,b
  6812  007722  B4D8               	btfsc	status,2,c
  6813  007724  D004               	goto	l540
  6814  007726                     u7150:
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;controle.h: 104: ultimoEstadoSaidas = estado;
  6818  007726  C082  F06D         	movff	monitorarAlteracaoEstado@estado,_ultimoEstadoSaidas
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;controle.h: 105: timerAtrasoLCD = 13;
  6822  00772A  0E0D               	movlw	13
  6823  00772C  6E74               	movwf	_timerAtrasoLCD,c
  6824  00772E                     l540:
  6825  00772E  FFFF               	dw	65535	; assembler added errata NOP
  6826                           
  6827                           ; BSR set to: 0
  6828                           
  6829                           ; BSR set to: 0
  6830  007730  0012               	return		;funcret
  6831  007732  FFFF               	dw	65535	; errata NOP
  6832  007734                     __end_of_monitorarAlteracaoEstado:
  6833                           	opt stack 0
  6834                           tblptru	equ	0xFF8
  6835                           tblptrh	equ	0xFF7
  6836                           tblptrl	equ	0xFF6
  6837                           tablat	equ	0xFF5
  6838                           prodh	equ	0xFF4
  6839                           prodl	equ	0xFF3
  6840                           postinc0	equ	0xFEE
  6841                           wreg	equ	0xFE8
  6842                           postdec1	equ	0xFE5
  6843                           fsr1l	equ	0xFE1
  6844                           indf2	equ	0xFDF
  6845                           postinc2	equ	0xFDE
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850 ;; *************** function _lerTransdutor *****************
  6851 ;; Defined at:
  6852 ;;		line 8 in file "transdutor.h"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;  adc             2   48[BANK0 ] int 
  6857 ;;  _pressao        2   46[BANK0 ] int 
  6858 ;;  mediaLeitura    2   44[BANK0 ] int 
  6859 ;;  i               1   50[BANK0 ] unsigned char 
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      void 
  6862 ;; Registers used:
  6863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6869 ;;      Params:         0       0       0       0       0       0       0
  6870 ;;      Locals:         0       7       0       0       0       0       0
  6871 ;;      Temps:          0       2       0       0       0       0       0
  6872 ;;      Totals:         0       9       0       0       0       0       0
  6873 ;;Total ram usage:        9 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    8
  6876 ;; This function calls:
  6877 ;;		___awdiv
  6878 ;;		_map
  6879 ;; This function is called by:
  6880 ;;		_main
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text14
  6885  002D32                     __ptext14:
  6886                           	opt stack 0
  6887  002D32                     _lerTransdutor:
  6888                           	opt stack 0
  6889  002D32  FFFF               	dw	65535	; assembler added errata NOP
  6890                           
  6891                           ;transdutor.h: 9: char i = 0;
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;incstack = 0
  6895  002D34  0E00               	movlw	0
  6896  002D36  0100               	movlb	0	; () banked
  6897  002D38  6FB2               	movwf	lerTransdutor@i& (0+255),b
  6898                           
  6899                           ;transdutor.h: 10: int mediaLeitura = 0;
  6900  002D3A  0E00               	movlw	0
  6901  002D3C  6FAD               	movwf	(lerTransdutor@mediaLeitura+1)& (0+255),b
  6902  002D3E  0E00               	movlw	0
  6903  002D40  6FAC               	movwf	lerTransdutor@mediaLeitura& (0+255),b
  6904                           
  6905                           ;transdutor.h: 11: int adc = 0;
  6906  002D42  0E00               	movlw	0
  6907  002D44  6FB1               	movwf	(lerTransdutor@adc+1)& (0+255),b
  6908  002D46  0E00               	movlw	0
  6909  002D48  6FB0               	movwf	lerTransdutor@adc& (0+255),b
  6910                           
  6911                           ;transdutor.h: 12: int _pressao = 0;
  6912  002D4A  0E00               	movlw	0
  6913  002D4C  6FAF               	movwf	(lerTransdutor@_pressao+1)& (0+255),b
  6914  002D4E  0E00               	movlw	0
  6915  002D50  6FAE               	movwf	lerTransdutor@_pressao& (0+255),b
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;transdutor.h: 14: ADCON0bits.CHS = 0b000;
  6919  002D52  96C2               	bcf	4034,3,c	;volatile
  6920  002D54  98C2               	bcf	4034,4,c	;volatile
  6921  002D56  9AC2               	bcf	4034,5,c	;volatile
  6922                           
  6923                           ;transdutor.h: 15: for (i = 0; i < 15; i++) {
  6924  002D58  0E00               	movlw	0
  6925  002D5A  6FB2               	movwf	lerTransdutor@i& (0+255),b
  6926  002D5C                     l6527:
  6927  002D5C  FFFF               	dw	65535	; assembler added errata NOP
  6928                           
  6929                           ; BSR set to: 0
  6930  002D5E  0E0E               	movlw	14
  6931  002D60  65B2               	cpfsgt	lerTransdutor@i& (0+255),b
  6932  002D62  D001               	goto	l246
  6933  002D64  D043               	goto	u6510
  6934  002D66                     l246:
  6935  002D66  FFFF               	dw	65535	; assembler added errata NOP
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;transdutor.h: 16: adc = 0;
  6939                           
  6940                           ; BSR set to: 0
  6941  002D68  0E00               	movlw	0
  6942  002D6A  6FB1               	movwf	(lerTransdutor@adc+1)& (0+255),b
  6943  002D6C  0E00               	movlw	0
  6944  002D6E  6FB0               	movwf	lerTransdutor@adc& (0+255),b
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;transdutor.h: 17: _delay((unsigned long)((30)*(8000000/4000000.0)));
  6948  002D70  0E0F               	movlw	15
  6949  002D72                     u9157:
  6950  002D72  FFFF               	dw	65535	; errata NOP
  6951  002D74  2EE8               	decfsz	wreg,f,c
  6952  002D76  D7FD               	bra	u9157
  6953                           
  6954                           ;transdutor.h: 18: ADCON0bits.GO = 1;
  6955  002D78  84C2               	bsf	4034,2,c	;volatile
  6956  002D7A  FFFF               	dw	65535	; assembler added errata NOP
  6957  002D7C  A4C2               	btfss	4034,2,c	;volatile
  6958  002D7E  D7FD               	goto	l249
  6959                           
  6960                           ;transdutor.h: 20: adc = ((ADRESH << 8) + ADRESL);
  6961  002D80  50C4               	movf	4036,w,c	;volatile
  6962  002D82  0100               	movlb	0	; () banked
  6963  002D84  6FAB               	movwf	(??_lerTransdutor+1)& (0+255),b
  6964  002D86  6BAA               	clrf	??_lerTransdutor& (0+255),b
  6965  002D88  50C3               	movf	4035,w,c	;volatile
  6966  002D8A  25AA               	addwf	??_lerTransdutor& (0+255),w,b
  6967  002D8C  6FB0               	movwf	lerTransdutor@adc& (0+255),b
  6968  002D8E  0E00               	movlw	0
  6969  002D90  21AB               	addwfc	(??_lerTransdutor+1)& (0+255),w,b
  6970  002D92  6FB1               	movwf	(lerTransdutor@adc+1)& (0+255),b
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;transdutor.h: 21: mediaLeitura += map(adc, 102, 920, 0, 100);
  6974  002D94  C0B0  F08E         	movff	lerTransdutor@adc,map@x
  6975  002D98  C0B1  F08F         	movff	lerTransdutor@adc+1,map@x+1
  6976  002D9C  0E00               	movlw	0
  6977  002D9E  6F91               	movwf	(map@in_min+1)& (0+255),b
  6978  002DA0  0E66               	movlw	102
  6979  002DA2  6F90               	movwf	map@in_min& (0+255),b
  6980  002DA4  0E03               	movlw	3
  6981  002DA6  6F93               	movwf	(map@in_max+1)& (0+255),b
  6982  002DA8  0E98               	movlw	152
  6983  002DAA  6F92               	movwf	map@in_max& (0+255),b
  6984  002DAC  0E00               	movlw	0
  6985  002DAE  6F95               	movwf	(map@out_min+1)& (0+255),b
  6986  002DB0  0E00               	movlw	0
  6987  002DB2  6F94               	movwf	map@out_min& (0+255),b
  6988  002DB4  0E00               	movlw	0
  6989  002DB6  6F97               	movwf	(map@out_max+1)& (0+255),b
  6990  002DB8  0E64               	movlw	100
  6991  002DBA  6F96               	movwf	map@out_max& (0+255),b
  6992  002DBC  EC6C  F018         	call	_map	;wreg free
  6993  002DC0  0100               	movlb	0	; () banked
  6994  002DC2  518E               	movf	?_map& (0+255),w,b
  6995  002DC4  27AC               	addwf	lerTransdutor@mediaLeitura& (0+255),f,b
  6996  002DC6  518F               	movf	(?_map+1)& (0+255),w,b
  6997  002DC8  23AD               	addwfc	(lerTransdutor@mediaLeitura+1)& (0+255),f,b
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;transdutor.h: 22: if (adc < 50 && timerIntervaloEntreBombas == 0) {
  7001  002DCA  BFB1               	btfsc	(lerTransdutor@adc+1)& (0+255),7,b
  7002  002DCC  D006               	goto	u6490
  7003  002DCE  51B1               	movf	(lerTransdutor@adc+1)& (0+255),w,b
  7004  002DD0  E10B               	bnz	l6547
  7005  002DD2  0E32               	movlw	50
  7006  002DD4  5DB0               	subwf	lerTransdutor@adc& (0+255),w,b
  7007  002DD6  B0D8               	btfsc	status,0,c
  7008  002DD8  D006               	goto	l251
  7009  002DDA                     u6490:
  7010  002DDA  FFFF               	dw	65535	; assembler added errata NOP
  7011                           
  7012                           ; BSR set to: 0
  7013  002DDC  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
  7014  002DDE  A4D8               	btfss	status,2,c
  7015  002DE0  D002               	goto	l251
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;transdutor.h: 23: flagErroTransdutor = 1;
  7019  002DE2  0E01               	movlw	1
  7020  002DE4  6E6F               	movwf	_flagErroTransdutor,c
  7021  002DE6                     l251:
  7022  002DE6  FFFF               	dw	65535	; assembler added errata NOP
  7023  002DE8                     l6547:
  7024                           
  7025                           ; BSR set to: 0
  7026  002DE8  2BB2               	incf	lerTransdutor@i& (0+255),f,b
  7027  002DEA  D7B8               	goto	l6527
  7028  002DEC                     u6510:
  7029  002DEC  FFFF               	dw	65535	; assembler added errata NOP
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;transdutor.h: 24: }
  7033                           ;transdutor.h: 25: }
  7034                           ;transdutor.h: 27: coletaMedias[posicaoColetaLeitura] = (int) mediaLeitura / 15;
  7035                           
  7036                           ; BSR set to: 0
  7037  002DEE  C0AC  F080         	movff	lerTransdutor@mediaLeitura,___awdiv@dividend
  7038  002DF2  C0AD  F081         	movff	lerTransdutor@mediaLeitura+1,___awdiv@dividend+1
  7039  002DF6  0E00               	movlw	0
  7040  002DF8  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7041  002DFA  0E0F               	movlw	15
  7042  002DFC  6F82               	movwf	___awdiv@divisor& (0+255),b
  7043  002DFE  ECE9  F01E         	call	___awdiv	;wreg free
  7044  002E02  506C               	movf	_posicaoColetaLeitura,w,c
  7045  002E04  0D02               	mullw	2
  7046  002E06  0E00               	movlw	low _coletaMedias
  7047  002E08  24F3               	addwf	prodl,w,c
  7048  002E0A  6ED9               	movwf	fsr2l,c
  7049  002E0C  0E01               	movlw	high _coletaMedias
  7050  002E0E  20F4               	addwfc	prodh,w,c
  7051  002E10  6EDA               	movwf	fsr2h,c
  7052  002E12  0100               	movlb	0	; () banked
  7053  002E14  C080  FFDE         	movff	?___awdiv,postinc2
  7054  002E18  C081  FFDD         	movff	?___awdiv+1,postdec2
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;transdutor.h: 29: if (posicaoColetaLeitura >= 5) {
  7058  002E1C  0E04               	movlw	4
  7059  002E1E  646C               	cpfsgt	_posicaoColetaLeitura,c
  7060  002E20  D003               	goto	l252
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;transdutor.h: 30: posicaoColetaLeitura = 0;
  7064  002E22  0E00               	movlw	0
  7065  002E24  6E6C               	movwf	_posicaoColetaLeitura,c
  7066                           
  7067                           ;transdutor.h: 31: } else {
  7068  002E26  D002               	goto	l253
  7069  002E28                     l252:
  7070  002E28  FFFF               	dw	65535	; assembler added errata NOP
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;transdutor.h: 32: posicaoColetaLeitura++;
  7074                           
  7075                           ; BSR set to: 0
  7076  002E2A  2A6C               	incf	_posicaoColetaLeitura,f,c
  7077  002E2C                     l253:
  7078  002E2C  FFFF               	dw	65535	; assembler added errata NOP
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;transdutor.h: 33: }
  7082                           ;transdutor.h: 35: for (i = 0; i < 5; i++) {
  7083                           
  7084                           ; BSR set to: 0
  7085  002E2E  0E00               	movlw	0
  7086  002E30  6FB2               	movwf	lerTransdutor@i& (0+255),b
  7087  002E32                     l6561:
  7088  002E32  FFFF               	dw	65535	; assembler added errata NOP
  7089                           
  7090                           ; BSR set to: 0
  7091  002E34  0E04               	movlw	4
  7092  002E36  65B2               	cpfsgt	lerTransdutor@i& (0+255),b
  7093  002E38  D001               	goto	l254
  7094  002E3A  D00F               	goto	u6540
  7095  002E3C                     l254:
  7096  002E3C  FFFF               	dw	65535	; assembler added errata NOP
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;transdutor.h: 36: _pressao += coletaMedias[i];
  7100                           
  7101                           ; BSR set to: 0
  7102  002E3E  51B2               	movf	lerTransdutor@i& (0+255),w,b
  7103  002E40  0D02               	mullw	2
  7104  002E42  0E00               	movlw	low _coletaMedias
  7105  002E44  24F3               	addwf	prodl,w,c
  7106  002E46  6ED9               	movwf	fsr2l,c
  7107  002E48  0E01               	movlw	high _coletaMedias
  7108  002E4A  20F4               	addwfc	prodh,w,c
  7109  002E4C  6EDA               	movwf	fsr2h,c
  7110  002E4E  50DE               	movf	postinc2,w,c
  7111  002E50  27AE               	addwf	lerTransdutor@_pressao& (0+255),f,b
  7112  002E52  50DD               	movf	postdec2,w,c
  7113  002E54  23AF               	addwfc	(lerTransdutor@_pressao+1)& (0+255),f,b
  7114                           
  7115                           ; BSR set to: 0
  7116  002E56  2BB2               	incf	lerTransdutor@i& (0+255),f,b
  7117  002E58  D7EC               	goto	l6561
  7118  002E5A                     u6540:
  7119  002E5A  FFFF               	dw	65535	; assembler added errata NOP
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;transdutor.h: 37: }
  7123                           ;transdutor.h: 39: pressao = (int) _pressao / 5;
  7124                           
  7125                           ; BSR set to: 0
  7126  002E5C  C0AE  F080         	movff	lerTransdutor@_pressao,___awdiv@dividend
  7127  002E60  C0AF  F081         	movff	lerTransdutor@_pressao+1,___awdiv@dividend+1
  7128  002E64  0E00               	movlw	0
  7129  002E66  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7130  002E68  0E05               	movlw	5
  7131  002E6A  6F82               	movwf	___awdiv@divisor& (0+255),b
  7132  002E6C  ECE9  F01E         	call	___awdiv	;wreg free
  7133  002E70  C080  F0DB         	movff	?___awdiv,_pressao
  7134  002E74  C081  F0DC         	movff	?___awdiv+1,_pressao+1
  7135  002E78  0012               	return		;funcret
  7136  002E7A  FFFF               	dw	65535	; errata NOP
  7137  002E7C                     __end_of_lerTransdutor:
  7138                           	opt stack 0
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           prodh	equ	0xFF4
  7144                           prodl	equ	0xFF3
  7145                           postinc0	equ	0xFEE
  7146                           wreg	equ	0xFE8
  7147                           postdec1	equ	0xFE5
  7148                           fsr1l	equ	0xFE1
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           postdec2	equ	0xFDD
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _map *****************
  7157 ;; Defined at:
  7158 ;;		line 59 in file "function.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;  x               2   14[BANK0 ] int 
  7161 ;;  in_min          2   16[BANK0 ] int 
  7162 ;;  in_max          2   18[BANK0 ] int 
  7163 ;;  out_min         2   20[BANK0 ] int 
  7164 ;;  out_max         2   22[BANK0 ] int 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  e               4   30[BANK0 ] long 
  7167 ;;  d               4   26[BANK0 ] long 
  7168 ;;  result          2   40[BANK0 ] int 
  7169 ;;  c               2   38[BANK0 ] int 
  7170 ;;  b               2   36[BANK0 ] int 
  7171 ;;  a               2   34[BANK0 ] int 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  2   14[BANK0 ] int 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7181 ;;      Params:         0      10       0       0       0       0       0
  7182 ;;      Locals:         0      16       0       0       0       0       0
  7183 ;;      Temps:          0       2       0       0       0       0       0
  7184 ;;      Totals:         0      28       0       0       0       0       0
  7185 ;;Total ram usage:       28 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    7
  7188 ;; This function calls:
  7189 ;;		___aldiv
  7190 ;;		___lmul
  7191 ;; This function is called by:
  7192 ;;		_lerTransdutor
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text15
  7197  0030D8                     __ptext15:
  7198                           	opt stack 0
  7199  0030D8                     _map:
  7200                           	opt stack 0
  7201  0030D8  FFFF               	dw	65535	; assembler added errata NOP
  7202                           
  7203                           ;function.c: 60: int a = x - in_min;
  7204                           
  7205                           ;incstack = 0
  7206  0030DA  C090  F098         	movff	map@in_min,??_map
  7207  0030DE  C091  F099         	movff	map@in_min+1,??_map+1
  7208  0030E2  0100               	movlb	0	; () banked
  7209  0030E4  1F98               	comf	??_map& (0+255),f,b
  7210  0030E6  1F99               	comf	(??_map+1)& (0+255),f,b
  7211  0030E8  4B98               	infsnz	??_map& (0+255),f,b
  7212  0030EA  2B99               	incf	(??_map+1)& (0+255),f,b
  7213  0030EC  518E               	movf	map@x& (0+255),w,b
  7214  0030EE  2598               	addwf	??_map& (0+255),w,b
  7215  0030F0  6FA2               	movwf	map@a& (0+255),b
  7216  0030F2  518F               	movf	(map@x+1)& (0+255),w,b
  7217  0030F4  2199               	addwfc	(??_map+1)& (0+255),w,b
  7218  0030F6  6FA3               	movwf	(map@a+1)& (0+255),b
  7219                           
  7220                           ;function.c: 61: int b = out_max - out_min;
  7221  0030F8  C094  F098         	movff	map@out_min,??_map
  7222  0030FC  C095  F099         	movff	map@out_min+1,??_map+1
  7223  003100  1F98               	comf	??_map& (0+255),f,b
  7224  003102  1F99               	comf	(??_map+1)& (0+255),f,b
  7225  003104  4B98               	infsnz	??_map& (0+255),f,b
  7226  003106  2B99               	incf	(??_map+1)& (0+255),f,b
  7227  003108  5196               	movf	map@out_max& (0+255),w,b
  7228  00310A  2598               	addwf	??_map& (0+255),w,b
  7229  00310C  6FA4               	movwf	map@b& (0+255),b
  7230  00310E  5197               	movf	(map@out_max+1)& (0+255),w,b
  7231  003110  2199               	addwfc	(??_map+1)& (0+255),w,b
  7232  003112  6FA5               	movwf	(map@b+1)& (0+255),b
  7233                           
  7234                           ;function.c: 62: int c = in_max - in_min;
  7235  003114  C090  F098         	movff	map@in_min,??_map
  7236  003118  C091  F099         	movff	map@in_min+1,??_map+1
  7237  00311C  1F98               	comf	??_map& (0+255),f,b
  7238  00311E  1F99               	comf	(??_map+1)& (0+255),f,b
  7239  003120  4B98               	infsnz	??_map& (0+255),f,b
  7240  003122  2B99               	incf	(??_map+1)& (0+255),f,b
  7241  003124  5192               	movf	map@in_max& (0+255),w,b
  7242  003126  2598               	addwf	??_map& (0+255),w,b
  7243  003128  6FA6               	movwf	map@c& (0+255),b
  7244  00312A  5193               	movf	(map@in_max+1)& (0+255),w,b
  7245  00312C  2199               	addwfc	(??_map+1)& (0+255),w,b
  7246  00312E  6FA7               	movwf	(map@c+1)& (0+255),b
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;function.c: 63: long d = (long) a * b;
  7250  003130  C0A2  F080         	movff	map@a,___lmul@multiplier
  7251  003134  C0A3  F081         	movff	map@a+1,___lmul@multiplier+1
  7252  003138  0E00               	movlw	0
  7253  00313A  BF81               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  7254  00313C  0EFF               	movlw	-1
  7255  00313E  6F82               	movwf	(___lmul@multiplier+2)& (0+255),b
  7256  003140  6F83               	movwf	(___lmul@multiplier+3)& (0+255),b
  7257  003142  C0A4  F084         	movff	map@b,___lmul@multiplicand
  7258  003146  C0A5  F085         	movff	map@b+1,___lmul@multiplicand+1
  7259  00314A  0E00               	movlw	0
  7260  00314C  BF85               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  7261  00314E  0EFF               	movlw	-1
  7262  003150  6F86               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7263  003152  6F87               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7264  003154  EC4B  F03A         	call	___lmul	;wreg free
  7265  003158  C080  F09A         	movff	?___lmul,map@d
  7266  00315C  C081  F09B         	movff	?___lmul+1,map@d+1
  7267  003160  C082  F09C         	movff	?___lmul+2,map@d+2
  7268  003164  C083  F09D         	movff	?___lmul+3,map@d+3
  7269                           
  7270                           ;function.c: 64: long e = (long) d / c;
  7271  003168  C09A  F080         	movff	map@d,___aldiv@dividend
  7272  00316C  C09B  F081         	movff	map@d+1,___aldiv@dividend+1
  7273  003170  C09C  F082         	movff	map@d+2,___aldiv@dividend+2
  7274  003174  C09D  F083         	movff	map@d+3,___aldiv@dividend+3
  7275  003178  C0A6  F084         	movff	map@c,___aldiv@divisor
  7276  00317C  C0A7  F085         	movff	map@c+1,___aldiv@divisor+1
  7277  003180  0100               	movlb	0	; () banked
  7278  003182  0E00               	movlw	0
  7279  003184  BF85               	btfsc	(___aldiv@divisor+1)& (0+255),7,b
  7280  003186  0EFF               	movlw	-1
  7281  003188  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  7282  00318A  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  7283  00318C  EC1E  F01C         	call	___aldiv	;wreg free
  7284  003190  C080  F09E         	movff	?___aldiv,map@e
  7285  003194  C081  F09F         	movff	?___aldiv+1,map@e+1
  7286  003198  C082  F0A0         	movff	?___aldiv+2,map@e+2
  7287  00319C  C083  F0A1         	movff	?___aldiv+3,map@e+3
  7288                           
  7289                           ;function.c: 65: int result = (int) e + out_min;
  7290  0031A0  0100               	movlb	0	; () banked
  7291  0031A2  5194               	movf	map@out_min& (0+255),w,b
  7292  0031A4  259E               	addwf	map@e& (0+255),w,b
  7293  0031A6  6FA8               	movwf	map@result& (0+255),b
  7294  0031A8  5195               	movf	(map@out_min+1)& (0+255),w,b
  7295  0031AA  219F               	addwfc	(map@e+1)& (0+255),w,b
  7296  0031AC  6FA9               	movwf	(map@result+1)& (0+255),b
  7297                           
  7298                           ;function.c: 66: if (result < out_min) return out_min;
  7299  0031AE  5194               	movf	map@out_min& (0+255),w,b
  7300  0031B0  5DA8               	subwf	map@result& (0+255),w,b
  7301  0031B2  51A9               	movf	(map@result+1)& (0+255),w,b
  7302  0031B4  0A80               	xorlw	128
  7303  0031B6  6F98               	movwf	??_map& (0+255),b
  7304  0031B8  5195               	movf	(map@out_min+1)& (0+255),w,b
  7305  0031BA  0A80               	xorlw	128
  7306  0031BC  5998               	subwfb	??_map& (0+255),w,b
  7307  0031BE  B0D8               	btfsc	status,0,c
  7308  0031C0  D005               	goto	l1099
  7309                           
  7310                           ; BSR set to: 0
  7311  0031C2  C094  F08E         	movff	map@out_min,?_map
  7312  0031C6  C095  F08F         	movff	map@out_min+1,?_map+1
  7313  0031CA  D015               	goto	l1100
  7314  0031CC                     l1099:
  7315  0031CC  FFFF               	dw	65535	; assembler added errata NOP
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;function.c: 67: if (result > out_max) return out_max;
  7319                           
  7320                           ; BSR set to: 0
  7321  0031CE  51A8               	movf	map@result& (0+255),w,b
  7322  0031D0  5D96               	subwf	map@out_max& (0+255),w,b
  7323  0031D2  5197               	movf	(map@out_max+1)& (0+255),w,b
  7324  0031D4  0A80               	xorlw	128
  7325  0031D6  6F98               	movwf	??_map& (0+255),b
  7326  0031D8  51A9               	movf	(map@result+1)& (0+255),w,b
  7327  0031DA  0A80               	xorlw	128
  7328  0031DC  5998               	subwfb	??_map& (0+255),w,b
  7329  0031DE  B0D8               	btfsc	status,0,c
  7330  0031E0  D005               	goto	l1101
  7331                           
  7332                           ; BSR set to: 0
  7333  0031E2  C096  F08E         	movff	map@out_max,?_map
  7334  0031E6  C097  F08F         	movff	map@out_max+1,?_map+1
  7335  0031EA  D005               	goto	l1100
  7336  0031EC                     l1101:
  7337  0031EC  FFFF               	dw	65535	; assembler added errata NOP
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;function.c: 68: return result;
  7341  0031EE  C0A8  F08E         	movff	map@result,?_map
  7342  0031F2  C0A9  F08F         	movff	map@result+1,?_map+1
  7343  0031F6                     l1100:
  7344  0031F6  FFFF               	dw	65535	; assembler added errata NOP
  7345                           
  7346                           ; BSR set to: 0
  7347  0031F8  0012               	return		;funcret
  7348  0031FA  FFFF               	dw	65535	; errata NOP
  7349  0031FC                     __end_of_map:
  7350                           	opt stack 0
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodh	equ	0xFF4
  7356                           prodl	equ	0xFF3
  7357                           postinc0	equ	0xFEE
  7358                           wreg	equ	0xFE8
  7359                           postdec1	equ	0xFE5
  7360                           fsr1l	equ	0xFE1
  7361                           indf2	equ	0xFDF
  7362                           postinc2	equ	0xFDE
  7363                           postdec2	equ	0xFDD
  7364                           fsr2h	equ	0xFDA
  7365                           fsr2l	equ	0xFD9
  7366                           status	equ	0xFD8
  7367                           
  7368 ;; *************** function ___lmul *****************
  7369 ;; Defined at:
  7370 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7373 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;  product         4    8[BANK0 ] unsigned long 
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  4    0[BANK0 ] unsigned long 
  7378 ;; Registers used:
  7379 ;;		wreg, status,2, status,0
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7385 ;;      Params:         0       8       0       0       0       0       0
  7386 ;;      Locals:         0       4       0       0       0       0       0
  7387 ;;      Temps:          0       0       0       0       0       0       0
  7388 ;;      Totals:         0      12       0       0       0       0       0
  7389 ;;Total ram usage:       12 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    6
  7392 ;; This function calls:
  7393 ;;		Nothing
  7394 ;; This function is called by:
  7395 ;;		_map
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           	psect	text16
  7400  007496                     __ptext16:
  7401                           	opt stack 0
  7402  007496                     ___lmul:
  7403                           	opt stack 0
  7404  007496  FFFF               	dw	65535	; assembler added errata NOP
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;incstack = 0
  7408  007498  0E00               	movlw	0
  7409  00749A  0100               	movlb	0	; () banked
  7410  00749C  6F88               	movwf	___lmul@product& (0+255),b
  7411  00749E  0E00               	movlw	0
  7412  0074A0  6F89               	movwf	(___lmul@product+1)& (0+255),b
  7413  0074A2  0E00               	movlw	0
  7414  0074A4  6F8A               	movwf	(___lmul@product+2)& (0+255),b
  7415  0074A6  0E00               	movlw	0
  7416  0074A8  6F8B               	movwf	(___lmul@product+3)& (0+255),b
  7417  0074AA  FFFF               	dw	65535	; assembler added errata NOP
  7418                           
  7419                           ; BSR set to: 0
  7420                           
  7421                           ; BSR set to: 0
  7422  0074AC  A180               	btfss	___lmul@multiplier& (0+255),0,b
  7423  0074AE  D008               	goto	l1194
  7424                           
  7425                           ; BSR set to: 0
  7426  0074B0  5184               	movf	___lmul@multiplicand& (0+255),w,b
  7427  0074B2  2788               	addwf	___lmul@product& (0+255),f,b
  7428  0074B4  5185               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  7429  0074B6  2389               	addwfc	(___lmul@product+1)& (0+255),f,b
  7430  0074B8  5186               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  7431  0074BA  238A               	addwfc	(___lmul@product+2)& (0+255),f,b
  7432  0074BC  5187               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  7433  0074BE  238B               	addwfc	(___lmul@product+3)& (0+255),f,b
  7434  0074C0                     l1194:
  7435  0074C0  FFFF               	dw	65535	; assembler added errata NOP
  7436                           
  7437                           ; BSR set to: 0
  7438                           
  7439                           ; BSR set to: 0
  7440  0074C2  90D8               	bcf	status,0,c
  7441  0074C4  3784               	rlcf	___lmul@multiplicand& (0+255),f,b
  7442  0074C6  3785               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  7443  0074C8  3786               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  7444  0074CA  3787               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  7445                           
  7446                           ; BSR set to: 0
  7447  0074CC  90D8               	bcf	status,0,c
  7448  0074CE  3383               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  7449  0074D0  3382               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  7450  0074D2  3381               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  7451  0074D4  3380               	rrcf	___lmul@multiplier& (0+255),f,b
  7452  0074D6  5180               	movf	___lmul@multiplier& (0+255),w,b
  7453  0074D8  1181               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  7454  0074DA  1182               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  7455  0074DC  1183               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  7456  0074DE  A4D8               	btfss	status,2,c
  7457  0074E0  D7E4               	goto	l1193
  7458                           
  7459                           ; BSR set to: 0
  7460  0074E2  C088  F080         	movff	___lmul@product,?___lmul
  7461  0074E6  C089  F081         	movff	___lmul@product+1,?___lmul+1
  7462  0074EA  C08A  F082         	movff	___lmul@product+2,?___lmul+2
  7463  0074EE  C08B  F083         	movff	___lmul@product+3,?___lmul+3
  7464                           
  7465                           ; BSR set to: 0
  7466  0074F2  0012               	return		;funcret
  7467  0074F4  FFFF               	dw	65535	; errata NOP
  7468  0074F6                     __end_of___lmul:
  7469                           	opt stack 0
  7470                           tblptru	equ	0xFF8
  7471                           tblptrh	equ	0xFF7
  7472                           tblptrl	equ	0xFF6
  7473                           tablat	equ	0xFF5
  7474                           prodh	equ	0xFF4
  7475                           prodl	equ	0xFF3
  7476                           postinc0	equ	0xFEE
  7477                           wreg	equ	0xFE8
  7478                           postdec1	equ	0xFE5
  7479                           fsr1l	equ	0xFE1
  7480                           indf2	equ	0xFDF
  7481                           postinc2	equ	0xFDE
  7482                           postdec2	equ	0xFDD
  7483                           fsr2h	equ	0xFDA
  7484                           fsr2l	equ	0xFD9
  7485                           status	equ	0xFD8
  7486                           
  7487 ;; *************** function ___aldiv *****************
  7488 ;; Defined at:
  7489 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;  dividend        4    0[BANK0 ] long 
  7492 ;;  divisor         4    4[BANK0 ] long 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;  quotient        4   10[BANK0 ] long 
  7495 ;;  sign            1    9[BANK0 ] unsigned char 
  7496 ;;  counter         1    8[BANK0 ] unsigned char 
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  4    0[BANK0 ] long 
  7499 ;; Registers used:
  7500 ;;		wreg, status,2, status,0
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7506 ;;      Params:         0       8       0       0       0       0       0
  7507 ;;      Locals:         0       6       0       0       0       0       0
  7508 ;;      Temps:          0       0       0       0       0       0       0
  7509 ;;      Totals:         0      14       0       0       0       0       0
  7510 ;;Total ram usage:       14 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; Hardware stack levels required when called:    6
  7513 ;; This function calls:
  7514 ;;		Nothing
  7515 ;; This function is called by:
  7516 ;;		_map
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text17
  7521  00383C                     __ptext17:
  7522                           	opt stack 0
  7523  00383C                     ___aldiv:
  7524                           	opt stack 0
  7525  00383C  FFFF               	dw	65535	; assembler added errata NOP
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;incstack = 0
  7529  00383E  0E00               	movlw	0
  7530  003840  0100               	movlb	0	; () banked
  7531  003842  6F89               	movwf	___aldiv@sign& (0+255),b
  7532                           
  7533                           ; BSR set to: 0
  7534  003844  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  7535  003846  D00A               	goto	l1237
  7536                           
  7537                           ; BSR set to: 0
  7538  003848  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
  7539  00384A  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
  7540  00384C  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
  7541  00384E  6D84               	negf	___aldiv@divisor& (0+255),b
  7542  003850  0E00               	movlw	0
  7543  003852  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  7544  003854  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  7545  003856  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  7546                           
  7547                           ; BSR set to: 0
  7548  003858  0E01               	movlw	1
  7549  00385A  6F89               	movwf	___aldiv@sign& (0+255),b
  7550  00385C                     l1237:
  7551  00385C  FFFF               	dw	65535	; assembler added errata NOP
  7552                           
  7553                           ; BSR set to: 0
  7554                           
  7555                           ; BSR set to: 0
  7556  00385E  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  7557  003860  D00A               	goto	l1238
  7558                           
  7559                           ; BSR set to: 0
  7560  003862  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
  7561  003864  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
  7562  003866  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
  7563  003868  6D80               	negf	___aldiv@dividend& (0+255),b
  7564  00386A  0E00               	movlw	0
  7565  00386C  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  7566  00386E  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  7567  003870  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  7568                           
  7569                           ; BSR set to: 0
  7570  003872  0E01               	movlw	1
  7571  003874  1B89               	xorwf	___aldiv@sign& (0+255),f,b
  7572  003876                     l1238:
  7573  003876  FFFF               	dw	65535	; assembler added errata NOP
  7574                           
  7575                           ; BSR set to: 0
  7576                           
  7577                           ; BSR set to: 0
  7578  003878  0E00               	movlw	0
  7579  00387A  6F8A               	movwf	___aldiv@quotient& (0+255),b
  7580  00387C  0E00               	movlw	0
  7581  00387E  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
  7582  003880  0E00               	movlw	0
  7583  003882  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
  7584  003884  0E00               	movlw	0
  7585  003886  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
  7586                           
  7587                           ; BSR set to: 0
  7588  003888  5184               	movf	___aldiv@divisor& (0+255),w,b
  7589  00388A  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  7590  00388C  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  7591  00388E  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  7592  003890  B4D8               	btfsc	status,2,c
  7593  003892  D02E               	goto	l1245
  7594                           
  7595                           ; BSR set to: 0
  7596  003894  0E01               	movlw	1
  7597  003896  6F88               	movwf	___aldiv@counter& (0+255),b
  7598  003898  D007               	goto	l1240
  7599  00389A  FFFF               	dw	65535	; assembler added errata NOP
  7600                           
  7601                           ; BSR set to: 0
  7602                           
  7603                           ; BSR set to: 0
  7604  00389C  90D8               	bcf	status,0,c
  7605  00389E  3784               	rlcf	___aldiv@divisor& (0+255),f,b
  7606  0038A0  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  7607  0038A2  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  7608  0038A4  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  7609  0038A6  2B88               	incf	___aldiv@counter& (0+255),f,b
  7610  0038A8                     l1240:
  7611  0038A8  FFFF               	dw	65535	; assembler added errata NOP
  7612                           
  7613                           ; BSR set to: 0
  7614                           
  7615                           ; BSR set to: 0
  7616  0038AA  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  7617  0038AC  D7F6               	goto	l1241
  7618  0038AE                     u5670:
  7619  0038AE  FFFF               	dw	65535	; assembler added errata NOP
  7620                           
  7621                           ; BSR set to: 0
  7622                           
  7623                           ; BSR set to: 0
  7624                           
  7625                           ; BSR set to: 0
  7626  0038B0  90D8               	bcf	status,0,c
  7627  0038B2  378A               	rlcf	___aldiv@quotient& (0+255),f,b
  7628  0038B4  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  7629  0038B6  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  7630  0038B8  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  7631                           
  7632                           ; BSR set to: 0
  7633  0038BA  5184               	movf	___aldiv@divisor& (0+255),w,b
  7634  0038BC  5D80               	subwf	___aldiv@dividend& (0+255),w,b
  7635  0038BE  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
  7636  0038C0  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  7637  0038C2  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
  7638  0038C4  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  7639  0038C6  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
  7640  0038C8  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  7641  0038CA  A0D8               	btfss	status,0,c
  7642  0038CC  D009               	goto	l1244
  7643                           
  7644                           ; BSR set to: 0
  7645  0038CE  5184               	movf	___aldiv@divisor& (0+255),w,b
  7646  0038D0  5F80               	subwf	___aldiv@dividend& (0+255),f,b
  7647  0038D2  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
  7648  0038D4  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  7649  0038D6  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
  7650  0038D8  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  7651  0038DA  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
  7652  0038DC  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  7653                           
  7654                           ; BSR set to: 0
  7655  0038DE  818A               	bsf	___aldiv@quotient& (0+255),0,b
  7656  0038E0                     l1244:
  7657  0038E0  FFFF               	dw	65535	; assembler added errata NOP
  7658                           
  7659                           ; BSR set to: 0
  7660                           
  7661                           ; BSR set to: 0
  7662  0038E2  90D8               	bcf	status,0,c
  7663  0038E4  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  7664  0038E6  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  7665  0038E8  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  7666  0038EA  3384               	rrcf	___aldiv@divisor& (0+255),f,b
  7667                           
  7668                           ; BSR set to: 0
  7669  0038EC  2F88               	decfsz	___aldiv@counter& (0+255),f,b
  7670  0038EE  D7DF               	goto	u5670
  7671  0038F0                     l1245:
  7672  0038F0  FFFF               	dw	65535	; assembler added errata NOP
  7673                           
  7674                           ; BSR set to: 0
  7675                           
  7676                           ; BSR set to: 0
  7677                           
  7678                           ; BSR set to: 0
  7679  0038F2  5189               	movf	___aldiv@sign& (0+255),w,b
  7680  0038F4  B4D8               	btfsc	status,2,c
  7681  0038F6  D008               	goto	l1246
  7682                           
  7683                           ; BSR set to: 0
  7684  0038F8  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  7685  0038FA  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  7686  0038FC  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  7687  0038FE  6D8A               	negf	___aldiv@quotient& (0+255),b
  7688  003900  0E00               	movlw	0
  7689  003902  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  7690  003904  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  7691  003906  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  7692  003908                     l1246:
  7693  003908  FFFF               	dw	65535	; assembler added errata NOP
  7694                           
  7695                           ; BSR set to: 0
  7696                           
  7697                           ; BSR set to: 0
  7698  00390A  C08A  F080         	movff	___aldiv@quotient,?___aldiv
  7699  00390E  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
  7700  003912  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
  7701  003916  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
  7702                           
  7703                           ; BSR set to: 0
  7704                           
  7705                           ; BSR set to: 0
  7706  00391A  0012               	return		;funcret
  7707  00391C  FFFF               	dw	65535	; errata NOP
  7708  00391E                     __end_of___aldiv:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           postinc0	equ	0xFEE
  7717                           wreg	equ	0xFE8
  7718                           postdec1	equ	0xFE5
  7719                           fsr1l	equ	0xFE1
  7720                           indf2	equ	0xFDF
  7721                           postinc2	equ	0xFDE
  7722                           postdec2	equ	0xFDD
  7723                           fsr2h	equ	0xFDA
  7724                           fsr2l	equ	0xFD9
  7725                           status	equ	0xFD8
  7726                           
  7727 ;; *************** function _lerParametros *****************
  7728 ;; Defined at:
  7729 ;;		line 9 in file "util.h"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;		None
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  i               1   21[BANK0 ] unsigned char 
  7734 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      void 
  7737 ;; Registers used:
  7738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7744 ;;      Params:         0       0       0       0       0       0       0
  7745 ;;      Locals:         0       2       0       0       0       0       0
  7746 ;;      Temps:          0       0       0       0       0       0       0
  7747 ;;      Totals:         0       2       0       0       0       0       0
  7748 ;;Total ram usage:        2 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:   10
  7751 ;; This function calls:
  7752 ;;		_readEEPROM16_ext
  7753 ;;		_readEEPROM_ext
  7754 ;;		_writeEEPROM_ext
  7755 ;; This function is called by:
  7756 ;;		_main
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           	psect	text18
  7761  0031FC                     __ptext18:
  7762                           	opt stack 0
  7763  0031FC                     _lerParametros:
  7764                           	opt stack 0
  7765  0031FC  FFFF               	dw	65535	; assembler added errata NOP
  7766                           
  7767                           ;util.h: 10: char i = 0;
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;incstack = 0
  7771  0031FE  0E00               	movlw	0
  7772  003200  0100               	movlb	0	; () banked
  7773  003202  6F95               	movwf	lerParametros@i& (0+255),b
  7774                           
  7775                           ;util.h: 11: char verifica_memoria_nova = 0;
  7776  003204  0E00               	movlw	0
  7777  003206  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  7781  003208  0E0C               	movlw	12
  7782  00320A  ECC5  F039         	call	_readEEPROM_ext
  7783  00320E  0100               	movlb	0	; () banked
  7784  003210  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  7788  003212  0E14               	movlw	20
  7789  003214  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  7790  003216  B4D8               	btfsc	status,2,c
  7791  003218  D016               	goto	l684
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;util.h: 14: for (i = 0; i < 100; i++) {
  7795  00321A  0E00               	movlw	0
  7796  00321C  6F95               	movwf	lerParametros@i& (0+255),b
  7797  00321E                     l7107:
  7798  00321E  FFFF               	dw	65535	; assembler added errata NOP
  7799                           
  7800                           ; BSR set to: 0
  7801  003220  0E63               	movlw	99
  7802  003222  6595               	cpfsgt	lerParametros@i& (0+255),b
  7803  003224  D001               	goto	l685
  7804  003226  D009               	goto	u7570
  7805  003228                     l685:
  7806  003228  FFFF               	dw	65535	; assembler added errata NOP
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;util.h: 15: writeEEPROM_ext(i, 0);
  7810                           
  7811                           ; BSR set to: 0
  7812  00322A  0E00               	movlw	0
  7813  00322C  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  7814  00322E  5195               	movf	lerParametros@i& (0+255),w,b
  7815  003230  EC06  F039         	call	_writeEEPROM_ext
  7816  003234  0100               	movlb	0	; () banked
  7817  003236  2B95               	incf	lerParametros@i& (0+255),f,b
  7818  003238  D7F2               	goto	l7107
  7819  00323A                     u7570:
  7820  00323A  FFFF               	dw	65535	; assembler added errata NOP
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;util.h: 16: }
  7824                           ;util.h: 17: writeEEPROM_ext(12, 20);
  7825                           
  7826                           ; BSR set to: 0
  7827  00323C  0E14               	movlw	20
  7828  00323E  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  7829  003240  0E0C               	movlw	12
  7830  003242  EC06  F039         	call	_writeEEPROM_ext
  7831  003246                     l684:
  7832  003246  FFFF               	dw	65535	; assembler added errata NOP
  7833                           
  7834                           ;util.h: 18: }
  7835                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  7836  003248  0E00               	movlw	0
  7837  00324A  ECC5  F039         	call	_readEEPROM_ext
  7838  00324E  0100               	movlb	0	; () banked
  7839  003250  6FE6               	movwf	_sp_jockey& (0+255),b
  7840                           
  7841                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  7842  003252  0E01               	movlw	1
  7843  003254  ECC5  F039         	call	_readEEPROM_ext
  7844  003258  0100               	movlb	0	; () banked
  7845  00325A  6FE5               	movwf	_sp_principal& (0+255),b
  7846                           
  7847                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  7848  00325C  0E02               	movlw	2
  7849  00325E  ECC5  F039         	call	_readEEPROM_ext
  7850  003262  0100               	movlb	0	; () banked
  7851  003264  6FE4               	movwf	_sp_estacionaria& (0+255),b
  7852                           
  7853                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  7854  003266  0E08               	movlw	8
  7855  003268  EC5C  F037         	call	_readEEPROM16_ext
  7856  00326C  C08E  F10A         	movff	?_readEEPROM16_ext,_horimetro
  7857  003270  C08F  F10B         	movff	?_readEEPROM16_ext+1,_horimetro+1
  7858                           
  7859                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  7860  003274  0E04               	movlw	4
  7861  003276  ECC5  F039         	call	_readEEPROM_ext
  7862  00327A  0100               	movlb	0	; () banked
  7863  00327C  6FE7               	movwf	_sp_pressao_rede& (0+255),b
  7864                           
  7865                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  7866  00327E  0E06               	movlw	6
  7867  003280  ECC5  F039         	call	_readEEPROM_ext
  7868  003284  0100               	movlb	0	; () banked
  7869  003286  6FEB               	movwf	_intervalo_teste_dia& (0+255),b
  7870                           
  7871                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  7872  003288  0E07               	movlw	7
  7873  00328A  ECC5  F039         	call	_readEEPROM_ext
  7874  00328E  0100               	movlb	0	; () banked
  7875  003290  6FE8               	movwf	_tempo_limite_estacionaria& (0+255),b
  7876                           
  7877                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  7878  003292  0E0A               	movlw	10
  7879  003294  ECC5  F039         	call	_readEEPROM_ext
  7880  003298  0100               	movlb	0	; () banked
  7881  00329A  6FEA               	movwf	_dias_restante_teste& (0+255),b
  7882                           
  7883                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  7884  00329C  0E0B               	movlw	11
  7885  00329E  ECC5  F039         	call	_readEEPROM_ext
  7886  0032A2  0100               	movlb	0	; () banked
  7887  0032A4  6FE9               	movwf	_horario_de_teste& (0+255),b
  7888                           
  7889                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  7890  0032A6  0E0D               	movlw	13
  7891  0032A8  ECC5  F039         	call	_readEEPROM_ext
  7892  0032AC  6E69               	movwf	_tempo_limite_teste_estacionaria,c
  7893                           
  7894                           ;util.h: 31: habilitaTesteAutomatico = readEEPROM_ext(15);
  7895  0032AE  0E0F               	movlw	15
  7896  0032B0  ECC5  F039         	call	_readEEPROM_ext
  7897  0032B4  0100               	movlb	0	; () banked
  7898  0032B6  6FF2               	movwf	_habilitaTesteAutomatico& (0+255),b
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;util.h: 33: for (i = 0; i < 11; i++) {
  7902  0032B8  0E00               	movlw	0
  7903  0032BA  6F95               	movwf	lerParametros@i& (0+255),b
  7904  0032BC                     l7121:
  7905  0032BC  FFFF               	dw	65535	; assembler added errata NOP
  7906                           
  7907                           ; BSR set to: 0
  7908  0032BE  0E0A               	movlw	10
  7909  0032C0  6595               	cpfsgt	lerParametros@i& (0+255),b
  7910  0032C2  D001               	goto	l687
  7911  0032C4  D011               	goto	u7590
  7912  0032C6                     l687:
  7913  0032C6  FFFF               	dw	65535	; assembler added errata NOP
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;util.h: 34: tel1[i] = readEEPROM_ext(20 + i);
  7917                           
  7918                           ; BSR set to: 0
  7919  0032C8  5195               	movf	lerParametros@i& (0+255),w,b
  7920  0032CA  0D01               	mullw	1
  7921  0032CC  0ED3               	movlw	low _tel1
  7922  0032CE  24F3               	addwf	prodl,w,c
  7923  0032D0  6ED9               	movwf	fsr2l,c
  7924  0032D2  0E01               	movlw	high _tel1
  7925  0032D4  20F4               	addwfc	prodh,w,c
  7926  0032D6  6EDA               	movwf	fsr2h,c
  7927  0032D8  5195               	movf	lerParametros@i& (0+255),w,b
  7928  0032DA  0F14               	addlw	20
  7929  0032DC  ECC5  F039         	call	_readEEPROM_ext
  7930  0032E0  6EDF               	movwf	indf2,c
  7931  0032E2  0100               	movlb	0	; () banked
  7932  0032E4  2B95               	incf	lerParametros@i& (0+255),f,b
  7933  0032E6  D7EA               	goto	l7121
  7934  0032E8                     u7590:
  7935  0032E8  FFFF               	dw	65535	; assembler added errata NOP
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;util.h: 35: }
  7939                           ;util.h: 36: for (i = 0; i < 11; i++) {
  7940                           
  7941                           ; BSR set to: 0
  7942  0032EA  0E00               	movlw	0
  7943  0032EC  6F95               	movwf	lerParametros@i& (0+255),b
  7944  0032EE                     l7133:
  7945  0032EE  FFFF               	dw	65535	; assembler added errata NOP
  7946                           
  7947                           ; BSR set to: 0
  7948  0032F0  0E0A               	movlw	10
  7949  0032F2  6595               	cpfsgt	lerParametros@i& (0+255),b
  7950  0032F4  D001               	goto	l689
  7951  0032F6  D011               	goto	u7610
  7952  0032F8                     l689:
  7953  0032F8  FFFF               	dw	65535	; assembler added errata NOP
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;util.h: 37: tel2[i] = readEEPROM_ext(40 + i);
  7957                           
  7958                           ; BSR set to: 0
  7959  0032FA  5195               	movf	lerParametros@i& (0+255),w,b
  7960  0032FC  0D01               	mullw	1
  7961  0032FE  0EC7               	movlw	low _tel2
  7962  003300  24F3               	addwf	prodl,w,c
  7963  003302  6ED9               	movwf	fsr2l,c
  7964  003304  0E01               	movlw	high _tel2
  7965  003306  20F4               	addwfc	prodh,w,c
  7966  003308  6EDA               	movwf	fsr2h,c
  7967  00330A  5195               	movf	lerParametros@i& (0+255),w,b
  7968  00330C  0F28               	addlw	40
  7969  00330E  ECC5  F039         	call	_readEEPROM_ext
  7970  003312  6EDF               	movwf	indf2,c
  7971  003314  0100               	movlb	0	; () banked
  7972  003316  2B95               	incf	lerParametros@i& (0+255),f,b
  7973  003318  D7EA               	goto	l7133
  7974  00331A                     u7610:
  7975  00331A  FFFF               	dw	65535	; assembler added errata NOP
  7976                           
  7977                           ; BSR set to: 0
  7978                           
  7979                           ; BSR set to: 0
  7980  00331C  0012               	return		;funcret
  7981  00331E  FFFF               	dw	65535	; errata NOP
  7982  003320                     __end_of_lerParametros:
  7983                           	opt stack 0
  7984                           tblptru	equ	0xFF8
  7985                           tblptrh	equ	0xFF7
  7986                           tblptrl	equ	0xFF6
  7987                           tablat	equ	0xFF5
  7988                           prodh	equ	0xFF4
  7989                           prodl	equ	0xFF3
  7990                           postinc0	equ	0xFEE
  7991                           wreg	equ	0xFE8
  7992                           postdec1	equ	0xFE5
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           fsr2h	equ	0xFDA
  7998                           fsr2l	equ	0xFD9
  7999                           status	equ	0xFD8
  8000                           
  8001 ;; *************** function _readEEPROM16_ext *****************
  8002 ;; Defined at:
  8003 ;;		line 48 in file "eeprom.h"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;  adress          1    wreg     unsigned char 
  8006 ;; Auto vars:     Size  Location     Type
  8007 ;;  adress          1   19[BANK0 ] unsigned char 
  8008 ;;  data            2   17[BANK0 ] unsigned int 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  2   14[BANK0 ] unsigned int 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8018 ;;      Params:         0       2       0       0       0       0       0
  8019 ;;      Locals:         0       3       0       0       0       0       0
  8020 ;;      Temps:          0       1       0       0       0       0       0
  8021 ;;      Totals:         0       6       0       0       0       0       0
  8022 ;;Total ram usage:        6 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    9
  8025 ;; This function calls:
  8026 ;;		_readEEPROM_ext
  8027 ;; This function is called by:
  8028 ;;		_lerParametros
  8029 ;; This function uses a non-reentrant model
  8030 ;;
  8031                           
  8032                           	psect	text19
  8033  006EB8                     __ptext19:
  8034                           	opt stack 0
  8035  006EB8                     _readEEPROM16_ext:
  8036                           	opt stack 0
  8037  006EB8  FFFF               	dw	65535	; assembler added errata NOP
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;incstack = 0
  8041                           ;readEEPROM16_ext@adress stored from wreg
  8042  006EBA  0100               	movlb	0	; () banked
  8043  006EBC  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  8044                           
  8045                           ;eeprom.h: 49: unsigned int data;
  8046                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  8047  006EBE  0100               	movlb	0	; () banked
  8048  006EC0  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  8049  006EC2  ECC5  F039         	call	_readEEPROM_ext
  8050  006EC6  0100               	movlb	0	; () banked
  8051  006EC8  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  8052  006ECA  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  8053  006ECC  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  8054  006ECE  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;eeprom.h: 51: data <<= 8;
  8058  006ED0  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  8059  006ED2  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  8060  006ED4  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  8064  006ED6  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  8065  006ED8  ECC5  F039         	call	_readEEPROM_ext
  8066  006EDC  0100               	movlb	0	; () banked
  8067  006EDE  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  8068  006EE0  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  8069  006EE2  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;eeprom.h: 53: return data;
  8073  006EE4  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  8074  006EE8  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  8075                           
  8076                           ; BSR set to: 0
  8077                           
  8078                           ; BSR set to: 0
  8079  006EEC  0012               	return		;funcret
  8080  006EEE  FFFF               	dw	65535	; errata NOP
  8081  006EF0                     __end_of_readEEPROM16_ext:
  8082                           	opt stack 0
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           postinc0	equ	0xFEE
  8090                           wreg	equ	0xFE8
  8091                           postdec1	equ	0xFE5
  8092                           fsr1l	equ	0xFE1
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function _informacoes *****************
  8101 ;; Defined at:
  8102 ;;		line 7 in file "tela_INFORMACOES.h"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;		None
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  1    wreg      void 
  8109 ;; Registers used:
  8110 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8116 ;;      Params:         0       0       0       0       0       0       0
  8117 ;;      Locals:         0       0       0       0       0       0       0
  8118 ;;      Temps:          0       6       0       0       0       0       0
  8119 ;;      Totals:         0       6       0       0       0       0       0
  8120 ;;Total ram usage:        6 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    9
  8123 ;; This function calls:
  8124 ;;		_btPress
  8125 ;;		_sprintf
  8126 ;; This function is called by:
  8127 ;;		_main
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           	psect	text20
  8132  002FB0                     __ptext20:
  8133                           	opt stack 0
  8134  002FB0                     _informacoes:
  8135                           	opt stack 0
  8136  002FB0  FFFF               	dw	65535	; assembler added errata NOP
  8137                           
  8138                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;incstack = 0
  8142  002FB2  0E9E               	movlw	low _line1
  8143  002FB4  0100               	movlb	0	; () banked
  8144  002FB6  6FA1               	movwf	sprintf@wh& (0+255),b
  8145  002FB8  0E01               	movlw	high _line1
  8146  002FBA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8147  002FBC  0E9A               	movlw	low STR_90
  8148  002FBE  6FA3               	movwf	sprintf@f& (0+255),b
  8149  002FC0  0E7F               	movlw	high STR_90
  8150  002FC2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8151  002FC4  EC29  F039         	call	_sprintf	;wreg free
  8152                           
  8153                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  8154  002FC8  0E89               	movlw	low _line2
  8155  002FCA  0100               	movlb	0	; () banked
  8156  002FCC  6FA1               	movwf	sprintf@wh& (0+255),b
  8157  002FCE  0E01               	movlw	high _line2
  8158  002FD0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8159  002FD2  0EC1               	movlw	low STR_91
  8160  002FD4  6FA3               	movwf	sprintf@f& (0+255),b
  8161  002FD6  0E7C               	movlw	high STR_91
  8162  002FD8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8163  002FDA  EC29  F039         	call	_sprintf	;wreg free
  8164                           
  8165                           ;tela_INFORMACOES.h: 10: sprintf(line3, "%d-%d-%d-%d-%d-%d > %d-%d", LATAbits.LATA3, LAT
      +                          Dbits.LATD7, LATEbits.LATE0, LATEbits.LATE1, LATEbits.LATE2, LATCbits.LATC1, !PORTAbits.
      +                          RA5, !PORTAbits.RA2);
  8166  002FDE  0E74               	movlw	low _line3
  8167  002FE0  0100               	movlb	0	; () banked
  8168  002FE2  6FA1               	movwf	sprintf@wh& (0+255),b
  8169  002FE4  0E01               	movlw	high _line3
  8170  002FE6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8171  002FE8  0EEF               	movlw	low STR_92
  8172  002FEA  6FA3               	movwf	sprintf@f& (0+255),b
  8173  002FEC  0E7B               	movlw	high STR_92
  8174  002FEE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8175  002FF0  A689               	btfss	3977,3,c	;volatile
  8176  002FF2  D003               	goto	u8070
  8177  002FF4  6BBB               	clrf	??_informacoes& (0+255),b
  8178  002FF6  2BBB               	incf	??_informacoes& (0+255),f,b
  8179  002FF8  D003               	goto	u8078
  8180  002FFA                     u8070:
  8181  002FFA  FFFF               	dw	65535	; assembler added errata NOP
  8182  002FFC  0100               	movlb	0	; () banked
  8183  002FFE  6BBB               	clrf	??_informacoes& (0+255),b
  8184  003000                     u8078:
  8185  003000  FFFF               	dw	65535	; assembler added errata NOP
  8186  003002  51BB               	movf	??_informacoes& (0+255),w,b
  8187  003004  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8188  003006  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8189  003008  AE8C               	btfss	3980,7,c	;volatile
  8190  00300A  D003               	goto	u8080
  8191  00300C  6BBC               	clrf	(??_informacoes+1)& (0+255),b
  8192  00300E  2BBC               	incf	(??_informacoes+1)& (0+255),f,b
  8193  003010  D003               	goto	u8088
  8194  003012                     u8080:
  8195  003012  FFFF               	dw	65535	; assembler added errata NOP
  8196  003014  0100               	movlb	0	; () banked
  8197  003016  6BBC               	clrf	(??_informacoes+1)& (0+255),b
  8198  003018                     u8088:
  8199  003018  FFFF               	dw	65535	; assembler added errata NOP
  8200  00301A  51BC               	movf	(??_informacoes+1)& (0+255),w,b
  8201  00301C  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  8202  00301E  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  8203  003020  A08D               	btfss	3981,0,c	;volatile
  8204  003022  D003               	goto	u8090
  8205  003024  6BBD               	clrf	(??_informacoes+2)& (0+255),b
  8206  003026  2BBD               	incf	(??_informacoes+2)& (0+255),f,b
  8207  003028  D003               	goto	u8098
  8208  00302A                     u8090:
  8209  00302A  FFFF               	dw	65535	; assembler added errata NOP
  8210  00302C  0100               	movlb	0	; () banked
  8211  00302E  6BBD               	clrf	(??_informacoes+2)& (0+255),b
  8212  003030                     u8098:
  8213  003030  FFFF               	dw	65535	; assembler added errata NOP
  8214  003032  51BD               	movf	(??_informacoes+2)& (0+255),w,b
  8215  003034  6FA9               	movwf	(?_sprintf+8)& (0+255),b
  8216  003036  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  8217  003038  A28D               	btfss	3981,1,c	;volatile
  8218  00303A  D003               	goto	u8100
  8219  00303C  6BBE               	clrf	(??_informacoes+3)& (0+255),b
  8220  00303E  2BBE               	incf	(??_informacoes+3)& (0+255),f,b
  8221  003040  D003               	goto	u8108
  8222  003042                     u8100:
  8223  003042  FFFF               	dw	65535	; assembler added errata NOP
  8224  003044  0100               	movlb	0	; () banked
  8225  003046  6BBE               	clrf	(??_informacoes+3)& (0+255),b
  8226  003048                     u8108:
  8227  003048  FFFF               	dw	65535	; assembler added errata NOP
  8228  00304A  51BE               	movf	(??_informacoes+3)& (0+255),w,b
  8229  00304C  6FAB               	movwf	(?_sprintf+10)& (0+255),b
  8230  00304E  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  8231  003050  A48D               	btfss	3981,2,c	;volatile
  8232  003052  D003               	goto	u8110
  8233  003054  6BBF               	clrf	(??_informacoes+4)& (0+255),b
  8234  003056  2BBF               	incf	(??_informacoes+4)& (0+255),f,b
  8235  003058  D003               	goto	u8118
  8236  00305A                     u8110:
  8237  00305A  FFFF               	dw	65535	; assembler added errata NOP
  8238  00305C  0100               	movlb	0	; () banked
  8239  00305E  6BBF               	clrf	(??_informacoes+4)& (0+255),b
  8240  003060                     u8118:
  8241  003060  FFFF               	dw	65535	; assembler added errata NOP
  8242  003062  51BF               	movf	(??_informacoes+4)& (0+255),w,b
  8243  003064  6FAD               	movwf	(?_sprintf+12)& (0+255),b
  8244  003066  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  8245  003068  A28B               	btfss	3979,1,c	;volatile
  8246  00306A  D003               	goto	u8120
  8247  00306C  6BC0               	clrf	(??_informacoes+5)& (0+255),b
  8248  00306E  2BC0               	incf	(??_informacoes+5)& (0+255),f,b
  8249  003070  D003               	goto	u8128
  8250  003072                     u8120:
  8251  003072  FFFF               	dw	65535	; assembler added errata NOP
  8252  003074  0100               	movlb	0	; () banked
  8253  003076  6BC0               	clrf	(??_informacoes+5)& (0+255),b
  8254  003078                     u8128:
  8255  003078  FFFF               	dw	65535	; assembler added errata NOP
  8256  00307A  51C0               	movf	(??_informacoes+5)& (0+255),w,b
  8257  00307C  6FAF               	movwf	(?_sprintf+14)& (0+255),b
  8258  00307E  6BB0               	clrf	(?_sprintf+15)& (0+255),b
  8259  003080  BA80               	btfsc	3968,5,c	;volatile
  8260  003082  D002               	goto	u8130
  8261  003084  0E01               	movlw	1
  8262  003086  D002               	goto	u8140
  8263  003088                     u8130:
  8264  003088  FFFF               	dw	65535	; assembler added errata NOP
  8265  00308A  0E00               	movlw	0
  8266  00308C                     u8140:
  8267  00308C  FFFF               	dw	65535	; assembler added errata NOP
  8268  00308E  6FB1               	movwf	(?_sprintf+16)& (0+255),b
  8269  003090  6BB2               	clrf	(?_sprintf+17)& (0+255),b
  8270  003092  B480               	btfsc	3968,2,c	;volatile
  8271  003094  D002               	goto	u8150
  8272  003096  0E01               	movlw	1
  8273  003098  D002               	goto	u8160
  8274  00309A                     u8150:
  8275  00309A  FFFF               	dw	65535	; assembler added errata NOP
  8276  00309C  0E00               	movlw	0
  8277  00309E                     u8160:
  8278  00309E  FFFF               	dw	65535	; assembler added errata NOP
  8279  0030A0  6FB3               	movwf	(?_sprintf+18)& (0+255),b
  8280  0030A2  6BB4               	clrf	(?_sprintf+19)& (0+255),b
  8281  0030A4  EC29  F039         	call	_sprintf	;wreg free
  8282                           
  8283                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Jul 16 2020");
  8284  0030A8  0E5F               	movlw	low _line4
  8285  0030AA  0100               	movlb	0	; () banked
  8286  0030AC  6FA1               	movwf	sprintf@wh& (0+255),b
  8287  0030AE  0E01               	movlw	high _line4
  8288  0030B0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8289  0030B2  0EF5               	movlw	low STR_93
  8290  0030B4  6FA3               	movwf	sprintf@f& (0+255),b
  8291  0030B6  0E7E               	movlw	high STR_93
  8292  0030B8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8293  0030BA  0EB9               	movlw	low STR_15
  8294  0030BC  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8295  0030BE  0E7E               	movlw	high STR_15
  8296  0030C0  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8297  0030C2  EC29  F039         	call	_sprintf	;wreg free
  8298                           
  8299                           ;tela_INFORMACOES.h: 13: if (btPress(1)) {
  8300  0030C6  0E01               	movlw	1
  8301  0030C8  EC9A  F03B         	call	_btPress
  8302  0030CC  0900               	iorlw	0
  8303  0030CE  A4D8               	btfss	status,2,c
  8304                           
  8305                           ;tela_INFORMACOES.h: 14: menu_posi = _menu_posi;
  8306  0030D0  C0E1  F0E2         	movff	__menu_posi,_menu_posi
  8307  0030D4  0012               	return		;funcret
  8308  0030D6  FFFF               	dw	65535	; errata NOP
  8309  0030D8                     __end_of_informacoes:
  8310                           	opt stack 0
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           postinc0	equ	0xFEE
  8318                           wreg	equ	0xFE8
  8319                           postdec1	equ	0xFE5
  8320                           fsr1l	equ	0xFE1
  8321                           indf2	equ	0xFDF
  8322                           postinc2	equ	0xFDE
  8323                           postdec2	equ	0xFDD
  8324                           fsr2h	equ	0xFDA
  8325                           fsr2l	equ	0xFD9
  8326                           status	equ	0xFD8
  8327                           
  8328 ;; *************** function _getSinalSIM800L *****************
  8329 ;; Defined at:
  8330 ;;		line 13 in file "comunicacao.h"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;		None
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;  sinal           2   78[BANK0 ] int 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      void 
  8337 ;; Registers used:
  8338 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8344 ;;      Params:         0       0       0       0       0       0       0
  8345 ;;      Locals:         0       2       0       0       0       0       0
  8346 ;;      Temps:          0       2       0       0       0       0       0
  8347 ;;      Totals:         0       4       0       0       0       0       0
  8348 ;;Total ram usage:        4 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:   10
  8351 ;; This function calls:
  8352 ;;		_aguardaBuffer
  8353 ;;		_atoi
  8354 ;;		_delay
  8355 ;;		_getSerial
  8356 ;;		_limparBuffer
  8357 ;;		_printf
  8358 ;;		_writeChar
  8359 ;; This function is called by:
  8360 ;;		_main
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text21
  8365  0029C2                     __ptext21:
  8366                           	opt stack 0
  8367  0029C2                     _getSinalSIM800L:
  8368                           	opt stack 0
  8369  0029C2  FFFF               	dw	65535	; assembler added errata NOP
  8370                           
  8371                           ;comunicacao.h: 14: switch (etapaComunicacao) {
  8372                           
  8373                           ;incstack = 0
  8374  0029C4  D0C9               	goto	l318
  8375  0029C6  FFFF               	dw	65535	; assembler added errata NOP
  8376                           
  8377                           ;comunicacao.h: 16: limparBuffer();
  8378  0029C8  EC25  F037         	call	_limparBuffer	;wreg free
  8379                           
  8380                           ;comunicacao.h: 17: printf("AT+CSQ\r\n");
  8381  0029CC  0E7F               	movlw	low STR_3
  8382  0029CE  0100               	movlb	0	; () banked
  8383  0029D0  6FA1               	movwf	printf@f& (0+255),b
  8384  0029D2  0E7F               	movlw	high STR_3
  8385  0029D4  6FA2               	movwf	(printf@f+1)& (0+255),b
  8386  0029D6  EC27  F038         	call	_printf	;wreg free
  8387                           
  8388                           ;comunicacao.h: 18: timerEtapaComunicacao = 5;
  8389  0029DA  0E05               	movlw	5
  8390  0029DC  0100               	movlb	0	; () banked
  8391  0029DE  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;comunicacao.h: 19: etapaComunicacao = 1;
  8395  0029E0  0E00               	movlw	0
  8396  0029E2  6E63               	movwf	_etapaComunicacao+1,c
  8397  0029E4  0E01               	movlw	1
  8398  0029E6  6E62               	movwf	_etapaComunicacao,c
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;comunicacao.h: 20: telefoneSelecionado = 0;
  8402  0029E8  0E00               	movlw	0
  8403  0029EA  6FF8               	movwf	_telefoneSelecionado& (0+255),b
  8404                           
  8405                           ;comunicacao.h: 21: break;
  8406  0029EC  D0C7               	goto	l320
  8407  0029EE  FFFF               	dw	65535	; assembler added errata NOP
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;comunicacao.h: 23: if (!timerEtapaComunicacao) {
  8411                           
  8412                           ; BSR set to: 0
  8413  0029F0  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
  8414  0029F2  A4D8               	btfss	status,2,c
  8415  0029F4  D03C               	goto	l326
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;comunicacao.h: 24: printf("AT\r\n");
  8419  0029F6  0EDD               	movlw	low STR_4
  8420  0029F8  6FA1               	movwf	printf@f& (0+255),b
  8421  0029FA  0E7F               	movlw	high STR_4
  8422  0029FC  6FA2               	movwf	(printf@f+1)& (0+255),b
  8423  0029FE  EC27  F038         	call	_printf	;wreg free
  8424                           
  8425                           ;comunicacao.h: 25: delay(100);
  8426  002A02  0E00               	movlw	0
  8427  002A04  0100               	movlb	0	; () banked
  8428  002A06  6F81               	movwf	(delay@x+1)& (0+255),b
  8429  002A08  0E64               	movlw	100
  8430  002A0A  6F80               	movwf	delay@x& (0+255),b
  8431  002A0C  EC0A  F037         	call	_delay	;wreg free
  8432                           
  8433                           ;comunicacao.h: 26: if (aguardaBuffer("OK")) {
  8434  002A10  0EF9               	movlw	low STR_5
  8435  002A12  0100               	movlb	0	; () banked
  8436  002A14  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8437  002A16  0E7F               	movlw	high STR_5
  8438  002A18  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8439  002A1A  EC09  F038         	call	_aguardaBuffer	;wreg free
  8440  002A1E  0900               	iorlw	0
  8441  002A20  B4D8               	btfsc	status,2,c
  8442  002A22  D00D               	goto	l323
  8443                           
  8444                           ;comunicacao.h: 27: etapaComunicacao = 0;
  8445  002A24  0E00               	movlw	0
  8446  002A26  6E63               	movwf	_etapaComunicacao+1,c
  8447  002A28  0E00               	movlw	0
  8448  002A2A  6E62               	movwf	_etapaComunicacao,c
  8449                           
  8450                           ;comunicacao.h: 28: tentativasVerificarGSM = 0;
  8451  002A2C  0E00               	movlw	0
  8452  002A2E  6E76               	movwf	_tentativasVerificarGSM,c
  8453                           
  8454                           ;comunicacao.h: 30: if (codigoErro == 2) {
  8455  002A30  0E02               	movlw	2
  8456  002A32  0100               	movlb	0	; () banked
  8457  002A34  19F4               	xorwf	_codigoErro& (0+255),w,b
  8458  002A36  A4D8               	btfss	status,2,c
  8459  002A38  D01A               	goto	l326
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;comunicacao.h: 31: codigoErro = 0;
  8463  002A3A  0E00               	movlw	0
  8464  002A3C  D016               	goto	L11
  8465  002A3E                     l323:
  8466  002A3E  FFFF               	dw	65535	; assembler added errata NOP
  8467                           
  8468                           ;comunicacao.h: 35: etapaComunicacao = 0;
  8469                           
  8470                           ; BSR set to: 0
  8471  002A40  0E00               	movlw	0
  8472  002A42  6E63               	movwf	_etapaComunicacao+1,c
  8473  002A44  0E00               	movlw	0
  8474  002A46  6E62               	movwf	_etapaComunicacao,c
  8475                           
  8476                           ;comunicacao.h: 36: writeChar(0x1A);
  8477  002A48  0E1A               	movlw	26
  8478  002A4A  0100               	movlb	0	; () banked
  8479  002A4C  6F80               	movwf	writeChar@hex& (0+255),b
  8480  002A4E  0E00               	movlw	0
  8481  002A50  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  8482  002A52  ECD2  F035         	call	_writeChar	;wreg free
  8483                           
  8484                           ;comunicacao.h: 37: tentativasVerificarGSM++;
  8485  002A56  2A76               	incf	_tentativasVerificarGSM,f,c
  8486                           
  8487                           ;comunicacao.h: 39: if (tentativasVerificarGSM >= 3) {
  8488  002A58  0E02               	movlw	2
  8489  002A5A  6476               	cpfsgt	_tentativasVerificarGSM,c
  8490  002A5C  D008               	goto	l326
  8491                           
  8492                           ;comunicacao.h: 40: tentativasVerificarGSM = 0;
  8493  002A5E  0E00               	movlw	0
  8494  002A60  6E76               	movwf	_tentativasVerificarGSM,c
  8495                           
  8496                           ;comunicacao.h: 41: intensidadeSinal = 'x';
  8497  002A62  0E78               	movlw	120
  8498  002A64  0100               	movlb	0	; () banked
  8499  002A66  6FFF               	movwf	_intensidadeSinal& (0+255),b
  8500                           
  8501                           ;comunicacao.h: 42: codigoErro = 2;
  8502  002A68  0E02               	movlw	2
  8503  002A6A                     L11:
  8504  002A6A  FFFF               	dw	65535	; assembler added errata NOP
  8505  002A6C  6FF4               	movwf	_codigoErro& (0+255),b
  8506  002A6E                     l326:
  8507  002A6E  FFFF               	dw	65535	; assembler added errata NOP
  8508                           
  8509                           ;comunicacao.h: 43: }
  8510                           ;comunicacao.h: 44: }
  8511                           ;comunicacao.h: 45: }
  8512                           ;comunicacao.h: 46: if (aguardaBuffer("+CSQ: ")) {
  8513                           
  8514                           ; BSR set to: 0
  8515                           
  8516                           ; BSR set to: 0
  8517                           
  8518                           ; BSR set to: 0
  8519  002A70  0EB0               	movlw	low STR_6
  8520  002A72  0100               	movlb	0	; () banked
  8521  002A74  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8522  002A76  0E7F               	movlw	high STR_6
  8523  002A78  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8524  002A7A  EC09  F038         	call	_aguardaBuffer	;wreg free
  8525  002A7E  0900               	iorlw	0
  8526  002A80  B4D8               	btfsc	status,2,c
  8527  002A82  D07C               	goto	l320
  8528                           
  8529                           ;comunicacao.h: 47: int sinal = atoi(getSerial("+CSQ: ", ','));
  8530  002A84  0EB0               	movlw	low STR_6
  8531  002A86  0100               	movlb	0	; () banked
  8532  002A88  6FBB               	movwf	getSerial@str& (0+255),b
  8533  002A8A  0E7F               	movlw	high STR_6
  8534  002A8C  6FBC               	movwf	(getSerial@str+1)& (0+255),b
  8535  002A8E  0E2C               	movlw	44
  8536  002A90  6FBD               	movwf	getSerial@end& (0+255),b
  8537  002A92  EC90  F019         	call	_getSerial	;wreg free
  8538  002A96  C0BB  F0C5         	movff	?_getSerial,atoi@s
  8539  002A9A  C0BC  F0C6         	movff	?_getSerial+1,atoi@s+1
  8540  002A9E  ECA8  F01B         	call	_atoi	;wreg free
  8541  002AA2  C0C5  F0CE         	movff	?_atoi,getSinalSIM800L@sinal
  8542  002AA6  C0C6  F0CF         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  8543                           
  8544                           ;comunicacao.h: 48: if (sinal < 8) {
  8545  002AAA  0100               	movlb	0	; () banked
  8546  002AAC  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8547  002AAE  D006               	goto	u6600
  8548  002AB0  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8549  002AB2  E108               	bnz	l6637
  8550  002AB4  0E08               	movlw	8
  8551  002AB6  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8552  002AB8  B0D8               	btfsc	status,0,c
  8553  002ABA  D003               	goto	l328
  8554  002ABC                     u6600:
  8555  002ABC  FFFF               	dw	65535	; assembler added errata NOP
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;comunicacao.h: 49: intensidadeSinal = ' ';
  8559  002ABE  0E20               	movlw	32
  8560  002AC0  D03B               	goto	L14
  8561  002AC2                     l328:
  8562  002AC2  FFFF               	dw	65535	; assembler added errata NOP
  8563  002AC4                     l6637:
  8564                           
  8565                           ; BSR set to: 0
  8566  002AC4  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8567  002AC6  D011               	goto	l330
  8568  002AC8  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8569  002ACA  E104               	bnz	u6610
  8570  002ACC  0E08               	movlw	8
  8571  002ACE  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8572  002AD0  A0D8               	btfss	status,0,c
  8573  002AD2  D00B               	goto	l330
  8574  002AD4                     u6610:
  8575                           
  8576                           ; BSR set to: 0
  8577  002AD4  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8578  002AD6  D006               	goto	u6620
  8579  002AD8  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8580  002ADA  E108               	bnz	l6643
  8581  002ADC  0E0C               	movlw	12
  8582  002ADE  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8583  002AE0  B0D8               	btfsc	status,0,c
  8584  002AE2  D003               	goto	l330
  8585  002AE4                     u6620:
  8586  002AE4  FFFF               	dw	65535	; assembler added errata NOP
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;comunicacao.h: 51: intensidadeSinal = 0x02;
  8590  002AE6  0E02               	movlw	2
  8591  002AE8  D027               	goto	L14
  8592  002AEA                     l330:
  8593  002AEA  FFFF               	dw	65535	; assembler added errata NOP
  8594  002AEC                     l6643:
  8595                           
  8596                           ; BSR set to: 0
  8597  002AEC  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8598  002AEE  D011               	goto	l332
  8599  002AF0  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8600  002AF2  E104               	bnz	u6630
  8601  002AF4  0E0C               	movlw	12
  8602  002AF6  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8603  002AF8  A0D8               	btfss	status,0,c
  8604  002AFA  D00B               	goto	l332
  8605  002AFC                     u6630:
  8606                           
  8607                           ; BSR set to: 0
  8608  002AFC  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8609  002AFE  D006               	goto	u6640
  8610  002B00  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8611  002B02  E108               	bnz	l6649
  8612  002B04  0E11               	movlw	17
  8613  002B06  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8614  002B08  B0D8               	btfsc	status,0,c
  8615  002B0A  D003               	goto	l332
  8616  002B0C                     u6640:
  8617  002B0C  FFFF               	dw	65535	; assembler added errata NOP
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;comunicacao.h: 53: intensidadeSinal = 0x03;
  8621  002B0E  0E03               	movlw	3
  8622  002B10  D013               	goto	L14
  8623  002B12                     l332:
  8624  002B12  FFFF               	dw	65535	; assembler added errata NOP
  8625  002B14                     l6649:
  8626                           
  8627                           ; BSR set to: 0
  8628  002B14  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8629  002B16  D012               	goto	l334
  8630  002B18  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8631  002B1A  E104               	bnz	u6650
  8632  002B1C  0E11               	movlw	17
  8633  002B1E  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8634  002B20  A0D8               	btfss	status,0,c
  8635  002B22  D00C               	goto	l334
  8636  002B24                     u6650:
  8637                           
  8638                           ; BSR set to: 0
  8639  002B24  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8640  002B26  D006               	goto	u6660
  8641  002B28  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8642  002B2A  E109               	bnz	l329
  8643  002B2C  0E1F               	movlw	31
  8644  002B2E  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8645  002B30  B0D8               	btfsc	status,0,c
  8646  002B32  D004               	goto	l334
  8647  002B34                     u6660:
  8648  002B34  FFFF               	dw	65535	; assembler added errata NOP
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;comunicacao.h: 55: intensidadeSinal = 0x04;
  8652  002B36  0E04               	movlw	4
  8653  002B38                     L14:
  8654  002B38  FFFF               	dw	65535	; assembler added errata NOP
  8655  002B3A  6FFF               	movwf	_intensidadeSinal& (0+255),b
  8656  002B3C                     l334:
  8657  002B3C  FFFF               	dw	65535	; assembler added errata NOP
  8658  002B3E                     l329:
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;comunicacao.h: 56: }
  8662                           ;comunicacao.h: 57: etapaComunicacao = 0;
  8663  002B3E  0E00               	movlw	0
  8664  002B40  6E63               	movwf	_etapaComunicacao+1,c
  8665  002B42  0E00               	movlw	0
  8666  002B44  6E62               	movwf	_etapaComunicacao,c
  8667                           
  8668                           ;comunicacao.h: 58: timerVerificarSinal = 5;
  8669  002B46  0E05               	movlw	5
  8670  002B48  6E7E               	movwf	_timerVerificarSinal,c
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;comunicacao.h: 59: }
  8674                           ;comunicacao.h: 60: break;
  8675  002B4A  D018               	goto	l320
  8676  002B4C  FFFF               	dw	65535	; assembler added errata NOP
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;comunicacao.h: 62: etapaComunicacao = 0;
  8680                           
  8681                           ; BSR set to: 0
  8682  002B4E  0E00               	movlw	0
  8683  002B50  6E63               	movwf	_etapaComunicacao+1,c
  8684  002B52  0E00               	movlw	0
  8685  002B54  6E62               	movwf	_etapaComunicacao,c
  8686                           
  8687                           ;comunicacao.h: 63: }
  8688  002B56  D012               	goto	l320
  8689  002B58                     l318:
  8690  002B58  FFFF               	dw	65535	; assembler added errata NOP
  8691                           
  8692                           ; BSR set to: 0
  8693  002B5A  C062  F0CC         	movff	_etapaComunicacao,??_getSinalSIM800L
  8694  002B5E  C063  F0CD         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  8695                           
  8696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8697                           ; Switch size 1, requested type "space"
  8698                           ; Number of cases is 1, Range of values is 0 to 0
  8699                           ; switch strategies available:
  8700                           ; Name         Instructions Cycles
  8701                           ; simple_byte            4     3 (average)
  8702                           ;	Chosen strategy is simple_byte
  8703  002B62  0100               	movlb	0	; () banked
  8704  002B64  51CD               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  8705  002B66  0A00               	xorlw	0	; case 0
  8706  002B68  A4D8               	btfss	status,2,c
  8707  002B6A  D7F0               	goto	l335
  8708                           
  8709                           ; BSR set to: 0
  8710                           ; Switch size 1, requested type "space"
  8711                           ; Number of cases is 2, Range of values is 0 to 1
  8712                           ; switch strategies available:
  8713                           ; Name         Instructions Cycles
  8714                           ; simple_byte            7     4 (average)
  8715                           ;	Chosen strategy is simple_byte
  8716  002B6C  51CC               	movf	??_getSinalSIM800L& (0+255),w,b
  8717  002B6E  0A00               	xorlw	0	; case 0
  8718  002B70  B4D8               	btfsc	status,2,c
  8719  002B72  D729               	goto	l319
  8720  002B74  0A01               	xorlw	1	; case 1
  8721  002B76  B4D8               	btfsc	status,2,c
  8722  002B78  D73A               	goto	l321
  8723  002B7A  D7E8               	goto	l335
  8724  002B7C                     l320:
  8725  002B7C  FFFF               	dw	65535	; assembler added errata NOP
  8726                           
  8727                           ; BSR set to: 0
  8728  002B7E  0012               	return		;funcret
  8729  002B80  FFFF               	dw	65535	; errata NOP
  8730  002B82                     __end_of_getSinalSIM800L:
  8731                           	opt stack 0
  8732                           tblptru	equ	0xFF8
  8733                           tblptrh	equ	0xFF7
  8734                           tblptrl	equ	0xFF6
  8735                           tablat	equ	0xFF5
  8736                           prodh	equ	0xFF4
  8737                           prodl	equ	0xFF3
  8738                           postinc0	equ	0xFEE
  8739                           wreg	equ	0xFE8
  8740                           postdec1	equ	0xFE5
  8741                           fsr1l	equ	0xFE1
  8742                           indf2	equ	0xFDF
  8743                           postinc2	equ	0xFDE
  8744                           postdec2	equ	0xFDD
  8745                           fsr2h	equ	0xFDA
  8746                           fsr2l	equ	0xFD9
  8747                           status	equ	0xFD8
  8748                           
  8749 ;; *************** function _getSerial *****************
  8750 ;; Defined at:
  8751 ;;		line 40 in file "serial.h"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  str             2   59[BANK0 ] PTR unsigned char 
  8754 ;;		 -> STR_7(7), 
  8755 ;;  end             1   61[BANK0 ] unsigned char 
  8756 ;; Auto vars:     Size  Location     Type
  8757 ;;  i               1   66[BANK0 ] unsigned char 
  8758 ;;  ret             2   67[BANK0 ] PTR unsigned char 
  8759 ;;		 -> NULL(0), bufferSerial(60), 
  8760 ;;  length          2   64[BANK0 ] unsigned int 
  8761 ;; Return value:  Size  Location     Type
  8762 ;;                  2   59[BANK0 ] PTR unsigned char 
  8763 ;; Registers used:
  8764 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8770 ;;      Params:         0       3       0       0       0       0       0
  8771 ;;      Locals:         0       5       0       0       0       0       0
  8772 ;;      Temps:          0       2       0       0       0       0       0
  8773 ;;      Totals:         0      10       0       0       0       0       0
  8774 ;;Total ram usage:       10 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; Hardware stack levels required when called:    9
  8777 ;; This function calls:
  8778 ;;		_memset
  8779 ;;		_sprintf
  8780 ;;		_strlen
  8781 ;;		_strstr
  8782 ;; This function is called by:
  8783 ;;		_getSinalSIM800L
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           	psect	text22
  8788  003320                     __ptext22:
  8789                           	opt stack 0
  8790  003320                     _getSerial:
  8791                           	opt stack 0
  8792  003320  FFFF               	dw	65535	; assembler added errata NOP
  8793                           
  8794                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  8795                           
  8796                           ;incstack = 0
  8797  003322  0EB3               	movlw	low _bufferAUX
  8798  003324  0100               	movlb	0	; () banked
  8799  003326  6F80               	movwf	memset@p1& (0+255),b
  8800  003328  0E01               	movlw	high _bufferAUX
  8801  00332A  6F81               	movwf	(memset@p1+1)& (0+255),b
  8802  00332C  0E00               	movlw	0
  8803  00332E  6F83               	movwf	(memset@c+1)& (0+255),b
  8804  003330  0E00               	movlw	0
  8805  003332  6F82               	movwf	memset@c& (0+255),b
  8806  003334  0E00               	movlw	0
  8807  003336  6F85               	movwf	(memset@n+1)& (0+255),b
  8808  003338  0E14               	movlw	20
  8809  00333A  6F84               	movwf	memset@n& (0+255),b
  8810  00333C  EC94  F037         	call	_memset	;wreg free
  8811                           
  8812                           ;serial.h: 42: unsigned int length = strlen(str);
  8813  003340  C0BB  F080         	movff	getSerial@str,strlen@s
  8814  003344  C0BC  F081         	movff	getSerial@str+1,strlen@s+1
  8815  003348  EC1B  F03A         	call	_strlen	;wreg free
  8816  00334C  C080  F0C0         	movff	?_strlen,getSerial@length
  8817  003350  C081  F0C1         	movff	?_strlen+1,getSerial@length+1
  8818                           
  8819                           ;serial.h: 43: char* ret;
  8820                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  8821  003354  0E23               	movlw	low _bufferSerial
  8822  003356  0100               	movlb	0	; () banked
  8823  003358  6F8F               	movwf	strstr@s1& (0+255),b
  8824  00335A  0E01               	movlw	high _bufferSerial
  8825  00335C  6F90               	movwf	(strstr@s1+1)& (0+255),b
  8826  00335E  C0BB  F091         	movff	getSerial@str,strstr@s2
  8827  003362  C0BC  F092         	movff	getSerial@str+1,strstr@s2+1
  8828  003366  EC83  F01F         	call	_strstr	;wreg free
  8829  00336A  C08F  F0C3         	movff	?_strstr,getSerial@ret
  8830  00336E  C090  F0C4         	movff	?_strstr+1,getSerial@ret+1
  8831                           
  8832                           ;serial.h: 45: if (ret) {
  8833  003372  0100               	movlb	0	; () banked
  8834  003374  51C3               	movf	getSerial@ret& (0+255),w,b
  8835  003376  11C4               	iorwf	(getSerial@ret+1)& (0+255),w,b
  8836  003378  B4D8               	btfsc	status,2,c
  8837  00337A  D058               	goto	u5830
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;serial.h: 46: unsigned char i = 0;
  8841  00337C  0E00               	movlw	0
  8842  00337E  6FC2               	movwf	getSerial@i& (0+255),b
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  8846  003380  C0C0  F0C2         	movff	getSerial@length,getSerial@i
  8847  003384  D042               	goto	l285
  8848  003386  FFFF               	dw	65535	; assembler added errata NOP
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;serial.h: 48: if (ret[i] == end) {
  8852                           
  8853                           ; BSR set to: 0
  8854  003388  51C2               	movf	getSerial@i& (0+255),w,b
  8855  00338A  0D01               	mullw	1
  8856  00338C  50F3               	movf	prodl,w,c
  8857  00338E  25C3               	addwf	getSerial@ret& (0+255),w,b
  8858  003390  6ED9               	movwf	fsr2l,c
  8859  003392  50F4               	movf	prodh,w,c
  8860  003394  21C4               	addwfc	(getSerial@ret+1)& (0+255),w,b
  8861  003396  6EDA               	movwf	fsr2h,c
  8862  003398  51BD               	movf	getSerial@end& (0+255),w,b
  8863  00339A  18DE               	xorwf	postinc2,w,c
  8864  00339C  A4D8               	btfss	status,2,c
  8865  00339E  D017               	goto	l287
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  8869  0033A0  0EB3               	movlw	low _bufferAUX
  8870  0033A2  6FA1               	movwf	sprintf@wh& (0+255),b
  8871  0033A4  0E01               	movlw	high _bufferAUX
  8872  0033A6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8873  0033A8  0EE7               	movlw	low STR_1
  8874  0033AA  6FA3               	movwf	sprintf@f& (0+255),b
  8875  0033AC  0E7F               	movlw	high STR_1
  8876  0033AE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8877  0033B0  0EB3               	movlw	low _bufferAUX
  8878  0033B2  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8879  0033B4  0E01               	movlw	high _bufferAUX
  8880  0033B6  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8881  0033B8  0E00               	movlw	0
  8882  0033BA  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  8883  0033BC  0E00               	movlw	0
  8884  0033BE  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  8885  0033C0  EC29  F039         	call	_sprintf	;wreg free
  8886                           
  8887                           ;serial.h: 50: return bufferAUX;
  8888  0033C4  0EB3               	movlw	low _bufferAUX
  8889  0033C6  0100               	movlb	0	; () banked
  8890  0033C8  6FBB               	movwf	?_getSerial& (0+255),b
  8891  0033CA  0E01               	movlw	high _bufferAUX
  8892  0033CC  D033               	goto	L15
  8893  0033CE                     l287:
  8894  0033CE  FFFF               	dw	65535	; assembler added errata NOP
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;serial.h: 51: }
  8898                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  8899                           
  8900                           ; BSR set to: 0
  8901  0033D0  0EB3               	movlw	low _bufferAUX
  8902  0033D2  6FA1               	movwf	sprintf@wh& (0+255),b
  8903  0033D4  0E01               	movlw	high _bufferAUX
  8904  0033D6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8905  0033D8  0EE7               	movlw	low STR_1
  8906  0033DA  6FA3               	movwf	sprintf@f& (0+255),b
  8907  0033DC  0E7F               	movlw	high STR_1
  8908  0033DE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8909  0033E0  0EB3               	movlw	low _bufferAUX
  8910  0033E2  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8911  0033E4  0E01               	movlw	high _bufferAUX
  8912  0033E6  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8913  0033E8  51C2               	movf	getSerial@i& (0+255),w,b
  8914  0033EA  0D01               	mullw	1
  8915  0033EC  50F3               	movf	prodl,w,c
  8916  0033EE  25C3               	addwf	getSerial@ret& (0+255),w,b
  8917  0033F0  6ED9               	movwf	fsr2l,c
  8918  0033F2  50F4               	movf	prodh,w,c
  8919  0033F4  21C4               	addwfc	(getSerial@ret+1)& (0+255),w,b
  8920  0033F6  6EDA               	movwf	fsr2h,c
  8921  0033F8  50DF               	movf	indf2,w,c
  8922  0033FA  6FBE               	movwf	??_getSerial& (0+255),b
  8923  0033FC  51BE               	movf	??_getSerial& (0+255),w,b
  8924  0033FE  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  8925  003400  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  8926  003402  EC29  F039         	call	_sprintf	;wreg free
  8927  003406  0100               	movlb	0	; () banked
  8928  003408  2BC2               	incf	getSerial@i& (0+255),f,b
  8929  00340A                     l285:
  8930  00340A  FFFF               	dw	65535	; assembler added errata NOP
  8931                           
  8932                           ; BSR set to: 0
  8933                           
  8934                           ; BSR set to: 0
  8935  00340C  C0C3  F080         	movff	getSerial@ret,strlen@s
  8936  003410  C0C4  F081         	movff	getSerial@ret+1,strlen@s+1
  8937  003414  EC1B  F03A         	call	_strlen	;wreg free
  8938  003418  0100               	movlb	0	; () banked
  8939  00341A  51C2               	movf	getSerial@i& (0+255),w,b
  8940  00341C  6FBE               	movwf	??_getSerial& (0+255),b
  8941  00341E  6BBF               	clrf	(??_getSerial+1)& (0+255),b
  8942  003420  5180               	movf	?_strlen& (0+255),w,b
  8943  003422  5DBE               	subwf	??_getSerial& (0+255),w,b
  8944  003424  5181               	movf	(?_strlen+1)& (0+255),w,b
  8945  003426  59BF               	subwfb	(??_getSerial+1)& (0+255),w,b
  8946  003428  A0D8               	btfss	status,0,c
  8947  00342A  D7AD               	goto	l286
  8948  00342C                     u5830:
  8949  00342C  FFFF               	dw	65535	; assembler added errata NOP
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;serial.h: 53: }
  8953                           ;serial.h: 54: }
  8954                           ;serial.h: 55: return 0;
  8955                           
  8956                           ; BSR set to: 0
  8957                           
  8958                           ; BSR set to: 0
  8959  00342E  0E00               	movlw	0
  8960  003430  6FBB               	movwf	?_getSerial& (0+255),b
  8961  003432  0E00               	movlw	0
  8962  003434                     L15:
  8963  003434  FFFF               	dw	65535	; assembler added errata NOP
  8964  003436  6FBC               	movwf	(?_getSerial+1)& (0+255),b
  8965                           
  8966                           ; BSR set to: 0
  8967                           
  8968                           ; BSR set to: 0
  8969  003438  0012               	return		;funcret
  8970  00343A  FFFF               	dw	65535	; errata NOP
  8971  00343C                     __end_of_getSerial:
  8972                           	opt stack 0
  8973                           tblptru	equ	0xFF8
  8974                           tblptrh	equ	0xFF7
  8975                           tblptrl	equ	0xFF6
  8976                           tablat	equ	0xFF5
  8977                           prodh	equ	0xFF4
  8978                           prodl	equ	0xFF3
  8979                           postinc0	equ	0xFEE
  8980                           wreg	equ	0xFE8
  8981                           postdec1	equ	0xFE5
  8982                           fsr1l	equ	0xFE1
  8983                           indf2	equ	0xFDF
  8984                           postinc2	equ	0xFDE
  8985                           postdec2	equ	0xFDD
  8986                           fsr2h	equ	0xFDA
  8987                           fsr2l	equ	0xFD9
  8988                           status	equ	0xFD8
  8989                           
  8990 ;; *************** function _atoi *****************
  8991 ;; Defined at:
  8992 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;  s               2   69[BANK0 ] PTR const unsigned char 
  8995 ;;		 -> bufferAUX(20), NULL(0), 
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;  a               2   74[BANK0 ] int 
  8998 ;;  sign            1   73[BANK0 ] unsigned char 
  8999 ;; Return value:  Size  Location     Type
  9000 ;;                  2   69[BANK0 ] int 
  9001 ;; Registers used:
  9002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9008 ;;      Params:         0       2       0       0       0       0       0
  9009 ;;      Locals:         0       3       0       0       0       0       0
  9010 ;;      Temps:          0       2       0       0       0       0       0
  9011 ;;      Totals:         0       7       0       0       0       0       0
  9012 ;;Total ram usage:        7 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    7
  9015 ;; This function calls:
  9016 ;;		___wmul
  9017 ;;		_isdigit
  9018 ;; This function is called by:
  9019 ;;		_getSinalSIM800L
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           	psect	text23
  9024  003750                     __ptext23:
  9025                           	opt stack 0
  9026  003750                     _atoi:
  9027                           	opt stack 0
  9028  003750  FFFF               	dw	65535	; assembler added errata NOP
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;incstack = 0
  9032  003752  D004               	goto	l1345
  9033  003754  FFFF               	dw	65535	; assembler added errata NOP
  9034  003756  0100               	movlb	0	; () banked
  9035  003758  4BC5               	infsnz	atoi@s& (0+255),f,b
  9036  00375A  2BC6               	incf	(atoi@s+1)& (0+255),f,b
  9037  00375C                     l1345:
  9038  00375C  FFFF               	dw	65535	; assembler added errata NOP
  9039                           
  9040                           ; BSR set to: 0
  9041  00375E  C0C5  FFD9         	movff	atoi@s,fsr2l
  9042  003762  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9043  003766  0E20               	movlw	32
  9044  003768  18DE               	xorwf	postinc2,w,c
  9045  00376A  B4D8               	btfsc	status,2,c
  9046  00376C  D7F3               	goto	l1346
  9047  00376E  C0C5  FFD9         	movff	atoi@s,fsr2l
  9048  003772  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9049  003776  0E09               	movlw	9
  9050  003778  18DE               	xorwf	postinc2,w,c
  9051  00377A  B4D8               	btfsc	status,2,c
  9052  00377C  D7EB               	goto	l1346
  9053  00377E  0E00               	movlw	0
  9054  003780  0100               	movlb	0	; () banked
  9055  003782  6FCB               	movwf	(atoi@a+1)& (0+255),b
  9056  003784  0E00               	movlw	0
  9057  003786  6FCA               	movwf	atoi@a& (0+255),b
  9058  003788  0E00               	movlw	0
  9059  00378A  6FC9               	movwf	atoi@sign& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062  00378C  C0C5  FFD9         	movff	atoi@s,fsr2l
  9063  003790  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9064  003794  0E2D               	movlw	45
  9065  003796  18DE               	xorwf	postinc2,w,c
  9066  003798  A4D8               	btfss	status,2,c
  9067  00379A  D002               	goto	l1348
  9068                           
  9069                           ; BSR set to: 0
  9070  00379C  2BC9               	incf	atoi@sign& (0+255),f,b
  9071  00379E  D028               	goto	l5945
  9072  0037A0                     l1348:
  9073  0037A0  FFFF               	dw	65535	; assembler added errata NOP
  9074                           
  9075                           ; BSR set to: 0
  9076                           
  9077                           ; BSR set to: 0
  9078  0037A2  C0C5  FFD9         	movff	atoi@s,fsr2l
  9079  0037A6  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9080  0037AA  0E2B               	movlw	43
  9081  0037AC  18DE               	xorwf	postinc2,w,c
  9082  0037AE  A4D8               	btfss	status,2,c
  9083  0037B0  D022               	goto	l1351
  9084  0037B2  D01E               	goto	l5945
  9085  0037B4  FFFF               	dw	65535	; assembler added errata NOP
  9086                           
  9087                           ; BSR set to: 0
  9088  0037B6  C0CA  F080         	movff	atoi@a,___wmul@multiplier
  9089  0037BA  C0CB  F081         	movff	atoi@a+1,___wmul@multiplier+1
  9090  0037BE  0E00               	movlw	0
  9091  0037C0  0100               	movlb	0	; () banked
  9092  0037C2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9093  0037C4  0E0A               	movlw	10
  9094  0037C6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  9095  0037C8  EC8F  F036         	call	___wmul	;wreg free
  9096  0037CC  C0C5  FFD9         	movff	atoi@s,fsr2l
  9097  0037D0  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9098  0037D4  50DF               	movf	indf2,w,c
  9099  0037D6  0100               	movlb	0	; () banked
  9100  0037D8  6FC7               	movwf	??_atoi& (0+255),b
  9101  0037DA  6BC8               	clrf	(??_atoi+1)& (0+255),b
  9102  0037DC  5180               	movf	?___wmul& (0+255),w,b
  9103  0037DE  27C7               	addwf	??_atoi& (0+255),f,b
  9104  0037E0  5181               	movf	(?___wmul+1)& (0+255),w,b
  9105  0037E2  23C8               	addwfc	(??_atoi+1)& (0+255),f,b
  9106  0037E4  0ED0               	movlw	208
  9107  0037E6  25C7               	addwf	??_atoi& (0+255),w,b
  9108  0037E8  6FCA               	movwf	atoi@a& (0+255),b
  9109  0037EA  0EFF               	movlw	255
  9110  0037EC  21C8               	addwfc	(??_atoi+1)& (0+255),w,b
  9111  0037EE  6FCB               	movwf	(atoi@a+1)& (0+255),b
  9112  0037F0                     l5945:
  9113  0037F0  FFFF               	dw	65535	; assembler added errata NOP
  9114                           
  9115                           ; BSR set to: 0
  9116  0037F2  4BC5               	infsnz	atoi@s& (0+255),f,b
  9117  0037F4  2BC6               	incf	(atoi@s+1)& (0+255),f,b
  9118  0037F6                     l1351:
  9119  0037F6  FFFF               	dw	65535	; assembler added errata NOP
  9120                           
  9121                           ; BSR set to: 0
  9122                           
  9123                           ; BSR set to: 0
  9124  0037F8  C0C5  FFD9         	movff	atoi@s,fsr2l
  9125  0037FC  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9126  003800  50DF               	movf	indf2,w,c
  9127  003802  EC65  F036         	call	_isdigit
  9128  003806  B0D8               	btfsc	status,0,c
  9129  003808  D7D5               	goto	l1352
  9130  00380A  0100               	movlb	0	; () banked
  9131  00380C  51C9               	movf	atoi@sign& (0+255),w,b
  9132  00380E  B4D8               	btfsc	status,2,c
  9133  003810  D00D               	goto	l1354
  9134                           
  9135                           ; BSR set to: 0
  9136  003812  C0CA  F0C7         	movff	atoi@a,??_atoi
  9137  003816  C0CB  F0C8         	movff	atoi@a+1,??_atoi+1
  9138  00381A  1FC7               	comf	??_atoi& (0+255),f,b
  9139  00381C  1FC8               	comf	(??_atoi+1)& (0+255),f,b
  9140  00381E  4BC7               	infsnz	??_atoi& (0+255),f,b
  9141  003820  2BC8               	incf	(??_atoi+1)& (0+255),f,b
  9142  003822  C0C7  F0C5         	movff	??_atoi,?_atoi
  9143  003826  C0C8  F0C6         	movff	??_atoi+1,?_atoi+1
  9144  00382A  D005               	goto	l1355
  9145  00382C                     l1354:
  9146  00382C  FFFF               	dw	65535	; assembler added errata NOP
  9147                           
  9148                           ; BSR set to: 0
  9149  00382E  C0CA  F0C5         	movff	atoi@a,?_atoi
  9150  003832  C0CB  F0C6         	movff	atoi@a+1,?_atoi+1
  9151  003836                     l1355:
  9152  003836  FFFF               	dw	65535	; assembler added errata NOP
  9153                           
  9154                           ; BSR set to: 0
  9155  003838  0012               	return		;funcret
  9156  00383A  FFFF               	dw	65535	; errata NOP
  9157  00383C                     __end_of_atoi:
  9158                           	opt stack 0
  9159                           tblptru	equ	0xFF8
  9160                           tblptrh	equ	0xFF7
  9161                           tblptrl	equ	0xFF6
  9162                           tablat	equ	0xFF5
  9163                           prodh	equ	0xFF4
  9164                           prodl	equ	0xFF3
  9165                           postinc0	equ	0xFEE
  9166                           wreg	equ	0xFE8
  9167                           postdec1	equ	0xFE5
  9168                           fsr1l	equ	0xFE1
  9169                           indf2	equ	0xFDF
  9170                           postinc2	equ	0xFDE
  9171                           postdec2	equ	0xFDD
  9172                           fsr2h	equ	0xFDA
  9173                           fsr2l	equ	0xFD9
  9174                           status	equ	0xFD8
  9175                           
  9176 ;; *************** function _getDS1307TimeDate *****************
  9177 ;; Defined at:
  9178 ;;		line 52 in file "ds1307.h"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  9181 ;;		 -> rtc(7), 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;		None
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      void 
  9186 ;; Registers used:
  9187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9193 ;;      Params:         0       2       0       0       0       0       0
  9194 ;;      Locals:         0       0       0       0       0       0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0
  9196 ;;      Totals:         0       2       0       0       0       0       0
  9197 ;;Total ram usage:        2 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    8
  9200 ;; This function calls:
  9201 ;;		_BCDtoDEC
  9202 ;;		_I2C_Read
  9203 ;;		_I2C_Restart
  9204 ;;		_I2C_Start
  9205 ;;		_I2C_Stop
  9206 ;;		_I2C_Write
  9207 ;; This function is called by:
  9208 ;;		_main
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           	psect	text24
  9213  002E7C                     __ptext24:
  9214                           	opt stack 0
  9215  002E7C                     _getDS1307TimeDate:
  9216                           	opt stack 0
  9217  002E7C  FFFF               	dw	65535	; assembler added errata NOP
  9218                           
  9219                           ;ds1307.h: 54: I2C_Start();
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;incstack = 0
  9223  002E7E  ECB2  F035         	call	_I2C_Start	;wreg free
  9224                           
  9225                           ;ds1307.h: 55: I2C_Write(0xD0);
  9226  002E82  0E00               	movlw	0
  9227  002E84  0100               	movlb	0	; () banked
  9228  002E86  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  9229  002E88  0ED0               	movlw	208
  9230  002E8A  6F8A               	movwf	I2C_Write@d& (0+255),b
  9231  002E8C  ECCB  F035         	call	_I2C_Write	;wreg free
  9232                           
  9233                           ;ds1307.h: 56: I2C_Write(0x00);
  9234  002E90  0E00               	movlw	0
  9235  002E92  0100               	movlb	0	; () banked
  9236  002E94  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  9237  002E96  0E00               	movlw	0
  9238  002E98  6F8A               	movwf	I2C_Write@d& (0+255),b
  9239  002E9A  ECCB  F035         	call	_I2C_Write	;wreg free
  9240                           
  9241                           ;ds1307.h: 57: I2C_Restart();
  9242  002E9E  ECBE  F035         	call	_I2C_Restart	;wreg free
  9243                           
  9244                           ;ds1307.h: 58: I2C_Write(0xD1);
  9245  002EA2  0E00               	movlw	0
  9246  002EA4  0100               	movlb	0	; () banked
  9247  002EA6  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  9248  002EA8  0ED1               	movlw	209
  9249  002EAA  6F8A               	movwf	I2C_Write@d& (0+255),b
  9250  002EAC  ECCB  F035         	call	_I2C_Write	;wreg free
  9251                           
  9252                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  9253  002EB0  0100               	movlb	0	; () banked
  9254  002EB2  EE20 F001          	lfsr	2,1
  9255  002EB6  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9256  002EB8  26D9               	addwf	fsr2l,f,c
  9257  002EBA  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9258  002EBC  22DA               	addwfc	fsr2h,f,c
  9259  002EBE  0E00               	movlw	0
  9260  002EC0  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9261  002EC2  0E01               	movlw	1
  9262  002EC4  6F81               	movwf	I2C_Read@a& (0+255),b
  9263  002EC6  ECB1  F037         	call	_I2C_Read	;wreg free
  9264  002ECA  0100               	movlb	0	; () banked
  9265  002ECC  5181               	movf	?_I2C_Read& (0+255),w,b
  9266  002ECE  EC10  F036         	call	_BCDtoDEC
  9267  002ED2  6EDF               	movwf	indf2,c
  9268                           
  9269                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  9270  002ED4  0100               	movlb	0	; () banked
  9271  002ED6  EE20 F002          	lfsr	2,2
  9272  002EDA  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9273  002EDC  26D9               	addwf	fsr2l,f,c
  9274  002EDE  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9275  002EE0  22DA               	addwfc	fsr2h,f,c
  9276  002EE2  0E00               	movlw	0
  9277  002EE4  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9278  002EE6  0E01               	movlw	1
  9279  002EE8  6F81               	movwf	I2C_Read@a& (0+255),b
  9280  002EEA  ECB1  F037         	call	_I2C_Read	;wreg free
  9281  002EEE  0100               	movlb	0	; () banked
  9282  002EF0  5181               	movf	?_I2C_Read& (0+255),w,b
  9283  002EF2  EC10  F036         	call	_BCDtoDEC
  9284  002EF6  6EDF               	movwf	indf2,c
  9285                           
  9286                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  9287  002EF8  0100               	movlb	0	; () banked
  9288  002EFA  EE20 F003          	lfsr	2,3
  9289  002EFE  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9290  002F00  26D9               	addwf	fsr2l,f,c
  9291  002F02  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9292  002F04  22DA               	addwfc	fsr2h,f,c
  9293  002F06  0E00               	movlw	0
  9294  002F08  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9295  002F0A  0E01               	movlw	1
  9296  002F0C  6F81               	movwf	I2C_Read@a& (0+255),b
  9297  002F0E  ECB1  F037         	call	_I2C_Read	;wreg free
  9298  002F12  0100               	movlb	0	; () banked
  9299  002F14  5181               	movf	?_I2C_Read& (0+255),w,b
  9300  002F16  EC10  F036         	call	_BCDtoDEC
  9301  002F1A  6EDF               	movwf	indf2,c
  9302                           
  9303                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  9304  002F1C  0E00               	movlw	0
  9305  002F1E  0100               	movlb	0	; () banked
  9306  002F20  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9307  002F22  0E01               	movlw	1
  9308  002F24  6F81               	movwf	I2C_Read@a& (0+255),b
  9309  002F26  ECB1  F037         	call	_I2C_Read	;wreg free
  9310  002F2A  0100               	movlb	0	; () banked
  9311  002F2C  5181               	movf	?_I2C_Read& (0+255),w,b
  9312  002F2E  EC10  F036         	call	_BCDtoDEC
  9313  002F32  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  9314  002F36  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  9315  002F3A  6EDF               	movwf	indf2,c
  9316                           
  9317                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  9318  002F3C  0100               	movlb	0	; () banked
  9319  002F3E  EE20 F004          	lfsr	2,4
  9320  002F42  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9321  002F44  26D9               	addwf	fsr2l,f,c
  9322  002F46  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9323  002F48  22DA               	addwfc	fsr2h,f,c
  9324  002F4A  0E00               	movlw	0
  9325  002F4C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9326  002F4E  0E01               	movlw	1
  9327  002F50  6F81               	movwf	I2C_Read@a& (0+255),b
  9328  002F52  ECB1  F037         	call	_I2C_Read	;wreg free
  9329  002F56  0100               	movlb	0	; () banked
  9330  002F58  5181               	movf	?_I2C_Read& (0+255),w,b
  9331  002F5A  EC10  F036         	call	_BCDtoDEC
  9332  002F5E  6EDF               	movwf	indf2,c
  9333                           
  9334                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  9335  002F60  0100               	movlb	0	; () banked
  9336  002F62  EE20 F005          	lfsr	2,5
  9337  002F66  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9338  002F68  26D9               	addwf	fsr2l,f,c
  9339  002F6A  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9340  002F6C  22DA               	addwfc	fsr2h,f,c
  9341  002F6E  0E00               	movlw	0
  9342  002F70  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9343  002F72  0E01               	movlw	1
  9344  002F74  6F81               	movwf	I2C_Read@a& (0+255),b
  9345  002F76  ECB1  F037         	call	_I2C_Read	;wreg free
  9346  002F7A  0100               	movlb	0	; () banked
  9347  002F7C  5181               	movf	?_I2C_Read& (0+255),w,b
  9348  002F7E  EC10  F036         	call	_BCDtoDEC
  9349  002F82  6EDF               	movwf	indf2,c
  9350                           
  9351                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  9352  002F84  0100               	movlb	0	; () banked
  9353  002F86  EE20 F006          	lfsr	2,6
  9354  002F8A  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9355  002F8C  26D9               	addwf	fsr2l,f,c
  9356  002F8E  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9357  002F90  22DA               	addwfc	fsr2h,f,c
  9358  002F92  0E00               	movlw	0
  9359  002F94  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9360  002F96  0E00               	movlw	0
  9361  002F98  6F81               	movwf	I2C_Read@a& (0+255),b
  9362  002F9A  ECB1  F037         	call	_I2C_Read	;wreg free
  9363  002F9E  0100               	movlb	0	; () banked
  9364  002FA0  5181               	movf	?_I2C_Read& (0+255),w,b
  9365  002FA2  EC10  F036         	call	_BCDtoDEC
  9366  002FA6  6EDF               	movwf	indf2,c
  9367                           
  9368                           ;ds1307.h: 66: I2C_Stop();
  9369  002FA8  ECB8  F035         	call	_I2C_Stop	;wreg free
  9370  002FAC  0012               	return		;funcret
  9371  002FAE  FFFF               	dw	65535	; errata NOP
  9372  002FB0                     __end_of_getDS1307TimeDate:
  9373                           	opt stack 0
  9374                           tblptru	equ	0xFF8
  9375                           tblptrh	equ	0xFF7
  9376                           tblptrl	equ	0xFF6
  9377                           tablat	equ	0xFF5
  9378                           prodh	equ	0xFF4
  9379                           prodl	equ	0xFF3
  9380                           postinc0	equ	0xFEE
  9381                           wreg	equ	0xFE8
  9382                           postdec1	equ	0xFE5
  9383                           fsr1l	equ	0xFE1
  9384                           indf2	equ	0xFDF
  9385                           postinc2	equ	0xFDE
  9386                           postdec2	equ	0xFDD
  9387                           fsr2h	equ	0xFDA
  9388                           fsr2l	equ	0xFD9
  9389                           status	equ	0xFD8
  9390                           
  9391 ;; *************** function _BCDtoDEC *****************
  9392 ;; Defined at:
  9393 ;;		line 33 in file "function.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;  val             1    wreg     unsigned char 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  val             1    0[BANK0 ] unsigned char 
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  1    wreg      unsigned char 
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0, prodl, prodh
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9407 ;;      Params:         0       0       0       0       0       0       0
  9408 ;;      Locals:         0       1       0       0       0       0       0
  9409 ;;      Temps:          0       0       0       0       0       0       0
  9410 ;;      Totals:         0       1       0       0       0       0       0
  9411 ;;Total ram usage:        1 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:    6
  9414 ;; This function calls:
  9415 ;;		Nothing
  9416 ;; This function is called by:
  9417 ;;		_getDS1307TimeDate
  9418 ;;		_getDS1307Time
  9419 ;; This function uses a non-reentrant model
  9420 ;;
  9421                           
  9422                           	psect	text25
  9423  006C20                     __ptext25:
  9424                           	opt stack 0
  9425  006C20                     _BCDtoDEC:
  9426                           	opt stack 0
  9427  006C20  FFFF               	dw	65535	; assembler added errata NOP
  9428                           
  9429                           ;incstack = 0
  9430                           ;BCDtoDEC@val stored from wreg
  9431  006C22  0100               	movlb	0	; () banked
  9432  006C24  6F80               	movwf	BCDtoDEC@val& (0+255),b
  9433                           
  9434                           ;function.c: 34: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  9435  006C26  0100               	movlb	0	; () banked
  9436  006C28  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  9437  006C2A  0B0F               	andlw	15
  9438  006C2C  0B0F               	andlw	15
  9439  006C2E  0D0A               	mullw	10
  9440  006C30  5180               	movf	BCDtoDEC@val& (0+255),w,b
  9441  006C32  0B0F               	andlw	15
  9442  006C34  24F3               	addwf	prodl,w,c
  9443                           
  9444                           ; BSR set to: 0
  9445                           
  9446                           ; BSR set to: 0
  9447  006C36  0012               	return		;funcret
  9448  006C38  FFFF               	dw	65535	; errata NOP
  9449  006C3A                     __end_of_BCDtoDEC:
  9450                           	opt stack 0
  9451                           tblptru	equ	0xFF8
  9452                           tblptrh	equ	0xFF7
  9453                           tblptrl	equ	0xFF6
  9454                           tablat	equ	0xFF5
  9455                           prodh	equ	0xFF4
  9456                           prodl	equ	0xFF3
  9457                           postinc0	equ	0xFEE
  9458                           wreg	equ	0xFE8
  9459                           postdec1	equ	0xFE5
  9460                           fsr1l	equ	0xFE1
  9461                           indf2	equ	0xFDF
  9462                           postinc2	equ	0xFDE
  9463                           postdec2	equ	0xFDD
  9464                           fsr2h	equ	0xFDA
  9465                           fsr2l	equ	0xFD9
  9466                           status	equ	0xFD8
  9467                           
  9468 ;; *************** function _dataLoger *****************
  9469 ;; Defined at:
  9470 ;;		line 12 in file "tela_DATALOGER.h"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  logs            1   70[BANK0 ] unsigned char 
  9475 ;; Return value:  Size  Location     Type
  9476 ;;                  1    wreg      void 
  9477 ;; Registers used:
  9478 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9484 ;;      Params:         0       0       0       0       0       0       0
  9485 ;;      Locals:         0       7       0       0       0       0       0
  9486 ;;      Temps:          0       5       0       0       0       0       0
  9487 ;;      Totals:         0      12       0       0       0       0       0
  9488 ;;Total ram usage:       12 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    9
  9491 ;; This function calls:
  9492 ;;		___awdiv
  9493 ;;		_btPress
  9494 ;;		_readEEPROM_ext
  9495 ;;		_sprintf
  9496 ;; This function is called by:
  9497 ;;		_main
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           	psect	text26
  9502  001D34                     __ptext26:
  9503                           	opt stack 0
  9504  001D34                     _dataLoger:
  9505                           	opt stack 0
  9506  001D34  FFFF               	dw	65535	; assembler added errata NOP
  9507                           
  9508                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;incstack = 0
  9512  001D36  0E9E               	movlw	low _line1
  9513  001D38  0100               	movlb	0	; () banked
  9514  001D3A  6FA1               	movwf	sprintf@wh& (0+255),b
  9515  001D3C  0E01               	movlw	high _line1
  9516  001D3E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9517  001D40  0ED0               	movlw	low STR_79
  9518  001D42  6FA3               	movwf	sprintf@f& (0+255),b
  9519  001D44  0E7B               	movlw	high STR_79
  9520  001D46  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9521  001D48  C114  F0A5         	movff	_dtl_dia,?_sprintf+4
  9522  001D4C  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  9523  001D4E  C113  F0A7         	movff	_dtl_mes,?_sprintf+6
  9524  001D52  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  9525  001D54  C112  F0A9         	movff	_dtl_ano,?_sprintf+8
  9526  001D58  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  9527  001D5A  C111  F0AB         	movff	_dtl_hora,?_sprintf+10
  9528  001D5E  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  9529  001D60  C110  F0AD         	movff	_dtl_min,?_sprintf+12
  9530  001D64  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  9531  001D66  EC29  F039         	call	_sprintf	;wreg free
  9532                           
  9533                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  9534  001D6A  0101               	movlb	1	; () banked
  9535  001D6C  050F               	decf	_dtl_jockey& (0+255),w,b
  9536  001D6E  B4D8               	btfsc	status,2,c
  9537  001D70  D005               	goto	l802
  9538                           
  9539                           ; BSR set to: 1
  9540  001D72  0EE2               	movlw	low STR_50
  9541  001D74  0100               	movlb	0	; () banked
  9542  001D76  6FC0               	movwf	_dataLoger$1619& (0+255),b
  9543  001D78  0E7F               	movlw	high STR_50
  9544  001D7A  D005               	goto	L16
  9545  001D7C                     l802:
  9546  001D7C  FFFF               	dw	65535	; assembler added errata NOP
  9547                           
  9548                           ; BSR set to: 0
  9549  001D7E  0EF9               	movlw	low STR_5
  9550  001D80  0100               	movlb	0	; () banked
  9551  001D82  6FC0               	movwf	_dataLoger$1619& (0+255),b
  9552  001D84  0E7F               	movlw	high STR_5
  9553  001D86                     L16:
  9554  001D86  FFFF               	dw	65535	; assembler added errata NOP
  9555  001D88  6FC1               	movwf	(_dataLoger$1619+1)& (0+255),b
  9556                           
  9557                           ; BSR set to: 0
  9558                           
  9559                           ; BSR set to: 0
  9560  001D8A  0E89               	movlw	low _line2
  9561  001D8C  6FA1               	movwf	sprintf@wh& (0+255),b
  9562  001D8E  0E01               	movlw	high _line2
  9563  001D90  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9564  001D92  0E75               	movlw	low STR_80
  9565  001D94  6FA3               	movwf	sprintf@f& (0+255),b
  9566  001D96  0E7F               	movlw	high STR_80
  9567  001D98  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9568  001D9A  C0C0  F0A5         	movff	_dataLoger$1619,?_sprintf+4
  9569  001D9E  C0C1  F0A6         	movff	_dataLoger$1619+1,?_sprintf+5
  9570  001DA2  EC29  F039         	call	_sprintf	;wreg free
  9571                           
  9572                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  9573  001DA6  0E97               	movlw	low (_line2+14)
  9574  001DA8  0100               	movlb	0	; () banked
  9575  001DAA  6FA1               	movwf	sprintf@wh& (0+255),b
  9576  001DAC  0E01               	movlw	high (_line2+14)
  9577  001DAE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9578  001DB0  0E17               	movlw	low STR_83
  9579  001DB2  6FA3               	movwf	sprintf@f& (0+255),b
  9580  001DB4  0E7F               	movlw	high STR_83
  9581  001DB6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9582  001DB8  0E01               	movlw	1
  9583  001DBA  2464               	addwf	_dtl_posi_visualizar,w,c
  9584  001DBC  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  9585  001DBE  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  9586  001DC0  0E00               	movlw	0
  9587  001DC2  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  9588  001DC4  C065  F0A7         	movff	_totalLogs,?_sprintf+6
  9589  001DC8  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  9590  001DCA  EC29  F039         	call	_sprintf	;wreg free
  9591                           
  9592                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  9593  001DCE  0101               	movlb	1	; () banked
  9594  001DD0  050E               	decf	_dtl_principal& (0+255),w,b
  9595  001DD2  B4D8               	btfsc	status,2,c
  9596  001DD4  D005               	goto	l806
  9597                           
  9598                           ; BSR set to: 1
  9599  001DD6  0EE2               	movlw	low STR_50
  9600  001DD8  0100               	movlb	0	; () banked
  9601  001DDA  6FC2               	movwf	_dataLoger$1625& (0+255),b
  9602  001DDC  0E7F               	movlw	high STR_50
  9603  001DDE  D005               	goto	L17
  9604  001DE0                     l806:
  9605  001DE0  FFFF               	dw	65535	; assembler added errata NOP
  9606                           
  9607                           ; BSR set to: 0
  9608  001DE2  0EF9               	movlw	low STR_5
  9609  001DE4  0100               	movlb	0	; () banked
  9610  001DE6  6FC2               	movwf	_dataLoger$1625& (0+255),b
  9611  001DE8  0E7F               	movlw	high STR_5
  9612  001DEA                     L17:
  9613  001DEA  FFFF               	dw	65535	; assembler added errata NOP
  9614  001DEC  6FC3               	movwf	(_dataLoger$1625+1)& (0+255),b
  9615                           
  9616                           ; BSR set to: 0
  9617                           
  9618                           ; BSR set to: 0
  9619  001DEE  0E74               	movlw	low _line3
  9620  001DF0  6FA1               	movwf	sprintf@wh& (0+255),b
  9621  001DF2  0E01               	movlw	high _line3
  9622  001DF4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9623  001DF6  0E77               	movlw	low STR_84
  9624  001DF8  6FA3               	movwf	sprintf@f& (0+255),b
  9625  001DFA  0E7E               	movlw	high STR_84
  9626  001DFC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9627  001DFE  C0C2  F0A5         	movff	_dataLoger$1625,?_sprintf+4
  9628  001E02  C0C3  F0A6         	movff	_dataLoger$1625+1,?_sprintf+5
  9629  001E06  EC29  F039         	call	_sprintf	;wreg free
  9630                           
  9631                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  9632  001E0A  0101               	movlb	1	; () banked
  9633  001E0C  050D               	decf	_dtl_estacionaria& (0+255),w,b
  9634  001E0E  B4D8               	btfsc	status,2,c
  9635  001E10  D005               	goto	l810
  9636                           
  9637                           ; BSR set to: 1
  9638  001E12  0EE2               	movlw	low STR_50
  9639  001E14  0100               	movlb	0	; () banked
  9640  001E16  6FC4               	movwf	_dataLoger$1630& (0+255),b
  9641  001E18  0E7F               	movlw	high STR_50
  9642  001E1A  D005               	goto	L18
  9643  001E1C                     l810:
  9644  001E1C  FFFF               	dw	65535	; assembler added errata NOP
  9645                           
  9646                           ; BSR set to: 0
  9647  001E1E  0EF9               	movlw	low STR_5
  9648  001E20  0100               	movlb	0	; () banked
  9649  001E22  6FC4               	movwf	_dataLoger$1630& (0+255),b
  9650  001E24  0E7F               	movlw	high STR_5
  9651  001E26                     L18:
  9652  001E26  FFFF               	dw	65535	; assembler added errata NOP
  9653  001E28  6FC5               	movwf	(_dataLoger$1630+1)& (0+255),b
  9654                           
  9655                           ; BSR set to: 0
  9656                           
  9657                           ; BSR set to: 0
  9658  001E2A  0E5F               	movlw	low _line4
  9659  001E2C  6FA1               	movwf	sprintf@wh& (0+255),b
  9660  001E2E  0E01               	movlw	high _line4
  9661  001E30  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9662  001E32  0E85               	movlw	low STR_87
  9663  001E34  6FA3               	movwf	sprintf@f& (0+255),b
  9664  001E36  0E7E               	movlw	high STR_87
  9665  001E38  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9666  001E3A  C0C4  F0A5         	movff	_dataLoger$1630,?_sprintf+4
  9667  001E3E  C0C5  F0A6         	movff	_dataLoger$1630+1,?_sprintf+5
  9668  001E42  EC29  F039         	call	_sprintf	;wreg free
  9669                           
  9670                           ;tela_DATALOGER.h: 20: if (dtl_carregar_log == 1) {
  9671  001E46  0101               	movlb	1	; () banked
  9672  001E48  050C               	decf	_dtl_carregar_log& (0+255),w,b
  9673  001E4A  A4D8               	btfss	status,2,c
  9674  001E4C  D05A               	goto	l813
  9675                           
  9676                           ; BSR set to: 1
  9677                           ;tela_DATALOGER.h: 21: char logs = readEEPROM_ext(14);
  9678  001E4E  0E0E               	movlw	14
  9679  001E50  ECC5  F039         	call	_readEEPROM_ext
  9680  001E54  0100               	movlb	0	; () banked
  9681  001E56  6FC6               	movwf	dataLoger@logs& (0+255),b
  9682                           
  9683                           ;tela_DATALOGER.h: 22: totalLogs = (logs - 60) / 8;
  9684  001E58  0EC4               	movlw	196
  9685  001E5A  25C6               	addwf	dataLoger@logs& (0+255),w,b
  9686  001E5C  6F80               	movwf	___awdiv@dividend& (0+255),b
  9687  001E5E  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  9688  001E60  0EFF               	movlw	255
  9689  001E62  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  9690  001E64  0E00               	movlw	0
  9691  001E66  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  9692  001E68  0E08               	movlw	8
  9693  001E6A  6F82               	movwf	___awdiv@divisor& (0+255),b
  9694  001E6C  ECE9  F01E         	call	___awdiv	;wreg free
  9695  001E70  0100               	movlb	0	; () banked
  9696  001E72  5180               	movf	?___awdiv& (0+255),w,b
  9697  001E74  6E65               	movwf	_totalLogs,c
  9698                           
  9699                           ;tela_DATALOGER.h: 24: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  9700  001E76  0EC4               	movlw	196
  9701  001E78  25FA               	addwf	_dtl_posicao& (0+255),w,b
  9702  001E7A  6F80               	movwf	___awdiv@dividend& (0+255),b
  9703  001E7C  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  9704  001E7E  0EFF               	movlw	255
  9705  001E80  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  9706  001E82  0E00               	movlw	0
  9707  001E84  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  9708  001E86  0E08               	movlw	8
  9709  001E88  6F82               	movwf	___awdiv@divisor& (0+255),b
  9710  001E8A  ECE9  F01E         	call	___awdiv	;wreg free
  9711  001E8E  0100               	movlb	0	; () banked
  9712  001E90  5180               	movf	?___awdiv& (0+255),w,b
  9713  001E92  6E64               	movwf	_dtl_posi_visualizar,c
  9714                           
  9715                           ;tela_DATALOGER.h: 26: dtl_dia = readEEPROM_ext(dtl_posicao);
  9716  001E94  51FA               	movf	_dtl_posicao& (0+255),w,b
  9717  001E96  ECC5  F039         	call	_readEEPROM_ext
  9718  001E9A  0101               	movlb	1	; () banked
  9719  001E9C  6F14               	movwf	_dtl_dia& (0+255),b
  9720                           
  9721                           ;tela_DATALOGER.h: 27: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  9722  001E9E  0100               	movlb	0	; () banked
  9723  001EA0  29FA               	incf	_dtl_posicao& (0+255),w,b
  9724  001EA2  ECC5  F039         	call	_readEEPROM_ext
  9725  001EA6  0101               	movlb	1	; () banked
  9726  001EA8  6F13               	movwf	_dtl_mes& (0+255),b
  9727                           
  9728                           ;tela_DATALOGER.h: 28: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  9729  001EAA  0100               	movlb	0	; () banked
  9730  001EAC  51FA               	movf	_dtl_posicao& (0+255),w,b
  9731  001EAE  0F02               	addlw	2
  9732  001EB0  ECC5  F039         	call	_readEEPROM_ext
  9733  001EB4  0101               	movlb	1	; () banked
  9734  001EB6  6F12               	movwf	_dtl_ano& (0+255),b
  9735                           
  9736                           ;tela_DATALOGER.h: 29: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  9737  001EB8  0100               	movlb	0	; () banked
  9738  001EBA  51FA               	movf	_dtl_posicao& (0+255),w,b
  9739  001EBC  0F03               	addlw	3
  9740  001EBE  ECC5  F039         	call	_readEEPROM_ext
  9741  001EC2  0101               	movlb	1	; () banked
  9742  001EC4  6F11               	movwf	_dtl_hora& (0+255),b
  9743                           
  9744                           ;tela_DATALOGER.h: 30: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  9745  001EC6  0100               	movlb	0	; () banked
  9746  001EC8  51FA               	movf	_dtl_posicao& (0+255),w,b
  9747  001ECA  0F04               	addlw	4
  9748  001ECC  ECC5  F039         	call	_readEEPROM_ext
  9749  001ED0  0101               	movlb	1	; () banked
  9750  001ED2  6F10               	movwf	_dtl_min& (0+255),b
  9751                           
  9752                           ;tela_DATALOGER.h: 31: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  9753  001ED4  0100               	movlb	0	; () banked
  9754  001ED6  51FA               	movf	_dtl_posicao& (0+255),w,b
  9755  001ED8  0F05               	addlw	5
  9756  001EDA  ECC5  F039         	call	_readEEPROM_ext
  9757  001EDE  0101               	movlb	1	; () banked
  9758  001EE0  6F0F               	movwf	_dtl_jockey& (0+255),b
  9759                           
  9760                           ;tela_DATALOGER.h: 32: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  9761  001EE2  0100               	movlb	0	; () banked
  9762  001EE4  51FA               	movf	_dtl_posicao& (0+255),w,b
  9763  001EE6  0F06               	addlw	6
  9764  001EE8  ECC5  F039         	call	_readEEPROM_ext
  9765  001EEC  0101               	movlb	1	; () banked
  9766  001EEE  6F0E               	movwf	_dtl_principal& (0+255),b
  9767                           
  9768                           ;tela_DATALOGER.h: 33: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  9769  001EF0  0100               	movlb	0	; () banked
  9770  001EF2  51FA               	movf	_dtl_posicao& (0+255),w,b
  9771  001EF4  0F07               	addlw	7
  9772  001EF6  ECC5  F039         	call	_readEEPROM_ext
  9773  001EFA  0101               	movlb	1	; () banked
  9774  001EFC  6F0D               	movwf	_dtl_estacionaria& (0+255),b
  9775                           
  9776                           ; BSR set to: 1
  9777                           ;tela_DATALOGER.h: 34: dtl_carregar_log = 0;
  9778  001EFE  0E00               	movlw	0
  9779  001F00  6F0C               	movwf	_dtl_carregar_log& (0+255),b
  9780  001F02                     l813:
  9781  001F02  FFFF               	dw	65535	; assembler added errata NOP
  9782                           
  9783                           ; BSR set to: 1
  9784                           ;tela_DATALOGER.h: 35: }
  9785                           ;tela_DATALOGER.h: 37: if (btPress(1)) {
  9786                           
  9787                           ; BSR set to: 1
  9788  001F04  0E01               	movlw	1
  9789  001F06  EC9A  F03B         	call	_btPress
  9790  001F0A  0900               	iorlw	0
  9791  001F0C  B4D8               	btfsc	status,2,c
  9792  001F0E  D006               	goto	l814
  9793                           
  9794                           ;tela_DATALOGER.h: 38: option_posi = 0;
  9795  001F10  0E00               	movlw	0
  9796  001F12  0100               	movlb	0	; () banked
  9797  001F14  6FE3               	movwf	_option_posi& (0+255),b
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;tela_DATALOGER.h: 39: menu_posi = _menu_posi;
  9801  001F16  C0E1  F0E2         	movff	__menu_posi,_menu_posi
  9802                           
  9803                           ;tela_DATALOGER.h: 40: } else if (btPress(2)) {
  9804  001F1A  D032               	goto	l819
  9805  001F1C                     l814:
  9806  001F1C  FFFF               	dw	65535	; assembler added errata NOP
  9807                           
  9808                           ; BSR set to: 0
  9809  001F1E  0E02               	movlw	2
  9810  001F20  EC9A  F03B         	call	_btPress
  9811  001F24  0900               	iorlw	0
  9812  001F26  B4D8               	btfsc	status,2,c
  9813  001F28  D009               	goto	l816
  9814                           
  9815                           ;tela_DATALOGER.h: 41: dtl_posicao -= 8;
  9816  001F2A  0E08               	movlw	8
  9817  001F2C  0100               	movlb	0	; () banked
  9818  001F2E  5FFA               	subwf	_dtl_posicao& (0+255),f,b
  9819                           
  9820                           ;tela_DATALOGER.h: 42: if (dtl_posicao < 60) {
  9821  001F30  0E3C               	movlw	60
  9822  001F32  61FA               	cpfslt	_dtl_posicao& (0+255),b
  9823  001F34  D021               	goto	l7423
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;tela_DATALOGER.h: 43: dtl_posicao = 60;
  9827  001F36  0E3C               	movlw	60
  9828  001F38  6FFA               	movwf	_dtl_posicao& (0+255),b
  9829  001F3A  D01E               	goto	l7423
  9830  001F3C                     l816:
  9831  001F3C  FFFF               	dw	65535	; assembler added errata NOP
  9832                           
  9833                           ; BSR set to: 1
  9834  001F3E  0E03               	movlw	3
  9835  001F40  EC9A  F03B         	call	_btPress
  9836  001F44  0900               	iorlw	0
  9837  001F46  B4D8               	btfsc	status,2,c
  9838  001F48  D01B               	goto	l819
  9839                           
  9840                           ;tela_DATALOGER.h: 47: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  9841  001F4A  5065               	movf	_totalLogs,w,c
  9842  001F4C  0100               	movlb	0	; () banked
  9843  001F4E  6FBB               	movwf	??_dataLoger& (0+255),b
  9844  001F50  6BBC               	clrf	(??_dataLoger+1)& (0+255),b
  9845  001F52  5064               	movf	_dtl_posi_visualizar,w,c
  9846  001F54  6FBD               	movwf	(??_dataLoger+2)& (0+255),b
  9847  001F56  6BBE               	clrf	(??_dataLoger+3)& (0+255),b
  9848  001F58  0E01               	movlw	1
  9849  001F5A  27BD               	addwf	(??_dataLoger+2)& (0+255),f,b
  9850  001F5C  0E00               	movlw	0
  9851  001F5E  23BE               	addwfc	(??_dataLoger+3)& (0+255),f,b
  9852  001F60  51BB               	movf	??_dataLoger& (0+255),w,b
  9853  001F62  5DBD               	subwf	(??_dataLoger+2)& (0+255),w,b
  9854  001F64  51BE               	movf	(??_dataLoger+3)& (0+255),w,b
  9855  001F66  0A80               	xorlw	128
  9856  001F68  6FBF               	movwf	(??_dataLoger+4)& (0+255),b
  9857  001F6A  51BC               	movf	(??_dataLoger+1)& (0+255),w,b
  9858  001F6C  0A80               	xorlw	128
  9859  001F6E  59BF               	subwfb	(??_dataLoger+4)& (0+255),w,b
  9860  001F70  B0D8               	btfsc	status,0,c
  9861  001F72  D006               	goto	l819
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;tela_DATALOGER.h: 49: }
  9865                           ;tela_DATALOGER.h: 50: dtl_posicao += 8;
  9866                           
  9867                           ; BSR set to: 0
  9868                           
  9869                           ; BSR set to: 0
  9870                           ;tela_DATALOGER.h: 48: return;
  9871  001F74  0E08               	movlw	8
  9872  001F76  27FA               	addwf	_dtl_posicao& (0+255),f,b
  9873  001F78                     l7423:
  9874  001F78  FFFF               	dw	65535	; assembler added errata NOP
  9875                           
  9876                           ; BSR set to: 0
  9877                           ;tela_DATALOGER.h: 51: dtl_carregar_log = 1;
  9878  001F7A  0E01               	movlw	1
  9879  001F7C  0101               	movlb	1	; () banked
  9880  001F7E  6F0C               	movwf	_dtl_carregar_log& (0+255),b
  9881  001F80                     l819:
  9882  001F80  FFFF               	dw	65535	; assembler added errata NOP
  9883                           
  9884                           ; BSR set to: 1
  9885                           
  9886                           ; BSR set to: 1
  9887                           
  9888                           ; BSR set to: 1
  9889  001F82  0012               	return		;funcret
  9890  001F84  FFFF               	dw	65535	; errata NOP
  9891  001F86                     __end_of_dataLoger:
  9892                           	opt stack 0
  9893                           tblptru	equ	0xFF8
  9894                           tblptrh	equ	0xFF7
  9895                           tblptrl	equ	0xFF6
  9896                           tablat	equ	0xFF5
  9897                           prodh	equ	0xFF4
  9898                           prodl	equ	0xFF3
  9899                           postinc0	equ	0xFEE
  9900                           wreg	equ	0xFE8
  9901                           postdec1	equ	0xFE5
  9902                           fsr1l	equ	0xFE1
  9903                           indf2	equ	0xFDF
  9904                           postinc2	equ	0xFDE
  9905                           postdec2	equ	0xFDD
  9906                           fsr2h	equ	0xFDA
  9907                           fsr2l	equ	0xFD9
  9908                           status	equ	0xFD8
  9909                           
  9910 ;; *************** function _configurarEstacionaria *****************
  9911 ;; Defined at:
  9912 ;;		line 10 in file "tela_ESTACIONARIA.h"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;		None
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  1    wreg      void 
  9919 ;; Registers used:
  9920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9926 ;;      Params:         0       0       0       0       0       0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0
  9929 ;;      Totals:         0       0       0       0       0       0       0
  9930 ;;Total ram usage:        0 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    9
  9933 ;; This function calls:
  9934 ;;		_blink
  9935 ;;		_btPress
  9936 ;;		_sprintf
  9937 ;;		_writeEEPROM_ext
  9938 ;; This function is called by:
  9939 ;;		_main
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           	psect	text27
  9944  002B82                     __ptext27:
  9945                           	opt stack 0
  9946  002B82                     _configurarEstacionaria:
  9947                           	opt stack 0
  9948  002B82  FFFF               	dw	65535	; assembler added errata NOP
  9949                           
  9950                           ;tela_ESTACIONARIA.h: 12: sprintf(line1, "Configuracao tempo");
  9951                           
  9952                           ;incstack = 0
  9953  002B84  0E9E               	movlw	low _line1
  9954  002B86  0100               	movlb	0	; () banked
  9955  002B88  6FA1               	movwf	sprintf@wh& (0+255),b
  9956  002B8A  0E01               	movlw	high _line1
  9957  002B8C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9958  002B8E  0E0F               	movlw	low STR_100
  9959  002B90  6FA3               	movwf	sprintf@f& (0+255),b
  9960  002B92  0E7D               	movlw	high STR_100
  9961  002B94  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9962  002B96  EC29  F039         	call	_sprintf	;wreg free
  9963                           
  9964                           ;tela_ESTACIONARIA.h: 13: sprintf(line2, "Max. PARTIDA:");
  9965  002B9A  0E89               	movlw	low _line2
  9966  002B9C  0100               	movlb	0	; () banked
  9967  002B9E  6FA1               	movwf	sprintf@wh& (0+255),b
  9968  002BA0  0E01               	movlw	high _line2
  9969  002BA2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9970  002BA4  0E69               	movlw	low STR_101
  9971  002BA6  6FA3               	movwf	sprintf@f& (0+255),b
  9972  002BA8  0E7E               	movlw	high STR_101
  9973  002BAA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9974  002BAC  EC29  F039         	call	_sprintf	;wreg free
  9975                           
  9976                           ;tela_ESTACIONARIA.h: 14: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  9977  002BB0  0E99               	movlw	low (_line2+16)
  9978  002BB2  0100               	movlb	0	; () banked
  9979  002BB4  6FA1               	movwf	sprintf@wh& (0+255),b
  9980  002BB6  0E01               	movlw	high (_line2+16)
  9981  002BB8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9982  002BBA  0EEC               	movlw	low STR_102
  9983  002BBC  6FA3               	movwf	sprintf@f& (0+255),b
  9984  002BBE  0E7F               	movlw	high STR_102
  9985  002BC0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9986  002BC2  C0E8  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  9987  002BC6  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  9988  002BC8  EC29  F039         	call	_sprintf	;wreg free
  9989                           
  9990                           ;tela_ESTACIONARIA.h: 15: sprintf(line3, "Max. TESTE:");
  9991  002BCC  0E74               	movlw	low _line3
  9992  002BCE  0100               	movlb	0	; () banked
  9993  002BD0  6FA1               	movwf	sprintf@wh& (0+255),b
  9994  002BD2  0E01               	movlw	high _line3
  9995  002BD4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9996  002BD6  0EC5               	movlw	low STR_103
  9997  002BD8  6FA3               	movwf	sprintf@f& (0+255),b
  9998  002BDA  0E7E               	movlw	high STR_103
  9999  002BDC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10000  002BDE  EC29  F039         	call	_sprintf	;wreg free
 10001                           
 10002                           ;tela_ESTACIONARIA.h: 16: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
 10003  002BE2  0E84               	movlw	low (_line3+16)
 10004  002BE4  0100               	movlb	0	; () banked
 10005  002BE6  6FA1               	movwf	sprintf@wh& (0+255),b
 10006  002BE8  0E01               	movlw	high (_line3+16)
 10007  002BEA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10008  002BEC  0EEC               	movlw	low STR_102
 10009  002BEE  6FA3               	movwf	sprintf@f& (0+255),b
 10010  002BF0  0E7F               	movlw	high STR_102
 10011  002BF2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10012  002BF4  C069  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
 10013  002BF8  6BA6               	clrf	(?_sprintf+5)& (0+255),b
 10014  002BFA  EC29  F039         	call	_sprintf	;wreg free
 10015                           
 10016                           ;tela_ESTACIONARIA.h: 17: sprintf(line4, "horimetro:%5d min", horimetro);
 10017  002BFE  0E5F               	movlw	low _line4
 10018  002C00  0100               	movlb	0	; () banked
 10019  002C02  6FA1               	movwf	sprintf@wh& (0+255),b
 10020  002C04  0E01               	movlw	high _line4
 10021  002C06  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10022  002C08  0E6B               	movlw	low STR_105
 10023  002C0A  6FA3               	movwf	sprintf@f& (0+255),b
 10024  002C0C  0E7D               	movlw	high STR_105
 10025  002C0E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10026  002C10  C10A  F0A5         	movff	_horimetro,?_sprintf+4
 10027  002C14  C10B  F0A6         	movff	_horimetro+1,?_sprintf+5
 10028  002C18  EC29  F039         	call	_sprintf	;wreg free
 10029                           
 10030                           ;tela_ESTACIONARIA.h: 19: switch (option_posi) {
 10031  002C1C  D05A               	goto	l871
 10032  002C1E  FFFF               	dw	65535	; assembler added errata NOP
 10033                           
 10034                           ;tela_ESTACIONARIA.h: 21: blink(line2, 16, 20);
 10035  002C20  0E89               	movlw	low _line2
 10036  002C22  0100               	movlb	0	; () banked
 10037  002C24  6F80               	movwf	blink@line& (0+255),b
 10038  002C26  0E01               	movlw	high _line2
 10039  002C28  6F81               	movwf	(blink@line+1)& (0+255),b
 10040  002C2A  0E10               	movlw	16
 10041  002C2C  6F82               	movwf	blink@start& (0+255),b
 10042  002C2E  0E14               	movlw	20
 10043  002C30  6F83               	movwf	blink@end& (0+255),b
 10044  002C32  EC45  F038         	call	_blink	;wreg free
 10045                           
 10046                           ;tela_ESTACIONARIA.h: 22: if (btPress(3)) {
 10047  002C36  0E03               	movlw	3
 10048  002C38  EC9A  F03B         	call	_btPress
 10049  002C3C  0900               	iorlw	0
 10050  002C3E  B4D8               	btfsc	status,2,c
 10051  002C40  D002               	goto	l873
 10052                           
 10053                           ;tela_ESTACIONARIA.h: 23: tempo_limite_estacionaria++;
 10054  002C42  0100               	movlb	0	; () banked
 10055  002C44  2BE8               	incf	_tempo_limite_estacionaria& (0+255),f,b
 10056  002C46                     l873:
 10057  002C46  FFFF               	dw	65535	; assembler added errata NOP
 10058                           
 10059                           ;tela_ESTACIONARIA.h: 24: }
 10060                           ;tela_ESTACIONARIA.h: 25: if (btPress(2)) {
 10061                           
 10062                           ; BSR set to: 0
 10063  002C48  0E02               	movlw	2
 10064  002C4A  EC9A  F03B         	call	_btPress
 10065  002C4E  0900               	iorlw	0
 10066  002C50  B4D8               	btfsc	status,2,c
 10067  002C52  D04C               	goto	l875
 10068                           
 10069                           ;tela_ESTACIONARIA.h: 26: tempo_limite_estacionaria--;
 10070  002C54  0100               	movlb	0	; () banked
 10071  002C56  07E8               	decf	_tempo_limite_estacionaria& (0+255),f,b
 10072                           
 10073                           ; BSR set to: 0
 10074                           ;tela_ESTACIONARIA.h: 27: }
 10075                           ;tela_ESTACIONARIA.h: 28: break;
 10076  002C58  D049               	goto	l875
 10077  002C5A  FFFF               	dw	65535	; assembler added errata NOP
 10078                           
 10079                           ; BSR set to: 0
 10080                           ;tela_ESTACIONARIA.h: 30: blink(line3, 16, 20);
 10081                           
 10082                           ; BSR set to: 0
 10083  002C5C  0E74               	movlw	low _line3
 10084  002C5E  6F80               	movwf	blink@line& (0+255),b
 10085  002C60  0E01               	movlw	high _line3
 10086  002C62  6F81               	movwf	(blink@line+1)& (0+255),b
 10087  002C64  0E10               	movlw	16
 10088  002C66  6F82               	movwf	blink@start& (0+255),b
 10089  002C68  0E14               	movlw	20
 10090  002C6A  6F83               	movwf	blink@end& (0+255),b
 10091  002C6C  EC45  F038         	call	_blink	;wreg free
 10092                           
 10093                           ;tela_ESTACIONARIA.h: 31: if (btPress(3)) {
 10094  002C70  0E03               	movlw	3
 10095  002C72  EC9A  F03B         	call	_btPress
 10096  002C76  0900               	iorlw	0
 10097  002C78  A4D8               	btfss	status,2,c
 10098                           
 10099                           ;tela_ESTACIONARIA.h: 32: tempo_limite_teste_estacionaria++;
 10100  002C7A  2A69               	incf	_tempo_limite_teste_estacionaria,f,c
 10101                           
 10102                           ;tela_ESTACIONARIA.h: 33: }
 10103                           ;tela_ESTACIONARIA.h: 34: if (btPress(2)) {
 10104  002C7C  0E02               	movlw	2
 10105  002C7E  EC9A  F03B         	call	_btPress
 10106  002C82  0900               	iorlw	0
 10107  002C84  B4D8               	btfsc	status,2,c
 10108  002C86  D032               	goto	l875
 10109                           
 10110                           ;tela_ESTACIONARIA.h: 35: tempo_limite_teste_estacionaria--;
 10111  002C88  0669               	decf	_tempo_limite_teste_estacionaria,f,c
 10112                           
 10113                           ;tela_ESTACIONARIA.h: 36: }
 10114                           ;tela_ESTACIONARIA.h: 37: break;
 10115  002C8A  D030               	goto	l875
 10116  002C8C  FFFF               	dw	65535	; assembler added errata NOP
 10117                           
 10118                           ;tela_ESTACIONARIA.h: 39: blink(line4, 11, 20);
 10119  002C8E  0E5F               	movlw	low _line4
 10120  002C90  0100               	movlb	0	; () banked
 10121  002C92  6F80               	movwf	blink@line& (0+255),b
 10122  002C94  0E01               	movlw	high _line4
 10123  002C96  6F81               	movwf	(blink@line+1)& (0+255),b
 10124  002C98  0E0B               	movlw	11
 10125  002C9A  6F82               	movwf	blink@start& (0+255),b
 10126  002C9C  0E14               	movlw	20
 10127  002C9E  6F83               	movwf	blink@end& (0+255),b
 10128  002CA0  EC45  F038         	call	_blink	;wreg free
 10129                           
 10130                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
 10131  002CA4  0E02               	movlw	2
 10132  002CA6  EC9A  F03B         	call	_btPress
 10133  002CAA  0900               	iorlw	0
 10134  002CAC  B4D8               	btfsc	status,2,c
 10135  002CAE  D01E               	goto	l875
 10136                           
 10137                           ;tela_ESTACIONARIA.h: 41: horimetro = 0;
 10138  002CB0  0E00               	movlw	0
 10139  002CB2  0101               	movlb	1	; () banked
 10140  002CB4  6F0B               	movwf	(_horimetro+1)& (0+255),b
 10141  002CB6  0E00               	movlw	0
 10142  002CB8  6F0A               	movwf	_horimetro& (0+255),b
 10143                           
 10144                           ; BSR set to: 1
 10145                           ;tela_ESTACIONARIA.h: 42: writeEEPROM_ext(8, 0);
 10146  002CBA  0E00               	movlw	0
 10147  002CBC  0100               	movlb	0	; () banked
 10148  002CBE  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 10149  002CC0  0E08               	movlw	8
 10150  002CC2  EC06  F039         	call	_writeEEPROM_ext
 10151                           
 10152                           ;tela_ESTACIONARIA.h: 43: }
 10153                           ;tela_ESTACIONARIA.h: 44: break;
 10154  002CC6  D012               	goto	l875
 10155  002CC8  FFFF               	dw	65535	; assembler added errata NOP
 10156  002CCA  0E00               	movlw	0
 10157  002CCC  0100               	movlb	0	; () banked
 10158  002CCE  6FE3               	movwf	_option_posi& (0+255),b
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;tela_ESTACIONARIA.h: 47: }
 10162                           
 10163                           ;tela_ESTACIONARIA.h: 46: break;
 10164  002CD0  D00D               	goto	l875
 10165  002CD2                     l871:
 10166  002CD2  FFFF               	dw	65535	; assembler added errata NOP
 10167                           
 10168                           ; BSR set to: 0
 10169  002CD4  0100               	movlb	0	; () banked
 10170  002CD6  51E3               	movf	_option_posi& (0+255),w,b
 10171                           
 10172                           ; Switch size 1, requested type "space"
 10173                           ; Number of cases is 3, Range of values is 0 to 2
 10174                           ; switch strategies available:
 10175                           ; Name         Instructions Cycles
 10176                           ; simple_byte           10     6 (average)
 10177                           ;	Chosen strategy is simple_byte
 10178  002CD8  0A00               	xorlw	0	; case 0
 10179  002CDA  B4D8               	btfsc	status,2,c
 10180  002CDC  D7A0               	goto	l872
 10181  002CDE  0A01               	xorlw	1	; case 1
 10182  002CE0  B4D8               	btfsc	status,2,c
 10183  002CE2  D7BB               	goto	l876
 10184  002CE4  0A03               	xorlw	3	; case 2
 10185  002CE6  B4D8               	btfsc	status,2,c
 10186  002CE8  D7D1               	goto	l879
 10187  002CEA  D7EE               	goto	l881
 10188  002CEC                     l875:
 10189  002CEC  FFFF               	dw	65535	; assembler added errata NOP
 10190                           
 10191                           ;tela_ESTACIONARIA.h: 50: if (btPress(4)) {
 10192                           
 10193                           ; BSR set to: 0
 10194  002CEE  0E04               	movlw	4
 10195  002CF0  EC9A  F03B         	call	_btPress
 10196  002CF4  0900               	iorlw	0
 10197  002CF6  B4D8               	btfsc	status,2,c
 10198  002CF8  D003               	goto	l882
 10199                           
 10200                           ;tela_ESTACIONARIA.h: 51: option_posi++;
 10201  002CFA  0100               	movlb	0	; () banked
 10202  002CFC  2BE3               	incf	_option_posi& (0+255),f,b
 10203                           
 10204                           ;tela_ESTACIONARIA.h: 52: } else if (btPress(1)) {
 10205  002CFE  D016               	goto	l884
 10206  002D00                     l882:
 10207  002D00  FFFF               	dw	65535	; assembler added errata NOP
 10208                           
 10209                           ; BSR set to: 0
 10210  002D02  0E01               	movlw	1
 10211  002D04  EC9A  F03B         	call	_btPress
 10212  002D08  0900               	iorlw	0
 10213  002D0A  B4D8               	btfsc	status,2,c
 10214  002D0C  D00F               	goto	l884
 10215                           
 10216                           ;tela_ESTACIONARIA.h: 53: writeEEPROM_ext(7, tempo_limite_estacionaria);
 10217  002D0E  C0E8  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
 10218  002D12  0E07               	movlw	7
 10219  002D14  EC06  F039         	call	_writeEEPROM_ext
 10220                           
 10221                           ;tela_ESTACIONARIA.h: 54: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
 10222  002D18  C069  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
 10223  002D1C  0E0D               	movlw	13
 10224  002D1E  EC06  F039         	call	_writeEEPROM_ext
 10225                           
 10226                           ;tela_ESTACIONARIA.h: 55: option_posi = 0;
 10227  002D22  0E00               	movlw	0
 10228  002D24  0100               	movlb	0	; () banked
 10229  002D26  6FE3               	movwf	_option_posi& (0+255),b
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;tela_ESTACIONARIA.h: 56: menu_posi = _menu_posi;
 10233  002D28  C0E1  F0E2         	movff	__menu_posi,_menu_posi
 10234  002D2C                     l884:
 10235  002D2C  FFFF               	dw	65535	; assembler added errata NOP
 10236                           
 10237                           ; BSR set to: 0
 10238                           
 10239                           ; BSR set to: 0
 10240  002D2E  0012               	return		;funcret
 10241  002D30  FFFF               	dw	65535	; errata NOP
 10242  002D32                     __end_of_configurarEstacionaria:
 10243                           	opt stack 0
 10244                           tblptru	equ	0xFF8
 10245                           tblptrh	equ	0xFF7
 10246                           tblptrl	equ	0xFF6
 10247                           tablat	equ	0xFF5
 10248                           prodh	equ	0xFF4
 10249                           prodl	equ	0xFF3
 10250                           postinc0	equ	0xFEE
 10251                           wreg	equ	0xFE8
 10252                           postdec1	equ	0xFE5
 10253                           fsr1l	equ	0xFE1
 10254                           indf2	equ	0xFDF
 10255                           postinc2	equ	0xFDE
 10256                           postdec2	equ	0xFDD
 10257                           fsr2h	equ	0xFDA
 10258                           fsr2l	equ	0xFD9
 10259                           status	equ	0xFD8
 10260                           
 10261 ;; *************** function _configuraTelefones *****************
 10262 ;; Defined at:
 10263 ;;		line 9 in file "tela_TELEFONES.h"
 10264 ;; Parameters:    Size  Location     Type
 10265 ;;		None
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;  i               1   67[BANK0 ] unsigned char 
 10268 ;; Return value:  Size  Location     Type
 10269 ;;                  1    wreg      void 
 10270 ;; Registers used:
 10271 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10277 ;;      Params:         0       0       0       0       0       0       0
 10278 ;;      Locals:         0       3       0       0       0       0       0
 10279 ;;      Temps:          0       2       0       0       0       0       0
 10280 ;;      Totals:         0       5       0       0       0       0       0
 10281 ;;Total ram usage:        5 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:   10
 10284 ;; This function calls:
 10285 ;;		_blink
 10286 ;;		_btPress
 10287 ;;		_comunicarTeste
 10288 ;;		_sprintf
 10289 ;;		_writeEEPROM_ext
 10290 ;; This function is called by:
 10291 ;;		_main
 10292 ;; This function uses a non-reentrant model
 10293 ;;
 10294                           
 10295                           	psect	text28
 10296  0013B6                     __ptext28:
 10297                           	opt stack 0
 10298  0013B6                     _configuraTelefones:
 10299                           	opt stack 0
 10300  0013B6  FFFF               	dw	65535	; assembler added errata NOP
 10301                           
 10302                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
 10303                           
 10304                           ;incstack = 0
 10305  0013B8  0E9F               	movlw	low (_line1+1)
 10306  0013BA  0100               	movlb	0	; () banked
 10307  0013BC  6FA1               	movwf	sprintf@wh& (0+255),b
 10308  0013BE  0E01               	movlw	high (_line1+1)
 10309  0013C0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10310  0013C2  0EB7               	movlw	low STR_95
 10311  0013C4  6FA3               	movwf	sprintf@f& (0+255),b
 10312  0013C6  0E7F               	movlw	high STR_95
 10313  0013C8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10314  0013CA  0ED3               	movlw	low _tel1
 10315  0013CC  6FA5               	movwf	(?_sprintf+4)& (0+255),b
 10316  0013CE  0E01               	movlw	high _tel1
 10317  0013D0  6FA6               	movwf	(?_sprintf+5)& (0+255),b
 10318  0013D2  EC29  F039         	call	_sprintf	;wreg free
 10319                           
 10320                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
 10321  0013D6  0E8A               	movlw	low (_line2+1)
 10322  0013D8  0100               	movlb	0	; () banked
 10323  0013DA  6FA1               	movwf	sprintf@wh& (0+255),b
 10324  0013DC  0E01               	movlw	high (_line2+1)
 10325  0013DE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10326  0013E0  0EBE               	movlw	low STR_96
 10327  0013E2  6FA3               	movwf	sprintf@f& (0+255),b
 10328  0013E4  0E7F               	movlw	high STR_96
 10329  0013E6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10330  0013E8  0EC7               	movlw	low _tel2
 10331  0013EA  6FA5               	movwf	(?_sprintf+4)& (0+255),b
 10332  0013EC  0E01               	movlw	high _tel2
 10333  0013EE  6FA6               	movwf	(?_sprintf+5)& (0+255),b
 10334  0013F0  EC29  F039         	call	_sprintf	;wreg free
 10335                           
 10336                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? " aguarde... " : "Enviar sm
      +                          s teste");
 10337  0013F4  0100               	movlb	0	; () banked
 10338  0013F6  51F5               	movf	_gsmOcupado& (0+255),w,b
 10339  0013F8  A4D8               	btfss	status,2,c
 10340  0013FA  D004               	goto	l829
 10341                           
 10342                           ; BSR set to: 0
 10343  0013FC  0EB1               	movlw	low STR_99
 10344  0013FE  6FC1               	movwf	_configuraTelefones$1645& (0+255),b
 10345  001400  0E7D               	movlw	high STR_99
 10346  001402  D004               	goto	L19
 10347  001404                     l829:
 10348  001404  FFFF               	dw	65535	; assembler added errata NOP
 10349                           
 10350                           ; BSR set to: 0
 10351                           
 10352                           ; BSR set to: 0
 10353  001406  0E93               	movlw	low STR_98
 10354  001408  6FC1               	movwf	_configuraTelefones$1645& (0+255),b
 10355  00140A  0E7E               	movlw	high STR_98
 10356  00140C                     L19:
 10357  00140C  FFFF               	dw	65535	; assembler added errata NOP
 10358  00140E  6FC2               	movwf	(_configuraTelefones$1645+1)& (0+255),b
 10359                           
 10360                           ; BSR set to: 0
 10361                           
 10362                           ; BSR set to: 0
 10363  001410  0E75               	movlw	low (_line3+1)
 10364  001412  6FA1               	movwf	sprintf@wh& (0+255),b
 10365  001414  0E01               	movlw	high (_line3+1)
 10366  001416  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10367  001418  0EFE               	movlw	low (STR_93+9)
 10368  00141A  6FA3               	movwf	sprintf@f& (0+255),b
 10369  00141C  0E7E               	movlw	high (STR_93+9)
 10370  00141E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10371  001420  C0C1  F0A5         	movff	_configuraTelefones$1645,?_sprintf+4
 10372  001424  C0C2  F0A6         	movff	_configuraTelefones$1645+1,?_sprintf+5
 10373  001428  EC29  F039         	call	_sprintf	;wreg free
 10374                           
 10375                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
 10376  00142C  0100               	movlb	0	; () banked
 10377  00142E  51DF               	movf	_ajust_tel& (0+255),w,b
 10378  001430  A4D8               	btfss	status,2,c
 10379  001432  D050               	goto	l837
 10380                           
 10381                           ; BSR set to: 0
 10382                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
 10383  001434  0E03               	movlw	3
 10384  001436  EC9A  F03B         	call	_btPress
 10385  00143A  0900               	iorlw	0
 10386  00143C  B4D8               	btfsc	status,2,c
 10387  00143E  D003               	goto	l833
 10388                           
 10389                           ;tela_TELEFONES.h: 16: option_posi--;
 10390  001440  0100               	movlb	0	; () banked
 10391  001442  07E3               	decf	_option_posi& (0+255),f,b
 10392                           
 10393                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
 10394  001444  D047               	goto	l837
 10395  001446                     l833:
 10396  001446  FFFF               	dw	65535	; assembler added errata NOP
 10397                           
 10398                           ; BSR set to: 0
 10399  001448  0E02               	movlw	2
 10400  00144A  EC9A  F03B         	call	_btPress
 10401  00144E  0900               	iorlw	0
 10402  001450  B4D8               	btfsc	status,2,c
 10403  001452  D003               	goto	l835
 10404                           
 10405                           ;tela_TELEFONES.h: 18: option_posi++;
 10406  001454  0100               	movlb	0	; () banked
 10407  001456  2BE3               	incf	_option_posi& (0+255),f,b
 10408                           
 10409                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
 10410  001458  D03D               	goto	l837
 10411  00145A                     l835:
 10412  00145A  FFFF               	dw	65535	; assembler added errata NOP
 10413                           
 10414                           ; BSR set to: 0
 10415  00145C  0E01               	movlw	1
 10416  00145E  EC9A  F03B         	call	_btPress
 10417  001462  0900               	iorlw	0
 10418  001464  B4D8               	btfsc	status,2,c
 10419  001466  D036               	goto	l837
 10420                           
 10421                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
 10422  001468  0E00               	movlw	0
 10423  00146A  0100               	movlb	0	; () banked
 10424  00146C  6FF5               	movwf	_gsmOcupado& (0+255),b
 10425                           
 10426                           ;tela_TELEFONES.h: 21: option_posi = 0;
 10427  00146E  0E00               	movlw	0
 10428  001470  6FE3               	movwf	_option_posi& (0+255),b
 10429                           
 10430                           ;tela_TELEFONES.h: 22: tel_posi = 0;
 10431  001472  0E00               	movlw	0
 10432  001474  6FE0               	movwf	_tel_posi& (0+255),b
 10433                           
 10434                           ;tela_TELEFONES.h: 23: ajust_tel = 0;
 10435  001476  0E00               	movlw	0
 10436  001478  6FDF               	movwf	_ajust_tel& (0+255),b
 10437                           
 10438                           ;tela_TELEFONES.h: 24: char i = 0;
 10439  00147A  0E00               	movlw	0
 10440  00147C  6FC3               	movwf	configuraTelefones@i& (0+255),b
 10441                           
 10442                           ;tela_TELEFONES.h: 25: for (i = 0; i < 11; i++) {
 10443  00147E  0E00               	movlw	0
 10444  001480  6FC3               	movwf	configuraTelefones@i& (0+255),b
 10445  001482                     l7455:
 10446  001482  FFFF               	dw	65535	; assembler added errata NOP
 10447                           
 10448                           ; BSR set to: 0
 10449  001484  0E0A               	movlw	10
 10450  001486  65C3               	cpfsgt	configuraTelefones@i& (0+255),b
 10451  001488  D001               	goto	l838
 10452  00148A  D021               	goto	u8240
 10453  00148C                     l838:
 10454  00148C  FFFF               	dw	65535	; assembler added errata NOP
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;tela_TELEFONES.h: 26: writeEEPROM_ext((20 + i), tel1[i]);
 10458                           
 10459                           ; BSR set to: 0
 10460  00148E  51C3               	movf	configuraTelefones@i& (0+255),w,b
 10461  001490  0D01               	mullw	1
 10462  001492  0ED3               	movlw	low _tel1
 10463  001494  24F3               	addwf	prodl,w,c
 10464  001496  6ED9               	movwf	fsr2l,c
 10465  001498  0E01               	movlw	high _tel1
 10466  00149A  20F4               	addwfc	prodh,w,c
 10467  00149C  6EDA               	movwf	fsr2h,c
 10468  00149E  50DF               	movf	indf2,w,c
 10469  0014A0  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 10470  0014A2  51C3               	movf	configuraTelefones@i& (0+255),w,b
 10471  0014A4  0F14               	addlw	20
 10472  0014A6  EC06  F039         	call	_writeEEPROM_ext
 10473                           
 10474                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((40 + i), tel2[i]);
 10475  0014AA  0100               	movlb	0	; () banked
 10476  0014AC  51C3               	movf	configuraTelefones@i& (0+255),w,b
 10477  0014AE  0D01               	mullw	1
 10478  0014B0  0EC7               	movlw	low _tel2
 10479  0014B2  24F3               	addwf	prodl,w,c
 10480  0014B4  6ED9               	movwf	fsr2l,c
 10481  0014B6  0E01               	movlw	high _tel2
 10482  0014B8  20F4               	addwfc	prodh,w,c
 10483  0014BA  6EDA               	movwf	fsr2h,c
 10484  0014BC  50DF               	movf	indf2,w,c
 10485  0014BE  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 10486  0014C0  51C3               	movf	configuraTelefones@i& (0+255),w,b
 10487  0014C2  0F28               	addlw	40
 10488  0014C4  EC06  F039         	call	_writeEEPROM_ext
 10489  0014C8  0100               	movlb	0	; () banked
 10490  0014CA  2BC3               	incf	configuraTelefones@i& (0+255),f,b
 10491  0014CC  D7DA               	goto	l7455
 10492  0014CE                     u8240:
 10493  0014CE  FFFF               	dw	65535	; assembler added errata NOP
 10494                           
 10495                           ; BSR set to: 0
 10496                           ;tela_TELEFONES.h: 28: }
 10497                           ;tela_TELEFONES.h: 29: menu_posi = _menu_posi;
 10498  0014D0  C0E1  F0E2         	movff	__menu_posi,_menu_posi
 10499  0014D4                     l837:
 10500  0014D4  FFFF               	dw	65535	; assembler added errata NOP
 10501                           
 10502                           ;tela_TELEFONES.h: 30: }
 10503                           ;tela_TELEFONES.h: 31: }
 10504                           ;tela_TELEFONES.h: 32: if (ajust_tel == 1) {
 10505                           
 10506                           ; BSR set to: 0
 10507                           
 10508                           ; BSR set to: 0
 10509                           
 10510                           ; BSR set to: 0
 10511                           
 10512                           ; BSR set to: 0
 10513  0014D6  0100               	movlb	0	; () banked
 10514  0014D8  05DF               	decf	_ajust_tel& (0+255),w,b
 10515  0014DA  A4D8               	btfss	status,2,c
 10516  0014DC  D13B               	goto	l844
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;tela_TELEFONES.h: 33: if (btPress(4)) {
 10520  0014DE  0E04               	movlw	4
 10521  0014E0  EC9A  F03B         	call	_btPress
 10522  0014E4  0900               	iorlw	0
 10523  0014E6  B4D8               	btfsc	status,2,c
 10524  0014E8  D003               	goto	l841
 10525                           
 10526                           ;tela_TELEFONES.h: 34: tel_posi++;
 10527  0014EA  0100               	movlb	0	; () banked
 10528  0014EC  2BE0               	incf	_tel_posi& (0+255),f,b
 10529                           
 10530                           ;tela_TELEFONES.h: 35: } else if (btPress(1)) {
 10531  0014EE  D132               	goto	l844
 10532  0014F0                     l841:
 10533  0014F0  FFFF               	dw	65535	; assembler added errata NOP
 10534                           
 10535                           ; BSR set to: 0
 10536  0014F2  0E01               	movlw	1
 10537  0014F4  EC9A  F03B         	call	_btPress
 10538  0014F8  0900               	iorlw	0
 10539  0014FA  B4D8               	btfsc	status,2,c
 10540  0014FC  D12B               	goto	l844
 10541                           
 10542                           ;tela_TELEFONES.h: 36: tel_posi = 0;
 10543  0014FE  0E00               	movlw	0
 10544  001500  0100               	movlb	0	; () banked
 10545  001502  6FE0               	movwf	_tel_posi& (0+255),b
 10546                           
 10547                           ;tela_TELEFONES.h: 37: ajust_tel = 0;
 10548  001504  0E00               	movlw	0
 10549  001506  6FDF               	movwf	_ajust_tel& (0+255),b
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;tela_TELEFONES.h: 38: }
 10553                           ;tela_TELEFONES.h: 39: }
 10554                           ;tela_TELEFONES.h: 41: switch (option_posi) {
 10555                           
 10556                           ; BSR set to: 0
 10557                           
 10558                           ; BSR set to: 0
 10559  001508  D125               	goto	l844
 10560  00150A  FFFF               	dw	65535	; assembler added errata NOP
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;tela_TELEFONES.h: 43: line1[0] = '>';
 10564                           
 10565                           ; BSR set to: 0
 10566  00150C  0E3E               	movlw	62
 10567  00150E  0101               	movlb	1	; () banked
 10568  001510  6F9E               	movwf	_line1& (0+255),b
 10569                           
 10570                           ; BSR set to: 1
 10571                           ;tela_TELEFONES.h: 44: blink(line1,1,1);
 10572  001512  0E9E               	movlw	low _line1
 10573  001514  0100               	movlb	0	; () banked
 10574  001516  6F80               	movwf	blink@line& (0+255),b
 10575  001518  0E01               	movlw	high _line1
 10576  00151A  6F81               	movwf	(blink@line+1)& (0+255),b
 10577  00151C  0E01               	movlw	1
 10578  00151E  6F82               	movwf	blink@start& (0+255),b
 10579  001520  0E01               	movlw	1
 10580  001522  6F83               	movwf	blink@end& (0+255),b
 10581  001524  EC45  F038         	call	_blink	;wreg free
 10582                           
 10583                           ;tela_TELEFONES.h: 45: if (btPress(4)) {
 10584  001528  0E04               	movlw	4
 10585  00152A  EC9A  F03B         	call	_btPress
 10586  00152E  0900               	iorlw	0
 10587  001530  B4D8               	btfsc	status,2,c
 10588  001532  D003               	goto	l846
 10589                           
 10590                           ;tela_TELEFONES.h: 46: ajust_tel = 1;
 10591  001534  0E01               	movlw	1
 10592  001536  0100               	movlb	0	; () banked
 10593  001538  6FDF               	movwf	_ajust_tel& (0+255),b
 10594  00153A                     l846:
 10595  00153A  FFFF               	dw	65535	; assembler added errata NOP
 10596                           
 10597                           ;tela_TELEFONES.h: 47: }
 10598                           ;tela_TELEFONES.h: 48: if (ajust_tel) {
 10599  00153C  0100               	movlb	0	; () banked
 10600  00153E  51DF               	movf	_ajust_tel& (0+255),w,b
 10601  001540  B4D8               	btfsc	status,2,c
 10602  001542  D115               	goto	l854
 10603                           
 10604                           ; BSR set to: 0
 10605                           ;tela_TELEFONES.h: 49: blink(line1, (tel_posi + 6), (tel_posi + 6));
 10606  001544  0E9E               	movlw	low _line1
 10607  001546  6F80               	movwf	blink@line& (0+255),b
 10608  001548  0E01               	movlw	high _line1
 10609  00154A  6F81               	movwf	(blink@line+1)& (0+255),b
 10610  00154C  51E0               	movf	_tel_posi& (0+255),w,b
 10611  00154E  0F06               	addlw	6
 10612  001550  6F82               	movwf	blink@start& (0+255),b
 10613  001552  51E0               	movf	_tel_posi& (0+255),w,b
 10614  001554  0F06               	addlw	6
 10615  001556  6F83               	movwf	blink@end& (0+255),b
 10616  001558  EC45  F038         	call	_blink	;wreg free
 10617                           
 10618                           ;tela_TELEFONES.h: 50: if ((tel_posi + 2) > sizeof (tel1)) {
 10619  00155C  0100               	movlb	0	; () banked
 10620  00155E  51E0               	movf	_tel_posi& (0+255),w,b
 10621  001560  6FBF               	movwf	??_configuraTelefones& (0+255),b
 10622  001562  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
 10623  001564  0E02               	movlw	2
 10624  001566  27BF               	addwf	??_configuraTelefones& (0+255),f,b
 10625  001568  0E00               	movlw	0
 10626  00156A  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
 10627  00156C  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
 10628  00156E  E104               	bnz	u8300
 10629  001570  0E0D               	movlw	13
 10630  001572  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
 10631  001574  A0D8               	btfss	status,0,c
 10632  001576  D004               	goto	l848
 10633  001578                     u8300:
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;tela_TELEFONES.h: 51: tel_posi = 0;
 10637  001578  0E00               	movlw	0
 10638  00157A  6FE0               	movwf	_tel_posi& (0+255),b
 10639                           
 10640                           ;tela_TELEFONES.h: 52: ajust_tel = 0;
 10641  00157C  0E00               	movlw	0
 10642  00157E  6FDF               	movwf	_ajust_tel& (0+255),b
 10643  001580                     l848:
 10644  001580  FFFF               	dw	65535	; assembler added errata NOP
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;tela_TELEFONES.h: 53: }
 10648                           ;tela_TELEFONES.h: 54: if (btPress(3)) {
 10649                           
 10650                           ; BSR set to: 0
 10651  001582  0E03               	movlw	3
 10652  001584  EC9A  F03B         	call	_btPress
 10653  001588  0900               	iorlw	0
 10654  00158A  B4D8               	btfsc	status,2,c
 10655  00158C  D00A               	goto	l849
 10656                           
 10657                           ;tela_TELEFONES.h: 55: tel1[tel_posi]++;
 10658  00158E  0100               	movlb	0	; () banked
 10659  001590  51E0               	movf	_tel_posi& (0+255),w,b
 10660  001592  0D01               	mullw	1
 10661  001594  0ED3               	movlw	low _tel1
 10662  001596  24F3               	addwf	prodl,w,c
 10663  001598  6ED9               	movwf	fsr2l,c
 10664  00159A  0E01               	movlw	high _tel1
 10665  00159C  20F4               	addwfc	prodh,w,c
 10666  00159E  6EDA               	movwf	fsr2h,c
 10667  0015A0  2ADF               	incf	indf2,f,c
 10668  0015A2                     l849:
 10669  0015A2  FFFF               	dw	65535	; assembler added errata NOP
 10670                           
 10671                           ;tela_TELEFONES.h: 56: }
 10672                           ;tela_TELEFONES.h: 57: if (btPress(2)) {
 10673                           
 10674                           ; BSR set to: 0
 10675  0015A4  0E02               	movlw	2
 10676  0015A6  EC9A  F03B         	call	_btPress
 10677  0015AA  0900               	iorlw	0
 10678  0015AC  B4D8               	btfsc	status,2,c
 10679  0015AE  D00A               	goto	l850
 10680                           
 10681                           ;tela_TELEFONES.h: 58: tel1[tel_posi]--;
 10682  0015B0  0100               	movlb	0	; () banked
 10683  0015B2  51E0               	movf	_tel_posi& (0+255),w,b
 10684  0015B4  0D01               	mullw	1
 10685  0015B6  0ED3               	movlw	low _tel1
 10686  0015B8  24F3               	addwf	prodl,w,c
 10687  0015BA  6ED9               	movwf	fsr2l,c
 10688  0015BC  0E01               	movlw	high _tel1
 10689  0015BE  20F4               	addwfc	prodh,w,c
 10690  0015C0  6EDA               	movwf	fsr2h,c
 10691  0015C2  06DF               	decf	indf2,f,c
 10692  0015C4                     l850:
 10693  0015C4  FFFF               	dw	65535	; assembler added errata NOP
 10694                           
 10695                           ;tela_TELEFONES.h: 59: }
 10696                           ;tela_TELEFONES.h: 60: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
 10697  0015C6  0100               	movlb	0	; () banked
 10698  0015C8  51E0               	movf	_tel_posi& (0+255),w,b
 10699  0015CA  0D01               	mullw	1
 10700  0015CC  0ED3               	movlw	low _tel1
 10701  0015CE  24F3               	addwf	prodl,w,c
 10702  0015D0  6ED9               	movwf	fsr2l,c
 10703  0015D2  0E01               	movlw	high _tel1
 10704  0015D4  20F4               	addwfc	prodh,w,c
 10705  0015D6  6EDA               	movwf	fsr2h,c
 10706  0015D8  0E3A               	movlw	58
 10707  0015DA  60DF               	cpfslt	indf2,c
 10708  0015DC  D00B               	goto	u8340
 10709                           
 10710                           ; BSR set to: 0
 10711  0015DE  51E0               	movf	_tel_posi& (0+255),w,b
 10712  0015E0  0D01               	mullw	1
 10713  0015E2  0ED3               	movlw	low _tel1
 10714  0015E4  24F3               	addwf	prodl,w,c
 10715  0015E6  6ED9               	movwf	fsr2l,c
 10716  0015E8  0E01               	movlw	high _tel1
 10717  0015EA  20F4               	addwfc	prodh,w,c
 10718  0015EC  6EDA               	movwf	fsr2h,c
 10719  0015EE  0E30               	movlw	48
 10720  0015F0  60DF               	cpfslt	indf2,c
 10721  0015F2  D0BD               	goto	l854
 10722  0015F4                     u8340:
 10723  0015F4  FFFF               	dw	65535	; assembler added errata NOP
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;tela_TELEFONES.h: 61: tel1[tel_posi] = 48;
 10727                           
 10728                           ; BSR set to: 0
 10729  0015F6  51E0               	movf	_tel_posi& (0+255),w,b
 10730  0015F8  0D01               	mullw	1
 10731  0015FA  0ED3               	movlw	low _tel1
 10732  0015FC  24F3               	addwf	prodl,w,c
 10733  0015FE  6ED9               	movwf	fsr2l,c
 10734  001600  0E01               	movlw	high _tel1
 10735  001602  D07C               	goto	L20
 10736  001604  FFFF               	dw	65535	; assembler added errata NOP
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;tela_TELEFONES.h: 66: line2[0] = '>';
 10740                           
 10741                           ; BSR set to: 0
 10742  001606  0E3E               	movlw	62
 10743  001608  0101               	movlb	1	; () banked
 10744  00160A  6F89               	movwf	_line2& (0+255),b
 10745                           
 10746                           ; BSR set to: 1
 10747                           ;tela_TELEFONES.h: 67: blink(line2,1,1);
 10748  00160C  0E89               	movlw	low _line2
 10749  00160E  0100               	movlb	0	; () banked
 10750  001610  6F80               	movwf	blink@line& (0+255),b
 10751  001612  0E01               	movlw	high _line2
 10752  001614  6F81               	movwf	(blink@line+1)& (0+255),b
 10753  001616  0E01               	movlw	1
 10754  001618  6F82               	movwf	blink@start& (0+255),b
 10755  00161A  0E01               	movlw	1
 10756  00161C  6F83               	movwf	blink@end& (0+255),b
 10757  00161E  EC45  F038         	call	_blink	;wreg free
 10758                           
 10759                           ;tela_TELEFONES.h: 68: if (btPress(4)) {
 10760  001622  0E04               	movlw	4
 10761  001624  EC9A  F03B         	call	_btPress
 10762  001628  0900               	iorlw	0
 10763  00162A  B4D8               	btfsc	status,2,c
 10764  00162C  D003               	goto	l856
 10765                           
 10766                           ;tela_TELEFONES.h: 69: ajust_tel = 1;
 10767  00162E  0E01               	movlw	1
 10768  001630  0100               	movlb	0	; () banked
 10769  001632  6FDF               	movwf	_ajust_tel& (0+255),b
 10770  001634                     l856:
 10771  001634  FFFF               	dw	65535	; assembler added errata NOP
 10772                           
 10773                           ;tela_TELEFONES.h: 70: }
 10774                           ;tela_TELEFONES.h: 71: if (ajust_tel) {
 10775  001636  0100               	movlb	0	; () banked
 10776  001638  51DF               	movf	_ajust_tel& (0+255),w,b
 10777  00163A  B4D8               	btfsc	status,2,c
 10778  00163C  D098               	goto	l854
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;tela_TELEFONES.h: 72: blink(line2, (tel_posi + 6), (tel_posi + 6));
 10782  00163E  0E89               	movlw	low _line2
 10783  001640  6F80               	movwf	blink@line& (0+255),b
 10784  001642  0E01               	movlw	high _line2
 10785  001644  6F81               	movwf	(blink@line+1)& (0+255),b
 10786  001646  51E0               	movf	_tel_posi& (0+255),w,b
 10787  001648  0F06               	addlw	6
 10788  00164A  6F82               	movwf	blink@start& (0+255),b
 10789  00164C  51E0               	movf	_tel_posi& (0+255),w,b
 10790  00164E  0F06               	addlw	6
 10791  001650  6F83               	movwf	blink@end& (0+255),b
 10792  001652  EC45  F038         	call	_blink	;wreg free
 10793                           
 10794                           ;tela_TELEFONES.h: 73: if ((tel_posi + 2) > sizeof (tel2)) {
 10795  001656  0100               	movlb	0	; () banked
 10796  001658  51E0               	movf	_tel_posi& (0+255),w,b
 10797  00165A  6FBF               	movwf	??_configuraTelefones& (0+255),b
 10798  00165C  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
 10799  00165E  0E02               	movlw	2
 10800  001660  27BF               	addwf	??_configuraTelefones& (0+255),f,b
 10801  001662  0E00               	movlw	0
 10802  001664  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
 10803  001666  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
 10804  001668  E104               	bnz	u8370
 10805  00166A  0E0D               	movlw	13
 10806  00166C  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
 10807  00166E  A0D8               	btfss	status,0,c
 10808  001670  D004               	goto	l858
 10809  001672                     u8370:
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;tela_TELEFONES.h: 74: tel_posi = 0;
 10813  001672  0E00               	movlw	0
 10814  001674  6FE0               	movwf	_tel_posi& (0+255),b
 10815                           
 10816                           ;tela_TELEFONES.h: 75: ajust_tel = 0;
 10817  001676  0E00               	movlw	0
 10818  001678  6FDF               	movwf	_ajust_tel& (0+255),b
 10819  00167A                     l858:
 10820  00167A  FFFF               	dw	65535	; assembler added errata NOP
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;tela_TELEFONES.h: 76: }
 10824                           ;tela_TELEFONES.h: 77: if (btPress(3)) {
 10825                           
 10826                           ; BSR set to: 0
 10827  00167C  0E03               	movlw	3
 10828  00167E  EC9A  F03B         	call	_btPress
 10829  001682  0900               	iorlw	0
 10830  001684  B4D8               	btfsc	status,2,c
 10831  001686  D00A               	goto	l859
 10832                           
 10833                           ;tela_TELEFONES.h: 78: tel2[tel_posi]++;
 10834  001688  0100               	movlb	0	; () banked
 10835  00168A  51E0               	movf	_tel_posi& (0+255),w,b
 10836  00168C  0D01               	mullw	1
 10837  00168E  0EC7               	movlw	low _tel2
 10838  001690  24F3               	addwf	prodl,w,c
 10839  001692  6ED9               	movwf	fsr2l,c
 10840  001694  0E01               	movlw	high _tel2
 10841  001696  20F4               	addwfc	prodh,w,c
 10842  001698  6EDA               	movwf	fsr2h,c
 10843  00169A  2ADF               	incf	indf2,f,c
 10844  00169C                     l859:
 10845  00169C  FFFF               	dw	65535	; assembler added errata NOP
 10846                           
 10847                           ;tela_TELEFONES.h: 79: }
 10848                           ;tela_TELEFONES.h: 80: if (btPress(2)) {
 10849                           
 10850                           ; BSR set to: 0
 10851  00169E  0E02               	movlw	2
 10852  0016A0  EC9A  F03B         	call	_btPress
 10853  0016A4  0900               	iorlw	0
 10854  0016A6  B4D8               	btfsc	status,2,c
 10855  0016A8  D00A               	goto	l860
 10856                           
 10857                           ;tela_TELEFONES.h: 81: tel2[tel_posi]--;
 10858  0016AA  0100               	movlb	0	; () banked
 10859  0016AC  51E0               	movf	_tel_posi& (0+255),w,b
 10860  0016AE  0D01               	mullw	1
 10861  0016B0  0EC7               	movlw	low _tel2
 10862  0016B2  24F3               	addwf	prodl,w,c
 10863  0016B4  6ED9               	movwf	fsr2l,c
 10864  0016B6  0E01               	movlw	high _tel2
 10865  0016B8  20F4               	addwfc	prodh,w,c
 10866  0016BA  6EDA               	movwf	fsr2h,c
 10867  0016BC  06DF               	decf	indf2,f,c
 10868  0016BE                     l860:
 10869  0016BE  FFFF               	dw	65535	; assembler added errata NOP
 10870                           
 10871                           ;tela_TELEFONES.h: 82: }
 10872                           ;tela_TELEFONES.h: 83: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
 10873  0016C0  0100               	movlb	0	; () banked
 10874  0016C2  51E0               	movf	_tel_posi& (0+255),w,b
 10875  0016C4  0D01               	mullw	1
 10876  0016C6  0EC7               	movlw	low _tel2
 10877  0016C8  24F3               	addwf	prodl,w,c
 10878  0016CA  6ED9               	movwf	fsr2l,c
 10879  0016CC  0E01               	movlw	high _tel2
 10880  0016CE  20F4               	addwfc	prodh,w,c
 10881  0016D0  6EDA               	movwf	fsr2h,c
 10882  0016D2  0E3A               	movlw	58
 10883  0016D4  60DF               	cpfslt	indf2,c
 10884  0016D6  D00B               	goto	u8410
 10885                           
 10886                           ; BSR set to: 0
 10887  0016D8  51E0               	movf	_tel_posi& (0+255),w,b
 10888  0016DA  0D01               	mullw	1
 10889  0016DC  0EC7               	movlw	low _tel2
 10890  0016DE  24F3               	addwf	prodl,w,c
 10891  0016E0  6ED9               	movwf	fsr2l,c
 10892  0016E2  0E01               	movlw	high _tel2
 10893  0016E4  20F4               	addwfc	prodh,w,c
 10894  0016E6  6EDA               	movwf	fsr2h,c
 10895  0016E8  0E30               	movlw	48
 10896  0016EA  60DF               	cpfslt	indf2,c
 10897  0016EC  D040               	goto	l854
 10898  0016EE                     u8410:
 10899  0016EE  FFFF               	dw	65535	; assembler added errata NOP
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;tela_TELEFONES.h: 84: tel2[tel_posi] = 48;
 10903                           
 10904                           ; BSR set to: 0
 10905  0016F0  51E0               	movf	_tel_posi& (0+255),w,b
 10906  0016F2  0D01               	mullw	1
 10907  0016F4  0EC7               	movlw	low _tel2
 10908  0016F6  24F3               	addwf	prodl,w,c
 10909  0016F8  6ED9               	movwf	fsr2l,c
 10910  0016FA  0E01               	movlw	high _tel2
 10911  0016FC                     L20:
 10912  0016FC  FFFF               	dw	65535	; assembler added errata NOP
 10913  0016FE  20F4               	addwfc	prodh,w,c
 10914  001700  6EDA               	movwf	fsr2h,c
 10915  001702  0E30               	movlw	48
 10916  001704  6EDF               	movwf	indf2,c
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;tela_TELEFONES.h: 85: }
 10920                           ;tela_TELEFONES.h: 86: }
 10921                           ;tela_TELEFONES.h: 87: break;
 10922                           
 10923                           ; BSR set to: 0
 10924  001706  D033               	goto	l854
 10925  001708  FFFF               	dw	65535	; assembler added errata NOP
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;tela_TELEFONES.h: 89: line3[0] = '>';
 10929                           
 10930                           ; BSR set to: 0
 10931  00170A  0E3E               	movlw	62
 10932  00170C  0101               	movlb	1	; () banked
 10933  00170E  6F74               	movwf	_line3& (0+255),b
 10934                           
 10935                           ; BSR set to: 1
 10936                           ;tela_TELEFONES.h: 90: blink(line3,1,1);
 10937  001710  0E74               	movlw	low _line3
 10938  001712  0100               	movlb	0	; () banked
 10939  001714  6F80               	movwf	blink@line& (0+255),b
 10940  001716  0E01               	movlw	high _line3
 10941  001718  6F81               	movwf	(blink@line+1)& (0+255),b
 10942  00171A  0E01               	movlw	1
 10943  00171C  6F82               	movwf	blink@start& (0+255),b
 10944  00171E  0E01               	movlw	1
 10945  001720  6F83               	movwf	blink@end& (0+255),b
 10946  001722  EC45  F038         	call	_blink	;wreg free
 10947                           
 10948                           ;tela_TELEFONES.h: 91: if (btPress(4) && intensidadeSinal != 'x' && !gsmOcupado) {
 10949  001726  0E04               	movlw	4
 10950  001728  EC9A  F03B         	call	_btPress
 10951  00172C  0900               	iorlw	0
 10952  00172E  B4D8               	btfsc	status,2,c
 10953  001730  D01E               	goto	l854
 10954  001732  0E78               	movlw	120
 10955  001734  0100               	movlb	0	; () banked
 10956  001736  19FF               	xorwf	_intensidadeSinal& (0+255),w,b
 10957  001738  B4D8               	btfsc	status,2,c
 10958  00173A  D019               	goto	l854
 10959                           
 10960                           ; BSR set to: 0
 10961  00173C  51F5               	movf	_gsmOcupado& (0+255),w,b
 10962  00173E  A4D8               	btfss	status,2,c
 10963  001740  D016               	goto	l854
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;tela_TELEFONES.h: 92: gsmOcupado = 1;
 10967  001742  0E01               	movlw	1
 10968  001744  6FF5               	movwf	_gsmOcupado& (0+255),b
 10969                           
 10970                           ;tela_TELEFONES.h: 93: telefoneSelecionado = 0;
 10971  001746  0E00               	movlw	0
 10972  001748  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;tela_TELEFONES.h: 94: }
 10976                           ;tela_TELEFONES.h: 95: break;
 10977  00174A  D011               	goto	l854
 10978  00174C  FFFF               	dw	65535	; assembler added errata NOP
 10979                           
 10980                           ; BSR set to: 0
 10981                           
 10982                           ; BSR set to: 0
 10983  00174E  0E00               	movlw	0
 10984  001750  6FE3               	movwf	_option_posi& (0+255),b
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;tela_TELEFONES.h: 99: }
 10988                           
 10989                           ;tela_TELEFONES.h: 98: break;
 10990  001752  D00D               	goto	l854
 10991  001754                     l844:
 10992  001754  FFFF               	dw	65535	; assembler added errata NOP
 10993                           
 10994                           ; BSR set to: 0
 10995  001756  0100               	movlb	0	; () banked
 10996  001758  51E3               	movf	_option_posi& (0+255),w,b
 10997                           
 10998                           ; Switch size 1, requested type "space"
 10999                           ; Number of cases is 3, Range of values is 0 to 2
 11000                           ; switch strategies available:
 11001                           ; Name         Instructions Cycles
 11002                           ; simple_byte           10     6 (average)
 11003                           ;	Chosen strategy is simple_byte
 11004  00175A  0A00               	xorlw	0	; case 0
 11005  00175C  B4D8               	btfsc	status,2,c
 11006  00175E  D6D5               	goto	l845
 11007  001760  0A01               	xorlw	1	; case 1
 11008  001762  B4D8               	btfsc	status,2,c
 11009  001764  D74F               	goto	l855
 11010  001766  0A03               	xorlw	3	; case 2
 11011  001768  B4D8               	btfsc	status,2,c
 11012  00176A  D7CE               	goto	l864
 11013  00176C  D7EF               	goto	l866
 11014  00176E                     l854:
 11015  00176E  FFFF               	dw	65535	; assembler added errata NOP
 11016                           
 11017                           ;tela_TELEFONES.h: 100: if (gsmOcupado) {
 11018                           
 11019                           ; BSR set to: 0
 11020  001770  0100               	movlb	0	; () banked
 11021  001772  51F5               	movf	_gsmOcupado& (0+255),w,b
 11022  001774  A4D8               	btfss	status,2,c
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;tela_TELEFONES.h: 101: comunicarTeste();
 11026  001776  EC05  F013         	call	_comunicarTeste	;wreg free
 11027  00177A  0012               	return		;funcret
 11028  00177C  FFFF               	dw	65535	; errata NOP
 11029  00177E                     __end_of_configuraTelefones:
 11030                           	opt stack 0
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodh	equ	0xFF4
 11036                           prodl	equ	0xFF3
 11037                           postinc0	equ	0xFEE
 11038                           wreg	equ	0xFE8
 11039                           postdec1	equ	0xFE5
 11040                           fsr1l	equ	0xFE1
 11041                           indf2	equ	0xFDF
 11042                           postinc2	equ	0xFDE
 11043                           postdec2	equ	0xFDD
 11044                           fsr2h	equ	0xFDA
 11045                           fsr2l	equ	0xFD9
 11046                           status	equ	0xFD8
 11047                           
 11048 ;; *************** function _comunicarTeste *****************
 11049 ;; Defined at:
 11050 ;;		line 66 in file "comunicacao.h"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;		None
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;		None
 11055 ;; Return value:  Size  Location     Type
 11056 ;;                  1    wreg      void 
 11057 ;; Registers used:
 11058 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11059 ;; Tracked objects:
 11060 ;;		On entry : 0/0
 11061 ;;		On exit  : 0/0
 11062 ;;		Unchanged: 0/0
 11063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11064 ;;      Params:         0       0       0       0       0       0       0
 11065 ;;      Locals:         0       2       0       0       0       0       0
 11066 ;;      Temps:          0       2       0       0       0       0       0
 11067 ;;      Totals:         0       4       0       0       0       0       0
 11068 ;;Total ram usage:        4 bytes
 11069 ;; Hardware stack levels used:    1
 11070 ;; Hardware stack levels required when called:    9
 11071 ;; This function calls:
 11072 ;;		_aguardaBuffer
 11073 ;;		_delay
 11074 ;;		_limparBuffer
 11075 ;;		_printf
 11076 ;;		_writeChar
 11077 ;; This function is called by:
 11078 ;;		_configuraTelefones
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           	psect	text29
 11083  00260A                     __ptext29:
 11084                           	opt stack 0
 11085  00260A                     _comunicarTeste:
 11086                           	opt stack 0
 11087  00260A  FFFF               	dw	65535	; assembler added errata NOP
 11088                           
 11089                           ;comunicacao.h: 67: switch (etapaComunicacao) {
 11090                           
 11091                           ;incstack = 0
 11092  00260C  D0D1               	goto	l339
 11093  00260E  FFFF               	dw	65535	; assembler added errata NOP
 11094                           
 11095                           ;comunicacao.h: 69: limparBuffer();
 11096  002610  EC25  F037         	call	_limparBuffer	;wreg free
 11097                           
 11098                           ;comunicacao.h: 70: printf("AT\r\n");
 11099  002614  0EDD               	movlw	low STR_4
 11100  002616  0100               	movlb	0	; () banked
 11101  002618  6FA1               	movwf	printf@f& (0+255),b
 11102  00261A  0E7F               	movlw	high STR_4
 11103  00261C  6FA2               	movwf	(printf@f+1)& (0+255),b
 11104  00261E  EC27  F038         	call	_printf	;wreg free
 11105                           
 11106                           ;comunicacao.h: 71: etapaComunicacao++;
 11107  002622  4A62               	infsnz	_etapaComunicacao,f,c
 11108  002624  2A63               	incf	_etapaComunicacao+1,f,c
 11109                           
 11110                           ;comunicacao.h: 72: timerEtapaComunicacao = 5;
 11111  002626  0E05               	movlw	5
 11112  002628  0100               	movlb	0	; () banked
 11113  00262A  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 11114                           
 11115                           ;comunicacao.h: 73: break;
 11116  00262C  D0DC               	goto	l341
 11117  00262E  FFFF               	dw	65535	; assembler added errata NOP
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;comunicacao.h: 75: if (aguardaBuffer("OK")) {
 11121                           
 11122                           ; BSR set to: 0
 11123  002630  0EF9               	movlw	low STR_5
 11124  002632  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11125  002634  0E7F               	movlw	high STR_5
 11126  002636  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11127  002638  EC09  F038         	call	_aguardaBuffer	;wreg free
 11128  00263C  0900               	iorlw	0
 11129  00263E  B4D8               	btfsc	status,2,c
 11130  002640  D00E               	goto	l343
 11131                           
 11132                           ;comunicacao.h: 76: limparBuffer();
 11133  002642  EC25  F037         	call	_limparBuffer	;wreg free
 11134                           
 11135                           ;comunicacao.h: 77: printf("AT+CMGF=1\r\n");
 11136  002646  0EAD               	movlw	low STR_10
 11137  002648  0100               	movlb	0	; () banked
 11138  00264A  6FA1               	movwf	printf@f& (0+255),b
 11139  00264C  0E7E               	movlw	high STR_10
 11140  00264E  6FA2               	movwf	(printf@f+1)& (0+255),b
 11141  002650  EC27  F038         	call	_printf	;wreg free
 11142                           
 11143                           ;comunicacao.h: 78: etapaComunicacao++;
 11144  002654  4A62               	infsnz	_etapaComunicacao,f,c
 11145  002656  2A63               	incf	_etapaComunicacao+1,f,c
 11146                           
 11147                           ;comunicacao.h: 79: timerEtapaComunicacao = 5;
 11148  002658  0E05               	movlw	5
 11149  00265A  0100               	movlb	0	; () banked
 11150  00265C  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 11151  00265E                     l343:
 11152  00265E  FFFF               	dw	65535	; assembler added errata NOP
 11153                           
 11154                           ;comunicacao.h: 80: }
 11155                           ;comunicacao.h: 81: if (!timerEtapaComunicacao) {
 11156                           
 11157                           ; BSR set to: 0
 11158  002660  0100               	movlb	0	; () banked
 11159  002662  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 11160  002664  A4D8               	btfss	status,2,c
 11161  002666  D0BF               	goto	l341
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;comunicacao.h: 82: etapaComunicacao = 0;
 11165  002668  0E00               	movlw	0
 11166  00266A  6E63               	movwf	_etapaComunicacao+1,c
 11167  00266C  0E00               	movlw	0
 11168  00266E  6E62               	movwf	_etapaComunicacao,c
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;comunicacao.h: 83: writeChar(0x1A);
 11172  002670  0E1A               	movlw	26
 11173  002672  6F80               	movwf	writeChar@hex& (0+255),b
 11174  002674  0E00               	movlw	0
 11175  002676  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 11176  002678  ECD2  F035         	call	_writeChar	;wreg free
 11177                           
 11178                           ;comunicacao.h: 84: }
 11179                           ;comunicacao.h: 85: break;
 11180  00267C  D0B4               	goto	l341
 11181  00267E  FFFF               	dw	65535	; assembler added errata NOP
 11182                           
 11183                           ;comunicacao.h: 87: if (aguardaBuffer("OK")) {
 11184  002680  0EF9               	movlw	low STR_5
 11185  002682  0100               	movlb	0	; () banked
 11186  002684  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11187  002686  0E7F               	movlw	high STR_5
 11188  002688  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11189  00268A  EC09  F038         	call	_aguardaBuffer	;wreg free
 11190  00268E  0900               	iorlw	0
 11191  002690  B4D8               	btfsc	status,2,c
 11192  002692  D083               	goto	L46
 11193                           
 11194                           ;comunicacao.h: 88: limparBuffer();
 11195  002694  EC25  F037         	call	_limparBuffer	;wreg free
 11196                           
 11197                           ;comunicacao.h: 89: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
 11198  002698  0100               	movlb	0	; () banked
 11199  00269A  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 11200  00269C  B4D8               	btfsc	status,2,c
 11201  00269E  D004               	goto	l348
 11202                           
 11203                           ; BSR set to: 0
 11204  0026A0  0EC7               	movlw	low _tel2
 11205  0026A2  6FBD               	movwf	_comunicarTeste$1370& (0+255),b
 11206  0026A4  0E01               	movlw	high _tel2
 11207  0026A6  D004               	goto	L21
 11208  0026A8                     l348:
 11209  0026A8  FFFF               	dw	65535	; assembler added errata NOP
 11210                           
 11211                           ; BSR set to: 0
 11212                           
 11213                           ; BSR set to: 0
 11214  0026AA  0ED3               	movlw	low _tel1
 11215  0026AC  6FBD               	movwf	_comunicarTeste$1370& (0+255),b
 11216  0026AE  0E01               	movlw	high _tel1
 11217  0026B0                     L21:
 11218  0026B0  FFFF               	dw	65535	; assembler added errata NOP
 11219  0026B2  6FBE               	movwf	(_comunicarTeste$1370+1)& (0+255),b
 11220                           
 11221                           ; BSR set to: 0
 11222                           
 11223                           ; BSR set to: 0
 11224  0026B4  0E35               	movlw	low STR_12
 11225  0026B6  6FA1               	movwf	printf@f& (0+255),b
 11226  0026B8  0E7D               	movlw	high STR_12
 11227  0026BA  6FA2               	movwf	(printf@f+1)& (0+255),b
 11228  0026BC  C0BD  F0A3         	movff	_comunicarTeste$1370,?_printf+2
 11229  0026C0  C0BE  F0A4         	movff	_comunicarTeste$1370+1,?_printf+3
 11230  0026C4  EC27  F038         	call	_printf	;wreg free
 11231                           
 11232                           ;comunicacao.h: 90: timerEtapaComunicacao = 5;
 11233  0026C8  0E05               	movlw	5
 11234  0026CA  0100               	movlb	0	; () banked
 11235  0026CC  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;comunicacao.h: 91: etapaComunicacao++;
 11239  0026CE  4A62               	infsnz	_etapaComunicacao,f,c
 11240  0026D0  2A63               	incf	_etapaComunicacao+1,f,c
 11241                           
 11242                           ;comunicacao.h: 92: break;
 11243  0026D2  D089               	goto	l341
 11244  0026D4  FFFF               	dw	65535	; assembler added errata NOP
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;comunicacao.h: 99: if (aguardaBuffer(">")) {
 11248                           
 11249                           ; BSR set to: 0
 11250  0026D6  0EFC               	movlw	low STR_13
 11251  0026D8  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11252  0026DA  0E7F               	movlw	high STR_13
 11253  0026DC  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11254  0026DE  EC09  F038         	call	_aguardaBuffer	;wreg free
 11255  0026E2  0900               	iorlw	0
 11256  0026E4  B4D8               	btfsc	status,2,c
 11257  0026E6  D059               	goto	L46
 11258                           
 11259                           ;comunicacao.h: 100: limparBuffer();
 11260  0026E8  EC25  F037         	call	_limparBuffer	;wreg free
 11261                           
 11262                           ;comunicacao.h: 101: printf("TECHNOW Sistemas embarcados\r\n\r\nTeste manual de comunica
      +                          cao.\r\nData: %02d/%02d/%02d %02d:%02d:%02d\r\n\r\n\r\nVersao do sistema: %s\r\n",
 11263                           ;comunicacao.h: 102: _dia, _mes, _ano, _hor, _min, _sec, "Jul 16 2020");
 11264  0026EC  0EAB               	movlw	low STR_14
 11265  0026EE  0100               	movlb	0	; () banked
 11266  0026F0  6FA1               	movwf	printf@f& (0+255),b
 11267  0026F2  0E7A               	movlw	high STR_14
 11268  0026F4  6FA2               	movwf	(printf@f+1)& (0+255),b
 11269  0026F6  C0EE  F0A3         	movff	__dia,?_printf+2
 11270  0026FA  6BA4               	clrf	(?_printf+3)& (0+255),b
 11271  0026FC  C0ED  F0A5         	movff	__mes,?_printf+4
 11272  002700  6BA6               	clrf	(?_printf+5)& (0+255),b
 11273  002702  C0EC  F0A7         	movff	__ano,?_printf+6
 11274  002706  6BA8               	clrf	(?_printf+7)& (0+255),b
 11275  002708  C0EF  F0A9         	movff	__hor,?_printf+8
 11276  00270C  6BAA               	clrf	(?_printf+9)& (0+255),b
 11277  00270E  C0F0  F0AB         	movff	__min,?_printf+10
 11278  002712  6BAC               	clrf	(?_printf+11)& (0+255),b
 11279  002714  C0F1  F0AD         	movff	__sec,?_printf+12
 11280  002718  6BAE               	clrf	(?_printf+13)& (0+255),b
 11281  00271A  0EB9               	movlw	low STR_15
 11282  00271C  6FAF               	movwf	(?_printf+14)& (0+255),b
 11283  00271E  0E7E               	movlw	high STR_15
 11284  002720  6FB0               	movwf	(?_printf+15)& (0+255),b
 11285  002722  EC27  F038         	call	_printf	;wreg free
 11286                           
 11287                           ;comunicacao.h: 103: delay(1000);
 11288  002726  0E03               	movlw	3
 11289  002728  0100               	movlb	0	; () banked
 11290  00272A  6F81               	movwf	(delay@x+1)& (0+255),b
 11291  00272C  0EE8               	movlw	232
 11292  00272E  6F80               	movwf	delay@x& (0+255),b
 11293  002730  EC0A  F037         	call	_delay	;wreg free
 11294                           
 11295                           ;comunicacao.h: 104: writeChar(0x1A);
 11296  002734  0E1A               	movlw	26
 11297  002736  0100               	movlb	0	; () banked
 11298  002738  6F80               	movwf	writeChar@hex& (0+255),b
 11299  00273A  0E00               	movlw	0
 11300  00273C  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 11301  00273E  ECD2  F035         	call	_writeChar	;wreg free
 11302                           
 11303                           ;comunicacao.h: 105: etapaComunicacao++;
 11304  002742  4A62               	infsnz	_etapaComunicacao,f,c
 11305  002744  2A63               	incf	_etapaComunicacao+1,f,c
 11306                           
 11307                           ;comunicacao.h: 106: timerEtapaComunicacao = 30;
 11308  002746  0E1E               	movlw	30
 11309  002748  0100               	movlb	0	; () banked
 11310  00274A  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 11311                           
 11312                           ; BSR set to: 0
 11313  00274C  D026               	goto	L46
 11314  00274E  FFFF               	dw	65535	; assembler added errata NOP
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;comunicacao.h: 113: if (aguardaBuffer("OK")) {
 11318                           
 11319                           ; BSR set to: 0
 11320  002750  0EF9               	movlw	low STR_5
 11321  002752  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11322  002754  0E7F               	movlw	high STR_5
 11323  002756  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11324  002758  EC09  F038         	call	_aguardaBuffer	;wreg free
 11325  00275C  0900               	iorlw	0
 11326  00275E  B4D8               	btfsc	status,2,c
 11327  002760  D011               	goto	l356
 11328                           
 11329                           ;comunicacao.h: 114: if (telefoneSelecionado == 0) {
 11330  002762  0100               	movlb	0	; () banked
 11331  002764  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 11332  002766  A4D8               	btfss	status,2,c
 11333  002768  D003               	goto	l357
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;comunicacao.h: 115: telefoneSelecionado = 1;
 11337  00276A  0E01               	movlw	1
 11338  00276C  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 11339                           
 11340                           ;comunicacao.h: 116: } else {
 11341  00276E  D005               	goto	l358
 11342  002770                     l357:
 11343  002770  FFFF               	dw	65535	; assembler added errata NOP
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;comunicacao.h: 117: telefoneSelecionado = 0;
 11347                           
 11348                           ; BSR set to: 0
 11349  002772  0E00               	movlw	0
 11350  002774  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 11351                           
 11352                           ;comunicacao.h: 118: gsmOcupado = 0;
 11353  002776  0E00               	movlw	0
 11354  002778  6FF5               	movwf	_gsmOcupado& (0+255),b
 11355  00277A                     l358:
 11356  00277A  FFFF               	dw	65535	; assembler added errata NOP
 11357                           
 11358                           ; BSR set to: 0
 11359                           ;comunicacao.h: 119: }
 11360                           ;comunicacao.h: 120: etapaComunicacao = 0;
 11361  00277C  0E00               	movlw	0
 11362  00277E  6E63               	movwf	_etapaComunicacao+1,c
 11363  002780  0E00               	movlw	0
 11364  002782  6E62               	movwf	_etapaComunicacao,c
 11365  002784                     l356:
 11366  002784  FFFF               	dw	65535	; assembler added errata NOP
 11367                           
 11368                           ;comunicacao.h: 121: }
 11369                           ;comunicacao.h: 122: if (aguardaBuffer("ERROR") || !timerEtapaComunicacao) {
 11370                           
 11371                           ; BSR set to: 0
 11372  002786  0ED7               	movlw	low STR_17
 11373  002788  0100               	movlb	0	; () banked
 11374  00278A  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11375  00278C  0E7F               	movlw	high STR_17
 11376  00278E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11377  002790  EC09  F038         	call	_aguardaBuffer	;wreg free
 11378  002794  0900               	iorlw	0
 11379  002796  A4D8               	btfss	status,2,c
 11380  002798  D005               	goto	u6060
 11381  00279A                     L46:
 11382  00279A  FFFF               	dw	65535	; assembler added errata NOP
 11383  00279C  0100               	movlb	0	; () banked
 11384  00279E  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 11385  0027A0  A4D8               	btfss	status,2,c
 11386  0027A2  D021               	goto	l341
 11387  0027A4                     u6060:
 11388  0027A4  FFFF               	dw	65535	; assembler added errata NOP
 11389                           
 11390                           ;comunicacao.h: 127: etapaComunicacao = 0;
 11391                           
 11392                           ;comunicacao.h: 126: default:
 11393                           
 11394                           ;comunicacao.h: 124: }
 11395                           ;comunicacao.h: 125: break;
 11396                           
 11397                           ;comunicacao.h: 123: etapaComunicacao = 0;
 11398                           
 11399                           ; BSR set to: 0
 11400  0027A6  0E00               	movlw	0
 11401  0027A8  6E63               	movwf	_etapaComunicacao+1,c
 11402  0027AA  0E00               	movlw	0
 11403  0027AC  6E62               	movwf	_etapaComunicacao,c
 11404                           
 11405                           ;comunicacao.h: 130: }
 11406                           
 11407                           ;comunicacao.h: 128: break;
 11408  0027AE  D01B               	goto	l341
 11409  0027B0                     l339:
 11410  0027B0  FFFF               	dw	65535	; assembler added errata NOP
 11411  0027B2  C062  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
 11412  0027B6  C063  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
 11413                           
 11414                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11415                           ; Switch size 1, requested type "space"
 11416                           ; Number of cases is 1, Range of values is 0 to 0
 11417                           ; switch strategies available:
 11418                           ; Name         Instructions Cycles
 11419                           ; simple_byte            4     3 (average)
 11420                           ;	Chosen strategy is simple_byte
 11421  0027BA  0100               	movlb	0	; () banked
 11422  0027BC  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
 11423  0027BE  0A00               	xorlw	0	; case 0
 11424  0027C0  A4D8               	btfss	status,2,c
 11425  0027C2  D7F0               	goto	u6060
 11426                           
 11427                           ; BSR set to: 0
 11428                           ; Switch size 1, requested type "space"
 11429                           ; Number of cases is 5, Range of values is 0 to 4
 11430                           ; switch strategies available:
 11431                           ; Name         Instructions Cycles
 11432                           ; simple_byte           16     9 (average)
 11433                           ;	Chosen strategy is simple_byte
 11434  0027C4  51BB               	movf	??_comunicarTeste& (0+255),w,b
 11435  0027C6  0A00               	xorlw	0	; case 0
 11436  0027C8  B4D8               	btfsc	status,2,c
 11437  0027CA  D721               	goto	l340
 11438  0027CC  0A01               	xorlw	1	; case 1
 11439  0027CE  B4D8               	btfsc	status,2,c
 11440  0027D0  D72E               	goto	l342
 11441  0027D2  0A03               	xorlw	3	; case 2
 11442  0027D4  B4D8               	btfsc	status,2,c
 11443  0027D6  D753               	goto	l345
 11444  0027D8  0A01               	xorlw	1	; case 3
 11445  0027DA  B4D8               	btfsc	status,2,c
 11446  0027DC  D77B               	goto	l352
 11447  0027DE  0A07               	xorlw	7	; case 4
 11448  0027E0  B4D8               	btfsc	status,2,c
 11449  0027E2  D7B5               	goto	l355
 11450  0027E4  D7DF               	goto	u6060
 11451  0027E6                     l341:
 11452  0027E6  FFFF               	dw	65535	; assembler added errata NOP
 11453                           
 11454                           ; BSR set to: 0
 11455  0027E8  0012               	return		;funcret
 11456  0027EA  FFFF               	dw	65535	; errata NOP
 11457  0027EC                     __end_of_comunicarTeste:
 11458                           	opt stack 0
 11459                           tblptru	equ	0xFF8
 11460                           tblptrh	equ	0xFF7
 11461                           tblptrl	equ	0xFF6
 11462                           tablat	equ	0xFF5
 11463                           prodh	equ	0xFF4
 11464                           prodl	equ	0xFF3
 11465                           postinc0	equ	0xFEE
 11466                           wreg	equ	0xFE8
 11467                           postdec1	equ	0xFE5
 11468                           fsr1l	equ	0xFE1
 11469                           indf2	equ	0xFDF
 11470                           postinc2	equ	0xFDE
 11471                           postdec2	equ	0xFDD
 11472                           fsr2h	equ	0xFDA
 11473                           fsr2l	equ	0xFD9
 11474                           status	equ	0xFD8
 11475                           
 11476 ;; *************** function _configuraRegistradores *****************
 11477 ;; Defined at:
 11478 ;;		line 7 in file "registradores.h"
 11479 ;; Parameters:    Size  Location     Type
 11480 ;;		None
 11481 ;; Auto vars:     Size  Location     Type
 11482 ;;		None
 11483 ;; Return value:  Size  Location     Type
 11484 ;;                  1    wreg      void 
 11485 ;; Registers used:
 11486 ;;		wreg, status,2
 11487 ;; Tracked objects:
 11488 ;;		On entry : 0/0
 11489 ;;		On exit  : 0/0
 11490 ;;		Unchanged: 0/0
 11491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11492 ;;      Params:         0       0       0       0       0       0       0
 11493 ;;      Locals:         0       0       0       0       0       0       0
 11494 ;;      Temps:          0       0       0       0       0       0       0
 11495 ;;      Totals:         0       0       0       0       0       0       0
 11496 ;;Total ram usage:        0 bytes
 11497 ;; Hardware stack levels used:    1
 11498 ;; Hardware stack levels required when called:    6
 11499 ;; This function calls:
 11500 ;;		Nothing
 11501 ;; This function is called by:
 11502 ;;		_main
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506                           	psect	text30
 11507  00763C                     __ptext30:
 11508                           	opt stack 0
 11509  00763C                     _configuraRegistradores:
 11510                           	opt stack 0
 11511  00763C  FFFF               	dw	65535	; assembler added errata NOP
 11512                           
 11513                           ;registradores.h: 9: ADCON0 = 0b00000001;
 11514                           
 11515                           ;incstack = 0
 11516  00763E  0E01               	movlw	1
 11517  007640  6EC2               	movwf	4034,c	;volatile
 11518                           
 11519                           ;registradores.h: 10: ADCON1 = 0b11001110;
 11520  007642  0ECE               	movlw	206
 11521  007644  6EC1               	movwf	4033,c	;volatile
 11522                           
 11523                           ;registradores.h: 11: TRISAbits.RA0 = 1;
 11524  007646  8092               	bsf	3986,0,c	;volatile
 11525                           
 11526                           ;registradores.h: 12: PORTAbits.AN0 = 0;
 11527  007648  9080               	bcf	3968,0,c	;volatile
 11528                           
 11529                           ;registradores.h: 17: T0CON = 0b10000001;
 11530  00764A  0E81               	movlw	129
 11531  00764C  6ED5               	movwf	4053,c	;volatile
 11532                           
 11533                           ;registradores.h: 18: INTCON = 0b11100100;
 11534  00764E  0EE4               	movlw	228
 11535  007650  6EF2               	movwf	intcon,c	;volatile
 11536                           
 11537                           ;registradores.h: 19: INTCON2 = 0b00000000;
 11538  007652  0E00               	movlw	0
 11539  007654  6EF1               	movwf	intcon2,c	;volatile
 11540                           
 11541                           ;registradores.h: 20: INTCON3 = 0b00000000;
 11542  007656  0E00               	movlw	0
 11543  007658  6EF0               	movwf	intcon3,c	;volatile
 11544                           
 11545                           ;registradores.h: 23: TRISDbits.RD5 = 0;
 11546  00765A  9A95               	bcf	3989,5,c	;volatile
 11547                           
 11548                           ;registradores.h: 24: TRISDbits.RD4 = 0;
 11549  00765C  9895               	bcf	3989,4,c	;volatile
 11550                           
 11551                           ;registradores.h: 25: TRISDbits.RD3 = 0;
 11552  00765E  9695               	bcf	3989,3,c	;volatile
 11553                           
 11554                           ;registradores.h: 26: TRISDbits.RD2 = 0;
 11555  007660  9495               	bcf	3989,2,c	;volatile
 11556                           
 11557                           ;registradores.h: 27: TRISDbits.RD1 = 0;
 11558  007662  9295               	bcf	3989,1,c	;volatile
 11559                           
 11560                           ;registradores.h: 28: TRISDbits.RD0 = 0;
 11561  007664  9095               	bcf	3989,0,c	;volatile
 11562                           
 11563                           ;registradores.h: 31: TRISCbits.TRISC6 = 0;
 11564  007666  9C94               	bcf	3988,6,c	;volatile
 11565                           
 11566                           ;registradores.h: 32: TRISCbits.TRISC7 = 1;
 11567  007668  8E94               	bsf	3988,7,c	;volatile
 11568                           
 11569                           ;registradores.h: 33: TXSTAbits.TXEN = 1;
 11570  00766A  8AAC               	bsf	4012,5,c	;volatile
 11571                           
 11572                           ;registradores.h: 34: TXSTAbits.BRGH = 1;
 11573  00766C  84AC               	bsf	4012,2,c	;volatile
 11574                           
 11575                           ;registradores.h: 35: TXSTAbits.SYNC = 0;
 11576  00766E  98AC               	bcf	4012,4,c	;volatile
 11577                           
 11578                           ;registradores.h: 36: RCSTAbits.SPEN = 1;
 11579  007670  8EAB               	bsf	4011,7,c	;volatile
 11580                           
 11581                           ;registradores.h: 37: RCSTAbits.CREN = 1;
 11582  007672  88AB               	bsf	4011,4,c	;volatile
 11583                           
 11584                           ;registradores.h: 40: SPBRG = 25;
 11585  007674  0E19               	movlw	25
 11586  007676  6EAF               	movwf	4015,c	;volatile
 11587                           
 11588                           ;registradores.h: 41: INTCONbits.GIE = 1;
 11589  007678  8EF2               	bsf	intcon,7,c	;volatile
 11590                           
 11591                           ;registradores.h: 42: INTCONbits.PEIE = 1;
 11592  00767A  8CF2               	bsf	intcon,6,c	;volatile
 11593                           
 11594                           ;registradores.h: 43: PIR1bits.RCIF = 0;
 11595  00767C  9A9E               	bcf	3998,5,c	;volatile
 11596                           
 11597                           ;registradores.h: 44: PIE1bits.RCIE = 1;
 11598  00767E  8A9D               	bsf	3997,5,c	;volatile
 11599                           
 11600                           ;registradores.h: 47: INTCONbits.RBIE = 0;
 11601  007680  96F2               	bcf	intcon,3,c	;volatile
 11602                           
 11603                           ;registradores.h: 48: TRISAbits.RA2 = 1;
 11604  007682  8492               	bsf	3986,2,c	;volatile
 11605                           
 11606                           ;registradores.h: 49: PORTAbits.RA2 = 1;
 11607  007684  8480               	bsf	3968,2,c	;volatile
 11608                           
 11609                           ;registradores.h: 50: TRISAbits.RA5 = 1;
 11610  007686  8A92               	bsf	3986,5,c	;volatile
 11611                           
 11612                           ;registradores.h: 51: TRISCbits.RC0 = 1;
 11613  007688  8094               	bsf	3988,0,c	;volatile
 11614                           
 11615                           ;registradores.h: 52: TRISAbits.RA1 = 0;
 11616  00768A  9292               	bcf	3986,1,c	;volatile
 11617                           
 11618                           ;registradores.h: 53: PORTAbits.RA1 = 1;
 11619  00768C  8280               	bsf	3968,1,c	;volatile
 11620                           
 11621                           ;registradores.h: 56: TRISBbits.RB2 = 1;
 11622  00768E  8493               	bsf	3987,2,c	;volatile
 11623                           
 11624                           ;registradores.h: 57: TRISBbits.RB3 = 1;
 11625  007690  8693               	bsf	3987,3,c	;volatile
 11626                           
 11627                           ;registradores.h: 58: TRISBbits.RB4 = 1;
 11628  007692  8893               	bsf	3987,4,c	;volatile
 11629                           
 11630                           ;registradores.h: 59: TRISBbits.RB5 = 1;
 11631  007694  8A93               	bsf	3987,5,c	;volatile
 11632                           
 11633                           ;registradores.h: 62: TRISDbits.RD7 = 0;
 11634  007696  9E95               	bcf	3989,7,c	;volatile
 11635                           
 11636                           ;registradores.h: 63: TRISAbits.RA3 = 0;
 11637  007698  9692               	bcf	3986,3,c	;volatile
 11638                           
 11639                           ;registradores.h: 64: TRISAbits.RA4 = 0;
 11640  00769A  9892               	bcf	3986,4,c	;volatile
 11641                           
 11642                           ;registradores.h: 65: TRISEbits.RE0 = 0;
 11643  00769C  9096               	bcf	3990,0,c	;volatile
 11644                           
 11645                           ;registradores.h: 66: TRISEbits.RE1 = 0;
 11646  00769E  9296               	bcf	3990,1,c	;volatile
 11647                           
 11648                           ;registradores.h: 67: TRISEbits.RE2 = 0;
 11649  0076A0  9496               	bcf	3990,2,c	;volatile
 11650                           
 11651                           ;registradores.h: 68: TRISCbits.RC1 = 0;
 11652  0076A2  9294               	bcf	3988,1,c	;volatile
 11653                           
 11654                           ;registradores.h: 70: PORTDbits.RD7 = 0;
 11655  0076A4  9E83               	bcf	3971,7,c	;volatile
 11656                           
 11657                           ;registradores.h: 71: PORTAbits.RA3 = 0;
 11658  0076A6  9680               	bcf	3968,3,c	;volatile
 11659                           
 11660                           ;registradores.h: 72: PORTAbits.RA4 = 0;
 11661  0076A8  9880               	bcf	3968,4,c	;volatile
 11662                           
 11663                           ;registradores.h: 73: PORTEbits.RE0 = 0;
 11664  0076AA  9084               	bcf	3972,0,c	;volatile
 11665                           
 11666                           ;registradores.h: 74: PORTEbits.RE1 = 0;
 11667  0076AC  9284               	bcf	3972,1,c	;volatile
 11668                           
 11669                           ;registradores.h: 75: PORTEbits.RE2 = 0;
 11670  0076AE  9484               	bcf	3972,2,c	;volatile
 11671                           
 11672                           ;registradores.h: 76: PORTCbits.RC1 = 0;
 11673  0076B0  9282               	bcf	3970,1,c	;volatile
 11674  0076B2  0012               	return		;funcret
 11675  0076B4  FFFF               	dw	65535	; errata NOP
 11676  0076B6                     __end_of_configuraRegistradores:
 11677                           	opt stack 0
 11678                           tblptru	equ	0xFF8
 11679                           tblptrh	equ	0xFF7
 11680                           tblptrl	equ	0xFF6
 11681                           tablat	equ	0xFF5
 11682                           prodh	equ	0xFF4
 11683                           prodl	equ	0xFF3
 11684                           intcon	equ	0xFF2
 11685                           intcon2	equ	0xFF1
 11686                           intcon3	equ	0xFF0
 11687                           postinc0	equ	0xFEE
 11688                           wreg	equ	0xFE8
 11689                           postdec1	equ	0xFE5
 11690                           fsr1l	equ	0xFE1
 11691                           indf2	equ	0xFDF
 11692                           postinc2	equ	0xFDE
 11693                           postdec2	equ	0xFDD
 11694                           fsr2h	equ	0xFDA
 11695                           fsr2l	equ	0xFD9
 11696                           status	equ	0xFD8
 11697                           
 11698 ;; *************** function _atualizarLCD *****************
 11699 ;; Defined at:
 11700 ;;		line 142 in file "lcd.h"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;  line1           2    8[BANK0 ] PTR unsigned char 
 11703 ;;		 -> line1(21), 
 11704 ;;  line2           2   10[BANK0 ] PTR unsigned char 
 11705 ;;		 -> line2(21), 
 11706 ;;  line3           2   12[BANK0 ] PTR unsigned char 
 11707 ;;		 -> line3(21), 
 11708 ;;  line4           2   14[BANK0 ] PTR unsigned char 
 11709 ;;		 -> line4(21), 
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;  lcdEstado       4   21[BANK0 ] long 
 11712 ;;  i               1   25[BANK0 ] unsigned char 
 11713 ;; Return value:  Size  Location     Type
 11714 ;;                  1    wreg      void 
 11715 ;; Registers used:
 11716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : 0/0
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11722 ;;      Params:         0       8       0       0       0       0       0
 11723 ;;      Locals:         0       5       0       0       0       0       0
 11724 ;;      Temps:          0       5       0       0       0       0       0
 11725 ;;      Totals:         0      18       0       0       0       0       0
 11726 ;;Total ram usage:       18 bytes
 11727 ;; Hardware stack levels used:    1
 11728 ;; Hardware stack levels required when called:    9
 11729 ;; This function calls:
 11730 ;;		_Lcd_Set_Cursor
 11731 ;;		_Lcd_Write_String
 11732 ;; This function is called by:
 11733 ;;		_main
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           	psect	text31
 11738  0023EE                     __ptext31:
 11739                           	opt stack 0
 11740  0023EE                     _atualizarLCD:
 11741                           	opt stack 0
 11742  0023EE  FFFF               	dw	65535	; assembler added errata NOP
 11743                           
 11744                           ;lcd.h: 144: char i = 0;
 11745                           
 11746                           ;incstack = 0
 11747  0023F0  0E00               	movlw	0
 11748  0023F2  0100               	movlb	0	; () banked
 11749  0023F4  6F99               	movwf	atualizarLCD@i& (0+255),b
 11750                           
 11751                           ;lcd.h: 145: long lcdEstado = 0;
 11752  0023F6  0E00               	movlw	0
 11753  0023F8  6F95               	movwf	atualizarLCD@lcdEstado& (0+255),b
 11754  0023FA  0E00               	movlw	0
 11755  0023FC  6F96               	movwf	(atualizarLCD@lcdEstado+1)& (0+255),b
 11756  0023FE  0E00               	movlw	0
 11757  002400  6F97               	movwf	(atualizarLCD@lcdEstado+2)& (0+255),b
 11758  002402  0E00               	movlw	0
 11759  002404  6F98               	movwf	(atualizarLCD@lcdEstado+3)& (0+255),b
 11760                           
 11761                           ;lcd.h: 147: for (i = 0; i < 20; i++) {
 11762  002406  0E00               	movlw	0
 11763  002408  6F99               	movwf	atualizarLCD@i& (0+255),b
 11764  00240A                     l6993:
 11765  00240A  FFFF               	dw	65535	; assembler added errata NOP
 11766                           
 11767                           ; BSR set to: 0
 11768  00240C  0E13               	movlw	19
 11769  00240E  6599               	cpfsgt	atualizarLCD@i& (0+255),b
 11770  002410  D001               	goto	l641
 11771  002412  D077               	goto	u7390
 11772  002414                     l641:
 11773  002414  FFFF               	dw	65535	; assembler added errata NOP
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;lcd.h: 148: lcdEstado += (int) line1[i] + 1;
 11777                           
 11778                           ; BSR set to: 0
 11779  002416  5199               	movf	atualizarLCD@i& (0+255),w,b
 11780  002418  0D01               	mullw	1
 11781  00241A  50F3               	movf	prodl,w,c
 11782  00241C  2588               	addwf	atualizarLCD@line1& (0+255),w,b
 11783  00241E  6ED9               	movwf	fsr2l,c
 11784  002420  50F4               	movf	prodh,w,c
 11785  002422  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
 11786  002424  6EDA               	movwf	fsr2h,c
 11787  002426  50DF               	movf	indf2,w,c
 11788  002428  6F90               	movwf	??_atualizarLCD& (0+255),b
 11789  00242A  0E01               	movlw	1
 11790  00242C  2590               	addwf	??_atualizarLCD& (0+255),w,b
 11791  00242E  6F91               	movwf	(??_atualizarLCD+1)& (0+255),b
 11792  002430  6B92               	clrf	(??_atualizarLCD+2)& (0+255),b
 11793  002432  0E00               	movlw	0
 11794  002434  2392               	addwfc	(??_atualizarLCD+2)& (0+255),f,b
 11795  002436  6B93               	clrf	(??_atualizarLCD+3)& (0+255),b
 11796  002438  BF92               	btfsc	(??_atualizarLCD+2)& (0+255),7,b
 11797  00243A  0793               	decf	(??_atualizarLCD+3)& (0+255),f,b
 11798  00243C  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11799  00243E  6F94               	movwf	(??_atualizarLCD+4)& (0+255),b
 11800  002440  5191               	movf	(??_atualizarLCD+1)& (0+255),w,b
 11801  002442  2795               	addwf	atualizarLCD@lcdEstado& (0+255),f,b
 11802  002444  5192               	movf	(??_atualizarLCD+2)& (0+255),w,b
 11803  002446  2396               	addwfc	(atualizarLCD@lcdEstado+1)& (0+255),f,b
 11804  002448  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11805  00244A  2397               	addwfc	(atualizarLCD@lcdEstado+2)& (0+255),f,b
 11806  00244C  5194               	movf	(??_atualizarLCD+4)& (0+255),w,b
 11807  00244E  2398               	addwfc	(atualizarLCD@lcdEstado+3)& (0+255),f,b
 11808                           
 11809                           ;lcd.h: 149: lcdEstado += (int) line2[i] + 2;
 11810  002450  5199               	movf	atualizarLCD@i& (0+255),w,b
 11811  002452  0D01               	mullw	1
 11812  002454  50F3               	movf	prodl,w,c
 11813  002456  258A               	addwf	atualizarLCD@line2& (0+255),w,b
 11814  002458  6ED9               	movwf	fsr2l,c
 11815  00245A  50F4               	movf	prodh,w,c
 11816  00245C  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
 11817  00245E  6EDA               	movwf	fsr2h,c
 11818  002460  50DF               	movf	indf2,w,c
 11819  002462  6F90               	movwf	??_atualizarLCD& (0+255),b
 11820  002464  0E02               	movlw	2
 11821  002466  2590               	addwf	??_atualizarLCD& (0+255),w,b
 11822  002468  6F91               	movwf	(??_atualizarLCD+1)& (0+255),b
 11823  00246A  6B92               	clrf	(??_atualizarLCD+2)& (0+255),b
 11824  00246C  0E00               	movlw	0
 11825  00246E  2392               	addwfc	(??_atualizarLCD+2)& (0+255),f,b
 11826  002470  6B93               	clrf	(??_atualizarLCD+3)& (0+255),b
 11827  002472  BF92               	btfsc	(??_atualizarLCD+2)& (0+255),7,b
 11828  002474  0793               	decf	(??_atualizarLCD+3)& (0+255),f,b
 11829  002476  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11830  002478  6F94               	movwf	(??_atualizarLCD+4)& (0+255),b
 11831  00247A  5191               	movf	(??_atualizarLCD+1)& (0+255),w,b
 11832  00247C  2795               	addwf	atualizarLCD@lcdEstado& (0+255),f,b
 11833  00247E  5192               	movf	(??_atualizarLCD+2)& (0+255),w,b
 11834  002480  2396               	addwfc	(atualizarLCD@lcdEstado+1)& (0+255),f,b
 11835  002482  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11836  002484  2397               	addwfc	(atualizarLCD@lcdEstado+2)& (0+255),f,b
 11837  002486  5194               	movf	(??_atualizarLCD+4)& (0+255),w,b
 11838  002488  2398               	addwfc	(atualizarLCD@lcdEstado+3)& (0+255),f,b
 11839                           
 11840                           ;lcd.h: 150: lcdEstado += (int) line3[i] + 3;
 11841  00248A  5199               	movf	atualizarLCD@i& (0+255),w,b
 11842  00248C  0D01               	mullw	1
 11843  00248E  50F3               	movf	prodl,w,c
 11844  002490  258C               	addwf	atualizarLCD@line3& (0+255),w,b
 11845  002492  6ED9               	movwf	fsr2l,c
 11846  002494  50F4               	movf	prodh,w,c
 11847  002496  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
 11848  002498  6EDA               	movwf	fsr2h,c
 11849  00249A  50DF               	movf	indf2,w,c
 11850  00249C  6F90               	movwf	??_atualizarLCD& (0+255),b
 11851  00249E  0E03               	movlw	3
 11852  0024A0  2590               	addwf	??_atualizarLCD& (0+255),w,b
 11853  0024A2  6F91               	movwf	(??_atualizarLCD+1)& (0+255),b
 11854  0024A4  6B92               	clrf	(??_atualizarLCD+2)& (0+255),b
 11855  0024A6  0E00               	movlw	0
 11856  0024A8  2392               	addwfc	(??_atualizarLCD+2)& (0+255),f,b
 11857  0024AA  6B93               	clrf	(??_atualizarLCD+3)& (0+255),b
 11858  0024AC  BF92               	btfsc	(??_atualizarLCD+2)& (0+255),7,b
 11859  0024AE  0793               	decf	(??_atualizarLCD+3)& (0+255),f,b
 11860  0024B0  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11861  0024B2  6F94               	movwf	(??_atualizarLCD+4)& (0+255),b
 11862  0024B4  5191               	movf	(??_atualizarLCD+1)& (0+255),w,b
 11863  0024B6  2795               	addwf	atualizarLCD@lcdEstado& (0+255),f,b
 11864  0024B8  5192               	movf	(??_atualizarLCD+2)& (0+255),w,b
 11865  0024BA  2396               	addwfc	(atualizarLCD@lcdEstado+1)& (0+255),f,b
 11866  0024BC  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11867  0024BE  2397               	addwfc	(atualizarLCD@lcdEstado+2)& (0+255),f,b
 11868  0024C0  5194               	movf	(??_atualizarLCD+4)& (0+255),w,b
 11869  0024C2  2398               	addwfc	(atualizarLCD@lcdEstado+3)& (0+255),f,b
 11870                           
 11871                           ;lcd.h: 151: lcdEstado += (int) line4[i] + 4;
 11872  0024C4  5199               	movf	atualizarLCD@i& (0+255),w,b
 11873  0024C6  0D01               	mullw	1
 11874  0024C8  50F3               	movf	prodl,w,c
 11875  0024CA  258E               	addwf	atualizarLCD@line4& (0+255),w,b
 11876  0024CC  6ED9               	movwf	fsr2l,c
 11877  0024CE  50F4               	movf	prodh,w,c
 11878  0024D0  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
 11879  0024D2  6EDA               	movwf	fsr2h,c
 11880  0024D4  50DF               	movf	indf2,w,c
 11881  0024D6  6F90               	movwf	??_atualizarLCD& (0+255),b
 11882  0024D8  0E04               	movlw	4
 11883  0024DA  2590               	addwf	??_atualizarLCD& (0+255),w,b
 11884  0024DC  6F91               	movwf	(??_atualizarLCD+1)& (0+255),b
 11885  0024DE  6B92               	clrf	(??_atualizarLCD+2)& (0+255),b
 11886  0024E0  0E00               	movlw	0
 11887  0024E2  2392               	addwfc	(??_atualizarLCD+2)& (0+255),f,b
 11888  0024E4  6B93               	clrf	(??_atualizarLCD+3)& (0+255),b
 11889  0024E6  BF92               	btfsc	(??_atualizarLCD+2)& (0+255),7,b
 11890  0024E8  0793               	decf	(??_atualizarLCD+3)& (0+255),f,b
 11891  0024EA  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11892  0024EC  6F94               	movwf	(??_atualizarLCD+4)& (0+255),b
 11893  0024EE  5191               	movf	(??_atualizarLCD+1)& (0+255),w,b
 11894  0024F0  2795               	addwf	atualizarLCD@lcdEstado& (0+255),f,b
 11895  0024F2  5192               	movf	(??_atualizarLCD+2)& (0+255),w,b
 11896  0024F4  2396               	addwfc	(atualizarLCD@lcdEstado+1)& (0+255),f,b
 11897  0024F6  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11898  0024F8  2397               	addwfc	(atualizarLCD@lcdEstado+2)& (0+255),f,b
 11899  0024FA  5194               	movf	(??_atualizarLCD+4)& (0+255),w,b
 11900  0024FC  2398               	addwfc	(atualizarLCD@lcdEstado+3)& (0+255),f,b
 11901                           
 11902                           ; BSR set to: 0
 11903  0024FE  2B99               	incf	atualizarLCD@i& (0+255),f,b
 11904  002500  D784               	goto	l6993
 11905  002502                     u7390:
 11906  002502  FFFF               	dw	65535	; assembler added errata NOP
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;lcd.h: 152: }
 11910                           ;lcd.h: 154: if (lcdEstado != ultimoEstadoLCD) {
 11911                           
 11912                           ; BSR set to: 0
 11913  002504  0101               	movlb	1	; () banked
 11914  002506  51E3               	movf	_ultimoEstadoLCD& (0+255),w,b
 11915  002508  0100               	movlb	0	; () banked
 11916  00250A  1995               	xorwf	atualizarLCD@lcdEstado& (0+255),w,b
 11917  00250C  E110               	bnz	u7400
 11918  00250E  0101               	movlb	1	; () banked
 11919  002510  51E4               	movf	(_ultimoEstadoLCD+1)& (0+255),w,b
 11920  002512  0100               	movlb	0	; () banked
 11921  002514  1996               	xorwf	(atualizarLCD@lcdEstado+1)& (0+255),w,b
 11922  002516  E10B               	bnz	u7400
 11923  002518  0101               	movlb	1	; () banked
 11924  00251A  51E5               	movf	(_ultimoEstadoLCD+2)& (0+255),w,b
 11925  00251C  0100               	movlb	0	; () banked
 11926  00251E  1997               	xorwf	(atualizarLCD@lcdEstado+2)& (0+255),w,b
 11927  002520  E106               	bnz	u7400
 11928  002522  0101               	movlb	1	; () banked
 11929  002524  51E6               	movf	(_ultimoEstadoLCD+3)& (0+255),w,b
 11930  002526  0100               	movlb	0	; () banked
 11931  002528  1998               	xorwf	(atualizarLCD@lcdEstado+3)& (0+255),w,b
 11932  00252A  B4D8               	btfsc	status,2,c
 11933  00252C  D037               	goto	l643
 11934  00252E                     u7400:
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;lcd.h: 155: ultimoEstadoLCD = lcdEstado;
 11938  00252E  C095  F1E3         	movff	atualizarLCD@lcdEstado,_ultimoEstadoLCD
 11939  002532  C096  F1E4         	movff	atualizarLCD@lcdEstado+1,_ultimoEstadoLCD+1
 11940  002536  C097  F1E5         	movff	atualizarLCD@lcdEstado+2,_ultimoEstadoLCD+2
 11941  00253A  C098  F1E6         	movff	atualizarLCD@lcdEstado+3,_ultimoEstadoLCD+3
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;lcd.h: 157: Lcd_Set_Cursor(1, 1);
 11945  00253E  0E01               	movlw	1
 11946  002540  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11947  002542  0E01               	movlw	1
 11948  002544  ECC4  F01D         	call	_Lcd_Set_Cursor
 11949                           
 11950                           ;lcd.h: 158: Lcd_Write_String(line1);
 11951  002548  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
 11952  00254C  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
 11953  002550  ECCE  F037         	call	_Lcd_Write_String	;wreg free
 11954                           
 11955                           ;lcd.h: 159: Lcd_Set_Cursor(2, 1);
 11956  002554  0E01               	movlw	1
 11957  002556  0100               	movlb	0	; () banked
 11958  002558  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11959  00255A  0E02               	movlw	2
 11960  00255C  ECC4  F01D         	call	_Lcd_Set_Cursor
 11961                           
 11962                           ;lcd.h: 160: Lcd_Write_String(line2);
 11963  002560  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
 11964  002564  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
 11965  002568  ECCE  F037         	call	_Lcd_Write_String	;wreg free
 11966                           
 11967                           ;lcd.h: 161: Lcd_Set_Cursor(3, 0);
 11968  00256C  0E00               	movlw	0
 11969  00256E  0100               	movlb	0	; () banked
 11970  002570  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11971  002572  0E03               	movlw	3
 11972  002574  ECC4  F01D         	call	_Lcd_Set_Cursor
 11973                           
 11974                           ;lcd.h: 162: Lcd_Write_String(line3);
 11975  002578  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
 11976  00257C  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
 11977  002580  ECCE  F037         	call	_Lcd_Write_String	;wreg free
 11978                           
 11979                           ;lcd.h: 163: Lcd_Set_Cursor(4, 0);
 11980  002584  0E00               	movlw	0
 11981  002586  0100               	movlb	0	; () banked
 11982  002588  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11983  00258A  0E04               	movlw	4
 11984  00258C  ECC4  F01D         	call	_Lcd_Set_Cursor
 11985                           
 11986                           ;lcd.h: 164: Lcd_Write_String(line4);
 11987  002590  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
 11988  002594  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
 11989  002598  ECCE  F037         	call	_Lcd_Write_String	;wreg free
 11990  00259C                     l643:
 11991  00259C  FFFF               	dw	65535	; assembler added errata NOP
 11992                           
 11993                           ;lcd.h: 165: }
 11994                           ;lcd.h: 167: for (i = 0; i < 20; i++) {
 11995  00259E  0E00               	movlw	0
 11996  0025A0  0100               	movlb	0	; () banked
 11997  0025A2  6F99               	movwf	atualizarLCD@i& (0+255),b
 11998  0025A4                     l7021:
 11999  0025A4  FFFF               	dw	65535	; assembler added errata NOP
 12000                           
 12001                           ; BSR set to: 0
 12002  0025A6  0E13               	movlw	19
 12003  0025A8  6599               	cpfsgt	atualizarLCD@i& (0+255),b
 12004  0025AA  D001               	goto	l644
 12005  0025AC  D02B               	goto	u7420
 12006  0025AE                     l644:
 12007  0025AE  FFFF               	dw	65535	; assembler added errata NOP
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;lcd.h: 168: line1[i] = ' ';
 12011                           
 12012                           ; BSR set to: 0
 12013  0025B0  5199               	movf	atualizarLCD@i& (0+255),w,b
 12014  0025B2  0D01               	mullw	1
 12015  0025B4  50F3               	movf	prodl,w,c
 12016  0025B6  2588               	addwf	atualizarLCD@line1& (0+255),w,b
 12017  0025B8  6ED9               	movwf	fsr2l,c
 12018  0025BA  50F4               	movf	prodh,w,c
 12019  0025BC  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
 12020  0025BE  6EDA               	movwf	fsr2h,c
 12021  0025C0  0E20               	movlw	32
 12022  0025C2  6EDF               	movwf	indf2,c
 12023                           
 12024                           ;lcd.h: 169: line2[i] = ' ';
 12025  0025C4  5199               	movf	atualizarLCD@i& (0+255),w,b
 12026  0025C6  0D01               	mullw	1
 12027  0025C8  50F3               	movf	prodl,w,c
 12028  0025CA  258A               	addwf	atualizarLCD@line2& (0+255),w,b
 12029  0025CC  6ED9               	movwf	fsr2l,c
 12030  0025CE  50F4               	movf	prodh,w,c
 12031  0025D0  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
 12032  0025D2  6EDA               	movwf	fsr2h,c
 12033  0025D4  0E20               	movlw	32
 12034  0025D6  6EDF               	movwf	indf2,c
 12035                           
 12036                           ;lcd.h: 170: line3[i] = ' ';
 12037  0025D8  5199               	movf	atualizarLCD@i& (0+255),w,b
 12038  0025DA  0D01               	mullw	1
 12039  0025DC  50F3               	movf	prodl,w,c
 12040  0025DE  258C               	addwf	atualizarLCD@line3& (0+255),w,b
 12041  0025E0  6ED9               	movwf	fsr2l,c
 12042  0025E2  50F4               	movf	prodh,w,c
 12043  0025E4  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
 12044  0025E6  6EDA               	movwf	fsr2h,c
 12045  0025E8  0E20               	movlw	32
 12046  0025EA  6EDF               	movwf	indf2,c
 12047                           
 12048                           ;lcd.h: 171: line4[i] = ' ';
 12049  0025EC  5199               	movf	atualizarLCD@i& (0+255),w,b
 12050  0025EE  0D01               	mullw	1
 12051  0025F0  50F3               	movf	prodl,w,c
 12052  0025F2  258E               	addwf	atualizarLCD@line4& (0+255),w,b
 12053  0025F4  6ED9               	movwf	fsr2l,c
 12054  0025F6  50F4               	movf	prodh,w,c
 12055  0025F8  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
 12056  0025FA  6EDA               	movwf	fsr2h,c
 12057  0025FC  0E20               	movlw	32
 12058  0025FE  6EDF               	movwf	indf2,c
 12059                           
 12060                           ; BSR set to: 0
 12061  002600  2B99               	incf	atualizarLCD@i& (0+255),f,b
 12062  002602  D7D0               	goto	l7021
 12063  002604                     u7420:
 12064  002604  FFFF               	dw	65535	; assembler added errata NOP
 12065                           
 12066                           ; BSR set to: 0
 12067                           
 12068                           ; BSR set to: 0
 12069  002606  0012               	return		;funcret
 12070  002608  FFFF               	dw	65535	; errata NOP
 12071  00260A                     __end_of_atualizarLCD:
 12072                           	opt stack 0
 12073                           tblptru	equ	0xFF8
 12074                           tblptrh	equ	0xFF7
 12075                           tblptrl	equ	0xFF6
 12076                           tablat	equ	0xFF5
 12077                           prodh	equ	0xFF4
 12078                           prodl	equ	0xFF3
 12079                           intcon	equ	0xFF2
 12080                           intcon2	equ	0xFF1
 12081                           intcon3	equ	0xFF0
 12082                           postinc0	equ	0xFEE
 12083                           wreg	equ	0xFE8
 12084                           postdec1	equ	0xFE5
 12085                           fsr1l	equ	0xFE1
 12086                           indf2	equ	0xFDF
 12087                           postinc2	equ	0xFDE
 12088                           postdec2	equ	0xFDD
 12089                           fsr2h	equ	0xFDA
 12090                           fsr2l	equ	0xFD9
 12091                           status	equ	0xFD8
 12092                           
 12093 ;; *************** function _Lcd_Write_String *****************
 12094 ;; Defined at:
 12095 ;;		line 133 in file "lcd.h"
 12096 ;; Parameters:    Size  Location     Type
 12097 ;;  a               2    4[BANK0 ] PTR unsigned char 
 12098 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 12099 ;; Auto vars:     Size  Location     Type
 12100 ;;  i               1    6[BANK0 ] unsigned char 
 12101 ;; Return value:  Size  Location     Type
 12102 ;;                  1    wreg      void 
 12103 ;; Registers used:
 12104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12105 ;; Tracked objects:
 12106 ;;		On entry : 0/0
 12107 ;;		On exit  : 0/0
 12108 ;;		Unchanged: 0/0
 12109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12110 ;;      Params:         0       2       0       0       0       0       0
 12111 ;;      Locals:         0       1       0       0       0       0       0
 12112 ;;      Temps:          0       0       0       0       0       0       0
 12113 ;;      Totals:         0       3       0       0       0       0       0
 12114 ;;Total ram usage:        3 bytes
 12115 ;; Hardware stack levels used:    1
 12116 ;; Hardware stack levels required when called:    8
 12117 ;; This function calls:
 12118 ;;		_Lcd_Write_Char
 12119 ;; This function is called by:
 12120 ;;		_atualizarLCD
 12121 ;; This function uses a non-reentrant model
 12122 ;;
 12123                           
 12124                           	psect	text32
 12125  006F9C                     __ptext32:
 12126                           	opt stack 0
 12127  006F9C                     _Lcd_Write_String:
 12128                           	opt stack 0
 12129  006F9C  FFFF               	dw	65535	; assembler added errata NOP
 12130                           
 12131                           ;lcd.h: 134: unsigned char i = 0;
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;incstack = 0
 12135  006F9E  0E00               	movlw	0
 12136  006FA0  0100               	movlb	0	; () banked
 12137  006FA2  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 12138                           
 12139                           ;lcd.h: 136: for (i = 0; i < 20; i++) {
 12140  006FA4  0E00               	movlw	0
 12141  006FA6  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 12142  006FA8                     l6351:
 12143  006FA8  FFFF               	dw	65535	; assembler added errata NOP
 12144                           
 12145                           ; BSR set to: 0
 12146  006FAA  0E13               	movlw	19
 12147  006FAC  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
 12148  006FAE  D001               	goto	l636
 12149  006FB0  D00F               	goto	u6410
 12150  006FB2                     l636:
 12151  006FB2  FFFF               	dw	65535	; assembler added errata NOP
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;lcd.h: 137: Lcd_Write_Char(a[i]);
 12155                           
 12156                           ; BSR set to: 0
 12157  006FB4  5186               	movf	Lcd_Write_String@i& (0+255),w,b
 12158  006FB6  0D01               	mullw	1
 12159  006FB8  50F3               	movf	prodl,w,c
 12160  006FBA  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
 12161  006FBC  6ED9               	movwf	fsr2l,c
 12162  006FBE  50F4               	movf	prodh,w,c
 12163  006FC0  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
 12164  006FC2  6EDA               	movwf	fsr2h,c
 12165  006FC4  50DF               	movf	indf2,w,c
 12166  006FC6  ECF0  F039         	call	_Lcd_Write_Char
 12167  006FCA  0100               	movlb	0	; () banked
 12168  006FCC  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
 12169  006FCE  D7EC               	goto	l6351
 12170  006FD0                     u6410:
 12171  006FD0  FFFF               	dw	65535	; assembler added errata NOP
 12172                           
 12173                           ; BSR set to: 0
 12174                           
 12175                           ; BSR set to: 0
 12176  006FD2  0012               	return		;funcret
 12177  006FD4  FFFF               	dw	65535	; errata NOP
 12178  006FD6                     __end_of_Lcd_Write_String:
 12179                           	opt stack 0
 12180                           tblptru	equ	0xFF8
 12181                           tblptrh	equ	0xFF7
 12182                           tblptrl	equ	0xFF6
 12183                           tablat	equ	0xFF5
 12184                           prodh	equ	0xFF4
 12185                           prodl	equ	0xFF3
 12186                           intcon	equ	0xFF2
 12187                           intcon2	equ	0xFF1
 12188                           intcon3	equ	0xFF0
 12189                           postinc0	equ	0xFEE
 12190                           wreg	equ	0xFE8
 12191                           postdec1	equ	0xFE5
 12192                           fsr1l	equ	0xFE1
 12193                           indf2	equ	0xFDF
 12194                           postinc2	equ	0xFDE
 12195                           postdec2	equ	0xFDD
 12196                           fsr2h	equ	0xFDA
 12197                           fsr2l	equ	0xFD9
 12198                           status	equ	0xFD8
 12199                           
 12200 ;; *************** function _Lcd_Write_Char *****************
 12201 ;; Defined at:
 12202 ;;		line 109 in file "lcd.h"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;  a               1    wreg     unsigned char 
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;  a               1    3[BANK0 ] unsigned char 
 12207 ;;  y               1    2[BANK0 ] unsigned char 
 12208 ;;  tempp           1    1[BANK0 ] unsigned char 
 12209 ;; Return value:  Size  Location     Type
 12210 ;;                  1    wreg      void 
 12211 ;; Registers used:
 12212 ;;		wreg, status,2, status,0, cstack
 12213 ;; Tracked objects:
 12214 ;;		On entry : 0/0
 12215 ;;		On exit  : 0/0
 12216 ;;		Unchanged: 0/0
 12217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12218 ;;      Params:         0       0       0       0       0       0       0
 12219 ;;      Locals:         0       3       0       0       0       0       0
 12220 ;;      Temps:          0       0       0       0       0       0       0
 12221 ;;      Totals:         0       3       0       0       0       0       0
 12222 ;;Total ram usage:        3 bytes
 12223 ;; Hardware stack levels used:    1
 12224 ;; Hardware stack levels required when called:    7
 12225 ;; This function calls:
 12226 ;;		_Lcd_Port
 12227 ;; This function is called by:
 12228 ;;		_Lcd_Write_String
 12229 ;;		_criarCaracteresCGRAM
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           	psect	text33
 12234  0073E0                     __ptext33:
 12235                           	opt stack 0
 12236  0073E0                     _Lcd_Write_Char:
 12237                           	opt stack 0
 12238  0073E0  FFFF               	dw	65535	; assembler added errata NOP
 12239                           
 12240                           ; BSR set to: 0
 12241                           ;incstack = 0
 12242                           ;Lcd_Write_Char@a stored from wreg
 12243  0073E2  0100               	movlb	0	; () banked
 12244  0073E4  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
 12245                           
 12246                           ;lcd.h: 110: char tempp, y;
 12247                           ;lcd.h: 111: tempp = a & 0x0F;
 12248  0073E6  0100               	movlb	0	; () banked
 12249  0073E8  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 12250  0073EA  0B0F               	andlw	15
 12251  0073EC  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
 12252                           
 12253                           ;lcd.h: 112: y = a & 0xF0;
 12254  0073EE  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 12255  0073F0  0BF0               	andlw	240
 12256  0073F2  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
 12257                           
 12258                           ; BSR set to: 0
 12259                           ;lcd.h: 113: PORTDbits.RD1 = 1;
 12260  0073F4  8283               	bsf	3971,1,c	;volatile
 12261                           
 12262                           ; BSR set to: 0
 12263                           ;lcd.h: 114: Lcd_Port(y >> 4);
 12264  0073F6  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
 12265  0073F8  0B0F               	andlw	15
 12266  0073FA  ECE4  F038         	call	_Lcd_Port
 12267                           
 12268                           ;lcd.h: 115: PORTDbits.RD0 = 1;
 12269  0073FE  8083               	bsf	3971,0,c	;volatile
 12270                           
 12271                           ;lcd.h: 116: _delay((unsigned long)((150)*(8000000/4000000.0)));
 12272  007400  0E4B               	movlw	75
 12273  007402                     u9167:
 12274  007402  FFFF               	dw	65535	; errata NOP
 12275  007404  2EE8               	decfsz	wreg,f,c
 12276  007406  D7FD               	bra	u9167
 12277                           
 12278                           ;lcd.h: 117: PORTDbits.RD0 = 0;
 12279  007408  9083               	bcf	3971,0,c	;volatile
 12280                           
 12281                           ;lcd.h: 118: Lcd_Port(tempp);
 12282  00740A  0100               	movlb	0	; () banked
 12283  00740C  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
 12284  00740E  ECE4  F038         	call	_Lcd_Port
 12285                           
 12286                           ;lcd.h: 119: PORTDbits.RD0 = 1;
 12287  007412  8083               	bsf	3971,0,c	;volatile
 12288                           
 12289                           ;lcd.h: 120: _delay((unsigned long)((150)*(8000000/4000000.0)));
 12290  007414  0E4B               	movlw	75
 12291  007416                     u9177:
 12292  007416  FFFF               	dw	65535	; errata NOP
 12293  007418  2EE8               	decfsz	wreg,f,c
 12294  00741A  D7FD               	bra	u9177
 12295                           
 12296                           ;lcd.h: 121: PORTDbits.RD0 = 0;
 12297  00741C  9083               	bcf	3971,0,c	;volatile
 12298                           
 12299                           ;lcd.h: 122: _delay((unsigned long)((100)*(8000000/4000000.0)));
 12300  00741E  0E32               	movlw	50
 12301  007420                     u9187:
 12302  007420  FFFF               	dw	65535	; errata NOP
 12303  007422  2EE8               	decfsz	wreg,f,c
 12304  007424  D7FD               	bra	u9187
 12305                           
 12306                           ;lcd.h: 125: PORTDbits.RD0 = 1;
 12307  007426  8083               	bsf	3971,0,c	;volatile
 12308                           
 12309                           ;lcd.h: 126: PORTDbits.RD1 = 1;
 12310  007428  8283               	bsf	3971,1,c	;volatile
 12311                           
 12312                           ;lcd.h: 127: PORTDbits.RD2 = 1;
 12313  00742A  8483               	bsf	3971,2,c	;volatile
 12314                           
 12315                           ;lcd.h: 128: PORTDbits.RD3 = 1;
 12316  00742C  8683               	bsf	3971,3,c	;volatile
 12317                           
 12318                           ;lcd.h: 129: PORTDbits.RD4 = 1;
 12319  00742E  8883               	bsf	3971,4,c	;volatile
 12320                           
 12321                           ;lcd.h: 130: PORTDbits.RD5 = 1;
 12322  007430  8A83               	bsf	3971,5,c	;volatile
 12323  007432  0012               	return		;funcret
 12324  007434  FFFF               	dw	65535	; errata NOP
 12325  007436                     __end_of_Lcd_Write_Char:
 12326                           	opt stack 0
 12327                           tblptru	equ	0xFF8
 12328                           tblptrh	equ	0xFF7
 12329                           tblptrl	equ	0xFF6
 12330                           tablat	equ	0xFF5
 12331                           prodh	equ	0xFF4
 12332                           prodl	equ	0xFF3
 12333                           intcon	equ	0xFF2
 12334                           intcon2	equ	0xFF1
 12335                           intcon3	equ	0xFF0
 12336                           postinc0	equ	0xFEE
 12337                           wreg	equ	0xFE8
 12338                           postdec1	equ	0xFE5
 12339                           fsr1l	equ	0xFE1
 12340                           indf2	equ	0xFDF
 12341                           postinc2	equ	0xFDE
 12342                           postdec2	equ	0xFDD
 12343                           fsr2h	equ	0xFDA
 12344                           fsr2l	equ	0xFD9
 12345                           status	equ	0xFD8
 12346                           
 12347 ;; *************** function _Lcd_Set_Cursor *****************
 12348 ;; Defined at:
 12349 ;;		line 74 in file "lcd.h"
 12350 ;; Parameters:    Size  Location     Type
 12351 ;;  a               1    wreg     unsigned char 
 12352 ;;  b               1    3[BANK0 ] unsigned char 
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;  a               1    4[BANK0 ] unsigned char 
 12355 ;;  temp            1    7[BANK0 ] unsigned char 
 12356 ;;  y               1    6[BANK0 ] unsigned char 
 12357 ;;  z               1    5[BANK0 ] unsigned char 
 12358 ;; Return value:  Size  Location     Type
 12359 ;;                  1    wreg      void 
 12360 ;; Registers used:
 12361 ;;		wreg, status,2, status,0, cstack
 12362 ;; Tracked objects:
 12363 ;;		On entry : 0/0
 12364 ;;		On exit  : 0/0
 12365 ;;		Unchanged: 0/0
 12366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12367 ;;      Params:         0       1       0       0       0       0       0
 12368 ;;      Locals:         0       4       0       0       0       0       0
 12369 ;;      Temps:          0       0       0       0       0       0       0
 12370 ;;      Totals:         0       5       0       0       0       0       0
 12371 ;;Total ram usage:        5 bytes
 12372 ;; Hardware stack levels used:    1
 12373 ;; Hardware stack levels required when called:    8
 12374 ;; This function calls:
 12375 ;;		_Lcd_Cmd
 12376 ;; This function is called by:
 12377 ;;		_atualizarLCD
 12378 ;; This function uses a non-reentrant model
 12379 ;;
 12380                           
 12381                           	psect	text34
 12382  003B88                     __ptext34:
 12383                           	opt stack 0
 12384  003B88                     _Lcd_Set_Cursor:
 12385                           	opt stack 0
 12386  003B88  FFFF               	dw	65535	; assembler added errata NOP
 12387                           
 12388                           ;incstack = 0
 12389                           ;Lcd_Set_Cursor@a stored from wreg
 12390  003B8A  0100               	movlb	0	; () banked
 12391  003B8C  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
 12392                           
 12393                           ;lcd.h: 75: char temp, z, y;
 12394                           ;lcd.h: 76: switch (a) {
 12395  003B8E  D04C               	goto	l623
 12396  003B90  FFFF               	dw	65535	; assembler added errata NOP
 12397                           
 12398                           ;lcd.h: 78: temp = 0x80 + b - 1;
 12399  003B92  0100               	movlb	0	; () banked
 12400  003B94  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 12401  003B96  0F7F               	addlw	127
 12402  003B98  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 12403                           
 12404                           ;lcd.h: 79: z = temp >> 4;
 12405  003B9A  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 12406  003B9C  0B0F               	andlw	15
 12407  003B9E  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 12408                           
 12409                           ;lcd.h: 80: y = temp & 0x0F;
 12410  003BA0  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 12411  003BA2  0B0F               	andlw	15
 12412  003BA4  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;lcd.h: 81: Lcd_Cmd(z);
 12416  003BA6  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 12417  003BA8  EC79  F036         	call	_Lcd_Cmd
 12418                           
 12419                           ;lcd.h: 82: Lcd_Cmd(y);
 12420  003BAC  0100               	movlb	0	; () banked
 12421  003BAE  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 12422  003BB0  EC79  F036         	call	_Lcd_Cmd
 12423                           
 12424                           ;lcd.h: 83: break;
 12425  003BB4  D048               	goto	l625
 12426  003BB6  FFFF               	dw	65535	; assembler added errata NOP
 12427                           
 12428                           ;lcd.h: 85: temp = 0xC0 + b - 1;
 12429  003BB8  0100               	movlb	0	; () banked
 12430  003BBA  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 12431  003BBC  0FBF               	addlw	191
 12432  003BBE  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 12433                           
 12434                           ;lcd.h: 86: z = temp >> 4;
 12435  003BC0  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 12436  003BC2  0B0F               	andlw	15
 12437  003BC4  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 12438                           
 12439                           ;lcd.h: 87: y = temp & 0x0F;
 12440  003BC6  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 12441  003BC8  0B0F               	andlw	15
 12442  003BCA  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 12443                           
 12444                           ; BSR set to: 0
 12445                           ;lcd.h: 88: Lcd_Cmd(z);
 12446  003BCC  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 12447  003BCE  EC79  F036         	call	_Lcd_Cmd
 12448                           
 12449                           ;lcd.h: 89: Lcd_Cmd(y);
 12450  003BD2  0100               	movlb	0	; () banked
 12451  003BD4  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 12452  003BD6  EC79  F036         	call	_Lcd_Cmd
 12453                           
 12454                           ;lcd.h: 90: break;
 12455  003BDA  D035               	goto	l625
 12456  003BDC  FFFF               	dw	65535	; assembler added errata NOP
 12457                           
 12458                           ;lcd.h: 92: temp = 0x94 + b;
 12459  003BDE  0100               	movlb	0	; () banked
 12460  003BE0  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 12461  003BE2  0F94               	addlw	148
 12462  003BE4  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 12463                           
 12464                           ;lcd.h: 93: z = temp >> 4;
 12465  003BE6  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 12466  003BE8  0B0F               	andlw	15
 12467  003BEA  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 12468                           
 12469                           ;lcd.h: 94: y = temp & 0x0F;
 12470  003BEC  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 12471  003BEE  0B0F               	andlw	15
 12472  003BF0  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 12473                           
 12474                           ; BSR set to: 0
 12475                           ;lcd.h: 95: Lcd_Cmd(z);
 12476  003BF2  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 12477  003BF4  EC79  F036         	call	_Lcd_Cmd
 12478                           
 12479                           ;lcd.h: 96: Lcd_Cmd(y);
 12480  003BF8  0100               	movlb	0	; () banked
 12481  003BFA  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 12482  003BFC  EC79  F036         	call	_Lcd_Cmd
 12483                           
 12484                           ;lcd.h: 97: break;
 12485  003C00  D022               	goto	l625
 12486  003C02  FFFF               	dw	65535	; assembler added errata NOP
 12487                           
 12488                           ;lcd.h: 99: temp = 0xD4 + b;
 12489  003C04  0100               	movlb	0	; () banked
 12490  003C06  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 12491  003C08  0FD4               	addlw	212
 12492  003C0A  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 12493                           
 12494                           ;lcd.h: 100: z = temp >> 4;
 12495  003C0C  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 12496  003C0E  0B0F               	andlw	15
 12497  003C10  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 12498                           
 12499                           ;lcd.h: 101: y = temp & 0x0F;
 12500  003C12  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 12501  003C14  0B0F               	andlw	15
 12502  003C16  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 12503                           
 12504                           ; BSR set to: 0
 12505                           ;lcd.h: 102: Lcd_Cmd(z);
 12506  003C18  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 12507  003C1A  EC79  F036         	call	_Lcd_Cmd
 12508                           
 12509                           ;lcd.h: 103: Lcd_Cmd(y);
 12510  003C1E  0100               	movlb	0	; () banked
 12511  003C20  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 12512  003C22  EC79  F036         	call	_Lcd_Cmd
 12513                           
 12514                           ;lcd.h: 106: }
 12515                           
 12516                           ;lcd.h: 105: default:return;
 12517                           
 12518                           ;lcd.h: 104: break;
 12519  003C26  D00F               	goto	l625
 12520  003C28                     l623:
 12521  003C28  FFFF               	dw	65535	; assembler added errata NOP
 12522  003C2A  0100               	movlb	0	; () banked
 12523  003C2C  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 12524                           
 12525                           ; Switch size 1, requested type "space"
 12526                           ; Number of cases is 4, Range of values is 1 to 4
 12527                           ; switch strategies available:
 12528                           ; Name         Instructions Cycles
 12529                           ; simple_byte           13     7 (average)
 12530                           ;	Chosen strategy is simple_byte
 12531  003C2E  0A01               	xorlw	1	; case 1
 12532  003C30  B4D8               	btfsc	status,2,c
 12533  003C32  D7AE               	goto	l624
 12534  003C34  0A03               	xorlw	3	; case 2
 12535  003C36  B4D8               	btfsc	status,2,c
 12536  003C38  D7BE               	goto	l626
 12537  003C3A  0A01               	xorlw	1	; case 3
 12538  003C3C  B4D8               	btfsc	status,2,c
 12539  003C3E  D7CE               	goto	l627
 12540  003C40  0A07               	xorlw	7	; case 4
 12541  003C42  B4D8               	btfsc	status,2,c
 12542  003C44  D7DE               	goto	l628
 12543  003C46                     l625:
 12544  003C46  FFFF               	dw	65535	; assembler added errata NOP
 12545                           
 12546                           ; BSR set to: 0
 12547  003C48  0012               	return		;funcret
 12548  003C4A  FFFF               	dw	65535	; errata NOP
 12549  003C4C                     __end_of_Lcd_Set_Cursor:
 12550                           	opt stack 0
 12551                           tblptru	equ	0xFF8
 12552                           tblptrh	equ	0xFF7
 12553                           tblptrl	equ	0xFF6
 12554                           tablat	equ	0xFF5
 12555                           prodh	equ	0xFF4
 12556                           prodl	equ	0xFF3
 12557                           intcon	equ	0xFF2
 12558                           intcon2	equ	0xFF1
 12559                           intcon3	equ	0xFF0
 12560                           postinc0	equ	0xFEE
 12561                           wreg	equ	0xFE8
 12562                           postdec1	equ	0xFE5
 12563                           fsr1l	equ	0xFE1
 12564                           indf2	equ	0xFDF
 12565                           postinc2	equ	0xFDE
 12566                           postdec2	equ	0xFDD
 12567                           fsr2h	equ	0xFDA
 12568                           fsr2l	equ	0xFD9
 12569                           status	equ	0xFD8
 12570                           
 12571 ;; *************** function _ajusteSP_Bombas *****************
 12572 ;; Defined at:
 12573 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 12574 ;; Parameters:    Size  Location     Type
 12575 ;;		None
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;		None
 12578 ;; Return value:  Size  Location     Type
 12579 ;;                  1    wreg      void 
 12580 ;; Registers used:
 12581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12582 ;; Tracked objects:
 12583 ;;		On entry : 0/0
 12584 ;;		On exit  : 0/0
 12585 ;;		Unchanged: 0/0
 12586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12587 ;;      Params:         0       0       0       0       0       0       0
 12588 ;;      Locals:         0       2       0       0       0       0       0
 12589 ;;      Temps:          0       0       0       0       0       0       0
 12590 ;;      Totals:         0       2       0       0       0       0       0
 12591 ;;Total ram usage:        2 bytes
 12592 ;; Hardware stack levels used:    1
 12593 ;; Hardware stack levels required when called:   10
 12594 ;; This function calls:
 12595 ;;		_blink
 12596 ;;		_btPress
 12597 ;;		_intToFloatStr
 12598 ;;		_sprintf
 12599 ;;		_writeEEPROM_ext
 12600 ;; This function is called by:
 12601 ;;		_main
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           	psect	text35
 12606  001AD4                     __ptext35:
 12607                           	opt stack 0
 12608  001AD4                     _ajusteSP_Bombas:
 12609                           	opt stack 0
 12610  001AD4  FFFF               	dw	65535	; assembler added errata NOP
 12611                           
 12612                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 12613                           
 12614                           ;incstack = 0
 12615  001AD6  0100               	movlb	0	; () banked
 12616  001AD8  51E7               	movf	_sp_pressao_rede& (0+255),w,b
 12617  001ADA  ECEE  F03C         	call	_intToFloatStr
 12618  001ADE  C0BB  F0C8         	movff	?_intToFloatStr,_ajusteSP_Bombas$2571
 12619  001AE2  C0BC  F0C9         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2571+1
 12620                           
 12621                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 12622  001AE6  0E9E               	movlw	low _line1
 12623  001AE8  0100               	movlb	0	; () banked
 12624  001AEA  6FA1               	movwf	sprintf@wh& (0+255),b
 12625  001AEC  0E01               	movlw	high _line1
 12626  001AEE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12627  001AF0  0E22               	movlw	low STR_106
 12628  001AF2  6FA3               	movwf	sprintf@f& (0+255),b
 12629  001AF4  0E7F               	movlw	high STR_106
 12630  001AF6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12631  001AF8  C0C8  F0A5         	movff	_ajusteSP_Bombas$2571,?_sprintf+4
 12632  001AFC  C0C9  F0A6         	movff	_ajusteSP_Bombas$2571+1,?_sprintf+5
 12633  001B00  EC29  F039         	call	_sprintf	;wreg free
 12634                           
 12635                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 12636  001B04  0100               	movlb	0	; () banked
 12637  001B06  51E6               	movf	_sp_jockey& (0+255),w,b
 12638  001B08  ECEE  F03C         	call	_intToFloatStr
 12639  001B0C  C0BB  F0C8         	movff	?_intToFloatStr,_ajusteSP_Bombas$2571
 12640  001B10  C0BC  F0C9         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2571+1
 12641                           
 12642                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 12643  001B14  0E89               	movlw	low _line2
 12644  001B16  0100               	movlb	0	; () banked
 12645  001B18  6FA1               	movwf	sprintf@wh& (0+255),b
 12646  001B1A  0E01               	movlw	high _line2
 12647  001B1C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12648  001B1E  0E2D               	movlw	low STR_48
 12649  001B20  6FA3               	movwf	sprintf@f& (0+255),b
 12650  001B22  0E7F               	movlw	high STR_48
 12651  001B24  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12652  001B26  C0C8  F0A5         	movff	_ajusteSP_Bombas$2571,?_sprintf+4
 12653  001B2A  C0C9  F0A6         	movff	_ajusteSP_Bombas$2571+1,?_sprintf+5
 12654  001B2E  EC29  F039         	call	_sprintf	;wreg free
 12655                           
 12656                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 12657  001B32  0100               	movlb	0	; () banked
 12658  001B34  51E5               	movf	_sp_principal& (0+255),w,b
 12659  001B36  ECEE  F03C         	call	_intToFloatStr
 12660  001B3A  C0BB  F0C8         	movff	?_intToFloatStr,_ajusteSP_Bombas$2571
 12661  001B3E  C0BC  F0C9         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2571+1
 12662                           
 12663                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 12664  001B42  0E74               	movlw	low _line3
 12665  001B44  0100               	movlb	0	; () banked
 12666  001B46  6FA1               	movwf	sprintf@wh& (0+255),b
 12667  001B48  0E01               	movlw	high _line3
 12668  001B4A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12669  001B4C  0E1F               	movlw	low STR_51
 12670  001B4E  6FA3               	movwf	sprintf@f& (0+255),b
 12671  001B50  0E7E               	movlw	high STR_51
 12672  001B52  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12673  001B54  C0C8  F0A5         	movff	_ajusteSP_Bombas$2571,?_sprintf+4
 12674  001B58  C0C9  F0A6         	movff	_ajusteSP_Bombas$2571+1,?_sprintf+5
 12675  001B5C  EC29  F039         	call	_sprintf	;wreg free
 12676                           
 12677                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 12678  001B60  0100               	movlb	0	; () banked
 12679  001B62  51E4               	movf	_sp_estacionaria& (0+255),w,b
 12680  001B64  ECEE  F03C         	call	_intToFloatStr
 12681  001B68  C0BB  F0C8         	movff	?_intToFloatStr,_ajusteSP_Bombas$2571
 12682  001B6C  C0BC  F0C9         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2571+1
 12683                           
 12684                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 12685  001B70  0E5F               	movlw	low _line4
 12686  001B72  0100               	movlb	0	; () banked
 12687  001B74  6FA1               	movwf	sprintf@wh& (0+255),b
 12688  001B76  0E01               	movlw	high _line4
 12689  001B78  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12690  001B7A  0E2E               	movlw	low STR_54
 12691  001B7C  6FA3               	movwf	sprintf@f& (0+255),b
 12692  001B7E  0E7E               	movlw	high STR_54
 12693  001B80  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12694  001B82  C0C8  F0A5         	movff	_ajusteSP_Bombas$2571,?_sprintf+4
 12695  001B86  C0C9  F0A6         	movff	_ajusteSP_Bombas$2571+1,?_sprintf+5
 12696  001B8A  EC29  F039         	call	_sprintf	;wreg free
 12697                           
 12698                           ;tela_CONFIG_PRESSAO.h: 15: switch (option_posi) {
 12699  001B8E  D095               	goto	l888
 12700  001B90  FFFF               	dw	65535	; assembler added errata NOP
 12701                           
 12702                           ;tela_CONFIG_PRESSAO.h: 17: blink(line1, 8, 15);
 12703  001B92  0E9E               	movlw	low _line1
 12704  001B94  0100               	movlb	0	; () banked
 12705  001B96  6F80               	movwf	blink@line& (0+255),b
 12706  001B98  0E01               	movlw	high _line1
 12707  001B9A  6F81               	movwf	(blink@line+1)& (0+255),b
 12708  001B9C  0E08               	movlw	8
 12709  001B9E  6F82               	movwf	blink@start& (0+255),b
 12710  001BA0  0E0F               	movlw	15
 12711  001BA2  6F83               	movwf	blink@end& (0+255),b
 12712  001BA4  EC45  F038         	call	_blink	;wreg free
 12713                           
 12714                           ;tela_CONFIG_PRESSAO.h: 18: if (btPress(3)) {
 12715  001BA8  0E03               	movlw	3
 12716  001BAA  EC9A  F03B         	call	_btPress
 12717  001BAE  0900               	iorlw	0
 12718  001BB0  B4D8               	btfsc	status,2,c
 12719  001BB2  D002               	goto	l890
 12720                           
 12721                           ;tela_CONFIG_PRESSAO.h: 19: sp_pressao_rede++;
 12722  001BB4  0100               	movlb	0	; () banked
 12723  001BB6  2BE7               	incf	_sp_pressao_rede& (0+255),f,b
 12724  001BB8                     l890:
 12725  001BB8  FFFF               	dw	65535	; assembler added errata NOP
 12726                           
 12727                           ;tela_CONFIG_PRESSAO.h: 20: }
 12728                           ;tela_CONFIG_PRESSAO.h: 21: if (btPress(2)) {
 12729                           
 12730                           ; BSR set to: 0
 12731  001BBA  0E02               	movlw	2
 12732  001BBC  EC9A  F03B         	call	_btPress
 12733  001BC0  0900               	iorlw	0
 12734  001BC2  B4D8               	btfsc	status,2,c
 12735  001BC4  D002               	goto	l891
 12736                           
 12737                           ;tela_CONFIG_PRESSAO.h: 22: sp_pressao_rede--;
 12738  001BC6  0100               	movlb	0	; () banked
 12739  001BC8  07E7               	decf	_sp_pressao_rede& (0+255),f,b
 12740  001BCA                     l891:
 12741  001BCA  FFFF               	dw	65535	; assembler added errata NOP
 12742                           
 12743                           ;tela_CONFIG_PRESSAO.h: 23: }
 12744                           ;tela_CONFIG_PRESSAO.h: 24: if (sp_pressao_rede > 99) {
 12745                           
 12746                           ; BSR set to: 0
 12747  001BCC  0E63               	movlw	99
 12748  001BCE  0100               	movlb	0	; () banked
 12749  001BD0  65E7               	cpfsgt	_sp_pressao_rede& (0+255),b
 12750  001BD2  D083               	goto	l893
 12751                           
 12752                           ; BSR set to: 0
 12753                           ;tela_CONFIG_PRESSAO.h: 25: sp_pressao_rede = 0;
 12754  001BD4  0E00               	movlw	0
 12755  001BD6  6FE7               	movwf	_sp_pressao_rede& (0+255),b
 12756                           
 12757                           ; BSR set to: 0
 12758                           ;tela_CONFIG_PRESSAO.h: 26: }
 12759                           ;tela_CONFIG_PRESSAO.h: 27: break;
 12760  001BD8  D080               	goto	l893
 12761  001BDA  FFFF               	dw	65535	; assembler added errata NOP
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;tela_CONFIG_PRESSAO.h: 29: blink(line2, 8, 15);
 12765                           
 12766                           ; BSR set to: 0
 12767  001BDC  0E89               	movlw	low _line2
 12768  001BDE  6F80               	movwf	blink@line& (0+255),b
 12769  001BE0  0E01               	movlw	high _line2
 12770  001BE2  6F81               	movwf	(blink@line+1)& (0+255),b
 12771  001BE4  0E08               	movlw	8
 12772  001BE6  6F82               	movwf	blink@start& (0+255),b
 12773  001BE8  0E0F               	movlw	15
 12774  001BEA  6F83               	movwf	blink@end& (0+255),b
 12775  001BEC  EC45  F038         	call	_blink	;wreg free
 12776                           
 12777                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 12778  001BF0  0E03               	movlw	3
 12779  001BF2  EC9A  F03B         	call	_btPress
 12780  001BF6  0900               	iorlw	0
 12781  001BF8  B4D8               	btfsc	status,2,c
 12782  001BFA  D002               	goto	l895
 12783                           
 12784                           ;tela_CONFIG_PRESSAO.h: 31: sp_jockey++;
 12785  001BFC  0100               	movlb	0	; () banked
 12786  001BFE  2BE6               	incf	_sp_jockey& (0+255),f,b
 12787  001C00                     l895:
 12788  001C00  FFFF               	dw	65535	; assembler added errata NOP
 12789                           
 12790                           ;tela_CONFIG_PRESSAO.h: 32: }
 12791                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 12792                           
 12793                           ; BSR set to: 0
 12794  001C02  0E02               	movlw	2
 12795  001C04  EC9A  F03B         	call	_btPress
 12796  001C08  0900               	iorlw	0
 12797  001C0A  B4D8               	btfsc	status,2,c
 12798  001C0C  D002               	goto	l896
 12799                           
 12800                           ;tela_CONFIG_PRESSAO.h: 34: sp_jockey--;
 12801  001C0E  0100               	movlb	0	; () banked
 12802  001C10  07E6               	decf	_sp_jockey& (0+255),f,b
 12803  001C12                     l896:
 12804  001C12  FFFF               	dw	65535	; assembler added errata NOP
 12805                           
 12806                           ;tela_CONFIG_PRESSAO.h: 35: }
 12807                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_jockey > 99) {
 12808                           
 12809                           ; BSR set to: 0
 12810  001C14  0E63               	movlw	99
 12811  001C16  0100               	movlb	0	; () banked
 12812  001C18  65E6               	cpfsgt	_sp_jockey& (0+255),b
 12813  001C1A  D05F               	goto	l893
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;tela_CONFIG_PRESSAO.h: 37: sp_jockey = 0;
 12817  001C1C  0E00               	movlw	0
 12818  001C1E  6FE6               	movwf	_sp_jockey& (0+255),b
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;tela_CONFIG_PRESSAO.h: 38: }
 12822                           ;tela_CONFIG_PRESSAO.h: 39: break;
 12823  001C20  D05C               	goto	l893
 12824  001C22  FFFF               	dw	65535	; assembler added errata NOP
 12825                           
 12826                           ; BSR set to: 0
 12827                           ;tela_CONFIG_PRESSAO.h: 41: blink(line3, 12, 18);
 12828                           
 12829                           ; BSR set to: 0
 12830  001C24  0E74               	movlw	low _line3
 12831  001C26  6F80               	movwf	blink@line& (0+255),b
 12832  001C28  0E01               	movlw	high _line3
 12833  001C2A  6F81               	movwf	(blink@line+1)& (0+255),b
 12834  001C2C  0E0C               	movlw	12
 12835  001C2E  6F82               	movwf	blink@start& (0+255),b
 12836  001C30  0E12               	movlw	18
 12837  001C32  6F83               	movwf	blink@end& (0+255),b
 12838  001C34  EC45  F038         	call	_blink	;wreg free
 12839                           
 12840                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 12841  001C38  0E03               	movlw	3
 12842  001C3A  EC9A  F03B         	call	_btPress
 12843  001C3E  0900               	iorlw	0
 12844  001C40  B4D8               	btfsc	status,2,c
 12845  001C42  D002               	goto	l899
 12846                           
 12847                           ;tela_CONFIG_PRESSAO.h: 43: sp_principal++;
 12848  001C44  0100               	movlb	0	; () banked
 12849  001C46  2BE5               	incf	_sp_principal& (0+255),f,b
 12850  001C48                     l899:
 12851  001C48  FFFF               	dw	65535	; assembler added errata NOP
 12852                           
 12853                           ;tela_CONFIG_PRESSAO.h: 44: }
 12854                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 12855                           
 12856                           ; BSR set to: 0
 12857  001C4A  0E02               	movlw	2
 12858  001C4C  EC9A  F03B         	call	_btPress
 12859  001C50  0900               	iorlw	0
 12860  001C52  B4D8               	btfsc	status,2,c
 12861  001C54  D002               	goto	l900
 12862                           
 12863                           ;tela_CONFIG_PRESSAO.h: 46: sp_principal--;
 12864  001C56  0100               	movlb	0	; () banked
 12865  001C58  07E5               	decf	_sp_principal& (0+255),f,b
 12866  001C5A                     l900:
 12867  001C5A  FFFF               	dw	65535	; assembler added errata NOP
 12868                           
 12869                           ;tela_CONFIG_PRESSAO.h: 47: }
 12870                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_principal > 99) {
 12871                           
 12872                           ; BSR set to: 0
 12873  001C5C  0E63               	movlw	99
 12874  001C5E  0100               	movlb	0	; () banked
 12875  001C60  65E5               	cpfsgt	_sp_principal& (0+255),b
 12876  001C62  D03B               	goto	l893
 12877                           
 12878                           ; BSR set to: 0
 12879                           ;tela_CONFIG_PRESSAO.h: 49: sp_principal = 0;
 12880  001C64  0E00               	movlw	0
 12881  001C66  6FE5               	movwf	_sp_principal& (0+255),b
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;tela_CONFIG_PRESSAO.h: 50: }
 12885                           ;tela_CONFIG_PRESSAO.h: 51: break;
 12886  001C68  D038               	goto	l893
 12887  001C6A  FFFF               	dw	65535	; assembler added errata NOP
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;tela_CONFIG_PRESSAO.h: 53: blink(line4, 12, 18);
 12891                           
 12892                           ; BSR set to: 0
 12893  001C6C  0E5F               	movlw	low _line4
 12894  001C6E  6F80               	movwf	blink@line& (0+255),b
 12895  001C70  0E01               	movlw	high _line4
 12896  001C72  6F81               	movwf	(blink@line+1)& (0+255),b
 12897  001C74  0E0C               	movlw	12
 12898  001C76  6F82               	movwf	blink@start& (0+255),b
 12899  001C78  0E12               	movlw	18
 12900  001C7A  6F83               	movwf	blink@end& (0+255),b
 12901  001C7C  EC45  F038         	call	_blink	;wreg free
 12902                           
 12903                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 12904  001C80  0E03               	movlw	3
 12905  001C82  EC9A  F03B         	call	_btPress
 12906  001C86  0900               	iorlw	0
 12907  001C88  B4D8               	btfsc	status,2,c
 12908  001C8A  D002               	goto	l903
 12909                           
 12910                           ;tela_CONFIG_PRESSAO.h: 55: sp_estacionaria++;
 12911  001C8C  0100               	movlb	0	; () banked
 12912  001C8E  2BE4               	incf	_sp_estacionaria& (0+255),f,b
 12913  001C90                     l903:
 12914  001C90  FFFF               	dw	65535	; assembler added errata NOP
 12915                           
 12916                           ;tela_CONFIG_PRESSAO.h: 56: }
 12917                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 12918                           
 12919                           ; BSR set to: 0
 12920  001C92  0E02               	movlw	2
 12921  001C94  EC9A  F03B         	call	_btPress
 12922  001C98  0900               	iorlw	0
 12923  001C9A  B4D8               	btfsc	status,2,c
 12924  001C9C  D002               	goto	l904
 12925                           
 12926                           ;tela_CONFIG_PRESSAO.h: 58: sp_estacionaria--;
 12927  001C9E  0100               	movlb	0	; () banked
 12928  001CA0  07E4               	decf	_sp_estacionaria& (0+255),f,b
 12929  001CA2                     l904:
 12930  001CA2  FFFF               	dw	65535	; assembler added errata NOP
 12931                           
 12932                           ;tela_CONFIG_PRESSAO.h: 59: }
 12933                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_estacionaria > 99) {
 12934                           
 12935                           ; BSR set to: 0
 12936  001CA4  0E63               	movlw	99
 12937  001CA6  0100               	movlb	0	; () banked
 12938  001CA8  65E4               	cpfsgt	_sp_estacionaria& (0+255),b
 12939  001CAA  D017               	goto	l893
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;tela_CONFIG_PRESSAO.h: 61: sp_estacionaria = 0;
 12943  001CAC  0E00               	movlw	0
 12944  001CAE  6FE4               	movwf	_sp_estacionaria& (0+255),b
 12945                           
 12946                           ; BSR set to: 0
 12947                           ;tela_CONFIG_PRESSAO.h: 62: }
 12948                           ;tela_CONFIG_PRESSAO.h: 63: break;
 12949  001CB0  D014               	goto	l893
 12950  001CB2  FFFF               	dw	65535	; assembler added errata NOP
 12951                           
 12952                           ; BSR set to: 0
 12953                           
 12954                           ; BSR set to: 0
 12955  001CB4  0E00               	movlw	0
 12956  001CB6  6FE3               	movwf	_option_posi& (0+255),b
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;tela_CONFIG_PRESSAO.h: 66: }
 12960                           
 12961                           ;tela_CONFIG_PRESSAO.h: 65: break;
 12962  001CB8  D010               	goto	l893
 12963  001CBA                     l888:
 12964  001CBA  FFFF               	dw	65535	; assembler added errata NOP
 12965                           
 12966                           ; BSR set to: 0
 12967  001CBC  0100               	movlb	0	; () banked
 12968  001CBE  51E3               	movf	_option_posi& (0+255),w,b
 12969                           
 12970                           ; Switch size 1, requested type "space"
 12971                           ; Number of cases is 4, Range of values is 0 to 3
 12972                           ; switch strategies available:
 12973                           ; Name         Instructions Cycles
 12974                           ; simple_byte           13     7 (average)
 12975                           ;	Chosen strategy is simple_byte
 12976  001CC0  0A00               	xorlw	0	; case 0
 12977  001CC2  B4D8               	btfsc	status,2,c
 12978  001CC4  D765               	goto	l889
 12979  001CC6  0A01               	xorlw	1	; case 1
 12980  001CC8  B4D8               	btfsc	status,2,c
 12981  001CCA  D787               	goto	l894
 12982  001CCC  0A03               	xorlw	3	; case 2
 12983  001CCE  B4D8               	btfsc	status,2,c
 12984  001CD0  D7A8               	goto	l898
 12985  001CD2  0A01               	xorlw	1	; case 3
 12986  001CD4  B4D8               	btfsc	status,2,c
 12987  001CD6  D7C9               	goto	l902
 12988  001CD8  D7EC               	goto	l906
 12989  001CDA                     l893:
 12990  001CDA  FFFF               	dw	65535	; assembler added errata NOP
 12991                           
 12992                           ; BSR set to: 0
 12993                           ;tela_CONFIG_PRESSAO.h: 68: if (btPress(1)) {
 12994                           
 12995                           ; BSR set to: 0
 12996  001CDC  0E01               	movlw	1
 12997  001CDE  EC9A  F03B         	call	_btPress
 12998  001CE2  0900               	iorlw	0
 12999  001CE4  B4D8               	btfsc	status,2,c
 13000  001CE6  D01A               	goto	l907
 13001                           
 13002                           ;tela_CONFIG_PRESSAO.h: 69: writeEEPROM_ext(0, sp_jockey);
 13003  001CE8  C0E6  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 13004  001CEC  0E00               	movlw	0
 13005  001CEE  EC06  F039         	call	_writeEEPROM_ext
 13006                           
 13007                           ;tela_CONFIG_PRESSAO.h: 70: writeEEPROM_ext(1, sp_principal);
 13008  001CF2  C0E5  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 13009  001CF6  0E01               	movlw	1
 13010  001CF8  EC06  F039         	call	_writeEEPROM_ext
 13011                           
 13012                           ;tela_CONFIG_PRESSAO.h: 71: writeEEPROM_ext(2, sp_estacionaria);
 13013  001CFC  C0E4  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 13014  001D00  0E02               	movlw	2
 13015  001D02  EC06  F039         	call	_writeEEPROM_ext
 13016                           
 13017                           ;tela_CONFIG_PRESSAO.h: 72: writeEEPROM_ext(4, sp_pressao_rede);
 13018  001D06  C0E7  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 13019  001D0A  0E04               	movlw	4
 13020  001D0C  EC06  F039         	call	_writeEEPROM_ext
 13021                           
 13022                           ;tela_CONFIG_PRESSAO.h: 73: option_posi = 0;
 13023  001D10  0E00               	movlw	0
 13024  001D12  0100               	movlb	0	; () banked
 13025  001D14  6FE3               	movwf	_option_posi& (0+255),b
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;tela_CONFIG_PRESSAO.h: 74: menu_posi = _menu_posi;
 13029  001D16  C0E1  F0E2         	movff	__menu_posi,_menu_posi
 13030                           
 13031                           ;tela_CONFIG_PRESSAO.h: 75: } else if (btPress(4)) {
 13032  001D1A  D009               	goto	l909
 13033  001D1C                     l907:
 13034  001D1C  FFFF               	dw	65535	; assembler added errata NOP
 13035                           
 13036                           ; BSR set to: 0
 13037  001D1E  0E04               	movlw	4
 13038  001D20  EC9A  F03B         	call	_btPress
 13039  001D24  0900               	iorlw	0
 13040  001D26  B4D8               	btfsc	status,2,c
 13041  001D28  D002               	goto	l909
 13042                           
 13043                           ;tela_CONFIG_PRESSAO.h: 76: option_posi++;
 13044  001D2A  0100               	movlb	0	; () banked
 13045  001D2C  2BE3               	incf	_option_posi& (0+255),f,b
 13046  001D2E                     l909:
 13047  001D2E  FFFF               	dw	65535	; assembler added errata NOP
 13048                           
 13049                           ; BSR set to: 0
 13050                           
 13051                           ; BSR set to: 0
 13052  001D30  0012               	return		;funcret
 13053  001D32  FFFF               	dw	65535	; errata NOP
 13054  001D34                     __end_of_ajusteSP_Bombas:
 13055                           	opt stack 0
 13056                           tblptru	equ	0xFF8
 13057                           tblptrh	equ	0xFF7
 13058                           tblptrl	equ	0xFF6
 13059                           tablat	equ	0xFF5
 13060                           prodh	equ	0xFF4
 13061                           prodl	equ	0xFF3
 13062                           intcon	equ	0xFF2
 13063                           intcon2	equ	0xFF1
 13064                           intcon3	equ	0xFF0
 13065                           postinc0	equ	0xFEE
 13066                           wreg	equ	0xFE8
 13067                           postdec1	equ	0xFE5
 13068                           fsr1l	equ	0xFE1
 13069                           indf2	equ	0xFDF
 13070                           postinc2	equ	0xFDE
 13071                           postdec2	equ	0xFDD
 13072                           fsr2h	equ	0xFDA
 13073                           fsr2l	equ	0xFD9
 13074                           status	equ	0xFD8
 13075                           
 13076 ;; *************** function _blink *****************
 13077 ;; Defined at:
 13078 ;;		line 196 in file "lcd.h"
 13079 ;; Parameters:    Size  Location     Type
 13080 ;;  line            2    0[BANK0 ] PTR unsigned char 
 13081 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 13082 ;;  start           1    2[BANK0 ] unsigned char 
 13083 ;;  end             1    3[BANK0 ] unsigned char 
 13084 ;; Auto vars:     Size  Location     Type
 13085 ;;  i               1    4[BANK0 ] unsigned char 
 13086 ;; Return value:  Size  Location     Type
 13087 ;;                  1    wreg      void 
 13088 ;; Registers used:
 13089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13090 ;; Tracked objects:
 13091 ;;		On entry : 0/0
 13092 ;;		On exit  : 0/0
 13093 ;;		Unchanged: 0/0
 13094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13095 ;;      Params:         0       4       0       0       0       0       0
 13096 ;;      Locals:         0       1       0       0       0       0       0
 13097 ;;      Temps:          0       0       0       0       0       0       0
 13098 ;;      Totals:         0       5       0       0       0       0       0
 13099 ;;Total ram usage:        5 bytes
 13100 ;; Hardware stack levels used:    1
 13101 ;; Hardware stack levels required when called:    6
 13102 ;; This function calls:
 13103 ;;		Nothing
 13104 ;; This function is called by:
 13105 ;;		_telaPrincipal
 13106 ;;		_tela_ajusteRTC
 13107 ;;		_tela_testeBombas
 13108 ;;		_configuraTelefones
 13109 ;;		_configurarEstacionaria
 13110 ;;		_ajusteSP_Bombas
 13111 ;; This function uses a non-reentrant model
 13112 ;;
 13113                           
 13114                           	psect	text36
 13115  00708A                     __ptext36:
 13116                           	opt stack 0
 13117  00708A                     _blink:
 13118                           	opt stack 0
 13119  00708A  FFFF               	dw	65535	; assembler added errata NOP
 13120                           
 13121                           ;lcd.h: 197: if (blinkk) {
 13122                           
 13123                           ;incstack = 0
 13124  00708C  5068               	movf	_blinkk,w,c
 13125  00708E  B4D8               	btfsc	status,2,c
 13126  007090  D018               	goto	u6430
 13127                           
 13128                           ;lcd.h: 198: char i = 0;
 13129  007092  0E00               	movlw	0
 13130  007094  0100               	movlb	0	; () banked
 13131  007096  6F84               	movwf	blink@i& (0+255),b
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;lcd.h: 199: for (i = (--start); i < end; i++) {
 13135  007098  0782               	decf	blink@start& (0+255),f,b
 13136  00709A  C082  F084         	movff	blink@start,blink@i
 13137  00709E  D00C               	goto	l664
 13138  0070A0  FFFF               	dw	65535	; assembler added errata NOP
 13139                           
 13140                           ; BSR set to: 0
 13141                           ;lcd.h: 200: line[i] = ' ';
 13142                           
 13143                           ; BSR set to: 0
 13144  0070A2  5184               	movf	blink@i& (0+255),w,b
 13145  0070A4  0D01               	mullw	1
 13146  0070A6  50F3               	movf	prodl,w,c
 13147  0070A8  2580               	addwf	blink@line& (0+255),w,b
 13148  0070AA  6ED9               	movwf	fsr2l,c
 13149  0070AC  50F4               	movf	prodh,w,c
 13150  0070AE  2181               	addwfc	(blink@line+1)& (0+255),w,b
 13151  0070B0  6EDA               	movwf	fsr2h,c
 13152  0070B2  0E20               	movlw	32
 13153  0070B4  6EDF               	movwf	indf2,c
 13154                           
 13155                           ; BSR set to: 0
 13156  0070B6  2B84               	incf	blink@i& (0+255),f,b
 13157  0070B8                     l664:
 13158  0070B8  FFFF               	dw	65535	; assembler added errata NOP
 13159                           
 13160                           ; BSR set to: 0
 13161                           
 13162                           ; BSR set to: 0
 13163  0070BA  5183               	movf	blink@end& (0+255),w,b
 13164  0070BC  5D84               	subwf	blink@i& (0+255),w,b
 13165  0070BE  A0D8               	btfss	status,0,c
 13166  0070C0  D7EF               	goto	l665
 13167  0070C2                     u6430:
 13168  0070C2  FFFF               	dw	65535	; assembler added errata NOP
 13169                           
 13170                           ; BSR set to: 0
 13171                           
 13172                           ; BSR set to: 0
 13173  0070C4  0012               	return		;funcret
 13174  0070C6  FFFF               	dw	65535	; errata NOP
 13175  0070C8                     __end_of_blink:
 13176                           	opt stack 0
 13177                           tblptru	equ	0xFF8
 13178                           tblptrh	equ	0xFF7
 13179                           tblptrl	equ	0xFF6
 13180                           tablat	equ	0xFF5
 13181                           prodh	equ	0xFF4
 13182                           prodl	equ	0xFF3
 13183                           intcon	equ	0xFF2
 13184                           intcon2	equ	0xFF1
 13185                           intcon3	equ	0xFF0
 13186                           postinc0	equ	0xFEE
 13187                           wreg	equ	0xFE8
 13188                           postdec1	equ	0xFE5
 13189                           fsr1l	equ	0xFE1
 13190                           indf2	equ	0xFDF
 13191                           postinc2	equ	0xFDE
 13192                           postdec2	equ	0xFDD
 13193                           fsr2h	equ	0xFDA
 13194                           fsr2l	equ	0xFD9
 13195                           status	equ	0xFD8
 13196                           
 13197 ;; *************** function _acaoTesteBombas *****************
 13198 ;; Defined at:
 13199 ;;		line 109 in file "controle.h"
 13200 ;; Parameters:    Size  Location     Type
 13201 ;;		None
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;  intervalo       1   90[BANK0 ] unsigned char 
 13204 ;;  i               1   77[BANK0 ] unsigned char 
 13205 ;; Return value:  Size  Location     Type
 13206 ;;                  1    wreg      void 
 13207 ;; Registers used:
 13208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13209 ;; Tracked objects:
 13210 ;;		On entry : 0/0
 13211 ;;		On exit  : 0/0
 13212 ;;		Unchanged: 0/0
 13213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13214 ;;      Params:         0       0       0       0       0       0       0
 13215 ;;      Locals:         0      14       0       0       0       0       0
 13216 ;;      Temps:          0       5       0       0       0       0       0
 13217 ;;      Totals:         0      19       0       0       0       0       0
 13218 ;;Total ram usage:       19 bytes
 13219 ;; Hardware stack levels used:    1
 13220 ;; Hardware stack levels required when called:   10
 13221 ;; This function calls:
 13222 ;;		_btPress
 13223 ;;		_drenarPressao
 13224 ;;		_enviaSMS
 13225 ;;		_intToFloatStr
 13226 ;;		_readEEPROM_ext
 13227 ;;		_salvarLOG
 13228 ;;		_sprintf
 13229 ;;		_writeEEPROM_ext
 13230 ;; This function is called by:
 13231 ;;		_main
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           	psect	text37
 13236  000F1C                     __ptext37:
 13237                           	opt stack 0
 13238  000F1C                     _acaoTesteBombas:
 13239                           	opt stack 0
 13240  000F1C  FFFF               	dw	65535	; assembler added errata NOP
 13241                           
 13242                           ;controle.h: 110: if (btPress(1)) {
 13243                           
 13244                           ;incstack = 0
 13245  000F1E  0E01               	movlw	1
 13246  000F20  EC9A  F03B         	call	_btPress
 13247  000F24  0900               	iorlw	0
 13248  000F26  B4D8               	btfsc	status,2,c
 13249  000F28  D01F               	goto	l544
 13250                           
 13251                           ;controle.h: 111: gsmOcupado = 0;
 13252  000F2A  0E00               	movlw	0
 13253  000F2C  0100               	movlb	0	; () banked
 13254  000F2E  6FF5               	movwf	_gsmOcupado& (0+255),b
 13255                           
 13256                           ;controle.h: 112: etapaTesteBombas = 0;
 13257  000F30  0E00               	movlw	0
 13258  000F32  6E6E               	movwf	_etapaTesteBombas,c
 13259                           
 13260                           ;controle.h: 113: out_BOMBA_ESTACIONARIA = 0;
 13261  000F34  0E00               	movlw	0
 13262  000F36  6FF9               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 13263                           
 13264                           ; BSR set to: 0
 13265                           ;controle.h: 114: unsigned char intervalo = readEEPROM_ext(6);
 13266  000F38  0E06               	movlw	6
 13267  000F3A  ECC5  F039         	call	_readEEPROM_ext
 13268  000F3E  0100               	movlb	0	; () banked
 13269  000F40  6FDA               	movwf	acaoTesteBombas@intervalo& (0+255),b
 13270                           
 13271                           ; BSR set to: 0
 13272                           ;controle.h: 115: intervalo_teste_dia = intervalo > 0 ? intervalo : 1;
 13273  000F42  51DA               	movf	acaoTesteBombas@intervalo& (0+255),w,b
 13274  000F44  A4D8               	btfss	status,2,c
 13275  000F46  D005               	goto	l546
 13276                           
 13277                           ; BSR set to: 0
 13278  000F48  0E00               	movlw	0
 13279  000F4A  6FD1               	movwf	(_acaoTesteBombas$1485+1)& (0+255),b
 13280  000F4C  0E01               	movlw	1
 13281  000F4E  6FD0               	movwf	_acaoTesteBombas$1485& (0+255),b
 13282  000F50  D004               	goto	l548
 13283  000F52                     l546:
 13284  000F52  FFFF               	dw	65535	; assembler added errata NOP
 13285                           
 13286                           ; BSR set to: 0
 13287  000F54  C0DA  F0D0         	movff	acaoTesteBombas@intervalo,_acaoTesteBombas$1485
 13288  000F58  6BD1               	clrf	(_acaoTesteBombas$1485+1)& (0+255),b
 13289  000F5A                     l548:
 13290  000F5A  FFFF               	dw	65535	; assembler added errata NOP
 13291                           
 13292                           ; BSR set to: 0
 13293  000F5C  C0D0  F0EB         	movff	_acaoTesteBombas$1485,_intervalo_teste_dia
 13294                           
 13295                           ;controle.h: 116: menu_posi = _menu_posi;
 13296  000F60  C0E1  F0E2         	movff	__menu_posi,_menu_posi
 13297                           
 13298                           ; BSR set to: 0
 13299                           ;controle.h: 117: char i = 0;
 13300  000F64  0E00               	movlw	0
 13301  000F66  6FCD               	movwf	acaoTesteBombas@i& (0+255),b
 13302  000F68                     l544:
 13303  000F68  FFFF               	dw	65535	; assembler added errata NOP
 13304                           
 13305                           ;controle.h: 118: }
 13306                           ;controle.h: 120: if (etapaTesteBombas < 10) {
 13307                           
 13308                           ; BSR set to: 0
 13309  000F6A  0E0A               	movlw	10
 13310  000F6C  606E               	cpfslt	_etapaTesteBombas,c
 13311  000F6E  D1F6               	goto	l550
 13312                           
 13313                           ;controle.h: 121: sprintf(&line1[3], "Aguarde... %ds", timerTesteBombas);
 13314  000F70  0EA1               	movlw	low (_line1+3)
 13315  000F72  0100               	movlb	0	; () banked
 13316  000F74  6FA1               	movwf	sprintf@wh& (0+255),b
 13317  000F76  0E01               	movlw	high (_line1+3)
 13318  000F78  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13319  000F7A  0E3D               	movlw	low STR_39
 13320  000F7C  6FA3               	movwf	sprintf@f& (0+255),b
 13321  000F7E  0E7E               	movlw	high STR_39
 13322  000F80  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13323  000F82  C0DD  F0A5         	movff	_timerTesteBombas,?_sprintf+4
 13324  000F86  C0DE  F0A6         	movff	_timerTesteBombas+1,?_sprintf+5
 13325  000F8A  EC29  F039         	call	_sprintf	;wreg free
 13326                           
 13327                           ;controle.h: 122: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 13328  000F8E  0100               	movlb	0	; () banked
 13329  000F90  51DB               	movf	_pressao& (0+255),w,b
 13330  000F92  ECEE  F03C         	call	_intToFloatStr
 13331  000F96  C0BB  F0CE         	movff	?_intToFloatStr,_acaoTesteBombas$2569
 13332  000F9A  C0BC  F0CF         	movff	?_intToFloatStr+1,_acaoTesteBombas$2569+1
 13333                           
 13334                           ;controle.h: 122: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 13335  000F9E  0E8B               	movlw	low (_line2+2)
 13336  000FA0  0100               	movlb	0	; () banked
 13337  000FA2  6FA1               	movwf	sprintf@wh& (0+255),b
 13338  000FA4  0E01               	movlw	high (_line2+2)
 13339  000FA6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13340  000FA8  0EF2               	movlw	low STR_40
 13341  000FAA  6FA3               	movwf	sprintf@f& (0+255),b
 13342  000FAC  0E7D               	movlw	high STR_40
 13343  000FAE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13344  000FB0  C0CE  F0A5         	movff	_acaoTesteBombas$2569,?_sprintf+4
 13345  000FB4  C0CF  F0A6         	movff	_acaoTesteBombas$2569+1,?_sprintf+5
 13346  000FB8  EC29  F039         	call	_sprintf	;wreg free
 13347                           
 13348                           ;controle.h: 123: }
 13349                           ;controle.h: 125: switch (etapaTesteBombas) {
 13350  000FBC  D1CF               	goto	l550
 13351  000FBE  FFFF               	dw	65535	; assembler added errata NOP
 13352                           
 13353                           ;controle.h: 127: dias_restante_teste = 0;
 13354  000FC0  0E00               	movlw	0
 13355  000FC2  0100               	movlb	0	; () banked
 13356  000FC4  6FEA               	movwf	_dias_restante_teste& (0+255),b
 13357                           
 13358                           ; BSR set to: 0
 13359                           ;controle.h: 128: writeEEPROM_ext(10, dias_restante_teste);
 13360  000FC6  C0EA  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 13361  000FCA  0E0A               	movlw	10
 13362  000FCC  EC06  F039         	call	_writeEEPROM_ext
 13363                           
 13364                           ;controle.h: 129: LATEbits.LATE2 = 1;
 13365  000FD0  848D               	bsf	3981,2,c	;volatile
 13366                           
 13367                           ;controle.h: 130: timerTesteBombas = 30;
 13368  000FD2  0E00               	movlw	0
 13369  000FD4  0100               	movlb	0	; () banked
 13370  000FD6  6FDE               	movwf	(_timerTesteBombas+1)& (0+255),b
 13371  000FD8  0E1E               	movlw	30
 13372  000FDA  6FDD               	movwf	_timerTesteBombas& (0+255),b
 13373                           
 13374                           ; BSR set to: 0
 13375                           ;controle.h: 131: etapaTesteBombas = 1;
 13376  000FDC  0E01               	movlw	1
 13377  000FDE  D119               	goto	L28
 13378  000FE0  FFFF               	dw	65535	; assembler added errata NOP
 13379                           
 13380                           ;controle.h: 134: drenarPressao();
 13381                           
 13382                           ; BSR set to: 0
 13383  000FE2  ECA5  F036         	call	_drenarPressao	;wreg free
 13384                           
 13385                           ;controle.h: 135: if (pressao <= (sp_pressao_rede - 10)) {
 13386  000FE6  0EF6               	movlw	246
 13387  000FE8  0100               	movlb	0	; () banked
 13388  000FEA  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13389  000FEC  0EFF               	movlw	255
 13390  000FEE  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 13391  000FF0  51E7               	movf	_sp_pressao_rede& (0+255),w,b
 13392  000FF2  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13393  000FF4  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 13394  000FF6  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13395  000FF8  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 13396  000FFA  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13397  000FFC  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 13398  000FFE  51DB               	movf	_pressao& (0+255),w,b
 13399  001000  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 13400  001002  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 13401  001004  0A80               	xorlw	128
 13402  001006  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 13403  001008  51DC               	movf	(_pressao+1)& (0+255),w,b
 13404  00100A  0A80               	xorlw	128
 13405  00100C  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 13406  00100E  A0D8               	btfss	status,0,c
 13407  001010  D1CF               	goto	l552
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;controle.h: 136: LATEbits.LATE2 = 0;
 13411  001012  948D               	bcf	3981,2,c	;volatile
 13412                           
 13413                           ;controle.h: 137: LATAbits.LATA3 = 1;
 13414  001014  8689               	bsf	3977,3,c	;volatile
 13415                           
 13416                           ; BSR set to: 0
 13417                           ;controle.h: 138: etapaTesteBombas = 2;
 13418  001016  0E02               	movlw	2
 13419  001018  D048               	goto	L35
 13420  00101A  FFFF               	dw	65535	; assembler added errata NOP
 13421                           
 13422                           ;controle.h: 143: sprintf(line4, "Bomba Jockey...");
 13423                           
 13424                           ; BSR set to: 0
 13425  00101C  0E5F               	movlw	low _line4
 13426  00101E  0100               	movlb	0	; () banked
 13427  001020  6FA1               	movwf	sprintf@wh& (0+255),b
 13428  001022  0E01               	movlw	high _line4
 13429  001024  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13430  001026  0ED2               	movlw	low STR_41
 13431  001028  6FA3               	movwf	sprintf@f& (0+255),b
 13432  00102A  0E7D               	movlw	high STR_41
 13433  00102C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13434  00102E  EC29  F039         	call	_sprintf	;wreg free
 13435                           
 13436                           ;controle.h: 144: if (pressao >= sp_pressao_rede) {
 13437  001032  0100               	movlb	0	; () banked
 13438  001034  51E7               	movf	_sp_pressao_rede& (0+255),w,b
 13439  001036  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13440  001038  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 13441  00103A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13442  00103C  5DDB               	subwf	_pressao& (0+255),w,b
 13443  00103E  51DC               	movf	(_pressao+1)& (0+255),w,b
 13444  001040  0A80               	xorlw	128
 13445  001042  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13446  001044  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13447  001046  0A80               	xorlw	128
 13448  001048  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 13449  00104A  A0D8               	btfss	status,0,c
 13450  00104C  D005               	goto	l556
 13451                           
 13452                           ; BSR set to: 0
 13453                           ;controle.h: 145: LATAbits.LATA3 = 0;
 13454  00104E  9689               	bcf	3977,3,c	;volatile
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;controle.h: 146: status_jockey = 1;
 13458  001050  0E01               	movlw	1
 13459  001052  6FFD               	movwf	_status_jockey& (0+255),b
 13460                           
 13461                           ;controle.h: 147: etapaTesteBombas = 3;
 13462  001054  0E03               	movlw	3
 13463  001056  6E6E               	movwf	_etapaTesteBombas,c
 13464  001058                     l556:
 13465  001058  FFFF               	dw	65535	; assembler added errata NOP
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;controle.h: 148: }
 13469                           ;controle.h: 149: if (!timerTesteBombas) {
 13470                           
 13471                           ; BSR set to: 0
 13472  00105A  51DD               	movf	_timerTesteBombas& (0+255),w,b
 13473  00105C  11DE               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13474  00105E  A4D8               	btfss	status,2,c
 13475  001060  D1A7               	goto	l552
 13476                           
 13477                           ; BSR set to: 0
 13478                           ;controle.h: 150: status_jockey = 0;
 13479  001062  0E00               	movlw	0
 13480  001064  6FFD               	movwf	_status_jockey& (0+255),b
 13481                           
 13482                           ;controle.h: 151: etapaTesteBombas = 3;
 13483  001066  0E03               	movlw	3
 13484  001068  D04D               	goto	L36
 13485  00106A                     l558:
 13486  00106A  FFFF               	dw	65535	; assembler added errata NOP
 13487                           
 13488                           ;controle.h: 156: LATEbits.LATE2 = 1;
 13489  00106C  848D               	bsf	3981,2,c	;volatile
 13490                           
 13491                           ;controle.h: 157: etapaTesteBombas = 4;
 13492  00106E  0E04               	movlw	4
 13493  001070  D0D0               	goto	L28
 13494  001072  FFFF               	dw	65535	; assembler added errata NOP
 13495                           
 13496                           ;controle.h: 160: drenarPressao();
 13497  001074  ECA5  F036         	call	_drenarPressao	;wreg free
 13498                           
 13499                           ;controle.h: 161: if (pressao <= (sp_pressao_rede - 10)) {
 13500  001078  0EF6               	movlw	246
 13501  00107A  0100               	movlb	0	; () banked
 13502  00107C  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13503  00107E  0EFF               	movlw	255
 13504  001080  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 13505  001082  51E7               	movf	_sp_pressao_rede& (0+255),w,b
 13506  001084  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13507  001086  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 13508  001088  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13509  00108A  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 13510  00108C  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13511  00108E  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 13512  001090  51DB               	movf	_pressao& (0+255),w,b
 13513  001092  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 13514  001094  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 13515  001096  0A80               	xorlw	128
 13516  001098  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 13517  00109A  51DC               	movf	(_pressao+1)& (0+255),w,b
 13518  00109C  0A80               	xorlw	128
 13519  00109E  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 13520  0010A0  A0D8               	btfss	status,0,c
 13521  0010A2  D186               	goto	l552
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;controle.h: 162: LATDbits.LATD7 = 1;
 13525  0010A4  8E8C               	bsf	3980,7,c	;volatile
 13526                           
 13527                           ;controle.h: 163: LATEbits.LATE2 = 0;
 13528  0010A6  948D               	bcf	3981,2,c	;volatile
 13529                           
 13530                           ; BSR set to: 0
 13531                           ;controle.h: 164: etapaTesteBombas = 5;
 13532  0010A8  0E05               	movlw	5
 13533  0010AA                     L35:
 13534  0010AA  FFFF               	dw	65535	; assembler added errata NOP
 13535  0010AC  6E6E               	movwf	_etapaTesteBombas,c
 13536                           
 13537                           ;controle.h: 165: timerTesteBombas = 50;
 13538  0010AE  0E00               	movlw	0
 13539  0010B0  6FDE               	movwf	(_timerTesteBombas+1)& (0+255),b
 13540  0010B2  0E32               	movlw	50
 13541  0010B4  D0BB               	goto	L27
 13542  0010B6  FFFF               	dw	65535	; assembler added errata NOP
 13543                           
 13544                           ;controle.h: 169: sprintf(line4, "Bomba Principal...");
 13545                           
 13546                           ; BSR set to: 0
 13547  0010B8  0E5F               	movlw	low _line4
 13548  0010BA  0100               	movlb	0	; () banked
 13549  0010BC  6FA1               	movwf	sprintf@wh& (0+255),b
 13550  0010BE  0E01               	movlw	high _line4
 13551  0010C0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13552  0010C2  0EE9               	movlw	low STR_42
 13553  0010C4  6FA3               	movwf	sprintf@f& (0+255),b
 13554  0010C6  0E7C               	movlw	high STR_42
 13555  0010C8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13556  0010CA  EC29  F039         	call	_sprintf	;wreg free
 13557                           
 13558                           ;controle.h: 170: if (pressao >= sp_pressao_rede) {
 13559  0010CE  0100               	movlb	0	; () banked
 13560  0010D0  51E7               	movf	_sp_pressao_rede& (0+255),w,b
 13561  0010D2  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13562  0010D4  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 13563  0010D6  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13564  0010D8  5DDB               	subwf	_pressao& (0+255),w,b
 13565  0010DA  51DC               	movf	(_pressao+1)& (0+255),w,b
 13566  0010DC  0A80               	xorlw	128
 13567  0010DE  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13568  0010E0  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13569  0010E2  0A80               	xorlw	128
 13570  0010E4  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 13571  0010E6  A0D8               	btfss	status,0,c
 13572  0010E8  D005               	goto	l562
 13573                           
 13574                           ; BSR set to: 0
 13575                           ;controle.h: 171: LATDbits.LATD7 = 0;
 13576  0010EA  9E8C               	bcf	3980,7,c	;volatile
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;controle.h: 172: status_principal = 1;
 13580  0010EC  0E01               	movlw	1
 13581  0010EE  6FFC               	movwf	_status_principal& (0+255),b
 13582                           
 13583                           ;controle.h: 173: etapaTesteBombas = 6;
 13584  0010F0  0E06               	movlw	6
 13585  0010F2  6E6E               	movwf	_etapaTesteBombas,c
 13586  0010F4                     l562:
 13587  0010F4  FFFF               	dw	65535	; assembler added errata NOP
 13588                           
 13589                           ; BSR set to: 0
 13590                           ;controle.h: 174: }
 13591                           ;controle.h: 175: if (!timerTesteBombas) {
 13592                           
 13593                           ; BSR set to: 0
 13594  0010F6  51DD               	movf	_timerTesteBombas& (0+255),w,b
 13595  0010F8  11DE               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13596  0010FA  A4D8               	btfss	status,2,c
 13597  0010FC  D159               	goto	l552
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;controle.h: 176: status_principal = 0;
 13601  0010FE  0E00               	movlw	0
 13602  001100  6FFC               	movwf	_status_principal& (0+255),b
 13603                           
 13604                           ;controle.h: 177: etapaTesteBombas = 6;
 13605  001102  0E06               	movlw	6
 13606  001104                     L36:
 13607  001104  FFFF               	dw	65535	; assembler added errata NOP
 13608  001106  6E6E               	movwf	_etapaTesteBombas,c
 13609                           
 13610                           ;controle.h: 178: timerTesteBombas = 30;
 13611  001108  0E00               	movlw	0
 13612  00110A  6FDE               	movwf	(_timerTesteBombas+1)& (0+255),b
 13613  00110C  0E1E               	movlw	30
 13614  00110E  D08E               	goto	L27
 13615  001110                     l564:
 13616  001110  FFFF               	dw	65535	; assembler added errata NOP
 13617                           
 13618                           ;controle.h: 182: LATEbits.LATE2 = 1;
 13619  001112  848D               	bsf	3981,2,c	;volatile
 13620                           
 13621                           ;controle.h: 183: etapaTesteBombas = 7;
 13622  001114  0E07               	movlw	7
 13623  001116  D07D               	goto	L28
 13624  001118  FFFF               	dw	65535	; assembler added errata NOP
 13625                           
 13626                           ;controle.h: 186: drenarPressao();
 13627  00111A  ECA5  F036         	call	_drenarPressao	;wreg free
 13628                           
 13629                           ;controle.h: 187: if (pressao <= (sp_pressao_rede - 10)) {
 13630  00111E  0EF6               	movlw	246
 13631  001120  0100               	movlb	0	; () banked
 13632  001122  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13633  001124  0EFF               	movlw	255
 13634  001126  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 13635  001128  51E7               	movf	_sp_pressao_rede& (0+255),w,b
 13636  00112A  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13637  00112C  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 13638  00112E  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13639  001130  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 13640  001132  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13641  001134  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 13642  001136  51DB               	movf	_pressao& (0+255),w,b
 13643  001138  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 13644  00113A  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 13645  00113C  0A80               	xorlw	128
 13646  00113E  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 13647  001140  51DC               	movf	(_pressao+1)& (0+255),w,b
 13648  001142  0A80               	xorlw	128
 13649  001144  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 13650  001146  A0D8               	btfss	status,0,c
 13651  001148  D133               	goto	l552
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;controle.h: 188: LATEbits.LATE2 = 0;
 13655  00114A  948D               	bcf	3981,2,c	;volatile
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;controle.h: 189: out_BOMBA_ESTACIONARIA = 1;
 13659  00114C  0E01               	movlw	1
 13660  00114E  6FF9               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 13661                           
 13662                           ;controle.h: 190: etapaTesteBombas = 8;
 13663  001150  0E08               	movlw	8
 13664  001152  6E6E               	movwf	_etapaTesteBombas,c
 13665                           
 13666                           ; BSR set to: 0
 13667                           ;controle.h: 191: timerTesteBombas = tempo_limite_estacionaria;
 13668  001154  C0E8  F0DD         	movff	_tempo_limite_estacionaria,_timerTesteBombas
 13669  001158  6BDE               	clrf	(_timerTesteBombas+1)& (0+255),b
 13670                           
 13671                           ; BSR set to: 0
 13672                           ;controle.h: 192: }
 13673                           ;controle.h: 193: break;
 13674  00115A  D12A               	goto	l552
 13675  00115C  FFFF               	dw	65535	; assembler added errata NOP
 13676                           
 13677                           ;controle.h: 195: sprintf(line4, "Bomba Combustao...");
 13678                           
 13679                           ; BSR set to: 0
 13680  00115E  0E5F               	movlw	low _line4
 13681  001160  0100               	movlb	0	; () banked
 13682  001162  6FA1               	movwf	sprintf@wh& (0+255),b
 13683  001164  0E01               	movlw	high _line4
 13684  001166  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13685  001168  0EFC               	movlw	low STR_43
 13686  00116A  6FA3               	movwf	sprintf@f& (0+255),b
 13687  00116C  0E7C               	movlw	high STR_43
 13688  00116E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13689  001170  EC29  F039         	call	_sprintf	;wreg free
 13690                           
 13691                           ;controle.h: 196: if (!PORTAbits.RA5 || pressao >= sp_pressao_rede) {
 13692  001174  AA80               	btfss	3968,5,c	;volatile
 13693  001176  D00E               	goto	u7270
 13694  001178  0100               	movlb	0	; () banked
 13695  00117A  51E7               	movf	_sp_pressao_rede& (0+255),w,b
 13696  00117C  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13697  00117E  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 13698  001180  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13699  001182  5DDB               	subwf	_pressao& (0+255),w,b
 13700  001184  51DC               	movf	(_pressao+1)& (0+255),w,b
 13701  001186  0A80               	xorlw	128
 13702  001188  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13703  00118A  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13704  00118C  0A80               	xorlw	128
 13705  00118E  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 13706  001190  A0D8               	btfss	status,0,c
 13707  001192  D009               	goto	l568
 13708  001194                     u7270:
 13709  001194  FFFF               	dw	65535	; assembler added errata NOP
 13710                           
 13711                           ;controle.h: 197: status_estacionaria = 1;
 13712                           
 13713                           ; BSR set to: 0
 13714  001196  0E01               	movlw	1
 13715  001198  0100               	movlb	0	; () banked
 13716  00119A  6FFB               	movwf	_status_estacionaria& (0+255),b
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;controle.h: 198: timerTesteBombas = tempo_limite_teste_estacionaria;
 13720  00119C  C069  F0DD         	movff	_tempo_limite_teste_estacionaria,_timerTesteBombas
 13721  0011A0  6BDE               	clrf	(_timerTesteBombas+1)& (0+255),b
 13722                           
 13723                           ;controle.h: 199: etapaTesteBombas = 9;
 13724  0011A2  0E09               	movlw	9
 13725  0011A4  6E6E               	movwf	_etapaTesteBombas,c
 13726  0011A6                     l568:
 13727  0011A6  FFFF               	dw	65535	; assembler added errata NOP
 13728                           
 13729                           ; BSR set to: 0
 13730                           ;controle.h: 200: }
 13731                           ;controle.h: 201: if (status_estacionaria == 0 || !timerTesteBombas) {
 13732  0011A8  51FB               	movf	_status_estacionaria& (0+255),w,b
 13733  0011AA  B4D8               	btfsc	status,2,c
 13734  0011AC  D004               	goto	u7290
 13735                           
 13736                           ; BSR set to: 0
 13737  0011AE  51DD               	movf	_timerTesteBombas& (0+255),w,b
 13738  0011B0  11DE               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13739  0011B2  A4D8               	btfss	status,2,c
 13740  0011B4  D0FD               	goto	l552
 13741  0011B6                     u7290:
 13742  0011B6  FFFF               	dw	65535	; assembler added errata NOP
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;controle.h: 202: etapaTesteBombas = 10;
 13746                           
 13747                           ; BSR set to: 0
 13748  0011B8  0E0A               	movlw	10
 13749  0011BA  6E6E               	movwf	_etapaTesteBombas,c
 13750                           
 13751                           ;controle.h: 203: status_estacionaria = 0;
 13752  0011BC  0E00               	movlw	0
 13753  0011BE  6FFB               	movwf	_status_estacionaria& (0+255),b
 13754  0011C0  D0C9               	goto	L29
 13755  0011C2                     l574:
 13756  0011C2  FFFF               	dw	65535	; assembler added errata NOP
 13757                           
 13758                           ;controle.h: 208: sprintf(line4, "Bomba %s", !PORTAbits.RA5 ? "Ligada..." : "Religando..
      +                          .");
 13759  0011C4  AA80               	btfss	3968,5,c	;volatile
 13760  0011C6  D005               	goto	l576
 13761  0011C8  0EA0               	movlw	low STR_46
 13762  0011CA  0100               	movlb	0	; () banked
 13763  0011CC  6FD2               	movwf	_acaoTesteBombas$1497& (0+255),b
 13764  0011CE  0E7E               	movlw	high STR_46
 13765  0011D0  D005               	goto	L30
 13766  0011D2                     l576:
 13767  0011D2  FFFF               	dw	65535	; assembler added errata NOP
 13768                           
 13769                           ; BSR set to: 0
 13770  0011D4  0E43               	movlw	low STR_45
 13771  0011D6  0100               	movlb	0	; () banked
 13772  0011D8  6FD2               	movwf	_acaoTesteBombas$1497& (0+255),b
 13773  0011DA  0E7F               	movlw	high STR_45
 13774  0011DC                     L30:
 13775  0011DC  FFFF               	dw	65535	; assembler added errata NOP
 13776  0011DE  6FD3               	movwf	(_acaoTesteBombas$1497+1)& (0+255),b
 13777                           
 13778                           ; BSR set to: 0
 13779                           
 13780                           ; BSR set to: 0
 13781  0011E0  0E5F               	movlw	low _line4
 13782  0011E2  6FA1               	movwf	sprintf@wh& (0+255),b
 13783  0011E4  0E01               	movlw	high _line4
 13784  0011E6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13785  0011E8  0E91               	movlw	low STR_44
 13786  0011EA  6FA3               	movwf	sprintf@f& (0+255),b
 13787  0011EC  0E7F               	movlw	high STR_44
 13788  0011EE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13789  0011F0  C0D2  F0A5         	movff	_acaoTesteBombas$1497,?_sprintf+4
 13790  0011F4  C0D3  F0A6         	movff	_acaoTesteBombas$1497+1,?_sprintf+5
 13791  0011F8  EC29  F039         	call	_sprintf	;wreg free
 13792                           
 13793                           ;controle.h: 209: if (!timerTesteBombas || status_estacionaria == 0) {
 13794  0011FC  0100               	movlb	0	; () banked
 13795  0011FE  51DD               	movf	_timerTesteBombas& (0+255),w,b
 13796  001200  11DE               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13797  001202  B4D8               	btfsc	status,2,c
 13798  001204  D003               	goto	u7320
 13799                           
 13800                           ; BSR set to: 0
 13801  001206  51FB               	movf	_status_estacionaria& (0+255),w,b
 13802  001208  A4D8               	btfss	status,2,c
 13803  00120A  D0D2               	goto	l552
 13804  00120C                     u7320:
 13805  00120C  FFFF               	dw	65535	; assembler added errata NOP
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;controle.h: 210: LATEbits.LATE0 = 0;
 13809  00120E  908D               	bcf	3981,0,c	;volatile
 13810                           
 13811                           ; BSR set to: 0
 13812                           ;controle.h: 211: etapaTesteBombas = 10;
 13813  001210  0E0A               	movlw	10
 13814  001212                     L28:
 13815  001212  FFFF               	dw	65535	; assembler added errata NOP
 13816  001214  6E6E               	movwf	_etapaTesteBombas,c
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;controle.h: 212: }
 13820                           ;controle.h: 213: break;
 13821  001216  D0CC               	goto	l552
 13822  001218  FFFF               	dw	65535	; assembler added errata NOP
 13823                           
 13824                           ;controle.h: 215: salvarLOG();
 13825                           
 13826                           ; BSR set to: 0
 13827  00121A  EC26  F01E         	call	_salvarLOG	;wreg free
 13828                           
 13829                           ;controle.h: 216: LATEbits.LATE0 = 0;
 13830  00121E  908D               	bcf	3981,0,c	;volatile
 13831                           
 13832                           ;controle.h: 217: etapaTesteBombas = 11;
 13833  001220  0E0B               	movlw	11
 13834  001222  6E6E               	movwf	_etapaTesteBombas,c
 13835                           
 13836                           ;controle.h: 218: timerTesteBombas = 10;
 13837  001224  0E00               	movlw	0
 13838  001226  0100               	movlb	0	; () banked
 13839  001228  6FDE               	movwf	(_timerTesteBombas+1)& (0+255),b
 13840  00122A  0E0A               	movlw	10
 13841  00122C                     L27:
 13842  00122C  FFFF               	dw	65535	; assembler added errata NOP
 13843  00122E  6FDD               	movwf	_timerTesteBombas& (0+255),b
 13844                           
 13845                           ;controle.h: 219: break;
 13846  001230  D0BF               	goto	l552
 13847  001232  FFFF               	dw	65535	; assembler added errata NOP
 13848                           
 13849                           ;controle.h: 221: sprintf(&line1[2], "Teste Concluido!");
 13850                           
 13851                           ; BSR set to: 0
 13852  001234  0EA0               	movlw	low (_line1+2)
 13853  001236  0100               	movlb	0	; () banked
 13854  001238  6FA1               	movwf	sprintf@wh& (0+255),b
 13855  00123A  0E01               	movlw	high (_line1+2)
 13856  00123C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13857  00123E  0E8F               	movlw	low STR_47
 13858  001240  6FA3               	movwf	sprintf@f& (0+255),b
 13859  001242  0E7D               	movlw	high STR_47
 13860  001244  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13861  001246  EC29  F039         	call	_sprintf	;wreg free
 13862                           
 13863                           ;controle.h: 222: sprintf(line2, "JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 13864  00124A  0100               	movlb	0	; () banked
 13865  00124C  05FD               	decf	_status_jockey& (0+255),w,b
 13866  00124E  B4D8               	btfsc	status,2,c
 13867  001250  D004               	goto	l585
 13868                           
 13869                           ; BSR set to: 0
 13870  001252  0EE2               	movlw	low STR_50
 13871  001254  6FD4               	movwf	_acaoTesteBombas$1504& (0+255),b
 13872  001256  0E7F               	movlw	high STR_50
 13873  001258  D004               	goto	L31
 13874  00125A                     l585:
 13875  00125A  FFFF               	dw	65535	; assembler added errata NOP
 13876                           
 13877                           ; BSR set to: 0
 13878                           
 13879                           ; BSR set to: 0
 13880  00125C  0EF9               	movlw	low STR_5
 13881  00125E  6FD4               	movwf	_acaoTesteBombas$1504& (0+255),b
 13882  001260  0E7F               	movlw	high STR_5
 13883  001262                     L31:
 13884  001262  FFFF               	dw	65535	; assembler added errata NOP
 13885  001264  6FD5               	movwf	(_acaoTesteBombas$1504+1)& (0+255),b
 13886                           
 13887                           ; BSR set to: 0
 13888                           
 13889                           ; BSR set to: 0
 13890  001266  0E89               	movlw	low _line2
 13891  001268  6FA1               	movwf	sprintf@wh& (0+255),b
 13892  00126A  0E01               	movlw	high _line2
 13893  00126C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13894  00126E  0E2D               	movlw	low STR_48
 13895  001270  6FA3               	movwf	sprintf@f& (0+255),b
 13896  001272  0E7F               	movlw	high STR_48
 13897  001274  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13898  001276  C0D4  F0A5         	movff	_acaoTesteBombas$1504,?_sprintf+4
 13899  00127A  C0D5  F0A6         	movff	_acaoTesteBombas$1504+1,?_sprintf+5
 13900  00127E  EC29  F039         	call	_sprintf	;wreg free
 13901                           
 13902                           ;controle.h: 223: sprintf(line3, "PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO"
      +                          );
 13903  001282  0100               	movlb	0	; () banked
 13904  001284  05FC               	decf	_status_principal& (0+255),w,b
 13905  001286  B4D8               	btfsc	status,2,c
 13906  001288  D004               	goto	l589
 13907                           
 13908                           ; BSR set to: 0
 13909  00128A  0EE2               	movlw	low STR_50
 13910  00128C  6FD6               	movwf	_acaoTesteBombas$1509& (0+255),b
 13911  00128E  0E7F               	movlw	high STR_50
 13912  001290  D004               	goto	L32
 13913  001292                     l589:
 13914  001292  FFFF               	dw	65535	; assembler added errata NOP
 13915                           
 13916                           ; BSR set to: 0
 13917                           
 13918                           ; BSR set to: 0
 13919  001294  0EF9               	movlw	low STR_5
 13920  001296  6FD6               	movwf	_acaoTesteBombas$1509& (0+255),b
 13921  001298  0E7F               	movlw	high STR_5
 13922  00129A                     L32:
 13923  00129A  FFFF               	dw	65535	; assembler added errata NOP
 13924  00129C  6FD7               	movwf	(_acaoTesteBombas$1509+1)& (0+255),b
 13925                           
 13926                           ; BSR set to: 0
 13927                           
 13928                           ; BSR set to: 0
 13929  00129E  0E74               	movlw	low _line3
 13930  0012A0  6FA1               	movwf	sprintf@wh& (0+255),b
 13931  0012A2  0E01               	movlw	high _line3
 13932  0012A4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13933  0012A6  0E1F               	movlw	low STR_51
 13934  0012A8  6FA3               	movwf	sprintf@f& (0+255),b
 13935  0012AA  0E7E               	movlw	high STR_51
 13936  0012AC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13937  0012AE  C0D6  F0A5         	movff	_acaoTesteBombas$1509,?_sprintf+4
 13938  0012B2  C0D7  F0A6         	movff	_acaoTesteBombas$1509+1,?_sprintf+5
 13939  0012B6  EC29  F039         	call	_sprintf	;wreg free
 13940                           
 13941                           ;controle.h: 224: sprintf(line4, "COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "ER
      +                          RO");
 13942  0012BA  0100               	movlb	0	; () banked
 13943  0012BC  05FB               	decf	_status_estacionaria& (0+255),w,b
 13944  0012BE  B4D8               	btfsc	status,2,c
 13945  0012C0  D004               	goto	l593
 13946                           
 13947                           ; BSR set to: 0
 13948  0012C2  0EE2               	movlw	low STR_50
 13949  0012C4  6FD8               	movwf	_acaoTesteBombas$1514& (0+255),b
 13950  0012C6  0E7F               	movlw	high STR_50
 13951  0012C8  D004               	goto	L33
 13952  0012CA                     l593:
 13953  0012CA  FFFF               	dw	65535	; assembler added errata NOP
 13954                           
 13955                           ; BSR set to: 0
 13956                           
 13957                           ; BSR set to: 0
 13958  0012CC  0EF9               	movlw	low STR_5
 13959  0012CE  6FD8               	movwf	_acaoTesteBombas$1514& (0+255),b
 13960  0012D0  0E7F               	movlw	high STR_5
 13961  0012D2                     L33:
 13962  0012D2  FFFF               	dw	65535	; assembler added errata NOP
 13963  0012D4  6FD9               	movwf	(_acaoTesteBombas$1514+1)& (0+255),b
 13964                           
 13965                           ; BSR set to: 0
 13966                           
 13967                           ; BSR set to: 0
 13968  0012D6  0E5F               	movlw	low _line4
 13969  0012D8  6FA1               	movwf	sprintf@wh& (0+255),b
 13970  0012DA  0E01               	movlw	high _line4
 13971  0012DC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13972  0012DE  0E2E               	movlw	low STR_54
 13973  0012E0  6FA3               	movwf	sprintf@f& (0+255),b
 13974  0012E2  0E7E               	movlw	high STR_54
 13975  0012E4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13976  0012E6  C0D8  F0A5         	movff	_acaoTesteBombas$1514,?_sprintf+4
 13977  0012EA  C0D9  F0A6         	movff	_acaoTesteBombas$1514+1,?_sprintf+5
 13978  0012EE  EC29  F039         	call	_sprintf	;wreg free
 13979                           
 13980                           ;controle.h: 225: out_BOMBA_ESTACIONARIA = 0;
 13981  0012F2  0E00               	movlw	0
 13982  0012F4  0100               	movlb	0	; () banked
 13983  0012F6  6FF9               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 13984                           
 13985                           ; BSR set to: 0
 13986                           ;controle.h: 226: if (!timerTesteBombas) {
 13987  0012F8  51DD               	movf	_timerTesteBombas& (0+255),w,b
 13988  0012FA  11DE               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13989  0012FC  A4D8               	btfss	status,2,c
 13990  0012FE  D058               	goto	l552
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;controle.h: 227: etapaTesteBombas = 12;
 13994  001300  0E0C               	movlw	12
 13995  001302  6E6E               	movwf	_etapaTesteBombas,c
 13996                           
 13997                           ;controle.h: 228: timerTesteBombas = 120;
 13998  001304  0E00               	movlw	0
 13999  001306  6FDE               	movwf	(_timerTesteBombas+1)& (0+255),b
 14000  001308  0E78               	movlw	120
 14001  00130A  6FDD               	movwf	_timerTesteBombas& (0+255),b
 14002                           
 14003                           ;controle.h: 229: timerReenvioSMS = 0;
 14004  00130C  0E00               	movlw	0
 14005  00130E  6FF7               	movwf	_timerReenvioSMS& (0+255),b
 14006                           
 14007                           ;controle.h: 230: gsmOcupado = 1;
 14008  001310  0E01               	movlw	1
 14009  001312  D017               	goto	L34
 14010  001314  FFFF               	dw	65535	; assembler added errata NOP
 14011                           
 14012                           ;controle.h: 234: sprintf(&line4[2], "enviando SMS...");
 14013                           
 14014                           ; BSR set to: 0
 14015  001316  0E61               	movlw	low (_line4+2)
 14016  001318  0100               	movlb	0	; () banked
 14017  00131A  6FA1               	movwf	sprintf@wh& (0+255),b
 14018  00131C  0E01               	movlw	high (_line4+2)
 14019  00131E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 14020  001320  0EC2               	movlw	low STR_57
 14021  001322  6FA3               	movwf	sprintf@f& (0+255),b
 14022  001324  0E7D               	movlw	high STR_57
 14023  001326  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 14024  001328  EC29  F039         	call	_sprintf	;wreg free
 14025                           
 14026                           ;controle.h: 235: enviaSMS(2);
 14027  00132C  0E02               	movlw	2
 14028  00132E  ECBF  F00B         	call	_enviaSMS
 14029                           
 14030                           ;controle.h: 236: if (!timerTesteBombas) {
 14031  001332  0100               	movlb	0	; () banked
 14032  001334  51DD               	movf	_timerTesteBombas& (0+255),w,b
 14033  001336  11DE               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 14034  001338  A4D8               	btfss	status,2,c
 14035  00133A  D03A               	goto	l552
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;controle.h: 237: menu_posi = 0;
 14039  00133C  0E00               	movlw	0
 14040  00133E  6FE2               	movwf	_menu_posi& (0+255),b
 14041                           
 14042                           ;controle.h: 238: gsmOcupado = 0;
 14043  001340  0E00               	movlw	0
 14044  001342                     L34:
 14045  001342  FFFF               	dw	65535	; assembler added errata NOP
 14046  001344  6FF5               	movwf	_gsmOcupado& (0+255),b
 14047                           
 14048                           ; BSR set to: 0
 14049                           ;controle.h: 239: }
 14050                           ;controle.h: 240: break;
 14051  001346  D034               	goto	l552
 14052  001348  FFFF               	dw	65535	; assembler added errata NOP
 14053                           
 14054                           ;controle.h: 242: etapaTesteBombas = 0;
 14055                           
 14056                           ; BSR set to: 0
 14057  00134A  0E00               	movlw	0
 14058  00134C  6E6E               	movwf	_etapaTesteBombas,c
 14059                           
 14060                           ;controle.h: 243: menu_posi = 0;
 14061  00134E  0E00               	movlw	0
 14062  001350  0100               	movlb	0	; () banked
 14063  001352  6FE2               	movwf	_menu_posi& (0+255),b
 14064  001354                     L29:
 14065  001354  FFFF               	dw	65535	; assembler added errata NOP
 14066                           
 14067                           ;controle.h: 244: out_BOMBA_ESTACIONARIA = 0;
 14068  001356  0E00               	movlw	0
 14069  001358  6FF9               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;controle.h: 246: }
 14073                           
 14074                           ;controle.h: 245: break;
 14075  00135A  D02A               	goto	l552
 14076  00135C                     l550:
 14077  00135C  FFFF               	dw	65535	; assembler added errata NOP
 14078                           
 14079                           ; BSR set to: 0
 14080  00135E  506E               	movf	_etapaTesteBombas,w,c
 14081                           
 14082                           ; Switch size 1, requested type "space"
 14083                           ; Number of cases is 13, Range of values is 0 to 12
 14084                           ; switch strategies available:
 14085                           ; Name         Instructions Cycles
 14086                           ; simple_byte           40    21 (average)
 14087                           ;	Chosen strategy is simple_byte
 14088  001360  0A00               	xorlw	0	; case 0
 14089  001362  B4D8               	btfsc	status,2,c
 14090  001364  D62C               	goto	l551
 14091  001366  0A01               	xorlw	1	; case 1
 14092  001368  B4D8               	btfsc	status,2,c
 14093  00136A  D63A               	goto	l553
 14094  00136C  0A03               	xorlw	3	; case 2
 14095  00136E  B4D8               	btfsc	status,2,c
 14096  001370  D654               	goto	l555
 14097  001372  0A01               	xorlw	1	; case 3
 14098  001374  B4D8               	btfsc	status,2,c
 14099  001376  D679               	goto	l558
 14100  001378  0A07               	xorlw	7	; case 4
 14101  00137A  B4D8               	btfsc	status,2,c
 14102  00137C  D67A               	goto	l559
 14103  00137E  0A01               	xorlw	1	; case 5
 14104  001380  B4D8               	btfsc	status,2,c
 14105  001382  D699               	goto	l561
 14106  001384  0A03               	xorlw	3	; case 6
 14107  001386  B4D8               	btfsc	status,2,c
 14108  001388  D6C3               	goto	l564
 14109  00138A  0A01               	xorlw	1	; case 7
 14110  00138C  B4D8               	btfsc	status,2,c
 14111  00138E  D6C4               	goto	l565
 14112  001390  0A0F               	xorlw	15	; case 8
 14113  001392  B4D8               	btfsc	status,2,c
 14114  001394  D6E3               	goto	l567
 14115  001396  0A01               	xorlw	1	; case 9
 14116  001398  B4D8               	btfsc	status,2,c
 14117  00139A  D713               	goto	l574
 14118  00139C  0A03               	xorlw	3	; case 10
 14119  00139E  B4D8               	btfsc	status,2,c
 14120  0013A0  D73B               	goto	l582
 14121  0013A2  0A01               	xorlw	1	; case 11
 14122  0013A4  B4D8               	btfsc	status,2,c
 14123  0013A6  D745               	goto	l583
 14124  0013A8  0A07               	xorlw	7	; case 12
 14125  0013AA  B4D8               	btfsc	status,2,c
 14126  0013AC  D7B3               	goto	l597
 14127  0013AE  D7CC               	goto	l599
 14128  0013B0                     l552:
 14129  0013B0  FFFF               	dw	65535	; assembler added errata NOP
 14130  0013B2  0012               	return		;funcret
 14131  0013B4  FFFF               	dw	65535	; errata NOP
 14132  0013B6                     __end_of_acaoTesteBombas:
 14133                           	opt stack 0
 14134                           tblptru	equ	0xFF8
 14135                           tblptrh	equ	0xFF7
 14136                           tblptrl	equ	0xFF6
 14137                           tablat	equ	0xFF5
 14138                           prodh	equ	0xFF4
 14139                           prodl	equ	0xFF3
 14140                           intcon	equ	0xFF2
 14141                           intcon2	equ	0xFF1
 14142                           intcon3	equ	0xFF0
 14143                           postinc0	equ	0xFEE
 14144                           wreg	equ	0xFE8
 14145                           postdec1	equ	0xFE5
 14146                           fsr1l	equ	0xFE1
 14147                           indf2	equ	0xFDF
 14148                           postinc2	equ	0xFDE
 14149                           postdec2	equ	0xFDD
 14150                           fsr2h	equ	0xFDA
 14151                           fsr2l	equ	0xFD9
 14152                           status	equ	0xFD8
 14153                           
 14154 ;; *************** function _salvarLOG *****************
 14155 ;; Defined at:
 14156 ;;		line 9 in file "logs.h"
 14157 ;; Parameters:    Size  Location     Type
 14158 ;;		None
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 14161 ;; Return value:  Size  Location     Type
 14162 ;;                  1    wreg      void 
 14163 ;; Registers used:
 14164 ;;		wreg, status,2, status,0, cstack
 14165 ;; Tracked objects:
 14166 ;;		On entry : 0/0
 14167 ;;		On exit  : 0/0
 14168 ;;		Unchanged: 0/0
 14169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14170 ;;      Params:         0       0       0       0       0       0       0
 14171 ;;      Locals:         0       2       0       0       0       0       0
 14172 ;;      Temps:          0       1       0       0       0       0       0
 14173 ;;      Totals:         0       3       0       0       0       0       0
 14174 ;;Total ram usage:        3 bytes
 14175 ;; Hardware stack levels used:    1
 14176 ;; Hardware stack levels required when called:    9
 14177 ;; This function calls:
 14178 ;;		_readEEPROM_ext
 14179 ;;		_writeEEPROM_ext
 14180 ;; This function is called by:
 14181 ;;		_acaoTesteBombas
 14182 ;; This function uses a non-reentrant model
 14183 ;;
 14184                           
 14185                           	psect	text38
 14186  003C4C                     __ptext38:
 14187                           	opt stack 0
 14188  003C4C                     _salvarLOG:
 14189                           	opt stack 0
 14190  003C4C  FFFF               	dw	65535	; assembler added errata NOP
 14191                           
 14192                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 14193                           
 14194                           ;incstack = 0
 14195  003C4E  0E0E               	movlw	14
 14196  003C50  ECC5  F039         	call	_readEEPROM_ext
 14197  003C54  0100               	movlb	0	; () banked
 14198  003C56  6F8E               	movwf	??_salvarLOG& (0+255),b
 14199  003C58  518E               	movf	??_salvarLOG& (0+255),w,b
 14200  003C5A  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 14201  003C5C  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 14205  003C5E  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 14206  003C60  E104               	bnz	u6280
 14207  003C62  0E3C               	movlw	60
 14208  003C64  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14209  003C66  A0D8               	btfss	status,0,c
 14210  003C68  D006               	goto	u6290
 14211  003C6A                     u6280:
 14212                           
 14213                           ; BSR set to: 0
 14214  003C6A  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 14215  003C6C  E105               	bnz	l6211
 14216  003C6E  0EFB               	movlw	251
 14217  003C70  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14218  003C72  A0D8               	btfss	status,0,c
 14219  003C74  D005               	goto	l431
 14220  003C76                     u6290:
 14221  003C76  FFFF               	dw	65535	; assembler added errata NOP
 14222  003C78                     l6211:
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;logs.h: 12: ultimoLogSalvo = 60;
 14226  003C78  0E00               	movlw	0
 14227  003C7A  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 14228  003C7C  0E3C               	movlw	60
 14229  003C7E  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 14230  003C80                     l431:
 14231  003C80  FFFF               	dw	65535	; assembler added errata NOP
 14232                           
 14233                           ; BSR set to: 0
 14234                           ;logs.h: 13: }
 14235                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 14236                           
 14237                           ; BSR set to: 0
 14238  003C82  C0EE  F08C         	movff	__dia,writeEEPROM_ext@data
 14239  003C86  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14240  003C88  EC06  F039         	call	_writeEEPROM_ext
 14241                           
 14242                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 14243  003C8C  C0ED  F08C         	movff	__mes,writeEEPROM_ext@data
 14244  003C90  0100               	movlb	0	; () banked
 14245  003C92  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14246  003C94  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14247  003C96  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14248  003C98  EC06  F039         	call	_writeEEPROM_ext
 14249                           
 14250                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 14251  003C9C  C0EC  F08C         	movff	__ano,writeEEPROM_ext@data
 14252  003CA0  0100               	movlb	0	; () banked
 14253  003CA2  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14254  003CA4  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14255  003CA6  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14256  003CA8  EC06  F039         	call	_writeEEPROM_ext
 14257                           
 14258                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 14259  003CAC  C0EF  F08C         	movff	__hor,writeEEPROM_ext@data
 14260  003CB0  0100               	movlb	0	; () banked
 14261  003CB2  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14262  003CB4  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14263  003CB6  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14264  003CB8  EC06  F039         	call	_writeEEPROM_ext
 14265                           
 14266                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 14267  003CBC  C0F0  F08C         	movff	__min,writeEEPROM_ext@data
 14268  003CC0  0100               	movlb	0	; () banked
 14269  003CC2  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14270  003CC4  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14271  003CC6  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14272  003CC8  EC06  F039         	call	_writeEEPROM_ext
 14273                           
 14274                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 14275  003CCC  C0FD  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 14276  003CD0  0100               	movlb	0	; () banked
 14277  003CD2  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14278  003CD4  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14279  003CD6  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14280  003CD8  EC06  F039         	call	_writeEEPROM_ext
 14281                           
 14282                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 14283  003CDC  C0FC  F08C         	movff	_status_principal,writeEEPROM_ext@data
 14284  003CE0  0100               	movlb	0	; () banked
 14285  003CE2  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14286  003CE4  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14287  003CE6  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14288  003CE8  EC06  F039         	call	_writeEEPROM_ext
 14289                           
 14290                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 14291  003CEC  C0FB  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 14292  003CF0  0100               	movlb	0	; () banked
 14293  003CF2  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14294  003CF4  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14295  003CF6  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14296  003CF8  EC06  F039         	call	_writeEEPROM_ext
 14297                           
 14298                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 14299  003CFC  0100               	movlb	0	; () banked
 14300  003CFE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14301  003D00  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14302  003D02  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 14303  003D06  0E0E               	movlw	14
 14304  003D08  EC06  F039         	call	_writeEEPROM_ext
 14305  003D0C  0012               	return		;funcret
 14306  003D0E  FFFF               	dw	65535	; errata NOP
 14307  003D10                     __end_of_salvarLOG:
 14308                           	opt stack 0
 14309                           tblptru	equ	0xFF8
 14310                           tblptrh	equ	0xFF7
 14311                           tblptrl	equ	0xFF6
 14312                           tablat	equ	0xFF5
 14313                           prodh	equ	0xFF4
 14314                           prodl	equ	0xFF3
 14315                           intcon	equ	0xFF2
 14316                           intcon2	equ	0xFF1
 14317                           intcon3	equ	0xFF0
 14318                           postinc0	equ	0xFEE
 14319                           wreg	equ	0xFE8
 14320                           postdec1	equ	0xFE5
 14321                           fsr1l	equ	0xFE1
 14322                           indf2	equ	0xFDF
 14323                           postinc2	equ	0xFDE
 14324                           postdec2	equ	0xFDD
 14325                           fsr2h	equ	0xFDA
 14326                           fsr2l	equ	0xFD9
 14327                           status	equ	0xFD8
 14328                           
 14329 ;; *************** function _writeEEPROM_ext *****************
 14330 ;; Defined at:
 14331 ;;		line 13 in file "eeprom.h"
 14332 ;; Parameters:    Size  Location     Type
 14333 ;;  adress          1    wreg     unsigned char 
 14334 ;;  data            1   12[BANK0 ] unsigned char 
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;  adress          1   13[BANK0 ] unsigned char 
 14337 ;; Return value:  Size  Location     Type
 14338 ;;                  1    wreg      void 
 14339 ;; Registers used:
 14340 ;;		wreg, status,2, status,0, cstack
 14341 ;; Tracked objects:
 14342 ;;		On entry : 0/0
 14343 ;;		On exit  : 0/0
 14344 ;;		Unchanged: 0/0
 14345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14346 ;;      Params:         0       1       0       0       0       0       0
 14347 ;;      Locals:         0       1       0       0       0       0       0
 14348 ;;      Temps:          0       0       0       0       0       0       0
 14349 ;;      Totals:         0       2       0       0       0       0       0
 14350 ;;Total ram usage:        2 bytes
 14351 ;; Hardware stack levels used:    1
 14352 ;; Hardware stack levels required when called:    8
 14353 ;; This function calls:
 14354 ;;		_I2C_Start
 14355 ;;		_I2C_Stop
 14356 ;;		_I2C_Write
 14357 ;;		_delay
 14358 ;; This function is called by:
 14359 ;;		_salvarLOG
 14360 ;;		_verificarIntervaloTesteBombas
 14361 ;;		_acaoTesteBombas
 14362 ;;		_lerParametros
 14363 ;;		_tela_testeBombas
 14364 ;;		_configuraTelefones
 14365 ;;		_configurarEstacionaria
 14366 ;;		_ajusteSP_Bombas
 14367 ;;		_apagarLOGS
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           	psect	text39
 14372  00720C                     __ptext39:
 14373                           	opt stack 0
 14374  00720C                     _writeEEPROM_ext:
 14375                           	opt stack 0
 14376  00720C  FFFF               	dw	65535	; assembler added errata NOP
 14377                           
 14378                           ;incstack = 0
 14379                           ;writeEEPROM_ext@adress stored from wreg
 14380  00720E  0100               	movlb	0	; () banked
 14381  007210  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 14382                           
 14383                           ;eeprom.h: 15: I2C_Start();
 14384  007212  ECB2  F035         	call	_I2C_Start	;wreg free
 14385                           
 14386                           ;eeprom.h: 16: I2C_Write(0xA0);
 14387  007216  0E00               	movlw	0
 14388  007218  0100               	movlb	0	; () banked
 14389  00721A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 14390  00721C  0EA0               	movlw	160
 14391  00721E  6F8A               	movwf	I2C_Write@d& (0+255),b
 14392  007220  ECCB  F035         	call	_I2C_Write	;wreg free
 14393                           
 14394                           ;eeprom.h: 18: I2C_Write(adress);
 14395  007224  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 14396  007228  0100               	movlb	0	; () banked
 14397  00722A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 14398  00722C  ECCB  F035         	call	_I2C_Write	;wreg free
 14399                           
 14400                           ;eeprom.h: 19: I2C_Write(data);
 14401  007230  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 14402  007234  0100               	movlb	0	; () banked
 14403  007236  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 14404  007238  ECCB  F035         	call	_I2C_Write	;wreg free
 14405                           
 14406                           ;eeprom.h: 20: I2C_Stop();
 14407  00723C  ECB8  F035         	call	_I2C_Stop	;wreg free
 14408                           
 14409                           ;eeprom.h: 21: delay(15);
 14410  007240  0E00               	movlw	0
 14411  007242  0100               	movlb	0	; () banked
 14412  007244  6F81               	movwf	(delay@x+1)& (0+255),b
 14413  007246  0E0F               	movlw	15
 14414  007248  6F80               	movwf	delay@x& (0+255),b
 14415  00724A  EC0A  F037         	call	_delay	;wreg free
 14416  00724E  0012               	return		;funcret
 14417  007250  FFFF               	dw	65535	; errata NOP
 14418  007252                     __end_of_writeEEPROM_ext:
 14419                           	opt stack 0
 14420                           tblptru	equ	0xFF8
 14421                           tblptrh	equ	0xFF7
 14422                           tblptrl	equ	0xFF6
 14423                           tablat	equ	0xFF5
 14424                           prodh	equ	0xFF4
 14425                           prodl	equ	0xFF3
 14426                           intcon	equ	0xFF2
 14427                           intcon2	equ	0xFF1
 14428                           intcon3	equ	0xFF0
 14429                           postinc0	equ	0xFEE
 14430                           wreg	equ	0xFE8
 14431                           postdec1	equ	0xFE5
 14432                           fsr1l	equ	0xFE1
 14433                           indf2	equ	0xFDF
 14434                           postinc2	equ	0xFDE
 14435                           postdec2	equ	0xFDD
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440 ;; *************** function _readEEPROM_ext *****************
 14441 ;; Defined at:
 14442 ;;		line 26 in file "eeprom.h"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;  adress          1    wreg     unsigned char 
 14445 ;; Auto vars:     Size  Location     Type
 14446 ;;  adress          1   12[BANK0 ] unsigned char 
 14447 ;;  data            1   13[BANK0 ] unsigned char 
 14448 ;; Return value:  Size  Location     Type
 14449 ;;                  1    wreg      unsigned char 
 14450 ;; Registers used:
 14451 ;;		wreg, status,2, status,0, cstack
 14452 ;; Tracked objects:
 14453 ;;		On entry : 0/0
 14454 ;;		On exit  : 0/0
 14455 ;;		Unchanged: 0/0
 14456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14457 ;;      Params:         0       0       0       0       0       0       0
 14458 ;;      Locals:         0       2       0       0       0       0       0
 14459 ;;      Temps:          0       0       0       0       0       0       0
 14460 ;;      Totals:         0       2       0       0       0       0       0
 14461 ;;Total ram usage:        2 bytes
 14462 ;; Hardware stack levels used:    1
 14463 ;; Hardware stack levels required when called:    8
 14464 ;; This function calls:
 14465 ;;		_I2C_Read
 14466 ;;		_I2C_Restart
 14467 ;;		_I2C_Start
 14468 ;;		_I2C_Stop
 14469 ;;		_I2C_Write
 14470 ;; This function is called by:
 14471 ;;		_readEEPROM16_ext
 14472 ;;		_salvarLOG
 14473 ;;		_acaoTesteBombas
 14474 ;;		_lerParametros
 14475 ;;		_dataLoger
 14476 ;; This function uses a non-reentrant model
 14477 ;;
 14478                           
 14479                           	psect	text40
 14480  00738A                     __ptext40:
 14481                           	opt stack 0
 14482  00738A                     _readEEPROM_ext:
 14483                           	opt stack 0
 14484  00738A  FFFF               	dw	65535	; assembler added errata NOP
 14485                           
 14486                           ;incstack = 0
 14487                           ;readEEPROM_ext@adress stored from wreg
 14488  00738C  0100               	movlb	0	; () banked
 14489  00738E  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 14490                           
 14491                           ;eeprom.h: 27: I2C_Start();
 14492  007390  ECB2  F035         	call	_I2C_Start	;wreg free
 14493                           
 14494                           ;eeprom.h: 28: I2C_Write(0xA0);
 14495  007394  0E00               	movlw	0
 14496  007396  0100               	movlb	0	; () banked
 14497  007398  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 14498  00739A  0EA0               	movlw	160
 14499  00739C  6F8A               	movwf	I2C_Write@d& (0+255),b
 14500  00739E  ECCB  F035         	call	_I2C_Write	;wreg free
 14501                           
 14502                           ;eeprom.h: 30: I2C_Write(adress);
 14503  0073A2  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 14504  0073A6  0100               	movlb	0	; () banked
 14505  0073A8  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 14506  0073AA  ECCB  F035         	call	_I2C_Write	;wreg free
 14507                           
 14508                           ;eeprom.h: 31: I2C_Restart();
 14509  0073AE  ECBE  F035         	call	_I2C_Restart	;wreg free
 14510                           
 14511                           ;eeprom.h: 32: I2C_Write(0xA1);
 14512  0073B2  0E00               	movlw	0
 14513  0073B4  0100               	movlb	0	; () banked
 14514  0073B6  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 14515  0073B8  0EA1               	movlw	161
 14516  0073BA  6F8A               	movwf	I2C_Write@d& (0+255),b
 14517  0073BC  ECCB  F035         	call	_I2C_Write	;wreg free
 14518                           
 14519                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 14520  0073C0  0E00               	movlw	0
 14521  0073C2  0100               	movlb	0	; () banked
 14522  0073C4  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 14523  0073C6  0E00               	movlw	0
 14524  0073C8  6F81               	movwf	I2C_Read@a& (0+255),b
 14525  0073CA  ECB1  F037         	call	_I2C_Read	;wreg free
 14526  0073CE  0100               	movlb	0	; () banked
 14527  0073D0  5181               	movf	?_I2C_Read& (0+255),w,b
 14528  0073D2  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 14529                           
 14530                           ;eeprom.h: 34: I2C_Stop();
 14531  0073D4  ECB8  F035         	call	_I2C_Stop	;wreg free
 14532                           
 14533                           ;eeprom.h: 35: return data;
 14534  0073D8  0100               	movlb	0	; () banked
 14535  0073DA  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 14536                           
 14537                           ; BSR set to: 0
 14538                           
 14539                           ; BSR set to: 0
 14540  0073DC  0012               	return		;funcret
 14541  0073DE  FFFF               	dw	65535	; errata NOP
 14542  0073E0                     __end_of_readEEPROM_ext:
 14543                           	opt stack 0
 14544                           tblptru	equ	0xFF8
 14545                           tblptrh	equ	0xFF7
 14546                           tblptrl	equ	0xFF6
 14547                           tablat	equ	0xFF5
 14548                           prodh	equ	0xFF4
 14549                           prodl	equ	0xFF3
 14550                           intcon	equ	0xFF2
 14551                           intcon2	equ	0xFF1
 14552                           intcon3	equ	0xFF0
 14553                           postinc0	equ	0xFEE
 14554                           wreg	equ	0xFE8
 14555                           postdec1	equ	0xFE5
 14556                           fsr1l	equ	0xFE1
 14557                           indf2	equ	0xFDF
 14558                           postinc2	equ	0xFDE
 14559                           postdec2	equ	0xFDD
 14560                           fsr2h	equ	0xFDA
 14561                           fsr2l	equ	0xFD9
 14562                           status	equ	0xFD8
 14563                           
 14564 ;; *************** function _I2C_Restart *****************
 14565 ;; Defined at:
 14566 ;;		line 31 in file "I2C.c"
 14567 ;; Parameters:    Size  Location     Type
 14568 ;;		None
 14569 ;; Auto vars:     Size  Location     Type
 14570 ;;		None
 14571 ;; Return value:  Size  Location     Type
 14572 ;;                  1    wreg      void 
 14573 ;; Registers used:
 14574 ;;		wreg, status,2, status,0, cstack
 14575 ;; Tracked objects:
 14576 ;;		On entry : 0/0
 14577 ;;		On exit  : 0/0
 14578 ;;		Unchanged: 0/0
 14579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14580 ;;      Params:         0       0       0       0       0       0       0
 14581 ;;      Locals:         0       0       0       0       0       0       0
 14582 ;;      Temps:          0       0       0       0       0       0       0
 14583 ;;      Totals:         0       0       0       0       0       0       0
 14584 ;;Total ram usage:        0 bytes
 14585 ;; Hardware stack levels used:    1
 14586 ;; Hardware stack levels required when called:    7
 14587 ;; This function calls:
 14588 ;;		_I2C_Wait
 14589 ;; This function is called by:
 14590 ;;		_getDS1307TimeDate
 14591 ;;		_readEEPROM_ext
 14592 ;;		_getDS1307Time
 14593 ;; This function uses a non-reentrant model
 14594 ;;
 14595                           
 14596                           	psect	text41
 14597  006B7C                     __ptext41:
 14598                           	opt stack 0
 14599  006B7C                     _I2C_Restart:
 14600                           	opt stack 0
 14601  006B7C  FFFF               	dw	65535	; assembler added errata NOP
 14602                           
 14603                           ;I2C.c: 32: I2C_Wait();
 14604                           
 14605                           ; BSR set to: 0
 14606                           ;incstack = 0
 14607  006B7E  EC03  F036         	call	_I2C_Wait	;wreg free
 14608                           
 14609                           ;I2C.c: 33: RSEN = 1;
 14610  006B82  82C5               	bsf	4037,1,c	;volatile
 14611  006B84  0012               	return		;funcret
 14612  006B86  FFFF               	dw	65535	; errata NOP
 14613  006B88                     __end_of_I2C_Restart:
 14614                           	opt stack 0
 14615                           tblptru	equ	0xFF8
 14616                           tblptrh	equ	0xFF7
 14617                           tblptrl	equ	0xFF6
 14618                           tablat	equ	0xFF5
 14619                           prodh	equ	0xFF4
 14620                           prodl	equ	0xFF3
 14621                           intcon	equ	0xFF2
 14622                           intcon2	equ	0xFF1
 14623                           intcon3	equ	0xFF0
 14624                           postinc0	equ	0xFEE
 14625                           wreg	equ	0xFE8
 14626                           postdec1	equ	0xFE5
 14627                           fsr1l	equ	0xFE1
 14628                           indf2	equ	0xFDF
 14629                           postinc2	equ	0xFDE
 14630                           postdec2	equ	0xFDD
 14631                           fsr2h	equ	0xFDA
 14632                           fsr2l	equ	0xFD9
 14633                           status	equ	0xFD8
 14634                           
 14635 ;; *************** function _I2C_Read *****************
 14636 ;; Defined at:
 14637 ;;		line 47 in file "I2C.c"
 14638 ;; Parameters:    Size  Location     Type
 14639 ;;  a               2    1[BANK0 ] unsigned short 
 14640 ;; Auto vars:     Size  Location     Type
 14641 ;;  temp            2    3[BANK0 ] unsigned short 
 14642 ;; Return value:  Size  Location     Type
 14643 ;;                  2    1[BANK0 ] unsigned short 
 14644 ;; Registers used:
 14645 ;;		wreg, status,2, status,0, cstack
 14646 ;; Tracked objects:
 14647 ;;		On entry : 0/0
 14648 ;;		On exit  : 0/0
 14649 ;;		Unchanged: 0/0
 14650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14651 ;;      Params:         0       2       0       0       0       0       0
 14652 ;;      Locals:         0       2       0       0       0       0       0
 14653 ;;      Temps:          0       0       0       0       0       0       0
 14654 ;;      Totals:         0       4       0       0       0       0       0
 14655 ;;Total ram usage:        4 bytes
 14656 ;; Hardware stack levels used:    1
 14657 ;; Hardware stack levels required when called:    7
 14658 ;; This function calls:
 14659 ;;		_I2C_Wait
 14660 ;; This function is called by:
 14661 ;;		_getDS1307TimeDate
 14662 ;;		_readEEPROM_ext
 14663 ;;		_getDS1307Time
 14664 ;; This function uses a non-reentrant model
 14665 ;;
 14666                           
 14667                           	psect	text42
 14668  006F62                     __ptext42:
 14669                           	opt stack 0
 14670  006F62                     _I2C_Read:
 14671                           	opt stack 0
 14672  006F62  FFFF               	dw	65535	; assembler added errata NOP
 14673                           
 14674                           ;I2C.c: 48: unsigned short temp;
 14675                           ;I2C.c: 49: I2C_Wait();
 14676                           
 14677                           ;incstack = 0
 14678  006F64  EC03  F036         	call	_I2C_Wait	;wreg free
 14679                           
 14680                           ;I2C.c: 50: RCEN = 1;
 14681  006F68  86C5               	bsf	4037,3,c	;volatile
 14682                           
 14683                           ;I2C.c: 51: I2C_Wait();
 14684  006F6A  EC03  F036         	call	_I2C_Wait	;wreg free
 14685                           
 14686                           ;I2C.c: 52: temp = SSPBUF;
 14687  006F6E  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 14688  006F72  0100               	movlb	0	; () banked
 14689  006F74  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 14690                           
 14691                           ;I2C.c: 53: I2C_Wait();
 14692  006F76  EC03  F036         	call	_I2C_Wait	;wreg free
 14693                           
 14694                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 14695  006F7A  0100               	movlb	0	; () banked
 14696  006F7C  5181               	movf	I2C_Read@a& (0+255),w,b
 14697  006F7E  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 14698  006F80  A4D8               	btfss	status,2,c
 14699  006F82  D002               	goto	u4890
 14700  006F84  8AC5               	bsf	4037,5,c	;volatile
 14701  006F86  D002               	goto	u4905
 14702  006F88                     u4890:
 14703  006F88  FFFF               	dw	65535	; assembler added errata NOP
 14704  006F8A  9AC5               	bcf	4037,5,c	;volatile
 14705  006F8C                     u4905:
 14706  006F8C  FFFF               	dw	65535	; assembler added errata NOP
 14707                           
 14708                           ;I2C.c: 55: ACKEN = 1;
 14709  006F8E  88C5               	bsf	4037,4,c	;volatile
 14710                           
 14711                           ;I2C.c: 56: return temp;
 14712  006F90  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 14713  006F94  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 14714  006F98  0012               	return		;funcret
 14715  006F9A  FFFF               	dw	65535	; errata NOP
 14716  006F9C                     __end_of_I2C_Read:
 14717                           	opt stack 0
 14718                           tblptru	equ	0xFF8
 14719                           tblptrh	equ	0xFF7
 14720                           tblptrl	equ	0xFF6
 14721                           tablat	equ	0xFF5
 14722                           prodh	equ	0xFF4
 14723                           prodl	equ	0xFF3
 14724                           intcon	equ	0xFF2
 14725                           intcon2	equ	0xFF1
 14726                           intcon3	equ	0xFF0
 14727                           postinc0	equ	0xFEE
 14728                           wreg	equ	0xFE8
 14729                           postdec1	equ	0xFE5
 14730                           fsr1l	equ	0xFE1
 14731                           indf2	equ	0xFDF
 14732                           postinc2	equ	0xFDE
 14733                           postdec2	equ	0xFDD
 14734                           fsr2h	equ	0xFDA
 14735                           fsr2l	equ	0xFD9
 14736                           status	equ	0xFD8
 14737                           
 14738 ;; *************** function _intToFloatStr *****************
 14739 ;; Defined at:
 14740 ;;		line 47 in file "function.c"
 14741 ;; Parameters:    Size  Location     Type
 14742 ;;  valor           1    wreg     unsigned char 
 14743 ;; Auto vars:     Size  Location     Type
 14744 ;;  valor           1   69[BANK0 ] unsigned char 
 14745 ;;  conv            4   65[BANK0 ] unsigned char [4]
 14746 ;;  end             4   61[BANK0 ] unsigned char [4]
 14747 ;;  pr              2   70[BANK0 ] int 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;                  2   59[BANK0 ] PTR unsigned char 
 14750 ;; Registers used:
 14751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14757 ;;      Params:         0       2       0       0       0       0       0
 14758 ;;      Locals:         0      11       0       0       0       0       0
 14759 ;;      Temps:          0       0       0       0       0       0       0
 14760 ;;      Totals:         0      13       0       0       0       0       0
 14761 ;;Total ram usage:       13 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; Hardware stack levels required when called:    9
 14764 ;; This function calls:
 14765 ;;		___awdiv
 14766 ;;		___awmod
 14767 ;;		_sprintf
 14768 ;; This function is called by:
 14769 ;;		_acaoTesteBombas
 14770 ;;		_telaPrincipal
 14771 ;;		_ajusteSP_Bombas
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           	psect	text43
 14776  0079DC                     __ptext43:
 14777                           	opt stack 0
 14778  0079DC                     _intToFloatStr:
 14779                           	opt stack 0
 14780  0079DC  FFFF               	dw	65535	; assembler added errata NOP
 14781                           
 14782                           ;incstack = 0
 14783                           ;intToFloatStr@valor stored from wreg
 14784  0079DE  0100               	movlb	0	; () banked
 14785  0079E0  6FC5               	movwf	intToFloatStr@valor& (0+255),b
 14786                           
 14787                           ;function.c: 48: int pr = valor >= 99 ? 0 : valor;
 14788  0079E2  0E63               	movlw	99
 14789  0079E4  0100               	movlb	0	; () banked
 14790  0079E6  61C5               	cpfslt	intToFloatStr@valor& (0+255),b
 14791  0079E8  D004               	goto	l1091
 14792                           
 14793                           ; BSR set to: 0
 14794  0079EA  C0C5  F0C6         	movff	intToFloatStr@valor,intToFloatStr@pr
 14795  0079EE  6BC7               	clrf	(intToFloatStr@pr+1)& (0+255),b
 14796  0079F0  D005               	goto	l1093
 14797  0079F2                     l1091:
 14798  0079F2  FFFF               	dw	65535	; assembler added errata NOP
 14799                           
 14800                           ; BSR set to: 0
 14801                           
 14802                           ; BSR set to: 0
 14803  0079F4  0E00               	movlw	0
 14804  0079F6  6FC7               	movwf	(intToFloatStr@pr+1)& (0+255),b
 14805  0079F8  0E00               	movlw	0
 14806  0079FA  6FC6               	movwf	intToFloatStr@pr& (0+255),b
 14807  0079FC                     l1093:
 14808  0079FC  FFFF               	dw	65535	; assembler added errata NOP
 14809                           
 14810                           ; BSR set to: 0
 14811                           ;function.c: 49: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 14812                           
 14813                           ; BSR set to: 0
 14814  0079FE  C1DF  F0C1         	movff	intToFloatStr@F2544,intToFloatStr@conv
 14815  007A02  C1E0  F0C2         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 14816  007A06  C1E1  F0C3         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 14817  007A0A  C1E2  F0C4         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;function.c: 50: conv[0] = (char) ((pr / 10) + 48);
 14821  007A0E  C0C6  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 14822  007A12  C0C7  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 14823  007A16  0E00               	movlw	0
 14824  007A18  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 14825  007A1A  0E0A               	movlw	10
 14826  007A1C  6F82               	movwf	___awdiv@divisor& (0+255),b
 14827  007A1E  ECE9  F01E         	call	___awdiv	;wreg free
 14828  007A22  0100               	movlb	0	; () banked
 14829  007A24  5180               	movf	?___awdiv& (0+255),w,b
 14830  007A26  0F30               	addlw	48
 14831  007A28  6FC1               	movwf	intToFloatStr@conv& (0+255),b
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;function.c: 51: conv[1] = (char) '.';
 14835  007A2A  0E2E               	movlw	46
 14836  007A2C  6FC2               	movwf	(intToFloatStr@conv+1)& (0+255),b
 14837                           
 14838                           ;function.c: 52: conv[2] = (char) ((pr % 10) + 48);
 14839  007A2E  C0C6  F080         	movff	intToFloatStr@pr,___awmod@dividend
 14840  007A32  C0C7  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 14841  007A36  0E00               	movlw	0
 14842  007A38  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 14843  007A3A  0E0A               	movlw	10
 14844  007A3C  6F82               	movwf	___awmod@divisor& (0+255),b
 14845  007A3E  EC1E  F03C         	call	___awmod	;wreg free
 14846  007A42  0100               	movlb	0	; () banked
 14847  007A44  5180               	movf	?___awmod& (0+255),w,b
 14848  007A46  0F30               	addlw	48
 14849  007A48  6FC3               	movwf	(intToFloatStr@conv+2)& (0+255),b
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;function.c: 53: conv[3] = '\0';
 14853  007A4A  0E00               	movlw	0
 14854  007A4C  6FC4               	movwf	(intToFloatStr@conv+3)& (0+255),b
 14855                           
 14856                           ; BSR set to: 0
 14857                           ;function.c: 54: char end[4];
 14858                           ;function.c: 55: sprintf(end, conv);
 14859  007A4E  0EBD               	movlw	low intToFloatStr@end
 14860  007A50  6FA1               	movwf	sprintf@wh& (0+255),b
 14861  007A52  0E00               	movlw	high intToFloatStr@end
 14862  007A54  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 14863  007A56  0EC1               	movlw	low intToFloatStr@conv
 14864  007A58  6FA3               	movwf	sprintf@f& (0+255),b
 14865  007A5A  0E00               	movlw	high intToFloatStr@conv
 14866  007A5C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 14867  007A5E  EC29  F039         	call	_sprintf	;wreg free
 14868                           
 14869                           ;function.c: 56: return end;
 14870  007A62  0EBD               	movlw	low intToFloatStr@end
 14871  007A64  0100               	movlb	0	; () banked
 14872  007A66  6FBB               	movwf	?_intToFloatStr& (0+255),b
 14873  007A68  0E00               	movlw	high intToFloatStr@end
 14874  007A6A  6FBC               	movwf	(?_intToFloatStr+1)& (0+255),b
 14875                           
 14876                           ; BSR set to: 0
 14877                           
 14878                           ; BSR set to: 0
 14879  007A6C  0012               	return		;funcret
 14880  007A6E  FFFF               	dw	65535	; errata NOP
 14881  007A70                     __end_of_intToFloatStr:
 14882                           	opt stack 0
 14883                           tblptru	equ	0xFF8
 14884                           tblptrh	equ	0xFF7
 14885                           tblptrl	equ	0xFF6
 14886                           tablat	equ	0xFF5
 14887                           prodh	equ	0xFF4
 14888                           prodl	equ	0xFF3
 14889                           intcon	equ	0xFF2
 14890                           intcon2	equ	0xFF1
 14891                           intcon3	equ	0xFF0
 14892                           postinc0	equ	0xFEE
 14893                           wreg	equ	0xFE8
 14894                           postdec1	equ	0xFE5
 14895                           fsr1l	equ	0xFE1
 14896                           indf2	equ	0xFDF
 14897                           postinc2	equ	0xFDE
 14898                           postdec2	equ	0xFDD
 14899                           fsr2h	equ	0xFDA
 14900                           fsr2l	equ	0xFD9
 14901                           status	equ	0xFD8
 14902                           
 14903 ;; *************** function ___awmod *****************
 14904 ;; Defined at:
 14905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 14906 ;; Parameters:    Size  Location     Type
 14907 ;;  dividend        2    0[BANK0 ] int 
 14908 ;;  divisor         2    2[BANK0 ] int 
 14909 ;; Auto vars:     Size  Location     Type
 14910 ;;  sign            1    5[BANK0 ] unsigned char 
 14911 ;;  counter         1    4[BANK0 ] unsigned char 
 14912 ;; Return value:  Size  Location     Type
 14913 ;;                  2    0[BANK0 ] int 
 14914 ;; Registers used:
 14915 ;;		wreg, status,2, status,0
 14916 ;; Tracked objects:
 14917 ;;		On entry : 0/0
 14918 ;;		On exit  : 0/0
 14919 ;;		Unchanged: 0/0
 14920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14921 ;;      Params:         0       4       0       0       0       0       0
 14922 ;;      Locals:         0       2       0       0       0       0       0
 14923 ;;      Temps:          0       0       0       0       0       0       0
 14924 ;;      Totals:         0       6       0       0       0       0       0
 14925 ;;Total ram usage:        6 bytes
 14926 ;; Hardware stack levels used:    1
 14927 ;; Hardware stack levels required when called:    6
 14928 ;; This function calls:
 14929 ;;		Nothing
 14930 ;; This function is called by:
 14931 ;;		_DECtoBCD
 14932 ;;		_intToFloatStr
 14933 ;;		_DECtoHEX
 14934 ;; This function uses a non-reentrant model
 14935 ;;
 14936                           
 14937                           	psect	text44
 14938  00783C                     __ptext44:
 14939                           	opt stack 0
 14940  00783C                     ___awmod:
 14941                           	opt stack 0
 14942  00783C  FFFF               	dw	65535	; assembler added errata NOP
 14943                           
 14944                           ; BSR set to: 0
 14945                           ;incstack = 0
 14946  00783E  0E00               	movlw	0
 14947  007840  0100               	movlb	0	; () banked
 14948  007842  6F85               	movwf	___awmod@sign& (0+255),b
 14949                           
 14950                           ; BSR set to: 0
 14951  007844  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 14952  007846  D006               	goto	l1377
 14953                           
 14954                           ; BSR set to: 0
 14955  007848  6D80               	negf	___awmod@dividend& (0+255),b
 14956  00784A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 14957  00784C  B0D8               	btfsc	status,0,c
 14958  00784E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 14959                           
 14960                           ; BSR set to: 0
 14961  007850  0E01               	movlw	1
 14962  007852  6F85               	movwf	___awmod@sign& (0+255),b
 14963  007854                     l1377:
 14964  007854  FFFF               	dw	65535	; assembler added errata NOP
 14965                           
 14966                           ; BSR set to: 0
 14967                           
 14968                           ; BSR set to: 0
 14969  007856  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 14970  007858  D004               	goto	l1378
 14971                           
 14972                           ; BSR set to: 0
 14973  00785A  6D82               	negf	___awmod@divisor& (0+255),b
 14974  00785C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 14975  00785E  B0D8               	btfsc	status,0,c
 14976  007860  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 14977  007862                     l1378:
 14978  007862  FFFF               	dw	65535	; assembler added errata NOP
 14979                           
 14980                           ; BSR set to: 0
 14981                           
 14982                           ; BSR set to: 0
 14983  007864  5182               	movf	___awmod@divisor& (0+255),w,b
 14984  007866  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 14985  007868  B4D8               	btfsc	status,2,c
 14986  00786A  D01C               	goto	l1385
 14987                           
 14988                           ; BSR set to: 0
 14989  00786C  0E01               	movlw	1
 14990  00786E  6F84               	movwf	___awmod@counter& (0+255),b
 14991  007870  D005               	goto	l1380
 14992  007872  FFFF               	dw	65535	; assembler added errata NOP
 14993                           
 14994                           ; BSR set to: 0
 14995                           
 14996                           ; BSR set to: 0
 14997  007874  90D8               	bcf	status,0,c
 14998  007876  3782               	rlcf	___awmod@divisor& (0+255),f,b
 14999  007878  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 15000  00787A  2B84               	incf	___awmod@counter& (0+255),f,b
 15001  00787C                     l1380:
 15002  00787C  FFFF               	dw	65535	; assembler added errata NOP
 15003                           
 15004                           ; BSR set to: 0
 15005                           
 15006                           ; BSR set to: 0
 15007  00787E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 15008  007880  D7F8               	goto	l1381
 15009  007882                     u5560:
 15010  007882  FFFF               	dw	65535	; assembler added errata NOP
 15011                           
 15012                           ; BSR set to: 0
 15013                           
 15014                           ; BSR set to: 0
 15015                           
 15016                           ; BSR set to: 0
 15017  007884  5182               	movf	___awmod@divisor& (0+255),w,b
 15018  007886  5D80               	subwf	___awmod@dividend& (0+255),w,b
 15019  007888  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 15020  00788A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 15021  00788C  A0D8               	btfss	status,0,c
 15022  00788E  D004               	goto	l1384
 15023                           
 15024                           ; BSR set to: 0
 15025  007890  5182               	movf	___awmod@divisor& (0+255),w,b
 15026  007892  5F80               	subwf	___awmod@dividend& (0+255),f,b
 15027  007894  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 15028  007896  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 15029  007898                     l1384:
 15030  007898  FFFF               	dw	65535	; assembler added errata NOP
 15031                           
 15032                           ; BSR set to: 0
 15033                           
 15034                           ; BSR set to: 0
 15035  00789A  90D8               	bcf	status,0,c
 15036  00789C  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 15037  00789E  3382               	rrcf	___awmod@divisor& (0+255),f,b
 15038                           
 15039                           ; BSR set to: 0
 15040  0078A0  2F84               	decfsz	___awmod@counter& (0+255),f,b
 15041  0078A2  D7EF               	goto	u5560
 15042  0078A4                     l1385:
 15043  0078A4  FFFF               	dw	65535	; assembler added errata NOP
 15044                           
 15045                           ; BSR set to: 0
 15046                           
 15047                           ; BSR set to: 0
 15048                           
 15049                           ; BSR set to: 0
 15050  0078A6  5185               	movf	___awmod@sign& (0+255),w,b
 15051  0078A8  B4D8               	btfsc	status,2,c
 15052  0078AA  D004               	goto	l1386
 15053                           
 15054                           ; BSR set to: 0
 15055  0078AC  6D80               	negf	___awmod@dividend& (0+255),b
 15056  0078AE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 15057  0078B0  B0D8               	btfsc	status,0,c
 15058  0078B2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 15059  0078B4                     l1386:
 15060  0078B4  FFFF               	dw	65535	; assembler added errata NOP
 15061                           
 15062                           ; BSR set to: 0
 15063                           
 15064                           ; BSR set to: 0
 15065  0078B6  C080  F080         	movff	___awmod@dividend,?___awmod
 15066  0078BA  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 15067                           
 15068                           ; BSR set to: 0
 15069                           
 15070                           ; BSR set to: 0
 15071  0078BE  0012               	return		;funcret
 15072  0078C0  FFFF               	dw	65535	; errata NOP
 15073  0078C2                     __end_of___awmod:
 15074                           	opt stack 0
 15075                           tblptru	equ	0xFF8
 15076                           tblptrh	equ	0xFF7
 15077                           tblptrl	equ	0xFF6
 15078                           tablat	equ	0xFF5
 15079                           prodh	equ	0xFF4
 15080                           prodl	equ	0xFF3
 15081                           intcon	equ	0xFF2
 15082                           intcon2	equ	0xFF1
 15083                           intcon3	equ	0xFF0
 15084                           postinc0	equ	0xFEE
 15085                           wreg	equ	0xFE8
 15086                           postdec1	equ	0xFE5
 15087                           fsr1l	equ	0xFE1
 15088                           indf2	equ	0xFDF
 15089                           postinc2	equ	0xFDE
 15090                           postdec2	equ	0xFDD
 15091                           fsr2h	equ	0xFDA
 15092                           fsr2l	equ	0xFD9
 15093                           status	equ	0xFD8
 15094                           
 15095 ;; *************** function ___awdiv *****************
 15096 ;; Defined at:
 15097 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 15098 ;; Parameters:    Size  Location     Type
 15099 ;;  dividend        2    0[BANK0 ] int 
 15100 ;;  divisor         2    2[BANK0 ] int 
 15101 ;; Auto vars:     Size  Location     Type
 15102 ;;  quotient        2    6[BANK0 ] int 
 15103 ;;  sign            1    5[BANK0 ] unsigned char 
 15104 ;;  counter         1    4[BANK0 ] unsigned char 
 15105 ;; Return value:  Size  Location     Type
 15106 ;;                  2    0[BANK0 ] int 
 15107 ;; Registers used:
 15108 ;;		wreg, status,2, status,0
 15109 ;; Tracked objects:
 15110 ;;		On entry : 0/0
 15111 ;;		On exit  : 0/0
 15112 ;;		Unchanged: 0/0
 15113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15114 ;;      Params:         0       4       0       0       0       0       0
 15115 ;;      Locals:         0       4       0       0       0       0       0
 15116 ;;      Temps:          0       0       0       0       0       0       0
 15117 ;;      Totals:         0       8       0       0       0       0       0
 15118 ;;Total ram usage:        8 bytes
 15119 ;; Hardware stack levels used:    1
 15120 ;; Hardware stack levels required when called:    6
 15121 ;; This function calls:
 15122 ;;		Nothing
 15123 ;; This function is called by:
 15124 ;;		_lerTransdutor
 15125 ;;		_dataLoger
 15126 ;;		_DECtoBCD
 15127 ;;		_intToFloatStr
 15128 ;;		_DECtoHEX
 15129 ;; This function uses a non-reentrant model
 15130 ;;
 15131                           
 15132                           	psect	text45
 15133  003DD2                     __ptext45:
 15134                           	opt stack 0
 15135  003DD2                     ___awdiv:
 15136                           	opt stack 0
 15137  003DD2  FFFF               	dw	65535	; assembler added errata NOP
 15138                           
 15139                           ; BSR set to: 0
 15140                           ;incstack = 0
 15141  003DD4  0E00               	movlw	0
 15142  003DD6  0100               	movlb	0	; () banked
 15143  003DD8  6F85               	movwf	___awdiv@sign& (0+255),b
 15144                           
 15145                           ; BSR set to: 0
 15146  003DDA  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 15147  003DDC  D006               	goto	l1364
 15148                           
 15149                           ; BSR set to: 0
 15150  003DDE  6D82               	negf	___awdiv@divisor& (0+255),b
 15151  003DE0  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 15152  003DE2  B0D8               	btfsc	status,0,c
 15153  003DE4  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 15154                           
 15155                           ; BSR set to: 0
 15156  003DE6  0E01               	movlw	1
 15157  003DE8  6F85               	movwf	___awdiv@sign& (0+255),b
 15158  003DEA                     l1364:
 15159  003DEA  FFFF               	dw	65535	; assembler added errata NOP
 15160                           
 15161                           ; BSR set to: 0
 15162                           
 15163                           ; BSR set to: 0
 15164  003DEC  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 15165  003DEE  D006               	goto	l1365
 15166                           
 15167                           ; BSR set to: 0
 15168  003DF0  6D80               	negf	___awdiv@dividend& (0+255),b
 15169  003DF2  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 15170  003DF4  B0D8               	btfsc	status,0,c
 15171  003DF6  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 15172                           
 15173                           ; BSR set to: 0
 15174  003DF8  0E01               	movlw	1
 15175  003DFA  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 15176  003DFC                     l1365:
 15177  003DFC  FFFF               	dw	65535	; assembler added errata NOP
 15178                           
 15179                           ; BSR set to: 0
 15180                           
 15181                           ; BSR set to: 0
 15182  003DFE  0E00               	movlw	0
 15183  003E00  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 15184  003E02  0E00               	movlw	0
 15185  003E04  6F86               	movwf	___awdiv@quotient& (0+255),b
 15186                           
 15187                           ; BSR set to: 0
 15188  003E06  5182               	movf	___awdiv@divisor& (0+255),w,b
 15189  003E08  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 15190  003E0A  B4D8               	btfsc	status,2,c
 15191  003E0C  D020               	goto	l1372
 15192                           
 15193                           ; BSR set to: 0
 15194  003E0E  0E01               	movlw	1
 15195  003E10  6F84               	movwf	___awdiv@counter& (0+255),b
 15196  003E12  D005               	goto	l1367
 15197  003E14  FFFF               	dw	65535	; assembler added errata NOP
 15198                           
 15199                           ; BSR set to: 0
 15200                           
 15201                           ; BSR set to: 0
 15202  003E16  90D8               	bcf	status,0,c
 15203  003E18  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 15204  003E1A  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 15205  003E1C  2B84               	incf	___awdiv@counter& (0+255),f,b
 15206  003E1E                     l1367:
 15207  003E1E  FFFF               	dw	65535	; assembler added errata NOP
 15208                           
 15209                           ; BSR set to: 0
 15210                           
 15211                           ; BSR set to: 0
 15212  003E20  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 15213  003E22  D7F8               	goto	l1368
 15214  003E24                     u5500:
 15215  003E24  FFFF               	dw	65535	; assembler added errata NOP
 15216                           
 15217                           ; BSR set to: 0
 15218                           
 15219                           ; BSR set to: 0
 15220                           
 15221                           ; BSR set to: 0
 15222  003E26  90D8               	bcf	status,0,c
 15223  003E28  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 15224  003E2A  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 15225                           
 15226                           ; BSR set to: 0
 15227  003E2C  5182               	movf	___awdiv@divisor& (0+255),w,b
 15228  003E2E  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 15229  003E30  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 15230  003E32  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 15231  003E34  A0D8               	btfss	status,0,c
 15232  003E36  D005               	goto	l1371
 15233                           
 15234                           ; BSR set to: 0
 15235  003E38  5182               	movf	___awdiv@divisor& (0+255),w,b
 15236  003E3A  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 15237  003E3C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 15238  003E3E  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 15239                           
 15240                           ; BSR set to: 0
 15241  003E40  8186               	bsf	___awdiv@quotient& (0+255),0,b
 15242  003E42                     l1371:
 15243  003E42  FFFF               	dw	65535	; assembler added errata NOP
 15244                           
 15245                           ; BSR set to: 0
 15246                           
 15247                           ; BSR set to: 0
 15248  003E44  90D8               	bcf	status,0,c
 15249  003E46  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 15250  003E48  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 15251                           
 15252                           ; BSR set to: 0
 15253  003E4A  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 15254  003E4C  D7EB               	goto	u5500
 15255  003E4E                     l1372:
 15256  003E4E  FFFF               	dw	65535	; assembler added errata NOP
 15257                           
 15258                           ; BSR set to: 0
 15259                           
 15260                           ; BSR set to: 0
 15261                           
 15262                           ; BSR set to: 0
 15263  003E50  5185               	movf	___awdiv@sign& (0+255),w,b
 15264  003E52  B4D8               	btfsc	status,2,c
 15265  003E54  D004               	goto	l1373
 15266                           
 15267                           ; BSR set to: 0
 15268  003E56  6D86               	negf	___awdiv@quotient& (0+255),b
 15269  003E58  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 15270  003E5A  B0D8               	btfsc	status,0,c
 15271  003E5C  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 15272  003E5E                     l1373:
 15273  003E5E  FFFF               	dw	65535	; assembler added errata NOP
 15274                           
 15275                           ; BSR set to: 0
 15276                           
 15277                           ; BSR set to: 0
 15278  003E60  C086  F080         	movff	___awdiv@quotient,?___awdiv
 15279  003E64  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 15280                           
 15281                           ; BSR set to: 0
 15282                           
 15283                           ; BSR set to: 0
 15284  003E68  0012               	return		;funcret
 15285  003E6A  FFFF               	dw	65535	; errata NOP
 15286  003E6C                     __end_of___awdiv:
 15287                           	opt stack 0
 15288                           tblptru	equ	0xFF8
 15289                           tblptrh	equ	0xFF7
 15290                           tblptrl	equ	0xFF6
 15291                           tablat	equ	0xFF5
 15292                           prodh	equ	0xFF4
 15293                           prodl	equ	0xFF3
 15294                           intcon	equ	0xFF2
 15295                           intcon2	equ	0xFF1
 15296                           intcon3	equ	0xFF0
 15297                           postinc0	equ	0xFEE
 15298                           wreg	equ	0xFE8
 15299                           postdec1	equ	0xFE5
 15300                           fsr1l	equ	0xFE1
 15301                           indf2	equ	0xFDF
 15302                           postinc2	equ	0xFDE
 15303                           postdec2	equ	0xFDD
 15304                           fsr2h	equ	0xFDA
 15305                           fsr2l	equ	0xFD9
 15306                           status	equ	0xFD8
 15307                           
 15308 ;; *************** function _drenarPressao *****************
 15309 ;; Defined at:
 15310 ;;		line 85 in file "controle.h"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;		None
 15313 ;; Auto vars:     Size  Location     Type
 15314 ;;		None
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      void 
 15317 ;; Registers used:
 15318 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15324 ;;      Params:         0       0       0       0       0       0       0
 15325 ;;      Locals:         0       0       0       0       0       0       0
 15326 ;;      Temps:          0       0       0       0       0       0       0
 15327 ;;      Totals:         0       0       0       0       0       0       0
 15328 ;;Total ram usage:        0 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; Hardware stack levels required when called:    9
 15331 ;; This function calls:
 15332 ;;		_sprintf
 15333 ;; This function is called by:
 15334 ;;		_acaoTesteBombas
 15335 ;; This function uses a non-reentrant model
 15336 ;;
 15337                           
 15338                           	psect	text46
 15339  006D4A                     __ptext46:
 15340                           	opt stack 0
 15341  006D4A                     _drenarPressao:
 15342                           	opt stack 0
 15343  006D4A  FFFF               	dw	65535	; assembler added errata NOP
 15344                           
 15345                           ;controle.h: 86: sprintf(line4, "Despressurizando...");
 15346                           
 15347                           ; BSR set to: 0
 15348                           ;incstack = 0
 15349  006D4C  0E5F               	movlw	low _line4
 15350  006D4E  0100               	movlb	0	; () banked
 15351  006D50  6FA1               	movwf	sprintf@wh& (0+255),b
 15352  006D52  0E01               	movlw	high _line4
 15353  006D54  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 15354  006D56  0E5D               	movlw	low STR_38
 15355  006D58  6FA3               	movwf	sprintf@f& (0+255),b
 15356  006D5A  0E7C               	movlw	high STR_38
 15357  006D5C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 15358  006D5E  EC29  F039         	call	_sprintf	;wreg free
 15359                           
 15360                           ;controle.h: 87: if (!timerTesteBombas) {
 15361  006D62  0100               	movlb	0	; () banked
 15362  006D64  51DD               	movf	_timerTesteBombas& (0+255),w,b
 15363  006D66  11DE               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 15364  006D68  A4D8               	btfss	status,2,c
 15365  006D6A  D004               	goto	l530
 15366                           
 15367                           ; BSR set to: 0
 15368                           ;controle.h: 88: codigoErro = 3;
 15369  006D6C  0E03               	movlw	3
 15370  006D6E  6FF4               	movwf	_codigoErro& (0+255),b
 15371                           
 15372                           ;controle.h: 89: menu_posi = 0;
 15373  006D70  0E00               	movlw	0
 15374  006D72  6FE2               	movwf	_menu_posi& (0+255),b
 15375  006D74                     l530:
 15376  006D74  FFFF               	dw	65535	; assembler added errata NOP
 15377                           
 15378                           ; BSR set to: 0
 15379                           
 15380                           ; BSR set to: 0
 15381  006D76  0012               	return		;funcret
 15382  006D78  FFFF               	dw	65535	; errata NOP
 15383  006D7A                     __end_of_drenarPressao:
 15384                           	opt stack 0
 15385                           tblptru	equ	0xFF8
 15386                           tblptrh	equ	0xFF7
 15387                           tblptrl	equ	0xFF6
 15388                           tablat	equ	0xFF5
 15389                           prodh	equ	0xFF4
 15390                           prodl	equ	0xFF3
 15391                           intcon	equ	0xFF2
 15392                           intcon2	equ	0xFF1
 15393                           intcon3	equ	0xFF0
 15394                           postinc0	equ	0xFEE
 15395                           wreg	equ	0xFE8
 15396                           postdec1	equ	0xFE5
 15397                           fsr1l	equ	0xFE1
 15398                           indf2	equ	0xFDF
 15399                           postinc2	equ	0xFDE
 15400                           postdec2	equ	0xFDD
 15401                           fsr2h	equ	0xFDA
 15402                           fsr2l	equ	0xFD9
 15403                           status	equ	0xFD8
 15404                           
 15405 ;; *************** function _sprintf *****************
 15406 ;; Defined at:
 15407 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 15408 ;; Parameters:    Size  Location     Type
 15409 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 15410 ;;		 -> intToFloatStr@end(4), line3(21), line2(21), line1(21), 
 15411 ;;		 -> line4(21), bufferAUX(20), 
 15412 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 15413 ;;		 -> intToFloatStr@conv(4), STR_126(15), STR_125(12), STR_124(10), 
 15414 ;;		 -> STR_123(18), STR_122(10), STR_121(18), STR_120(16), 
 15415 ;;		 -> STR_119(10), STR_117(3), STR_116(14), STR_115(20), 
 15416 ;;		 -> STR_114(8), STR_113(10), STR_112(11), STR_111(9), 
 15417 ;;		 -> STR_110(3), STR_109(15), STR_108(15), STR_107(11), 
 15418 ;;		 -> STR_106(11), STR_105(18), STR_104(5), STR_103(12), 
 15419 ;;		 -> STR_102(5), STR_101(14), STR_100(19), STR_97(3), 
 15420 ;;		 -> STR_96(7), STR_95(7), STR_93(12), STR_92(26), 
 15421 ;;		 -> STR_91(20), STR_90(8), STR_87(14), STR_84(14), 
 15422 ;;		 -> STR_83(11), STR_80(10), STR_79(31), STR_76(11), 
 15423 ;;		 -> STR_75(20), STR_74(20), STR_73(21), STR_72(15), 
 15424 ;;		 -> STR_71(6), STR_70(15), STR_69(6), STR_68(20), 
 15425 ;;		 -> STR_67(15), STR_66(19), STR_65(20), STR_64(21), 
 15426 ;;		 -> STR_63(21), STR_62(18), STR_61(20), STR_60(12), 
 15427 ;;		 -> STR_59(17), STR_58(21), STR_57(16), STR_54(15), 
 15428 ;;		 -> STR_51(15), STR_48(11), STR_47(17), STR_44(9), 
 15429 ;;		 -> STR_43(19), STR_42(19), STR_41(16), STR_40(15), 
 15430 ;;		 -> STR_39(15), STR_38(20), STR_2(5), STR_1(5), 
 15431 ;; Auto vars:     Size  Location     Type
 15432 ;;  pb              4   55[BANK0 ] struct __prbuf
 15433 ;;  ap              2   53[BANK0 ] PTR void [1]
 15434 ;;		 -> ?_sprintf(2), ?_printf(2), 
 15435 ;; Return value:  Size  Location     Type
 15436 ;;                  2   33[BANK0 ] int 
 15437 ;; Registers used:
 15438 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15439 ;; Tracked objects:
 15440 ;;		On entry : 0/0
 15441 ;;		On exit  : 0/0
 15442 ;;		Unchanged: 0/0
 15443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15444 ;;      Params:         0      20       0       0       0       0       0
 15445 ;;      Locals:         0       6       0       0       0       0       0
 15446 ;;      Temps:          0       0       0       0       0       0       0
 15447 ;;      Totals:         0      26       0       0       0       0       0
 15448 ;;Total ram usage:       26 bytes
 15449 ;; Hardware stack levels used:    1
 15450 ;; Hardware stack levels required when called:    8
 15451 ;; This function calls:
 15452 ;;		__doprnt
 15453 ;; This function is called by:
 15454 ;;		_getSerial
 15455 ;;		_drenarPressao
 15456 ;;		_acaoTesteBombas
 15457 ;;		_telaPrincipal
 15458 ;;		_tela_ajusteRTC
 15459 ;;		_tela_testeBombas
 15460 ;;		_dataLoger
 15461 ;;		_informacoes
 15462 ;;		_configuraTelefones
 15463 ;;		_configurarEstacionaria
 15464 ;;		_ajusteSP_Bombas
 15465 ;;		_main
 15466 ;;		_intToFloatStr
 15467 ;;		_telaTeste
 15468 ;; This function uses a non-reentrant model
 15469 ;;
 15470                           
 15471                           	psect	text47
 15472  007252                     __ptext47:
 15473                           	opt stack 0
 15474  007252                     _sprintf:
 15475                           	opt stack 0
 15476  007252  FFFF               	dw	65535	; assembler added errata NOP
 15477                           
 15478                           ; BSR set to: 0
 15479                           ;incstack = 0
 15480  007254  C0A1  F0B7         	movff	sprintf@wh,sprintf@pb
 15481  007258  C0A2  F0B8         	movff	sprintf@wh+1,sprintf@pb+1
 15482  00725C  0E00               	movlw	0
 15483  00725E  0100               	movlb	0	; () banked
 15484  007260  6FB9               	movwf	(sprintf@pb+2)& (0+255),b
 15485  007262  0E00               	movlw	0
 15486  007264  6FBA               	movwf	(sprintf@pb+3)& (0+255),b
 15487  007266  0EA5               	movlw	low (?_sprintf+4)
 15488  007268  6FB5               	movwf	sprintf@ap& (0+255),b
 15489  00726A  0E00               	movlw	high (?_sprintf+4)
 15490  00726C  6FB6               	movwf	(sprintf@ap+1)& (0+255),b
 15491                           
 15492                           ; BSR set to: 0
 15493  00726E  0EB7               	movlw	low sprintf@pb
 15494  007270  6F8C               	movwf	__doprnt@pb& (0+255),b
 15495  007272  0E00               	movlw	high sprintf@pb
 15496  007274  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 15497  007276  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 15498  00727A  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 15499  00727E  0EB5               	movlw	low sprintf@ap
 15500  007280  6F90               	movwf	__doprnt@ap& (0+255),b
 15501  007282  0E00               	movlw	high sprintf@ap
 15502  007284  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 15503  007286  EC37  F001         	call	__doprnt	;wreg free
 15504  00728A  C0B7  FFD9         	movff	sprintf@pb,fsr2l
 15505  00728E  C0B8  FFDA         	movff	sprintf@pb+1,fsr2h
 15506  007292  0E00               	movlw	0
 15507  007294  6EDF               	movwf	indf2,c
 15508                           
 15509                           ;	Return value of _sprintf is never used
 15510  007296  0012               	return		;funcret
 15511  007298  FFFF               	dw	65535	; errata NOP
 15512  00729A                     __end_of_sprintf:
 15513                           	opt stack 0
 15514                           tblptru	equ	0xFF8
 15515                           tblptrh	equ	0xFF7
 15516                           tblptrl	equ	0xFF6
 15517                           tablat	equ	0xFF5
 15518                           prodh	equ	0xFF4
 15519                           prodl	equ	0xFF3
 15520                           intcon	equ	0xFF2
 15521                           intcon2	equ	0xFF1
 15522                           intcon3	equ	0xFF0
 15523                           postinc0	equ	0xFEE
 15524                           wreg	equ	0xFE8
 15525                           postdec1	equ	0xFE5
 15526                           fsr1l	equ	0xFE1
 15527                           indf2	equ	0xFDF
 15528                           postinc2	equ	0xFDE
 15529                           postdec2	equ	0xFDD
 15530                           fsr2h	equ	0xFDA
 15531                           fsr2l	equ	0xFD9
 15532                           status	equ	0xFD8
 15533                           
 15534 ;; *************** function _btPress *****************
 15535 ;; Defined at:
 15536 ;;		line 77 in file "teclado.h"
 15537 ;; Parameters:    Size  Location     Type
 15538 ;;  bt              1    wreg     unsigned char 
 15539 ;; Auto vars:     Size  Location     Type
 15540 ;;  bt              1    0[BANK0 ] unsigned char 
 15541 ;; Return value:  Size  Location     Type
 15542 ;;                  1    wreg      unsigned char 
 15543 ;; Registers used:
 15544 ;;		wreg, status,2, status,0
 15545 ;; Tracked objects:
 15546 ;;		On entry : 0/0
 15547 ;;		On exit  : 0/0
 15548 ;;		Unchanged: 0/0
 15549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15550 ;;      Params:         0       0       0       0       0       0       0
 15551 ;;      Locals:         0       1       0       0       0       0       0
 15552 ;;      Temps:          0       0       0       0       0       0       0
 15553 ;;      Totals:         0       1       0       0       0       0       0
 15554 ;;Total ram usage:        1 bytes
 15555 ;; Hardware stack levels used:    1
 15556 ;; Hardware stack levels required when called:    6
 15557 ;; This function calls:
 15558 ;;		Nothing
 15559 ;; This function is called by:
 15560 ;;		_acaoTesteBombas
 15561 ;;		_telaPrincipal
 15562 ;;		_tela_ajusteRTC
 15563 ;;		_tela_testeBombas
 15564 ;;		_dataLoger
 15565 ;;		_informacoes
 15566 ;;		_configuraTelefones
 15567 ;;		_configurarEstacionaria
 15568 ;;		_ajusteSP_Bombas
 15569 ;;		_main
 15570 ;; This function uses a non-reentrant model
 15571 ;;
 15572                           
 15573                           	psect	text48
 15574  007734                     __ptext48:
 15575                           	opt stack 0
 15576  007734                     _btPress:
 15577                           	opt stack 0
 15578  007734  FFFF               	dw	65535	; assembler added errata NOP
 15579                           
 15580                           ;incstack = 0
 15581                           ;btPress@bt stored from wreg
 15582  007736  0100               	movlb	0	; () banked
 15583  007738  6F80               	movwf	btPress@bt& (0+255),b
 15584                           
 15585                           ;teclado.h: 78: switch (bt) {
 15586  00773A  D02B               	goto	l486
 15587  00773C  FFFF               	dw	65535	; assembler added errata NOP
 15588  00773E  0101               	movlb	1	; () banked
 15589  007740  511C               	movf	__b_esc& (0+255),w,b
 15590  007742  B4D8               	btfsc	status,2,c
 15591  007744  D023               	goto	l498
 15592                           
 15593                           ; BSR set to: 1
 15594                           ;teclado.h: 80: _b_esc = 0;
 15595  007746  0E00               	movlw	0
 15596  007748  6F1C               	movwf	__b_esc& (0+255),b
 15597  00774A  D017               	goto	L50
 15598  00774C  FFFF               	dw	65535	; assembler added errata NOP
 15599                           
 15600                           ;teclado.h: 88: if (_b_mais) {
 15601                           
 15602                           ; BSR set to: 1
 15603  00774E  0101               	movlb	1	; () banked
 15604  007750  5118               	movf	__b_mais& (0+255),w,b
 15605  007752  B4D8               	btfsc	status,2,c
 15606  007754  D01B               	goto	l498
 15607                           
 15608                           ; BSR set to: 1
 15609                           ;teclado.h: 89: _b_mais = 0;
 15610  007756  0E00               	movlw	0
 15611  007758  6F18               	movwf	__b_mais& (0+255),b
 15612  00775A  D00F               	goto	L50
 15613  00775C  FFFF               	dw	65535	; assembler added errata NOP
 15614                           
 15615                           ; BSR set to: 1
 15616  00775E  0101               	movlb	1	; () banked
 15617  007760  511A               	movf	__b_menos& (0+255),w,b
 15618  007762  B4D8               	btfsc	status,2,c
 15619  007764  D013               	goto	l498
 15620                           
 15621                           ; BSR set to: 1
 15622                           ;teclado.h: 97: _b_menos = 0;
 15623  007766  0E00               	movlw	0
 15624  007768  6F1A               	movwf	__b_menos& (0+255),b
 15625  00776A  D007               	goto	L50
 15626  00776C  FFFF               	dw	65535	; assembler added errata NOP
 15627                           
 15628                           ; BSR set to: 1
 15629  00776E  0101               	movlb	1	; () banked
 15630  007770  5116               	movf	__b_ok& (0+255),w,b
 15631  007772  B4D8               	btfsc	status,2,c
 15632  007774  D00B               	goto	l498
 15633                           
 15634                           ; BSR set to: 1
 15635                           ;teclado.h: 105: _b_ok = 0;
 15636  007776  0E00               	movlw	0
 15637  007778  6F16               	movwf	__b_ok& (0+255),b
 15638  00777A                     L50:
 15639  00777A  FFFF               	dw	65535	; assembler added errata NOP
 15640                           
 15641                           ;teclado.h: 106: if (!isPressed) {
 15642  00777C  5066               	movf	_isPressed,w,c
 15643  00777E  A4D8               	btfss	status,2,c
 15644  007780  D002               	goto	l499
 15645                           
 15646                           ; BSR set to: 1
 15647                           ;teclado.h: 107: timerAtrasoLCD = 1;
 15648  007782  0E01               	movlw	1
 15649  007784  6E74               	movwf	_timerAtrasoLCD,c
 15650  007786                     l499:
 15651  007786  FFFF               	dw	65535	; assembler added errata NOP
 15652                           
 15653                           ; BSR set to: 1
 15654                           ;teclado.h: 108: }
 15655                           ;teclado.h: 109: return 1;
 15656                           
 15657                           ; BSR set to: 1
 15658  007788  0E01               	movlw	1
 15659                           
 15660                           ; BSR set to: 1
 15661  00778A  D013               	goto	l501
 15662  00778C                     l498:
 15663  00778C  FFFF               	dw	65535	; assembler added errata NOP
 15664                           
 15665                           ; BSR set to: 1
 15666                           
 15667                           ;teclado.h: 110: }
 15668                           ;teclado.h: 111: default: return 0;
 15669                           
 15670                           ; BSR set to: 1
 15671  00778E  0E00               	movlw	0
 15672                           
 15673                           ;teclado.h: 112: }
 15674  007790  D010               	goto	l501
 15675  007792                     l486:
 15676  007792  FFFF               	dw	65535	; assembler added errata NOP
 15677  007794  0100               	movlb	0	; () banked
 15678  007796  5180               	movf	btPress@bt& (0+255),w,b
 15679                           
 15680                           ; Switch size 1, requested type "space"
 15681                           ; Number of cases is 4, Range of values is 1 to 4
 15682                           ; switch strategies available:
 15683                           ; Name         Instructions Cycles
 15684                           ; simple_byte           13     7 (average)
 15685                           ;	Chosen strategy is simple_byte
 15686  007798  0A01               	xorlw	1	; case 1
 15687  00779A  B4D8               	btfsc	status,2,c
 15688  00779C  D7CF               	goto	l487
 15689  00779E  0A03               	xorlw	3	; case 2
 15690  0077A0  B4D8               	btfsc	status,2,c
 15691  0077A2  D7DC               	goto	l494
 15692  0077A4  0A01               	xorlw	1	; case 3
 15693  0077A6  B4D8               	btfsc	status,2,c
 15694  0077A8  D7D1               	goto	l491
 15695  0077AA  0A07               	xorlw	7	; case 4
 15696  0077AC  B4D8               	btfsc	status,2,c
 15697  0077AE  D7DE               	goto	l497
 15698  0077B0  D7ED               	goto	l498
 15699  0077B2                     l501:
 15700  0077B2  FFFF               	dw	65535	; assembler added errata NOP
 15701                           
 15702                           ; BSR set to: 0
 15703  0077B4  0012               	return		;funcret
 15704  0077B6  FFFF               	dw	65535	; errata NOP
 15705  0077B8                     __end_of_btPress:
 15706                           	opt stack 0
 15707                           tblptru	equ	0xFF8
 15708                           tblptrh	equ	0xFF7
 15709                           tblptrl	equ	0xFF6
 15710                           tablat	equ	0xFF5
 15711                           prodh	equ	0xFF4
 15712                           prodl	equ	0xFF3
 15713                           intcon	equ	0xFF2
 15714                           intcon2	equ	0xFF1
 15715                           intcon3	equ	0xFF0
 15716                           postinc0	equ	0xFEE
 15717                           wreg	equ	0xFE8
 15718                           postdec1	equ	0xFE5
 15719                           fsr1l	equ	0xFE1
 15720                           indf2	equ	0xFDF
 15721                           postinc2	equ	0xFDE
 15722                           postdec2	equ	0xFDD
 15723                           fsr2h	equ	0xFDA
 15724                           fsr2l	equ	0xFD9
 15725                           status	equ	0xFD8
 15726                           
 15727 ;; *************** function _acaoBombas *****************
 15728 ;; Defined at:
 15729 ;;		line 18 in file "controle.h"
 15730 ;; Parameters:    Size  Location     Type
 15731 ;;		None
 15732 ;; Auto vars:     Size  Location     Type
 15733 ;;		None
 15734 ;; Return value:  Size  Location     Type
 15735 ;;                  1    wreg      void 
 15736 ;; Registers used:
 15737 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15738 ;; Tracked objects:
 15739 ;;		On entry : 0/0
 15740 ;;		On exit  : 0/0
 15741 ;;		Unchanged: 0/0
 15742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15743 ;;      Params:         0       0       0       0       0       0       0
 15744 ;;      Locals:         0       0       0       0       0       0       0
 15745 ;;      Temps:          0       3       0       0       0       0       0
 15746 ;;      Totals:         0       3       0       0       0       0       0
 15747 ;;Total ram usage:        3 bytes
 15748 ;; Hardware stack levels used:    1
 15749 ;; Hardware stack levels required when called:   10
 15750 ;; This function calls:
 15751 ;;		_enviaSMS
 15752 ;; This function is called by:
 15753 ;;		_main
 15754 ;; This function uses a non-reentrant model
 15755 ;;
 15756                           
 15757                           	psect	text49
 15758  0039F8                     __ptext49:
 15759                           	opt stack 0
 15760  0039F8                     _acaoBombas:
 15761                           	opt stack 0
 15762  0039F8  FFFF               	dw	65535	; assembler added errata NOP
 15763                           
 15764                           ;controle.h: 19: if (pressao < sp_jockey && timerIntervaloEntreBombas == 0 && !LATAbits.
      +                          LATA3) {
 15765                           
 15766                           ;incstack = 0
 15767  0039FA  0100               	movlb	0	; () banked
 15768  0039FC  51E6               	movf	_sp_jockey& (0+255),w,b
 15769  0039FE  6FC8               	movwf	??_acaoBombas& (0+255),b
 15770  003A00  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 15771  003A02  51C8               	movf	??_acaoBombas& (0+255),w,b
 15772  003A04  5DDB               	subwf	_pressao& (0+255),w,b
 15773  003A06  51DC               	movf	(_pressao+1)& (0+255),w,b
 15774  003A08  0A80               	xorlw	128
 15775  003A0A  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 15776  003A0C  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 15777  003A0E  0A80               	xorlw	128
 15778  003A10  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 15779  003A12  B0D8               	btfsc	status,0,c
 15780  003A14  D008               	goto	l504
 15781                           
 15782                           ; BSR set to: 0
 15783  003A16  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
 15784  003A18  B4D8               	btfsc	status,2,c
 15785                           
 15786                           ; BSR set to: 0
 15787  003A1A  B689               	btfsc	3977,3,c	;volatile
 15788  003A1C  D004               	goto	l504
 15789                           
 15790                           ; BSR set to: 0
 15791                           ;controle.h: 20: timerIntervaloEntreBombas = 4;
 15792  003A1E  0E04               	movlw	4
 15793  003A20  6FFE               	movwf	_timerIntervaloEntreBombas& (0+255),b
 15794                           
 15795                           ; BSR set to: 0
 15796                           ;controle.h: 21: LATAbits.LATA3 = 1;
 15797  003A22  8689               	bsf	3977,3,c	;volatile
 15798                           
 15799                           ;controle.h: 22: } else if (pressao >= sp_pressao_rede && ocorrendoIncendio == 0) {
 15800  003A24  D011               	goto	l506
 15801  003A26                     l504:
 15802  003A26  FFFF               	dw	65535	; assembler added errata NOP
 15803                           
 15804                           ; BSR set to: 0
 15805                           
 15806                           ; BSR set to: 0
 15807  003A28  51E7               	movf	_sp_pressao_rede& (0+255),w,b
 15808  003A2A  6FC8               	movwf	??_acaoBombas& (0+255),b
 15809  003A2C  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 15810  003A2E  51C8               	movf	??_acaoBombas& (0+255),w,b
 15811  003A30  5DDB               	subwf	_pressao& (0+255),w,b
 15812  003A32  51DC               	movf	(_pressao+1)& (0+255),w,b
 15813  003A34  0A80               	xorlw	128
 15814  003A36  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 15815  003A38  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 15816  003A3A  0A80               	xorlw	128
 15817  003A3C  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 15818  003A3E  A0D8               	btfss	status,0,c
 15819  003A40  D003               	goto	l506
 15820                           
 15821                           ; BSR set to: 0
 15822  003A42  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
 15823  003A44  B4D8               	btfsc	status,2,c
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;controle.h: 23: LATAbits.LATA3 = 0;
 15827  003A46  9689               	bcf	3977,3,c	;volatile
 15828  003A48                     l506:
 15829  003A48  FFFF               	dw	65535	; assembler added errata NOP
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;controle.h: 24: }
 15833                           ;controle.h: 26: if (pressao <= sp_estacionaria && timerIntervaloEntreBombas == 0 && !ou
      +                          t_BOMBA_ESTACIONARIA) {
 15834                           
 15835                           ; BSR set to: 0
 15836                           
 15837                           ; BSR set to: 0
 15838  003A4A  51E4               	movf	_sp_estacionaria& (0+255),w,b
 15839  003A4C  6FC8               	movwf	??_acaoBombas& (0+255),b
 15840  003A4E  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 15841  003A50  51DB               	movf	_pressao& (0+255),w,b
 15842  003A52  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 15843  003A54  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 15844  003A56  0A80               	xorlw	128
 15845  003A58  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 15846  003A5A  51DC               	movf	(_pressao+1)& (0+255),w,b
 15847  003A5C  0A80               	xorlw	128
 15848  003A5E  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 15849  003A60  A0D8               	btfss	status,0,c
 15850  003A62  D00C               	goto	l507
 15851                           
 15852                           ; BSR set to: 0
 15853  003A64  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
 15854  003A66  A4D8               	btfss	status,2,c
 15855  003A68  D009               	goto	l507
 15856                           
 15857                           ; BSR set to: 0
 15858  003A6A  51F9               	movf	_out_BOMBA_ESTACIONARIA& (0+255),w,b
 15859  003A6C  A4D8               	btfss	status,2,c
 15860  003A6E  D006               	goto	l507
 15861                           
 15862                           ; BSR set to: 0
 15863                           ;controle.h: 27: ocorrendoIncendio = 1;
 15864  003A70  0E01               	movlw	1
 15865  003A72  6FF3               	movwf	_ocorrendoIncendio& (0+255),b
 15866                           
 15867                           ;controle.h: 28: timerIntervaloEntreBombas = 3;
 15868  003A74  0E03               	movlw	3
 15869  003A76  6FFE               	movwf	_timerIntervaloEntreBombas& (0+255),b
 15870                           
 15871                           ;controle.h: 29: out_BOMBA_ESTACIONARIA = 1;
 15872  003A78  0E01               	movlw	1
 15873  003A7A  6FF9               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 15874  003A7C                     l507:
 15875  003A7C  FFFF               	dw	65535	; assembler added errata NOP
 15876                           
 15877                           ; BSR set to: 0
 15878                           ;controle.h: 30: }
 15879                           ;controle.h: 32: if (pressao <= sp_principal && timerIntervaloEntreBombas == 0 && !LATDb
      +                          its.LATD7) {
 15880                           
 15881                           ; BSR set to: 0
 15882  003A7E  51E5               	movf	_sp_principal& (0+255),w,b
 15883  003A80  6FC8               	movwf	??_acaoBombas& (0+255),b
 15884  003A82  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 15885  003A84  51DB               	movf	_pressao& (0+255),w,b
 15886  003A86  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 15887  003A88  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 15888  003A8A  0A80               	xorlw	128
 15889  003A8C  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 15890  003A8E  51DC               	movf	(_pressao+1)& (0+255),w,b
 15891  003A90  0A80               	xorlw	128
 15892  003A92  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 15893  003A94  A0D8               	btfss	status,0,c
 15894  003A96  D009               	goto	l508
 15895                           
 15896                           ; BSR set to: 0
 15897  003A98  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
 15898  003A9A  B4D8               	btfsc	status,2,c
 15899                           
 15900                           ; BSR set to: 0
 15901  003A9C  BE8C               	btfsc	3980,7,c	;volatile
 15902  003A9E  D005               	goto	l508
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;controle.h: 33: timerIntervaloEntreBombas = 4;
 15906  003AA0  0E04               	movlw	4
 15907  003AA2  6FFE               	movwf	_timerIntervaloEntreBombas& (0+255),b
 15908                           
 15909                           ;controle.h: 34: ocorrendoIncendio = 1;
 15910  003AA4  0E01               	movlw	1
 15911  003AA6  6FF3               	movwf	_ocorrendoIncendio& (0+255),b
 15912                           
 15913                           ; BSR set to: 0
 15914                           ;controle.h: 35: LATDbits.LATD7 = 1;
 15915  003AA8  8E8C               	bsf	3980,7,c	;volatile
 15916  003AAA                     l508:
 15917  003AAA  FFFF               	dw	65535	; assembler added errata NOP
 15918                           
 15919                           ; BSR set to: 0
 15920                           ;controle.h: 36: }
 15921                           ;controle.h: 38: if (ocorrendoIncendio == 1) {
 15922                           
 15923                           ; BSR set to: 0
 15924  003AAC  05F3               	decf	_ocorrendoIncendio& (0+255),w,b
 15925  003AAE  A4D8               	btfss	status,2,c
 15926  003AB0  D005               	goto	l509
 15927                           
 15928                           ; BSR set to: 0
 15929                           ;controle.h: 39: gsmOcupado = 1;
 15930  003AB2  0E01               	movlw	1
 15931  003AB4  6FF5               	movwf	_gsmOcupado& (0+255),b
 15932                           
 15933                           ; BSR set to: 0
 15934                           ;controle.h: 40: enviaSMS(1);
 15935  003AB6  0E01               	movlw	1
 15936  003AB8  ECBF  F00B         	call	_enviaSMS
 15937  003ABC                     l509:
 15938  003ABC  FFFF               	dw	65535	; assembler added errata NOP
 15939  003ABE  0012               	return		;funcret
 15940  003AC0  FFFF               	dw	65535	; errata NOP
 15941  003AC2                     __end_of_acaoBombas:
 15942                           	opt stack 0
 15943                           tblptru	equ	0xFF8
 15944                           tblptrh	equ	0xFF7
 15945                           tblptrl	equ	0xFF6
 15946                           tablat	equ	0xFF5
 15947                           prodh	equ	0xFF4
 15948                           prodl	equ	0xFF3
 15949                           intcon	equ	0xFF2
 15950                           intcon2	equ	0xFF1
 15951                           intcon3	equ	0xFF0
 15952                           postinc0	equ	0xFEE
 15953                           wreg	equ	0xFE8
 15954                           postdec1	equ	0xFE5
 15955                           fsr1l	equ	0xFE1
 15956                           indf2	equ	0xFDF
 15957                           postinc2	equ	0xFDE
 15958                           postdec2	equ	0xFDD
 15959                           fsr2h	equ	0xFDA
 15960                           fsr2l	equ	0xFD9
 15961                           status	equ	0xFD8
 15962                           
 15963 ;; *************** function _enviaSMS *****************
 15964 ;; Defined at:
 15965 ;;		line 133 in file "comunicacao.h"
 15966 ;; Parameters:    Size  Location     Type
 15967 ;;  tipo            1    wreg     unsigned char 
 15968 ;; Auto vars:     Size  Location     Type
 15969 ;;  tipo            1   71[BANK0 ] unsigned char 
 15970 ;; Return value:  Size  Location     Type
 15971 ;;                  1    wreg      void 
 15972 ;; Registers used:
 15973 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15974 ;; Tracked objects:
 15975 ;;		On entry : 0/0
 15976 ;;		On exit  : 0/0
 15977 ;;		Unchanged: 0/0
 15978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15979 ;;      Params:         0       0       0       0       0       0       0
 15980 ;;      Locals:         0      11       0       0       0       0       0
 15981 ;;      Temps:          0       2       0       0       0       0       0
 15982 ;;      Totals:         0      13       0       0       0       0       0
 15983 ;;Total ram usage:       13 bytes
 15984 ;; Hardware stack levels used:    1
 15985 ;; Hardware stack levels required when called:    9
 15986 ;; This function calls:
 15987 ;;		_aguardaBuffer
 15988 ;;		_delay
 15989 ;;		_limparBuffer
 15990 ;;		_printf
 15991 ;;		_writeChar
 15992 ;; This function is called by:
 15993 ;;		_acaoBombas
 15994 ;;		_acaoTesteBombas
 15995 ;; This function uses a non-reentrant model
 15996 ;;
 15997                           
 15998                           	psect	text50
 15999  00177E                     __ptext50:
 16000                           	opt stack 0
 16001  00177E                     _enviaSMS:
 16002                           	opt stack 0
 16003  00177E  FFFF               	dw	65535	; assembler added errata NOP
 16004                           
 16005                           ;incstack = 0
 16006                           ;enviaSMS@tipo stored from wreg
 16007  001780  0100               	movlb	0	; () banked
 16008  001782  6FC7               	movwf	enviaSMS@tipo& (0+255),b
 16009                           
 16010                           ;comunicacao.h: 134: if (timerReenvioSMS) {
 16011  001784  0100               	movlb	0	; () banked
 16012  001786  51F7               	movf	_timerReenvioSMS& (0+255),w,b
 16013  001788  B4D8               	btfsc	status,2,c
 16014  00178A  D003               	goto	l366
 16015                           
 16016                           ; BSR set to: 0
 16017                           ;comunicacao.h: 135: gsmOcupado = 0;
 16018  00178C  0E00               	movlw	0
 16019  00178E  6FF5               	movwf	_gsmOcupado& (0+255),b
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;comunicacao.h: 136: return;
 16023  001790  D19E               	goto	l370
 16024  001792                     l366:
 16025  001792  FFFF               	dw	65535	; assembler added errata NOP
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;comunicacao.h: 137: };
 16029                           ;comunicacao.h: 138: gsmOcupado = 1;
 16030                           
 16031                           ; BSR set to: 0
 16032  001794  0E01               	movlw	1
 16033  001796  6FF5               	movwf	_gsmOcupado& (0+255),b
 16034                           
 16035                           ;comunicacao.h: 140: switch (etapaComunicacao) {
 16036  001798  D17A               	goto	l368
 16037  00179A  FFFF               	dw	65535	; assembler added errata NOP
 16038                           
 16039                           ; BSR set to: 0
 16040                           ;comunicacao.h: 142: limparBuffer();
 16041                           
 16042                           ; BSR set to: 0
 16043  00179C  EC25  F037         	call	_limparBuffer	;wreg free
 16044                           
 16045                           ;comunicacao.h: 143: printf("AT\r\n");
 16046  0017A0  0EDD               	movlw	low STR_4
 16047  0017A2  0100               	movlb	0	; () banked
 16048  0017A4  6FA1               	movwf	printf@f& (0+255),b
 16049  0017A6  0E7F               	movlw	high STR_4
 16050  0017A8  6FA2               	movwf	(printf@f+1)& (0+255),b
 16051  0017AA  EC27  F038         	call	_printf	;wreg free
 16052                           
 16053                           ;comunicacao.h: 144: etapaComunicacao++;
 16054  0017AE  4A62               	infsnz	_etapaComunicacao,f,c
 16055  0017B0  2A63               	incf	_etapaComunicacao+1,f,c
 16056                           
 16057                           ;comunicacao.h: 145: timerEtapaComunicacao = 6;
 16058  0017B2  0E06               	movlw	6
 16059  0017B4  0100               	movlb	0	; () banked
 16060  0017B6  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 16061                           
 16062                           ;comunicacao.h: 146: break;
 16063  0017B8  D18A               	goto	l370
 16064  0017BA  FFFF               	dw	65535	; assembler added errata NOP
 16065                           
 16066                           ; BSR set to: 0
 16067                           ;comunicacao.h: 148: if (aguardaBuffer("OK")) {
 16068                           
 16069                           ; BSR set to: 0
 16070  0017BC  0EF9               	movlw	low STR_5
 16071  0017BE  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16072  0017C0  0E7F               	movlw	high STR_5
 16073  0017C2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16074  0017C4  EC09  F038         	call	_aguardaBuffer	;wreg free
 16075  0017C8  0900               	iorlw	0
 16076  0017CA  B4D8               	btfsc	status,2,c
 16077  0017CC  D00E               	goto	l372
 16078                           
 16079                           ;comunicacao.h: 149: limparBuffer();
 16080  0017CE  EC25  F037         	call	_limparBuffer	;wreg free
 16081                           
 16082                           ;comunicacao.h: 150: printf("AT+CMGF=1\r\n");
 16083  0017D2  0EAD               	movlw	low STR_10
 16084  0017D4  0100               	movlb	0	; () banked
 16085  0017D6  6FA1               	movwf	printf@f& (0+255),b
 16086  0017D8  0E7E               	movlw	high STR_10
 16087  0017DA  6FA2               	movwf	(printf@f+1)& (0+255),b
 16088  0017DC  EC27  F038         	call	_printf	;wreg free
 16089                           
 16090                           ;comunicacao.h: 151: etapaComunicacao++;
 16091  0017E0  4A62               	infsnz	_etapaComunicacao,f,c
 16092  0017E2  2A63               	incf	_etapaComunicacao+1,f,c
 16093                           
 16094                           ;comunicacao.h: 152: timerEtapaComunicacao = 6;
 16095  0017E4  0E06               	movlw	6
 16096  0017E6  0100               	movlb	0	; () banked
 16097  0017E8  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 16098  0017EA                     l372:
 16099  0017EA  FFFF               	dw	65535	; assembler added errata NOP
 16100                           
 16101                           ;comunicacao.h: 153: }
 16102                           ;comunicacao.h: 154: if (!timerEtapaComunicacao) {
 16103                           
 16104                           ; BSR set to: 0
 16105  0017EC  0100               	movlb	0	; () banked
 16106  0017EE  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 16107  0017F0  A4D8               	btfss	status,2,c
 16108  0017F2  D16D               	goto	l370
 16109                           
 16110                           ; BSR set to: 0
 16111                           ;comunicacao.h: 155: writeChar(0x1A);
 16112  0017F4  0E1A               	movlw	26
 16113  0017F6  6F80               	movwf	writeChar@hex& (0+255),b
 16114  0017F8  0E00               	movlw	0
 16115  0017FA  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 16116  0017FC  ECD2  F035         	call	_writeChar	;wreg free
 16117                           
 16118                           ;comunicacao.h: 156: delay(15);
 16119  001800  0E00               	movlw	0
 16120  001802  0100               	movlb	0	; () banked
 16121  001804  6F81               	movwf	(delay@x+1)& (0+255),b
 16122  001806  0E0F               	movlw	15
 16123  001808  6F80               	movwf	delay@x& (0+255),b
 16124  00180A  EC0A  F037         	call	_delay	;wreg free
 16125                           
 16126                           ;comunicacao.h: 157: printf("ATH0\r\n");
 16127  00180E  0EA9               	movlw	low STR_21
 16128  001810  0100               	movlb	0	; () banked
 16129  001812  6FA1               	movwf	printf@f& (0+255),b
 16130  001814  0E7F               	movlw	high STR_21
 16131  001816  6FA2               	movwf	(printf@f+1)& (0+255),b
 16132  001818  EC27  F038         	call	_printf	;wreg free
 16133  00181C  D132               	goto	l416
 16134  00181E  FFFF               	dw	65535	; assembler added errata NOP
 16135                           
 16136                           ;comunicacao.h: 162: if (aguardaBuffer("OK")) {
 16137  001820  0EF9               	movlw	low STR_5
 16138  001822  0100               	movlb	0	; () banked
 16139  001824  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16140  001826  0E7F               	movlw	high STR_5
 16141  001828  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16142  00182A  EC09  F038         	call	_aguardaBuffer	;wreg free
 16143  00182E  0900               	iorlw	0
 16144  001830  B4D8               	btfsc	status,2,c
 16145  001832  D0A4               	goto	l382
 16146                           
 16147                           ;comunicacao.h: 163: limparBuffer();
 16148  001834  EC25  F037         	call	_limparBuffer	;wreg free
 16149                           
 16150                           ;comunicacao.h: 164: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : t
      +                          el2);
 16151  001838  0100               	movlb	0	; () banked
 16152  00183A  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 16153  00183C  B4D8               	btfsc	status,2,c
 16154  00183E  D004               	goto	l377
 16155                           
 16156                           ; BSR set to: 0
 16157  001840  0EC7               	movlw	low _tel2
 16158  001842  6FBD               	movwf	_enviaSMS$1385& (0+255),b
 16159  001844  0E01               	movlw	high _tel2
 16160  001846  D004               	goto	L40
 16161  001848                     l377:
 16162  001848  FFFF               	dw	65535	; assembler added errata NOP
 16163                           
 16164                           ; BSR set to: 0
 16165                           
 16166                           ; BSR set to: 0
 16167  00184A  0ED3               	movlw	low _tel1
 16168  00184C  6FBD               	movwf	_enviaSMS$1385& (0+255),b
 16169  00184E  0E01               	movlw	high _tel1
 16170  001850                     L40:
 16171  001850  FFFF               	dw	65535	; assembler added errata NOP
 16172  001852  6FBE               	movwf	(_enviaSMS$1385+1)& (0+255),b
 16173                           
 16174                           ; BSR set to: 0
 16175                           
 16176                           ; BSR set to: 0
 16177  001854  0E35               	movlw	low STR_12
 16178  001856  6FA1               	movwf	printf@f& (0+255),b
 16179  001858  0E7D               	movlw	high STR_12
 16180  00185A  6FA2               	movwf	(printf@f+1)& (0+255),b
 16181  00185C  C0BD  F0A3         	movff	_enviaSMS$1385,?_printf+2
 16182  001860  C0BE  F0A4         	movff	_enviaSMS$1385+1,?_printf+3
 16183  001864  EC27  F038         	call	_printf	;wreg free
 16184                           
 16185                           ;comunicacao.h: 165: timerEtapaComunicacao = 8;
 16186  001868  0E08               	movlw	8
 16187  00186A  FFFF               	dw	65535	; assembler added errata NOP
 16188  00186C  0100               	movlb	0	; () banked
 16189  00186E  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;comunicacao.h: 166: etapaComunicacao++;
 16193  001870  4A62               	infsnz	_etapaComunicacao,f,c
 16194  001872  2A63               	incf	_etapaComunicacao+1,f,c
 16195                           
 16196                           ; BSR set to: 0
 16197  001874  D083               	goto	l382
 16198  001876  FFFF               	dw	65535	; assembler added errata NOP
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;comunicacao.h: 174: if (aguardaBuffer(">")) {
 16202                           
 16203                           ; BSR set to: 0
 16204  001878  0EFC               	movlw	low STR_13
 16205  00187A  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16206  00187C  0E7F               	movlw	high STR_13
 16207  00187E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16208  001880  EC09  F038         	call	_aguardaBuffer	;wreg free
 16209  001884  0900               	iorlw	0
 16210  001886  B4D8               	btfsc	status,2,c
 16211  001888  D079               	goto	l382
 16212                           
 16213                           ;comunicacao.h: 175: limparBuffer();
 16214  00188A  EC25  F037         	call	_limparBuffer	;wreg free
 16215                           
 16216                           ;comunicacao.h: 176: if (tipo == 1) {
 16217  00188E  0100               	movlb	0	; () banked
 16218  001890  05C7               	decf	enviaSMS@tipo& (0+255),w,b
 16219  001892  A4D8               	btfss	status,2,c
 16220  001894  D018               	goto	l383
 16221                           
 16222                           ; BSR set to: 0
 16223                           ;comunicacao.h: 177: printf("DISPARO ALARME DE INCENDIO\r\nEM %02d:%02d:%02d %02d/%02d/%
      +                          02d\r\n", _hor, _min, _sec, _dia, _mes, _ano);
 16224  001896  0E91               	movlw	low STR_25
 16225  001898  6FA1               	movwf	printf@f& (0+255),b
 16226  00189A  0E7B               	movlw	high STR_25
 16227  00189C  6FA2               	movwf	(printf@f+1)& (0+255),b
 16228  00189E  C0EF  F0A3         	movff	__hor,?_printf+2
 16229  0018A2  6BA4               	clrf	(?_printf+3)& (0+255),b
 16230  0018A4  C0F0  F0A5         	movff	__min,?_printf+4
 16231  0018A8  6BA6               	clrf	(?_printf+5)& (0+255),b
 16232  0018AA  C0F1  F0A7         	movff	__sec,?_printf+6
 16233  0018AE  6BA8               	clrf	(?_printf+7)& (0+255),b
 16234  0018B0  C0EE  F0A9         	movff	__dia,?_printf+8
 16235  0018B4  6BAA               	clrf	(?_printf+9)& (0+255),b
 16236  0018B6  C0ED  F0AB         	movff	__mes,?_printf+10
 16237  0018BA  6BAC               	clrf	(?_printf+11)& (0+255),b
 16238  0018BC  C0EC  F0AD         	movff	__ano,?_printf+12
 16239  0018C0  6BAE               	clrf	(?_printf+13)& (0+255),b
 16240  0018C2  EC27  F038         	call	_printf	;wreg free
 16241  0018C6                     l383:
 16242  0018C6  FFFF               	dw	65535	; assembler added errata NOP
 16243                           
 16244                           ;comunicacao.h: 178: }
 16245                           ;comunicacao.h: 179: if (tipo == 2) {
 16246  0018C8  0E02               	movlw	2
 16247  0018CA  0100               	movlb	0	; () banked
 16248  0018CC  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 16249  0018CE  A4D8               	btfss	status,2,c
 16250  0018D0  D04B               	goto	l384
 16251                           
 16252                           ; BSR set to: 0
 16253                           ;comunicacao.h: 180: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%0
      +                          2d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
 16254                           ;comunicacao.h: 181: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FA
      +                          LHA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA")
      +                          ;
 16255  0018D2  05FB               	decf	_status_estacionaria& (0+255),w,b
 16256  0018D4  B4D8               	btfsc	status,2,c
 16257  0018D6  D004               	goto	l386
 16258                           
 16259                           ; BSR set to: 0
 16260  0018D8  0ED1               	movlw	low STR_28
 16261  0018DA  6FBF               	movwf	_enviaSMS$1398& (0+255),b
 16262  0018DC  0E7F               	movlw	high STR_28
 16263  0018DE  D004               	goto	L38
 16264  0018E0                     l386:
 16265  0018E0  FFFF               	dw	65535	; assembler added errata NOP
 16266                           
 16267                           ; BSR set to: 0
 16268                           
 16269                           ; BSR set to: 0
 16270  0018E2  0EF9               	movlw	low STR_5
 16271  0018E4  6FBF               	movwf	_enviaSMS$1398& (0+255),b
 16272  0018E6  0E7F               	movlw	high STR_5
 16273  0018E8                     L38:
 16274  0018E8  FFFF               	dw	65535	; assembler added errata NOP
 16275  0018EA  6FC0               	movwf	(_enviaSMS$1398+1)& (0+255),b
 16276                           
 16277                           ; BSR set to: 0
 16278  0018EC  05FC               	decf	_status_principal& (0+255),w,b
 16279  0018EE  B4D8               	btfsc	status,2,c
 16280  0018F0  D004               	goto	l390
 16281                           
 16282                           ; BSR set to: 0
 16283  0018F2  0ED1               	movlw	low STR_28
 16284  0018F4  6FC1               	movwf	_enviaSMS$1399& (0+255),b
 16285  0018F6  0E7F               	movlw	high STR_28
 16286  0018F8  D004               	goto	L39
 16287  0018FA                     l390:
 16288  0018FA  FFFF               	dw	65535	; assembler added errata NOP
 16289                           
 16290                           ; BSR set to: 0
 16291                           
 16292                           ; BSR set to: 0
 16293  0018FC  0EF9               	movlw	low STR_5
 16294  0018FE  6FC1               	movwf	_enviaSMS$1399& (0+255),b
 16295  001900  0E7F               	movlw	high STR_5
 16296  001902                     L39:
 16297  001902  FFFF               	dw	65535	; assembler added errata NOP
 16298  001904  6FC2               	movwf	(_enviaSMS$1399+1)& (0+255),b
 16299                           
 16300                           ; BSR set to: 0
 16301  001906  05FD               	decf	_status_jockey& (0+255),w,b
 16302  001908  B4D8               	btfsc	status,2,c
 16303  00190A  D004               	goto	l394
 16304                           
 16305                           ; BSR set to: 0
 16306  00190C  0ED1               	movlw	low STR_28
 16307  00190E  6FC3               	movwf	_enviaSMS$1400& (0+255),b
 16308  001910  0E7F               	movlw	high STR_28
 16309  001912  D004               	goto	L41
 16310  001914                     l394:
 16311  001914  FFFF               	dw	65535	; assembler added errata NOP
 16312                           
 16313                           ; BSR set to: 0
 16314                           
 16315                           ; BSR set to: 0
 16316  001916  0EF9               	movlw	low STR_5
 16317  001918  6FC3               	movwf	_enviaSMS$1400& (0+255),b
 16318  00191A  0E7F               	movlw	high STR_5
 16319  00191C                     L41:
 16320  00191C  FFFF               	dw	65535	; assembler added errata NOP
 16321  00191E  6FC4               	movwf	(_enviaSMS$1400+1)& (0+255),b
 16322                           
 16323                           ; BSR set to: 0
 16324                           
 16325                           ; BSR set to: 0
 16326  001920  0E29               	movlw	low STR_26
 16327  001922  6FA1               	movwf	printf@f& (0+255),b
 16328  001924  0E7B               	movlw	high STR_26
 16329  001926  6FA2               	movwf	(printf@f+1)& (0+255),b
 16330  001928  C0EF  F0A3         	movff	__hor,?_printf+2
 16331  00192C  6BA4               	clrf	(?_printf+3)& (0+255),b
 16332  00192E  C0F0  F0A5         	movff	__min,?_printf+4
 16333  001932  6BA6               	clrf	(?_printf+5)& (0+255),b
 16334  001934  C0F1  F0A7         	movff	__sec,?_printf+6
 16335  001938  6BA8               	clrf	(?_printf+7)& (0+255),b
 16336  00193A  C0EE  F0A9         	movff	__dia,?_printf+8
 16337  00193E  6BAA               	clrf	(?_printf+9)& (0+255),b
 16338  001940  C0ED  F0AB         	movff	__mes,?_printf+10
 16339  001944  6BAC               	clrf	(?_printf+11)& (0+255),b
 16340  001946  C0EC  F0AD         	movff	__ano,?_printf+12
 16341  00194A  6BAE               	clrf	(?_printf+13)& (0+255),b
 16342  00194C  C0C3  F0AF         	movff	_enviaSMS$1400,?_printf+14
 16343  001950  C0C4  F0B0         	movff	_enviaSMS$1400+1,?_printf+15
 16344  001954  C0C1  F0B1         	movff	_enviaSMS$1399,?_printf+16
 16345  001958  C0C2  F0B2         	movff	_enviaSMS$1399+1,?_printf+17
 16346  00195C  C0BF  F0B3         	movff	_enviaSMS$1398,?_printf+18
 16347  001960  C0C0  F0B4         	movff	_enviaSMS$1398+1,?_printf+19
 16348  001964  EC27  F038         	call	_printf	;wreg free
 16349  001968                     l384:
 16350  001968  FFFF               	dw	65535	; assembler added errata NOP
 16351                           
 16352                           ;comunicacao.h: 182: }
 16353                           ;comunicacao.h: 183: writeChar(0x1A);
 16354  00196A  0E1A               	movlw	26
 16355  00196C  0100               	movlb	0	; () banked
 16356  00196E  6F80               	movwf	writeChar@hex& (0+255),b
 16357  001970  0E00               	movlw	0
 16358  001972  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 16359  001974  ECD2  F035         	call	_writeChar	;wreg free
 16360                           
 16361                           ;comunicacao.h: 184: timerEtapaComunicacao = 30;
 16362  001978  0E1E               	movlw	30
 16363  00197A  D777               	goto	L43
 16364  00197C                     l382:
 16365  00197C  FFFF               	dw	65535	; assembler added errata NOP
 16366                           
 16367                           ;comunicacao.h: 186: }
 16368                           ;comunicacao.h: 187: if (!timerEtapaComunicacao) {
 16369                           
 16370                           ; BSR set to: 0
 16371  00197E  0100               	movlb	0	; () banked
 16372  001980  FFFF               	dw	65535	; assembler added errata NOP
 16373  001982  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 16374  001984  A4D8               	btfss	status,2,c
 16375  001986  D0A3               	goto	l370
 16376  001988  D07C               	goto	l416
 16377  00198A  FFFF               	dw	65535	; assembler added errata NOP
 16378                           
 16379                           ; BSR set to: 0
 16380                           ;comunicacao.h: 192: if (aguardaBuffer("ERROR") | aguardaBuffer("OK")) {
 16381                           
 16382                           ; BSR set to: 0
 16383  00198C  0EF9               	movlw	low STR_5
 16384  00198E  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16385  001990  0E7F               	movlw	high STR_5
 16386  001992  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16387  001994  EC09  F038         	call	_aguardaBuffer	;wreg free
 16388  001998  0100               	movlb	0	; () banked
 16389  00199A  6FBB               	movwf	??_enviaSMS& (0+255),b
 16390  00199C  0ED7               	movlw	low STR_17
 16391  00199E  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16392  0019A0  0E7F               	movlw	high STR_17
 16393  0019A2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16394  0019A4  EC09  F038         	call	_aguardaBuffer	;wreg free
 16395  0019A8  0100               	movlb	0	; () banked
 16396  0019AA  11BB               	iorwf	??_enviaSMS& (0+255),w,b
 16397  0019AC  0900               	iorlw	0
 16398  0019AE  B4D8               	btfsc	status,2,c
 16399  0019B0  D7E7               	goto	L45
 16400                           
 16401                           ; BSR set to: 0
 16402                           ;comunicacao.h: 193: if (tipo == 2) {
 16403  0019B2  0E02               	movlw	2
 16404  0019B4  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 16405  0019B6  A4D8               	btfss	status,2,c
 16406  0019B8  D012               	goto	l400
 16407                           
 16408                           ; BSR set to: 0
 16409                           ;comunicacao.h: 194: if (telefoneSelecionado == 0) {
 16410  0019BA  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 16411  0019BC  A4D8               	btfss	status,2,c
 16412  0019BE  D007               	goto	l401
 16413                           
 16414                           ; BSR set to: 0
 16415                           ;comunicacao.h: 195: telefoneSelecionado = 1;
 16416  0019C0  0E01               	movlw	1
 16417  0019C2  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 16418                           
 16419                           ;comunicacao.h: 196: etapaComunicacao = 0;
 16420  0019C4  0E00               	movlw	0
 16421  0019C6  6E63               	movwf	_etapaComunicacao+1,c
 16422  0019C8  0E00               	movlw	0
 16423  0019CA  6E62               	movwf	_etapaComunicacao,c
 16424                           
 16425                           ;comunicacao.h: 197: } else {
 16426  0019CC  D7D9               	goto	L45
 16427  0019CE                     l401:
 16428  0019CE  FFFF               	dw	65535	; assembler added errata NOP
 16429                           
 16430                           ; BSR set to: 0
 16431                           ;comunicacao.h: 198: telefoneSelecionado = 0;
 16432                           
 16433                           ; BSR set to: 0
 16434  0019D0  0E00               	movlw	0
 16435  0019D2  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 16436                           
 16437                           ;comunicacao.h: 199: gsmOcupado = 0;
 16438  0019D4  0E00               	movlw	0
 16439  0019D6  6FF5               	movwf	_gsmOcupado& (0+255),b
 16440                           
 16441                           ;comunicacao.h: 200: menu_posi = 0;
 16442  0019D8  0E00               	movlw	0
 16443  0019DA  6FE2               	movwf	_menu_posi& (0+255),b
 16444                           
 16445                           ; BSR set to: 0
 16446                           ;comunicacao.h: 201: }
 16447                           ;comunicacao.h: 202: } else {
 16448  0019DC  D7D1               	goto	L45
 16449  0019DE                     l400:
 16450  0019DE  FFFF               	dw	65535	; assembler added errata NOP
 16451                           
 16452                           ; BSR set to: 0
 16453                           ;comunicacao.h: 203: etapaComunicacao++;
 16454                           
 16455                           ; BSR set to: 0
 16456  0019E0  4A62               	infsnz	_etapaComunicacao,f,c
 16457  0019E2  2A63               	incf	_etapaComunicacao+1,f,c
 16458                           
 16459                           ; BSR set to: 0
 16460                           
 16461                           ; BSR set to: 0
 16462  0019E4  D7CD               	goto	L45
 16463  0019E6  FFFF               	dw	65535	; assembler added errata NOP
 16464                           
 16465                           ; BSR set to: 0
 16466                           ;comunicacao.h: 211: limparBuffer();
 16467                           
 16468                           ; BSR set to: 0
 16469  0019E8  EC25  F037         	call	_limparBuffer	;wreg free
 16470                           
 16471                           ;comunicacao.h: 212: printf("ATD 0%s;\r\n", telefoneSelecionado == 0 ? tel1 : tel2);
 16472  0019EC  0100               	movlb	0	; () banked
 16473  0019EE  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 16474  0019F0  B4D8               	btfsc	status,2,c
 16475  0019F2  D004               	goto	l407
 16476                           
 16477                           ; BSR set to: 0
 16478  0019F4  0EC7               	movlw	low _tel2
 16479  0019F6  6FC5               	movwf	_enviaSMS$1405& (0+255),b
 16480  0019F8  0E01               	movlw	high _tel2
 16481  0019FA  D004               	goto	L42
 16482  0019FC                     l407:
 16483  0019FC  FFFF               	dw	65535	; assembler added errata NOP
 16484                           
 16485                           ; BSR set to: 0
 16486                           
 16487                           ; BSR set to: 0
 16488  0019FE  0ED3               	movlw	low _tel1
 16489  001A00  6FC5               	movwf	_enviaSMS$1405& (0+255),b
 16490  001A02  0E01               	movlw	high _tel1
 16491  001A04                     L42:
 16492  001A04  FFFF               	dw	65535	; assembler added errata NOP
 16493  001A06  6FC6               	movwf	(_enviaSMS$1405+1)& (0+255),b
 16494                           
 16495                           ; BSR set to: 0
 16496                           
 16497                           ; BSR set to: 0
 16498  001A08  0E01               	movlw	low STR_35
 16499  001A0A  6FA1               	movwf	printf@f& (0+255),b
 16500  001A0C  0E7F               	movlw	high STR_35
 16501  001A0E  6FA2               	movwf	(printf@f+1)& (0+255),b
 16502  001A10  C0C5  F0A3         	movff	_enviaSMS$1405,?_printf+2
 16503  001A14  C0C6  F0A4         	movff	_enviaSMS$1405+1,?_printf+3
 16504  001A18  EC27  F038         	call	_printf	;wreg free
 16505                           
 16506                           ;comunicacao.h: 213: timerEtapaComunicacao = 35;
 16507  001A1C  0E23               	movlw	35
 16508  001A1E  0100               	movlb	0	; () banked
 16509  001A20  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 16510                           
 16511                           ; BSR set to: 0
 16512                           ;comunicacao.h: 214: etapaComunicacao++;
 16513  001A22  4A62               	infsnz	_etapaComunicacao,f,c
 16514  001A24  2A63               	incf	_etapaComunicacao+1,f,c
 16515                           
 16516                           ;comunicacao.h: 215: break;
 16517  001A26  D053               	goto	l370
 16518  001A28  FFFF               	dw	65535	; assembler added errata NOP
 16519                           
 16520                           ; BSR set to: 0
 16521                           ;comunicacao.h: 217: if (aguardaBuffer("NO DIALTONE") || !timerEtapaComunicacao) {
 16522                           
 16523                           ; BSR set to: 0
 16524  001A2A  0ED1               	movlw	low STR_36
 16525  001A2C  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16526  001A2E  0E7E               	movlw	high STR_36
 16527  001A30  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16528  001A32  EC09  F038         	call	_aguardaBuffer	;wreg free
 16529  001A36  0900               	iorlw	0
 16530  001A38  A4D8               	btfss	status,2,c
 16531  001A3A  D004               	goto	u6260
 16532  001A3C  0100               	movlb	0	; () banked
 16533  001A3E  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 16534  001A40  A4D8               	btfss	status,2,c
 16535  001A42  D045               	goto	l370
 16536  001A44                     u6260:
 16537  001A44  FFFF               	dw	65535	; assembler added errata NOP
 16538                           
 16539                           ;comunicacao.h: 218: limparBuffer();
 16540                           
 16541                           ; BSR set to: 0
 16542  001A46  EC25  F037         	call	_limparBuffer	;wreg free
 16543                           
 16544                           ;comunicacao.h: 219: printf("ATH0\r\n");
 16545  001A4A  0EA9               	movlw	low STR_21
 16546  001A4C  0100               	movlb	0	; () banked
 16547  001A4E  6FA1               	movwf	printf@f& (0+255),b
 16548  001A50  0E7F               	movlw	high STR_21
 16549  001A52  6FA2               	movwf	(printf@f+1)& (0+255),b
 16550  001A54  EC27  F038         	call	_printf	;wreg free
 16551                           
 16552                           ;comunicacao.h: 220: delay(550);
 16553  001A58  0E02               	movlw	2
 16554  001A5A  0100               	movlb	0	; () banked
 16555  001A5C  6F81               	movwf	(delay@x+1)& (0+255),b
 16556  001A5E  0E26               	movlw	38
 16557  001A60  6F80               	movwf	delay@x& (0+255),b
 16558  001A62  EC0A  F037         	call	_delay	;wreg free
 16559                           
 16560                           ;comunicacao.h: 221: if (telefoneSelecionado == 0) {
 16561  001A66  0100               	movlb	0	; () banked
 16562  001A68  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 16563  001A6A  A4D8               	btfss	status,2,c
 16564  001A6C  D003               	goto	l414
 16565                           
 16566                           ; BSR set to: 0
 16567                           ;comunicacao.h: 222: telefoneSelecionado = 1;
 16568  001A6E  0E01               	movlw	1
 16569  001A70  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 16570                           
 16571                           ;comunicacao.h: 223: } else {
 16572  001A72  D007               	goto	l416
 16573  001A74                     l414:
 16574  001A74  FFFF               	dw	65535	; assembler added errata NOP
 16575                           
 16576                           ; BSR set to: 0
 16577                           ;comunicacao.h: 224: telefoneSelecionado = 0;
 16578                           
 16579                           ; BSR set to: 0
 16580  001A76  0E00               	movlw	0
 16581  001A78  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 16582                           
 16583                           ;comunicacao.h: 225: gsmOcupado = 0;
 16584  001A7A  0E00               	movlw	0
 16585  001A7C  6FF5               	movwf	_gsmOcupado& (0+255),b
 16586                           
 16587                           ;comunicacao.h: 226: timerReenvioSMS = 100;
 16588  001A7E  0E64               	movlw	100
 16589  001A80  6FF7               	movwf	_timerReenvioSMS& (0+255),b
 16590  001A82                     l416:
 16591  001A82  FFFF               	dw	65535	; assembler added errata NOP
 16592                           
 16593                           ; BSR set to: 0
 16594                           
 16595                           ; BSR set to: 0
 16596  001A84  0E00               	movlw	0
 16597  001A86  6E63               	movwf	_etapaComunicacao+1,c
 16598  001A88  0E00               	movlw	0
 16599  001A8A  6E62               	movwf	_etapaComunicacao,c
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;comunicacao.h: 234: }
 16603                           
 16604                           ;comunicacao.h: 233: break;
 16605  001A8C  D020               	goto	l370
 16606  001A8E                     l368:
 16607  001A8E  FFFF               	dw	65535	; assembler added errata NOP
 16608                           
 16609                           ; BSR set to: 0
 16610                           
 16611                           ; BSR set to: 0
 16612  001A90  C062  F0BB         	movff	_etapaComunicacao,??_enviaSMS
 16613  001A94  C063  F0BC         	movff	_etapaComunicacao+1,??_enviaSMS+1
 16614                           
 16615                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16616                           ; Switch size 1, requested type "space"
 16617                           ; Number of cases is 1, Range of values is 0 to 0
 16618                           ; switch strategies available:
 16619                           ; Name         Instructions Cycles
 16620                           ; simple_byte            4     3 (average)
 16621                           ;	Chosen strategy is simple_byte
 16622  001A98  51BC               	movf	(??_enviaSMS+1)& (0+255),w,b
 16623  001A9A  0A00               	xorlw	0	; case 0
 16624  001A9C  A4D8               	btfss	status,2,c
 16625  001A9E  D7F1               	goto	l416
 16626                           
 16627                           ; BSR set to: 0
 16628                           ; Switch size 1, requested type "space"
 16629                           ; Number of cases is 7, Range of values is 0 to 6
 16630                           ; switch strategies available:
 16631                           ; Name         Instructions Cycles
 16632                           ; simple_byte           22    12 (average)
 16633                           ;	Chosen strategy is simple_byte
 16634  001AA0  51BB               	movf	??_enviaSMS& (0+255),w,b
 16635  001AA2  0A00               	xorlw	0	; case 0
 16636  001AA4  B4D8               	btfsc	status,2,c
 16637  001AA6  D679               	goto	l369
 16638  001AA8  0A01               	xorlw	1	; case 1
 16639  001AAA  B4D8               	btfsc	status,2,c
 16640  001AAC  D686               	goto	l371
 16641  001AAE  0A03               	xorlw	3	; case 2
 16642  001AB0  B4D8               	btfsc	status,2,c
 16643  001AB2  D6B5               	goto	l374
 16644  001AB4  0A01               	xorlw	1	; case 3
 16645  001AB6  B4D8               	btfsc	status,2,c
 16646  001AB8  D6DE               	goto	l381
 16647  001ABA  0A07               	xorlw	7	; case 4
 16648  001ABC  B4D8               	btfsc	status,2,c
 16649  001ABE  D765               	goto	l398
 16650  001AC0  0A01               	xorlw	1	; case 5
 16651  001AC2  B4D8               	btfsc	status,2,c
 16652  001AC4  D790               	goto	l405
 16653  001AC6  0A03               	xorlw	3	; case 6
 16654  001AC8  B4D8               	btfsc	status,2,c
 16655  001ACA  D7AE               	goto	l410
 16656  001ACC  D7DA               	goto	l416
 16657  001ACE                     l370:
 16658  001ACE  FFFF               	dw	65535	; assembler added errata NOP
 16659                           
 16660                           ; BSR set to: 0
 16661  001AD0  0012               	return		;funcret
 16662  001AD2  FFFF               	dw	65535	; errata NOP
 16663  001AD4                     __end_of_enviaSMS:
 16664                           	opt stack 0
 16665                           tblptru	equ	0xFF8
 16666                           tblptrh	equ	0xFF7
 16667                           tblptrl	equ	0xFF6
 16668                           tablat	equ	0xFF5
 16669                           prodh	equ	0xFF4
 16670                           prodl	equ	0xFF3
 16671                           intcon	equ	0xFF2
 16672                           intcon2	equ	0xFF1
 16673                           intcon3	equ	0xFF0
 16674                           postinc0	equ	0xFEE
 16675                           wreg	equ	0xFE8
 16676                           postdec1	equ	0xFE5
 16677                           fsr1l	equ	0xFE1
 16678                           indf2	equ	0xFDF
 16679                           postinc2	equ	0xFDE
 16680                           postdec2	equ	0xFDD
 16681                           fsr2h	equ	0xFDA
 16682                           fsr2l	equ	0xFD9
 16683                           status	equ	0xFD8
 16684                           
 16685 ;; *************** function _writeChar *****************
 16686 ;; Defined at:
 16687 ;;		line 21 in file "serial.h"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;  hex             2    0[BANK0 ] PTR unsigned char 
 16690 ;;		 -> RAM(1535), 
 16691 ;; Auto vars:     Size  Location     Type
 16692 ;;		None
 16693 ;; Return value:  Size  Location     Type
 16694 ;;                  1    wreg      void 
 16695 ;; Registers used:
 16696 ;;		None
 16697 ;; Tracked objects:
 16698 ;;		On entry : 0/0
 16699 ;;		On exit  : 0/0
 16700 ;;		Unchanged: 0/0
 16701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16702 ;;      Params:         0       2       0       0       0       0       0
 16703 ;;      Locals:         0       0       0       0       0       0       0
 16704 ;;      Temps:          0       0       0       0       0       0       0
 16705 ;;      Totals:         0       2       0       0       0       0       0
 16706 ;;Total ram usage:        2 bytes
 16707 ;; Hardware stack levels used:    1
 16708 ;; Hardware stack levels required when called:    6
 16709 ;; This function calls:
 16710 ;;		Nothing
 16711 ;; This function is called by:
 16712 ;;		_getSinalSIM800L
 16713 ;;		_comunicarTeste
 16714 ;;		_enviaSMS
 16715 ;; This function uses a non-reentrant model
 16716 ;;
 16717                           
 16718                           	psect	text51
 16719  006BA4                     __ptext51:
 16720                           	opt stack 0
 16721  006BA4                     _writeChar:
 16722                           	opt stack 0
 16723  006BA4  FFFF               	dw	65535	; assembler added errata NOP
 16724                           
 16725                           ;serial.h: 22: while (!TXSTAbits.TRMT);
 16726                           
 16727                           ;incstack = 0
 16728  006BA6  A2AC               	btfss	4012,1,c	;volatile
 16729  006BA8  D7FD               	goto	_writeChar
 16730                           
 16731                           ;serial.h: 23: TXREG = hex;
 16732  006BAA  C080  FFAD         	movff	writeChar@hex,4013	;volatile
 16733  006BAE  0012               	return		;funcret
 16734  006BB0  FFFF               	dw	65535	; errata NOP
 16735  006BB2                     __end_of_writeChar:
 16736                           	opt stack 0
 16737                           tblptru	equ	0xFF8
 16738                           tblptrh	equ	0xFF7
 16739                           tblptrl	equ	0xFF6
 16740                           tablat	equ	0xFF5
 16741                           prodh	equ	0xFF4
 16742                           prodl	equ	0xFF3
 16743                           intcon	equ	0xFF2
 16744                           intcon2	equ	0xFF1
 16745                           intcon3	equ	0xFF0
 16746                           postinc0	equ	0xFEE
 16747                           wreg	equ	0xFE8
 16748                           postdec1	equ	0xFE5
 16749                           fsr1l	equ	0xFE1
 16750                           indf2	equ	0xFDF
 16751                           postinc2	equ	0xFDE
 16752                           postdec2	equ	0xFDD
 16753                           fsr2h	equ	0xFDA
 16754                           fsr2l	equ	0xFD9
 16755                           status	equ	0xFD8
 16756                           
 16757 ;; *************** function _printf *****************
 16758 ;; Defined at:
 16759 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
 16760 ;; Parameters:    Size  Location     Type
 16761 ;;  f               2   33[BANK0 ] PTR const unsigned char 
 16762 ;;		 -> STR_37(7), STR_35(11), STR_26(104), STR_25(63), 
 16763 ;;		 -> STR_23(18), STR_21(7), STR_20(12), STR_18(5), 
 16764 ;;		 -> STR_14(126), STR_12(18), STR_10(12), STR_8(5), 
 16765 ;;		 -> STR_4(5), STR_3(9), 
 16766 ;; Auto vars:     Size  Location     Type
 16767 ;;  pb              4   55[BANK0 ] struct __prbuf
 16768 ;;  ap              2   53[BANK0 ] PTR void [1]
 16769 ;;		 -> ?_sprintf(2), ?_printf(2), 
 16770 ;; Return value:  Size  Location     Type
 16771 ;;                  2   33[BANK0 ] int 
 16772 ;; Registers used:
 16773 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16774 ;; Tracked objects:
 16775 ;;		On entry : 0/0
 16776 ;;		On exit  : 0/0
 16777 ;;		Unchanged: 0/0
 16778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16779 ;;      Params:         0      20       0       0       0       0       0
 16780 ;;      Locals:         0       6       0       0       0       0       0
 16781 ;;      Temps:          0       0       0       0       0       0       0
 16782 ;;      Totals:         0      26       0       0       0       0       0
 16783 ;;Total ram usage:       26 bytes
 16784 ;; Hardware stack levels used:    1
 16785 ;; Hardware stack levels required when called:    8
 16786 ;; This function calls:
 16787 ;;		__doprnt
 16788 ;; This function is called by:
 16789 ;;		_getSinalSIM800L
 16790 ;;		_comunicarTeste
 16791 ;;		_enviaSMS
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795                           	psect	text52
 16796  00704E                     __ptext52:
 16797                           	opt stack 0
 16798  00704E                     _printf:
 16799                           	opt stack 0
 16800  00704E  FFFF               	dw	65535	; assembler added errata NOP
 16801                           
 16802                           ;incstack = 0
 16803  007050  0E00               	movlw	0
 16804  007052  0100               	movlb	0	; () banked
 16805  007054  6FB7               	movwf	printf@pb& (0+255),b
 16806  007056  0E00               	movlw	0
 16807  007058  6FB8               	movwf	(printf@pb+1)& (0+255),b
 16808  00705A  0EC4               	movlw	low _putch
 16809  00705C  6FB9               	movwf	(printf@pb+2)& (0+255),b
 16810  00705E  0E6B               	movlw	high _putch
 16811  007060  6FBA               	movwf	(printf@pb+3)& (0+255),b
 16812  007062  0EA3               	movlw	low (?_printf+2)
 16813  007064  6FB5               	movwf	printf@ap& (0+255),b
 16814  007066  0E00               	movlw	high (?_printf+2)
 16815  007068  6FB6               	movwf	(printf@ap+1)& (0+255),b
 16816                           
 16817                           ; BSR set to: 0
 16818                           ;	Return value of _printf is never used
 16819  00706A  0EB7               	movlw	low printf@pb
 16820  00706C  6F8C               	movwf	__doprnt@pb& (0+255),b
 16821  00706E  0E00               	movlw	high printf@pb
 16822  007070  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 16823  007072  C0A1  F08E         	movff	printf@f,__doprnt@f
 16824  007076  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
 16825  00707A  0EB5               	movlw	low printf@ap
 16826  00707C  6F90               	movwf	__doprnt@ap& (0+255),b
 16827  00707E  0E00               	movlw	high printf@ap
 16828  007080  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 16829  007082  EC37  F001         	call	__doprnt	;wreg free
 16830  007086  0012               	return		;funcret
 16831  007088  FFFF               	dw	65535	; errata NOP
 16832  00708A                     __end_of_printf:
 16833                           	opt stack 0
 16834                           tblptru	equ	0xFF8
 16835                           tblptrh	equ	0xFF7
 16836                           tblptrl	equ	0xFF6
 16837                           tablat	equ	0xFF5
 16838                           prodh	equ	0xFF4
 16839                           prodl	equ	0xFF3
 16840                           intcon	equ	0xFF2
 16841                           intcon2	equ	0xFF1
 16842                           intcon3	equ	0xFF0
 16843                           postinc0	equ	0xFEE
 16844                           wreg	equ	0xFE8
 16845                           postdec1	equ	0xFE5
 16846                           fsr1l	equ	0xFE1
 16847                           indf2	equ	0xFDF
 16848                           postinc2	equ	0xFDE
 16849                           postdec2	equ	0xFDD
 16850                           fsr2h	equ	0xFDA
 16851                           fsr2l	equ	0xFD9
 16852                           status	equ	0xFD8
 16853                           
 16854 ;; *************** function __doprnt *****************
 16855 ;; Defined at:
 16856 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 16857 ;; Parameters:    Size  Location     Type
 16858 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 16859 ;;		 -> sprintf@pb(4), printf@pb(4), 
 16860 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 16861 ;;		 -> intToFloatStr@conv(4), STR_126(15), STR_125(12), STR_124(10), 
 16862 ;;		 -> STR_123(18), STR_122(10), STR_121(18), STR_120(16), 
 16863 ;;		 -> STR_119(10), STR_117(3), STR_116(14), STR_115(20), 
 16864 ;;		 -> STR_114(8), STR_113(10), STR_112(11), STR_111(9), 
 16865 ;;		 -> STR_110(3), STR_109(15), STR_108(15), STR_107(11), 
 16866 ;;		 -> STR_106(11), STR_105(18), STR_104(5), STR_103(12), 
 16867 ;;		 -> STR_102(5), STR_101(14), STR_100(19), STR_97(3), 
 16868 ;;		 -> STR_96(7), STR_95(7), STR_93(12), STR_92(26), 
 16869 ;;		 -> STR_91(20), STR_90(8), STR_87(14), STR_84(14), 
 16870 ;;		 -> STR_83(11), STR_80(10), STR_79(31), STR_76(11), 
 16871 ;;		 -> STR_75(20), STR_74(20), STR_73(21), STR_72(15), 
 16872 ;;		 -> STR_71(6), STR_70(15), STR_69(6), STR_68(20), 
 16873 ;;		 -> STR_67(15), STR_66(19), STR_65(20), STR_64(21), 
 16874 ;;		 -> STR_63(21), STR_62(18), STR_61(20), STR_60(12), 
 16875 ;;		 -> STR_59(17), STR_58(21), STR_57(16), STR_54(15), 
 16876 ;;		 -> STR_51(15), STR_48(11), STR_47(17), STR_44(9), 
 16877 ;;		 -> STR_43(19), STR_42(19), STR_41(16), STR_40(15), 
 16878 ;;		 -> STR_39(15), STR_38(20), STR_37(7), STR_35(11), 
 16879 ;;		 -> STR_26(104), STR_25(63), STR_23(18), STR_21(7), 
 16880 ;;		 -> STR_20(12), STR_18(5), STR_14(126), STR_12(18), 
 16881 ;;		 -> STR_10(12), STR_8(5), STR_4(5), STR_3(9), 
 16882 ;;		 -> STR_2(5), STR_1(5), 
 16883 ;;  ap              2   16[BANK0 ] PTR PTR void 
 16884 ;;		 -> sprintf@ap(2), printf@ap(2), 
 16885 ;; Auto vars:     Size  Location     Type
 16886 ;;  tmpval          4    0        struct .
 16887 ;;  width           2   30[BANK0 ] int 
 16888 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 16889 ;;		 -> ?_sprintf(2), ?_printf(2), STR_127(7), _doprnt@c(1), 
 16890 ;;		 -> intToFloatStr@end(4), STR_118(12), STR_99(17), STR_98(13), 
 16891 ;;		 -> STR_94(12), STR_89(5), STR_88(3), STR_86(5), 
 16892 ;;		 -> STR_85(3), STR_82(5), STR_81(3), STR_78(4), 
 16893 ;;		 -> STR_77(4), STR_56(5), STR_55(3), STR_53(5), 
 16894 ;;		 -> STR_52(3), line3(21), STR_50(5), STR_49(3), 
 16895 ;;		 -> STR_46(13), STR_45(10), line2(21), line1(21), 
 16896 ;;		 -> line4(21), STR_32(6), STR_31(3), STR_30(6), 
 16897 ;;		 -> STR_29(3), STR_28(6), STR_27(3), STR_15(12), 
 16898 ;;		 -> tel2(12), tel1(12), bufferAUX(20), NULL(0), 
 16899 ;;		 -> bufferSerial(60), 
 16900 ;;  len             2   25[BANK0 ] unsigned int 
 16901 ;;  val             2   23[BANK0 ] unsigned int 
 16902 ;;  c               1   32[BANK0 ] char 
 16903 ;;  flag            1   27[BANK0 ] unsigned char 
 16904 ;;  prec            1   22[BANK0 ] char 
 16905 ;; Return value:  Size  Location     Type
 16906 ;;                  2   12[BANK0 ] int 
 16907 ;; Registers used:
 16908 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16909 ;; Tracked objects:
 16910 ;;		On entry : 0/0
 16911 ;;		On exit  : 0/0
 16912 ;;		Unchanged: 0/0
 16913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16914 ;;      Params:         0       6       0       0       0       0       0
 16915 ;;      Locals:         0      11       0       0       0       0       0
 16916 ;;      Temps:          0       4       0       0       0       0       0
 16917 ;;      Totals:         0      21       0       0       0       0       0
 16918 ;;Total ram usage:       21 bytes
 16919 ;; Hardware stack levels used:    1
 16920 ;; Hardware stack levels required when called:    7
 16921 ;; This function calls:
 16922 ;;		Absolute function
 16923 ;;		___lwdiv
 16924 ;;		___lwmod
 16925 ;;		___wmul
 16926 ;;		_isdigit
 16927 ;;		_putch
 16928 ;; This function is called by:
 16929 ;;		_printf
 16930 ;;		_sprintf
 16931 ;; This function uses a non-reentrant model
 16932 ;;
 16933                           
 16934                           	psect	text53
 16935  00026E                     __ptext53:
 16936                           	opt stack 0
 16937  00026E                     __doprnt:
 16938                           	opt stack 0
 16939  00026E  FFFF               	dw	65535	; assembler added errata NOP
 16940                           
 16941                           ;doprnt.c: 499: signed char c;
 16942                           ;doprnt.c: 501: int width;
 16943                           ;doprnt.c: 506: signed char prec;
 16944                           ;doprnt.c: 508: unsigned char flag;
 16945                           ;doprnt.c: 523: union {
 16946                           ;doprnt.c: 524: unsigned long vd;
 16947                           ;doprnt.c: 525: double integ;
 16948                           ;doprnt.c: 526: } tmpval;
 16949                           ;doprnt.c: 528: unsigned int val;
 16950                           ;doprnt.c: 529: unsigned len;
 16951                           ;doprnt.c: 530: const char * cp;
 16952                           ;doprnt.c: 536: while(c = *f++) {
 16953                           
 16954                           ;incstack = 0
 16955  000270  D3D7               	goto	u5440
 16956  000272  FFFF               	dw	65535	; assembler added errata NOP
 16957                           
 16958                           ;doprnt.c: 538: if(c != '%')
 16959  000274  0E25               	movlw	37
 16960  000276  0100               	movlb	0	; () banked
 16961  000278  19A0               	xorwf	__doprnt@c& (0+255),w,b
 16962  00027A  B4D8               	btfsc	status,2,c
 16963  00027C  D037               	goto	l1112
 16964                           
 16965                           ; BSR set to: 0
 16966                           ;doprnt.c: 540: {
 16967                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 16968  00027E  EE20 F002          	lfsr	2,2
 16969  000282  518C               	movf	__doprnt@pb& (0+255),w,b
 16970  000284  26D9               	addwf	fsr2l,f,c
 16971  000286  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16972  000288  22DA               	addwfc	fsr2h,f,c
 16973  00028A  50DE               	movf	postinc2,w,c
 16974  00028C  10DE               	iorwf	postinc2,w,c
 16975  00028E  B4D8               	btfsc	status,2,c
 16976  000290  D016               	goto	l1113
 16977                           
 16978                           ; BSR set to: 0
 16979  000292  EE20 F002          	lfsr	2,2
 16980  000296  518C               	movf	__doprnt@pb& (0+255),w,b
 16981  000298  26D9               	addwf	fsr2l,f,c
 16982  00029A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16983  00029C  22DA               	addwfc	fsr2h,f,c
 16984  00029E  D801               	call	u5008
 16985  0002A0  D3BF               	goto	u5440
 16986  0002A2                     u5008:
 16987  0002A2  FFFF               	dw	65535	; assembler added errata NOP
 16988  0002A4  0005               	push	
 16989  0002A6  6EFA               	movwf	pclath,c
 16990  0002A8  50DE               	movf	postinc2,w,c
 16991  0002AA  6EFD               	movwf	tosl,c
 16992  0002AC  50DE               	movf	postinc2,w,c
 16993  0002AE  6EFE               	movwf	tosh,c
 16994  0002B0  50F8               	movf	tblptru,w,c
 16995  0002B2  6EFF               	movwf	tosu,c
 16996  0002B4  50FA               	movf	pclath,w,c
 16997  0002B6  51A0               	movf	__doprnt@c& (0+255),w,b
 16998  0002B8  0012               	return		;indir
 16999  0002BA  FFFF               	dw	65535	; errata NOP
 17000  0002BC  D3B1               	goto	u5440
 17001  0002BE                     l1113:
 17002  0002BE  FFFF               	dw	65535	; assembler added errata NOP
 17003  0002C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17004  0002C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17005  0002C8  CFDE F092          	movff	postinc2,??__doprnt
 17006  0002CC  CFDD F093          	movff	postdec2,??__doprnt+1
 17007  0002D0  C092  FFD9         	movff	??__doprnt,fsr2l
 17008  0002D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17009  0002D8  C0A0  FFDF         	movff	__doprnt@c,indf2
 17010  0002DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17011  0002E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17012  0002E4  2ADE               	incf	postinc2,f,c
 17013  0002E6  0E00               	movlw	0
 17014  0002E8  22DD               	addwfc	postdec2,f,c
 17015                           
 17016                           ;doprnt.c: 542: continue;
 17017  0002EA  D39A               	goto	u5440
 17018  0002EC                     l1112:
 17019  0002EC  FFFF               	dw	65535	; assembler added errata NOP
 17020                           
 17021                           ;doprnt.c: 543: }
 17022                           ;doprnt.c: 546: width = 0;
 17023  0002EE  0E00               	movlw	0
 17024  0002F0  0100               	movlb	0	; () banked
 17025  0002F2  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 17026  0002F4  0E00               	movlw	0
 17027  0002F6  6F9E               	movwf	__doprnt@width& (0+255),b
 17028                           
 17029                           ;doprnt.c: 548: flag = 0;
 17030  0002F8  0E00               	movlw	0
 17031  0002FA  6F9B               	movwf	__doprnt@flag& (0+255),b
 17032                           
 17033                           ; BSR set to: 0
 17034                           ;doprnt.c: 551: switch(*f) {
 17035                           
 17036                           ;doprnt.c: 550: for(;;) {
 17037  0002FC  D005               	goto	l1116
 17038  0002FE  FFFF               	dw	65535	; assembler added errata NOP
 17039                           
 17040                           ;doprnt.c: 580: flag |= 0x04;
 17041                           
 17042                           ; BSR set to: 0
 17043  000300  0100               	movlb	0	; () banked
 17044  000302  859B               	bsf	__doprnt@flag& (0+255),2,b
 17045                           
 17046                           ;doprnt.c: 581: f++;
 17047  000304  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 17048  000306  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 17049  000308                     l1116:
 17050  000308  FFFF               	dw	65535	; assembler added errata NOP
 17051                           
 17052                           ; BSR set to: 0
 17053  00030A  C08E  FFF6         	movff	__doprnt@f,tblptrl
 17054  00030E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 17055  000312  6AF8               	clrf	tblptru,c
 17056  000314  0E05               	movlw	(high __ramtop+-1)
 17057  000316  64F7               	cpfsgt	tblptrh,c
 17058  000318  D004               	bra	u5017
 17059  00031A  0008               	tblrd		*
 17060  00031C  FFFF               	dw	65535	; errata NOP
 17061  00031E  50F5               	movf	tablat,w,c
 17062  000320  D005               	bra	u5010
 17063  000322                     u5017:
 17064  000322  CFF6 FFE9          	movff	tblptrl,fsr0l
 17065  000326  CFF7 FFEA          	movff	tblptrh,fsr0h
 17066  00032A  50EF               	movf	indf0,w,c
 17067  00032C                     u5010:
 17068                           
 17069                           ; Switch size 1, requested type "space"
 17070                           ; Number of cases is 1, Range of values is 48 to 48
 17071                           ; switch strategies available:
 17072                           ; Name         Instructions Cycles
 17073                           ; simple_byte            4     3 (average)
 17074                           ;	Chosen strategy is simple_byte
 17075  00032C  0A30               	xorlw	48	; case 48
 17076  00032E  B4D8               	btfsc	status,2,c
 17077  000330  D7E6               	goto	l1117
 17078                           
 17079                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17080                           
 17081                           ;doprnt.c: 586: }
 17082                           
 17083                           ;doprnt.c: 585: break;
 17084  000332  C08E  FFF6         	movff	__doprnt@f,tblptrl
 17085  000336  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 17086  00033A  6AF8               	clrf	tblptru,c
 17087  00033C  0E05               	movlw	(high __ramtop+-1)
 17088  00033E  64F7               	cpfsgt	tblptrh,c
 17089  000340  D004               	bra	u5027
 17090  000342  0008               	tblrd		*
 17091  000344  FFFF               	dw	65535	; errata NOP
 17092  000346  50F5               	movf	tablat,w,c
 17093  000348  D005               	bra	u5020
 17094  00034A                     u5027:
 17095  00034A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17096  00034E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17097  000352  50EF               	movf	indf0,w,c
 17098  000354                     u5020:
 17099  000354  EC65  F036         	call	_isdigit
 17100  000358  A0D8               	btfss	status,0,c
 17101  00035A  D16B               	goto	l1124
 17102                           
 17103                           ;doprnt.c: 598: width = 0;
 17104  00035C  0E00               	movlw	0
 17105  00035E  0100               	movlb	0	; () banked
 17106  000360  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 17107  000362  0E00               	movlw	0
 17108  000364  6F9E               	movwf	__doprnt@width& (0+255),b
 17109  000366  FFFF               	dw	65535	; assembler added errata NOP
 17110                           
 17111                           ;doprnt.c: 600: width *= 10;
 17112                           
 17113                           ; BSR set to: 0
 17114  000368  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 17115  00036C  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 17116  000370  0E00               	movlw	0
 17117  000372  0100               	movlb	0	; () banked
 17118  000374  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17119  000376  0E0A               	movlw	10
 17120  000378  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17121  00037A  EC8F  F036         	call	___wmul	;wreg free
 17122  00037E  C080  F09E         	movff	?___wmul,__doprnt@width
 17123  000382  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 17124                           
 17125                           ;doprnt.c: 601: width += *f++ - '0';
 17126  000386  0ED0               	movlw	208
 17127  000388  0100               	movlb	0	; () banked
 17128  00038A  6F92               	movwf	??__doprnt& (0+255),b
 17129  00038C  0EFF               	movlw	255
 17130  00038E  6F93               	movwf	(??__doprnt+1)& (0+255),b
 17131  000390  C08E  FFF6         	movff	__doprnt@f,tblptrl
 17132  000394  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 17133  000398  6AF8               	clrf	tblptru,c
 17134  00039A  0E05               	movlw	(high __ramtop+-1)
 17135  00039C  64F7               	cpfsgt	tblptrh,c
 17136  00039E  D004               	bra	u5047
 17137  0003A0  0008               	tblrd		*
 17138  0003A2  FFFF               	dw	65535	; errata NOP
 17139  0003A4  50F5               	movf	tablat,w,c
 17140  0003A6  D005               	bra	u5040
 17141  0003A8                     u5047:
 17142  0003A8  CFF6 FFE9          	movff	tblptrl,fsr0l
 17143  0003AC  CFF7 FFEA          	movff	tblptrh,fsr0h
 17144  0003B0  50EF               	movf	indf0,w,c
 17145  0003B2                     u5040:
 17146  0003B2  0100               	movlb	0	; () banked
 17147  0003B4  6F94               	movwf	(??__doprnt+2)& (0+255),b
 17148  0003B6  6B95               	clrf	(??__doprnt+3)& (0+255),b
 17149  0003B8  5192               	movf	??__doprnt& (0+255),w,b
 17150  0003BA  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 17151  0003BC  5193               	movf	(??__doprnt+1)& (0+255),w,b
 17152  0003BE  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 17153  0003C0  5194               	movf	(??__doprnt+2)& (0+255),w,b
 17154  0003C2  279E               	addwf	__doprnt@width& (0+255),f,b
 17155  0003C4  5195               	movf	(??__doprnt+3)& (0+255),w,b
 17156  0003C6  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 17157                           
 17158                           ; BSR set to: 0
 17159  0003C8  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 17160  0003CA  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 17161                           
 17162                           ; BSR set to: 0
 17163                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17164  0003CC  C08E  FFF6         	movff	__doprnt@f,tblptrl
 17165  0003D0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 17166  0003D4  6AF8               	clrf	tblptru,c
 17167  0003D6  0E05               	movlw	(high __ramtop+-1)
 17168  0003D8  64F7               	cpfsgt	tblptrh,c
 17169  0003DA  D004               	bra	u5057
 17170  0003DC  0008               	tblrd		*
 17171  0003DE  FFFF               	dw	65535	; errata NOP
 17172  0003E0  50F5               	movf	tablat,w,c
 17173  0003E2  D005               	bra	u5050
 17174  0003E4                     u5057:
 17175  0003E4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17176  0003E8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17177  0003EC  50EF               	movf	indf0,w,c
 17178  0003EE                     u5050:
 17179  0003EE  EC65  F036         	call	_isdigit
 17180  0003F2  A0D8               	btfss	status,0,c
 17181  0003F4  D11E               	goto	l1124
 17182  0003F6  D7B7               	goto	l1122
 17183  0003F8  FFFF               	dw	65535	; assembler added errata NOP
 17184                           
 17185                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17186  0003FA  C090  FFD9         	movff	__doprnt@ap,fsr2l
 17187  0003FE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 17188  000402  CFDF F092          	movff	indf2,??__doprnt
 17189  000406  0E02               	movlw	2
 17190  000408  26DE               	addwf	postinc2,f,c
 17191  00040A  CFDF F093          	movff	indf2,??__doprnt+1
 17192  00040E  0E00               	movlw	0
 17193  000410  22DD               	addwfc	postdec2,f,c
 17194  000412  C092  FFD9         	movff	??__doprnt,fsr2l
 17195  000416  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17196  00041A  CFDE F09C          	movff	postinc2,__doprnt@cp
 17197  00041E  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 17198                           
 17199                           ;doprnt.c: 740: if(!cp)
 17200  000422  0100               	movlb	0	; () banked
 17201  000424  519C               	movf	__doprnt@cp& (0+255),w,b
 17202  000426  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 17203  000428  A4D8               	btfss	status,2,c
 17204  00042A  D004               	goto	l1131
 17205                           
 17206                           ; BSR set to: 0
 17207                           ;doprnt.c: 741: cp = "(null)";
 17208  00042C  0EA2               	movlw	low STR_127
 17209  00042E  6F9C               	movwf	__doprnt@cp& (0+255),b
 17210  000430  0E7F               	movlw	high STR_127
 17211  000432  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 17212  000434                     l1131:
 17213  000434  FFFF               	dw	65535	; assembler added errata NOP
 17214                           
 17215                           ; BSR set to: 0
 17216                           ;doprnt.c: 745: len = 0;
 17217                           
 17218                           ; BSR set to: 0
 17219  000436  0E00               	movlw	0
 17220  000438  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 17221  00043A  0E00               	movlw	0
 17222  00043C  6F99               	movwf	__doprnt@len& (0+255),b
 17223                           
 17224                           ;doprnt.c: 746: while(cp[len])
 17225  00043E  D004               	goto	l1132
 17226  000440  FFFF               	dw	65535	; assembler added errata NOP
 17227                           
 17228                           ;doprnt.c: 747: len++;
 17229                           
 17230                           ; BSR set to: 0
 17231  000442  0100               	movlb	0	; () banked
 17232  000444  4B99               	infsnz	__doprnt@len& (0+255),f,b
 17233  000446  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 17234  000448                     l1132:
 17235  000448  FFFF               	dw	65535	; assembler added errata NOP
 17236                           
 17237                           ; BSR set to: 0
 17238                           
 17239                           ; BSR set to: 0
 17240  00044A  5199               	movf	__doprnt@len& (0+255),w,b
 17241  00044C  259C               	addwf	__doprnt@cp& (0+255),w,b
 17242  00044E  6F92               	movwf	??__doprnt& (0+255),b
 17243  000450  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 17244  000452  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 17245  000454  6F93               	movwf	(??__doprnt+1)& (0+255),b
 17246  000456  C092  FFF6         	movff	??__doprnt,tblptrl
 17247  00045A  C093  FFF7         	movff	??__doprnt+1,tblptrh
 17248  00045E  6AF8               	clrf	tblptru,c
 17249  000460  0E05               	movlw	(high __ramtop+-1)
 17250  000462  64F7               	cpfsgt	tblptrh,c
 17251  000464  D004               	bra	u5087
 17252  000466  0008               	tblrd		*
 17253  000468  FFFF               	dw	65535	; errata NOP
 17254  00046A  50F5               	movf	tablat,w,c
 17255  00046C  D005               	bra	u5080
 17256  00046E                     u5087:
 17257  00046E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17258  000472  CFF7 FFEA          	movff	tblptrh,fsr0h
 17259  000476  50EF               	movf	indf0,w,c
 17260  000478                     u5080:
 17261  000478  0900               	iorlw	0
 17262  00047A  A4D8               	btfss	status,2,c
 17263  00047C  D7E1               	goto	l1133
 17264  00047E                     u5090:
 17265  00047E  FFFF               	dw	65535	; assembler added errata NOP
 17266                           
 17267                           ;doprnt.c: 757: if(width > len)
 17268                           
 17269                           ;doprnt.c: 750: dostring:
 17270  000480  0100               	movlb	0	; () banked
 17271  000482  519E               	movf	__doprnt@width& (0+255),w,b
 17272  000484  5D99               	subwf	__doprnt@len& (0+255),w,b
 17273  000486  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 17274  000488  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 17275  00048A  B0D8               	btfsc	status,0,c
 17276  00048C  D005               	goto	l1136
 17277                           
 17278                           ; BSR set to: 0
 17279                           ;doprnt.c: 758: width -= len;
 17280  00048E  5199               	movf	__doprnt@len& (0+255),w,b
 17281  000490  5F9E               	subwf	__doprnt@width& (0+255),f,b
 17282  000492  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 17283  000494  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 17284  000496  D03D               	goto	l1141
 17285  000498                     l1136:
 17286  000498  FFFF               	dw	65535	; assembler added errata NOP
 17287                           
 17288                           ; BSR set to: 0
 17289                           ;doprnt.c: 759: else
 17290                           ;doprnt.c: 760: width = 0;
 17291                           
 17292                           ; BSR set to: 0
 17293  00049A  0E00               	movlw	0
 17294  00049C  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 17295  00049E  0E00               	movlw	0
 17296  0004A0  6F9E               	movwf	__doprnt@width& (0+255),b
 17297                           
 17298                           ; BSR set to: 0
 17299                           ;doprnt.c: 764: while(width--)
 17300  0004A2  D037               	goto	l1141
 17301  0004A4  FFFF               	dw	65535	; assembler added errata NOP
 17302  0004A6                     l5355:
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 17306  0004A6  EE20 F002          	lfsr	2,2
 17307  0004AA  518C               	movf	__doprnt@pb& (0+255),w,b
 17308  0004AC  26D9               	addwf	fsr2l,f,c
 17309  0004AE  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17310  0004B0  22DA               	addwfc	fsr2h,f,c
 17311  0004B2  50DE               	movf	postinc2,w,c
 17312  0004B4  10DE               	iorwf	postinc2,w,c
 17313  0004B6  B4D8               	btfsc	status,2,c
 17314  0004B8  D016               	goto	l1140
 17315                           
 17316                           ; BSR set to: 0
 17317  0004BA  EE20 F002          	lfsr	2,2
 17318  0004BE  518C               	movf	__doprnt@pb& (0+255),w,b
 17319  0004C0  26D9               	addwf	fsr2l,f,c
 17320  0004C2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17321  0004C4  22DA               	addwfc	fsr2h,f,c
 17322  0004C6  D801               	call	u5128
 17323  0004C8  D024               	goto	l1141
 17324  0004CA                     u5128:
 17325  0004CA  FFFF               	dw	65535	; assembler added errata NOP
 17326  0004CC  0005               	push	
 17327  0004CE  6EFA               	movwf	pclath,c
 17328  0004D0  50DE               	movf	postinc2,w,c
 17329  0004D2  6EFD               	movwf	tosl,c
 17330  0004D4  50DE               	movf	postinc2,w,c
 17331  0004D6  6EFE               	movwf	tosh,c
 17332  0004D8  50F8               	movf	tblptru,w,c
 17333  0004DA  6EFF               	movwf	tosu,c
 17334  0004DC  50FA               	movf	pclath,w,c
 17335  0004DE  0E20               	movlw	32
 17336  0004E0  0012               	return		;indir
 17337  0004E2  FFFF               	dw	65535	; errata NOP
 17338  0004E4  D016               	goto	l1141
 17339  0004E6                     l1140:
 17340  0004E6  FFFF               	dw	65535	; assembler added errata NOP
 17341  0004E8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17342  0004EC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17343  0004F0  CFDE F092          	movff	postinc2,??__doprnt
 17344  0004F4  CFDD F093          	movff	postdec2,??__doprnt+1
 17345  0004F8  C092  FFD9         	movff	??__doprnt,fsr2l
 17346  0004FC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17347  000500  0E20               	movlw	32
 17348  000502  6EDF               	movwf	indf2,c
 17349  000504  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17350  000508  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17351  00050C  2ADE               	incf	postinc2,f,c
 17352  00050E  0E00               	movlw	0
 17353  000510  22DD               	addwfc	postdec2,f,c
 17354  000512                     l1141:
 17355  000512  FFFF               	dw	65535	; assembler added errata NOP
 17356  000514  0100               	movlb	0	; () banked
 17357  000516  079E               	decf	__doprnt@width& (0+255),f,b
 17358  000518  A0D8               	btfss	status,0,c
 17359  00051A  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 17360  00051C  299E               	incf	__doprnt@width& (0+255),w,b
 17361  00051E  E1C3               	bnz	l5355
 17362  000520  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 17363  000522  B4D8               	btfsc	status,2,c
 17364  000524  D05F               	goto	l1146
 17365  000526  D7BE               	goto	l1139
 17366  000528  FFFF               	dw	65535	; assembler added errata NOP
 17367  00052A                     l5365:
 17368                           
 17369                           ; BSR set to: 0
 17370                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 17371  00052A  EE20 F002          	lfsr	2,2
 17372  00052E  518C               	movf	__doprnt@pb& (0+255),w,b
 17373  000530  26D9               	addwf	fsr2l,f,c
 17374  000532  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17375  000534  22DA               	addwfc	fsr2h,f,c
 17376  000536  50DE               	movf	postinc2,w,c
 17377  000538  10DE               	iorwf	postinc2,w,c
 17378  00053A  B4D8               	btfsc	status,2,c
 17379  00053C  D02A               	goto	l1145
 17380                           
 17381                           ; BSR set to: 0
 17382  00053E  EE20 F002          	lfsr	2,2
 17383  000542  518C               	movf	__doprnt@pb& (0+255),w,b
 17384  000544  26D9               	addwf	fsr2l,f,c
 17385  000546  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17386  000548  22DA               	addwfc	fsr2h,f,c
 17387  00054A  D801               	call	u5158
 17388  00054C  D01D               	goto	u5159
 17389  00054E                     u5158:
 17390  00054E  FFFF               	dw	65535	; assembler added errata NOP
 17391  000550  0005               	push	
 17392  000552  6EFA               	movwf	pclath,c
 17393  000554  50DE               	movf	postinc2,w,c
 17394  000556  6EFD               	movwf	tosl,c
 17395  000558  50DE               	movf	postinc2,w,c
 17396  00055A  6EFE               	movwf	tosh,c
 17397  00055C  50F8               	movf	tblptru,w,c
 17398  00055E  6EFF               	movwf	tosu,c
 17399  000560  50FA               	movf	pclath,w,c
 17400  000562  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 17401  000566  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 17402  00056A  6AF8               	clrf	tblptru,c
 17403  00056C  0E05               	movlw	(high __ramtop+-1)
 17404  00056E  64F7               	cpfsgt	tblptrh,c
 17405  000570  D004               	bra	u5167
 17406  000572  0008               	tblrd		*
 17407  000574  FFFF               	dw	65535	; errata NOP
 17408  000576  50F5               	movf	tablat,w,c
 17409  000578  D005               	bra	u5160
 17410  00057A                     u5167:
 17411  00057A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17412  00057E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17413  000582  50EF               	movf	indf0,w,c
 17414  000584                     u5160:
 17415  000584  0012               	return		;indir
 17416  000586  FFFF               	dw	65535	; errata NOP
 17417  000588                     u5159:
 17418  000588  FFFF               	dw	65535	; assembler added errata NOP
 17419  00058A  0100               	movlb	0	; () banked
 17420  00058C  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 17421  00058E  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 17422  000590  D029               	goto	l1146
 17423  000592                     l1145:
 17424  000592  FFFF               	dw	65535	; assembler added errata NOP
 17425                           
 17426                           ; BSR set to: 0
 17427                           
 17428                           ; BSR set to: 0
 17429  000594  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 17430  000598  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 17431  00059C  6AF8               	clrf	tblptru,c
 17432  00059E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17433  0005A2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17434  0005A6  CFDE F092          	movff	postinc2,??__doprnt
 17435  0005AA  CFDD F093          	movff	postdec2,??__doprnt+1
 17436  0005AE  C092  FFD9         	movff	??__doprnt,fsr2l
 17437  0005B2  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17438  0005B6  0E05               	movlw	(high __ramtop+-1)
 17439  0005B8  64F7               	cpfsgt	tblptrh,c
 17440  0005BA  D004               	bra	u5177
 17441  0005BC  0008               	tblrd		*
 17442  0005BE  FFFF               	dw	65535	; errata NOP
 17443  0005C0  50F5               	movf	tablat,w,c
 17444  0005C2  D005               	bra	u5170
 17445  0005C4                     u5177:
 17446  0005C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17447  0005C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17448  0005CC  50EF               	movf	indf0,w,c
 17449  0005CE                     u5170:
 17450  0005CE  6EDF               	movwf	indf2,c
 17451  0005D0  0100               	movlb	0	; () banked
 17452  0005D2  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 17453  0005D4  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 17454                           
 17455                           ; BSR set to: 0
 17456  0005D6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17457  0005DA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17458  0005DE  2ADE               	incf	postinc2,f,c
 17459  0005E0  0E00               	movlw	0
 17460  0005E2  22DD               	addwfc	postdec2,f,c
 17461  0005E4                     l1146:
 17462  0005E4  FFFF               	dw	65535	; assembler added errata NOP
 17463                           
 17464                           ; BSR set to: 0
 17465                           
 17466                           ; BSR set to: 0
 17467                           
 17468                           ; BSR set to: 0
 17469  0005E6  0799               	decf	__doprnt@len& (0+255),f,b
 17470  0005E8  A0D8               	btfss	status,0,c
 17471  0005EA  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 17472  0005EC  2999               	incf	__doprnt@len& (0+255),w,b
 17473  0005EE  E19D               	bnz	l5365
 17474  0005F0  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 17475  0005F2  B4D8               	btfsc	status,2,c
 17476  0005F4  D215               	goto	u5440
 17477  0005F6  D798               	goto	l1144
 17478  0005F8  FFFF               	dw	65535	; assembler added errata NOP
 17479                           
 17480                           ; BSR set to: 0
 17481                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 17482                           
 17483                           ; BSR set to: 0
 17484  0005FA  C090  FFD9         	movff	__doprnt@ap,fsr2l
 17485  0005FE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 17486  000602  CFDF F092          	movff	indf2,??__doprnt
 17487  000606  0E02               	movlw	2
 17488  000608  26DE               	addwf	postinc2,f,c
 17489  00060A  CFDF F093          	movff	indf2,??__doprnt+1
 17490  00060E  0E00               	movlw	0
 17491  000610  22DD               	addwfc	postdec2,f,c
 17492  000612  C092  FFD9         	movff	??__doprnt,fsr2l
 17493  000616  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17494  00061A  50DF               	movf	indf2,w,c
 17495  00061C  6FA0               	movwf	__doprnt@c& (0+255),b
 17496  00061E  FFFF               	dw	65535	; assembler added errata NOP
 17497                           
 17498                           ; BSR set to: 0
 17499                           ;doprnt.c: 805: cp = (char *)&c;
 17500                           
 17501                           ; BSR set to: 0
 17502  000620  0EA0               	movlw	low __doprnt@c
 17503  000622  6F9C               	movwf	__doprnt@cp& (0+255),b
 17504  000624  0E00               	movlw	high __doprnt@c
 17505  000626  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;doprnt.c: 806: len = 1;
 17509  000628  0E00               	movlw	0
 17510  00062A  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 17511  00062C  0E01               	movlw	1
 17512  00062E  6F99               	movwf	__doprnt@len& (0+255),b
 17513                           
 17514                           ;doprnt.c: 807: goto dostring;
 17515  000630  D726               	goto	u5090
 17516  000632                     l1124:
 17517  000632  FFFF               	dw	65535	; assembler added errata NOP
 17518                           
 17519                           ; BSR set to: 0
 17520  000634  0100               	movlb	0	; () banked
 17521  000636  518E               	movf	__doprnt@f& (0+255),w,b
 17522  000638  6F92               	movwf	??__doprnt& (0+255),b
 17523  00063A  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 17524  00063C  6F93               	movwf	(??__doprnt+1)& (0+255),b
 17525  00063E  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 17526  000640  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 17527  000642  C092  FFF6         	movff	??__doprnt,tblptrl
 17528  000646  C093  FFF7         	movff	??__doprnt+1,tblptrh
 17529  00064A  6AF8               	clrf	tblptru,c
 17530  00064C  0E05               	movlw	(high __ramtop+-1)
 17531  00064E  64F7               	cpfsgt	tblptrh,c
 17532  000650  D004               	bra	u5197
 17533  000652  0008               	tblrd		*
 17534  000654  FFFF               	dw	65535	; errata NOP
 17535  000656  50F5               	movf	tablat,w,c
 17536  000658  D005               	bra	u5190
 17537  00065A                     u5197:
 17538  00065A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17539  00065E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17540  000662  50EF               	movf	indf0,w,c
 17541  000664                     u5190:
 17542  000664  0100               	movlb	0	; () banked
 17543  000666  6FA0               	movwf	__doprnt@c& (0+255),b
 17544  000668  51A0               	movf	__doprnt@c& (0+255),w,b
 17545                           
 17546                           ; Switch size 1, requested type "space"
 17547                           ; Number of cases is 5, Range of values is 0 to 115
 17548                           ; switch strategies available:
 17549                           ; Name         Instructions Cycles
 17550                           ; simple_byte           16     9 (average)
 17551                           ;	Chosen strategy is simple_byte
 17552  00066A  0A00               	xorlw	0	; case 0
 17553  00066C  B4D8               	btfsc	status,2,c
 17554  00066E  D1F6               	goto	u5460
 17555  000670  0A63               	xorlw	99	; case 99
 17556  000672  B4D8               	btfsc	status,2,c
 17557  000674  D7C1               	goto	l1148
 17558  000676  0A07               	xorlw	7	; case 100
 17559  000678  B4D8               	btfsc	status,2,c
 17560  00067A  D007               	goto	l1129
 17561  00067C  0A0D               	xorlw	13	; case 105
 17562  00067E  B4D8               	btfsc	status,2,c
 17563  000680  D004               	goto	l1129
 17564  000682  0A1A               	xorlw	26	; case 115
 17565  000684  B4D8               	btfsc	status,2,c
 17566  000686  D6B8               	goto	l1130
 17567  000688  D7CA               	goto	l1149
 17568  00068A                     l1129:
 17569  00068A  FFFF               	dw	65535	; assembler added errata NOP
 17570                           
 17571                           ;doprnt.c: 1253: {
 17572                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17573                           
 17574                           ; BSR set to: 0
 17575  00068C  C090  FFD9         	movff	__doprnt@ap,fsr2l
 17576  000690  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 17577  000694  CFDF F092          	movff	indf2,??__doprnt
 17578  000698  0E02               	movlw	2
 17579  00069A  26DE               	addwf	postinc2,f,c
 17580  00069C  CFDF F093          	movff	indf2,??__doprnt+1
 17581  0006A0  0E00               	movlw	0
 17582  0006A2  22DD               	addwfc	postdec2,f,c
 17583  0006A4  C092  FFD9         	movff	??__doprnt,fsr2l
 17584  0006A8  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17585  0006AC  CFDE F097          	movff	postinc2,__doprnt@val
 17586  0006B0  CFDD F098          	movff	postdec2,__doprnt@val+1
 17587                           
 17588                           ;doprnt.c: 1261: if((int)val < 0) {
 17589  0006B4  0100               	movlb	0	; () banked
 17590  0006B6  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 17591  0006B8  D006               	goto	l1150
 17592                           
 17593                           ; BSR set to: 0
 17594                           ;doprnt.c: 1262: flag |= 0x03;
 17595  0006BA  0E03               	movlw	3
 17596  0006BC  139B               	iorwf	__doprnt@flag& (0+255),f,b
 17597                           
 17598                           ; BSR set to: 0
 17599                           ;doprnt.c: 1263: val = -val;
 17600  0006BE  6D97               	negf	__doprnt@val& (0+255),b
 17601  0006C0  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 17602  0006C2  B0D8               	btfsc	status,0,c
 17603  0006C4  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 17604  0006C6                     l1150:
 17605  0006C6  FFFF               	dw	65535	; assembler added errata NOP
 17606                           
 17607                           ; BSR set to: 0
 17608                           ;doprnt.c: 1264: }
 17609                           ;doprnt.c: 1266: }
 17610                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17611                           
 17612                           ; BSR set to: 0
 17613  0006C8  0E01               	movlw	1
 17614  0006CA  6FA0               	movwf	__doprnt@c& (0+255),b
 17615  0006CC                     l5399:
 17616  0006CC  FFFF               	dw	65535	; assembler added errata NOP
 17617                           
 17618                           ; BSR set to: 0
 17619  0006CE  0E05               	movlw	5
 17620  0006D0  19A0               	xorwf	__doprnt@c& (0+255),w,b
 17621  0006D2  B4D8               	btfsc	status,2,c
 17622  0006D4  D014               	goto	u5230
 17623                           
 17624                           ; BSR set to: 0
 17625                           ;doprnt.c: 1306: if(val < dpowers[c])
 17626                           
 17627                           ; BSR set to: 0
 17628                           
 17629                           ; BSR set to: 0
 17630  0006D6  51A0               	movf	__doprnt@c& (0+255),w,b
 17631  0006D8  0D02               	mullw	2
 17632  0006DA  0EA1               	movlw	low _dpowers
 17633  0006DC  24F3               	addwf	prodl,w,c
 17634  0006DE  6EF6               	movwf	tblptrl,c
 17635  0006E0  0E7A               	movlw	high _dpowers
 17636  0006E2  20F4               	addwfc	prodh,w,c
 17637  0006E4  6EF7               	movwf	tblptrh,c
 17638  0006E6                     	if	0	;There are less than 3 active tblptr bytes
 17639  0006E6                     	endif
 17640  0006E6  0009               	tblrd		*+
 17641  0006E8  FFFF               	dw	65535	; errata NOP
 17642  0006EA  50F5               	movf	tablat,w,c
 17643  0006EC  5D97               	subwf	__doprnt@val& (0+255),w,b
 17644  0006EE  0009               	tblrd		*+
 17645  0006F0  FFFF               	dw	65535	; errata NOP
 17646  0006F2  50F5               	movf	tablat,w,c
 17647  0006F4  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 17648  0006F6  A0D8               	btfss	status,0,c
 17649  0006F8  D002               	goto	u5230
 17650                           
 17651                           ; BSR set to: 0
 17652                           
 17653                           ; BSR set to: 0
 17654                           
 17655                           ; BSR set to: 0
 17656                           ;doprnt.c: 1307: break;
 17657  0006FA  2BA0               	incf	__doprnt@c& (0+255),f,b
 17658  0006FC  D7E7               	goto	l5399
 17659  0006FE                     u5230:
 17660  0006FE  FFFF               	dw	65535	; assembler added errata NOP
 17661                           
 17662                           ; BSR set to: 0
 17663                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17664                           
 17665                           ; BSR set to: 0
 17666  000700  519E               	movf	__doprnt@width& (0+255),w,b
 17667  000702  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 17668  000704  B4D8               	btfsc	status,2,c
 17669  000706  D009               	goto	l1154
 17670                           
 17671                           ; BSR set to: 0
 17672  000708  C09B  F092         	movff	__doprnt@flag,??__doprnt
 17673  00070C  0E03               	movlw	3
 17674  00070E  1792               	andwf	??__doprnt& (0+255),f,b
 17675  000710  B4D8               	btfsc	status,2,c
 17676  000712  D003               	goto	l1154
 17677                           
 17678                           ; BSR set to: 0
 17679                           ;doprnt.c: 1346: width--;
 17680  000714  079E               	decf	__doprnt@width& (0+255),f,b
 17681  000716  A0D8               	btfss	status,0,c
 17682  000718  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 17683  00071A                     l1154:
 17684  00071A  FFFF               	dw	65535	; assembler added errata NOP
 17685                           
 17686                           ; BSR set to: 0
 17687                           ;doprnt.c: 1381: if(width > c)
 17688                           
 17689                           ; BSR set to: 0
 17690  00071C  0E80               	movlw	128
 17691  00071E  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 17692  000720  0E7F               	movlw	127
 17693  000722  6F92               	movwf	??__doprnt& (0+255),b
 17694  000724  519E               	movf	__doprnt@width& (0+255),w,b
 17695  000726  5DA0               	subwf	__doprnt@c& (0+255),w,b
 17696  000728  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 17697  00072A  0A80               	xorlw	128
 17698  00072C  5992               	subwfb	??__doprnt& (0+255),w,b
 17699  00072E  B0D8               	btfsc	status,0,c
 17700  000730  D007               	goto	l1155
 17701                           
 17702                           ; BSR set to: 0
 17703                           ;doprnt.c: 1382: width -= c;
 17704  000732  51A0               	movf	__doprnt@c& (0+255),w,b
 17705  000734  5F9E               	subwf	__doprnt@width& (0+255),f,b
 17706  000736  0E00               	movlw	0
 17707  000738  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 17708  00073A  0EFF               	movlw	255
 17709  00073C  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 17710  00073E  D005               	goto	l1156
 17711  000740                     l1155:
 17712  000740  FFFF               	dw	65535	; assembler added errata NOP
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;doprnt.c: 1383: else
 17716                           ;doprnt.c: 1384: width = 0;
 17717                           
 17718                           ; BSR set to: 0
 17719  000742  0E00               	movlw	0
 17720  000744  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 17721  000746  0E00               	movlw	0
 17722  000748  6F9E               	movwf	__doprnt@width& (0+255),b
 17723  00074A                     l1156:
 17724  00074A  FFFF               	dw	65535	; assembler added errata NOP
 17725                           
 17726                           ; BSR set to: 0
 17727                           ;doprnt.c: 1387: if(flag & 0x04) {
 17728                           
 17729                           ; BSR set to: 0
 17730  00074C  A59B               	btfss	__doprnt@flag& (0+255),2,b
 17731  00074E  D07F               	goto	l1157
 17732                           
 17733                           ; BSR set to: 0
 17734                           ;doprnt.c: 1392: if(flag & 0x03)
 17735  000750  C09B  F092         	movff	__doprnt@flag,??__doprnt
 17736  000754  0E03               	movlw	3
 17737  000756  1792               	andwf	??__doprnt& (0+255),f,b
 17738  000758  B4D8               	btfsc	status,2,c
 17739  00075A  D036               	goto	l1160
 17740                           
 17741                           ; BSR set to: 0
 17742                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 17743  00075C  EE20 F002          	lfsr	2,2
 17744  000760  518C               	movf	__doprnt@pb& (0+255),w,b
 17745  000762  26D9               	addwf	fsr2l,f,c
 17746  000764  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17747  000766  22DA               	addwfc	fsr2h,f,c
 17748  000768  50DE               	movf	postinc2,w,c
 17749  00076A  10DE               	iorwf	postinc2,w,c
 17750  00076C  B4D8               	btfsc	status,2,c
 17751  00076E  D016               	goto	l1159
 17752                           
 17753                           ; BSR set to: 0
 17754  000770  EE20 F002          	lfsr	2,2
 17755  000774  518C               	movf	__doprnt@pb& (0+255),w,b
 17756  000776  26D9               	addwf	fsr2l,f,c
 17757  000778  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17758  00077A  22DA               	addwfc	fsr2h,f,c
 17759  00077C  D801               	call	u5308
 17760  00077E  D024               	goto	l1160
 17761  000780                     u5308:
 17762  000780  FFFF               	dw	65535	; assembler added errata NOP
 17763  000782  0005               	push	
 17764  000784  6EFA               	movwf	pclath,c
 17765  000786  50DE               	movf	postinc2,w,c
 17766  000788  6EFD               	movwf	tosl,c
 17767  00078A  50DE               	movf	postinc2,w,c
 17768  00078C  6EFE               	movwf	tosh,c
 17769  00078E  50F8               	movf	tblptru,w,c
 17770  000790  6EFF               	movwf	tosu,c
 17771  000792  50FA               	movf	pclath,w,c
 17772  000794  0E2D               	movlw	45
 17773  000796  0012               	return		;indir
 17774  000798  FFFF               	dw	65535	; errata NOP
 17775  00079A  D016               	goto	l1160
 17776  00079C                     l1159:
 17777  00079C  FFFF               	dw	65535	; assembler added errata NOP
 17778  00079E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17779  0007A2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17780  0007A6  CFDE F092          	movff	postinc2,??__doprnt
 17781  0007AA  CFDD F093          	movff	postdec2,??__doprnt+1
 17782  0007AE  C092  FFD9         	movff	??__doprnt,fsr2l
 17783  0007B2  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17784  0007B6  0E2D               	movlw	45
 17785  0007B8  6EDF               	movwf	indf2,c
 17786  0007BA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17787  0007BE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17788  0007C2  2ADE               	incf	postinc2,f,c
 17789  0007C4  0E00               	movlw	0
 17790  0007C6  22DD               	addwfc	postdec2,f,c
 17791  0007C8                     l1160:
 17792  0007C8  FFFF               	dw	65535	; assembler added errata NOP
 17793                           
 17794                           ;doprnt.c: 1415: if(width)
 17795  0007CA  0100               	movlb	0	; () banked
 17796  0007CC  FFFF               	dw	65535	; assembler added errata NOP
 17797  0007CE  519E               	movf	__doprnt@width& (0+255),w,b
 17798  0007D0  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 17799  0007D2  B4D8               	btfsc	status,2,c
 17800  0007D4  D0BE               	goto	l1174
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 17804                           
 17805                           ; BSR set to: 0
 17806                           
 17807                           ;doprnt.c: 1416: do
 17808  0007D6  EE20 F002          	lfsr	2,2
 17809  0007DA  518C               	movf	__doprnt@pb& (0+255),w,b
 17810  0007DC  26D9               	addwf	fsr2l,f,c
 17811  0007DE  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17812  0007E0  22DA               	addwfc	fsr2h,f,c
 17813  0007E2  50DE               	movf	postinc2,w,c
 17814  0007E4  10DE               	iorwf	postinc2,w,c
 17815  0007E6  B4D8               	btfsc	status,2,c
 17816  0007E8  D016               	goto	l1163
 17817                           
 17818                           ; BSR set to: 0
 17819  0007EA  EE20 F002          	lfsr	2,2
 17820  0007EE  518C               	movf	__doprnt@pb& (0+255),w,b
 17821  0007F0  26D9               	addwf	fsr2l,f,c
 17822  0007F2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17823  0007F4  22DA               	addwfc	fsr2h,f,c
 17824  0007F6  D801               	call	u5338
 17825  0007F8  D024               	goto	l1164
 17826  0007FA                     u5338:
 17827  0007FA  FFFF               	dw	65535	; assembler added errata NOP
 17828  0007FC  0005               	push	
 17829  0007FE  6EFA               	movwf	pclath,c
 17830  000800  50DE               	movf	postinc2,w,c
 17831  000802  6EFD               	movwf	tosl,c
 17832  000804  50DE               	movf	postinc2,w,c
 17833  000806  6EFE               	movwf	tosh,c
 17834  000808  50F8               	movf	tblptru,w,c
 17835  00080A  6EFF               	movwf	tosu,c
 17836  00080C  50FA               	movf	pclath,w,c
 17837  00080E  0E30               	movlw	48
 17838  000810  0012               	return		;indir
 17839  000812  FFFF               	dw	65535	; errata NOP
 17840  000814  D016               	goto	l1164
 17841  000816                     l1163:
 17842  000816  FFFF               	dw	65535	; assembler added errata NOP
 17843  000818  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17844  00081C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17845  000820  CFDE F092          	movff	postinc2,??__doprnt
 17846  000824  CFDD F093          	movff	postdec2,??__doprnt+1
 17847  000828  C092  FFD9         	movff	??__doprnt,fsr2l
 17848  00082C  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17849  000830  0E30               	movlw	48
 17850  000832  6EDF               	movwf	indf2,c
 17851  000834  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17852  000838  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17853  00083C  2ADE               	incf	postinc2,f,c
 17854  00083E  0E00               	movlw	0
 17855  000840  22DD               	addwfc	postdec2,f,c
 17856  000842                     l1164:
 17857  000842  FFFF               	dw	65535	; assembler added errata NOP
 17858                           
 17859                           ;doprnt.c: 1418: while(--width);
 17860  000844  0100               	movlb	0	; () banked
 17861  000846  079E               	decf	__doprnt@width& (0+255),f,b
 17862  000848  A0D8               	btfss	status,0,c
 17863  00084A  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 17864  00084C  D7BF               	goto	L49
 17865  00084E                     l1157:
 17866  00084E  FFFF               	dw	65535	; assembler added errata NOP
 17867                           
 17868                           ; BSR set to: 0
 17869                           ;doprnt.c: 1422: {
 17870                           ;doprnt.c: 1424: if(width
 17871                           ;doprnt.c: 1428: )
 17872                           
 17873                           ; BSR set to: 0
 17874  000850  519E               	movf	__doprnt@width& (0+255),w,b
 17875  000852  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 17876  000854  B4D8               	btfsc	status,2,c
 17877  000856  D040               	goto	u5380
 17878  000858                     u5350:
 17879  000858  FFFF               	dw	65535	; assembler added errata NOP
 17880                           
 17881                           ; BSR set to: 0
 17882                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 17883                           
 17884                           ; BSR set to: 0
 17885                           
 17886                           ;doprnt.c: 1429: do
 17887  00085A  EE20 F002          	lfsr	2,2
 17888  00085E  518C               	movf	__doprnt@pb& (0+255),w,b
 17889  000860  26D9               	addwf	fsr2l,f,c
 17890  000862  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17891  000864  22DA               	addwfc	fsr2h,f,c
 17892  000866  50DE               	movf	postinc2,w,c
 17893  000868  10DE               	iorwf	postinc2,w,c
 17894  00086A  B4D8               	btfsc	status,2,c
 17895  00086C  D016               	goto	l1169
 17896                           
 17897                           ; BSR set to: 0
 17898  00086E  EE20 F002          	lfsr	2,2
 17899  000872  518C               	movf	__doprnt@pb& (0+255),w,b
 17900  000874  26D9               	addwf	fsr2l,f,c
 17901  000876  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17902  000878  22DA               	addwfc	fsr2h,f,c
 17903  00087A  D801               	call	u5378
 17904  00087C  D024               	goto	l1170
 17905  00087E                     u5378:
 17906  00087E  FFFF               	dw	65535	; assembler added errata NOP
 17907  000880  0005               	push	
 17908  000882  6EFA               	movwf	pclath,c
 17909  000884  50DE               	movf	postinc2,w,c
 17910  000886  6EFD               	movwf	tosl,c
 17911  000888  50DE               	movf	postinc2,w,c
 17912  00088A  6EFE               	movwf	tosh,c
 17913  00088C  50F8               	movf	tblptru,w,c
 17914  00088E  6EFF               	movwf	tosu,c
 17915  000890  50FA               	movf	pclath,w,c
 17916  000892  0E20               	movlw	32
 17917  000894  0012               	return		;indir
 17918  000896  FFFF               	dw	65535	; errata NOP
 17919  000898  D016               	goto	l1170
 17920  00089A                     l1169:
 17921  00089A  FFFF               	dw	65535	; assembler added errata NOP
 17922  00089C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17923  0008A0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17924  0008A4  CFDE F092          	movff	postinc2,??__doprnt
 17925  0008A8  CFDD F093          	movff	postdec2,??__doprnt+1
 17926  0008AC  C092  FFD9         	movff	??__doprnt,fsr2l
 17927  0008B0  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17928  0008B4  0E20               	movlw	32
 17929  0008B6  6EDF               	movwf	indf2,c
 17930  0008B8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17931  0008BC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17932  0008C0  2ADE               	incf	postinc2,f,c
 17933  0008C2  0E00               	movlw	0
 17934  0008C4  22DD               	addwfc	postdec2,f,c
 17935  0008C6                     l1170:
 17936  0008C6  FFFF               	dw	65535	; assembler added errata NOP
 17937                           
 17938                           ;doprnt.c: 1431: while(--width);
 17939  0008C8  0100               	movlb	0	; () banked
 17940  0008CA  079E               	decf	__doprnt@width& (0+255),f,b
 17941  0008CC  A0D8               	btfss	status,0,c
 17942  0008CE  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 17943  0008D0  519E               	movf	__doprnt@width& (0+255),w,b
 17944  0008D2  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 17945  0008D4  A4D8               	btfss	status,2,c
 17946  0008D6  D7C0               	goto	u5350
 17947  0008D8                     u5380:
 17948  0008D8  FFFF               	dw	65535	; assembler added errata NOP
 17949                           
 17950                           ; BSR set to: 0
 17951                           ;doprnt.c: 1438: if(flag & 0x03)
 17952                           
 17953                           ; BSR set to: 0
 17954                           
 17955                           ; BSR set to: 0
 17956  0008DA  C09B  F092         	movff	__doprnt@flag,??__doprnt
 17957  0008DE  0E03               	movlw	3
 17958  0008E0  1792               	andwf	??__doprnt& (0+255),f,b
 17959  0008E2  B4D8               	btfsc	status,2,c
 17960  0008E4  D036               	goto	l1174
 17961                           
 17962                           ; BSR set to: 0
 17963                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 17964  0008E6  EE20 F002          	lfsr	2,2
 17965  0008EA  518C               	movf	__doprnt@pb& (0+255),w,b
 17966  0008EC  26D9               	addwf	fsr2l,f,c
 17967  0008EE  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17968  0008F0  22DA               	addwfc	fsr2h,f,c
 17969  0008F2  50DE               	movf	postinc2,w,c
 17970  0008F4  10DE               	iorwf	postinc2,w,c
 17971  0008F6  B4D8               	btfsc	status,2,c
 17972  0008F8  D016               	goto	l1173
 17973                           
 17974                           ; BSR set to: 0
 17975  0008FA  EE20 F002          	lfsr	2,2
 17976  0008FE  518C               	movf	__doprnt@pb& (0+255),w,b
 17977  000900  26D9               	addwf	fsr2l,f,c
 17978  000902  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17979  000904  22DA               	addwfc	fsr2h,f,c
 17980  000906  D801               	call	u5418
 17981  000908  D024               	goto	l1174
 17982  00090A                     u5418:
 17983  00090A  FFFF               	dw	65535	; assembler added errata NOP
 17984  00090C  0005               	push	
 17985  00090E  6EFA               	movwf	pclath,c
 17986  000910  50DE               	movf	postinc2,w,c
 17987  000912  6EFD               	movwf	tosl,c
 17988  000914  50DE               	movf	postinc2,w,c
 17989  000916  6EFE               	movwf	tosh,c
 17990  000918  50F8               	movf	tblptru,w,c
 17991  00091A  6EFF               	movwf	tosu,c
 17992  00091C  50FA               	movf	pclath,w,c
 17993  00091E  0E2D               	movlw	45
 17994  000920  0012               	return		;indir
 17995  000922  FFFF               	dw	65535	; errata NOP
 17996  000924  D016               	goto	l1174
 17997  000926                     l1173:
 17998  000926  FFFF               	dw	65535	; assembler added errata NOP
 17999  000928  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 18000  00092C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 18001  000930  CFDE F092          	movff	postinc2,??__doprnt
 18002  000934  CFDD F093          	movff	postdec2,??__doprnt+1
 18003  000938  C092  FFD9         	movff	??__doprnt,fsr2l
 18004  00093C  C093  FFDA         	movff	??__doprnt+1,fsr2h
 18005  000940  0E2D               	movlw	45
 18006  000942  6EDF               	movwf	indf2,c
 18007  000944  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 18008  000948  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 18009  00094C  2ADE               	incf	postinc2,f,c
 18010  00094E  0E00               	movlw	0
 18011  000950  22DD               	addwfc	postdec2,f,c
 18012  000952                     l1174:
 18013  000952  FFFF               	dw	65535	; assembler added errata NOP
 18014                           
 18015                           ;doprnt.c: 1469: }
 18016                           ;doprnt.c: 1472: prec = c;
 18017  000954  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 18018                           
 18019                           ;doprnt.c: 1474: while(prec--) {
 18020  000958  D05D               	goto	l1178
 18021  00095A  FFFF               	dw	65535	; assembler added errata NOP
 18022                           
 18023                           ;doprnt.c: 1478: {
 18024                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18025  00095C  0100               	movlb	0	; () banked
 18026  00095E  5196               	movf	__doprnt@prec& (0+255),w,b
 18027  000960  0D02               	mullw	2
 18028  000962  0EA1               	movlw	low _dpowers
 18029  000964  24F3               	addwf	prodl,w,c
 18030  000966  6EF6               	movwf	tblptrl,c
 18031  000968  0E7A               	movlw	high _dpowers
 18032  00096A  20F4               	addwfc	prodh,w,c
 18033  00096C  6EF7               	movwf	tblptrh,c
 18034  00096E                     	if	0	;There are less than 3 active tblptr bytes
 18035  00096E                     	endif
 18036  00096E  0009               	tblrd		*+
 18037  000970  FFFF               	dw	65535	; errata NOP
 18038  000972  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18039  000976  000A               	tblrd		*-
 18040  000978  FFFF               	dw	65535	; errata NOP
 18041  00097A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18042  00097E  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 18043  000982  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 18044  000986  ECCF  F01F         	call	___lwdiv
 18045  00098A  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18046  00098E  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18047  000992  0E00               	movlw	0
 18048  000994  0100               	movlb	0	; () banked
 18049  000996  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18050  000998  0E0A               	movlw	10
 18051  00099A  6F89               	movwf	___lwmod@divisor& (0+255),b
 18052  00099C  EC9C  F039         	call	___lwmod	;wreg free
 18053  0009A0  0100               	movlb	0	; () banked
 18054  0009A2  5187               	movf	?___lwmod& (0+255),w,b
 18055  0009A4  0F30               	addlw	48
 18056  0009A6  6FA0               	movwf	__doprnt@c& (0+255),b
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;doprnt.c: 1523: }
 18060                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 18061  0009A8  EE20 F002          	lfsr	2,2
 18062  0009AC  518C               	movf	__doprnt@pb& (0+255),w,b
 18063  0009AE  26D9               	addwf	fsr2l,f,c
 18064  0009B0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 18065  0009B2  22DA               	addwfc	fsr2h,f,c
 18066  0009B4  50DE               	movf	postinc2,w,c
 18067  0009B6  10DE               	iorwf	postinc2,w,c
 18068  0009B8  B4D8               	btfsc	status,2,c
 18069  0009BA  D016               	goto	l1177
 18070                           
 18071                           ; BSR set to: 0
 18072  0009BC  EE20 F002          	lfsr	2,2
 18073  0009C0  518C               	movf	__doprnt@pb& (0+255),w,b
 18074  0009C2  26D9               	addwf	fsr2l,f,c
 18075  0009C4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 18076  0009C6  22DA               	addwfc	fsr2h,f,c
 18077  0009C8  D801               	call	u5438
 18078  0009CA  D024               	goto	l1178
 18079  0009CC                     u5438:
 18080  0009CC  FFFF               	dw	65535	; assembler added errata NOP
 18081  0009CE  0005               	push	
 18082  0009D0  6EFA               	movwf	pclath,c
 18083  0009D2  50DE               	movf	postinc2,w,c
 18084  0009D4  6EFD               	movwf	tosl,c
 18085  0009D6  50DE               	movf	postinc2,w,c
 18086  0009D8  6EFE               	movwf	tosh,c
 18087  0009DA  50F8               	movf	tblptru,w,c
 18088  0009DC  6EFF               	movwf	tosu,c
 18089  0009DE  50FA               	movf	pclath,w,c
 18090  0009E0  51A0               	movf	__doprnt@c& (0+255),w,b
 18091  0009E2  0012               	return		;indir
 18092  0009E4  FFFF               	dw	65535	; errata NOP
 18093  0009E6  D016               	goto	l1178
 18094  0009E8                     l1177:
 18095  0009E8  FFFF               	dw	65535	; assembler added errata NOP
 18096  0009EA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 18097  0009EE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 18098  0009F2  CFDE F092          	movff	postinc2,??__doprnt
 18099  0009F6  CFDD F093          	movff	postdec2,??__doprnt+1
 18100  0009FA  C092  FFD9         	movff	??__doprnt,fsr2l
 18101  0009FE  C093  FFDA         	movff	??__doprnt+1,fsr2h
 18102  000A02  C0A0  FFDF         	movff	__doprnt@c,indf2
 18103  000A06  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 18104  000A0A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 18105  000A0E  2ADE               	incf	postinc2,f,c
 18106  000A10  0E00               	movlw	0
 18107  000A12  22DD               	addwfc	postdec2,f,c
 18108  000A14                     l1178:
 18109  000A14  FFFF               	dw	65535	; assembler added errata NOP
 18110  000A16  0100               	movlb	0	; () banked
 18111  000A18  0796               	decf	__doprnt@prec& (0+255),f,b
 18112  000A1A  2996               	incf	__doprnt@prec& (0+255),w,b
 18113  000A1C  A4D8               	btfss	status,2,c
 18114  000A1E  D79D               	goto	l1176
 18115  000A20                     u5440:
 18116  000A20  FFFF               	dw	65535	; assembler added errata NOP
 18117                           
 18118                           ; BSR set to: 0
 18119                           
 18120                           ; BSR set to: 0
 18121  000A22  0100               	movlb	0	; () banked
 18122  000A24  518E               	movf	__doprnt@f& (0+255),w,b
 18123  000A26  6F92               	movwf	??__doprnt& (0+255),b
 18124  000A28  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 18125  000A2A  6F93               	movwf	(??__doprnt+1)& (0+255),b
 18126  000A2C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 18127  000A2E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 18128  000A30  C092  FFF6         	movff	??__doprnt,tblptrl
 18129  000A34  C093  FFF7         	movff	??__doprnt+1,tblptrh
 18130  000A38  6AF8               	clrf	tblptru,c
 18131  000A3A  0E05               	movlw	(high __ramtop+-1)
 18132  000A3C  64F7               	cpfsgt	tblptrh,c
 18133  000A3E  D004               	bra	u5457
 18134  000A40  0008               	tblrd		*
 18135  000A42  FFFF               	dw	65535	; errata NOP
 18136  000A44  50F5               	movf	tablat,w,c
 18137  000A46  D005               	bra	u5450
 18138  000A48                     u5457:
 18139  000A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 18140  000A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 18141  000A50  50EF               	movf	indf0,w,c
 18142  000A52                     u5450:
 18143  000A52  0100               	movlb	0	; () banked
 18144  000A54  6FA0               	movwf	__doprnt@c& (0+255),b
 18145  000A56  51A0               	movf	__doprnt@c& (0+255),w,b
 18146  000A58  A4D8               	btfss	status,2,c
 18147  000A5A  D40B               	goto	l1111
 18148  000A5C                     u5460:
 18149  000A5C  FFFF               	dw	65535	; assembler added errata NOP
 18150                           
 18151                           ;doprnt.c: 1540: return 0;
 18152                           
 18153                           ; BSR set to: 0
 18154                           
 18155                           ;doprnt.c: 1525: }
 18156                           ;doprnt.c: 1533: }
 18157                           ;doprnt.c: 1535: alldone:
 18158                           
 18159                           ; BSR set to: 0
 18160  000A5E  0E00               	movlw	0
 18161  000A60  0100               	movlb	0	; () banked
 18162  000A62  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 18163  000A64  0E00               	movlw	0
 18164  000A66  6F8C               	movwf	?__doprnt& (0+255),b
 18165                           
 18166                           ; BSR set to: 0
 18167                           
 18168                           ; BSR set to: 0
 18169  000A68  0012               	return		;funcret
 18170  000A6A  FFFF               	dw	65535	; errata NOP
 18171  000A6C                     __end_of__doprnt:
 18172                           	opt stack 0
 18173                           tosu	equ	0xFFF
 18174                           tosh	equ	0xFFE
 18175                           tosl	equ	0xFFD
 18176                           pclath	equ	0xFFA
 18177                           tblptru	equ	0xFF8
 18178                           tblptrh	equ	0xFF7
 18179                           tblptrl	equ	0xFF6
 18180                           tablat	equ	0xFF5
 18181                           prodh	equ	0xFF4
 18182                           prodl	equ	0xFF3
 18183                           intcon	equ	0xFF2
 18184                           intcon2	equ	0xFF1
 18185                           intcon3	equ	0xFF0
 18186                           indf0	equ	0xFEF
 18187                           postinc0	equ	0xFEE
 18188                           fsr0h	equ	0xFEA
 18189                           fsr0l	equ	0xFE9
 18190                           wreg	equ	0xFE8
 18191                           postdec1	equ	0xFE5
 18192                           fsr1l	equ	0xFE1
 18193                           indf2	equ	0xFDF
 18194                           postinc2	equ	0xFDE
 18195                           postdec2	equ	0xFDD
 18196                           fsr2h	equ	0xFDA
 18197                           fsr2l	equ	0xFD9
 18198                           status	equ	0xFD8
 18199                           
 18200 ;; *************** function _putch *****************
 18201 ;; Defined at:
 18202 ;;		line 16 in file "serial.h"
 18203 ;; Parameters:    Size  Location     Type
 18204 ;;  c               1    wreg     unsigned char 
 18205 ;; Auto vars:     Size  Location     Type
 18206 ;;  c               1    0[BANK0 ] unsigned char 
 18207 ;; Return value:  Size  Location     Type
 18208 ;;                  1    wreg      void 
 18209 ;; Registers used:
 18210 ;;		wreg
 18211 ;; Tracked objects:
 18212 ;;		On entry : 0/0
 18213 ;;		On exit  : 0/0
 18214 ;;		Unchanged: 0/0
 18215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18216 ;;      Params:         0       0       0       0       0       0       0
 18217 ;;      Locals:         0       1       0       0       0       0       0
 18218 ;;      Temps:          0       0       0       0       0       0       0
 18219 ;;      Totals:         0       1       0       0       0       0       0
 18220 ;;Total ram usage:        1 bytes
 18221 ;; Hardware stack levels used:    1
 18222 ;; Hardware stack levels required when called:    6
 18223 ;; This function calls:
 18224 ;;		Nothing
 18225 ;; This function is called by:
 18226 ;;		_printf
 18227 ;;		__doprnt
 18228 ;; This function uses a non-reentrant model
 18229 ;;
 18230                           
 18231                           	psect	text54
 18232  006BC4                     __ptext54:
 18233                           	opt stack 0
 18234  006BC4                     _putch:
 18235                           	opt stack 0
 18236  006BC4  FFFF               	dw	65535	; assembler added errata NOP
 18237                           
 18238                           ; BSR set to: 0
 18239                           ;incstack = 0
 18240                           ;putch@c stored from wreg
 18241  006BC6  0100               	movlb	0	; () banked
 18242  006BC8  6F80               	movwf	putch@c& (0+255),b
 18243  006BCA  FFFF               	dw	65535	; assembler added errata NOP
 18244                           
 18245                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 18246  006BCC  A2AC               	btfss	4012,1,c	;volatile
 18247  006BCE  D7FD               	goto	l5003
 18248                           
 18249                           ;serial.h: 18: TXREG = c;
 18250  006BD0  C080  FFAD         	movff	putch@c,4013	;volatile
 18251  006BD4  0012               	return		;funcret
 18252  006BD6  FFFF               	dw	65535	; errata NOP
 18253  006BD8                     __end_of_putch:
 18254                           	opt stack 0
 18255                           tosu	equ	0xFFF
 18256                           tosh	equ	0xFFE
 18257                           tosl	equ	0xFFD
 18258                           pclath	equ	0xFFA
 18259                           tblptru	equ	0xFF8
 18260                           tblptrh	equ	0xFF7
 18261                           tblptrl	equ	0xFF6
 18262                           tablat	equ	0xFF5
 18263                           prodh	equ	0xFF4
 18264                           prodl	equ	0xFF3
 18265                           intcon	equ	0xFF2
 18266                           intcon2	equ	0xFF1
 18267                           intcon3	equ	0xFF0
 18268                           indf0	equ	0xFEF
 18269                           postinc0	equ	0xFEE
 18270                           fsr0h	equ	0xFEA
 18271                           fsr0l	equ	0xFE9
 18272                           wreg	equ	0xFE8
 18273                           postdec1	equ	0xFE5
 18274                           fsr1l	equ	0xFE1
 18275                           indf2	equ	0xFDF
 18276                           postinc2	equ	0xFDE
 18277                           postdec2	equ	0xFDD
 18278                           fsr2h	equ	0xFDA
 18279                           fsr2l	equ	0xFD9
 18280                           status	equ	0xFD8
 18281                           
 18282 ;; *************** function _isdigit *****************
 18283 ;; Defined at:
 18284 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 18285 ;; Parameters:    Size  Location     Type
 18286 ;;  c               1    wreg     unsigned char 
 18287 ;; Auto vars:     Size  Location     Type
 18288 ;;  c               1    2[BANK0 ] unsigned char 
 18289 ;; Return value:  Size  Location     Type
 18290 ;;		None               void
 18291 ;; Registers used:
 18292 ;;		wreg, status,2, status,0
 18293 ;; Tracked objects:
 18294 ;;		On entry : 0/0
 18295 ;;		On exit  : 0/0
 18296 ;;		Unchanged: 0/0
 18297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18298 ;;      Params:         0       0       0       0       0       0       0
 18299 ;;      Locals:         0       2       0       0       0       0       0
 18300 ;;      Temps:          0       1       0       0       0       0       0
 18301 ;;      Totals:         0       3       0       0       0       0       0
 18302 ;;Total ram usage:        3 bytes
 18303 ;; Hardware stack levels used:    1
 18304 ;; Hardware stack levels required when called:    6
 18305 ;; This function calls:
 18306 ;;		Nothing
 18307 ;; This function is called by:
 18308 ;;		__doprnt
 18309 ;;		_atoi
 18310 ;; This function uses a non-reentrant model
 18311 ;;
 18312                           
 18313                           	psect	text55
 18314  006CCA                     __ptext55:
 18315                           	opt stack 0
 18316  006CCA                     _isdigit:
 18317                           	opt stack 0
 18318  006CCA  FFFF               	dw	65535	; assembler added errata NOP
 18319                           
 18320                           ;incstack = 0
 18321                           ;isdigit@c stored from wreg
 18322  006CCC  0100               	movlb	0	; () banked
 18323  006CCE  6F82               	movwf	isdigit@c& (0+255),b
 18324  006CD0  0E00               	movlw	0
 18325  006CD2  0100               	movlb	0	; () banked
 18326  006CD4  6F81               	movwf	_isdigit$2062& (0+255),b
 18327                           
 18328                           ; BSR set to: 0
 18329  006CD6  0E3A               	movlw	58
 18330  006CD8  6182               	cpfslt	isdigit@c& (0+255),b
 18331  006CDA  D005               	goto	l1526
 18332                           
 18333                           ; BSR set to: 0
 18334  006CDC  0E2F               	movlw	47
 18335  006CDE  6582               	cpfsgt	isdigit@c& (0+255),b
 18336  006CE0  D002               	goto	l1526
 18337                           
 18338                           ; BSR set to: 0
 18339  006CE2  0E01               	movlw	1
 18340  006CE4  6F81               	movwf	_isdigit$2062& (0+255),b
 18341  006CE6                     l1526:
 18342  006CE6  FFFF               	dw	65535	; assembler added errata NOP
 18343                           
 18344                           ; BSR set to: 0
 18345                           
 18346                           ; BSR set to: 0
 18347  006CE8  C081  F080         	movff	_isdigit$2062,??_isdigit
 18348  006CEC  3180               	rrcf	??_isdigit& (0+255),w,b
 18349                           
 18350                           ; BSR set to: 0
 18351                           
 18352                           ; BSR set to: 0
 18353  006CEE  0012               	return		;funcret
 18354  006CF0  FFFF               	dw	65535	; errata NOP
 18355  006CF2                     __end_of_isdigit:
 18356                           	opt stack 0
 18357                           tosu	equ	0xFFF
 18358                           tosh	equ	0xFFE
 18359                           tosl	equ	0xFFD
 18360                           pclath	equ	0xFFA
 18361                           tblptru	equ	0xFF8
 18362                           tblptrh	equ	0xFF7
 18363                           tblptrl	equ	0xFF6
 18364                           tablat	equ	0xFF5
 18365                           prodh	equ	0xFF4
 18366                           prodl	equ	0xFF3
 18367                           intcon	equ	0xFF2
 18368                           intcon2	equ	0xFF1
 18369                           intcon3	equ	0xFF0
 18370                           indf0	equ	0xFEF
 18371                           postinc0	equ	0xFEE
 18372                           fsr0h	equ	0xFEA
 18373                           fsr0l	equ	0xFE9
 18374                           wreg	equ	0xFE8
 18375                           postdec1	equ	0xFE5
 18376                           fsr1l	equ	0xFE1
 18377                           indf2	equ	0xFDF
 18378                           postinc2	equ	0xFDE
 18379                           postdec2	equ	0xFDD
 18380                           fsr2h	equ	0xFDA
 18381                           fsr2l	equ	0xFD9
 18382                           status	equ	0xFD8
 18383                           
 18384 ;; *************** function ___wmul *****************
 18385 ;; Defined at:
 18386 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18387 ;; Parameters:    Size  Location     Type
 18388 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18389 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18390 ;; Auto vars:     Size  Location     Type
 18391 ;;  product         2    4[BANK0 ] unsigned int 
 18392 ;; Return value:  Size  Location     Type
 18393 ;;                  2    0[BANK0 ] unsigned int 
 18394 ;; Registers used:
 18395 ;;		wreg, status,2, status,0, prodl, prodh
 18396 ;; Tracked objects:
 18397 ;;		On entry : 0/0
 18398 ;;		On exit  : 0/0
 18399 ;;		Unchanged: 0/0
 18400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18401 ;;      Params:         0       4       0       0       0       0       0
 18402 ;;      Locals:         0       2       0       0       0       0       0
 18403 ;;      Temps:          0       0       0       0       0       0       0
 18404 ;;      Totals:         0       6       0       0       0       0       0
 18405 ;;Total ram usage:        6 bytes
 18406 ;; Hardware stack levels used:    1
 18407 ;; Hardware stack levels required when called:    6
 18408 ;; This function calls:
 18409 ;;		Nothing
 18410 ;; This function is called by:
 18411 ;;		__doprnt
 18412 ;;		_atoi
 18413 ;; This function uses a non-reentrant model
 18414 ;;
 18415                           
 18416                           	psect	text56
 18417  006D1E                     __ptext56:
 18418                           	opt stack 0
 18419  006D1E                     ___wmul:
 18420                           	opt stack 0
 18421  006D1E  FFFF               	dw	65535	; assembler added errata NOP
 18422                           
 18423                           ; BSR set to: 0
 18424                           ;incstack = 0
 18425  006D20  0100               	movlb	0	; () banked
 18426  006D22  5180               	movf	___wmul@multiplier& (0+255),w,b
 18427  006D24  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18428  006D26  CFF3 F084          	movff	prodl,___wmul@product
 18429  006D2A  CFF4 F085          	movff	prodh,___wmul@product+1
 18430  006D2E  5180               	movf	___wmul@multiplier& (0+255),w,b
 18431  006D30  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18432  006D32  50F3               	movf	prodl,w,c
 18433  006D34  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18434  006D36  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18435  006D38  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18436  006D3A  50F3               	movf	prodl,w,c
 18437  006D3C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18438                           
 18439                           ; BSR set to: 0
 18440  006D3E  C084  F080         	movff	___wmul@product,?___wmul
 18441  006D42  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18442                           
 18443                           ; BSR set to: 0
 18444                           
 18445                           ; BSR set to: 0
 18446  006D46  0012               	return		;funcret
 18447  006D48  FFFF               	dw	65535	; errata NOP
 18448  006D4A                     __end_of___wmul:
 18449                           	opt stack 0
 18450                           tosu	equ	0xFFF
 18451                           tosh	equ	0xFFE
 18452                           tosl	equ	0xFFD
 18453                           pclath	equ	0xFFA
 18454                           tblptru	equ	0xFF8
 18455                           tblptrh	equ	0xFF7
 18456                           tblptrl	equ	0xFF6
 18457                           tablat	equ	0xFF5
 18458                           prodh	equ	0xFF4
 18459                           prodl	equ	0xFF3
 18460                           intcon	equ	0xFF2
 18461                           intcon2	equ	0xFF1
 18462                           intcon3	equ	0xFF0
 18463                           indf0	equ	0xFEF
 18464                           postinc0	equ	0xFEE
 18465                           fsr0h	equ	0xFEA
 18466                           fsr0l	equ	0xFE9
 18467                           wreg	equ	0xFE8
 18468                           postdec1	equ	0xFE5
 18469                           fsr1l	equ	0xFE1
 18470                           indf2	equ	0xFDF
 18471                           postinc2	equ	0xFDE
 18472                           postdec2	equ	0xFDD
 18473                           fsr2h	equ	0xFDA
 18474                           fsr2l	equ	0xFD9
 18475                           status	equ	0xFD8
 18476                           
 18477 ;; *************** function ___lwmod *****************
 18478 ;; Defined at:
 18479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 18480 ;; Parameters:    Size  Location     Type
 18481 ;;  dividend        2    7[BANK0 ] unsigned int 
 18482 ;;  divisor         2    9[BANK0 ] unsigned int 
 18483 ;; Auto vars:     Size  Location     Type
 18484 ;;  counter         1   11[BANK0 ] unsigned char 
 18485 ;; Return value:  Size  Location     Type
 18486 ;;                  2    7[BANK0 ] unsigned int 
 18487 ;; Registers used:
 18488 ;;		wreg, status,2, status,0
 18489 ;; Tracked objects:
 18490 ;;		On entry : 0/0
 18491 ;;		On exit  : 0/0
 18492 ;;		Unchanged: 0/0
 18493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18494 ;;      Params:         0       4       0       0       0       0       0
 18495 ;;      Locals:         0       1       0       0       0       0       0
 18496 ;;      Temps:          0       0       0       0       0       0       0
 18497 ;;      Totals:         0       5       0       0       0       0       0
 18498 ;;Total ram usage:        5 bytes
 18499 ;; Hardware stack levels used:    1
 18500 ;; Hardware stack levels required when called:    6
 18501 ;; This function calls:
 18502 ;;		Nothing
 18503 ;; This function is called by:
 18504 ;;		__doprnt
 18505 ;; This function uses a non-reentrant model
 18506 ;;
 18507                           
 18508                           	psect	text57
 18509  007338                     __ptext57:
 18510                           	opt stack 0
 18511  007338                     ___lwmod:
 18512                           	opt stack 0
 18513  007338  FFFF               	dw	65535	; assembler added errata NOP
 18514                           
 18515                           ; BSR set to: 0
 18516                           ;incstack = 0
 18517  00733A  0100               	movlb	0	; () banked
 18518  00733C  5189               	movf	___lwmod@divisor& (0+255),w,b
 18519  00733E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18520  007340  B4D8               	btfsc	status,2,c
 18521  007342  D01C               	goto	l1620
 18522                           
 18523                           ; BSR set to: 0
 18524  007344  0E01               	movlw	1
 18525  007346  6F8B               	movwf	___lwmod@counter& (0+255),b
 18526  007348  D005               	goto	l1615
 18527  00734A  FFFF               	dw	65535	; assembler added errata NOP
 18528                           
 18529                           ; BSR set to: 0
 18530                           
 18531                           ; BSR set to: 0
 18532  00734C  90D8               	bcf	status,0,c
 18533  00734E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18534  007350  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18535  007352  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18536  007354                     l1615:
 18537  007354  FFFF               	dw	65535	; assembler added errata NOP
 18538                           
 18539                           ; BSR set to: 0
 18540                           
 18541                           ; BSR set to: 0
 18542  007356  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18543  007358  D7F8               	goto	l1616
 18544  00735A                     u4710:
 18545  00735A  FFFF               	dw	65535	; assembler added errata NOP
 18546                           
 18547                           ; BSR set to: 0
 18548                           
 18549                           ; BSR set to: 0
 18550                           
 18551                           ; BSR set to: 0
 18552  00735C  5189               	movf	___lwmod@divisor& (0+255),w,b
 18553  00735E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18554  007360  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18555  007362  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18556  007364  A0D8               	btfss	status,0,c
 18557  007366  D004               	goto	l1619
 18558                           
 18559                           ; BSR set to: 0
 18560  007368  5189               	movf	___lwmod@divisor& (0+255),w,b
 18561  00736A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18562  00736C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18563  00736E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18564  007370                     l1619:
 18565  007370  FFFF               	dw	65535	; assembler added errata NOP
 18566                           
 18567                           ; BSR set to: 0
 18568                           
 18569                           ; BSR set to: 0
 18570  007372  90D8               	bcf	status,0,c
 18571  007374  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18572  007376  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18573                           
 18574                           ; BSR set to: 0
 18575  007378  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18576  00737A  D7EF               	goto	u4710
 18577  00737C                     l1620:
 18578  00737C  FFFF               	dw	65535	; assembler added errata NOP
 18579                           
 18580                           ; BSR set to: 0
 18581                           
 18582                           ; BSR set to: 0
 18583  00737E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18584  007382  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18585                           
 18586                           ; BSR set to: 0
 18587  007386  0012               	return		;funcret
 18588  007388  FFFF               	dw	65535	; errata NOP
 18589  00738A                     __end_of___lwmod:
 18590                           	opt stack 0
 18591                           tosu	equ	0xFFF
 18592                           tosh	equ	0xFFE
 18593                           tosl	equ	0xFFD
 18594                           pclath	equ	0xFFA
 18595                           tblptru	equ	0xFF8
 18596                           tblptrh	equ	0xFF7
 18597                           tblptrl	equ	0xFF6
 18598                           tablat	equ	0xFF5
 18599                           prodh	equ	0xFF4
 18600                           prodl	equ	0xFF3
 18601                           intcon	equ	0xFF2
 18602                           intcon2	equ	0xFF1
 18603                           intcon3	equ	0xFF0
 18604                           indf0	equ	0xFEF
 18605                           postinc0	equ	0xFEE
 18606                           fsr0h	equ	0xFEA
 18607                           fsr0l	equ	0xFE9
 18608                           wreg	equ	0xFE8
 18609                           postdec1	equ	0xFE5
 18610                           fsr1l	equ	0xFE1
 18611                           indf2	equ	0xFDF
 18612                           postinc2	equ	0xFDE
 18613                           postdec2	equ	0xFDD
 18614                           fsr2h	equ	0xFDA
 18615                           fsr2l	equ	0xFD9
 18616                           status	equ	0xFD8
 18617                           
 18618 ;; *************** function ___lwdiv *****************
 18619 ;; Defined at:
 18620 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 18621 ;; Parameters:    Size  Location     Type
 18622 ;;  dividend        2    0[BANK0 ] unsigned int 
 18623 ;;  divisor         2    2[BANK0 ] unsigned int 
 18624 ;; Auto vars:     Size  Location     Type
 18625 ;;  quotient        2    4[BANK0 ] unsigned int 
 18626 ;;  counter         1    6[BANK0 ] unsigned char 
 18627 ;; Return value:  Size  Location     Type
 18628 ;;                  2    0[BANK0 ] unsigned int 
 18629 ;; Registers used:
 18630 ;;		wreg, status,2, status,0
 18631 ;; Tracked objects:
 18632 ;;		On entry : 0/0
 18633 ;;		On exit  : 0/0
 18634 ;;		Unchanged: 0/0
 18635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18636 ;;      Params:         0       4       0       0       0       0       0
 18637 ;;      Locals:         0       3       0       0       0       0       0
 18638 ;;      Temps:          0       0       0       0       0       0       0
 18639 ;;      Totals:         0       7       0       0       0       0       0
 18640 ;;Total ram usage:        7 bytes
 18641 ;; Hardware stack levels used:    1
 18642 ;; Hardware stack levels required when called:    6
 18643 ;; This function calls:
 18644 ;;		Nothing
 18645 ;; This function is called by:
 18646 ;;		__doprnt
 18647 ;; This function uses a non-reentrant model
 18648 ;;
 18649                           
 18650                           	psect	text58
 18651  003F9E                     __ptext58:
 18652                           	opt stack 0
 18653  003F9E                     ___lwdiv:
 18654                           	opt stack 0
 18655  003F9E  FFFF               	dw	65535	; assembler added errata NOP
 18656                           
 18657                           ; BSR set to: 0
 18658                           ;incstack = 0
 18659  003FA0  0E00               	movlw	0
 18660  003FA2  0100               	movlb	0	; () banked
 18661  003FA4  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18662  003FA6  0E00               	movlw	0
 18663  003FA8  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18664                           
 18665                           ; BSR set to: 0
 18666  003FAA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18667  003FAC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18668  003FAE  B4D8               	btfsc	status,2,c
 18669  003FB0  D020               	goto	l1610
 18670                           
 18671                           ; BSR set to: 0
 18672  003FB2  0E01               	movlw	1
 18673  003FB4  6F86               	movwf	___lwdiv@counter& (0+255),b
 18674  003FB6  D005               	goto	l1605
 18675  003FB8  FFFF               	dw	65535	; assembler added errata NOP
 18676                           
 18677                           ; BSR set to: 0
 18678                           
 18679                           ; BSR set to: 0
 18680  003FBA  90D8               	bcf	status,0,c
 18681  003FBC  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18682  003FBE  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18683  003FC0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18684  003FC2                     l1605:
 18685  003FC2  FFFF               	dw	65535	; assembler added errata NOP
 18686                           
 18687                           ; BSR set to: 0
 18688                           
 18689                           ; BSR set to: 0
 18690  003FC4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18691  003FC6  D7F8               	goto	l1606
 18692  003FC8                     u4680:
 18693  003FC8  FFFF               	dw	65535	; assembler added errata NOP
 18694                           
 18695                           ; BSR set to: 0
 18696                           
 18697                           ; BSR set to: 0
 18698                           
 18699                           ; BSR set to: 0
 18700  003FCA  90D8               	bcf	status,0,c
 18701  003FCC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18702  003FCE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18703                           
 18704                           ; BSR set to: 0
 18705  003FD0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18706  003FD2  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18707  003FD4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18708  003FD6  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18709  003FD8  A0D8               	btfss	status,0,c
 18710  003FDA  D005               	goto	l1609
 18711                           
 18712                           ; BSR set to: 0
 18713  003FDC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18714  003FDE  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18715  003FE0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18716  003FE2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18717                           
 18718                           ; BSR set to: 0
 18719  003FE4  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18720  003FE6                     l1609:
 18721  003FE6  FFFF               	dw	65535	; assembler added errata NOP
 18722                           
 18723                           ; BSR set to: 0
 18724                           
 18725                           ; BSR set to: 0
 18726  003FE8  90D8               	bcf	status,0,c
 18727  003FEA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18728  003FEC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18729                           
 18730                           ; BSR set to: 0
 18731  003FEE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18732  003FF0  D7EB               	goto	u4680
 18733  003FF2                     l1610:
 18734  003FF2  FFFF               	dw	65535	; assembler added errata NOP
 18735                           
 18736                           ; BSR set to: 0
 18737                           
 18738                           ; BSR set to: 0
 18739  003FF4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18740  003FF8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18741                           
 18742                           ; BSR set to: 0
 18743  003FFC  0012               	return		;funcret
 18744  003FFE  FFFF               	dw	65535	; errata NOP
 18745  004000                     __end_of___lwdiv:
 18746                           	opt stack 0
 18747                           tosu	equ	0xFFF
 18748                           tosh	equ	0xFFE
 18749                           tosl	equ	0xFFD
 18750                           pclath	equ	0xFFA
 18751                           tblptru	equ	0xFF8
 18752                           tblptrh	equ	0xFF7
 18753                           tblptrl	equ	0xFF6
 18754                           tablat	equ	0xFF5
 18755                           prodh	equ	0xFF4
 18756                           prodl	equ	0xFF3
 18757                           intcon	equ	0xFF2
 18758                           intcon2	equ	0xFF1
 18759                           intcon3	equ	0xFF0
 18760                           indf0	equ	0xFEF
 18761                           postinc0	equ	0xFEE
 18762                           fsr0h	equ	0xFEA
 18763                           fsr0l	equ	0xFE9
 18764                           wreg	equ	0xFE8
 18765                           postdec1	equ	0xFE5
 18766                           fsr1l	equ	0xFE1
 18767                           indf2	equ	0xFDF
 18768                           postinc2	equ	0xFDE
 18769                           postdec2	equ	0xFDD
 18770                           fsr2h	equ	0xFDA
 18771                           fsr2l	equ	0xFD9
 18772                           status	equ	0xFD8
 18773                           
 18774 ;; *************** function _limparBuffer *****************
 18775 ;; Defined at:
 18776 ;;		line 34 in file "serial.h"
 18777 ;; Parameters:    Size  Location     Type
 18778 ;;		None
 18779 ;; Auto vars:     Size  Location     Type
 18780 ;;		None
 18781 ;; Return value:  Size  Location     Type
 18782 ;;                  1    wreg      void 
 18783 ;; Registers used:
 18784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18785 ;; Tracked objects:
 18786 ;;		On entry : 0/0
 18787 ;;		On exit  : 0/0
 18788 ;;		Unchanged: 0/0
 18789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18790 ;;      Params:         0       0       0       0       0       0       0
 18791 ;;      Locals:         0       0       0       0       0       0       0
 18792 ;;      Temps:          0       0       0       0       0       0       0
 18793 ;;      Totals:         0       0       0       0       0       0       0
 18794 ;;Total ram usage:        0 bytes
 18795 ;; Hardware stack levels used:    1
 18796 ;; Hardware stack levels required when called:    7
 18797 ;; This function calls:
 18798 ;;		_delay
 18799 ;;		_memset
 18800 ;; This function is called by:
 18801 ;;		_getSinalSIM800L
 18802 ;;		_comunicarTeste
 18803 ;;		_enviaSMS
 18804 ;; This function uses a non-reentrant model
 18805 ;;
 18806                           
 18807                           	psect	text59
 18808  006E4A                     __ptext59:
 18809                           	opt stack 0
 18810  006E4A                     _limparBuffer:
 18811                           	opt stack 0
 18812  006E4A  FFFF               	dw	65535	; assembler added errata NOP
 18813                           
 18814                           ;serial.h: 35: cbf = 0;
 18815                           
 18816                           ; BSR set to: 0
 18817                           ;incstack = 0
 18818  006E4C  0E00               	movlw	0
 18819  006E4E  6E67               	movwf	_cbf,c
 18820                           
 18821                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
 18822  006E50  0E23               	movlw	low _bufferSerial
 18823  006E52  0100               	movlb	0	; () banked
 18824  006E54  6F80               	movwf	memset@p1& (0+255),b
 18825  006E56  0E01               	movlw	high _bufferSerial
 18826  006E58  6F81               	movwf	(memset@p1+1)& (0+255),b
 18827  006E5A  0E00               	movlw	0
 18828  006E5C  6F83               	movwf	(memset@c+1)& (0+255),b
 18829  006E5E  0E00               	movlw	0
 18830  006E60  6F82               	movwf	memset@c& (0+255),b
 18831  006E62  0E00               	movlw	0
 18832  006E64  6F85               	movwf	(memset@n+1)& (0+255),b
 18833  006E66  0E3C               	movlw	60
 18834  006E68  6F84               	movwf	memset@n& (0+255),b
 18835  006E6A  EC94  F037         	call	_memset
 18836                           
 18837                           ;serial.h: 37: delay(150);
 18838  006E6E  0E00               	movlw	0
 18839  006E70  0100               	movlb	0	; () banked
 18840  006E72  6F81               	movwf	(delay@x+1)& (0+255),b
 18841  006E74  0E96               	movlw	150
 18842  006E76  6F80               	movwf	delay@x& (0+255),b
 18843  006E78  EC0A  F037         	call	_delay	;wreg free
 18844  006E7C  0012               	return		;funcret
 18845  006E7E  FFFF               	dw	65535	; errata NOP
 18846  006E80                     __end_of_limparBuffer:
 18847                           	opt stack 0
 18848                           tosu	equ	0xFFF
 18849                           tosh	equ	0xFFE
 18850                           tosl	equ	0xFFD
 18851                           pclath	equ	0xFFA
 18852                           tblptru	equ	0xFF8
 18853                           tblptrh	equ	0xFF7
 18854                           tblptrl	equ	0xFF6
 18855                           tablat	equ	0xFF5
 18856                           prodh	equ	0xFF4
 18857                           prodl	equ	0xFF3
 18858                           intcon	equ	0xFF2
 18859                           intcon2	equ	0xFF1
 18860                           intcon3	equ	0xFF0
 18861                           indf0	equ	0xFEF
 18862                           postinc0	equ	0xFEE
 18863                           fsr0h	equ	0xFEA
 18864                           fsr0l	equ	0xFE9
 18865                           wreg	equ	0xFE8
 18866                           postdec1	equ	0xFE5
 18867                           fsr1l	equ	0xFE1
 18868                           indf2	equ	0xFDF
 18869                           postinc2	equ	0xFDE
 18870                           postdec2	equ	0xFDD
 18871                           fsr2h	equ	0xFDA
 18872                           fsr2l	equ	0xFD9
 18873                           status	equ	0xFD8
 18874                           
 18875 ;; *************** function _memset *****************
 18876 ;; Defined at:
 18877 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 18878 ;; Parameters:    Size  Location     Type
 18879 ;;  p1              2    0[BANK0 ] PTR void 
 18880 ;;		 -> bufferAUX(20), bufferSerial(60), 
 18881 ;;  c               2    2[BANK0 ] int 
 18882 ;;  n               2    4[BANK0 ] unsigned int 
 18883 ;; Auto vars:     Size  Location     Type
 18884 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18885 ;;		 -> bufferAUX(20), bufferSerial(60), 
 18886 ;; Return value:  Size  Location     Type
 18887 ;;                  2    0[BANK0 ] PTR void 
 18888 ;; Registers used:
 18889 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18890 ;; Tracked objects:
 18891 ;;		On entry : 0/0
 18892 ;;		On exit  : 0/0
 18893 ;;		Unchanged: 0/0
 18894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18895 ;;      Params:         0       6       0       0       0       0       0
 18896 ;;      Locals:         0       2       0       0       0       0       0
 18897 ;;      Temps:          0       0       0       0       0       0       0
 18898 ;;      Totals:         0       8       0       0       0       0       0
 18899 ;;Total ram usage:        8 bytes
 18900 ;; Hardware stack levels used:    1
 18901 ;; Hardware stack levels required when called:    6
 18902 ;; This function calls:
 18903 ;;		Nothing
 18904 ;; This function is called by:
 18905 ;;		_limparBuffer
 18906 ;;		_getSerial
 18907 ;; This function uses a non-reentrant model
 18908 ;;
 18909                           
 18910                           	psect	text60
 18911  006F28                     __ptext60:
 18912                           	opt stack 0
 18913  006F28                     _memset:
 18914                           	opt stack 0
 18915  006F28  FFFF               	dw	65535	; assembler added errata NOP
 18916                           
 18917                           ;incstack = 0
 18918  006F2A  C080  F086         	movff	memset@p1,memset@p
 18919  006F2E  C081  F087         	movff	memset@p1+1,memset@p+1
 18920  006F32  D00A               	goto	l1629
 18921  006F34  FFFF               	dw	65535	; assembler added errata NOP
 18922  006F36                     l5197:
 18923  006F36  C086  FFD9         	movff	memset@p,fsr2l
 18924  006F3A  C087  FFDA         	movff	memset@p+1,fsr2h
 18925  006F3E  C082  FFDF         	movff	memset@c,indf2
 18926  006F42  0100               	movlb	0	; () banked
 18927  006F44  4B86               	infsnz	memset@p& (0+255),f,b
 18928  006F46  2B87               	incf	(memset@p+1)& (0+255),f,b
 18929  006F48                     l1629:
 18930  006F48  FFFF               	dw	65535	; assembler added errata NOP
 18931                           
 18932                           ; BSR set to: 0
 18933  006F4A  0100               	movlb	0	; () banked
 18934  006F4C  0784               	decf	memset@n& (0+255),f,b
 18935  006F4E  A0D8               	btfss	status,0,c
 18936  006F50  0785               	decf	(memset@n+1)& (0+255),f,b
 18937  006F52  2984               	incf	memset@n& (0+255),w,b
 18938  006F54  E1F0               	bnz	l5197
 18939  006F56  2985               	incf	(memset@n+1)& (0+255),w,b
 18940  006F58  B4D8               	btfsc	status,2,c
 18941                           
 18942                           ; BSR set to: 0
 18943                           
 18944                           ; BSR set to: 0
 18945                           ;	Return value of _memset is never used
 18946  006F5A  0012               	return		;funcret
 18947  006F5C  FFFF               	dw	65535	; assembler added errata NOP
 18948  006F5E  D7EA               	goto	l1630
 18949  006F60  FFFF               	dw	65535	; errata NOP
 18950  006F62                     __end_of_memset:
 18951                           	opt stack 0
 18952                           tosu	equ	0xFFF
 18953                           tosh	equ	0xFFE
 18954                           tosl	equ	0xFFD
 18955                           pclath	equ	0xFFA
 18956                           tblptru	equ	0xFF8
 18957                           tblptrh	equ	0xFF7
 18958                           tblptrl	equ	0xFF6
 18959                           tablat	equ	0xFF5
 18960                           prodh	equ	0xFF4
 18961                           prodl	equ	0xFF3
 18962                           intcon	equ	0xFF2
 18963                           intcon2	equ	0xFF1
 18964                           intcon3	equ	0xFF0
 18965                           indf0	equ	0xFEF
 18966                           postinc0	equ	0xFEE
 18967                           fsr0h	equ	0xFEA
 18968                           fsr0l	equ	0xFE9
 18969                           wreg	equ	0xFE8
 18970                           postdec1	equ	0xFE5
 18971                           fsr1l	equ	0xFE1
 18972                           indf2	equ	0xFDF
 18973                           postinc2	equ	0xFDE
 18974                           postdec2	equ	0xFDD
 18975                           fsr2h	equ	0xFDA
 18976                           fsr2l	equ	0xFD9
 18977                           status	equ	0xFD8
 18978                           
 18979 ;; *************** function _aguardaBuffer *****************
 18980 ;; Defined at:
 18981 ;;		line 26 in file "serial.h"
 18982 ;; Parameters:    Size  Location     Type
 18983 ;;  str             2   19[BANK0 ] PTR unsigned char 
 18984 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 18985 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 18986 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_6(7), 
 18987 ;;		 -> STR_5(3), 
 18988 ;; Auto vars:     Size  Location     Type
 18989 ;;		None
 18990 ;; Return value:  Size  Location     Type
 18991 ;;                  1    wreg      unsigned char 
 18992 ;; Registers used:
 18993 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18994 ;; Tracked objects:
 18995 ;;		On entry : 0/0
 18996 ;;		On exit  : 0/0
 18997 ;;		Unchanged: 0/0
 18998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18999 ;;      Params:         0       2       0       0       0       0       0
 19000 ;;      Locals:         0       0       0       0       0       0       0
 19001 ;;      Temps:          0       0       0       0       0       0       0
 19002 ;;      Totals:         0       2       0       0       0       0       0
 19003 ;;Total ram usage:        2 bytes
 19004 ;; Hardware stack levels used:    1
 19005 ;; Hardware stack levels required when called:    8
 19006 ;; This function calls:
 19007 ;;		_delay
 19008 ;;		_strstr
 19009 ;; This function is called by:
 19010 ;;		_getSinalSIM800L
 19011 ;;		_comunicarTeste
 19012 ;;		_enviaSMS
 19013 ;; This function uses a non-reentrant model
 19014 ;;
 19015                           
 19016                           	psect	text61
 19017  007012                     __ptext61:
 19018                           	opt stack 0
 19019  007012                     _aguardaBuffer:
 19020                           	opt stack 0
 19021  007012  FFFF               	dw	65535	; assembler added errata NOP
 19022                           
 19023                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
 19024                           
 19025                           ; BSR set to: 0
 19026                           ;incstack = 0
 19027  007014  0E23               	movlw	low _bufferSerial
 19028  007016  0100               	movlb	0	; () banked
 19029  007018  6F8F               	movwf	strstr@s1& (0+255),b
 19030  00701A  0E01               	movlw	high _bufferSerial
 19031  00701C  6F90               	movwf	(strstr@s1+1)& (0+255),b
 19032  00701E  C093  F091         	movff	aguardaBuffer@str,strstr@s2
 19033  007022  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
 19034  007026  EC83  F01F         	call	_strstr	;wreg free
 19035  00702A  0100               	movlb	0	; () banked
 19036  00702C  518F               	movf	?_strstr& (0+255),w,b
 19037  00702E  1190               	iorwf	(?_strstr+1)& (0+255),w,b
 19038  007030  B4D8               	btfsc	status,2,c
 19039  007032  D008               	goto	l277
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;serial.h: 28: delay(150);
 19043  007034  0E00               	movlw	0
 19044  007036  6F81               	movwf	(delay@x+1)& (0+255),b
 19045  007038  0E96               	movlw	150
 19046  00703A  6F80               	movwf	delay@x& (0+255),b
 19047  00703C  EC0A  F037         	call	_delay	;wreg free
 19048                           
 19049                           ;serial.h: 29: return 1;
 19050  007040  0E01               	movlw	1
 19051  007042  D002               	goto	l5643
 19052  007044                     l277:
 19053  007044  FFFF               	dw	65535	; assembler added errata NOP
 19054                           
 19055                           ;serial.h: 30: }
 19056                           ;serial.h: 31: return 0;
 19057  007046  0E00               	movlw	0
 19058  007048                     l5643:
 19059  007048  FFFF               	dw	65535	; assembler added errata NOP
 19060  00704A  0012               	return		;funcret
 19061  00704C  FFFF               	dw	65535	; errata NOP
 19062  00704E                     __end_of_aguardaBuffer:
 19063                           	opt stack 0
 19064                           tosu	equ	0xFFF
 19065                           tosh	equ	0xFFE
 19066                           tosl	equ	0xFFD
 19067                           pclath	equ	0xFFA
 19068                           tblptru	equ	0xFF8
 19069                           tblptrh	equ	0xFF7
 19070                           tblptrl	equ	0xFF6
 19071                           tablat	equ	0xFF5
 19072                           prodh	equ	0xFF4
 19073                           prodl	equ	0xFF3
 19074                           intcon	equ	0xFF2
 19075                           intcon2	equ	0xFF1
 19076                           intcon3	equ	0xFF0
 19077                           indf0	equ	0xFEF
 19078                           postinc0	equ	0xFEE
 19079                           fsr0h	equ	0xFEA
 19080                           fsr0l	equ	0xFE9
 19081                           wreg	equ	0xFE8
 19082                           postdec1	equ	0xFE5
 19083                           fsr1l	equ	0xFE1
 19084                           indf2	equ	0xFDF
 19085                           postinc2	equ	0xFDE
 19086                           postdec2	equ	0xFDD
 19087                           fsr2h	equ	0xFDA
 19088                           fsr2l	equ	0xFD9
 19089                           status	equ	0xFD8
 19090                           
 19091 ;; *************** function _strstr *****************
 19092 ;; Defined at:
 19093 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
 19094 ;; Parameters:    Size  Location     Type
 19095 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
 19096 ;;		 -> NULL(0), bufferSerial(60), 
 19097 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
 19098 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 19099 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 19100 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 19101 ;;		 -> STR_6(7), STR_5(3), 
 19102 ;; Auto vars:     Size  Location     Type
 19103 ;;		None
 19104 ;; Return value:  Size  Location     Type
 19105 ;;                  2   15[BANK0 ] PTR unsigned char 
 19106 ;; Registers used:
 19107 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19108 ;; Tracked objects:
 19109 ;;		On entry : 0/0
 19110 ;;		On exit  : 0/0
 19111 ;;		Unchanged: 0/0
 19112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19113 ;;      Params:         0       4       0       0       0       0       0
 19114 ;;      Locals:         0       0       0       0       0       0       0
 19115 ;;      Temps:          0       0       0       0       0       0       0
 19116 ;;      Totals:         0       4       0       0       0       0       0
 19117 ;;Total ram usage:        4 bytes
 19118 ;; Hardware stack levels used:    1
 19119 ;; Hardware stack levels required when called:    7
 19120 ;; This function calls:
 19121 ;;		_strchr
 19122 ;;		_strlen
 19123 ;;		_strncmp
 19124 ;; This function is called by:
 19125 ;;		_aguardaBuffer
 19126 ;;		_getSerial
 19127 ;; This function uses a non-reentrant model
 19128 ;;
 19129                           
 19130                           	psect	text62
 19131  003F06                     __ptext62:
 19132                           	opt stack 0
 19133  003F06                     _strstr:
 19134                           	opt stack 0
 19135  003F06  FFFF               	dw	65535	; assembler added errata NOP
 19136                           
 19137                           ;incstack = 0
 19138  003F08  D035               	goto	l1783
 19139  003F0A  FFFF               	dw	65535	; assembler added errata NOP
 19140  003F0C  C08F  F086         	movff	strstr@s1,strncmp@s1
 19141  003F10  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
 19142  003F14  C091  F088         	movff	strstr@s2,strncmp@s2
 19143  003F18  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
 19144  003F1C  C091  F080         	movff	strstr@s2,strlen@s
 19145  003F20  C092  F081         	movff	strstr@s2+1,strlen@s+1
 19146  003F24  EC1B  F03A         	call	_strlen	;wreg free
 19147  003F28  C080  F08A         	movff	?_strlen,strncmp@len
 19148  003F2C  C081  F08B         	movff	?_strlen+1,strncmp@len+1
 19149  003F30  EC36  F01F         	call	_strncmp	;wreg free
 19150  003F34  0100               	movlb	0	; () banked
 19151  003F36  5186               	movf	?_strncmp& (0+255),w,b
 19152  003F38  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
 19153  003F3A  A4D8               	btfss	status,2,c
 19154  003F3C  D005               	goto	l1785
 19155                           
 19156                           ; BSR set to: 0
 19157  003F3E  C08F  F08F         	movff	strstr@s1,?_strstr
 19158  003F42  C090  F090         	movff	strstr@s1+1,?_strstr+1
 19159                           
 19160                           ; BSR set to: 0
 19161  003F46  D028               	goto	l5187
 19162  003F48                     l1785:
 19163  003F48  FFFF               	dw	65535	; assembler added errata NOP
 19164                           
 19165                           ; BSR set to: 0
 19166                           
 19167                           ; BSR set to: 0
 19168  003F4A  0E01               	movlw	1
 19169  003F4C  258F               	addwf	strstr@s1& (0+255),w,b
 19170  003F4E  6F80               	movwf	strchr@ptr& (0+255),b
 19171  003F50  0E00               	movlw	0
 19172  003F52  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
 19173  003F54  6F81               	movwf	(strchr@ptr+1)& (0+255),b
 19174  003F56  C091  FFF6         	movff	strstr@s2,tblptrl
 19175  003F5A  C092  FFF7         	movff	strstr@s2+1,tblptrh
 19176  003F5E                     	if	0	;tblptru may be non-zero
 19177  003F5E                     	endif
 19178  003F5E                     	if	0	;tblptru may be non-zero
 19179  003F5E                     	endif
 19180  003F5E  0008               	tblrd		*
 19181  003F60  FFFF               	dw	65535	; errata NOP
 19182  003F62  50F5               	movf	tablat,w,c
 19183  003F64  6F82               	movwf	strchr@chr& (0+255),b
 19184  003F66  6B83               	clrf	(strchr@chr+1)& (0+255),b
 19185  003F68  ECA3  F038         	call	_strchr	;wreg free
 19186  003F6C  C080  F08F         	movff	?_strchr,strstr@s1
 19187  003F70  C081  F090         	movff	?_strchr+1,strstr@s1+1
 19188  003F74                     l1783:
 19189  003F74  FFFF               	dw	65535	; assembler added errata NOP
 19190  003F76  0100               	movlb	0	; () banked
 19191  003F78  518F               	movf	strstr@s1& (0+255),w,b
 19192  003F7A  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
 19193  003F7C  B4D8               	btfsc	status,2,c
 19194  003F7E  D007               	goto	u4860
 19195                           
 19196                           ; BSR set to: 0
 19197  003F80  C08F  FFD9         	movff	strstr@s1,fsr2l
 19198  003F84  C090  FFDA         	movff	strstr@s1+1,fsr2h
 19199  003F88  50DF               	movf	indf2,w,c
 19200  003F8A  A4D8               	btfss	status,2,c
 19201  003F8C  D7BE               	goto	l1784
 19202  003F8E                     u4860:
 19203  003F8E  FFFF               	dw	65535	; assembler added errata NOP
 19204                           
 19205                           ; BSR set to: 0
 19206                           
 19207                           ; BSR set to: 0
 19208                           
 19209                           ; BSR set to: 0
 19210  003F90  0E00               	movlw	0
 19211  003F92  6F8F               	movwf	?_strstr& (0+255),b
 19212  003F94  0E00               	movlw	0
 19213  003F96  6F90               	movwf	(?_strstr+1)& (0+255),b
 19214  003F98                     l5187:
 19215  003F98  FFFF               	dw	65535	; assembler added errata NOP
 19216                           
 19217                           ; BSR set to: 0
 19218                           
 19219                           ; BSR set to: 0
 19220  003F9A  0012               	return		;funcret
 19221  003F9C  FFFF               	dw	65535	; errata NOP
 19222  003F9E                     __end_of_strstr:
 19223                           	opt stack 0
 19224                           tosu	equ	0xFFF
 19225                           tosh	equ	0xFFE
 19226                           tosl	equ	0xFFD
 19227                           pclath	equ	0xFFA
 19228                           tblptru	equ	0xFF8
 19229                           tblptrh	equ	0xFF7
 19230                           tblptrl	equ	0xFF6
 19231                           tablat	equ	0xFF5
 19232                           prodh	equ	0xFF4
 19233                           prodl	equ	0xFF3
 19234                           intcon	equ	0xFF2
 19235                           intcon2	equ	0xFF1
 19236                           intcon3	equ	0xFF0
 19237                           indf0	equ	0xFEF
 19238                           postinc0	equ	0xFEE
 19239                           fsr0h	equ	0xFEA
 19240                           fsr0l	equ	0xFE9
 19241                           wreg	equ	0xFE8
 19242                           postdec1	equ	0xFE5
 19243                           fsr1l	equ	0xFE1
 19244                           indf2	equ	0xFDF
 19245                           postinc2	equ	0xFDE
 19246                           postdec2	equ	0xFDD
 19247                           fsr2h	equ	0xFDA
 19248                           fsr2l	equ	0xFD9
 19249                           status	equ	0xFD8
 19250                           
 19251 ;; *************** function _strncmp *****************
 19252 ;; Defined at:
 19253 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
 19254 ;; Parameters:    Size  Location     Type
 19255 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19256 ;;		 -> NULL(0), bufferSerial(60), 
 19257 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19258 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 19259 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 19260 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 19261 ;;		 -> STR_6(7), STR_5(3), 
 19262 ;;  len             2   10[BANK0 ] unsigned int 
 19263 ;; Auto vars:     Size  Location     Type
 19264 ;;		None
 19265 ;; Return value:  Size  Location     Type
 19266 ;;                  2    6[BANK0 ] int 
 19267 ;; Registers used:
 19268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19269 ;; Tracked objects:
 19270 ;;		On entry : 0/0
 19271 ;;		On exit  : 0/0
 19272 ;;		Unchanged: 0/0
 19273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19274 ;;      Params:         0       6       0       0       0       0       0
 19275 ;;      Locals:         0       0       0       0       0       0       0
 19276 ;;      Temps:          0       3       0       0       0       0       0
 19277 ;;      Totals:         0       9       0       0       0       0       0
 19278 ;;Total ram usage:        9 bytes
 19279 ;; Hardware stack levels used:    1
 19280 ;; Hardware stack levels required when called:    6
 19281 ;; This function calls:
 19282 ;;		Nothing
 19283 ;; This function is called by:
 19284 ;;		_strstr
 19285 ;; This function uses a non-reentrant model
 19286 ;;
 19287                           
 19288                           	psect	text63
 19289  003E6C                     __ptext63:
 19290                           	opt stack 0
 19291  003E6C                     _strncmp:
 19292                           	opt stack 0
 19293  003E6C  FFFF               	dw	65535	; assembler added errata NOP
 19294                           
 19295                           ; BSR set to: 0
 19296                           ;incstack = 0
 19297  003E6E  D03A               	goto	l1817
 19298  003E70  FFFF               	dw	65535	; assembler added errata NOP
 19299  003E72                     l5123:
 19300  003E72  C086  FFD9         	movff	strncmp@s1,fsr2l
 19301  003E76  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 19302  003E7A  50DF               	movf	indf2,w,c
 19303  003E7C  B4D8               	btfsc	status,2,c
 19304  003E7E  D011               	goto	u4740
 19305  003E80  C086  FFD9         	movff	strncmp@s1,fsr2l
 19306  003E84  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 19307  003E88  50DF               	movf	indf2,w,c
 19308  003E8A  0100               	movlb	0	; () banked
 19309  003E8C  6F8C               	movwf	??_strncmp& (0+255),b
 19310  003E8E  C088  FFF6         	movff	strncmp@s2,tblptrl
 19311  003E92  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 19312  003E96                     	if	0	;tblptru may be non-zero
 19313  003E96                     	endif
 19314  003E96                     	if	0	;tblptru may be non-zero
 19315  003E96                     	endif
 19316  003E96  0008               	tblrd		*
 19317  003E98  FFFF               	dw	65535	; errata NOP
 19318  003E9A  50F5               	movf	tablat,w,c
 19319  003E9C  198C               	xorwf	??_strncmp& (0+255),w,b
 19320  003E9E  B4D8               	btfsc	status,2,c
 19321  003EA0  D01C               	goto	l1819
 19322  003EA2                     u4740:
 19323  003EA2  FFFF               	dw	65535	; assembler added errata NOP
 19324                           
 19325                           ; BSR set to: 0
 19326  003EA4  C088  FFF6         	movff	strncmp@s2,tblptrl
 19327  003EA8  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 19328  003EAC                     	if	0	;tblptru may be non-zero
 19329  003EAC                     	endif
 19330  003EAC                     	if	0	;tblptru may be non-zero
 19331  003EAC                     	endif
 19332  003EAC  0008               	tblrd		*
 19333  003EAE  FFFF               	dw	65535	; errata NOP
 19334  003EB0  50F5               	movf	tablat,w,c
 19335  003EB2  0100               	movlb	0	; () banked
 19336  003EB4  6F8C               	movwf	??_strncmp& (0+255),b
 19337  003EB6  6B8D               	clrf	(??_strncmp+1)& (0+255),b
 19338  003EB8  1F8C               	comf	??_strncmp& (0+255),f,b
 19339  003EBA  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
 19340  003EBC  4B8C               	infsnz	??_strncmp& (0+255),f,b
 19341  003EBE  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
 19342  003EC0  C086  FFD9         	movff	strncmp@s1,fsr2l
 19343  003EC4  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 19344  003EC8  50DF               	movf	indf2,w,c
 19345  003ECA  6F8E               	movwf	(??_strncmp+2)& (0+255),b
 19346  003ECC  518E               	movf	(??_strncmp+2)& (0+255),w,b
 19347  003ECE  258C               	addwf	??_strncmp& (0+255),w,b
 19348  003ED0  6F86               	movwf	?_strncmp& (0+255),b
 19349  003ED2  0E00               	movlw	0
 19350  003ED4  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
 19351  003ED6  6F87               	movwf	(?_strncmp+1)& (0+255),b
 19352                           
 19353                           ; BSR set to: 0
 19354  003ED8  D013               	goto	l5137
 19355  003EDA                     l1819:
 19356  003EDA  FFFF               	dw	65535	; assembler added errata NOP
 19357                           
 19358                           ; BSR set to: 0
 19359                           
 19360                           ; BSR set to: 0
 19361  003EDC  4B86               	infsnz	strncmp@s1& (0+255),f,b
 19362  003EDE  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
 19363  003EE0  4B88               	infsnz	strncmp@s2& (0+255),f,b
 19364  003EE2  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
 19365  003EE4                     l1817:
 19366  003EE4  FFFF               	dw	65535	; assembler added errata NOP
 19367                           
 19368                           ; BSR set to: 0
 19369  003EE6  0100               	movlb	0	; () banked
 19370  003EE8  078A               	decf	strncmp@len& (0+255),f,b
 19371  003EEA  A0D8               	btfss	status,0,c
 19372  003EEC  078B               	decf	(strncmp@len+1)& (0+255),f,b
 19373  003EEE  298A               	incf	strncmp@len& (0+255),w,b
 19374  003EF0  E1C0               	bnz	l5123
 19375  003EF2  298B               	incf	(strncmp@len+1)& (0+255),w,b
 19376  003EF4  A4D8               	btfss	status,2,c
 19377  003EF6  D7BC               	goto	l1818
 19378                           
 19379                           ; BSR set to: 0
 19380                           
 19381                           ; BSR set to: 0
 19382  003EF8  0E00               	movlw	0
 19383  003EFA  6F87               	movwf	(?_strncmp+1)& (0+255),b
 19384  003EFC  0E00               	movlw	0
 19385  003EFE  6F86               	movwf	?_strncmp& (0+255),b
 19386  003F00                     l5137:
 19387  003F00  FFFF               	dw	65535	; assembler added errata NOP
 19388                           
 19389                           ; BSR set to: 0
 19390                           
 19391                           ; BSR set to: 0
 19392  003F02  0012               	return		;funcret
 19393  003F04  FFFF               	dw	65535	; errata NOP
 19394  003F06                     __end_of_strncmp:
 19395                           	opt stack 0
 19396                           tosu	equ	0xFFF
 19397                           tosh	equ	0xFFE
 19398                           tosl	equ	0xFFD
 19399                           pclath	equ	0xFFA
 19400                           tblptru	equ	0xFF8
 19401                           tblptrh	equ	0xFF7
 19402                           tblptrl	equ	0xFF6
 19403                           tablat	equ	0xFF5
 19404                           prodh	equ	0xFF4
 19405                           prodl	equ	0xFF3
 19406                           intcon	equ	0xFF2
 19407                           intcon2	equ	0xFF1
 19408                           intcon3	equ	0xFF0
 19409                           indf0	equ	0xFEF
 19410                           postinc0	equ	0xFEE
 19411                           fsr0h	equ	0xFEA
 19412                           fsr0l	equ	0xFE9
 19413                           wreg	equ	0xFE8
 19414                           postdec1	equ	0xFE5
 19415                           fsr1l	equ	0xFE1
 19416                           indf2	equ	0xFDF
 19417                           postinc2	equ	0xFDE
 19418                           postdec2	equ	0xFDD
 19419                           fsr2h	equ	0xFDA
 19420                           fsr2l	equ	0xFD9
 19421                           status	equ	0xFD8
 19422                           
 19423 ;; *************** function _strlen *****************
 19424 ;; Defined at:
 19425 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 19426 ;; Parameters:    Size  Location     Type
 19427 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 19428 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 19429 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 19430 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 19431 ;;		 -> STR_6(7), STR_5(3), NULL(0), bufferSerial(60), 
 19432 ;; Auto vars:     Size  Location     Type
 19433 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 19434 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 19435 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 19436 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 19437 ;;		 -> STR_6(7), STR_5(3), NULL(0), bufferSerial(60), 
 19438 ;; Return value:  Size  Location     Type
 19439 ;;                  2    0[BANK0 ] unsigned int 
 19440 ;; Registers used:
 19441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19442 ;; Tracked objects:
 19443 ;;		On entry : 0/0
 19444 ;;		On exit  : 0/0
 19445 ;;		Unchanged: 0/0
 19446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19447 ;;      Params:         0       2       0       0       0       0       0
 19448 ;;      Locals:         0       2       0       0       0       0       0
 19449 ;;      Temps:          0       2       0       0       0       0       0
 19450 ;;      Totals:         0       6       0       0       0       0       0
 19451 ;;Total ram usage:        6 bytes
 19452 ;; Hardware stack levels used:    1
 19453 ;; Hardware stack levels required when called:    6
 19454 ;; This function calls:
 19455 ;;		Nothing
 19456 ;; This function is called by:
 19457 ;;		_getSerial
 19458 ;;		_strstr
 19459 ;; This function uses a non-reentrant model
 19460 ;;
 19461                           
 19462                           	psect	text64
 19463  007436                     __ptext64:
 19464                           	opt stack 0
 19465  007436                     _strlen:
 19466                           	opt stack 0
 19467  007436  FFFF               	dw	65535	; assembler added errata NOP
 19468                           
 19469                           ; BSR set to: 0
 19470                           ;incstack = 0
 19471  007438  C080  F084         	movff	strlen@s,strlen@cp
 19472  00743C  C081  F085         	movff	strlen@s+1,strlen@cp+1
 19473  007440  D004               	goto	l1771
 19474  007442  FFFF               	dw	65535	; assembler added errata NOP
 19475  007444  0100               	movlb	0	; () banked
 19476  007446  4B84               	infsnz	strlen@cp& (0+255),f,b
 19477  007448  2B85               	incf	(strlen@cp+1)& (0+255),f,b
 19478  00744A                     l1771:
 19479  00744A  FFFF               	dw	65535	; assembler added errata NOP
 19480                           
 19481                           ; BSR set to: 0
 19482  00744C  C084  FFF6         	movff	strlen@cp,tblptrl
 19483  007450  C085  FFF7         	movff	strlen@cp+1,tblptrh
 19484  007454  6AF8               	clrf	tblptru,c
 19485  007456  0E05               	movlw	(high __ramtop+-1)
 19486  007458  64F7               	cpfsgt	tblptrh,c
 19487  00745A  D004               	bra	u4617
 19488  00745C  0008               	tblrd		*
 19489  00745E  FFFF               	dw	65535	; errata NOP
 19490  007460  50F5               	movf	tablat,w,c
 19491  007462  D005               	bra	u4610
 19492  007464                     u4617:
 19493  007464  CFF6 FFE9          	movff	tblptrl,fsr0l
 19494  007468  CFF7 FFEA          	movff	tblptrh,fsr0h
 19495  00746C  50EF               	movf	indf0,w,c
 19496  00746E                     u4610:
 19497  00746E  0900               	iorlw	0
 19498  007470  A4D8               	btfss	status,2,c
 19499  007472  D7E7               	goto	l1772
 19500  007474  C080  F082         	movff	strlen@s,??_strlen
 19501  007478  C081  F083         	movff	strlen@s+1,??_strlen+1
 19502  00747C  0100               	movlb	0	; () banked
 19503  00747E  1F82               	comf	??_strlen& (0+255),f,b
 19504  007480  1F83               	comf	(??_strlen+1)& (0+255),f,b
 19505  007482  4B82               	infsnz	??_strlen& (0+255),f,b
 19506  007484  2B83               	incf	(??_strlen+1)& (0+255),f,b
 19507  007486  5184               	movf	strlen@cp& (0+255),w,b
 19508  007488  2582               	addwf	??_strlen& (0+255),w,b
 19509  00748A  6F80               	movwf	?_strlen& (0+255),b
 19510  00748C  5185               	movf	(strlen@cp+1)& (0+255),w,b
 19511  00748E  2183               	addwfc	(??_strlen+1)& (0+255),w,b
 19512  007490  6F81               	movwf	(?_strlen+1)& (0+255),b
 19513                           
 19514                           ; BSR set to: 0
 19515                           
 19516                           ; BSR set to: 0
 19517  007492  0012               	return		;funcret
 19518  007494  FFFF               	dw	65535	; errata NOP
 19519  007496                     __end_of_strlen:
 19520                           	opt stack 0
 19521                           tosu	equ	0xFFF
 19522                           tosh	equ	0xFFE
 19523                           tosl	equ	0xFFD
 19524                           pclath	equ	0xFFA
 19525                           tblptru	equ	0xFF8
 19526                           tblptrh	equ	0xFF7
 19527                           tblptrl	equ	0xFF6
 19528                           tablat	equ	0xFF5
 19529                           prodh	equ	0xFF4
 19530                           prodl	equ	0xFF3
 19531                           intcon	equ	0xFF2
 19532                           intcon2	equ	0xFF1
 19533                           intcon3	equ	0xFF0
 19534                           indf0	equ	0xFEF
 19535                           postinc0	equ	0xFEE
 19536                           fsr0h	equ	0xFEA
 19537                           fsr0l	equ	0xFE9
 19538                           wreg	equ	0xFE8
 19539                           postdec1	equ	0xFE5
 19540                           fsr1l	equ	0xFE1
 19541                           indf2	equ	0xFDF
 19542                           postinc2	equ	0xFDE
 19543                           postdec2	equ	0xFDD
 19544                           fsr2h	equ	0xFDA
 19545                           fsr2l	equ	0xFD9
 19546                           status	equ	0xFD8
 19547                           
 19548 ;; *************** function _strchr *****************
 19549 ;; Defined at:
 19550 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
 19551 ;; Parameters:    Size  Location     Type
 19552 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 19553 ;;		 -> NULL(0), bufferSerial(60), 
 19554 ;;  chr             2    2[BANK0 ] int 
 19555 ;; Auto vars:     Size  Location     Type
 19556 ;;		None
 19557 ;; Return value:  Size  Location     Type
 19558 ;;                  2    0[BANK0 ] PTR unsigned char 
 19559 ;; Registers used:
 19560 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19561 ;; Tracked objects:
 19562 ;;		On entry : 0/0
 19563 ;;		On exit  : 0/0
 19564 ;;		Unchanged: 0/0
 19565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19566 ;;      Params:         0       4       0       0       0       0       0
 19567 ;;      Locals:         0       0       0       0       0       0       0
 19568 ;;      Temps:          0       1       0       0       0       0       0
 19569 ;;      Totals:         0       5       0       0       0       0       0
 19570 ;;Total ram usage:        5 bytes
 19571 ;; Hardware stack levels used:    1
 19572 ;; Hardware stack levels required when called:    6
 19573 ;; This function calls:
 19574 ;;		Nothing
 19575 ;; This function is called by:
 19576 ;;		_strstr
 19577 ;; This function uses a non-reentrant model
 19578 ;;
 19579                           
 19580                           	psect	text65
 19581  007146                     __ptext65:
 19582                           	opt stack 0
 19583  007146                     _strchr:
 19584                           	opt stack 0
 19585  007146  FFFF               	dw	65535	; assembler added errata NOP
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;incstack = 0
 19589  007148  C080  FFD9         	movff	strchr@ptr,fsr2l
 19590  00714C  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 19591  007150  0100               	movlb	0	; () banked
 19592  007152  5182               	movf	strchr@chr& (0+255),w,b
 19593  007154  18DE               	xorwf	postinc2,w,c
 19594  007156  A4D8               	btfss	status,2,c
 19595  007158  D005               	goto	l1812
 19596                           
 19597                           ; BSR set to: 0
 19598  00715A  C080  F080         	movff	strchr@ptr,?_strchr
 19599  00715E  C081  F081         	movff	strchr@ptr+1,?_strchr+1
 19600                           
 19601                           ; BSR set to: 0
 19602  007162  D00E               	goto	l5149
 19603  007164                     l1812:
 19604  007164  FFFF               	dw	65535	; assembler added errata NOP
 19605                           
 19606                           ; BSR set to: 0
 19607                           
 19608                           ; BSR set to: 0
 19609  007166  C080  FFD9         	movff	strchr@ptr,fsr2l
 19610  00716A  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 19611  00716E  4B80               	infsnz	strchr@ptr& (0+255),f,b
 19612  007170  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
 19613  007172  50DF               	movf	indf2,w,c
 19614  007174  A4D8               	btfss	status,2,c
 19615  007176  D7E7               	goto	_strchr
 19616                           
 19617                           ; BSR set to: 0
 19618                           
 19619                           ; BSR set to: 0
 19620  007178  0E00               	movlw	0
 19621  00717A  6F80               	movwf	?_strchr& (0+255),b
 19622  00717C  0E00               	movlw	0
 19623  00717E  6F81               	movwf	(?_strchr+1)& (0+255),b
 19624  007180                     l5149:
 19625  007180  FFFF               	dw	65535	; assembler added errata NOP
 19626                           
 19627                           ; BSR set to: 0
 19628                           
 19629                           ; BSR set to: 0
 19630  007182  0012               	return		;funcret
 19631  007184  FFFF               	dw	65535	; errata NOP
 19632  007186                     __end_of_strchr:
 19633                           	opt stack 0
 19634                           tosu	equ	0xFFF
 19635                           tosh	equ	0xFFE
 19636                           tosl	equ	0xFFD
 19637                           pclath	equ	0xFFA
 19638                           tblptru	equ	0xFF8
 19639                           tblptrh	equ	0xFF7
 19640                           tblptrl	equ	0xFF6
 19641                           tablat	equ	0xFF5
 19642                           prodh	equ	0xFF4
 19643                           prodl	equ	0xFF3
 19644                           intcon	equ	0xFF2
 19645                           intcon2	equ	0xFF1
 19646                           intcon3	equ	0xFF0
 19647                           indf0	equ	0xFEF
 19648                           postinc0	equ	0xFEE
 19649                           fsr0h	equ	0xFEA
 19650                           fsr0l	equ	0xFE9
 19651                           wreg	equ	0xFE8
 19652                           postdec1	equ	0xFE5
 19653                           fsr1l	equ	0xFE1
 19654                           indf2	equ	0xFDF
 19655                           postinc2	equ	0xFDE
 19656                           postdec2	equ	0xFDD
 19657                           fsr2h	equ	0xFDA
 19658                           fsr2l	equ	0xFD9
 19659                           status	equ	0xFD8
 19660                           
 19661 ;; *************** function _delay *****************
 19662 ;; Defined at:
 19663 ;;		line 15 in file "function.c"
 19664 ;; Parameters:    Size  Location     Type
 19665 ;;  x               2    0[BANK0 ] int 
 19666 ;; Auto vars:     Size  Location     Type
 19667 ;;		None
 19668 ;; Return value:  Size  Location     Type
 19669 ;;                  1    wreg      void 
 19670 ;; Registers used:
 19671 ;;		wreg, status,2, status,0
 19672 ;; Tracked objects:
 19673 ;;		On entry : 0/0
 19674 ;;		On exit  : 0/0
 19675 ;;		Unchanged: 0/0
 19676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19677 ;;      Params:         0       2       0       0       0       0       0
 19678 ;;      Locals:         0       0       0       0       0       0       0
 19679 ;;      Temps:          0       1       0       0       0       0       0
 19680 ;;      Totals:         0       3       0       0       0       0       0
 19681 ;;Total ram usage:        3 bytes
 19682 ;; Hardware stack levels used:    1
 19683 ;; Hardware stack levels required when called:    6
 19684 ;; This function calls:
 19685 ;;		Nothing
 19686 ;; This function is called by:
 19687 ;;		_aguardaBuffer
 19688 ;;		_limparBuffer
 19689 ;;		_getSinalSIM800L
 19690 ;;		_comunicarTeste
 19691 ;;		_enviaSMS
 19692 ;;		_writeEEPROM_ext
 19693 ;;		_main
 19694 ;; This function uses a non-reentrant model
 19695 ;;
 19696                           
 19697                           	psect	text66
 19698  006E14                     __ptext66:
 19699                           	opt stack 0
 19700  006E14                     _delay:
 19701                           	opt stack 0
 19702  006E14  FFFF               	dw	65535	; assembler added errata NOP
 19703                           
 19704                           ;function.c: 16: while (x--) {
 19705                           
 19706                           ; BSR set to: 0
 19707                           ;incstack = 0
 19708  006E16  D00C               	goto	l1075
 19709  006E18  FFFF               	dw	65535	; assembler added errata NOP
 19710  006E1A                     l5191:
 19711                           
 19712                           ;function.c: 17: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 19713  006E1A  0E02               	movlw	2
 19714  006E1C  0100               	movlb	0	; () banked
 19715  006E1E  6F82               	movwf	??_delay& (0+255),b
 19716  006E20  0EF2               	movlw	242
 19717  006E22                     u9197:
 19718  006E22  FFFF               	dw	65535	; errata NOP
 19719  006E24  2EE8               	decfsz	wreg,f,c
 19720  006E26  D7FD               	bra	u9197
 19721  006E28  2F82               	decfsz	??_delay& (0+255),f,b
 19722  006E2A  D7FB               	bra	u9197
 19723  006E2C  F000               	nop	
 19724  006E2E  0004               	clrwdt		;# 
 19725  006E30                     l1075:
 19726  006E30  FFFF               	dw	65535	; assembler added errata NOP
 19727  006E32  0100               	movlb	0	; () banked
 19728  006E34  0780               	decf	delay@x& (0+255),f,b
 19729  006E36  A0D8               	btfss	status,0,c
 19730  006E38  0781               	decf	(delay@x+1)& (0+255),f,b
 19731  006E3A  2980               	incf	delay@x& (0+255),w,b
 19732  006E3C  E1EE               	bnz	l5191
 19733  006E3E  2981               	incf	(delay@x+1)& (0+255),w,b
 19734  006E40  B4D8               	btfsc	status,2,c
 19735                           
 19736                           ; BSR set to: 0
 19737                           
 19738                           ; BSR set to: 0
 19739  006E42  0012               	return		;funcret
 19740  006E44  FFFF               	dw	65535	; assembler added errata NOP
 19741  006E46  D7E8               	goto	l1076
 19742  006E48  FFFF               	dw	65535	; errata NOP
 19743  006E4A                     __end_of_delay:
 19744                           	opt stack 0
 19745                           tosu	equ	0xFFF
 19746                           tosh	equ	0xFFE
 19747                           tosl	equ	0xFFD
 19748                           pclath	equ	0xFFA
 19749                           tblptru	equ	0xFF8
 19750                           tblptrh	equ	0xFF7
 19751                           tblptrl	equ	0xFF6
 19752                           tablat	equ	0xFF5
 19753                           prodh	equ	0xFF4
 19754                           prodl	equ	0xFF3
 19755                           intcon	equ	0xFF2
 19756                           intcon2	equ	0xFF1
 19757                           intcon3	equ	0xFF0
 19758                           indf0	equ	0xFEF
 19759                           postinc0	equ	0xFEE
 19760                           fsr0h	equ	0xFEA
 19761                           fsr0l	equ	0xFE9
 19762                           wreg	equ	0xFE8
 19763                           postdec1	equ	0xFE5
 19764                           fsr1l	equ	0xFE1
 19765                           indf2	equ	0xFDF
 19766                           postinc2	equ	0xFDE
 19767                           postdec2	equ	0xFDD
 19768                           fsr2h	equ	0xFDA
 19769                           fsr2l	equ	0xFD9
 19770                           status	equ	0xFD8
 19771                           
 19772 ;; *************** function _RTC_Init *****************
 19773 ;; Defined at:
 19774 ;;		line 98 in file "ds1307.h"
 19775 ;; Parameters:    Size  Location     Type
 19776 ;;		None
 19777 ;; Auto vars:     Size  Location     Type
 19778 ;;		None
 19779 ;; Return value:  Size  Location     Type
 19780 ;;                  1    wreg      void 
 19781 ;; Registers used:
 19782 ;;		wreg, status,2, status,0, cstack
 19783 ;; Tracked objects:
 19784 ;;		On entry : 0/0
 19785 ;;		On exit  : 0/0
 19786 ;;		Unchanged: 0/0
 19787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19788 ;;      Params:         0       0       0       0       0       0       0
 19789 ;;      Locals:         0       0       0       0       0       0       0
 19790 ;;      Temps:          0       0       0       0       0       0       0
 19791 ;;      Totals:         0       0       0       0       0       0       0
 19792 ;;Total ram usage:        0 bytes
 19793 ;; Hardware stack levels used:    1
 19794 ;; Hardware stack levels required when called:    8
 19795 ;; This function calls:
 19796 ;;		_I2C_Start
 19797 ;;		_I2C_Stop
 19798 ;;		_I2C_Write
 19799 ;; This function is called by:
 19800 ;;		_main
 19801 ;; This function uses a non-reentrant model
 19802 ;;
 19803                           
 19804                           	psect	text67
 19805  006E80                     __ptext67:
 19806                           	opt stack 0
 19807  006E80                     _RTC_Init:
 19808                           	opt stack 0
 19809  006E80  FFFF               	dw	65535	; assembler added errata NOP
 19810                           
 19811                           ;ds1307.h: 99: I2C_Start();
 19812                           
 19813                           ; BSR set to: 0
 19814                           ;incstack = 0
 19815  006E82  ECB2  F035         	call	_I2C_Start	;wreg free
 19816                           
 19817                           ;ds1307.h: 100: I2C_Write(0xD0);
 19818  006E86  0E00               	movlw	0
 19819  006E88  0100               	movlb	0	; () banked
 19820  006E8A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 19821  006E8C  0ED0               	movlw	208
 19822  006E8E  6F8A               	movwf	I2C_Write@d& (0+255),b
 19823  006E90  ECCB  F035         	call	_I2C_Write	;wreg free
 19824                           
 19825                           ;ds1307.h: 101: I2C_Write(0x07);
 19826  006E94  0E00               	movlw	0
 19827  006E96  0100               	movlb	0	; () banked
 19828  006E98  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 19829  006E9A  0E07               	movlw	7
 19830  006E9C  6F8A               	movwf	I2C_Write@d& (0+255),b
 19831  006E9E  ECCB  F035         	call	_I2C_Write	;wreg free
 19832                           
 19833                           ;ds1307.h: 102: I2C_Write(0x00);
 19834  006EA2  0E00               	movlw	0
 19835  006EA4  0100               	movlb	0	; () banked
 19836  006EA6  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 19837  006EA8  0E00               	movlw	0
 19838  006EAA  6F8A               	movwf	I2C_Write@d& (0+255),b
 19839  006EAC  ECCB  F035         	call	_I2C_Write	;wreg free
 19840                           
 19841                           ;ds1307.h: 103: I2C_Stop();
 19842  006EB0  ECB8  F035         	call	_I2C_Stop	;wreg free
 19843  006EB4  0012               	return		;funcret
 19844  006EB6  FFFF               	dw	65535	; errata NOP
 19845  006EB8                     __end_of_RTC_Init:
 19846                           	opt stack 0
 19847                           tosu	equ	0xFFF
 19848                           tosh	equ	0xFFE
 19849                           tosl	equ	0xFFD
 19850                           pclath	equ	0xFFA
 19851                           tblptru	equ	0xFF8
 19852                           tblptrh	equ	0xFF7
 19853                           tblptrl	equ	0xFF6
 19854                           tablat	equ	0xFF5
 19855                           prodh	equ	0xFF4
 19856                           prodl	equ	0xFF3
 19857                           intcon	equ	0xFF2
 19858                           intcon2	equ	0xFF1
 19859                           intcon3	equ	0xFF0
 19860                           indf0	equ	0xFEF
 19861                           postinc0	equ	0xFEE
 19862                           fsr0h	equ	0xFEA
 19863                           fsr0l	equ	0xFE9
 19864                           wreg	equ	0xFE8
 19865                           postdec1	equ	0xFE5
 19866                           fsr1l	equ	0xFE1
 19867                           indf2	equ	0xFDF
 19868                           postinc2	equ	0xFDE
 19869                           postdec2	equ	0xFDD
 19870                           fsr2h	equ	0xFDA
 19871                           fsr2l	equ	0xFD9
 19872                           status	equ	0xFD8
 19873                           
 19874 ;; *************** function _I2C_Write *****************
 19875 ;; Defined at:
 19876 ;;		line 42 in file "I2C.c"
 19877 ;; Parameters:    Size  Location     Type
 19878 ;;  d               2   10[BANK0 ] unsigned int 
 19879 ;; Auto vars:     Size  Location     Type
 19880 ;;		None
 19881 ;; Return value:  Size  Location     Type
 19882 ;;                  1    wreg      void 
 19883 ;; Registers used:
 19884 ;;		wreg, status,2, status,0, cstack
 19885 ;; Tracked objects:
 19886 ;;		On entry : 0/0
 19887 ;;		On exit  : 0/0
 19888 ;;		Unchanged: 0/0
 19889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19890 ;;      Params:         0       2       0       0       0       0       0
 19891 ;;      Locals:         0       0       0       0       0       0       0
 19892 ;;      Temps:          0       0       0       0       0       0       0
 19893 ;;      Totals:         0       2       0       0       0       0       0
 19894 ;;Total ram usage:        2 bytes
 19895 ;; Hardware stack levels used:    1
 19896 ;; Hardware stack levels required when called:    7
 19897 ;; This function calls:
 19898 ;;		_I2C_Wait
 19899 ;; This function is called by:
 19900 ;;		_setDS1307TimeDate
 19901 ;;		_getDS1307TimeDate
 19902 ;;		_RTC_Init
 19903 ;;		_writeEEPROM_ext
 19904 ;;		_readEEPROM_ext
 19905 ;;		_getDS1307Time
 19906 ;;		_setDS1307Time
 19907 ;; This function uses a non-reentrant model
 19908 ;;
 19909                           
 19910                           	psect	text68
 19911  006B96                     __ptext68:
 19912                           	opt stack 0
 19913  006B96                     _I2C_Write:
 19914                           	opt stack 0
 19915  006B96  FFFF               	dw	65535	; assembler added errata NOP
 19916                           
 19917                           ;I2C.c: 43: I2C_Wait();
 19918                           
 19919                           ;incstack = 0
 19920  006B98  EC03  F036         	call	_I2C_Wait	;wreg free
 19921                           
 19922                           ;I2C.c: 44: SSPBUF = d;
 19923  006B9C  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 19924  006BA0  0012               	return		;funcret
 19925  006BA2  FFFF               	dw	65535	; errata NOP
 19926  006BA4                     __end_of_I2C_Write:
 19927                           	opt stack 0
 19928                           tosu	equ	0xFFF
 19929                           tosh	equ	0xFFE
 19930                           tosl	equ	0xFFD
 19931                           pclath	equ	0xFFA
 19932                           tblptru	equ	0xFF8
 19933                           tblptrh	equ	0xFF7
 19934                           tblptrl	equ	0xFF6
 19935                           tablat	equ	0xFF5
 19936                           prodh	equ	0xFF4
 19937                           prodl	equ	0xFF3
 19938                           intcon	equ	0xFF2
 19939                           intcon2	equ	0xFF1
 19940                           intcon3	equ	0xFF0
 19941                           indf0	equ	0xFEF
 19942                           postinc0	equ	0xFEE
 19943                           fsr0h	equ	0xFEA
 19944                           fsr0l	equ	0xFE9
 19945                           wreg	equ	0xFE8
 19946                           postdec1	equ	0xFE5
 19947                           fsr1l	equ	0xFE1
 19948                           indf2	equ	0xFDF
 19949                           postinc2	equ	0xFDE
 19950                           postdec2	equ	0xFDD
 19951                           fsr2h	equ	0xFDA
 19952                           fsr2l	equ	0xFD9
 19953                           status	equ	0xFD8
 19954                           
 19955 ;; *************** function _I2C_Stop *****************
 19956 ;; Defined at:
 19957 ;;		line 36 in file "I2C.c"
 19958 ;; Parameters:    Size  Location     Type
 19959 ;;		None
 19960 ;; Auto vars:     Size  Location     Type
 19961 ;;		None
 19962 ;; Return value:  Size  Location     Type
 19963 ;;                  1    wreg      void 
 19964 ;; Registers used:
 19965 ;;		wreg, status,2, status,0, cstack
 19966 ;; Tracked objects:
 19967 ;;		On entry : 0/0
 19968 ;;		On exit  : 0/0
 19969 ;;		Unchanged: 0/0
 19970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19971 ;;      Params:         0       0       0       0       0       0       0
 19972 ;;      Locals:         0       0       0       0       0       0       0
 19973 ;;      Temps:          0       0       0       0       0       0       0
 19974 ;;      Totals:         0       0       0       0       0       0       0
 19975 ;;Total ram usage:        0 bytes
 19976 ;; Hardware stack levels used:    1
 19977 ;; Hardware stack levels required when called:    7
 19978 ;; This function calls:
 19979 ;;		_I2C_Wait
 19980 ;; This function is called by:
 19981 ;;		_setDS1307TimeDate
 19982 ;;		_getDS1307TimeDate
 19983 ;;		_RTC_Init
 19984 ;;		_writeEEPROM_ext
 19985 ;;		_readEEPROM_ext
 19986 ;;		_getDS1307Time
 19987 ;;		_setDS1307Time
 19988 ;; This function uses a non-reentrant model
 19989 ;;
 19990                           
 19991                           	psect	text69
 19992  006B70                     __ptext69:
 19993                           	opt stack 0
 19994  006B70                     _I2C_Stop:
 19995                           	opt stack 0
 19996  006B70  FFFF               	dw	65535	; assembler added errata NOP
 19997                           
 19998                           ;I2C.c: 37: I2C_Wait();
 19999                           
 20000                           ;incstack = 0
 20001  006B72  EC03  F036         	call	_I2C_Wait	;wreg free
 20002                           
 20003                           ;I2C.c: 38: PEN = 1;
 20004  006B76  84C5               	bsf	4037,2,c	;volatile
 20005  006B78  0012               	return		;funcret
 20006  006B7A  FFFF               	dw	65535	; errata NOP
 20007  006B7C                     __end_of_I2C_Stop:
 20008                           	opt stack 0
 20009                           tosu	equ	0xFFF
 20010                           tosh	equ	0xFFE
 20011                           tosl	equ	0xFFD
 20012                           pclath	equ	0xFFA
 20013                           tblptru	equ	0xFF8
 20014                           tblptrh	equ	0xFF7
 20015                           tblptrl	equ	0xFF6
 20016                           tablat	equ	0xFF5
 20017                           prodh	equ	0xFF4
 20018                           prodl	equ	0xFF3
 20019                           intcon	equ	0xFF2
 20020                           intcon2	equ	0xFF1
 20021                           intcon3	equ	0xFF0
 20022                           indf0	equ	0xFEF
 20023                           postinc0	equ	0xFEE
 20024                           fsr0h	equ	0xFEA
 20025                           fsr0l	equ	0xFE9
 20026                           wreg	equ	0xFE8
 20027                           postdec1	equ	0xFE5
 20028                           fsr1l	equ	0xFE1
 20029                           indf2	equ	0xFDF
 20030                           postinc2	equ	0xFDE
 20031                           postdec2	equ	0xFDD
 20032                           fsr2h	equ	0xFDA
 20033                           fsr2l	equ	0xFD9
 20034                           status	equ	0xFD8
 20035                           
 20036 ;; *************** function _I2C_Start *****************
 20037 ;; Defined at:
 20038 ;;		line 26 in file "I2C.c"
 20039 ;; Parameters:    Size  Location     Type
 20040 ;;		None
 20041 ;; Auto vars:     Size  Location     Type
 20042 ;;		None
 20043 ;; Return value:  Size  Location     Type
 20044 ;;                  1    wreg      void 
 20045 ;; Registers used:
 20046 ;;		wreg, status,2, status,0, cstack
 20047 ;; Tracked objects:
 20048 ;;		On entry : 0/0
 20049 ;;		On exit  : 0/0
 20050 ;;		Unchanged: 0/0
 20051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20052 ;;      Params:         0       0       0       0       0       0       0
 20053 ;;      Locals:         0       0       0       0       0       0       0
 20054 ;;      Temps:          0       0       0       0       0       0       0
 20055 ;;      Totals:         0       0       0       0       0       0       0
 20056 ;;Total ram usage:        0 bytes
 20057 ;; Hardware stack levels used:    1
 20058 ;; Hardware stack levels required when called:    7
 20059 ;; This function calls:
 20060 ;;		_I2C_Wait
 20061 ;; This function is called by:
 20062 ;;		_setDS1307TimeDate
 20063 ;;		_getDS1307TimeDate
 20064 ;;		_RTC_Init
 20065 ;;		_writeEEPROM_ext
 20066 ;;		_readEEPROM_ext
 20067 ;;		_getDS1307Time
 20068 ;;		_setDS1307Time
 20069 ;; This function uses a non-reentrant model
 20070 ;;
 20071                           
 20072                           	psect	text70
 20073  006B64                     __ptext70:
 20074                           	opt stack 0
 20075  006B64                     _I2C_Start:
 20076                           	opt stack 0
 20077  006B64  FFFF               	dw	65535	; assembler added errata NOP
 20078                           
 20079                           ;I2C.c: 27: I2C_Wait();
 20080                           
 20081                           ;incstack = 0
 20082  006B66  EC03  F036         	call	_I2C_Wait	;wreg free
 20083                           
 20084                           ;I2C.c: 28: SEN = 1;
 20085  006B6A  80C5               	bsf	4037,0,c	;volatile
 20086  006B6C  0012               	return		;funcret
 20087  006B6E  FFFF               	dw	65535	; errata NOP
 20088  006B70                     __end_of_I2C_Start:
 20089                           	opt stack 0
 20090                           tosu	equ	0xFFF
 20091                           tosh	equ	0xFFE
 20092                           tosl	equ	0xFFD
 20093                           pclath	equ	0xFFA
 20094                           tblptru	equ	0xFF8
 20095                           tblptrh	equ	0xFF7
 20096                           tblptrl	equ	0xFF6
 20097                           tablat	equ	0xFF5
 20098                           prodh	equ	0xFF4
 20099                           prodl	equ	0xFF3
 20100                           intcon	equ	0xFF2
 20101                           intcon2	equ	0xFF1
 20102                           intcon3	equ	0xFF0
 20103                           indf0	equ	0xFEF
 20104                           postinc0	equ	0xFEE
 20105                           fsr0h	equ	0xFEA
 20106                           fsr0l	equ	0xFE9
 20107                           wreg	equ	0xFE8
 20108                           postdec1	equ	0xFE5
 20109                           fsr1l	equ	0xFE1
 20110                           indf2	equ	0xFDF
 20111                           postinc2	equ	0xFDE
 20112                           postdec2	equ	0xFDD
 20113                           fsr2h	equ	0xFDA
 20114                           fsr2l	equ	0xFD9
 20115                           status	equ	0xFD8
 20116                           
 20117 ;; *************** function _I2C_Wait *****************
 20118 ;; Defined at:
 20119 ;;		line 22 in file "I2C.c"
 20120 ;; Parameters:    Size  Location     Type
 20121 ;;		None
 20122 ;; Auto vars:     Size  Location     Type
 20123 ;;		None
 20124 ;; Return value:  Size  Location     Type
 20125 ;;                  1    wreg      void 
 20126 ;; Registers used:
 20127 ;;		wreg, status,2, status,0
 20128 ;; Tracked objects:
 20129 ;;		On entry : 0/0
 20130 ;;		On exit  : 0/0
 20131 ;;		Unchanged: 0/0
 20132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20133 ;;      Params:         0       0       0       0       0       0       0
 20134 ;;      Locals:         0       0       0       0       0       0       0
 20135 ;;      Temps:          0       1       0       0       0       0       0
 20136 ;;      Totals:         0       1       0       0       0       0       0
 20137 ;;Total ram usage:        1 bytes
 20138 ;; Hardware stack levels used:    1
 20139 ;; Hardware stack levels required when called:    6
 20140 ;; This function calls:
 20141 ;;		Nothing
 20142 ;; This function is called by:
 20143 ;;		_I2C_Start
 20144 ;;		_I2C_Restart
 20145 ;;		_I2C_Stop
 20146 ;;		_I2C_Write
 20147 ;;		_I2C_Read
 20148 ;; This function uses a non-reentrant model
 20149 ;;
 20150                           
 20151                           	psect	text71
 20152  006C06                     __ptext71:
 20153                           	opt stack 0
 20154  006C06                     _I2C_Wait:
 20155                           	opt stack 0
 20156  006C06  FFFF               	dw	65535	; assembler added errata NOP
 20157                           
 20158                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 20159                           
 20160                           ;incstack = 0
 20161  006C08  B4C7               	btfsc	4039,2,c	;volatile
 20162  006C0A  D7FD               	goto	_I2C_Wait
 20163  006C0C  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 20164  006C10  0E1F               	movlw	31
 20165  006C12  0100               	movlb	0	; () banked
 20166  006C14  1780               	andwf	??_I2C_Wait& (0+255),f,b
 20167  006C16  B4D8               	btfsc	status,2,c
 20168                           
 20169                           ; BSR set to: 0
 20170                           
 20171                           ; BSR set to: 0
 20172  006C18  0012               	return		;funcret
 20173  006C1A  FFFF               	dw	65535	; assembler added errata NOP
 20174  006C1C  D7F4               	goto	_I2C_Wait
 20175  006C1E  FFFF               	dw	65535	; errata NOP
 20176  006C20                     __end_of_I2C_Wait:
 20177                           	opt stack 0
 20178                           tosu	equ	0xFFF
 20179                           tosh	equ	0xFFE
 20180                           tosl	equ	0xFFD
 20181                           pclath	equ	0xFFA
 20182                           tblptru	equ	0xFF8
 20183                           tblptrh	equ	0xFF7
 20184                           tblptrl	equ	0xFF6
 20185                           tablat	equ	0xFF5
 20186                           prodh	equ	0xFF4
 20187                           prodl	equ	0xFF3
 20188                           intcon	equ	0xFF2
 20189                           intcon2	equ	0xFF1
 20190                           intcon3	equ	0xFF0
 20191                           indf0	equ	0xFEF
 20192                           postinc0	equ	0xFEE
 20193                           fsr0h	equ	0xFEA
 20194                           fsr0l	equ	0xFE9
 20195                           wreg	equ	0xFE8
 20196                           postdec1	equ	0xFE5
 20197                           fsr1l	equ	0xFE1
 20198                           indf2	equ	0xFDF
 20199                           postinc2	equ	0xFDE
 20200                           postdec2	equ	0xFDD
 20201                           fsr2h	equ	0xFDA
 20202                           fsr2l	equ	0xFD9
 20203                           status	equ	0xFD8
 20204                           
 20205 ;; *************** function _Lcd_Clear *****************
 20206 ;; Defined at:
 20207 ;;		line 69 in file "lcd.h"
 20208 ;; Parameters:    Size  Location     Type
 20209 ;;		None
 20210 ;; Auto vars:     Size  Location     Type
 20211 ;;		None
 20212 ;; Return value:  Size  Location     Type
 20213 ;;                  1    wreg      void 
 20214 ;; Registers used:
 20215 ;;		wreg, status,2, cstack
 20216 ;; Tracked objects:
 20217 ;;		On entry : 0/0
 20218 ;;		On exit  : 0/0
 20219 ;;		Unchanged: 0/0
 20220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20221 ;;      Params:         0       0       0       0       0       0       0
 20222 ;;      Locals:         0       0       0       0       0       0       0
 20223 ;;      Temps:          0       0       0       0       0       0       0
 20224 ;;      Totals:         0       0       0       0       0       0       0
 20225 ;;Total ram usage:        0 bytes
 20226 ;; Hardware stack levels used:    1
 20227 ;; Hardware stack levels required when called:    8
 20228 ;; This function calls:
 20229 ;;		_Lcd_Cmd
 20230 ;; This function is called by:
 20231 ;;		_main
 20232 ;; This function uses a non-reentrant model
 20233 ;;
 20234                           
 20235                           	psect	text72
 20236  006BB2                     __ptext72:
 20237                           	opt stack 0
 20238  006BB2                     _Lcd_Clear:
 20239                           	opt stack 0
 20240  006BB2  FFFF               	dw	65535	; assembler added errata NOP
 20241                           
 20242                           ;lcd.h: 70: Lcd_Cmd(0);
 20243                           
 20244                           ; BSR set to: 0
 20245                           ;incstack = 0
 20246  006BB4  0E00               	movlw	0
 20247  006BB6  EC79  F036         	call	_Lcd_Cmd
 20248                           
 20249                           ;lcd.h: 71: Lcd_Cmd(1);
 20250  006BBA  0E01               	movlw	1
 20251  006BBC  EC79  F036         	call	_Lcd_Cmd
 20252  006BC0  0012               	return		;funcret
 20253  006BC2  FFFF               	dw	65535	; errata NOP
 20254  006BC4                     __end_of_Lcd_Clear:
 20255                           	opt stack 0
 20256                           tosu	equ	0xFFF
 20257                           tosh	equ	0xFFE
 20258                           tosl	equ	0xFFD
 20259                           pclath	equ	0xFFA
 20260                           tblptru	equ	0xFF8
 20261                           tblptrh	equ	0xFF7
 20262                           tblptrl	equ	0xFF6
 20263                           tablat	equ	0xFF5
 20264                           prodh	equ	0xFF4
 20265                           prodl	equ	0xFF3
 20266                           intcon	equ	0xFF2
 20267                           intcon2	equ	0xFF1
 20268                           intcon3	equ	0xFF0
 20269                           indf0	equ	0xFEF
 20270                           postinc0	equ	0xFEE
 20271                           fsr0h	equ	0xFEA
 20272                           fsr0l	equ	0xFE9
 20273                           wreg	equ	0xFE8
 20274                           postdec1	equ	0xFE5
 20275                           fsr1l	equ	0xFE1
 20276                           indf2	equ	0xFDF
 20277                           postinc2	equ	0xFDE
 20278                           postdec2	equ	0xFDD
 20279                           fsr2h	equ	0xFDA
 20280                           fsr2l	equ	0xFD9
 20281                           status	equ	0xFD8
 20282                           
 20283 ;; *************** function _Lcd_Cmd *****************
 20284 ;; Defined at:
 20285 ;;		line 61 in file "lcd.h"
 20286 ;; Parameters:    Size  Location     Type
 20287 ;;  a               1    wreg     unsigned char 
 20288 ;; Auto vars:     Size  Location     Type
 20289 ;;  a               1    2[BANK0 ] unsigned char 
 20290 ;; Return value:  Size  Location     Type
 20291 ;;                  1    wreg      void 
 20292 ;; Registers used:
 20293 ;;		wreg, status,2, cstack
 20294 ;; Tracked objects:
 20295 ;;		On entry : 0/0
 20296 ;;		On exit  : 0/0
 20297 ;;		Unchanged: 0/0
 20298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20299 ;;      Params:         0       0       0       0       0       0       0
 20300 ;;      Locals:         0       1       0       0       0       0       0
 20301 ;;      Temps:          0       1       0       0       0       0       0
 20302 ;;      Totals:         0       2       0       0       0       0       0
 20303 ;;Total ram usage:        2 bytes
 20304 ;; Hardware stack levels used:    1
 20305 ;; Hardware stack levels required when called:    7
 20306 ;; This function calls:
 20307 ;;		_Lcd_Port
 20308 ;; This function is called by:
 20309 ;;		_Lcd_Init
 20310 ;;		_Lcd_Clear
 20311 ;;		_Lcd_Set_Cursor
 20312 ;;		_criarCaracteresCGRAM
 20313 ;; This function uses a non-reentrant model
 20314 ;;
 20315                           
 20316                           	psect	text73
 20317  006CF2                     __ptext73:
 20318                           	opt stack 0
 20319  006CF2                     _Lcd_Cmd:
 20320                           	opt stack 0
 20321  006CF2  FFFF               	dw	65535	; assembler added errata NOP
 20322                           
 20323                           ;incstack = 0
 20324                           ;Lcd_Cmd@a stored from wreg
 20325  006CF4  0100               	movlb	0	; () banked
 20326  006CF6  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 20327                           
 20328                           ;lcd.h: 62: PORTDbits.RD1 = 0;
 20329  006CF8  9283               	bcf	3971,1,c	;volatile
 20330                           
 20331                           ;lcd.h: 63: Lcd_Port(a);
 20332  006CFA  0100               	movlb	0	; () banked
 20333  006CFC  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 20334  006CFE  ECE4  F038         	call	_Lcd_Port
 20335                           
 20336                           ;lcd.h: 64: PORTDbits.RD0 = 1;
 20337  006D02  8083               	bsf	3971,0,c	;volatile
 20338                           
 20339                           ;lcd.h: 65: _delay((unsigned long)((15)*(8000000/4000.0)));
 20340  006D04  0E1E               	movlw	30
 20341  006D06  0100               	movlb	0	; () banked
 20342  006D08  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 20343  006D0A  0E3C               	movlw	60
 20344  006D0C                     u9207:
 20345  006D0C  FFFF               	dw	65535	; errata NOP
 20346  006D0E  2EE8               	decfsz	wreg,f,c
 20347  006D10  D7FD               	bra	u9207
 20348  006D12  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 20349  006D14  D7FB               	bra	u9207
 20350  006D16  F000               	nop	
 20351                           
 20352                           ;lcd.h: 66: PORTDbits.RD0 = 0;
 20353  006D18  9083               	bcf	3971,0,c	;volatile
 20354  006D1A  0012               	return		;funcret
 20355  006D1C  FFFF               	dw	65535	; errata NOP
 20356  006D1E                     __end_of_Lcd_Cmd:
 20357                           	opt stack 0
 20358                           tosu	equ	0xFFF
 20359                           tosh	equ	0xFFE
 20360                           tosl	equ	0xFFD
 20361                           pclath	equ	0xFFA
 20362                           tblptru	equ	0xFF8
 20363                           tblptrh	equ	0xFF7
 20364                           tblptrl	equ	0xFF6
 20365                           tablat	equ	0xFF5
 20366                           prodh	equ	0xFF4
 20367                           prodl	equ	0xFF3
 20368                           intcon	equ	0xFF2
 20369                           intcon2	equ	0xFF1
 20370                           intcon3	equ	0xFF0
 20371                           indf0	equ	0xFEF
 20372                           postinc0	equ	0xFEE
 20373                           fsr0h	equ	0xFEA
 20374                           fsr0l	equ	0xFE9
 20375                           wreg	equ	0xFE8
 20376                           postdec1	equ	0xFE5
 20377                           fsr1l	equ	0xFE1
 20378                           indf2	equ	0xFDF
 20379                           postinc2	equ	0xFDE
 20380                           postdec2	equ	0xFDD
 20381                           fsr2h	equ	0xFDA
 20382                           fsr2l	equ	0xFD9
 20383                           status	equ	0xFD8
 20384                           
 20385 ;; *************** function _Lcd_Port *****************
 20386 ;; Defined at:
 20387 ;;		line 39 in file "lcd.h"
 20388 ;; Parameters:    Size  Location     Type
 20389 ;;  a               1    wreg     unsigned char 
 20390 ;; Auto vars:     Size  Location     Type
 20391 ;;  a               1    0[BANK0 ] unsigned char 
 20392 ;; Return value:  Size  Location     Type
 20393 ;;                  1    wreg      void 
 20394 ;; Registers used:
 20395 ;;		wreg
 20396 ;; Tracked objects:
 20397 ;;		On entry : 0/0
 20398 ;;		On exit  : 0/0
 20399 ;;		Unchanged: 0/0
 20400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20401 ;;      Params:         0       0       0       0       0       0       0
 20402 ;;      Locals:         0       1       0       0       0       0       0
 20403 ;;      Temps:          0       0       0       0       0       0       0
 20404 ;;      Totals:         0       1       0       0       0       0       0
 20405 ;;Total ram usage:        1 bytes
 20406 ;; Hardware stack levels used:    1
 20407 ;; Hardware stack levels required when called:    6
 20408 ;; This function calls:
 20409 ;;		Nothing
 20410 ;; This function is called by:
 20411 ;;		_Lcd_Init
 20412 ;;		_Lcd_Cmd
 20413 ;;		_Lcd_Write_Char
 20414 ;; This function uses a non-reentrant model
 20415 ;;
 20416                           
 20417                           	psect	text74
 20418  0071C8                     __ptext74:
 20419                           	opt stack 0
 20420  0071C8                     _Lcd_Port:
 20421                           	opt stack 0
 20422  0071C8  FFFF               	dw	65535	; assembler added errata NOP
 20423                           
 20424                           ;incstack = 0
 20425                           ;Lcd_Port@a stored from wreg
 20426  0071CA  0100               	movlb	0	; () banked
 20427  0071CC  6F80               	movwf	Lcd_Port@a& (0+255),b
 20428                           
 20429                           ;lcd.h: 40: if (a & 1)
 20430  0071CE  0100               	movlb	0	; () banked
 20431  0071D0  A180               	btfss	Lcd_Port@a& (0+255),0,b
 20432  0071D2  D002               	goto	l606
 20433                           
 20434                           ; BSR set to: 0
 20435                           ;lcd.h: 41: PORTDbits.RD2 = 1;
 20436  0071D4  8483               	bsf	3971,2,c	;volatile
 20437  0071D6  D002               	goto	l607
 20438  0071D8                     l606:
 20439  0071D8  FFFF               	dw	65535	; assembler added errata NOP
 20440                           
 20441                           ; BSR set to: 0
 20442                           ;lcd.h: 42: else
 20443                           ;lcd.h: 43: PORTDbits.RD2 = 0;
 20444  0071DA  9483               	bcf	3971,2,c	;volatile
 20445  0071DC                     l607:
 20446  0071DC  FFFF               	dw	65535	; assembler added errata NOP
 20447                           
 20448                           ; BSR set to: 0
 20449                           ;lcd.h: 45: if (a & 2)
 20450                           
 20451                           ; BSR set to: 0
 20452  0071DE  A380               	btfss	Lcd_Port@a& (0+255),1,b
 20453  0071E0  D002               	goto	l608
 20454                           
 20455                           ; BSR set to: 0
 20456                           ;lcd.h: 46: PORTDbits.RD3 = 1;
 20457  0071E2  8683               	bsf	3971,3,c	;volatile
 20458  0071E4  D002               	goto	l609
 20459  0071E6                     l608:
 20460  0071E6  FFFF               	dw	65535	; assembler added errata NOP
 20461                           
 20462                           ; BSR set to: 0
 20463                           ;lcd.h: 47: else
 20464                           ;lcd.h: 48: PORTDbits.RD3 = 0;
 20465  0071E8  9683               	bcf	3971,3,c	;volatile
 20466  0071EA                     l609:
 20467  0071EA  FFFF               	dw	65535	; assembler added errata NOP
 20468                           
 20469                           ; BSR set to: 0
 20470                           ;lcd.h: 50: if (a & 4)
 20471                           
 20472                           ; BSR set to: 0
 20473  0071EC  A580               	btfss	Lcd_Port@a& (0+255),2,b
 20474  0071EE  D002               	goto	l610
 20475                           
 20476                           ; BSR set to: 0
 20477                           ;lcd.h: 51: PORTDbits.RD4 = 1;
 20478  0071F0  8883               	bsf	3971,4,c	;volatile
 20479  0071F2  D002               	goto	l611
 20480  0071F4                     l610:
 20481  0071F4  FFFF               	dw	65535	; assembler added errata NOP
 20482                           
 20483                           ; BSR set to: 0
 20484                           ;lcd.h: 52: else
 20485                           ;lcd.h: 53: PORTDbits.RD4 = 0;
 20486  0071F6  9883               	bcf	3971,4,c	;volatile
 20487  0071F8                     l611:
 20488  0071F8  FFFF               	dw	65535	; assembler added errata NOP
 20489                           
 20490                           ; BSR set to: 0
 20491                           ;lcd.h: 55: if (a & 8)
 20492                           
 20493                           ; BSR set to: 0
 20494  0071FA  A780               	btfss	Lcd_Port@a& (0+255),3,b
 20495  0071FC  D002               	goto	l612
 20496                           
 20497                           ; BSR set to: 0
 20498                           ;lcd.h: 56: PORTDbits.RD5 = 1;
 20499  0071FE  8A83               	bsf	3971,5,c	;volatile
 20500  007200  D002               	goto	l613
 20501  007202                     l612:
 20502  007202  FFFF               	dw	65535	; assembler added errata NOP
 20503                           
 20504                           ; BSR set to: 0
 20505                           ;lcd.h: 57: else
 20506                           ;lcd.h: 58: PORTDbits.RD5 = 0;
 20507  007204  9A83               	bcf	3971,5,c	;volatile
 20508  007206                     l613:
 20509  007206  FFFF               	dw	65535	; assembler added errata NOP
 20510                           
 20511                           ; BSR set to: 0
 20512                           
 20513                           ; BSR set to: 0
 20514  007208  0012               	return		;funcret
 20515  00720A  FFFF               	dw	65535	; errata NOP
 20516  00720C                     __end_of_Lcd_Port:
 20517                           	opt stack 0
 20518                           tosu	equ	0xFFF
 20519                           tosh	equ	0xFFE
 20520                           tosl	equ	0xFFD
 20521                           pclath	equ	0xFFA
 20522                           tblptru	equ	0xFF8
 20523                           tblptrh	equ	0xFF7
 20524                           tblptrl	equ	0xFF6
 20525                           tablat	equ	0xFF5
 20526                           prodh	equ	0xFF4
 20527                           prodl	equ	0xFF3
 20528                           intcon	equ	0xFF2
 20529                           intcon2	equ	0xFF1
 20530                           intcon3	equ	0xFF0
 20531                           indf0	equ	0xFEF
 20532                           postinc0	equ	0xFEE
 20533                           fsr0h	equ	0xFEA
 20534                           fsr0l	equ	0xFE9
 20535                           wreg	equ	0xFE8
 20536                           postdec1	equ	0xFE5
 20537                           fsr1l	equ	0xFE1
 20538                           indf2	equ	0xFDF
 20539                           postinc2	equ	0xFDE
 20540                           postdec2	equ	0xFDD
 20541                           fsr2h	equ	0xFDA
 20542                           fsr2l	equ	0xFD9
 20543                           status	equ	0xFD8
 20544                           
 20545 ;; *************** function _I2C_Master_Init *****************
 20546 ;; Defined at:
 20547 ;;		line 13 in file "I2C.c"
 20548 ;; Parameters:    Size  Location     Type
 20549 ;;  c               4   13[BANK0 ] const unsigned long 
 20550 ;; Auto vars:     Size  Location     Type
 20551 ;;		None
 20552 ;; Return value:  Size  Location     Type
 20553 ;;                  1    wreg      void 
 20554 ;; Registers used:
 20555 ;;		wreg, status,2, status,0, cstack
 20556 ;; Tracked objects:
 20557 ;;		On entry : 0/0
 20558 ;;		On exit  : 0/0
 20559 ;;		Unchanged: 0/0
 20560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20561 ;;      Params:         0       4       0       0       0       0       0
 20562 ;;      Locals:         0       0       0       0       0       0       0
 20563 ;;      Temps:          0       4       0       0       0       0       0
 20564 ;;      Totals:         0       8       0       0       0       0       0
 20565 ;;Total ram usage:        8 bytes
 20566 ;; Hardware stack levels used:    1
 20567 ;; Hardware stack levels required when called:    7
 20568 ;; This function calls:
 20569 ;;		___lldiv
 20570 ;; This function is called by:
 20571 ;;		_main
 20572 ;; This function uses a non-reentrant model
 20573 ;;
 20574                           
 20575                           	psect	text75
 20576  0074F6                     __ptext75:
 20577                           	opt stack 0
 20578  0074F6                     _I2C_Master_Init:
 20579                           	opt stack 0
 20580  0074F6  FFFF               	dw	65535	; assembler added errata NOP
 20581                           
 20582                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 20583                           
 20584                           ; BSR set to: 0
 20585                           ;incstack = 0
 20586  0074F8  0E28               	movlw	40
 20587  0074FA  6EC6               	movwf	4038,c	;volatile
 20588                           
 20589                           ;I2C.c: 15: SSPCON2 = 0;
 20590  0074FC  0E00               	movlw	0
 20591  0074FE  6EC5               	movwf	4037,c	;volatile
 20592                           
 20593                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 20594  007500  0E00               	movlw	0
 20595  007502  0100               	movlb	0	; () banked
 20596  007504  6F80               	movwf	___lldiv@dividend& (0+255),b
 20597  007506  0E12               	movlw	18
 20598  007508  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 20599  00750A  0E7A               	movlw	122
 20600  00750C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 20601  00750E  0E00               	movlw	0
 20602  007510  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 20603  007512  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 20604  007516  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 20605  00751A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 20606  00751E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 20607  007522  0E02               	movlw	2
 20608  007524                     u8675:
 20609  007524  FFFF               	dw	65535	; assembler added errata NOP
 20610  007526  90D8               	bcf	status,0,c
 20611  007528  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 20612  00752A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 20613  00752C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 20614  00752E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 20615  007530  2EE8               	decfsz	wreg,f,c
 20616  007532  D7F8               	goto	u8675
 20617  007534  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 20618  007538  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 20619  00753C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 20620  007540  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 20621  007544  ECA5  F03C         	call	___lldiv	;wreg free
 20622  007548  0100               	movlb	0	; () banked
 20623  00754A  0580               	decf	?___lldiv& (0+255),w,b
 20624  00754C  6EC8               	movwf	4040,c	;volatile
 20625                           
 20626                           ; BSR set to: 0
 20627                           ;I2C.c: 17: SSPSTAT = 0;
 20628  00754E  0E00               	movlw	0
 20629  007550  6EC7               	movwf	4039,c	;volatile
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 20633  007552  8694               	bsf	3988,3,c	;volatile
 20634                           
 20635                           ; BSR set to: 0
 20636                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 20637  007554  8894               	bsf	3988,4,c	;volatile
 20638                           
 20639                           ; BSR set to: 0
 20640  007556  0012               	return		;funcret
 20641  007558  FFFF               	dw	65535	; errata NOP
 20642  00755A                     __end_of_I2C_Master_Init:
 20643                           	opt stack 0
 20644                           tosu	equ	0xFFF
 20645                           tosh	equ	0xFFE
 20646                           tosl	equ	0xFFD
 20647                           pclath	equ	0xFFA
 20648                           tblptru	equ	0xFF8
 20649                           tblptrh	equ	0xFF7
 20650                           tblptrl	equ	0xFF6
 20651                           tablat	equ	0xFF5
 20652                           prodh	equ	0xFF4
 20653                           prodl	equ	0xFF3
 20654                           intcon	equ	0xFF2
 20655                           intcon2	equ	0xFF1
 20656                           intcon3	equ	0xFF0
 20657                           indf0	equ	0xFEF
 20658                           postinc0	equ	0xFEE
 20659                           fsr0h	equ	0xFEA
 20660                           fsr0l	equ	0xFE9
 20661                           wreg	equ	0xFE8
 20662                           postdec1	equ	0xFE5
 20663                           fsr1l	equ	0xFE1
 20664                           indf2	equ	0xFDF
 20665                           postinc2	equ	0xFDE
 20666                           postdec2	equ	0xFDD
 20667                           fsr2h	equ	0xFDA
 20668                           fsr2l	equ	0xFD9
 20669                           status	equ	0xFD8
 20670                           
 20671 ;; *************** function ___lldiv *****************
 20672 ;; Defined at:
 20673 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 20674 ;; Parameters:    Size  Location     Type
 20675 ;;  dividend        4    0[BANK0 ] unsigned long 
 20676 ;;  divisor         4    4[BANK0 ] unsigned long 
 20677 ;; Auto vars:     Size  Location     Type
 20678 ;;  quotient        4    8[BANK0 ] unsigned long 
 20679 ;;  counter         1   12[BANK0 ] unsigned char 
 20680 ;; Return value:  Size  Location     Type
 20681 ;;                  4    0[BANK0 ] unsigned long 
 20682 ;; Registers used:
 20683 ;;		wreg, status,2, status,0
 20684 ;; Tracked objects:
 20685 ;;		On entry : 0/0
 20686 ;;		On exit  : 0/0
 20687 ;;		Unchanged: 0/0
 20688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20689 ;;      Params:         0       8       0       0       0       0       0
 20690 ;;      Locals:         0       5       0       0       0       0       0
 20691 ;;      Temps:          0       0       0       0       0       0       0
 20692 ;;      Totals:         0      13       0       0       0       0       0
 20693 ;;Total ram usage:       13 bytes
 20694 ;; Hardware stack levels used:    1
 20695 ;; Hardware stack levels required when called:    6
 20696 ;; This function calls:
 20697 ;;		Nothing
 20698 ;; This function is called by:
 20699 ;;		_I2C_Master_Init
 20700 ;; This function uses a non-reentrant model
 20701 ;;
 20702                           
 20703                           	psect	text76
 20704  00794A                     __ptext76:
 20705                           	opt stack 0
 20706  00794A                     ___lldiv:
 20707                           	opt stack 0
 20708  00794A  FFFF               	dw	65535	; assembler added errata NOP
 20709                           
 20710                           ; BSR set to: 0
 20711                           ;incstack = 0
 20712  00794C  0E00               	movlw	0
 20713  00794E  0100               	movlb	0	; () banked
 20714  007950  6F88               	movwf	___lldiv@quotient& (0+255),b
 20715  007952  0E00               	movlw	0
 20716  007954  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 20717  007956  0E00               	movlw	0
 20718  007958  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 20719  00795A  0E00               	movlw	0
 20720  00795C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 20721                           
 20722                           ; BSR set to: 0
 20723  00795E  5184               	movf	___lldiv@divisor& (0+255),w,b
 20724  007960  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 20725  007962  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 20726  007964  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 20727  007966  B4D8               	btfsc	status,2,c
 20728  007968  D02E               	goto	l1557
 20729                           
 20730                           ; BSR set to: 0
 20731  00796A  0E01               	movlw	1
 20732  00796C  6F8C               	movwf	___lldiv@counter& (0+255),b
 20733  00796E  D007               	goto	l1552
 20734  007970  FFFF               	dw	65535	; assembler added errata NOP
 20735                           
 20736                           ; BSR set to: 0
 20737                           
 20738                           ; BSR set to: 0
 20739  007972  90D8               	bcf	status,0,c
 20740  007974  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 20741  007976  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 20742  007978  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 20743  00797A  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 20744  00797C  2B8C               	incf	___lldiv@counter& (0+255),f,b
 20745  00797E                     l1552:
 20746  00797E  FFFF               	dw	65535	; assembler added errata NOP
 20747                           
 20748                           ; BSR set to: 0
 20749                           
 20750                           ; BSR set to: 0
 20751  007980  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 20752  007982  D7F6               	goto	l1553
 20753  007984                     u6450:
 20754  007984  FFFF               	dw	65535	; assembler added errata NOP
 20755                           
 20756                           ; BSR set to: 0
 20757                           
 20758                           ; BSR set to: 0
 20759                           
 20760                           ; BSR set to: 0
 20761  007986  90D8               	bcf	status,0,c
 20762  007988  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 20763  00798A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 20764  00798C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 20765  00798E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 20766                           
 20767                           ; BSR set to: 0
 20768  007990  5184               	movf	___lldiv@divisor& (0+255),w,b
 20769  007992  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 20770  007994  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20771  007996  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 20772  007998  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20773  00799A  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 20774  00799C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20775  00799E  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 20776  0079A0  A0D8               	btfss	status,0,c
 20777  0079A2  D009               	goto	l1556
 20778                           
 20779                           ; BSR set to: 0
 20780  0079A4  5184               	movf	___lldiv@divisor& (0+255),w,b
 20781  0079A6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 20782  0079A8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20783  0079AA  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 20784  0079AC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20785  0079AE  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 20786  0079B0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20787  0079B2  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 20788                           
 20789                           ; BSR set to: 0
 20790  0079B4  8188               	bsf	___lldiv@quotient& (0+255),0,b
 20791  0079B6                     l1556:
 20792  0079B6  FFFF               	dw	65535	; assembler added errata NOP
 20793                           
 20794                           ; BSR set to: 0
 20795                           
 20796                           ; BSR set to: 0
 20797  0079B8  90D8               	bcf	status,0,c
 20798  0079BA  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 20799  0079BC  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 20800  0079BE  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 20801  0079C0  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 20802                           
 20803                           ; BSR set to: 0
 20804  0079C2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 20805  0079C4  D7DF               	goto	u6450
 20806  0079C6                     l1557:
 20807  0079C6  FFFF               	dw	65535	; assembler added errata NOP
 20808                           
 20809                           ; BSR set to: 0
 20810                           
 20811                           ; BSR set to: 0
 20812  0079C8  C088  F080         	movff	___lldiv@quotient,?___lldiv
 20813  0079CC  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 20814  0079D0  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 20815  0079D4  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 20816                           
 20817                           ; BSR set to: 0
 20818  0079D8  0012               	return		;funcret
 20819  0079DA  FFFF               	dw	65535	; errata NOP
 20820  0079DC                     __end_of___lldiv:
 20821                           	opt stack 0
 20822                           tosu	equ	0xFFF
 20823                           tosh	equ	0xFFE
 20824                           tosl	equ	0xFFD
 20825                           pclath	equ	0xFFA
 20826                           tblptru	equ	0xFF8
 20827                           tblptrh	equ	0xFF7
 20828                           tblptrl	equ	0xFF6
 20829                           tablat	equ	0xFF5
 20830                           prodh	equ	0xFF4
 20831                           prodl	equ	0xFF3
 20832                           intcon	equ	0xFF2
 20833                           intcon2	equ	0xFF1
 20834                           intcon3	equ	0xFF0
 20835                           indf0	equ	0xFEF
 20836                           postinc0	equ	0xFEE
 20837                           fsr0h	equ	0xFEA
 20838                           fsr0l	equ	0xFE9
 20839                           wreg	equ	0xFE8
 20840                           postdec1	equ	0xFE5
 20841                           fsr1l	equ	0xFE1
 20842                           indf2	equ	0xFDF
 20843                           postinc2	equ	0xFDE
 20844                           postdec2	equ	0xFDD
 20845                           fsr2h	equ	0xFDA
 20846                           fsr2l	equ	0xFD9
 20847                           status	equ	0xFD8
 20848                           
 20849 ;; *************** function _TIMER *****************
 20850 ;; Defined at:
 20851 ;;		line 31 in file "Main.c"
 20852 ;; Parameters:    Size  Location     Type
 20853 ;;		None
 20854 ;; Auto vars:     Size  Location     Type
 20855 ;;  c               1   96[COMRAM] unsigned char 
 20856 ;; Return value:  Size  Location     Type
 20857 ;;                  1    wreg      void 
 20858 ;; Registers used:
 20859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20860 ;; Tracked objects:
 20861 ;;		On entry : 0/0
 20862 ;;		On exit  : 0/0
 20863 ;;		Unchanged: 0/0
 20864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20865 ;;      Params:         0       0       0       0       0       0       0
 20866 ;;      Locals:        19       0       0       0       0       0       0
 20867 ;;      Temps:         18       0       0       0       0       0       0
 20868 ;;      Totals:        37       0       0       0       0       0       0
 20869 ;;Total ram usage:       37 bytes
 20870 ;; Hardware stack levels used:    1
 20871 ;; Hardware stack levels required when called:    5
 20872 ;; This function calls:
 20873 ;;		_readButtons
 20874 ;;		_timer
 20875 ;; This function is called by:
 20876 ;;		Interrupt level 2
 20877 ;; This function uses a non-reentrant model
 20878 ;;
 20879                           
 20880                           	psect	intcode
 20881  000008                     __pintcode:
 20882                           	opt stack 0
 20883  000008                     _TIMER:
 20884                           	opt stack 0
 20885  000008  FFFF               	dw	65535	; assembler added errata NOP
 20886                           
 20887                           ; BSR set to: 0
 20888                           ;incstack = 0
 20889  00000A  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20890  00000C  CFFA F03D          	movff	pclath,??_TIMER
 20891  000010  CFFB F03E          	movff	pclatu,??_TIMER+1
 20892  000014  CFE9 F03F          	movff	fsr0l,??_TIMER+2
 20893  000018  CFEA F040          	movff	fsr0h,??_TIMER+3
 20894  00001C  CFE1 F041          	movff	fsr1l,??_TIMER+4
 20895  000020  CFE2 F042          	movff	fsr1h,??_TIMER+5
 20896  000024  CFD9 F043          	movff	fsr2l,??_TIMER+6
 20897  000028  CFDA F044          	movff	fsr2h,??_TIMER+7
 20898  00002C  CFF3 F045          	movff	prodl,??_TIMER+8
 20899  000030  CFF4 F046          	movff	prodh,??_TIMER+9
 20900  000034  CFF6 F047          	movff	tblptrl,??_TIMER+10
 20901  000038  CFF7 F048          	movff	tblptrh,??_TIMER+11
 20902  00003C  CFF8 F049          	movff	tblptru,??_TIMER+12
 20903  000040  CFF5 F04A          	movff	tablat,??_TIMER+13
 20904  000044  C07F  F04B         	movff	btemp,??_TIMER+14
 20905  000048  C080  F04C         	movff	btemp+1,??_TIMER+15
 20906  00004C  C081  F04D         	movff	btemp+2,??_TIMER+16
 20907  000050  C082  F04E         	movff	btemp+3,??_TIMER+17
 20908                           
 20909                           ;Main.c: 32: if (TMR0IF) {
 20910  000054  A4F2               	btfss	intcon,2,c	;volatile
 20911  000056  D0C3               	goto	i2l962
 20912                           
 20913                           ;Main.c: 33: TMR0IF = 0x00;
 20914  000058  94F2               	bcf	intcon,2,c	;volatile
 20915                           
 20916                           ;Main.c: 34: TMR0H = 0x3C;
 20917  00005A  0E3C               	movlw	60
 20918  00005C  6ED7               	movwf	4055,c	;volatile
 20919                           
 20920                           ;Main.c: 35: TMR0L = 0xB0;
 20921  00005E  0EB0               	movlw	176
 20922  000060  6ED6               	movwf	4054,c	;volatile
 20923                           
 20924                           ;Main.c: 37: timerBase = (unsigned char) (timerBase <= 0 ? 0 : --timerBase);
 20925  000062  5073               	movf	_timerBase,w,c
 20926  000064  B4D8               	btfsc	status,2,c
 20927  000066  D005               	goto	i2l920
 20928  000068  0673               	decf	_timerBase,f,c
 20929  00006A  C073  F04F         	movff	_timerBase,_TIMER$1671
 20930  00006E  6A50               	clrf	_TIMER$1671+1,c
 20931  000070  D005               	goto	i2l922
 20932  000072                     i2l920:
 20933  000072  FFFF               	dw	65535	; assembler added errata NOP
 20934  000074  0E00               	movlw	0
 20935  000076  6E50               	movwf	_TIMER$1671+1,c
 20936  000078  0E00               	movlw	0
 20937  00007A  6E4F               	movwf	_TIMER$1671,c
 20938  00007C                     i2l922:
 20939  00007C  FFFF               	dw	65535	; assembler added errata NOP
 20940  00007E  C04F  F073         	movff	_TIMER$1671,_timerBase
 20941                           
 20942                           ;Main.c: 38: timerPiscarLCD = (unsigned char) (timerPiscarLCD <= 0 ? 0 : --timerPiscarLC
      +                          D);
 20943  000082  5072               	movf	_timerPiscarLCD,w,c
 20944  000084  B4D8               	btfsc	status,2,c
 20945  000086  D005               	goto	i2l924
 20946  000088  0672               	decf	_timerPiscarLCD,f,c
 20947  00008A  C072  F051         	movff	_timerPiscarLCD,_TIMER$1672
 20948  00008E  6A52               	clrf	_TIMER$1672+1,c
 20949  000090  D005               	goto	i2l926
 20950  000092                     i2l924:
 20951  000092  FFFF               	dw	65535	; assembler added errata NOP
 20952  000094  0E00               	movlw	0
 20953  000096  6E52               	movwf	_TIMER$1672+1,c
 20954  000098  0E00               	movlw	0
 20955  00009A  6E51               	movwf	_TIMER$1672,c
 20956  00009C                     i2l926:
 20957  00009C  FFFF               	dw	65535	; assembler added errata NOP
 20958  00009E  C051  F072         	movff	_TIMER$1672,_timerPiscarLCD
 20959                           
 20960                           ;Main.c: 39: timerAtrasoLCD = (unsigned char) (timerAtrasoLCD <= 0 ? 0 : --timerAtrasoLC
      +                          D);
 20961  0000A2  5074               	movf	_timerAtrasoLCD,w,c
 20962  0000A4  B4D8               	btfsc	status,2,c
 20963  0000A6  D005               	goto	i2l928
 20964  0000A8  0674               	decf	_timerAtrasoLCD,f,c
 20965  0000AA  C074  F053         	movff	_timerAtrasoLCD,_TIMER$1673
 20966  0000AE  6A54               	clrf	_TIMER$1673+1,c
 20967  0000B0  D005               	goto	i2l930
 20968  0000B2                     i2l928:
 20969  0000B2  FFFF               	dw	65535	; assembler added errata NOP
 20970  0000B4  0E00               	movlw	0
 20971  0000B6  6E54               	movwf	_TIMER$1673+1,c
 20972  0000B8  0E00               	movlw	0
 20973  0000BA  6E53               	movwf	_TIMER$1673,c
 20974  0000BC                     i2l930:
 20975  0000BC  FFFF               	dw	65535	; assembler added errata NOP
 20976  0000BE  C053  F074         	movff	_TIMER$1673,_timerAtrasoLCD
 20977                           
 20978                           ;Main.c: 40: timerColetaLeitura = (unsigned char) (timerColetaLeitura <= 0 ? 0 : --timer
      +                          ColetaLeitura);
 20979  0000C2  5071               	movf	_timerColetaLeitura,w,c
 20980  0000C4  B4D8               	btfsc	status,2,c
 20981  0000C6  D005               	goto	i2l932
 20982  0000C8  0671               	decf	_timerColetaLeitura,f,c
 20983  0000CA  C071  F055         	movff	_timerColetaLeitura,_TIMER$1674
 20984  0000CE  6A56               	clrf	_TIMER$1674+1,c
 20985  0000D0  D005               	goto	i2l934
 20986  0000D2                     i2l932:
 20987  0000D2  FFFF               	dw	65535	; assembler added errata NOP
 20988  0000D4  0E00               	movlw	0
 20989  0000D6  6E56               	movwf	_TIMER$1674+1,c
 20990  0000D8  0E00               	movlw	0
 20991  0000DA  6E55               	movwf	_TIMER$1674,c
 20992  0000DC                     i2l934:
 20993  0000DC  FFFF               	dw	65535	; assembler added errata NOP
 20994  0000DE  C055  F071         	movff	_TIMER$1674,_timerColetaLeitura
 20995                           
 20996                           ;Main.c: 41: timerTrocarTextoLcd = (unsigned char) (timerTrocarTextoLcd <= 0 ? 0 : --tim
      +                          erTrocarTextoLcd);
 20997  0000E2  5075               	movf	_timerTrocarTextoLcd,w,c
 20998  0000E4  B4D8               	btfsc	status,2,c
 20999  0000E6  D005               	goto	i2l936
 21000  0000E8  0675               	decf	_timerTrocarTextoLcd,f,c
 21001  0000EA  C075  F057         	movff	_timerTrocarTextoLcd,_TIMER$1675
 21002  0000EE  6A58               	clrf	_TIMER$1675+1,c
 21003  0000F0  D005               	goto	i2l938
 21004  0000F2                     i2l936:
 21005  0000F2  FFFF               	dw	65535	; assembler added errata NOP
 21006  0000F4  0E00               	movlw	0
 21007  0000F6  6E58               	movwf	_TIMER$1675+1,c
 21008  0000F8  0E00               	movlw	0
 21009  0000FA  6E57               	movwf	_TIMER$1675,c
 21010  0000FC                     i2l938:
 21011  0000FC  FFFF               	dw	65535	; assembler added errata NOP
 21012  0000FE  C057  F075         	movff	_TIMER$1675,_timerTrocarTextoLcd
 21013                           
 21014                           ;Main.c: 42: if (timerTrocarTextoLcd == 0) {
 21015  000102  5075               	movf	_timerTrocarTextoLcd,w,c
 21016  000104  A4D8               	btfss	status,2,c
 21017  000106  D003               	goto	i2l939
 21018                           
 21019                           ;Main.c: 43: timerTrocarTextoLcd = 15;
 21020  000108  0E0F               	movlw	15
 21021  00010A  6E75               	movwf	_timerTrocarTextoLcd,c
 21022                           
 21023                           ;Main.c: 44: textoAlternativo = ~textoAlternativo;
 21024  00010C  1E70               	comf	_textoAlternativo,f,c
 21025  00010E                     i2l939:
 21026  00010E  FFFF               	dw	65535	; assembler added errata NOP
 21027                           
 21028                           ;Main.c: 45: }
 21029                           ;Main.c: 46: readButtons();
 21030  000110  EC30  F01B         	call	_readButtons	;wreg free
 21031                           
 21032                           ;Main.c: 48: if (timerPiscarLCD == 0) {
 21033  000114  5072               	movf	_timerPiscarLCD,w,c
 21034  000116  A4D8               	btfss	status,2,c
 21035  000118  D003               	goto	i2l940
 21036                           
 21037                           ;Main.c: 49: timerPiscarLCD = 4;
 21038  00011A  0E04               	movlw	4
 21039  00011C  6E72               	movwf	_timerPiscarLCD,c
 21040                           
 21041                           ;Main.c: 50: blinkk = ~blinkk;
 21042  00011E  1E68               	comf	_blinkk,f,c
 21043  000120                     i2l940:
 21044  000120  FFFF               	dw	65535	; assembler added errata NOP
 21045                           
 21046                           ;Main.c: 51: }
 21047                           ;Main.c: 53: if (timerBase == 0) {
 21048  000122  5073               	movf	_timerBase,w,c
 21049  000124  A4D8               	btfss	status,2,c
 21050  000126  D05B               	goto	i2l962
 21051                           
 21052                           ;Main.c: 54: timer();
 21053  000128  EC8F  F01C         	call	_timer	;wreg free
 21054                           
 21055                           ;Main.c: 55: timerBase = 10;
 21056  00012C  0E0A               	movlw	10
 21057  00012E  6E73               	movwf	_timerBase,c
 21058                           
 21059                           ;Main.c: 57: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerificarSinal
      +                          );
 21060  000130  507E               	movf	_timerVerificarSinal,w,c
 21061  000132  B4D8               	btfsc	status,2,c
 21062  000134  D005               	goto	i2l943
 21063  000136  067E               	decf	_timerVerificarSinal,f,c
 21064  000138  C07E  F059         	movff	_timerVerificarSinal,_TIMER$1678
 21065  00013C  6A5A               	clrf	_TIMER$1678+1,c
 21066  00013E  D005               	goto	i2l945
 21067  000140                     i2l943:
 21068  000140  FFFF               	dw	65535	; assembler added errata NOP
 21069  000142  0E00               	movlw	0
 21070  000144  6E5A               	movwf	_TIMER$1678+1,c
 21071  000146  0E00               	movlw	0
 21072  000148  6E59               	movwf	_TIMER$1678,c
 21073  00014A                     i2l945:
 21074  00014A  FFFF               	dw	65535	; assembler added errata NOP
 21075  00014C  C059  F07E         	movff	_TIMER$1678,_timerVerificarSinal
 21076                           
 21077                           ;Main.c: 58: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEtapaComun
      +                          icacao);
 21078  000150  0100               	movlb	0	; () banked
 21079  000152  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 21080  000154  B4D8               	btfsc	status,2,c
 21081  000156  D005               	goto	i2l947
 21082                           
 21083                           ; BSR set to: 0
 21084  000158  07F6               	decf	_timerEtapaComunicacao& (0+255),f,b
 21085  00015A  C0F6  F05B         	movff	_timerEtapaComunicacao,_TIMER$1679
 21086  00015E  6A5C               	clrf	_TIMER$1679+1,c
 21087  000160  D005               	goto	i2l949
 21088  000162                     i2l947:
 21089  000162  FFFF               	dw	65535	; assembler added errata NOP
 21090                           
 21091                           ; BSR set to: 0
 21092                           
 21093                           ; BSR set to: 0
 21094  000164  0E00               	movlw	0
 21095  000166  6E5C               	movwf	_TIMER$1679+1,c
 21096  000168  0E00               	movlw	0
 21097  00016A  6E5B               	movwf	_TIMER$1679,c
 21098  00016C                     i2l949:
 21099  00016C  FFFF               	dw	65535	; assembler added errata NOP
 21100                           
 21101                           ; BSR set to: 0
 21102                           
 21103                           ; BSR set to: 0
 21104  00016E  C05B  F0F6         	movff	_TIMER$1679,_timerEtapaComunicacao
 21105                           
 21106                           ; BSR set to: 0
 21107                           ;Main.c: 59: timerTesteBombas = (timerTesteBombas <= 0 ? 0 : --timerTesteBombas);
 21108  000172  51DD               	movf	_timerTesteBombas& (0+255),w,b
 21109  000174  11DE               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 21110  000176  B4D8               	btfsc	status,2,c
 21111  000178  D008               	goto	i2l951
 21112                           
 21113                           ; BSR set to: 0
 21114  00017A  07DD               	decf	_timerTesteBombas& (0+255),f,b
 21115  00017C  A0D8               	btfss	status,0,c
 21116  00017E  07DE               	decf	(_timerTesteBombas+1)& (0+255),f,b
 21117  000180  C0DD  F0DD         	movff	_timerTesteBombas,_timerTesteBombas
 21118  000184  C0DE  F0DE         	movff	_timerTesteBombas+1,_timerTesteBombas+1
 21119  000188  D005               	goto	i2l953
 21120  00018A                     i2l951:
 21121  00018A  FFFF               	dw	65535	; assembler added errata NOP
 21122                           
 21123                           ; BSR set to: 0
 21124                           
 21125                           ; BSR set to: 0
 21126  00018C  0E00               	movlw	0
 21127  00018E  6FDE               	movwf	(_timerTesteBombas+1)& (0+255),b
 21128  000190  0E00               	movlw	0
 21129  000192  6FDD               	movwf	_timerTesteBombas& (0+255),b
 21130  000194                     i2l953:
 21131  000194  FFFF               	dw	65535	; assembler added errata NOP
 21132                           
 21133                           ; BSR set to: 0
 21134                           ;Main.c: 60: timerReenvioSMS = (timerReenvioSMS <= 0 ? 0 : --timerReenvioSMS);
 21135  000196  51F7               	movf	_timerReenvioSMS& (0+255),w,b
 21136  000198  B4D8               	btfsc	status,2,c
 21137  00019A  D005               	goto	i2l955
 21138                           
 21139                           ; BSR set to: 0
 21140  00019C  07F7               	decf	_timerReenvioSMS& (0+255),f,b
 21141  00019E  C0F7  F05D         	movff	_timerReenvioSMS,_TIMER$1680
 21142  0001A2  6A5E               	clrf	_TIMER$1680+1,c
 21143  0001A4  D005               	goto	i2l957
 21144  0001A6                     i2l955:
 21145  0001A6  FFFF               	dw	65535	; assembler added errata NOP
 21146                           
 21147                           ; BSR set to: 0
 21148                           
 21149                           ; BSR set to: 0
 21150  0001A8  0E00               	movlw	0
 21151  0001AA  6E5E               	movwf	_TIMER$1680+1,c
 21152  0001AC  0E00               	movlw	0
 21153  0001AE  6E5D               	movwf	_TIMER$1680,c
 21154  0001B0                     i2l957:
 21155  0001B0  FFFF               	dw	65535	; assembler added errata NOP
 21156                           
 21157                           ; BSR set to: 0
 21158                           
 21159                           ; BSR set to: 0
 21160  0001B2  C05D  F0F7         	movff	_TIMER$1680,_timerReenvioSMS
 21161                           
 21162                           ;Main.c: 61: timerIntervaloEntreBombas = (timerIntervaloEntreBombas <= 0 ? 0 : --timerIn
      +                          tervaloEntreBombas);
 21163  0001B6  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
 21164  0001B8  B4D8               	btfsc	status,2,c
 21165  0001BA  D005               	goto	i2l959
 21166                           
 21167                           ; BSR set to: 0
 21168  0001BC  07FE               	decf	_timerIntervaloEntreBombas& (0+255),f,b
 21169  0001BE  C0FE  F05F         	movff	_timerIntervaloEntreBombas,_TIMER$1681
 21170  0001C2  6A60               	clrf	_TIMER$1681+1,c
 21171  0001C4  D005               	goto	i2l961
 21172  0001C6                     i2l959:
 21173  0001C6  FFFF               	dw	65535	; assembler added errata NOP
 21174                           
 21175                           ; BSR set to: 0
 21176                           
 21177                           ; BSR set to: 0
 21178  0001C8  0E00               	movlw	0
 21179  0001CA  6E60               	movwf	_TIMER$1681+1,c
 21180  0001CC  0E00               	movlw	0
 21181  0001CE  6E5F               	movwf	_TIMER$1681,c
 21182  0001D0                     i2l961:
 21183  0001D0  FFFF               	dw	65535	; assembler added errata NOP
 21184                           
 21185                           ; BSR set to: 0
 21186                           
 21187                           ; BSR set to: 0
 21188  0001D2  C05F  F0FE         	movff	_TIMER$1681,_timerIntervaloEntreBombas
 21189                           
 21190                           ; BSR set to: 0
 21191                           ;Main.c: 63: if (RCSTAbits.OERR) {
 21192  0001D6  A2AB               	btfss	4011,1,c	;volatile
 21193  0001D8  D002               	goto	i2l962
 21194                           
 21195                           ; BSR set to: 0
 21196                           ;Main.c: 64: RCSTAbits.CREN = 0;
 21197  0001DA  98AB               	bcf	4011,4,c	;volatile
 21198                           
 21199                           ;Main.c: 65: RCSTAbits.CREN = 1;
 21200  0001DC  88AB               	bsf	4011,4,c	;volatile
 21201  0001DE                     i2l962:
 21202  0001DE  FFFF               	dw	65535	; assembler added errata NOP
 21203                           
 21204                           ;Main.c: 66: }
 21205                           ;Main.c: 67: }
 21206                           ;Main.c: 68: }
 21207                           ;Main.c: 69: if (RCIF) {
 21208                           
 21209                           ; BSR set to: 0
 21210                           
 21211                           ; BSR set to: 0
 21212  0001E0  AA9E               	btfss	3998,5,c	;volatile
 21213  0001E2  D01B               	goto	i2l965
 21214                           
 21215                           ;Main.c: 70: char c = RCREG;
 21216  0001E4  CFAE F061          	movff	4014,TIMER@c	;volatile
 21217                           
 21218                           ;Main.c: 71: if (c != '\n' && c != '\r') {
 21219  0001E8  0E0A               	movlw	10
 21220  0001EA  1861               	xorwf	TIMER@c,w,c
 21221  0001EC  B4D8               	btfsc	status,2,c
 21222  0001EE  D00F               	goto	i2l964
 21223  0001F0  0E0D               	movlw	13
 21224  0001F2  1861               	xorwf	TIMER@c,w,c
 21225  0001F4  B4D8               	btfsc	status,2,c
 21226  0001F6  D00B               	goto	i2l964
 21227                           
 21228                           ;Main.c: 72: bufferSerial[cbf++] = c;
 21229  0001F8  5067               	movf	_cbf,w,c
 21230  0001FA  0D01               	mullw	1
 21231  0001FC  0E23               	movlw	low _bufferSerial
 21232  0001FE  24F3               	addwf	prodl,w,c
 21233  000200  6ED9               	movwf	fsr2l,c
 21234  000202  0E01               	movlw	high _bufferSerial
 21235  000204  20F4               	addwfc	prodh,w,c
 21236  000206  6EDA               	movwf	fsr2h,c
 21237  000208  C061  FFDF         	movff	TIMER@c,indf2
 21238  00020C  2A67               	incf	_cbf,f,c
 21239  00020E                     i2l964:
 21240  00020E  FFFF               	dw	65535	; assembler added errata NOP
 21241                           
 21242                           ;Main.c: 73: }
 21243                           ;Main.c: 74: if (cbf >= 60) cbf = 0;
 21244  000210  0E3B               	movlw	59
 21245  000212  6467               	cpfsgt	_cbf,c
 21246  000214  D002               	goto	i2l965
 21247  000216  0E00               	movlw	0
 21248  000218  6E67               	movwf	_cbf,c
 21249  00021A                     i2l965:
 21250  00021A  FFFF               	dw	65535	; assembler added errata NOP
 21251  00021C  C04E  F082         	movff	??_TIMER+17,btemp+3
 21252  000220  C04D  F081         	movff	??_TIMER+16,btemp+2
 21253  000224  C04C  F080         	movff	??_TIMER+15,btemp+1
 21254  000228  C04B  F07F         	movff	??_TIMER+14,btemp
 21255  00022C  C04A  FFF5         	movff	??_TIMER+13,tablat
 21256  000230  C049  FFF8         	movff	??_TIMER+12,tblptru
 21257  000234  C048  FFF7         	movff	??_TIMER+11,tblptrh
 21258  000238  C047  FFF6         	movff	??_TIMER+10,tblptrl
 21259  00023C  C046  FFF4         	movff	??_TIMER+9,prodh
 21260  000240  C045  FFF3         	movff	??_TIMER+8,prodl
 21261  000244  C044  FFDA         	movff	??_TIMER+7,fsr2h
 21262  000248  C043  FFD9         	movff	??_TIMER+6,fsr2l
 21263  00024C  C042  FFE2         	movff	??_TIMER+5,fsr1h
 21264  000250  C041  FFE1         	movff	??_TIMER+4,fsr1l
 21265  000254  C040  FFEA         	movff	??_TIMER+3,fsr0h
 21266  000258  C03F  FFE9         	movff	??_TIMER+2,fsr0l
 21267  00025C  C03E  FFFB         	movff	??_TIMER+1,pclatu
 21268  000260  C03D  FFFA         	movff	??_TIMER,pclath
 21269  000264  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21270  000266  0011               	retfie		f
 21271  000268  FFFF               	dw	65535	; errata NOP
 21272  00026A                     __end_of_TIMER:
 21273                           	opt stack 0
 21274                           tosu	equ	0xFFF
 21275                           tosh	equ	0xFFE
 21276                           tosl	equ	0xFFD
 21277                           pclatu	equ	0xFFB
 21278                           pclath	equ	0xFFA
 21279                           tblptru	equ	0xFF8
 21280                           tblptrh	equ	0xFF7
 21281                           tblptrl	equ	0xFF6
 21282                           tablat	equ	0xFF5
 21283                           prodh	equ	0xFF4
 21284                           prodl	equ	0xFF3
 21285                           intcon	equ	0xFF2
 21286                           intcon2	equ	0xFF1
 21287                           intcon3	equ	0xFF0
 21288                           indf0	equ	0xFEF
 21289                           postinc0	equ	0xFEE
 21290                           fsr0h	equ	0xFEA
 21291                           fsr0l	equ	0xFE9
 21292                           wreg	equ	0xFE8
 21293                           postdec1	equ	0xFE5
 21294                           fsr1h	equ	0xFE2
 21295                           fsr1l	equ	0xFE1
 21296                           indf2	equ	0xFDF
 21297                           postinc2	equ	0xFDE
 21298                           postdec2	equ	0xFDD
 21299                           fsr2h	equ	0xFDA
 21300                           fsr2l	equ	0xFD9
 21301                           status	equ	0xFD8
 21302                           
 21303 ;; *************** function _timer *****************
 21304 ;; Defined at:
 21305 ;;		line 10 in file "temporizador.h"
 21306 ;; Parameters:    Size  Location     Type
 21307 ;;		None
 21308 ;; Auto vars:     Size  Location     Type
 21309 ;;		None
 21310 ;; Return value:  Size  Location     Type
 21311 ;;                  1    wreg      void 
 21312 ;; Registers used:
 21313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21314 ;; Tracked objects:
 21315 ;;		On entry : 0/0
 21316 ;;		On exit  : 0/0
 21317 ;;		Unchanged: 0/0
 21318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21319 ;;      Params:         0       0       0       0       0       0       0
 21320 ;;      Locals:         0       0       0       0       0       0       0
 21321 ;;      Temps:          0       0       0       0       0       0       0
 21322 ;;      Totals:         0       0       0       0       0       0       0
 21323 ;;Total ram usage:        0 bytes
 21324 ;; Hardware stack levels used:    1
 21325 ;; Hardware stack levels required when called:    4
 21326 ;; This function calls:
 21327 ;;		_writeEEPROM16_ext
 21328 ;;		i2_RTC_Init
 21329 ;;		i2_getDS1307TimeDate
 21330 ;;		i2_reiniciaLCD
 21331 ;;		i2_writeEEPROM_ext
 21332 ;; This function is called by:
 21333 ;;		_TIMER
 21334 ;; This function uses a non-reentrant model
 21335 ;;
 21336                           
 21337                           	psect	text78
 21338  00391E                     __ptext78:
 21339                           	opt stack 0
 21340  00391E                     _timer:
 21341                           	opt stack 0
 21342  00391E  FFFF               	dw	65535	; assembler added errata NOP
 21343                           
 21344                           ;temporizador.h: 13: if (out_BOMBA_ESTACIONARIA == 1 && status_estacionaria == 1 && !!PO
      +                          RTAbits.RA5) {
 21345                           
 21346                           ;incstack = 0
 21347  003920  0100               	movlb	0	; () banked
 21348  003922  05F9               	decf	_out_BOMBA_ESTACIONARIA& (0+255),w,b
 21349  003924  A4D8               	btfss	status,2,c
 21350  003926  D006               	goto	i2l673
 21351                           
 21352                           ; BSR set to: 0
 21353  003928  05FB               	decf	_status_estacionaria& (0+255),w,b
 21354  00392A  B4D8               	btfsc	status,2,c
 21355                           
 21356                           ; BSR set to: 0
 21357  00392C  AA80               	btfss	3968,5,c	;volatile
 21358  00392E  D002               	goto	i2l673
 21359                           
 21360                           ; BSR set to: 0
 21361                           ;temporizador.h: 14: tempo_limite_partida++;
 21362  003930  2A6A               	incf	_tempo_limite_partida,f,c
 21363                           
 21364                           ;temporizador.h: 15: tempo_partida++;
 21365  003932  2A6B               	incf	_tempo_partida,f,c
 21366  003934                     i2l673:
 21367  003934  FFFF               	dw	65535	; assembler added errata NOP
 21368                           
 21369                           ; BSR set to: 0
 21370                           ;temporizador.h: 16: }
 21371                           ;temporizador.h: 19: if (ajst_rtc) {
 21372                           
 21373                           ; BSR set to: 0
 21374  003936  0101               	movlb	1	; () banked
 21375  003938  511E               	movf	_ajst_rtc& (0+255),w,b
 21376  00393A  A4D8               	btfss	status,2,c
 21377  00393C  D05A               	goto	i2l679
 21378                           
 21379                           ; BSR set to: 1
 21380                           ;temporizador.h: 21: }
 21381                           ;temporizador.h: 23: _sec++;
 21382                           
 21383                           ; BSR set to: 1
 21384                           
 21385                           ; BSR set to: 1
 21386                           ;temporizador.h: 20: return;
 21387  00393E  0100               	movlb	0	; () banked
 21388  003940  2BF1               	incf	__sec& (0+255),f,b
 21389                           
 21390                           ; BSR set to: 0
 21391                           ;temporizador.h: 24: if (_sec > 59) {
 21392  003942  0E3B               	movlw	59
 21393  003944  65F1               	cpfsgt	__sec& (0+255),b
 21394  003946  D017               	goto	i2l678
 21395                           
 21396                           ; BSR set to: 0
 21397                           ;temporizador.h: 25: reiniciaLCD();
 21398  003948  EC2E  F036         	call	i2_reiniciaLCD	;wreg free
 21399                           
 21400                           ;temporizador.h: 26: _sec = 0;
 21401  00394C  0E00               	movlw	0
 21402  00394E  0100               	movlb	0	; () banked
 21403  003950  6FF1               	movwf	__sec& (0+255),b
 21404                           
 21405                           ; BSR set to: 0
 21406                           ;temporizador.h: 27: _min++;
 21407  003952  2BF0               	incf	__min& (0+255),f,b
 21408                           
 21409                           ; BSR set to: 0
 21410                           ;temporizador.h: 28: if (_min > 59) {
 21411  003954  0E3B               	movlw	59
 21412  003956  65F0               	cpfsgt	__min& (0+255),b
 21413  003958  D00E               	goto	i2l678
 21414                           
 21415                           ; BSR set to: 0
 21416                           ;temporizador.h: 29: _min = 0;
 21417  00395A  0E00               	movlw	0
 21418  00395C  6FF0               	movwf	__min& (0+255),b
 21419                           
 21420                           ; BSR set to: 0
 21421                           ;temporizador.h: 30: _hor++;
 21422  00395E  2BEF               	incf	__hor& (0+255),f,b
 21423                           
 21424                           ; BSR set to: 0
 21425                           ;temporizador.h: 31: if (_hor > 23) {
 21426  003960  0E17               	movlw	23
 21427  003962  65EF               	cpfsgt	__hor& (0+255),b
 21428  003964  D008               	goto	i2l678
 21429                           
 21430                           ; BSR set to: 0
 21431                           ;temporizador.h: 32: _hor = 0;
 21432  003966  0E00               	movlw	0
 21433  003968  6FEF               	movwf	__hor& (0+255),b
 21434                           
 21435                           ; BSR set to: 0
 21436                           ;temporizador.h: 33: dias_restante_teste++;
 21437  00396A  2BEA               	incf	_dias_restante_teste& (0+255),f,b
 21438                           
 21439                           ; BSR set to: 0
 21440                           ;temporizador.h: 34: writeEEPROM_ext(10, dias_restante_teste);
 21441  00396C  C0EA  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 21442  003970  0E0A               	movlw	10
 21443  003972  ECEB  F037         	call	i2_writeEEPROM_ext
 21444  003976                     i2l678:
 21445  003976  FFFF               	dw	65535	; assembler added errata NOP
 21446                           
 21447                           ;temporizador.h: 35: }
 21448                           ;temporizador.h: 36: }
 21449                           ;temporizador.h: 37: }
 21450                           ;temporizador.h: 39: if (rtc.min != _min) {
 21451  003978  0100               	movlb	0	; () banked
 21452  00397A  51F0               	movf	__min& (0+255),w,b
 21453  00397C  1879               	xorwf	_rtc+2,w,c
 21454  00397E  B4D8               	btfsc	status,2,c
 21455  003980  D038               	goto	i2l679
 21456                           
 21457                           ; BSR set to: 0
 21458                           ;temporizador.h: 41: if (!PORTAbits.RA5) {
 21459  003982  BA80               	btfsc	3968,5,c	;volatile
 21460  003984  D00A               	goto	i2l680
 21461                           
 21462                           ; BSR set to: 0
 21463                           ;temporizador.h: 42: horimetro++;
 21464  003986  0101               	movlb	1	; () banked
 21465  003988  4B0A               	infsnz	_horimetro& (0+255),f,b
 21466  00398A  2B0B               	incf	(_horimetro+1)& (0+255),f,b
 21467                           
 21468                           ; BSR set to: 1
 21469                           ;temporizador.h: 43: writeEEPROM16_ext(8, horimetro);
 21470  00398C  C10A  F006         	movff	_horimetro,writeEEPROM16_ext@data
 21471  003990  C10B  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 21472  003994  0E08               	movlw	8
 21473  003996  EC1D  F036         	call	_writeEEPROM16_ext
 21474  00399A                     i2l680:
 21475  00399A  FFFF               	dw	65535	; assembler added errata NOP
 21476                           
 21477                           ;temporizador.h: 44: }
 21478                           ;temporizador.h: 46: getDS1307TimeDate(&rtc);
 21479  00399C  0E77               	movlw	low _rtc
 21480  00399E  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 21481  0039A0  0E00               	movlw	high _rtc
 21482  0039A2  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 21483  0039A4  ECA7  F01A         	call	i2_getDS1307TimeDate	;wreg free
 21484                           
 21485                           ;temporizador.h: 47: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 21486  0039A8  0E3C               	movlw	60
 21487  0039AA  6478               	cpfsgt	_rtc+1,c
 21488  0039AC  D015               	goto	i2l681
 21489  0039AE  0E3C               	movlw	60
 21490  0039B0  6479               	cpfsgt	_rtc+2,c
 21491  0039B2  D012               	goto	i2l681
 21492  0039B4  0E18               	movlw	24
 21493  0039B6  647A               	cpfsgt	_rtc+3,c
 21494  0039B8  D00F               	goto	i2l681
 21495                           
 21496                           ;temporizador.h: 49: RTC_Init();
 21497  0039BA  ECD6  F036         	call	i2_RTC_Init	;wreg free
 21498                           
 21499                           ;temporizador.h: 50: rtc.sec = _sec;
 21500  0039BE  C0F1  F078         	movff	__sec,_rtc+1
 21501                           
 21502                           ;temporizador.h: 51: rtc.min = _min;
 21503  0039C2  C0F0  F079         	movff	__min,_rtc+2
 21504                           
 21505                           ;temporizador.h: 52: rtc.hour = _hor;
 21506  0039C6  C0EF  F07A         	movff	__hor,_rtc+3
 21507                           
 21508                           ;temporizador.h: 53: rtc.date = _dia;
 21509  0039CA  C0EE  F07B         	movff	__dia,_rtc+4
 21510                           
 21511                           ;temporizador.h: 54: rtc.month = _mes;
 21512  0039CE  C0ED  F07C         	movff	__mes,_rtc+5
 21513                           
 21514                           ;temporizador.h: 55: rtc.year = _ano;
 21515  0039D2  C0EC  F07D         	movff	__ano,_rtc+6
 21516                           
 21517                           ;temporizador.h: 56: return;
 21518  0039D6  D00D               	goto	i2l679
 21519  0039D8                     i2l681:
 21520  0039D8  FFFF               	dw	65535	; assembler added errata NOP
 21521                           
 21522                           ;temporizador.h: 57: }
 21523                           ;temporizador.h: 58: _sec = rtc.sec;
 21524  0039DA  C078  F0F1         	movff	_rtc+1,__sec
 21525                           
 21526                           ;temporizador.h: 59: _min = rtc.min;
 21527  0039DE  C079  F0F0         	movff	_rtc+2,__min
 21528                           
 21529                           ;temporizador.h: 60: _hor = rtc.hour;
 21530  0039E2  C07A  F0EF         	movff	_rtc+3,__hor
 21531                           
 21532                           ;temporizador.h: 61: _dia = rtc.date;
 21533  0039E6  C07B  F0EE         	movff	_rtc+4,__dia
 21534                           
 21535                           ;temporizador.h: 62: _mes = rtc.month;
 21536  0039EA  C07C  F0ED         	movff	_rtc+5,__mes
 21537                           
 21538                           ;temporizador.h: 63: _ano = rtc.year;
 21539  0039EE  C07D  F0EC         	movff	_rtc+6,__ano
 21540  0039F2                     i2l679:
 21541  0039F2  FFFF               	dw	65535	; assembler added errata NOP
 21542  0039F4  0012               	return		;funcret
 21543  0039F6  FFFF               	dw	65535	; errata NOP
 21544  0039F8                     __end_of_timer:
 21545                           	opt stack 0
 21546                           tosu	equ	0xFFF
 21547                           tosh	equ	0xFFE
 21548                           tosl	equ	0xFFD
 21549                           pclatu	equ	0xFFB
 21550                           pclath	equ	0xFFA
 21551                           tblptru	equ	0xFF8
 21552                           tblptrh	equ	0xFF7
 21553                           tblptrl	equ	0xFF6
 21554                           tablat	equ	0xFF5
 21555                           prodh	equ	0xFF4
 21556                           prodl	equ	0xFF3
 21557                           intcon	equ	0xFF2
 21558                           intcon2	equ	0xFF1
 21559                           intcon3	equ	0xFF0
 21560                           indf0	equ	0xFEF
 21561                           postinc0	equ	0xFEE
 21562                           fsr0h	equ	0xFEA
 21563                           fsr0l	equ	0xFE9
 21564                           wreg	equ	0xFE8
 21565                           postdec1	equ	0xFE5
 21566                           fsr1h	equ	0xFE2
 21567                           fsr1l	equ	0xFE1
 21568                           indf2	equ	0xFDF
 21569                           postinc2	equ	0xFDE
 21570                           postdec2	equ	0xFDD
 21571                           fsr2h	equ	0xFDA
 21572                           fsr2l	equ	0xFD9
 21573                           status	equ	0xFD8
 21574                           
 21575 ;; *************** function i2_reiniciaLCD *****************
 21576 ;; Defined at:
 21577 ;;		line 205 in file "lcd.h"
 21578 ;; Parameters:    Size  Location     Type
 21579 ;;		None
 21580 ;; Auto vars:     Size  Location     Type
 21581 ;;		None
 21582 ;; Return value:  Size  Location     Type
 21583 ;;                  1    wreg      void 
 21584 ;; Registers used:
 21585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21586 ;; Tracked objects:
 21587 ;;		On entry : 0/0
 21588 ;;		On exit  : 0/0
 21589 ;;		Unchanged: 0/0
 21590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21591 ;;      Params:         0       0       0       0       0       0       0
 21592 ;;      Locals:         0       0       0       0       0       0       0
 21593 ;;      Temps:          0       0       0       0       0       0       0
 21594 ;;      Totals:         0       0       0       0       0       0       0
 21595 ;;Total ram usage:        0 bytes
 21596 ;; Hardware stack levels used:    1
 21597 ;; Hardware stack levels required when called:    3
 21598 ;; This function calls:
 21599 ;;		i2_Lcd_Init
 21600 ;;		i2_criarCaracteresCGRAM
 21601 ;; This function is called by:
 21602 ;;		_timer
 21603 ;; This function uses a non-reentrant model
 21604 ;;
 21605                           
 21606                           	psect	text79
 21607  006C5C                     __ptext79:
 21608                           	opt stack 0
 21609  006C5C                     i2_reiniciaLCD:
 21610                           	opt stack 0
 21611  006C5C  FFFF               	dw	65535	; assembler added errata NOP
 21612                           
 21613                           ;lcd.h: 206: Lcd_Init();
 21614                           
 21615                           ;incstack = 0
 21616  006C5E  ECE1  F03A         	call	i2_Lcd_Init	;wreg free
 21617                           
 21618                           ;lcd.h: 207: criarCaracteresCGRAM();
 21619  006C62  EC88  F01E         	call	i2_criarCaracteresCGRAM	;wreg free
 21620                           
 21621                           ;lcd.h: 209: timerAtrasoLCD = 1;
 21622  006C66  0E01               	movlw	1
 21623  006C68  6E74               	movwf	_timerAtrasoLCD,c
 21624                           
 21625                           ;lcd.h: 210: ultimoEstadoLCD = 0;
 21626  006C6A  0E00               	movlw	0
 21627  006C6C  0101               	movlb	1	; () banked
 21628  006C6E  6FE3               	movwf	_ultimoEstadoLCD& (0+255),b
 21629  006C70  0E00               	movlw	0
 21630  006C72  6FE4               	movwf	(_ultimoEstadoLCD+1)& (0+255),b
 21631  006C74  0E00               	movlw	0
 21632  006C76  6FE5               	movwf	(_ultimoEstadoLCD+2)& (0+255),b
 21633  006C78  0E00               	movlw	0
 21634  006C7A  6FE6               	movwf	(_ultimoEstadoLCD+3)& (0+255),b
 21635                           
 21636                           ; BSR set to: 1
 21637  006C7C  0012               	return		;funcret
 21638  006C7E  FFFF               	dw	65535	; errata NOP
 21639  006C80                     __end_ofi2_reiniciaLCD:
 21640                           	opt stack 0
 21641                           tosu	equ	0xFFF
 21642                           tosh	equ	0xFFE
 21643                           tosl	equ	0xFFD
 21644                           pclatu	equ	0xFFB
 21645                           pclath	equ	0xFFA
 21646                           tblptru	equ	0xFF8
 21647                           tblptrh	equ	0xFF7
 21648                           tblptrl	equ	0xFF6
 21649                           tablat	equ	0xFF5
 21650                           prodh	equ	0xFF4
 21651                           prodl	equ	0xFF3
 21652                           intcon	equ	0xFF2
 21653                           intcon2	equ	0xFF1
 21654                           intcon3	equ	0xFF0
 21655                           indf0	equ	0xFEF
 21656                           postinc0	equ	0xFEE
 21657                           fsr0h	equ	0xFEA
 21658                           fsr0l	equ	0xFE9
 21659                           wreg	equ	0xFE8
 21660                           postdec1	equ	0xFE5
 21661                           fsr1h	equ	0xFE2
 21662                           fsr1l	equ	0xFE1
 21663                           indf2	equ	0xFDF
 21664                           postinc2	equ	0xFDE
 21665                           postdec2	equ	0xFDD
 21666                           fsr2h	equ	0xFDA
 21667                           fsr2l	equ	0xFD9
 21668                           status	equ	0xFD8
 21669                           
 21670 ;; *************** function i2_criarCaracteresCGRAM *****************
 21671 ;; Defined at:
 21672 ;;		line 175 in file "lcd.h"
 21673 ;; Parameters:    Size  Location     Type
 21674 ;;		None
 21675 ;; Auto vars:     Size  Location     Type
 21676 ;;  criarCaracte   48    7[COMRAM] const unsigned char [8][
 21677 ;;  criarCaracte    1   59[COMRAM] unsigned char 
 21678 ;;  criarCaracte    1   58[COMRAM] unsigned char 
 21679 ;;  criarCaracte    1   57[COMRAM] unsigned char 
 21680 ;; Return value:  Size  Location     Type
 21681 ;;                  1    wreg      void 
 21682 ;; Registers used:
 21683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21684 ;; Tracked objects:
 21685 ;;		On entry : 0/0
 21686 ;;		On exit  : 0/0
 21687 ;;		Unchanged: 0/0
 21688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21689 ;;      Params:         0       0       0       0       0       0       0
 21690 ;;      Locals:        53       0       0       0       0       0       0
 21691 ;;      Temps:          3       0       0       0       0       0       0
 21692 ;;      Totals:        56       0       0       0       0       0       0
 21693 ;;Total ram usage:       56 bytes
 21694 ;; Hardware stack levels used:    1
 21695 ;; Hardware stack levels required when called:    2
 21696 ;; This function calls:
 21697 ;;		i2_Lcd_Cmd
 21698 ;;		i2_Lcd_Write_Char
 21699 ;; This function is called by:
 21700 ;;		i2_reiniciaLCD
 21701 ;; This function uses a non-reentrant model
 21702 ;;
 21703                           
 21704                           	psect	text80
 21705  003D10                     __ptext80:
 21706                           	opt stack 0
 21707  003D10                     i2_criarCaracteresCGRAM:
 21708                           	opt stack 0
 21709  003D10  FFFF               	dw	65535	; assembler added errata NOP
 21710                           
 21711                           ;lcd.h: 176: const char character[6][8] = {
 21712                           ;lcd.h: 177: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
 21713                           ;lcd.h: 178: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
 21714                           ;lcd.h: 179: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
 21715                           ;lcd.h: 180: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
 21716                           ;lcd.h: 181: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
 21717                           ;lcd.h: 182: };
 21718                           
 21719                           ; BSR set to: 1
 21720                           ;incstack = 0
 21721  003D12  0E71               	movlw	low criarCaracteresCGRAM@F2969
 21722  003D14  6EF6               	movwf	tblptrl,c
 21723  003D16                     	if	1	;There is more than 1 active tblptr byte
 21724  003D16  0E7A               	movlw	high criarCaracteresCGRAM@F2969
 21725  003D18  6EF7               	movwf	tblptrh,c
 21726  003D1A                     	endif
 21727  003D1A                     	if	0	;There are less than 3 active tblptr bytes
 21728  003D1A                     	endif
 21729  003D1A  EE20  F008         	lfsr	2,i2criarCaracteresCGRAM@character
 21730  003D1E  0E2F               	movlw	47
 21731  003D20                     i2u570_40:
 21732  003D20  0009               	tblrd		*+
 21733  003D22  FFFF               	dw	65535	; errata NOP
 21734  003D24  CFF5 FFDE          	movff	tablat,postinc2
 21735  003D28  06E8               	decf	wreg,f,c
 21736  003D2A  E2FA               	bc	i2u570_40
 21737                           
 21738                           ;lcd.h: 183: Lcd_Cmd(0b0100);
 21739  003D2C  0E04               	movlw	4
 21740  003D2E  EC52  F036         	call	i2_Lcd_Cmd
 21741                           
 21742                           ;lcd.h: 184: Lcd_Cmd(0b0000);
 21743  003D32  0E00               	movlw	0
 21744  003D34  EC52  F036         	call	i2_Lcd_Cmd
 21745                           
 21746                           ;lcd.h: 185: _delay((unsigned long)((100)*(8000000/4000000.0)));
 21747  003D38  0E32               	movlw	50
 21748  003D3A                     i2u921_47:
 21749  003D3A  FFFF               	dw	65535	; errata NOP
 21750  003D3C  2EE8               	decfsz	wreg,f,c
 21751  003D3E  D7FD               	bra	i2u921_47
 21752                           
 21753                           ;lcd.h: 186: char i = 0, j = 0, k = 0;
 21754  003D40  0E00               	movlw	0
 21755  003D42  6E3C               	movwf	i2criarCaracteresCGRAM@i,c
 21756  003D44  0E00               	movlw	0
 21757  003D46  6E3B               	movwf	i2criarCaracteresCGRAM@j,c
 21758  003D48  0E00               	movlw	0
 21759  003D4A  6E3A               	movwf	i2criarCaracteresCGRAM@k,c
 21760                           
 21761                           ;lcd.h: 187: for (i = 0; i < 5; i++) {
 21762  003D4C  0E00               	movlw	0
 21763  003D4E  6E3C               	movwf	i2criarCaracteresCGRAM@i,c
 21764  003D50                     i2l5787:
 21765  003D50  FFFF               	dw	65535	; assembler added errata NOP
 21766  003D52  0E04               	movlw	4
 21767  003D54  643C               	cpfsgt	i2criarCaracteresCGRAM@i,c
 21768  003D56  D001               	goto	i2l651
 21769  003D58  D039               	goto	i2u576_40
 21770  003D5A                     i2l651:
 21771  003D5A  FFFF               	dw	65535	; assembler added errata NOP
 21772                           
 21773                           ;lcd.h: 188: if (k == 1) i = 0;
 21774  003D5C  043A               	decf	i2criarCaracteresCGRAM@k,w,c
 21775  003D5E  A4D8               	btfss	status,2,c
 21776  003D60  D002               	goto	i2l653
 21777  003D62  0E00               	movlw	0
 21778  003D64  6E3C               	movwf	i2criarCaracteresCGRAM@i,c
 21779  003D66                     i2l653:
 21780  003D66  FFFF               	dw	65535	; assembler added errata NOP
 21781                           
 21782                           ;lcd.h: 189: for (j = 0; j < 8; j++) {
 21783  003D68  0E00               	movlw	0
 21784  003D6A  6E3B               	movwf	i2criarCaracteresCGRAM@j,c
 21785  003D6C                     i2l5795:
 21786  003D6C  FFFF               	dw	65535	; assembler added errata NOP
 21787  003D6E  0E07               	movlw	7
 21788  003D70  643B               	cpfsgt	i2criarCaracteresCGRAM@j,c
 21789  003D72  D001               	goto	i2l654
 21790  003D74  D027               	goto	i2u575_40
 21791  003D76                     i2l654:
 21792  003D76  FFFF               	dw	65535	; assembler added errata NOP
 21793                           
 21794                           ;lcd.h: 190: Lcd_Write_Char((k) ? character[i][j] : 0);
 21795  003D78  503A               	movf	i2criarCaracteresCGRAM@k,w,c
 21796  003D7A  A4D8               	btfss	status,2,c
 21797  003D7C  D005               	goto	i2l657
 21798  003D7E  0E00               	movlw	0
 21799  003D80  6E39               	movwf	i2_criarCaracteresCGRAM$1552+1,c
 21800  003D82  0E00               	movlw	0
 21801  003D84  6E38               	movwf	i2_criarCaracteresCGRAM$1552,c
 21802  003D86  D018               	goto	i2l659
 21803  003D88                     i2l657:
 21804  003D88  FFFF               	dw	65535	; assembler added errata NOP
 21805  003D8A  503C               	movf	i2criarCaracteresCGRAM@i,w,c
 21806  003D8C  0D08               	mullw	8
 21807  003D8E  0E08               	movlw	low i2criarCaracteresCGRAM@character
 21808  003D90  6E05               	movwf	??i2_criarCaracteresCGRAM& (0+255),c
 21809  003D92  0E00               	movlw	high i2criarCaracteresCGRAM@character
 21810  003D94  6E06               	movwf	(??i2_criarCaracteresCGRAM+1)& (0+255),c
 21811  003D96  50F3               	movf	prodl,w,c
 21812  003D98  2605               	addwf	??i2_criarCaracteresCGRAM,f,c
 21813  003D9A  50F4               	movf	prodh,w,c
 21814  003D9C  2206               	addwfc	??i2_criarCaracteresCGRAM+1,f,c
 21815  003D9E  503B               	movf	i2criarCaracteresCGRAM@j,w,c
 21816  003DA0  0D01               	mullw	1
 21817  003DA2  50F3               	movf	prodl,w,c
 21818  003DA4  2405               	addwf	??i2_criarCaracteresCGRAM,w,c
 21819  003DA6  6ED9               	movwf	fsr2l,c
 21820  003DA8  50F4               	movf	prodh,w,c
 21821  003DAA  2006               	addwfc	??i2_criarCaracteresCGRAM+1,w,c
 21822  003DAC  6EDA               	movwf	fsr2h,c
 21823  003DAE  50DF               	movf	indf2,w,c
 21824  003DB0  6E07               	movwf	(??i2_criarCaracteresCGRAM+2)& (0+255),c
 21825  003DB2  5007               	movf	??i2_criarCaracteresCGRAM+2,w,c
 21826  003DB4  6E38               	movwf	i2_criarCaracteresCGRAM$1552,c
 21827  003DB6  6A39               	clrf	i2_criarCaracteresCGRAM$1552+1,c
 21828  003DB8                     i2l659:
 21829  003DB8  FFFF               	dw	65535	; assembler added errata NOP
 21830  003DBA  5038               	movf	i2_criarCaracteresCGRAM$1552,w,c
 21831  003DBC  EC74  F039         	call	i2_Lcd_Write_Char
 21832  003DC0  2A3B               	incf	i2criarCaracteresCGRAM@j,f,c
 21833  003DC2  D7D4               	goto	i2l5795
 21834  003DC4                     i2u575_40:
 21835  003DC4  FFFF               	dw	65535	; assembler added errata NOP
 21836                           
 21837                           ;lcd.h: 191: }
 21838                           ;lcd.h: 192: k++;
 21839  003DC6  2A3A               	incf	i2criarCaracteresCGRAM@k,f,c
 21840  003DC8  2A3C               	incf	i2criarCaracteresCGRAM@i,f,c
 21841  003DCA  D7C2               	goto	i2l5787
 21842  003DCC                     i2u576_40:
 21843  003DCC  FFFF               	dw	65535	; assembler added errata NOP
 21844  003DCE  0012               	return		;funcret
 21845  003DD0  FFFF               	dw	65535	; errata NOP
 21846  003DD2                     __end_ofi2_criarCaracteresCGRAM:
 21847                           	opt stack 0
 21848                           tosu	equ	0xFFF
 21849                           tosh	equ	0xFFE
 21850                           tosl	equ	0xFFD
 21851                           pclatu	equ	0xFFB
 21852                           pclath	equ	0xFFA
 21853                           tblptru	equ	0xFF8
 21854                           tblptrh	equ	0xFF7
 21855                           tblptrl	equ	0xFF6
 21856                           tablat	equ	0xFF5
 21857                           prodh	equ	0xFF4
 21858                           prodl	equ	0xFF3
 21859                           intcon	equ	0xFF2
 21860                           intcon2	equ	0xFF1
 21861                           intcon3	equ	0xFF0
 21862                           indf0	equ	0xFEF
 21863                           postinc0	equ	0xFEE
 21864                           fsr0h	equ	0xFEA
 21865                           fsr0l	equ	0xFE9
 21866                           wreg	equ	0xFE8
 21867                           postdec1	equ	0xFE5
 21868                           fsr1h	equ	0xFE2
 21869                           fsr1l	equ	0xFE1
 21870                           indf2	equ	0xFDF
 21871                           postinc2	equ	0xFDE
 21872                           postdec2	equ	0xFDD
 21873                           fsr2h	equ	0xFDA
 21874                           fsr2l	equ	0xFD9
 21875                           status	equ	0xFD8
 21876                           
 21877 ;; *************** function i2_Lcd_Write_Char *****************
 21878 ;; Defined at:
 21879 ;;		line 109 in file "lcd.h"
 21880 ;; Parameters:    Size  Location     Type
 21881 ;;  a               1    wreg     unsigned char 
 21882 ;; Auto vars:     Size  Location     Type
 21883 ;;  a               1    3[COMRAM] unsigned char 
 21884 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 21885 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 21886 ;; Return value:  Size  Location     Type
 21887 ;;                  1    wreg      void 
 21888 ;; Registers used:
 21889 ;;		wreg, status,2, status,0, cstack
 21890 ;; Tracked objects:
 21891 ;;		On entry : 0/0
 21892 ;;		On exit  : 0/0
 21893 ;;		Unchanged: 0/0
 21894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21895 ;;      Params:         0       0       0       0       0       0       0
 21896 ;;      Locals:         3       0       0       0       0       0       0
 21897 ;;      Temps:          0       0       0       0       0       0       0
 21898 ;;      Totals:         3       0       0       0       0       0       0
 21899 ;;Total ram usage:        3 bytes
 21900 ;; Hardware stack levels used:    1
 21901 ;; Hardware stack levels required when called:    1
 21902 ;; This function calls:
 21903 ;;		i2_Lcd_Port
 21904 ;; This function is called by:
 21905 ;;		i2_criarCaracteresCGRAM
 21906 ;; This function uses a non-reentrant model
 21907 ;;
 21908                           
 21909                           	psect	text81
 21910  0072E8                     __ptext81:
 21911                           	opt stack 0
 21912  0072E8                     i2_Lcd_Write_Char:
 21913                           	opt stack 0
 21914  0072E8  FFFF               	dw	65535	; assembler added errata NOP
 21915                           
 21916                           ;incstack = 0
 21917                           ;i2Lcd_Write_Char@a stored from wreg
 21918  0072EA  6E04               	movwf	i2Lcd_Write_Char@a,c
 21919                           
 21920                           ;lcd.h: 110: char tempp, y;
 21921                           ;lcd.h: 111: tempp = a & 0x0F;
 21922  0072EC  5004               	movf	i2Lcd_Write_Char@a,w,c
 21923  0072EE  0B0F               	andlw	15
 21924  0072F0  6E02               	movwf	i2Lcd_Write_Char@tempp,c
 21925                           
 21926                           ;lcd.h: 112: y = a & 0xF0;
 21927  0072F2  5004               	movf	i2Lcd_Write_Char@a,w,c
 21928  0072F4  0BF0               	andlw	240
 21929  0072F6  6E03               	movwf	i2Lcd_Write_Char@y,c
 21930                           
 21931                           ;lcd.h: 113: PORTDbits.RD1 = 1;
 21932  0072F8  8283               	bsf	3971,1,c	;volatile
 21933                           
 21934                           ;lcd.h: 114: Lcd_Port(y >> 4);
 21935  0072FA  3803               	swapf	i2Lcd_Write_Char@y,w,c
 21936  0072FC  0B0F               	andlw	15
 21937  0072FE  EC83  F038         	call	i2_Lcd_Port
 21938                           
 21939                           ;lcd.h: 115: PORTDbits.RD0 = 1;
 21940  007302  8083               	bsf	3971,0,c	;volatile
 21941                           
 21942                           ;lcd.h: 116: _delay((unsigned long)((150)*(8000000/4000000.0)));
 21943  007304  0E4B               	movlw	75
 21944  007306                     i2u922_47:
 21945  007306  FFFF               	dw	65535	; errata NOP
 21946  007308  2EE8               	decfsz	wreg,f,c
 21947  00730A  D7FD               	bra	i2u922_47
 21948                           
 21949                           ;lcd.h: 117: PORTDbits.RD0 = 0;
 21950  00730C  9083               	bcf	3971,0,c	;volatile
 21951                           
 21952                           ;lcd.h: 118: Lcd_Port(tempp);
 21953  00730E  5002               	movf	i2Lcd_Write_Char@tempp,w,c
 21954  007310  EC83  F038         	call	i2_Lcd_Port
 21955                           
 21956                           ;lcd.h: 119: PORTDbits.RD0 = 1;
 21957  007314  8083               	bsf	3971,0,c	;volatile
 21958                           
 21959                           ;lcd.h: 120: _delay((unsigned long)((150)*(8000000/4000000.0)));
 21960  007316  0E4B               	movlw	75
 21961  007318                     i2u923_47:
 21962  007318  FFFF               	dw	65535	; errata NOP
 21963  00731A  2EE8               	decfsz	wreg,f,c
 21964  00731C  D7FD               	bra	i2u923_47
 21965                           
 21966                           ;lcd.h: 121: PORTDbits.RD0 = 0;
 21967  00731E  9083               	bcf	3971,0,c	;volatile
 21968                           
 21969                           ;lcd.h: 122: _delay((unsigned long)((100)*(8000000/4000000.0)));
 21970  007320  0E32               	movlw	50
 21971  007322                     i2u924_47:
 21972  007322  FFFF               	dw	65535	; errata NOP
 21973  007324  2EE8               	decfsz	wreg,f,c
 21974  007326  D7FD               	bra	i2u924_47
 21975                           
 21976                           ;lcd.h: 125: PORTDbits.RD0 = 1;
 21977  007328  8083               	bsf	3971,0,c	;volatile
 21978                           
 21979                           ;lcd.h: 126: PORTDbits.RD1 = 1;
 21980  00732A  8283               	bsf	3971,1,c	;volatile
 21981                           
 21982                           ;lcd.h: 127: PORTDbits.RD2 = 1;
 21983  00732C  8483               	bsf	3971,2,c	;volatile
 21984                           
 21985                           ;lcd.h: 128: PORTDbits.RD3 = 1;
 21986  00732E  8683               	bsf	3971,3,c	;volatile
 21987                           
 21988                           ;lcd.h: 129: PORTDbits.RD4 = 1;
 21989  007330  8883               	bsf	3971,4,c	;volatile
 21990                           
 21991                           ;lcd.h: 130: PORTDbits.RD5 = 1;
 21992  007332  8A83               	bsf	3971,5,c	;volatile
 21993  007334  0012               	return		;funcret
 21994  007336  FFFF               	dw	65535	; errata NOP
 21995  007338                     __end_ofi2_Lcd_Write_Char:
 21996                           	opt stack 0
 21997                           tosu	equ	0xFFF
 21998                           tosh	equ	0xFFE
 21999                           tosl	equ	0xFFD
 22000                           pclatu	equ	0xFFB
 22001                           pclath	equ	0xFFA
 22002                           tblptru	equ	0xFF8
 22003                           tblptrh	equ	0xFF7
 22004                           tblptrl	equ	0xFF6
 22005                           tablat	equ	0xFF5
 22006                           prodh	equ	0xFF4
 22007                           prodl	equ	0xFF3
 22008                           intcon	equ	0xFF2
 22009                           intcon2	equ	0xFF1
 22010                           intcon3	equ	0xFF0
 22011                           indf0	equ	0xFEF
 22012                           postinc0	equ	0xFEE
 22013                           fsr0h	equ	0xFEA
 22014                           fsr0l	equ	0xFE9
 22015                           wreg	equ	0xFE8
 22016                           postdec1	equ	0xFE5
 22017                           fsr1h	equ	0xFE2
 22018                           fsr1l	equ	0xFE1
 22019                           indf2	equ	0xFDF
 22020                           postinc2	equ	0xFDE
 22021                           postdec2	equ	0xFDD
 22022                           fsr2h	equ	0xFDA
 22023                           fsr2l	equ	0xFD9
 22024                           status	equ	0xFD8
 22025                           
 22026 ;; *************** function i2_Lcd_Init *****************
 22027 ;; Defined at:
 22028 ;;		line 13 in file "lcd.h"
 22029 ;; Parameters:    Size  Location     Type
 22030 ;;		None
 22031 ;; Auto vars:     Size  Location     Type
 22032 ;;		None
 22033 ;; Return value:  Size  Location     Type
 22034 ;;                  1    wreg      void 
 22035 ;; Registers used:
 22036 ;;		wreg, status,2, cstack
 22037 ;; Tracked objects:
 22038 ;;		On entry : 0/0
 22039 ;;		On exit  : 0/0
 22040 ;;		Unchanged: 0/0
 22041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22042 ;;      Params:         0       0       0       0       0       0       0
 22043 ;;      Locals:         0       0       0       0       0       0       0
 22044 ;;      Temps:          1       0       0       0       0       0       0
 22045 ;;      Totals:         1       0       0       0       0       0       0
 22046 ;;Total ram usage:        1 bytes
 22047 ;; Hardware stack levels used:    1
 22048 ;; Hardware stack levels required when called:    2
 22049 ;; This function calls:
 22050 ;;		i2_Lcd_Cmd
 22051 ;;		i2_Lcd_Port
 22052 ;; This function is called by:
 22053 ;;		i2_reiniciaLCD
 22054 ;; This function uses a non-reentrant model
 22055 ;;
 22056                           
 22057                           	psect	text82
 22058  0075C2                     __ptext82:
 22059                           	opt stack 0
 22060  0075C2                     i2_Lcd_Init:
 22061                           	opt stack 0
 22062  0075C2  FFFF               	dw	65535	; assembler added errata NOP
 22063                           
 22064                           ;lcd.h: 22: Lcd_Port(0x00);
 22065                           
 22066                           ;incstack = 0
 22067  0075C4  0E00               	movlw	0
 22068  0075C6  EC83  F038         	call	i2_Lcd_Port
 22069                           
 22070                           ;lcd.h: 23: _delay((unsigned long)((30)*(8000000/4000.0)));
 22071  0075CA  0E3B               	movlw	59
 22072  0075CC  6E04               	movwf	??i2_Lcd_Init& (0+255),c
 22073  0075CE  0E7A               	movlw	122
 22074  0075D0                     i2u925_47:
 22075  0075D0  FFFF               	dw	65535	; errata NOP
 22076  0075D2  2EE8               	decfsz	wreg,f,c
 22077  0075D4  D7FD               	bra	i2u925_47
 22078  0075D6  2E04               	decfsz	??i2_Lcd_Init& (0+255),f,c
 22079  0075D8  D7FB               	bra	i2u925_47
 22080                           
 22081                           ;lcd.h: 24: Lcd_Cmd(0x03);
 22082  0075DA  0E03               	movlw	3
 22083  0075DC  EC52  F036         	call	i2_Lcd_Cmd
 22084                           
 22085                           ;lcd.h: 25: _delay((unsigned long)((15)*(8000000/4000.0)));
 22086  0075E0  0E1E               	movlw	30
 22087  0075E2  6E04               	movwf	??i2_Lcd_Init& (0+255),c
 22088  0075E4  0E3C               	movlw	60
 22089  0075E6                     i2u926_47:
 22090  0075E6  FFFF               	dw	65535	; errata NOP
 22091  0075E8  2EE8               	decfsz	wreg,f,c
 22092  0075EA  D7FD               	bra	i2u926_47
 22093  0075EC  2E04               	decfsz	??i2_Lcd_Init& (0+255),f,c
 22094  0075EE  D7FB               	bra	i2u926_47
 22095  0075F0  D000               	nop2	
 22096                           
 22097                           ;lcd.h: 26: Lcd_Cmd(0x03);
 22098  0075F2  0E03               	movlw	3
 22099  0075F4  EC52  F036         	call	i2_Lcd_Cmd
 22100                           
 22101                           ;lcd.h: 27: _delay((unsigned long)((20)*(8000000/4000.0)));
 22102  0075F8  0E27               	movlw	39
 22103  0075FA  6E04               	movwf	??i2_Lcd_Init& (0+255),c
 22104  0075FC  0EFC               	movlw	252
 22105  0075FE                     i2u927_47:
 22106  0075FE  FFFF               	dw	65535	; errata NOP
 22107  007600  2EE8               	decfsz	wreg,f,c
 22108  007602  D7FD               	bra	i2u927_47
 22109  007604  2E04               	decfsz	??i2_Lcd_Init& (0+255),f,c
 22110  007606  D7FB               	bra	i2u927_47
 22111                           
 22112                           ;lcd.h: 28: Lcd_Cmd(0x03);
 22113  007608  0E03               	movlw	3
 22114  00760A  EC52  F036         	call	i2_Lcd_Cmd
 22115                           
 22116                           ;lcd.h: 30: Lcd_Cmd(0x02);
 22117  00760E  0E02               	movlw	2
 22118  007610  EC52  F036         	call	i2_Lcd_Cmd
 22119                           
 22120                           ;lcd.h: 31: Lcd_Cmd(0x02);
 22121  007614  0E02               	movlw	2
 22122  007616  EC52  F036         	call	i2_Lcd_Cmd
 22123                           
 22124                           ;lcd.h: 32: Lcd_Cmd(0x08);
 22125  00761A  0E08               	movlw	8
 22126  00761C  EC52  F036         	call	i2_Lcd_Cmd
 22127                           
 22128                           ;lcd.h: 33: Lcd_Cmd(0x00);
 22129  007620  0E00               	movlw	0
 22130  007622  EC52  F036         	call	i2_Lcd_Cmd
 22131                           
 22132                           ;lcd.h: 34: Lcd_Cmd(0x0C);
 22133  007626  0E0C               	movlw	12
 22134  007628  EC52  F036         	call	i2_Lcd_Cmd
 22135                           
 22136                           ;lcd.h: 35: Lcd_Cmd(0x00);
 22137  00762C  0E00               	movlw	0
 22138  00762E  EC52  F036         	call	i2_Lcd_Cmd
 22139                           
 22140                           ;lcd.h: 36: Lcd_Cmd(0x06);
 22141  007632  0E06               	movlw	6
 22142  007634  EC52  F036         	call	i2_Lcd_Cmd
 22143  007638  0012               	return		;funcret
 22144  00763A  FFFF               	dw	65535	; errata NOP
 22145  00763C                     __end_ofi2_Lcd_Init:
 22146                           	opt stack 0
 22147                           tosu	equ	0xFFF
 22148                           tosh	equ	0xFFE
 22149                           tosl	equ	0xFFD
 22150                           pclatu	equ	0xFFB
 22151                           pclath	equ	0xFFA
 22152                           tblptru	equ	0xFF8
 22153                           tblptrh	equ	0xFF7
 22154                           tblptrl	equ	0xFF6
 22155                           tablat	equ	0xFF5
 22156                           prodh	equ	0xFF4
 22157                           prodl	equ	0xFF3
 22158                           intcon	equ	0xFF2
 22159                           intcon2	equ	0xFF1
 22160                           intcon3	equ	0xFF0
 22161                           indf0	equ	0xFEF
 22162                           postinc0	equ	0xFEE
 22163                           fsr0h	equ	0xFEA
 22164                           fsr0l	equ	0xFE9
 22165                           wreg	equ	0xFE8
 22166                           postdec1	equ	0xFE5
 22167                           fsr1h	equ	0xFE2
 22168                           fsr1l	equ	0xFE1
 22169                           indf2	equ	0xFDF
 22170                           postinc2	equ	0xFDE
 22171                           postdec2	equ	0xFDD
 22172                           fsr2h	equ	0xFDA
 22173                           fsr2l	equ	0xFD9
 22174                           status	equ	0xFD8
 22175                           
 22176 ;; *************** function i2_Lcd_Cmd *****************
 22177 ;; Defined at:
 22178 ;;		line 61 in file "lcd.h"
 22179 ;; Parameters:    Size  Location     Type
 22180 ;;  a               1    wreg     unsigned char 
 22181 ;; Auto vars:     Size  Location     Type
 22182 ;;  a               1    2[COMRAM] unsigned char 
 22183 ;; Return value:  Size  Location     Type
 22184 ;;                  1    wreg      void 
 22185 ;; Registers used:
 22186 ;;		wreg, status,2, cstack
 22187 ;; Tracked objects:
 22188 ;;		On entry : 0/0
 22189 ;;		On exit  : 0/0
 22190 ;;		Unchanged: 0/0
 22191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22192 ;;      Params:         0       0       0       0       0       0       0
 22193 ;;      Locals:         1       0       0       0       0       0       0
 22194 ;;      Temps:          1       0       0       0       0       0       0
 22195 ;;      Totals:         2       0       0       0       0       0       0
 22196 ;;Total ram usage:        2 bytes
 22197 ;; Hardware stack levels used:    1
 22198 ;; Hardware stack levels required when called:    1
 22199 ;; This function calls:
 22200 ;;		i2_Lcd_Port
 22201 ;; This function is called by:
 22202 ;;		i2_Lcd_Init
 22203 ;;		i2_criarCaracteresCGRAM
 22204 ;; This function uses a non-reentrant model
 22205 ;;
 22206                           
 22207                           	psect	text83
 22208  006CA4                     __ptext83:
 22209                           	opt stack 0
 22210  006CA4                     i2_Lcd_Cmd:
 22211                           	opt stack 0
 22212  006CA4  FFFF               	dw	65535	; assembler added errata NOP
 22213                           
 22214                           ;incstack = 0
 22215                           ;i2Lcd_Cmd@a stored from wreg
 22216  006CA6  6E03               	movwf	i2Lcd_Cmd@a,c
 22217                           
 22218                           ;lcd.h: 62: PORTDbits.RD1 = 0;
 22219  006CA8  9283               	bcf	3971,1,c	;volatile
 22220                           
 22221                           ;lcd.h: 63: Lcd_Port(a);
 22222  006CAA  5003               	movf	i2Lcd_Cmd@a,w,c
 22223  006CAC  EC83  F038         	call	i2_Lcd_Port
 22224                           
 22225                           ;lcd.h: 64: PORTDbits.RD0 = 1;
 22226  006CB0  8083               	bsf	3971,0,c	;volatile
 22227                           
 22228                           ;lcd.h: 65: _delay((unsigned long)((15)*(8000000/4000.0)));
 22229  006CB2  0E1E               	movlw	30
 22230  006CB4  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 22231  006CB6  0E3C               	movlw	60
 22232  006CB8                     i2u928_47:
 22233  006CB8  FFFF               	dw	65535	; errata NOP
 22234  006CBA  2EE8               	decfsz	wreg,f,c
 22235  006CBC  D7FD               	bra	i2u928_47
 22236  006CBE  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 22237  006CC0  D7FB               	bra	i2u928_47
 22238  006CC2  D000               	nop2	
 22239                           
 22240                           ;lcd.h: 66: PORTDbits.RD0 = 0;
 22241  006CC4  9083               	bcf	3971,0,c	;volatile
 22242  006CC6  0012               	return		;funcret
 22243  006CC8  FFFF               	dw	65535	; errata NOP
 22244  006CCA                     __end_ofi2_Lcd_Cmd:
 22245                           	opt stack 0
 22246                           tosu	equ	0xFFF
 22247                           tosh	equ	0xFFE
 22248                           tosl	equ	0xFFD
 22249                           pclatu	equ	0xFFB
 22250                           pclath	equ	0xFFA
 22251                           tblptru	equ	0xFF8
 22252                           tblptrh	equ	0xFF7
 22253                           tblptrl	equ	0xFF6
 22254                           tablat	equ	0xFF5
 22255                           prodh	equ	0xFF4
 22256                           prodl	equ	0xFF3
 22257                           intcon	equ	0xFF2
 22258                           intcon2	equ	0xFF1
 22259                           intcon3	equ	0xFF0
 22260                           indf0	equ	0xFEF
 22261                           postinc0	equ	0xFEE
 22262                           fsr0h	equ	0xFEA
 22263                           fsr0l	equ	0xFE9
 22264                           wreg	equ	0xFE8
 22265                           postdec1	equ	0xFE5
 22266                           fsr1h	equ	0xFE2
 22267                           fsr1l	equ	0xFE1
 22268                           indf2	equ	0xFDF
 22269                           postinc2	equ	0xFDE
 22270                           postdec2	equ	0xFDD
 22271                           fsr2h	equ	0xFDA
 22272                           fsr2l	equ	0xFD9
 22273                           status	equ	0xFD8
 22274                           
 22275 ;; *************** function i2_Lcd_Port *****************
 22276 ;; Defined at:
 22277 ;;		line 39 in file "lcd.h"
 22278 ;; Parameters:    Size  Location     Type
 22279 ;;  a               1    wreg     unsigned char 
 22280 ;; Auto vars:     Size  Location     Type
 22281 ;;  a               1    0[COMRAM] unsigned char 
 22282 ;; Return value:  Size  Location     Type
 22283 ;;                  1    wreg      void 
 22284 ;; Registers used:
 22285 ;;		wreg
 22286 ;; Tracked objects:
 22287 ;;		On entry : 0/0
 22288 ;;		On exit  : 0/0
 22289 ;;		Unchanged: 0/0
 22290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22291 ;;      Params:         0       0       0       0       0       0       0
 22292 ;;      Locals:         1       0       0       0       0       0       0
 22293 ;;      Temps:          0       0       0       0       0       0       0
 22294 ;;      Totals:         1       0       0       0       0       0       0
 22295 ;;Total ram usage:        1 bytes
 22296 ;; Hardware stack levels used:    1
 22297 ;; This function calls:
 22298 ;;		Nothing
 22299 ;; This function is called by:
 22300 ;;		i2_Lcd_Init
 22301 ;;		i2_Lcd_Cmd
 22302 ;;		i2_Lcd_Write_Char
 22303 ;; This function uses a non-reentrant model
 22304 ;;
 22305                           
 22306                           	psect	text84
 22307  007106                     __ptext84:
 22308                           	opt stack 0
 22309  007106                     i2_Lcd_Port:
 22310                           	opt stack 0
 22311  007106  FFFF               	dw	65535	; assembler added errata NOP
 22312                           
 22313                           ;incstack = 0
 22314                           ;i2Lcd_Port@a stored from wreg
 22315  007108  6E01               	movwf	i2Lcd_Port@a,c
 22316                           
 22317                           ;lcd.h: 40: if (a & 1)
 22318  00710A  A001               	btfss	i2Lcd_Port@a,0,c
 22319  00710C  D002               	goto	i2l606
 22320                           
 22321                           ;lcd.h: 41: PORTDbits.RD2 = 1;
 22322  00710E  8483               	bsf	3971,2,c	;volatile
 22323  007110  D002               	goto	i2l607
 22324  007112                     i2l606:
 22325  007112  FFFF               	dw	65535	; assembler added errata NOP
 22326                           
 22327                           ;lcd.h: 42: else
 22328                           ;lcd.h: 43: PORTDbits.RD2 = 0;
 22329  007114  9483               	bcf	3971,2,c	;volatile
 22330  007116                     i2l607:
 22331  007116  FFFF               	dw	65535	; assembler added errata NOP
 22332                           
 22333                           ;lcd.h: 45: if (a & 2)
 22334  007118  A201               	btfss	i2Lcd_Port@a,1,c
 22335  00711A  D002               	goto	i2l608
 22336                           
 22337                           ;lcd.h: 46: PORTDbits.RD3 = 1;
 22338  00711C  8683               	bsf	3971,3,c	;volatile
 22339  00711E  D002               	goto	i2l609
 22340  007120                     i2l608:
 22341  007120  FFFF               	dw	65535	; assembler added errata NOP
 22342                           
 22343                           ;lcd.h: 47: else
 22344                           ;lcd.h: 48: PORTDbits.RD3 = 0;
 22345  007122  9683               	bcf	3971,3,c	;volatile
 22346  007124                     i2l609:
 22347  007124  FFFF               	dw	65535	; assembler added errata NOP
 22348                           
 22349                           ;lcd.h: 50: if (a & 4)
 22350  007126  A401               	btfss	i2Lcd_Port@a,2,c
 22351  007128  D002               	goto	i2l610
 22352                           
 22353                           ;lcd.h: 51: PORTDbits.RD4 = 1;
 22354  00712A  8883               	bsf	3971,4,c	;volatile
 22355  00712C  D002               	goto	i2l611
 22356  00712E                     i2l610:
 22357  00712E  FFFF               	dw	65535	; assembler added errata NOP
 22358                           
 22359                           ;lcd.h: 52: else
 22360                           ;lcd.h: 53: PORTDbits.RD4 = 0;
 22361  007130  9883               	bcf	3971,4,c	;volatile
 22362  007132                     i2l611:
 22363  007132  FFFF               	dw	65535	; assembler added errata NOP
 22364                           
 22365                           ;lcd.h: 55: if (a & 8)
 22366  007134  A601               	btfss	i2Lcd_Port@a,3,c
 22367  007136  D002               	goto	i2l612
 22368                           
 22369                           ;lcd.h: 56: PORTDbits.RD5 = 1;
 22370  007138  8A83               	bsf	3971,5,c	;volatile
 22371  00713A  D002               	goto	i2l613
 22372  00713C                     i2l612:
 22373  00713C  FFFF               	dw	65535	; assembler added errata NOP
 22374                           
 22375                           ;lcd.h: 57: else
 22376                           ;lcd.h: 58: PORTDbits.RD5 = 0;
 22377  00713E  9A83               	bcf	3971,5,c	;volatile
 22378  007140                     i2l613:
 22379  007140  FFFF               	dw	65535	; assembler added errata NOP
 22380  007142  0012               	return		;funcret
 22381  007144  FFFF               	dw	65535	; errata NOP
 22382  007146                     __end_ofi2_Lcd_Port:
 22383                           	opt stack 0
 22384                           tosu	equ	0xFFF
 22385                           tosh	equ	0xFFE
 22386                           tosl	equ	0xFFD
 22387                           pclatu	equ	0xFFB
 22388                           pclath	equ	0xFFA
 22389                           tblptru	equ	0xFF8
 22390                           tblptrh	equ	0xFF7
 22391                           tblptrl	equ	0xFF6
 22392                           tablat	equ	0xFF5
 22393                           prodh	equ	0xFF4
 22394                           prodl	equ	0xFF3
 22395                           intcon	equ	0xFF2
 22396                           intcon2	equ	0xFF1
 22397                           intcon3	equ	0xFF0
 22398                           indf0	equ	0xFEF
 22399                           postinc0	equ	0xFEE
 22400                           fsr0h	equ	0xFEA
 22401                           fsr0l	equ	0xFE9
 22402                           wreg	equ	0xFE8
 22403                           postdec1	equ	0xFE5
 22404                           fsr1h	equ	0xFE2
 22405                           fsr1l	equ	0xFE1
 22406                           indf2	equ	0xFDF
 22407                           postinc2	equ	0xFDE
 22408                           postdec2	equ	0xFDD
 22409                           fsr2h	equ	0xFDA
 22410                           fsr2l	equ	0xFD9
 22411                           status	equ	0xFD8
 22412                           
 22413 ;; *************** function i2_getDS1307TimeDate *****************
 22414 ;; Defined at:
 22415 ;;		line 52 in file "ds1307.h"
 22416 ;; Parameters:    Size  Location     Type
 22417 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 22418 ;;		 -> rtc(7), 
 22419 ;; Auto vars:     Size  Location     Type
 22420 ;;		None
 22421 ;; Return value:  Size  Location     Type
 22422 ;;                  1    wreg      void 
 22423 ;; Registers used:
 22424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22425 ;; Tracked objects:
 22426 ;;		On entry : 0/0
 22427 ;;		On exit  : 0/0
 22428 ;;		Unchanged: 0/0
 22429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22430 ;;      Params:         2       0       0       0       0       0       0
 22431 ;;      Locals:         0       0       0       0       0       0       0
 22432 ;;      Temps:          0       0       0       0       0       0       0
 22433 ;;      Totals:         2       0       0       0       0       0       0
 22434 ;;Total ram usage:        2 bytes
 22435 ;; Hardware stack levels used:    1
 22436 ;; Hardware stack levels required when called:    2
 22437 ;; This function calls:
 22438 ;;		i2_BCDtoDEC
 22439 ;;		i2_I2C_Read
 22440 ;;		i2_I2C_Restart
 22441 ;;		i2_I2C_Start
 22442 ;;		i2_I2C_Stop
 22443 ;;		i2_I2C_Write
 22444 ;; This function is called by:
 22445 ;;		_timer
 22446 ;; This function uses a non-reentrant model
 22447 ;;
 22448                           
 22449                           	psect	text85
 22450  00354E                     __ptext85:
 22451                           	opt stack 0
 22452  00354E                     i2_getDS1307TimeDate:
 22453                           	opt stack 0
 22454  00354E  FFFF               	dw	65535	; assembler added errata NOP
 22455                           
 22456                           ;ds1307.h: 54: I2C_Start();
 22457                           
 22458                           ;incstack = 0
 22459  003550  ECA0  F035         	call	i2_I2C_Start	;wreg free
 22460                           
 22461                           ;ds1307.h: 55: I2C_Write(0xD0);
 22462  003554  0E00               	movlw	0
 22463  003556  6E03               	movwf	i2I2C_Write@d+1,c
 22464  003558  0ED0               	movlw	208
 22465  00355A  6E02               	movwf	i2I2C_Write@d,c
 22466  00355C  ECC4  F035         	call	i2_I2C_Write	;wreg free
 22467                           
 22468                           ;ds1307.h: 56: I2C_Write(0x00);
 22469  003560  0E00               	movlw	0
 22470  003562  6E03               	movwf	i2I2C_Write@d+1,c
 22471  003564  0E00               	movlw	0
 22472  003566  6E02               	movwf	i2I2C_Write@d,c
 22473  003568  ECC4  F035         	call	i2_I2C_Write	;wreg free
 22474                           
 22475                           ;ds1307.h: 57: I2C_Restart();
 22476  00356C  ECAC  F035         	call	i2_I2C_Restart	;wreg free
 22477                           
 22478                           ;ds1307.h: 58: I2C_Write(0xD1);
 22479  003570  0E00               	movlw	0
 22480  003572  6E03               	movwf	i2I2C_Write@d+1,c
 22481  003574  0ED1               	movlw	209
 22482  003576  6E02               	movwf	i2I2C_Write@d,c
 22483  003578  ECC4  F035         	call	i2_I2C_Write	;wreg free
 22484                           
 22485                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 22486  00357C  EE20 F001          	lfsr	2,1
 22487  003580  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22488  003582  26D9               	addwf	fsr2l,f,c
 22489  003584  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22490  003586  22DA               	addwfc	fsr2h,f,c
 22491  003588  0E00               	movlw	0
 22492  00358A  6E03               	movwf	i2I2C_Read@a+1,c
 22493  00358C  0E01               	movlw	1
 22494  00358E  6E02               	movwf	i2I2C_Read@a,c
 22495  003590  ECEF  F036         	call	i2_I2C_Read	;wreg free
 22496  003594  5002               	movf	?i2_I2C_Read,w,c
 22497  003596  ECEC  F035         	call	i2_BCDtoDEC
 22498  00359A  6EDF               	movwf	indf2,c
 22499                           
 22500                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 22501  00359C  EE20 F002          	lfsr	2,2
 22502  0035A0  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22503  0035A2  26D9               	addwf	fsr2l,f,c
 22504  0035A4  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22505  0035A6  22DA               	addwfc	fsr2h,f,c
 22506  0035A8  0E00               	movlw	0
 22507  0035AA  6E03               	movwf	i2I2C_Read@a+1,c
 22508  0035AC  0E01               	movlw	1
 22509  0035AE  6E02               	movwf	i2I2C_Read@a,c
 22510  0035B0  ECEF  F036         	call	i2_I2C_Read	;wreg free
 22511  0035B4  5002               	movf	?i2_I2C_Read,w,c
 22512  0035B6  ECEC  F035         	call	i2_BCDtoDEC
 22513  0035BA  6EDF               	movwf	indf2,c
 22514                           
 22515                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 22516  0035BC  EE20 F003          	lfsr	2,3
 22517  0035C0  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22518  0035C2  26D9               	addwf	fsr2l,f,c
 22519  0035C4  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22520  0035C6  22DA               	addwfc	fsr2h,f,c
 22521  0035C8  0E00               	movlw	0
 22522  0035CA  6E03               	movwf	i2I2C_Read@a+1,c
 22523  0035CC  0E01               	movlw	1
 22524  0035CE  6E02               	movwf	i2I2C_Read@a,c
 22525  0035D0  ECEF  F036         	call	i2_I2C_Read	;wreg free
 22526  0035D4  5002               	movf	?i2_I2C_Read,w,c
 22527  0035D6  ECEC  F035         	call	i2_BCDtoDEC
 22528  0035DA  6EDF               	movwf	indf2,c
 22529                           
 22530                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 22531  0035DC  0E00               	movlw	0
 22532  0035DE  6E03               	movwf	i2I2C_Read@a+1,c
 22533  0035E0  0E01               	movlw	1
 22534  0035E2  6E02               	movwf	i2I2C_Read@a,c
 22535  0035E4  ECEF  F036         	call	i2_I2C_Read	;wreg free
 22536  0035E8  5002               	movf	?i2_I2C_Read,w,c
 22537  0035EA  ECEC  F035         	call	i2_BCDtoDEC
 22538  0035EE  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 22539  0035F2  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 22540  0035F6  6EDF               	movwf	indf2,c
 22541                           
 22542                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 22543  0035F8  EE20 F004          	lfsr	2,4
 22544  0035FC  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22545  0035FE  26D9               	addwf	fsr2l,f,c
 22546  003600  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22547  003602  22DA               	addwfc	fsr2h,f,c
 22548  003604  0E00               	movlw	0
 22549  003606  6E03               	movwf	i2I2C_Read@a+1,c
 22550  003608  0E01               	movlw	1
 22551  00360A  6E02               	movwf	i2I2C_Read@a,c
 22552  00360C  ECEF  F036         	call	i2_I2C_Read	;wreg free
 22553  003610  5002               	movf	?i2_I2C_Read,w,c
 22554  003612  ECEC  F035         	call	i2_BCDtoDEC
 22555  003616  6EDF               	movwf	indf2,c
 22556                           
 22557                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 22558  003618  EE20 F005          	lfsr	2,5
 22559  00361C  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22560  00361E  26D9               	addwf	fsr2l,f,c
 22561  003620  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22562  003622  22DA               	addwfc	fsr2h,f,c
 22563  003624  0E00               	movlw	0
 22564  003626  6E03               	movwf	i2I2C_Read@a+1,c
 22565  003628  0E01               	movlw	1
 22566  00362A  6E02               	movwf	i2I2C_Read@a,c
 22567  00362C  ECEF  F036         	call	i2_I2C_Read	;wreg free
 22568  003630  5002               	movf	?i2_I2C_Read,w,c
 22569  003632  ECEC  F035         	call	i2_BCDtoDEC
 22570  003636  6EDF               	movwf	indf2,c
 22571                           
 22572                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 22573  003638  EE20 F006          	lfsr	2,6
 22574  00363C  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22575  00363E  26D9               	addwf	fsr2l,f,c
 22576  003640  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22577  003642  22DA               	addwfc	fsr2h,f,c
 22578  003644  0E00               	movlw	0
 22579  003646  6E03               	movwf	i2I2C_Read@a+1,c
 22580  003648  0E00               	movlw	0
 22581  00364A  6E02               	movwf	i2I2C_Read@a,c
 22582  00364C  ECEF  F036         	call	i2_I2C_Read	;wreg free
 22583  003650  5002               	movf	?i2_I2C_Read,w,c
 22584  003652  ECEC  F035         	call	i2_BCDtoDEC
 22585  003656  6EDF               	movwf	indf2,c
 22586                           
 22587                           ;ds1307.h: 66: I2C_Stop();
 22588  003658  ECA6  F035         	call	i2_I2C_Stop	;wreg free
 22589  00365C  0012               	return		;funcret
 22590  00365E  FFFF               	dw	65535	; errata NOP
 22591  003660                     __end_ofi2_getDS1307TimeDate:
 22592                           	opt stack 0
 22593                           tosu	equ	0xFFF
 22594                           tosh	equ	0xFFE
 22595                           tosl	equ	0xFFD
 22596                           pclatu	equ	0xFFB
 22597                           pclath	equ	0xFFA
 22598                           tblptru	equ	0xFF8
 22599                           tblptrh	equ	0xFF7
 22600                           tblptrl	equ	0xFF6
 22601                           tablat	equ	0xFF5
 22602                           prodh	equ	0xFF4
 22603                           prodl	equ	0xFF3
 22604                           intcon	equ	0xFF2
 22605                           intcon2	equ	0xFF1
 22606                           intcon3	equ	0xFF0
 22607                           indf0	equ	0xFEF
 22608                           postinc0	equ	0xFEE
 22609                           fsr0h	equ	0xFEA
 22610                           fsr0l	equ	0xFE9
 22611                           wreg	equ	0xFE8
 22612                           postdec1	equ	0xFE5
 22613                           fsr1h	equ	0xFE2
 22614                           fsr1l	equ	0xFE1
 22615                           indf2	equ	0xFDF
 22616                           postinc2	equ	0xFDE
 22617                           postdec2	equ	0xFDD
 22618                           fsr2h	equ	0xFDA
 22619                           fsr2l	equ	0xFD9
 22620                           status	equ	0xFD8
 22621                           
 22622 ;; *************** function i2_I2C_Restart *****************
 22623 ;; Defined at:
 22624 ;;		line 31 in file "I2C.c"
 22625 ;; Parameters:    Size  Location     Type
 22626 ;;		None
 22627 ;; Auto vars:     Size  Location     Type
 22628 ;;		None
 22629 ;; Return value:  Size  Location     Type
 22630 ;;                  1    wreg      void 
 22631 ;; Registers used:
 22632 ;;		wreg, status,2, status,0, cstack
 22633 ;; Tracked objects:
 22634 ;;		On entry : 0/0
 22635 ;;		On exit  : 0/0
 22636 ;;		Unchanged: 0/0
 22637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22638 ;;      Params:         0       0       0       0       0       0       0
 22639 ;;      Locals:         0       0       0       0       0       0       0
 22640 ;;      Temps:          0       0       0       0       0       0       0
 22641 ;;      Totals:         0       0       0       0       0       0       0
 22642 ;;Total ram usage:        0 bytes
 22643 ;; Hardware stack levels used:    1
 22644 ;; Hardware stack levels required when called:    1
 22645 ;; This function calls:
 22646 ;;		i2_I2C_Wait
 22647 ;; This function is called by:
 22648 ;;		i2_getDS1307TimeDate
 22649 ;; This function uses a non-reentrant model
 22650 ;;
 22651                           
 22652                           	psect	text86
 22653  006B58                     __ptext86:
 22654                           	opt stack 0
 22655  006B58                     i2_I2C_Restart:
 22656                           	opt stack 0
 22657  006B58  FFFF               	dw	65535	; assembler added errata NOP
 22658                           
 22659                           ;I2C.c: 32: I2C_Wait();
 22660                           
 22661                           ;incstack = 0
 22662  006B5A  ECF7  F035         	call	i2_I2C_Wait	;wreg free
 22663                           
 22664                           ;I2C.c: 33: RSEN = 1;
 22665  006B5E  82C5               	bsf	4037,1,c	;volatile
 22666  006B60  0012               	return		;funcret
 22667  006B62  FFFF               	dw	65535	; errata NOP
 22668  006B64                     __end_ofi2_I2C_Restart:
 22669                           	opt stack 0
 22670                           tosu	equ	0xFFF
 22671                           tosh	equ	0xFFE
 22672                           tosl	equ	0xFFD
 22673                           pclatu	equ	0xFFB
 22674                           pclath	equ	0xFFA
 22675                           tblptru	equ	0xFF8
 22676                           tblptrh	equ	0xFF7
 22677                           tblptrl	equ	0xFF6
 22678                           tablat	equ	0xFF5
 22679                           prodh	equ	0xFF4
 22680                           prodl	equ	0xFF3
 22681                           intcon	equ	0xFF2
 22682                           intcon2	equ	0xFF1
 22683                           intcon3	equ	0xFF0
 22684                           indf0	equ	0xFEF
 22685                           postinc0	equ	0xFEE
 22686                           fsr0h	equ	0xFEA
 22687                           fsr0l	equ	0xFE9
 22688                           wreg	equ	0xFE8
 22689                           postdec1	equ	0xFE5
 22690                           fsr1h	equ	0xFE2
 22691                           fsr1l	equ	0xFE1
 22692                           indf2	equ	0xFDF
 22693                           postinc2	equ	0xFDE
 22694                           postdec2	equ	0xFDD
 22695                           fsr2h	equ	0xFDA
 22696                           fsr2l	equ	0xFD9
 22697                           status	equ	0xFD8
 22698                           
 22699 ;; *************** function i2_I2C_Read *****************
 22700 ;; Defined at:
 22701 ;;		line 47 in file "I2C.c"
 22702 ;; Parameters:    Size  Location     Type
 22703 ;;  a               2    1[COMRAM] unsigned short 
 22704 ;; Auto vars:     Size  Location     Type
 22705 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 22706 ;; Return value:  Size  Location     Type
 22707 ;;                  2    1[COMRAM] unsigned short 
 22708 ;; Registers used:
 22709 ;;		wreg, status,2, status,0, cstack
 22710 ;; Tracked objects:
 22711 ;;		On entry : 0/0
 22712 ;;		On exit  : 0/0
 22713 ;;		Unchanged: 0/0
 22714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22715 ;;      Params:         2       0       0       0       0       0       0
 22716 ;;      Locals:         2       0       0       0       0       0       0
 22717 ;;      Temps:          0       0       0       0       0       0       0
 22718 ;;      Totals:         4       0       0       0       0       0       0
 22719 ;;Total ram usage:        4 bytes
 22720 ;; Hardware stack levels used:    1
 22721 ;; Hardware stack levels required when called:    1
 22722 ;; This function calls:
 22723 ;;		i2_I2C_Wait
 22724 ;; This function is called by:
 22725 ;;		i2_getDS1307TimeDate
 22726 ;; This function uses a non-reentrant model
 22727 ;;
 22728                           
 22729                           	psect	text87
 22730  006DDE                     __ptext87:
 22731                           	opt stack 0
 22732  006DDE                     i2_I2C_Read:
 22733                           	opt stack 0
 22734  006DDE  FFFF               	dw	65535	; assembler added errata NOP
 22735                           
 22736                           ;I2C.c: 48: unsigned short temp;
 22737                           ;I2C.c: 49: I2C_Wait();
 22738                           
 22739                           ;incstack = 0
 22740  006DE0  ECF7  F035         	call	i2_I2C_Wait	;wreg free
 22741                           
 22742                           ;I2C.c: 50: RCEN = 1;
 22743  006DE4  86C5               	bsf	4037,3,c	;volatile
 22744                           
 22745                           ;I2C.c: 51: I2C_Wait();
 22746  006DE6  ECF7  F035         	call	i2_I2C_Wait	;wreg free
 22747                           
 22748                           ;I2C.c: 52: temp = SSPBUF;
 22749  006DEA  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 22750  006DEE  6A05               	clrf	i2I2C_Read@temp+1,c
 22751                           
 22752                           ;I2C.c: 53: I2C_Wait();
 22753  006DF0  ECF7  F035         	call	i2_I2C_Wait	;wreg free
 22754                           
 22755                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 22756  006DF4  5002               	movf	i2I2C_Read@a,w,c
 22757  006DF6  1003               	iorwf	i2I2C_Read@a+1,w,c
 22758  006DF8  A4D8               	btfss	status,2,c
 22759  006DFA  D002               	goto	i2u577_40
 22760  006DFC  8AC5               	bsf	4037,5,c	;volatile
 22761  006DFE  D002               	goto	i2u578_45
 22762  006E00                     i2u577_40:
 22763  006E00  FFFF               	dw	65535	; assembler added errata NOP
 22764  006E02  9AC5               	bcf	4037,5,c	;volatile
 22765  006E04                     i2u578_45:
 22766  006E04  FFFF               	dw	65535	; assembler added errata NOP
 22767                           
 22768                           ;I2C.c: 55: ACKEN = 1;
 22769  006E06  88C5               	bsf	4037,4,c	;volatile
 22770                           
 22771                           ;I2C.c: 56: return temp;
 22772  006E08  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 22773  006E0C  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 22774  006E10  0012               	return		;funcret
 22775  006E12  FFFF               	dw	65535	; errata NOP
 22776  006E14                     __end_ofi2_I2C_Read:
 22777                           	opt stack 0
 22778                           tosu	equ	0xFFF
 22779                           tosh	equ	0xFFE
 22780                           tosl	equ	0xFFD
 22781                           pclatu	equ	0xFFB
 22782                           pclath	equ	0xFFA
 22783                           tblptru	equ	0xFF8
 22784                           tblptrh	equ	0xFF7
 22785                           tblptrl	equ	0xFF6
 22786                           tablat	equ	0xFF5
 22787                           prodh	equ	0xFF4
 22788                           prodl	equ	0xFF3
 22789                           intcon	equ	0xFF2
 22790                           intcon2	equ	0xFF1
 22791                           intcon3	equ	0xFF0
 22792                           indf0	equ	0xFEF
 22793                           postinc0	equ	0xFEE
 22794                           fsr0h	equ	0xFEA
 22795                           fsr0l	equ	0xFE9
 22796                           wreg	equ	0xFE8
 22797                           postdec1	equ	0xFE5
 22798                           fsr1h	equ	0xFE2
 22799                           fsr1l	equ	0xFE1
 22800                           indf2	equ	0xFDF
 22801                           postinc2	equ	0xFDE
 22802                           postdec2	equ	0xFDD
 22803                           fsr2h	equ	0xFDA
 22804                           fsr2l	equ	0xFD9
 22805                           status	equ	0xFD8
 22806                           
 22807 ;; *************** function i2_BCDtoDEC *****************
 22808 ;; Defined at:
 22809 ;;		line 33 in file "function.c"
 22810 ;; Parameters:    Size  Location     Type
 22811 ;;  val             1    wreg     unsigned char 
 22812 ;; Auto vars:     Size  Location     Type
 22813 ;;  val             1    0[COMRAM] unsigned char 
 22814 ;; Return value:  Size  Location     Type
 22815 ;;                  1    wreg      unsigned char 
 22816 ;; Registers used:
 22817 ;;		wreg, status,2, status,0, prodl, prodh
 22818 ;; Tracked objects:
 22819 ;;		On entry : 0/0
 22820 ;;		On exit  : 0/0
 22821 ;;		Unchanged: 0/0
 22822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22823 ;;      Params:         0       0       0       0       0       0       0
 22824 ;;      Locals:         1       0       0       0       0       0       0
 22825 ;;      Temps:          0       0       0       0       0       0       0
 22826 ;;      Totals:         1       0       0       0       0       0       0
 22827 ;;Total ram usage:        1 bytes
 22828 ;; Hardware stack levels used:    1
 22829 ;; This function calls:
 22830 ;;		Nothing
 22831 ;; This function is called by:
 22832 ;;		i2_getDS1307TimeDate
 22833 ;; This function uses a non-reentrant model
 22834 ;;
 22835                           
 22836                           	psect	text88
 22837  006BD8                     __ptext88:
 22838                           	opt stack 0
 22839  006BD8                     i2_BCDtoDEC:
 22840                           	opt stack 0
 22841  006BD8  FFFF               	dw	65535	; assembler added errata NOP
 22842                           
 22843                           ;incstack = 0
 22844                           ;i2BCDtoDEC@val stored from wreg
 22845  006BDA  6E01               	movwf	i2BCDtoDEC@val,c
 22846                           
 22847                           ;function.c: 34: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 22848  006BDC  3801               	swapf	i2BCDtoDEC@val,w,c
 22849  006BDE  0B0F               	andlw	15
 22850  006BE0  0B0F               	andlw	15
 22851  006BE2  0D0A               	mullw	10
 22852  006BE4  5001               	movf	i2BCDtoDEC@val,w,c
 22853  006BE6  0B0F               	andlw	15
 22854  006BE8  24F3               	addwf	prodl,w,c
 22855  006BEA  0012               	return		;funcret
 22856  006BEC  FFFF               	dw	65535	; errata NOP
 22857  006BEE                     __end_ofi2_BCDtoDEC:
 22858                           	opt stack 0
 22859                           tosu	equ	0xFFF
 22860                           tosh	equ	0xFFE
 22861                           tosl	equ	0xFFD
 22862                           pclatu	equ	0xFFB
 22863                           pclath	equ	0xFFA
 22864                           tblptru	equ	0xFF8
 22865                           tblptrh	equ	0xFF7
 22866                           tblptrl	equ	0xFF6
 22867                           tablat	equ	0xFF5
 22868                           prodh	equ	0xFF4
 22869                           prodl	equ	0xFF3
 22870                           intcon	equ	0xFF2
 22871                           intcon2	equ	0xFF1
 22872                           intcon3	equ	0xFF0
 22873                           indf0	equ	0xFEF
 22874                           postinc0	equ	0xFEE
 22875                           fsr0h	equ	0xFEA
 22876                           fsr0l	equ	0xFE9
 22877                           wreg	equ	0xFE8
 22878                           postdec1	equ	0xFE5
 22879                           fsr1h	equ	0xFE2
 22880                           fsr1l	equ	0xFE1
 22881                           indf2	equ	0xFDF
 22882                           postinc2	equ	0xFDE
 22883                           postdec2	equ	0xFDD
 22884                           fsr2h	equ	0xFDA
 22885                           fsr2l	equ	0xFD9
 22886                           status	equ	0xFD8
 22887                           
 22888 ;; *************** function i2_RTC_Init *****************
 22889 ;; Defined at:
 22890 ;;		line 98 in file "ds1307.h"
 22891 ;; Parameters:    Size  Location     Type
 22892 ;;		None
 22893 ;; Auto vars:     Size  Location     Type
 22894 ;;		None
 22895 ;; Return value:  Size  Location     Type
 22896 ;;                  1    wreg      void 
 22897 ;; Registers used:
 22898 ;;		wreg, status,2, status,0, cstack
 22899 ;; Tracked objects:
 22900 ;;		On entry : 0/0
 22901 ;;		On exit  : 0/0
 22902 ;;		Unchanged: 0/0
 22903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22904 ;;      Params:         0       0       0       0       0       0       0
 22905 ;;      Locals:         0       0       0       0       0       0       0
 22906 ;;      Temps:          0       0       0       0       0       0       0
 22907 ;;      Totals:         0       0       0       0       0       0       0
 22908 ;;Total ram usage:        0 bytes
 22909 ;; Hardware stack levels used:    1
 22910 ;; Hardware stack levels required when called:    2
 22911 ;; This function calls:
 22912 ;;		i2_I2C_Start
 22913 ;;		i2_I2C_Stop
 22914 ;;		i2_I2C_Write
 22915 ;; This function is called by:
 22916 ;;		_timer
 22917 ;; This function uses a non-reentrant model
 22918 ;;
 22919                           
 22920                           	psect	text89
 22921  006DAC                     __ptext89:
 22922                           	opt stack 0
 22923  006DAC                     i2_RTC_Init:
 22924                           	opt stack 0
 22925  006DAC  FFFF               	dw	65535	; assembler added errata NOP
 22926                           
 22927                           ;ds1307.h: 99: I2C_Start();
 22928                           
 22929                           ;incstack = 0
 22930  006DAE  ECA0  F035         	call	i2_I2C_Start	;wreg free
 22931                           
 22932                           ;ds1307.h: 100: I2C_Write(0xD0);
 22933  006DB2  0E00               	movlw	0
 22934  006DB4  6E03               	movwf	i2I2C_Write@d+1,c
 22935  006DB6  0ED0               	movlw	208
 22936  006DB8  6E02               	movwf	i2I2C_Write@d,c
 22937  006DBA  ECC4  F035         	call	i2_I2C_Write	;wreg free
 22938                           
 22939                           ;ds1307.h: 101: I2C_Write(0x07);
 22940  006DBE  0E00               	movlw	0
 22941  006DC0  6E03               	movwf	i2I2C_Write@d+1,c
 22942  006DC2  0E07               	movlw	7
 22943  006DC4  6E02               	movwf	i2I2C_Write@d,c
 22944  006DC6  ECC4  F035         	call	i2_I2C_Write	;wreg free
 22945                           
 22946                           ;ds1307.h: 102: I2C_Write(0x00);
 22947  006DCA  0E00               	movlw	0
 22948  006DCC  6E03               	movwf	i2I2C_Write@d+1,c
 22949  006DCE  0E00               	movlw	0
 22950  006DD0  6E02               	movwf	i2I2C_Write@d,c
 22951  006DD2  ECC4  F035         	call	i2_I2C_Write	;wreg free
 22952                           
 22953                           ;ds1307.h: 103: I2C_Stop();
 22954  006DD6  ECA6  F035         	call	i2_I2C_Stop	;wreg free
 22955  006DDA  0012               	return		;funcret
 22956  006DDC  FFFF               	dw	65535	; errata NOP
 22957  006DDE                     __end_ofi2_RTC_Init:
 22958                           	opt stack 0
 22959                           tosu	equ	0xFFF
 22960                           tosh	equ	0xFFE
 22961                           tosl	equ	0xFFD
 22962                           pclatu	equ	0xFFB
 22963                           pclath	equ	0xFFA
 22964                           tblptru	equ	0xFF8
 22965                           tblptrh	equ	0xFF7
 22966                           tblptrl	equ	0xFF6
 22967                           tablat	equ	0xFF5
 22968                           prodh	equ	0xFF4
 22969                           prodl	equ	0xFF3
 22970                           intcon	equ	0xFF2
 22971                           intcon2	equ	0xFF1
 22972                           intcon3	equ	0xFF0
 22973                           indf0	equ	0xFEF
 22974                           postinc0	equ	0xFEE
 22975                           fsr0h	equ	0xFEA
 22976                           fsr0l	equ	0xFE9
 22977                           wreg	equ	0xFE8
 22978                           postdec1	equ	0xFE5
 22979                           fsr1h	equ	0xFE2
 22980                           fsr1l	equ	0xFE1
 22981                           indf2	equ	0xFDF
 22982                           postinc2	equ	0xFDE
 22983                           postdec2	equ	0xFDD
 22984                           fsr2h	equ	0xFDA
 22985                           fsr2l	equ	0xFD9
 22986                           status	equ	0xFD8
 22987                           
 22988 ;; *************** function _writeEEPROM16_ext *****************
 22989 ;; Defined at:
 22990 ;;		line 40 in file "eeprom.h"
 22991 ;; Parameters:    Size  Location     Type
 22992 ;;  adress          1    wreg     unsigned char 
 22993 ;;  data            2    5[COMRAM] unsigned int 
 22994 ;; Auto vars:     Size  Location     Type
 22995 ;;  adress          1    7[COMRAM] unsigned char 
 22996 ;; Return value:  Size  Location     Type
 22997 ;;                  1    wreg      void 
 22998 ;; Registers used:
 22999 ;;		wreg, status,2, status,0, cstack
 23000 ;; Tracked objects:
 23001 ;;		On entry : 0/0
 23002 ;;		On exit  : 0/0
 23003 ;;		Unchanged: 0/0
 23004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23005 ;;      Params:         2       0       0       0       0       0       0
 23006 ;;      Locals:         1       0       0       0       0       0       0
 23007 ;;      Temps:          0       0       0       0       0       0       0
 23008 ;;      Totals:         3       0       0       0       0       0       0
 23009 ;;Total ram usage:        3 bytes
 23010 ;; Hardware stack levels used:    1
 23011 ;; Hardware stack levels required when called:    3
 23012 ;; This function calls:
 23013 ;;		i2_writeEEPROM_ext
 23014 ;; This function is called by:
 23015 ;;		_timer
 23016 ;; This function uses a non-reentrant model
 23017 ;;
 23018                           
 23019                           	psect	text90
 23020  006C3A                     __ptext90:
 23021                           	opt stack 0
 23022  006C3A                     _writeEEPROM16_ext:
 23023                           	opt stack 0
 23024  006C3A  FFFF               	dw	65535	; assembler added errata NOP
 23025                           
 23026                           ;incstack = 0
 23027                           ;writeEEPROM16_ext@adress stored from wreg
 23028  006C3C  6E08               	movwf	writeEEPROM16_ext@adress,c
 23029                           
 23030                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 23031  006C3E  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 23032  006C42  5008               	movf	writeEEPROM16_ext@adress,w,c
 23033  006C44  ECEB  F037         	call	i2_writeEEPROM_ext
 23034                           
 23035                           ;eeprom.h: 42: data>> = 8;
 23036  006C48  5007               	movf	writeEEPROM16_ext@data+1,w,c
 23037  006C4A  6E06               	movwf	writeEEPROM16_ext@data,c
 23038  006C4C  6A07               	clrf	writeEEPROM16_ext@data+1,c
 23039                           
 23040                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 23041  006C4E  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 23042  006C52  2808               	incf	writeEEPROM16_ext@adress,w,c
 23043  006C54  ECEB  F037         	call	i2_writeEEPROM_ext
 23044  006C58  0012               	return		;funcret
 23045  006C5A  FFFF               	dw	65535	; errata NOP
 23046  006C5C                     __end_of_writeEEPROM16_ext:
 23047                           	opt stack 0
 23048                           tosu	equ	0xFFF
 23049                           tosh	equ	0xFFE
 23050                           tosl	equ	0xFFD
 23051                           pclatu	equ	0xFFB
 23052                           pclath	equ	0xFFA
 23053                           tblptru	equ	0xFF8
 23054                           tblptrh	equ	0xFF7
 23055                           tblptrl	equ	0xFF6
 23056                           tablat	equ	0xFF5
 23057                           prodh	equ	0xFF4
 23058                           prodl	equ	0xFF3
 23059                           intcon	equ	0xFF2
 23060                           intcon2	equ	0xFF1
 23061                           intcon3	equ	0xFF0
 23062                           indf0	equ	0xFEF
 23063                           postinc0	equ	0xFEE
 23064                           fsr0h	equ	0xFEA
 23065                           fsr0l	equ	0xFE9
 23066                           wreg	equ	0xFE8
 23067                           postdec1	equ	0xFE5
 23068                           fsr1h	equ	0xFE2
 23069                           fsr1l	equ	0xFE1
 23070                           indf2	equ	0xFDF
 23071                           postinc2	equ	0xFDE
 23072                           postdec2	equ	0xFDD
 23073                           fsr2h	equ	0xFDA
 23074                           fsr2l	equ	0xFD9
 23075                           status	equ	0xFD8
 23076                           
 23077 ;; *************** function i2_writeEEPROM_ext *****************
 23078 ;; Defined at:
 23079 ;;		line 13 in file "eeprom.h"
 23080 ;; Parameters:    Size  Location     Type
 23081 ;;  adress          1    wreg     unsigned char 
 23082 ;;  data            1    3[COMRAM] unsigned char 
 23083 ;; Auto vars:     Size  Location     Type
 23084 ;;  adress          1    4[COMRAM] unsigned char 
 23085 ;; Return value:  Size  Location     Type
 23086 ;;                  1    wreg      void 
 23087 ;; Registers used:
 23088 ;;		wreg, status,2, status,0, cstack
 23089 ;; Tracked objects:
 23090 ;;		On entry : 0/0
 23091 ;;		On exit  : 0/0
 23092 ;;		Unchanged: 0/0
 23093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23094 ;;      Params:         1       0       0       0       0       0       0
 23095 ;;      Locals:         1       0       0       0       0       0       0
 23096 ;;      Temps:          0       0       0       0       0       0       0
 23097 ;;      Totals:         2       0       0       0       0       0       0
 23098 ;;Total ram usage:        2 bytes
 23099 ;; Hardware stack levels used:    1
 23100 ;; Hardware stack levels required when called:    2
 23101 ;; This function calls:
 23102 ;;		i2_I2C_Start
 23103 ;;		i2_I2C_Stop
 23104 ;;		i2_I2C_Write
 23105 ;;		i2_delay
 23106 ;; This function is called by:
 23107 ;;		_writeEEPROM16_ext
 23108 ;;		_timer
 23109 ;; This function uses a non-reentrant model
 23110 ;;
 23111                           
 23112                           	psect	text91
 23113  006FD6                     __ptext91:
 23114                           	opt stack 0
 23115  006FD6                     i2_writeEEPROM_ext:
 23116                           	opt stack 0
 23117  006FD6  FFFF               	dw	65535	; assembler added errata NOP
 23118                           
 23119                           ;incstack = 0
 23120                           ;i2writeEEPROM_ext@adress stored from wreg
 23121  006FD8  6E05               	movwf	i2writeEEPROM_ext@adress,c
 23122                           
 23123                           ;eeprom.h: 15: I2C_Start();
 23124  006FDA  ECA0  F035         	call	i2_I2C_Start	;wreg free
 23125                           
 23126                           ;eeprom.h: 16: I2C_Write(0xA0);
 23127  006FDE  0E00               	movlw	0
 23128  006FE0  6E03               	movwf	i2I2C_Write@d+1,c
 23129  006FE2  0EA0               	movlw	160
 23130  006FE4  6E02               	movwf	i2I2C_Write@d,c
 23131  006FE6  ECC4  F035         	call	i2_I2C_Write	;wreg free
 23132                           
 23133                           ;eeprom.h: 18: I2C_Write(adress);
 23134  006FEA  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 23135  006FEE  6A03               	clrf	i2I2C_Write@d+1,c
 23136  006FF0  ECC4  F035         	call	i2_I2C_Write	;wreg free
 23137                           
 23138                           ;eeprom.h: 19: I2C_Write(data);
 23139  006FF4  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 23140  006FF8  6A03               	clrf	i2I2C_Write@d+1,c
 23141  006FFA  ECC4  F035         	call	i2_I2C_Write	;wreg free
 23142                           
 23143                           ;eeprom.h: 20: I2C_Stop();
 23144  006FFE  ECA6  F035         	call	i2_I2C_Stop	;wreg free
 23145                           
 23146                           ;eeprom.h: 21: delay(15);
 23147  007002  0E00               	movlw	0
 23148  007004  6E02               	movwf	i2delay@x+1,c
 23149  007006  0E0F               	movlw	15
 23150  007008  6E01               	movwf	i2delay@x,c
 23151  00700A  ECBD  F036         	call	i2_delay	;wreg free
 23152  00700E  0012               	return		;funcret
 23153  007010  FFFF               	dw	65535	; errata NOP
 23154  007012                     __end_ofi2_writeEEPROM_ext:
 23155                           	opt stack 0
 23156                           tosu	equ	0xFFF
 23157                           tosh	equ	0xFFE
 23158                           tosl	equ	0xFFD
 23159                           pclatu	equ	0xFFB
 23160                           pclath	equ	0xFFA
 23161                           tblptru	equ	0xFF8
 23162                           tblptrh	equ	0xFF7
 23163                           tblptrl	equ	0xFF6
 23164                           tablat	equ	0xFF5
 23165                           prodh	equ	0xFF4
 23166                           prodl	equ	0xFF3
 23167                           intcon	equ	0xFF2
 23168                           intcon2	equ	0xFF1
 23169                           intcon3	equ	0xFF0
 23170                           indf0	equ	0xFEF
 23171                           postinc0	equ	0xFEE
 23172                           fsr0h	equ	0xFEA
 23173                           fsr0l	equ	0xFE9
 23174                           wreg	equ	0xFE8
 23175                           postdec1	equ	0xFE5
 23176                           fsr1h	equ	0xFE2
 23177                           fsr1l	equ	0xFE1
 23178                           indf2	equ	0xFDF
 23179                           postinc2	equ	0xFDE
 23180                           postdec2	equ	0xFDD
 23181                           fsr2h	equ	0xFDA
 23182                           fsr2l	equ	0xFD9
 23183                           status	equ	0xFD8
 23184                           
 23185 ;; *************** function i2_delay *****************
 23186 ;; Defined at:
 23187 ;;		line 15 in file "function.c"
 23188 ;; Parameters:    Size  Location     Type
 23189 ;;  x               2    0[COMRAM] int 
 23190 ;; Auto vars:     Size  Location     Type
 23191 ;;		None
 23192 ;; Return value:  Size  Location     Type
 23193 ;;                  1    wreg      void 
 23194 ;; Registers used:
 23195 ;;		wreg, status,2, status,0
 23196 ;; Tracked objects:
 23197 ;;		On entry : 0/0
 23198 ;;		On exit  : 0/0
 23199 ;;		Unchanged: 0/0
 23200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23201 ;;      Params:         2       0       0       0       0       0       0
 23202 ;;      Locals:         0       0       0       0       0       0       0
 23203 ;;      Temps:          1       0       0       0       0       0       0
 23204 ;;      Totals:         3       0       0       0       0       0       0
 23205 ;;Total ram usage:        3 bytes
 23206 ;; Hardware stack levels used:    1
 23207 ;; This function calls:
 23208 ;;		Nothing
 23209 ;; This function is called by:
 23210 ;;		i2_writeEEPROM_ext
 23211 ;; This function uses a non-reentrant model
 23212 ;;
 23213                           
 23214                           	psect	text92
 23215  006D7A                     __ptext92:
 23216                           	opt stack 0
 23217  006D7A                     i2_delay:
 23218                           	opt stack 0
 23219  006D7A  FFFF               	dw	65535	; assembler added errata NOP
 23220                           
 23221                           ;function.c: 16: while (x--) {
 23222                           
 23223                           ;incstack = 0
 23224  006D7C  D00B               	goto	i2l1075
 23225  006D7E  FFFF               	dw	65535	; assembler added errata NOP
 23226  006D80                     i2l5627:
 23227                           
 23228                           ;function.c: 17: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 23229  006D80  0E02               	movlw	2
 23230  006D82  6E03               	movwf	??i2_delay& (0+255),c
 23231  006D84  0EF2               	movlw	242
 23232  006D86                     i2u929_47:
 23233  006D86  FFFF               	dw	65535	; errata NOP
 23234  006D88  2EE8               	decfsz	wreg,f,c
 23235  006D8A  D7FD               	bra	i2u929_47
 23236  006D8C  2E03               	decfsz	??i2_delay& (0+255),f,c
 23237  006D8E  D7FB               	bra	i2u929_47
 23238  006D90  D000               	nop2	
 23239  006D92  0004               	clrwdt		;# 
 23240  006D94                     i2l1075:
 23241  006D94  FFFF               	dw	65535	; assembler added errata NOP
 23242  006D96  0601               	decf	i2delay@x,f,c
 23243  006D98  A0D8               	btfss	status,0,c
 23244  006D9A  0602               	decf	i2delay@x+1,f,c
 23245  006D9C  2801               	incf	i2delay@x,w,c
 23246  006D9E  E1F0               	bnz	i2l5627
 23247  006DA0  2802               	incf	i2delay@x+1,w,c
 23248  006DA2  B4D8               	btfsc	status,2,c
 23249  006DA4  0012               	return		;funcret
 23250  006DA6  FFFF               	dw	65535	; assembler added errata NOP
 23251  006DA8  D7EA               	goto	i2l1076
 23252  006DAA  FFFF               	dw	65535	; errata NOP
 23253  006DAC                     __end_ofi2_delay:
 23254                           	opt stack 0
 23255                           tosu	equ	0xFFF
 23256                           tosh	equ	0xFFE
 23257                           tosl	equ	0xFFD
 23258                           pclatu	equ	0xFFB
 23259                           pclath	equ	0xFFA
 23260                           tblptru	equ	0xFF8
 23261                           tblptrh	equ	0xFF7
 23262                           tblptrl	equ	0xFF6
 23263                           tablat	equ	0xFF5
 23264                           prodh	equ	0xFF4
 23265                           prodl	equ	0xFF3
 23266                           intcon	equ	0xFF2
 23267                           intcon2	equ	0xFF1
 23268                           intcon3	equ	0xFF0
 23269                           indf0	equ	0xFEF
 23270                           postinc0	equ	0xFEE
 23271                           fsr0h	equ	0xFEA
 23272                           fsr0l	equ	0xFE9
 23273                           wreg	equ	0xFE8
 23274                           postdec1	equ	0xFE5
 23275                           fsr1h	equ	0xFE2
 23276                           fsr1l	equ	0xFE1
 23277                           indf2	equ	0xFDF
 23278                           postinc2	equ	0xFDE
 23279                           postdec2	equ	0xFDD
 23280                           fsr2h	equ	0xFDA
 23281                           fsr2l	equ	0xFD9
 23282                           status	equ	0xFD8
 23283                           
 23284 ;; *************** function i2_I2C_Write *****************
 23285 ;; Defined at:
 23286 ;;		line 42 in file "I2C.c"
 23287 ;; Parameters:    Size  Location     Type
 23288 ;;  d               2    1[COMRAM] unsigned int 
 23289 ;; Auto vars:     Size  Location     Type
 23290 ;;		None
 23291 ;; Return value:  Size  Location     Type
 23292 ;;                  1    wreg      void 
 23293 ;; Registers used:
 23294 ;;		wreg, status,2, status,0, cstack
 23295 ;; Tracked objects:
 23296 ;;		On entry : 0/0
 23297 ;;		On exit  : 0/0
 23298 ;;		Unchanged: 0/0
 23299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23300 ;;      Params:         2       0       0       0       0       0       0
 23301 ;;      Locals:         0       0       0       0       0       0       0
 23302 ;;      Temps:          0       0       0       0       0       0       0
 23303 ;;      Totals:         2       0       0       0       0       0       0
 23304 ;;Total ram usage:        2 bytes
 23305 ;; Hardware stack levels used:    1
 23306 ;; Hardware stack levels required when called:    1
 23307 ;; This function calls:
 23308 ;;		i2_I2C_Wait
 23309 ;; This function is called by:
 23310 ;;		i2_getDS1307TimeDate
 23311 ;;		i2_RTC_Init
 23312 ;;		i2_writeEEPROM_ext
 23313 ;; This function uses a non-reentrant model
 23314 ;;
 23315                           
 23316                           	psect	text93
 23317  006B88                     __ptext93:
 23318                           	opt stack 0
 23319  006B88                     i2_I2C_Write:
 23320                           	opt stack 0
 23321  006B88  FFFF               	dw	65535	; assembler added errata NOP
 23322                           
 23323                           ;I2C.c: 43: I2C_Wait();
 23324                           
 23325                           ;incstack = 0
 23326  006B8A  ECF7  F035         	call	i2_I2C_Wait	;wreg free
 23327                           
 23328                           ;I2C.c: 44: SSPBUF = d;
 23329  006B8E  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 23330  006B92  0012               	return		;funcret
 23331  006B94  FFFF               	dw	65535	; errata NOP
 23332  006B96                     __end_ofi2_I2C_Write:
 23333                           	opt stack 0
 23334                           tosu	equ	0xFFF
 23335                           tosh	equ	0xFFE
 23336                           tosl	equ	0xFFD
 23337                           pclatu	equ	0xFFB
 23338                           pclath	equ	0xFFA
 23339                           tblptru	equ	0xFF8
 23340                           tblptrh	equ	0xFF7
 23341                           tblptrl	equ	0xFF6
 23342                           tablat	equ	0xFF5
 23343                           prodh	equ	0xFF4
 23344                           prodl	equ	0xFF3
 23345                           intcon	equ	0xFF2
 23346                           intcon2	equ	0xFF1
 23347                           intcon3	equ	0xFF0
 23348                           indf0	equ	0xFEF
 23349                           postinc0	equ	0xFEE
 23350                           fsr0h	equ	0xFEA
 23351                           fsr0l	equ	0xFE9
 23352                           wreg	equ	0xFE8
 23353                           postdec1	equ	0xFE5
 23354                           fsr1h	equ	0xFE2
 23355                           fsr1l	equ	0xFE1
 23356                           indf2	equ	0xFDF
 23357                           postinc2	equ	0xFDE
 23358                           postdec2	equ	0xFDD
 23359                           fsr2h	equ	0xFDA
 23360                           fsr2l	equ	0xFD9
 23361                           status	equ	0xFD8
 23362                           
 23363 ;; *************** function i2_I2C_Stop *****************
 23364 ;; Defined at:
 23365 ;;		line 36 in file "I2C.c"
 23366 ;; Parameters:    Size  Location     Type
 23367 ;;		None
 23368 ;; Auto vars:     Size  Location     Type
 23369 ;;		None
 23370 ;; Return value:  Size  Location     Type
 23371 ;;                  1    wreg      void 
 23372 ;; Registers used:
 23373 ;;		wreg, status,2, status,0, cstack
 23374 ;; Tracked objects:
 23375 ;;		On entry : 0/0
 23376 ;;		On exit  : 0/0
 23377 ;;		Unchanged: 0/0
 23378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23379 ;;      Params:         0       0       0       0       0       0       0
 23380 ;;      Locals:         0       0       0       0       0       0       0
 23381 ;;      Temps:          0       0       0       0       0       0       0
 23382 ;;      Totals:         0       0       0       0       0       0       0
 23383 ;;Total ram usage:        0 bytes
 23384 ;; Hardware stack levels used:    1
 23385 ;; Hardware stack levels required when called:    1
 23386 ;; This function calls:
 23387 ;;		i2_I2C_Wait
 23388 ;; This function is called by:
 23389 ;;		i2_getDS1307TimeDate
 23390 ;;		i2_RTC_Init
 23391 ;;		i2_writeEEPROM_ext
 23392 ;; This function uses a non-reentrant model
 23393 ;;
 23394                           
 23395                           	psect	text94
 23396  006B4C                     __ptext94:
 23397                           	opt stack 0
 23398  006B4C                     i2_I2C_Stop:
 23399                           	opt stack 0
 23400  006B4C  FFFF               	dw	65535	; assembler added errata NOP
 23401                           
 23402                           ;I2C.c: 37: I2C_Wait();
 23403                           
 23404                           ;incstack = 0
 23405  006B4E  ECF7  F035         	call	i2_I2C_Wait	;wreg free
 23406                           
 23407                           ;I2C.c: 38: PEN = 1;
 23408  006B52  84C5               	bsf	4037,2,c	;volatile
 23409  006B54  0012               	return		;funcret
 23410  006B56  FFFF               	dw	65535	; errata NOP
 23411  006B58                     __end_ofi2_I2C_Stop:
 23412                           	opt stack 0
 23413                           tosu	equ	0xFFF
 23414                           tosh	equ	0xFFE
 23415                           tosl	equ	0xFFD
 23416                           pclatu	equ	0xFFB
 23417                           pclath	equ	0xFFA
 23418                           tblptru	equ	0xFF8
 23419                           tblptrh	equ	0xFF7
 23420                           tblptrl	equ	0xFF6
 23421                           tablat	equ	0xFF5
 23422                           prodh	equ	0xFF4
 23423                           prodl	equ	0xFF3
 23424                           intcon	equ	0xFF2
 23425                           intcon2	equ	0xFF1
 23426                           intcon3	equ	0xFF0
 23427                           indf0	equ	0xFEF
 23428                           postinc0	equ	0xFEE
 23429                           fsr0h	equ	0xFEA
 23430                           fsr0l	equ	0xFE9
 23431                           wreg	equ	0xFE8
 23432                           postdec1	equ	0xFE5
 23433                           fsr1h	equ	0xFE2
 23434                           fsr1l	equ	0xFE1
 23435                           indf2	equ	0xFDF
 23436                           postinc2	equ	0xFDE
 23437                           postdec2	equ	0xFDD
 23438                           fsr2h	equ	0xFDA
 23439                           fsr2l	equ	0xFD9
 23440                           status	equ	0xFD8
 23441                           
 23442 ;; *************** function i2_I2C_Start *****************
 23443 ;; Defined at:
 23444 ;;		line 26 in file "I2C.c"
 23445 ;; Parameters:    Size  Location     Type
 23446 ;;		None
 23447 ;; Auto vars:     Size  Location     Type
 23448 ;;		None
 23449 ;; Return value:  Size  Location     Type
 23450 ;;                  1    wreg      void 
 23451 ;; Registers used:
 23452 ;;		wreg, status,2, status,0, cstack
 23453 ;; Tracked objects:
 23454 ;;		On entry : 0/0
 23455 ;;		On exit  : 0/0
 23456 ;;		Unchanged: 0/0
 23457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23458 ;;      Params:         0       0       0       0       0       0       0
 23459 ;;      Locals:         0       0       0       0       0       0       0
 23460 ;;      Temps:          0       0       0       0       0       0       0
 23461 ;;      Totals:         0       0       0       0       0       0       0
 23462 ;;Total ram usage:        0 bytes
 23463 ;; Hardware stack levels used:    1
 23464 ;; Hardware stack levels required when called:    1
 23465 ;; This function calls:
 23466 ;;		i2_I2C_Wait
 23467 ;; This function is called by:
 23468 ;;		i2_getDS1307TimeDate
 23469 ;;		i2_RTC_Init
 23470 ;;		i2_writeEEPROM_ext
 23471 ;; This function uses a non-reentrant model
 23472 ;;
 23473                           
 23474                           	psect	text95
 23475  006B40                     __ptext95:
 23476                           	opt stack 0
 23477  006B40                     i2_I2C_Start:
 23478                           	opt stack 0
 23479  006B40  FFFF               	dw	65535	; assembler added errata NOP
 23480                           
 23481                           ;I2C.c: 27: I2C_Wait();
 23482                           
 23483                           ;incstack = 0
 23484  006B42  ECF7  F035         	call	i2_I2C_Wait	;wreg free
 23485                           
 23486                           ;I2C.c: 28: SEN = 1;
 23487  006B46  80C5               	bsf	4037,0,c	;volatile
 23488  006B48  0012               	return		;funcret
 23489  006B4A  FFFF               	dw	65535	; errata NOP
 23490  006B4C                     __end_ofi2_I2C_Start:
 23491                           	opt stack 0
 23492                           tosu	equ	0xFFF
 23493                           tosh	equ	0xFFE
 23494                           tosl	equ	0xFFD
 23495                           pclatu	equ	0xFFB
 23496                           pclath	equ	0xFFA
 23497                           tblptru	equ	0xFF8
 23498                           tblptrh	equ	0xFF7
 23499                           tblptrl	equ	0xFF6
 23500                           tablat	equ	0xFF5
 23501                           prodh	equ	0xFF4
 23502                           prodl	equ	0xFF3
 23503                           intcon	equ	0xFF2
 23504                           intcon2	equ	0xFF1
 23505                           intcon3	equ	0xFF0
 23506                           indf0	equ	0xFEF
 23507                           postinc0	equ	0xFEE
 23508                           fsr0h	equ	0xFEA
 23509                           fsr0l	equ	0xFE9
 23510                           wreg	equ	0xFE8
 23511                           postdec1	equ	0xFE5
 23512                           fsr1h	equ	0xFE2
 23513                           fsr1l	equ	0xFE1
 23514                           indf2	equ	0xFDF
 23515                           postinc2	equ	0xFDE
 23516                           postdec2	equ	0xFDD
 23517                           fsr2h	equ	0xFDA
 23518                           fsr2l	equ	0xFD9
 23519                           status	equ	0xFD8
 23520                           
 23521 ;; *************** function i2_I2C_Wait *****************
 23522 ;; Defined at:
 23523 ;;		line 22 in file "I2C.c"
 23524 ;; Parameters:    Size  Location     Type
 23525 ;;		None
 23526 ;; Auto vars:     Size  Location     Type
 23527 ;;		None
 23528 ;; Return value:  Size  Location     Type
 23529 ;;                  1    wreg      void 
 23530 ;; Registers used:
 23531 ;;		wreg, status,2, status,0
 23532 ;; Tracked objects:
 23533 ;;		On entry : 0/0
 23534 ;;		On exit  : 0/0
 23535 ;;		Unchanged: 0/0
 23536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23537 ;;      Params:         0       0       0       0       0       0       0
 23538 ;;      Locals:         0       0       0       0       0       0       0
 23539 ;;      Temps:          1       0       0       0       0       0       0
 23540 ;;      Totals:         1       0       0       0       0       0       0
 23541 ;;Total ram usage:        1 bytes
 23542 ;; Hardware stack levels used:    1
 23543 ;; This function calls:
 23544 ;;		Nothing
 23545 ;; This function is called by:
 23546 ;;		i2_I2C_Start
 23547 ;;		i2_I2C_Restart
 23548 ;;		i2_I2C_Stop
 23549 ;;		i2_I2C_Write
 23550 ;;		i2_I2C_Read
 23551 ;; This function uses a non-reentrant model
 23552 ;;
 23553                           
 23554                           	psect	text96
 23555  006BEE                     __ptext96:
 23556                           	opt stack 0
 23557  006BEE                     i2_I2C_Wait:
 23558                           	opt stack 0
 23559  006BEE  FFFF               	dw	65535	; assembler added errata NOP
 23560                           
 23561                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 23562                           
 23563                           ;incstack = 0
 23564  006BF0  B4C7               	btfsc	4039,2,c	;volatile
 23565  006BF2  D7FD               	goto	i2_I2C_Wait
 23566  006BF4  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 23567  006BF8  0E1F               	movlw	31
 23568  006BFA  1601               	andwf	??i2_I2C_Wait,f,c
 23569  006BFC  B4D8               	btfsc	status,2,c
 23570  006BFE  0012               	return		;funcret
 23571  006C00  FFFF               	dw	65535	; assembler added errata NOP
 23572  006C02  D7F5               	goto	i2_I2C_Wait
 23573  006C04  FFFF               	dw	65535	; errata NOP
 23574  006C06                     __end_ofi2_I2C_Wait:
 23575                           	opt stack 0
 23576                           tosu	equ	0xFFF
 23577                           tosh	equ	0xFFE
 23578                           tosl	equ	0xFFD
 23579                           pclatu	equ	0xFFB
 23580                           pclath	equ	0xFFA
 23581                           tblptru	equ	0xFF8
 23582                           tblptrh	equ	0xFF7
 23583                           tblptrl	equ	0xFF6
 23584                           tablat	equ	0xFF5
 23585                           prodh	equ	0xFF4
 23586                           prodl	equ	0xFF3
 23587                           intcon	equ	0xFF2
 23588                           intcon2	equ	0xFF1
 23589                           intcon3	equ	0xFF0
 23590                           indf0	equ	0xFEF
 23591                           postinc0	equ	0xFEE
 23592                           fsr0h	equ	0xFEA
 23593                           fsr0l	equ	0xFE9
 23594                           wreg	equ	0xFE8
 23595                           postdec1	equ	0xFE5
 23596                           fsr1h	equ	0xFE2
 23597                           fsr1l	equ	0xFE1
 23598                           indf2	equ	0xFDF
 23599                           postinc2	equ	0xFDE
 23600                           postdec2	equ	0xFDD
 23601                           fsr2h	equ	0xFDA
 23602                           fsr2l	equ	0xFD9
 23603                           status	equ	0xFD8
 23604                           
 23605 ;; *************** function _readButtons *****************
 23606 ;; Defined at:
 23607 ;;		line 24 in file "teclado.h"
 23608 ;; Parameters:    Size  Location     Type
 23609 ;;		None
 23610 ;; Auto vars:     Size  Location     Type
 23611 ;;		None
 23612 ;; Return value:  Size  Location     Type
 23613 ;;                  1    wreg      void 
 23614 ;; Registers used:
 23615 ;;		wreg, status,2, status,0
 23616 ;; Tracked objects:
 23617 ;;		On entry : 0/0
 23618 ;;		On exit  : 0/0
 23619 ;;		Unchanged: 0/0
 23620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23621 ;;      Params:         0       0       0       0       0       0       0
 23622 ;;      Locals:         0       0       0       0       0       0       0
 23623 ;;      Temps:          0       0       0       0       0       0       0
 23624 ;;      Totals:         0       0       0       0       0       0       0
 23625 ;;Total ram usage:        0 bytes
 23626 ;; Hardware stack levels used:    1
 23627 ;; This function calls:
 23628 ;;		Nothing
 23629 ;; This function is called by:
 23630 ;;		_TIMER
 23631 ;; This function uses a non-reentrant model
 23632 ;;
 23633                           
 23634                           	psect	text97
 23635  003660                     __ptext97:
 23636                           	opt stack 0
 23637  003660                     _readButtons:
 23638                           	opt stack 0
 23639  003660  FFFF               	dw	65535	; assembler added errata NOP
 23640                           
 23641                           ;teclado.h: 25: if (!PORTBbits.RB2) {
 23642                           
 23643                           ;incstack = 0
 23644  003662  B481               	btfsc	3969,2,c	;volatile
 23645  003664  D009               	goto	i2l462
 23646                           
 23647                           ;teclado.h: 26: flag_b_esc = 1;
 23648  003666  0E01               	movlw	1
 23649  003668  0101               	movlb	1	; () banked
 23650  00366A  6F1D               	movwf	_flag_b_esc& (0+255),b
 23651                           
 23652                           ;teclado.h: 27: if (isPressed) {
 23653  00366C  5066               	movf	_isPressed,w,c
 23654  00366E  B4D8               	btfsc	status,2,c
 23655  003670  D00E               	goto	i2l465
 23656                           
 23657                           ; BSR set to: 1
 23658                           ;teclado.h: 28: _b_esc = 1;
 23659  003672  0E01               	movlw	1
 23660  003674  6F1C               	movwf	__b_esc& (0+255),b
 23661                           
 23662                           ; BSR set to: 1
 23663                           ;teclado.h: 29: }
 23664                           ;teclado.h: 30: } else if (PORTBbits.RB2 && flag_b_esc) {
 23665  003676  D00B               	goto	i2l465
 23666  003678                     i2l462:
 23667  003678  FFFF               	dw	65535	; assembler added errata NOP
 23668  00367A  A481               	btfss	3969,2,c	;volatile
 23669  00367C  D008               	goto	i2l465
 23670  00367E  0101               	movlb	1	; () banked
 23671  003680  511D               	movf	_flag_b_esc& (0+255),w,b
 23672  003682  B4D8               	btfsc	status,2,c
 23673  003684  D004               	goto	i2l465
 23674                           
 23675                           ; BSR set to: 1
 23676                           ;teclado.h: 31: _b_esc = 1;
 23677  003686  0E01               	movlw	1
 23678  003688  6F1C               	movwf	__b_esc& (0+255),b
 23679                           
 23680                           ;teclado.h: 32: flag_b_esc = 0;
 23681  00368A  0E00               	movlw	0
 23682  00368C  6F1D               	movwf	_flag_b_esc& (0+255),b
 23683  00368E                     i2l465:
 23684  00368E  FFFF               	dw	65535	; assembler added errata NOP
 23685                           
 23686                           ;teclado.h: 33: }
 23687                           ;teclado.h: 35: if (!PORTBbits.RB4) {
 23688                           
 23689                           ; BSR set to: 1
 23690                           
 23691                           ; BSR set to: 1
 23692  003690  B881               	btfsc	3969,4,c	;volatile
 23693  003692  D009               	goto	i2l466
 23694                           
 23695                           ;teclado.h: 36: flag_b_menos = 1;
 23696  003694  0E01               	movlw	1
 23697  003696  0101               	movlb	1	; () banked
 23698  003698  6F1B               	movwf	_flag_b_menos& (0+255),b
 23699                           
 23700                           ;teclado.h: 37: if (isPressed) {
 23701  00369A  5066               	movf	_isPressed,w,c
 23702  00369C  B4D8               	btfsc	status,2,c
 23703  00369E  D00E               	goto	i2l469
 23704                           
 23705                           ; BSR set to: 1
 23706                           ;teclado.h: 38: _b_menos = 1;
 23707  0036A0  0E01               	movlw	1
 23708  0036A2  6F1A               	movwf	__b_menos& (0+255),b
 23709                           
 23710                           ; BSR set to: 1
 23711                           ;teclado.h: 39: }
 23712                           ;teclado.h: 40: } else if (PORTBbits.RB4 && flag_b_menos) {
 23713  0036A4  D00B               	goto	i2l469
 23714  0036A6                     i2l466:
 23715  0036A6  FFFF               	dw	65535	; assembler added errata NOP
 23716  0036A8  A881               	btfss	3969,4,c	;volatile
 23717  0036AA  D008               	goto	i2l469
 23718  0036AC  0101               	movlb	1	; () banked
 23719  0036AE  511B               	movf	_flag_b_menos& (0+255),w,b
 23720  0036B0  B4D8               	btfsc	status,2,c
 23721  0036B2  D004               	goto	i2l469
 23722                           
 23723                           ; BSR set to: 1
 23724                           ;teclado.h: 41: _b_menos = 1;
 23725  0036B4  0E01               	movlw	1
 23726  0036B6  6F1A               	movwf	__b_menos& (0+255),b
 23727                           
 23728                           ;teclado.h: 42: flag_b_menos = 0;
 23729  0036B8  0E00               	movlw	0
 23730  0036BA  6F1B               	movwf	_flag_b_menos& (0+255),b
 23731  0036BC                     i2l469:
 23732  0036BC  FFFF               	dw	65535	; assembler added errata NOP
 23733                           
 23734                           ;teclado.h: 43: }
 23735                           ;teclado.h: 45: if (!PORTBbits.RB5) {
 23736                           
 23737                           ; BSR set to: 1
 23738                           
 23739                           ; BSR set to: 1
 23740  0036BE  BA81               	btfsc	3969,5,c	;volatile
 23741  0036C0  D009               	goto	i2l470
 23742                           
 23743                           ;teclado.h: 46: flag_b_mais = 1;
 23744  0036C2  0E01               	movlw	1
 23745  0036C4  0101               	movlb	1	; () banked
 23746  0036C6  6F19               	movwf	_flag_b_mais& (0+255),b
 23747                           
 23748                           ;teclado.h: 47: if (isPressed) {
 23749  0036C8  5066               	movf	_isPressed,w,c
 23750  0036CA  B4D8               	btfsc	status,2,c
 23751  0036CC  D00E               	goto	i2l473
 23752                           
 23753                           ; BSR set to: 1
 23754                           ;teclado.h: 48: _b_mais = 1;
 23755  0036CE  0E01               	movlw	1
 23756  0036D0  6F18               	movwf	__b_mais& (0+255),b
 23757                           
 23758                           ; BSR set to: 1
 23759                           ;teclado.h: 49: }
 23760                           ;teclado.h: 50: } else if (PORTBbits.RB5 && flag_b_mais) {
 23761  0036D2  D00B               	goto	i2l473
 23762  0036D4                     i2l470:
 23763  0036D4  FFFF               	dw	65535	; assembler added errata NOP
 23764  0036D6  AA81               	btfss	3969,5,c	;volatile
 23765  0036D8  D008               	goto	i2l473
 23766  0036DA  0101               	movlb	1	; () banked
 23767  0036DC  5119               	movf	_flag_b_mais& (0+255),w,b
 23768  0036DE  B4D8               	btfsc	status,2,c
 23769  0036E0  D004               	goto	i2l473
 23770                           
 23771                           ; BSR set to: 1
 23772                           ;teclado.h: 51: _b_mais = 1;
 23773  0036E2  0E01               	movlw	1
 23774  0036E4  6F18               	movwf	__b_mais& (0+255),b
 23775                           
 23776                           ;teclado.h: 52: flag_b_mais = 0;
 23777  0036E6  0E00               	movlw	0
 23778  0036E8  6F19               	movwf	_flag_b_mais& (0+255),b
 23779  0036EA                     i2l473:
 23780  0036EA  FFFF               	dw	65535	; assembler added errata NOP
 23781                           
 23782                           ;teclado.h: 53: }
 23783                           ;teclado.h: 55: if (!PORTBbits.RB3) {
 23784                           
 23785                           ; BSR set to: 1
 23786                           
 23787                           ; BSR set to: 1
 23788  0036EC  B681               	btfsc	3969,3,c	;volatile
 23789  0036EE  D009               	goto	i2l474
 23790                           
 23791                           ;teclado.h: 56: flag_b_ok = 1;
 23792  0036F0  0E01               	movlw	1
 23793  0036F2  0101               	movlb	1	; () banked
 23794  0036F4  6F17               	movwf	_flag_b_ok& (0+255),b
 23795                           
 23796                           ;teclado.h: 57: if (isPressed) {
 23797  0036F6  5066               	movf	_isPressed,w,c
 23798  0036F8  B4D8               	btfsc	status,2,c
 23799  0036FA  D00E               	goto	i2l477
 23800                           
 23801                           ; BSR set to: 1
 23802                           ;teclado.h: 58: _b_ok = 1;
 23803  0036FC  0E01               	movlw	1
 23804  0036FE  6F16               	movwf	__b_ok& (0+255),b
 23805                           
 23806                           ; BSR set to: 1
 23807                           ;teclado.h: 59: }
 23808                           ;teclado.h: 60: } else if (PORTBbits.RB3 && flag_b_ok) {
 23809  003700  D00B               	goto	i2l477
 23810  003702                     i2l474:
 23811  003702  FFFF               	dw	65535	; assembler added errata NOP
 23812  003704  A681               	btfss	3969,3,c	;volatile
 23813  003706  D008               	goto	i2l477
 23814  003708  0101               	movlb	1	; () banked
 23815  00370A  5117               	movf	_flag_b_ok& (0+255),w,b
 23816  00370C  B4D8               	btfsc	status,2,c
 23817  00370E  D004               	goto	i2l477
 23818                           
 23819                           ; BSR set to: 1
 23820                           ;teclado.h: 61: _b_ok = 1;
 23821  003710  0E01               	movlw	1
 23822  003712  6F16               	movwf	__b_ok& (0+255),b
 23823                           
 23824                           ;teclado.h: 62: flag_b_ok = 0;
 23825  003714  0E00               	movlw	0
 23826  003716  6F17               	movwf	_flag_b_ok& (0+255),b
 23827  003718                     i2l477:
 23828  003718  FFFF               	dw	65535	; assembler added errata NOP
 23829                           
 23830                           ;teclado.h: 63: }
 23831                           ;teclado.h: 65: if (!PORTBbits.RB2 || !PORTBbits.RB3 || !PORTBbits.RB4 || !PORTBbits.RB5
      +                          ) {
 23832                           
 23833                           ; BSR set to: 1
 23834                           
 23835                           ; BSR set to: 1
 23836  00371A  B481               	btfsc	3969,2,c	;volatile
 23837  00371C  A681               	btfss	3969,3,c	;volatile
 23838  00371E  D004               	goto	i2u686_40
 23839  003720  A881               	btfss	3969,4,c	;volatile
 23840  003722  D002               	goto	i2u686_40
 23841  003724  BA81               	btfsc	3969,5,c	;volatile
 23842  003726  D00B               	goto	i2l478
 23843  003728                     i2u686_40:
 23844  003728  FFFF               	dw	65535	; assembler added errata NOP
 23845                           
 23846                           ;teclado.h: 66: counterPressedTime++;
 23847  00372A  0101               	movlb	1	; () banked
 23848  00372C  2B15               	incf	_counterPressedTime& (0+255),f,b
 23849                           
 23850                           ; BSR set to: 1
 23851                           ;teclado.h: 67: if (counterPressedTime > 15) {
 23852  00372E  0E0F               	movlw	15
 23853  003730  6515               	cpfsgt	_counterPressedTime& (0+255),b
 23854  003732  D00B               	goto	i2l482
 23855                           
 23856                           ; BSR set to: 1
 23857                           ;teclado.h: 68: counterPressedTime = 15;
 23858  003734  0E0F               	movlw	15
 23859  003736  6F15               	movwf	_counterPressedTime& (0+255),b
 23860                           
 23861                           ;teclado.h: 69: isPressed = 1;
 23862  003738  0E01               	movlw	1
 23863  00373A  6E66               	movwf	_isPressed,c
 23864                           
 23865                           ; BSR set to: 1
 23866                           ;teclado.h: 70: }
 23867                           ;teclado.h: 71: } else {
 23868  00373C  D006               	goto	i2l482
 23869  00373E                     i2l478:
 23870  00373E  FFFF               	dw	65535	; assembler added errata NOP
 23871                           
 23872                           ;teclado.h: 72: isPressed = 0;
 23873                           
 23874                           ; BSR set to: 1
 23875  003740  0E00               	movlw	0
 23876  003742  6E66               	movwf	_isPressed,c
 23877                           
 23878                           ;teclado.h: 73: counterPressedTime = 0;
 23879  003744  0E00               	movlw	0
 23880  003746  0101               	movlb	1	; () banked
 23881  003748  6F15               	movwf	_counterPressedTime& (0+255),b
 23882  00374A                     i2l482:
 23883  00374A  FFFF               	dw	65535	; assembler added errata NOP
 23884                           
 23885                           ; BSR set to: 1
 23886                           
 23887                           ; BSR set to: 1
 23888  00374C  0012               	return		;funcret
 23889  00374E  FFFF               	dw	65535	; errata NOP
 23890  003750                     __end_of_readButtons:
 23891                           	opt stack 0
 23892                           tosu	equ	0xFFF
 23893                           tosh	equ	0xFFE
 23894                           tosl	equ	0xFFD
 23895                           pclatu	equ	0xFFB
 23896                           pclath	equ	0xFFA
 23897                           tblptru	equ	0xFF8
 23898                           tblptrh	equ	0xFF7
 23899                           tblptrl	equ	0xFF6
 23900                           tablat	equ	0xFF5
 23901                           prodh	equ	0xFF4
 23902                           prodl	equ	0xFF3
 23903                           intcon	equ	0xFF2
 23904                           intcon2	equ	0xFF1
 23905                           intcon3	equ	0xFF0
 23906                           indf0	equ	0xFEF
 23907                           postinc0	equ	0xFEE
 23908                           fsr0h	equ	0xFEA
 23909                           fsr0l	equ	0xFE9
 23910                           wreg	equ	0xFE8
 23911                           postdec1	equ	0xFE5
 23912                           fsr1h	equ	0xFE2
 23913                           fsr1l	equ	0xFE1
 23914                           indf2	equ	0xFDF
 23915                           postinc2	equ	0xFDE
 23916                           postdec2	equ	0xFDD
 23917                           fsr2h	equ	0xFDA
 23918                           fsr2l	equ	0xFD9
 23919                           status	equ	0xFD8
 23920                           tosu	equ	0xFFF
 23921                           tosh	equ	0xFFE
 23922                           tosl	equ	0xFFD
 23923                           pclatu	equ	0xFFB
 23924                           pclath	equ	0xFFA
 23925                           tblptru	equ	0xFF8
 23926                           tblptrh	equ	0xFF7
 23927                           tblptrl	equ	0xFF6
 23928                           tablat	equ	0xFF5
 23929                           prodh	equ	0xFF4
 23930                           prodl	equ	0xFF3
 23931                           intcon	equ	0xFF2
 23932                           intcon2	equ	0xFF1
 23933                           intcon3	equ	0xFF0
 23934                           indf0	equ	0xFEF
 23935                           postinc0	equ	0xFEE
 23936                           fsr0h	equ	0xFEA
 23937                           fsr0l	equ	0xFE9
 23938                           wreg	equ	0xFE8
 23939                           postdec1	equ	0xFE5
 23940                           fsr1h	equ	0xFE2
 23941                           fsr1l	equ	0xFE1
 23942                           indf2	equ	0xFDF
 23943                           postinc2	equ	0xFDE
 23944                           postdec2	equ	0xFDD
 23945                           fsr2h	equ	0xFDA
 23946                           fsr2l	equ	0xFD9
 23947                           status	equ	0xFD8
 23948                           
 23949                           	psect	text98
 23950  000000                     __ptext98:
 23951                           	opt stack 0
 23952                           tosu	equ	0xFFF
 23953                           tosh	equ	0xFFE
 23954                           tosl	equ	0xFFD
 23955                           pclatu	equ	0xFFB
 23956                           pclath	equ	0xFFA
 23957                           tblptru	equ	0xFF8
 23958                           tblptrh	equ	0xFF7
 23959                           tblptrl	equ	0xFF6
 23960                           tablat	equ	0xFF5
 23961                           prodh	equ	0xFF4
 23962                           prodl	equ	0xFF3
 23963                           intcon	equ	0xFF2
 23964                           intcon2	equ	0xFF1
 23965                           intcon3	equ	0xFF0
 23966                           indf0	equ	0xFEF
 23967                           postinc0	equ	0xFEE
 23968                           fsr0h	equ	0xFEA
 23969                           fsr0l	equ	0xFE9
 23970                           wreg	equ	0xFE8
 23971                           postdec1	equ	0xFE5
 23972                           fsr1h	equ	0xFE2
 23973                           fsr1l	equ	0xFE1
 23974                           indf2	equ	0xFDF
 23975                           postinc2	equ	0xFDE
 23976                           postdec2	equ	0xFDD
 23977                           fsr2h	equ	0xFDA
 23978                           fsr2l	equ	0xFD9
 23979                           status	equ	0xFD8
 23980                           
 23981                           	psect	rparam
 23982  0000                     tosu	equ	0xFFF
 23983                           tosh	equ	0xFFE
 23984                           tosl	equ	0xFFD
 23985                           pclatu	equ	0xFFB
 23986                           pclath	equ	0xFFA
 23987                           tblptru	equ	0xFF8
 23988                           tblptrh	equ	0xFF7
 23989                           tblptrl	equ	0xFF6
 23990                           tablat	equ	0xFF5
 23991                           prodh	equ	0xFF4
 23992                           prodl	equ	0xFF3
 23993                           intcon	equ	0xFF2
 23994                           intcon2	equ	0xFF1
 23995                           intcon3	equ	0xFF0
 23996                           indf0	equ	0xFEF
 23997                           postinc0	equ	0xFEE
 23998                           fsr0h	equ	0xFEA
 23999                           fsr0l	equ	0xFE9
 24000                           wreg	equ	0xFE8
 24001                           postdec1	equ	0xFE5
 24002                           fsr1h	equ	0xFE2
 24003                           fsr1l	equ	0xFE1
 24004                           indf2	equ	0xFDF
 24005                           postinc2	equ	0xFDE
 24006                           postdec2	equ	0xFDD
 24007                           fsr2h	equ	0xFDA
 24008                           fsr2l	equ	0xFD9
 24009                           status	equ	0xFD8
 24010                           
 24011                           	psect	temp
 24012  00007F                     btemp:
 24013                           	opt stack 0
 24014  00007F                     	ds	1
 24015  0000                     int$flags	set	btemp
 24016  0000                     wtemp6	set	btemp+1
 24017                           tosu	equ	0xFFF
 24018                           tosh	equ	0xFFE
 24019                           tosl	equ	0xFFD
 24020                           pclatu	equ	0xFFB
 24021                           pclath	equ	0xFFA
 24022                           tblptru	equ	0xFF8
 24023                           tblptrh	equ	0xFF7
 24024                           tblptrl	equ	0xFF6
 24025                           tablat	equ	0xFF5
 24026                           prodh	equ	0xFF4
 24027                           prodl	equ	0xFF3
 24028                           intcon	equ	0xFF2
 24029                           intcon2	equ	0xFF1
 24030                           intcon3	equ	0xFF0
 24031                           indf0	equ	0xFEF
 24032                           postinc0	equ	0xFEE
 24033                           fsr0h	equ	0xFEA
 24034                           fsr0l	equ	0xFE9
 24035                           wreg	equ	0xFE8
 24036                           postdec1	equ	0xFE5
 24037                           fsr1h	equ	0xFE2
 24038                           fsr1l	equ	0xFE1
 24039                           indf2	equ	0xFDF
 24040                           postinc2	equ	0xFDE
 24041                           postdec2	equ	0xFDD
 24042                           fsr2h	equ	0xFDA
 24043                           fsr2l	equ	0xFD9
 24044                           status	equ	0xFD8


Data Sizes:
    Strings     1363
    Constant    58
    Data        15
    BSS         282
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     97     126
    BANK0           128     91     128
    BANK1           256      0     231
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2571	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2570	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2569	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_126(CODE[15]), STR_125(CODE[12]), STR_124(CODE[10]), 
		 -> STR_123(CODE[18]), STR_122(CODE[10]), STR_121(CODE[18]), STR_120(CODE[16]), 
		 -> STR_119(CODE[10]), STR_117(CODE[3]), STR_116(CODE[14]), STR_115(CODE[20]), 
		 -> STR_114(CODE[8]), STR_113(CODE[10]), STR_112(CODE[11]), STR_111(CODE[9]), 
		 -> STR_110(CODE[3]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[11]), 
		 -> STR_106(CODE[11]), STR_105(CODE[18]), STR_104(CODE[5]), STR_103(CODE[12]), 
		 -> STR_102(CODE[5]), STR_101(CODE[14]), STR_100(CODE[19]), STR_97(CODE[3]), 
		 -> STR_96(CODE[7]), STR_95(CODE[7]), STR_93(CODE[12]), STR_92(CODE[26]), 
		 -> STR_91(CODE[20]), STR_90(CODE[8]), STR_87(CODE[14]), STR_84(CODE[14]), 
		 -> STR_83(CODE[11]), STR_80(CODE[10]), STR_79(CODE[31]), STR_76(CODE[11]), 
		 -> STR_75(CODE[20]), STR_74(CODE[20]), STR_73(CODE[21]), STR_72(CODE[15]), 
		 -> STR_71(CODE[6]), STR_70(CODE[15]), STR_69(CODE[6]), STR_68(CODE[20]), 
		 -> STR_67(CODE[15]), STR_66(CODE[19]), STR_65(CODE[20]), STR_64(CODE[21]), 
		 -> STR_63(CODE[21]), STR_62(CODE[18]), STR_61(CODE[20]), STR_60(CODE[12]), 
		 -> STR_59(CODE[17]), STR_58(CODE[21]), STR_57(CODE[16]), STR_54(CODE[15]), 
		 -> STR_51(CODE[15]), STR_48(CODE[11]), STR_47(CODE[17]), STR_44(CODE[9]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[15]), 
		 -> STR_39(CODE[15]), STR_38(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_37(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), STR_25(CODE[63]), 
		 -> STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), STR_18(CODE[5]), 
		 -> STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), STR_8(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_127(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_118(CODE[12]), STR_99(CODE[17]), STR_98(CODE[13]), 
		 -> STR_94(CODE[12]), STR_89(CODE[5]), STR_88(CODE[3]), STR_86(CODE[5]), 
		 -> STR_85(CODE[3]), STR_82(CODE[5]), STR_81(CODE[3]), STR_78(CODE[4]), 
		 -> STR_77(CODE[4]), STR_56(CODE[5]), STR_55(CODE[3]), STR_53(CODE[5]), 
		 -> STR_52(CODE[3]), line3(BANK1[21]), STR_50(CODE[5]), STR_49(CODE[3]), 
		 -> STR_46(CODE[13]), STR_45(CODE[10]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), STR_32(CODE[6]), STR_31(CODE[3]), STR_30(CODE[6]), 
		 -> STR_29(CODE[3]), STR_28(CODE[6]), STR_27(CODE[3]), STR_15(CODE[12]), 
		 -> tel2(BANK1[12]), tel1(BANK1[12]), bufferAUX(BANK1[20]), NULL(NULL[0]), 
		 -> bufferSerial(BANK1[60]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 126
		 -> intToFloatStr@conv(BANK0[4]), STR_126(CODE[15]), STR_125(CODE[12]), STR_124(CODE[10]), 
		 -> STR_123(CODE[18]), STR_122(CODE[10]), STR_121(CODE[18]), STR_120(CODE[16]), 
		 -> STR_119(CODE[10]), STR_117(CODE[3]), STR_116(CODE[14]), STR_115(CODE[20]), 
		 -> STR_114(CODE[8]), STR_113(CODE[10]), STR_112(CODE[11]), STR_111(CODE[9]), 
		 -> STR_110(CODE[3]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[11]), 
		 -> STR_106(CODE[11]), STR_105(CODE[18]), STR_104(CODE[5]), STR_103(CODE[12]), 
		 -> STR_102(CODE[5]), STR_101(CODE[14]), STR_100(CODE[19]), STR_97(CODE[3]), 
		 -> STR_96(CODE[7]), STR_95(CODE[7]), STR_93(CODE[12]), STR_92(CODE[26]), 
		 -> STR_91(CODE[20]), STR_90(CODE[8]), STR_87(CODE[14]), STR_84(CODE[14]), 
		 -> STR_83(CODE[11]), STR_80(CODE[10]), STR_79(CODE[31]), STR_76(CODE[11]), 
		 -> STR_75(CODE[20]), STR_74(CODE[20]), STR_73(CODE[21]), STR_72(CODE[15]), 
		 -> STR_71(CODE[6]), STR_70(CODE[15]), STR_69(CODE[6]), STR_68(CODE[20]), 
		 -> STR_67(CODE[15]), STR_66(CODE[19]), STR_65(CODE[20]), STR_64(CODE[21]), 
		 -> STR_63(CODE[21]), STR_62(CODE[18]), STR_61(CODE[20]), STR_60(CODE[12]), 
		 -> STR_59(CODE[17]), STR_58(CODE[21]), STR_57(CODE[16]), STR_54(CODE[15]), 
		 -> STR_51(CODE[15]), STR_48(CODE[11]), STR_47(CODE[17]), STR_44(CODE[9]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[15]), 
		 -> STR_39(CODE[15]), STR_38(CODE[20]), STR_37(CODE[7]), STR_35(CODE[11]), 
		 -> STR_26(CODE[104]), STR_25(CODE[63]), STR_23(CODE[18]), STR_21(CODE[7]), 
		 -> STR_20(CODE[12]), STR_18(CODE[5]), STR_14(CODE[126]), STR_12(CODE[18]), 
		 -> STR_10(CODE[12]), STR_8(CODE[5]), STR_4(CODE[5]), STR_3(CODE[9]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    S1800__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1800__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1645	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_99(CODE[17]), STR_98(CODE[13]), 

    dataLoger$1630	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_89(CODE[5]), STR_88(CODE[3]), 

    dataLoger$1625	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_86(CODE[5]), STR_85(CODE[3]), 

    dataLoger$1619	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_82(CODE[5]), STR_81(CODE[3]), 

    tela_testeBombas$1600	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_78(CODE[4]), STR_77(CODE[4]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    acaoTesteBombas$1514	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_56(CODE[5]), STR_55(CODE[3]), 

    acaoTesteBombas$1509	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[3]), 

    acaoTesteBombas$1504	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_50(CODE[5]), STR_49(CODE[3]), 

    acaoTesteBombas$1497	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_46(CODE[13]), STR_45(CODE[10]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    enviaSMS$1405	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    enviaSMS$1400	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_28(CODE[6]), STR_27(CODE[3]), 

    enviaSMS$1399	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), STR_29(CODE[3]), 

    enviaSMS$1398	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), STR_31(CODE[3]), 

    enviaSMS$1385	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    comunicarTeste$1370	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    i2_reiniciaLCD->i2_criarCaracteresCGRAM
    i2_criarCaracteresCGRAM->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Init->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _verificarIntervaloTesteBombas->_writeEEPROM_ext
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _reiniciaLCD->_criarCaracteresCGRAM
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _Lcd_Init->_Lcd_Cmd
    _lerTransdutor->_map
    _map->___aldiv
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBombas->_enviaSMS
    _acaoTesteBombas->_intToFloatStr
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _drenarPressao->_sprintf
    _sprintf->__doprnt
    _acaoBombas->_enviaSMS
    _enviaSMS->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  382933
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                      _lerTransdutor
           _monitorarAlteracaoEstado
           _partidaBombaEstacionaria
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
      _verificarIntervaloTesteBombas
 ---------------------------------------------------------------------------------
 (1) _verificarIntervaloTesteBombas                        0     0      0    5330
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     4     4      0   25071
                                             59 BANK0      4     4      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   24379
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4662
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    2206
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   37400
                                             72 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                    _resetParametros
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _resetParametros                                      0     0      0     720
                        _reiniciaLCD
 ---------------------------------------------------------------------------------
 (3) _reiniciaLCD                                          0     0      0     720
                           _Lcd_Init
               _criarCaracteresCGRAM
 ---------------------------------------------------------------------------------
 (4) _criarCaracteresCGRAM                                56    56      0     522
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _partidaBombaEstacionaria                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _monitorarAlteracaoEstado                             4     4      0      51
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _lerTransdutor                                        9     9      0    3200
                                             42 BANK0      9     9      0
                            ___awdiv
                                _map
 ---------------------------------------------------------------------------------
 (2) _map                                                 28    18     10    1626
                                             14 BANK0     28    18     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   11976
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          6     6      0   14588
                                             59 BANK0      6     6      0
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   28795
                                             76 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   17236
                                             59 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             69 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   19199
                                             59 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   25047
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   35799
                                             63 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                       4     4      0   10593
                                             59 BANK0      4     4      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                        18    10      8    2651
                                              8 BANK0     18    10      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (5) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   42079
                                             72 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    5129
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     19    19      0   74246
                                             72 BANK0     19    19      0
                            _btPress
                      _drenarPressao
                           _enviaSMS
                      _intToFloatStr
                     _readEEPROM_ext
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8726
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5330
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   16940
                                             59 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1364
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _drenarPressao                                        0     0      0   14566
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26     6     20   14566
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           3     3      0   10755
                                             72 BANK0      3     3      0
                           _enviaSMS
 ---------------------------------------------------------------------------------
 (2) _enviaSMS                                            13    13      0   10755
                                             59 BANK0     13    13      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     402
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4630
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1410
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3269
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2     858
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (6) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TIMER                                               37    37      0    2981
                                             60 COMRAM    37    37      0
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (8) _timer                                                0     0      0    2698
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                      i2_reiniciaLCD
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (9) i2_reiniciaLCD                                        0     0      0     718
                         i2_Lcd_Init
             i2_criarCaracteresCGRAM
 ---------------------------------------------------------------------------------
 (10) i2_criarCaracteresCGRAM                             56    56      0     520
                                              4 COMRAM    56    56      0
                          i2_Lcd_Cmd
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (11) i2_Lcd_Write_Char                                    3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Init                                          1     1      0     198
                                              3 COMRAM     1     1      0
                          i2_Lcd_Cmd
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (11) i2_Lcd_Cmd                                           2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (12) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Restart                                       0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Read                                          4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_BCDtoDEC                                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (9) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (10) i2_delay                                             3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Write                                         2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Stop                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Start                                         0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
   _acaoTesteBombas
     _btPress
     _drenarPressao
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _lerTransdutor
     ___awdiv
     _map
       ___aldiv
       ___lmul
   _monitorarAlteracaoEstado
   _partidaBombaEstacionaria
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _resetParametros
       _reiniciaLCD
         _Lcd_Init
           _Lcd_Cmd
             _Lcd_Port
           _Lcd_Port
         _criarCaracteresCGRAM
           _Lcd_Cmd
             _Lcd_Port
           _Lcd_Write_Char
             _Lcd_Port
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _verificarIntervaloTesteBombas
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_reiniciaLCD
       i2_Lcd_Init
         i2_Lcd_Cmd
           i2_Lcd_Port
         i2_Lcd_Port
       i2_criarCaracteresCGRAM
         i2_Lcd_Cmd
           i2_Lcd_Port
         i2_Lcd_Write_Char
           i2_Lcd_Port
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E7       7       90.2%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5B      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     61      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E5      15        0.0%
DATA                 0      0     1E5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 16 19:07:05 2020

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 6EF0  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2D32  
                                        __end_of_partidaBombaEstacionaria 75C2  
                                                             __CFG_OSC$HS 000000  
                                                             __CFG_WDT$ON 000000  
                                               __size_ofi2_Lcd_Write_Char 0050  
                                                                     l310 72B2  
                                                                     l311 72BE  
                                                                     l400 19DE  
                                                                     l320 2B7C  
                                                                     l312 72CA  
                                                                     l401 19CE  
                                                                     l321 29EE  
                                                                     l313 72D6  
                                                                     l410 1A28  
                                                                     l330 2AEA  
                                                                     l314 72E2  
                                                                     l323 2A3E  
                                                                     l251 2DE6  
                                                                     l340 260E  
                                                                     l332 2B12  
                                                                     l252 2E28  
                                                                     l405 19E6  
                                                                     l501 77B2  
                                                                     l341 27E6  
                                                                     l253 2E2C  
                                                                     l309 72A6  
                                                                     l414 1A74  
                                                                     l342 262E  
                                                                     l318 2B58  
                                                                     l334 2B3C  
                                                                     l326 2A6E  
                                                                     l254 2E3C  
                                                                     l246 2D66  
                                                                     l407 19FC  
                                                                     l431 3C80  
                                                                     l343 265E  
                                                                     l335 2B4C  
                                                                     l319 29C6  
                                                                     l416 1A82  
                                                                     l504 3A26  
                                                                     l352 26D4  
                                                                     l328 2AC2  
                                                                     l345 267E  
                                                                     l329 2B3E  
                                                                     l249 2D7A  
                                                                     l521 75BC  
                                                                     l513 75AE  
                                                                     l610 71F4  
                                                                     l370 1ACE  
                                                                     l506 3A48  
                                                                     l530 6D74  
                                                                     l514 757A  
                                                                     l611 71F8  
                                                                     l371 17BA  
                                                                     l507 3A7C  
                                                                     l339 27B0  
                                                                     l355 274E  
                                                                     l612 7202  
                                                                     l372 17EA  
                                                                     l508 3AAA  
                                                                     l356 2784  
                                                                     l348 26A8  
                                                                     l540 772E  
                                                                     l516 7586  
                                                                     l700 1FE0  
                                                                     l613 7206  
                                                                     l277 7044  
                                                                     l381 1876  
                                                                     l509 3ABC  
                                                                     l357 2770  
                                                                     l285 340A  
                                                                     l701 1FFA  
                                                                     l606 71D8  
                                                                     l382 197C  
                                                                     l390 18FA  
                                                                     l374 181E  
                                                                     l366 1792  
                                                                     l550 135C  
                                                                     l358 277A  
                                                                     l286 3386  
                                                                     l534 76CA  
                                                                     l518 7594  
                                                                     l702 2014  
                                                                     l526 6F22  
                                                                     l607 71DC  
                                                                     l383 18C6  
                                                                     l551 0FBE  
                                                                     l623 3C28  
                                                                     l287 33CE  
                                                                     l535 76D8  
                                                                     l519 759A  
                                                                     l711 213A  
                                                                     l703 202E  
                                                                     l608 71E6  
                                                                     l368 1A8E  
                                                                     l384 1968  
                                                                     l552 13B0  
                                                                     l544 0F68  
                                                                     l624 3B90  
                                                                     l536 76E6  
                                                                     l712 214E  
                                                                     l704 2048  
                                                                     l609 71EA  
                                                                     l377 1848  
                                                                     l369 179A  
                                                                     l561 10B6  
                                                                     l553 0FE0  
                                                                     l625 3C46  
                                                                     l641 2414  
                                                                     l537 76F4  
                                                                     l721 21B8  
                                                                     l705 20AE  
                                                                     l394 1914  
                                                                     l386 18E0  
                                                                     l562 10F4  
                                                                     l546 0F52  
                                                                     l626 3BB6  
                                                                     l810 1E1C  
                                                                     l802 1D7C  
                                                                     l538 7702  
                                                                     l714 2168  
                                                                     l706 20DE  
                                                                     l730 2272  
                                                                     l491 774C  
                                                                     l555 101A  
                                                                     l627 3BDC  
                                                                     l643 259C  
                                                                     l539 7710  
                                                                     l651 3B0E  
                                                                     l707 210E  
                                                                     l564 1110  
                                                                     l556 1058  
                                                                     l548 0F5A  
                                                                     l900 1C5A  
                                                                     l628 3C02  
                                                                     l636 6FB2  
                                                                     l644 25AE  
                                                                     l716 2190  
                                                                     l565 1118  
                                                                     l813 1F02  
                                                                     l653 3B1A  
                                                                     l717 219E  
                                                                     l725 2380  
                                                                     l733 22A6  
                                                                     l398 198A  
                                                                     l486 7792  
                                                                     l494 775C  
                                                                     l582 1218  
                                                                     l574 11C2  
                                                                     l558 106A  
                                                                     l902 1C6A  
                                                                     l814 1F1C  
                                                                     l806 1DE0  
                                                                     l654 3B2A  
                                                                     l742 2342  
                                                                     l726 223E  
                                                                     l487 773C  
                                                                     l583 1232  
                                                                     l567 115C  
                                                                     l559 1072  
                                                                     l903 1C90  
                                                                     l719 21AA  
                                                                     l576 11D2  
                                                                     l568 11A6  
                                                                     l664 70B8  
                                                                     l904 1CA2  
                                                                     l816 1F3C  
                                                                     l736 22DA  
                                                                     l760 2978  
                                                                     l497 776C  
                                                                     l593 12CA  
                                                                     l585 125A  
                                                                     l665 70A0  
                                                                     l841 14F0  
                                                                     l833 1446  
                                                                     l657 3B3C  
                                                                     l729 23AC  
                                                                     l745 2376  
                                                                     l761 28CC  
                                                                     l753 2866  
                                                                     l498 778C  
                                                                     l906 1CB2  
                                                                     l850 15C4  
                                                                     l746 23C4  
                                                                     l770 2956  
                                                                     l762 28F2  
                                                                     l499 7786  
                                                                     l907 1D1C  
                                                                     l835 145A  
                                                                     l819 1F80  
                                                                     l659 3B6C  
                                                                     l739 230E  
                                                                     l771 29AA  
                                                                     l763 2904  
                                                                     l844 1754  
                                                                     l860 16BE  
                                                                     l684 3246  
                                                                     l748 23E8  
                                                                     l756 295E  
                                                                     l597 1314  
                                                                     l589 1292  
                                                                     l909 1D2E  
                                                                     l845 150A  
                                                                     l837 14D4  
                                                                     l829 1404  
                                                                     l685 3228  
                                                                     l773 29BC  
                                                                     l757 2890  
                                                                     l854 176E  
                                                                     l846 153A  
                                                                     l838 148C  
                                                                     l766 2910  
                                                                     l758 28B8  
                                                                     l599 1348  
                                                                     l855 1604  
                                                                     l871 2CD2  
                                                                     l687 32C6  
                                                                     l767 2918  
                                                                     l864 1708  
                                                                     l856 1634  
                                                                     l848 1580  
                                                                     l872 2C1E  
                                                                     l768 2940  
                                                                     l849 15A2  
                                                                     l881 2CC8  
                                                                     l873 2C46  
                                                                     l689 32F8  
                                                                     l697 2066  
                                                                     l890 1BB8  
                                                                     l866 174C  
                                                                     l858 167A  
                                                                     l882 2D00  
                                                                     l698 1FC6  
                                                                     l891 1BCA  
                                                                     l859 169C  
                                                                     l875 2CEC  
                                                                     l699 2090  
                                                                     l971 0B68  
                                                                     l884 2D2C  
                                                                     l876 2C5A  
                                                                     l980 0C1E  
                                                                     l972 0B7A  
                                                                     l893 1CDA  
                                                                     l981 0C7A  
                                                                     l973 0B9C  
                                                                     l894 1BDA  
                                                                     l982 0C82  
                                                                     l895 1C00  
                                                                     l879 2C8C  
                                                                     l983 0C8A  
                                                                     l888 1CBA  
                                                                     l896 1C12  
                                                                     l976 0CC4  
                                                                     l984 0C92  
                                                                     l889 1B90  
                                                                     l993 0E56  
                                                                     l985 0C9A  
                                                                     l977 0BBA  
                                                                     l898 1C22  
                                                                     l994 0D22  
                                                                     l978 0D0E  
                                                                     l986 0CA2  
                                                                     l899 1C48  
                                                                     l987 0CAA  
                                                                     l979 0BC2  
                                                                     l996 0E8E  
                                                                     l988 0CB2  
                                                                     l997 0D44  
                                                                     l989 0CBA  
                                                                     l999 0D66  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                                     _cbf 0067  
                                        __end_of_monitorarAlteracaoEstado 7734  
                                                   __end_ofi2_reiniciaLCD 6C80  
                                                                     _map 30D8  
                                                                     _rtc 0077  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 0260  
                                                            __CFG_LVP$OFF 000000  
                                                                    l1001 0D88  
                                                                    l1011 0E44  
                                                                    l1003 0DAA  
                                                                    l1100 31F6  
                                                                    l1012 0EA0  
                                                                    l1101 31EC  
                                                                    l1013 0EB2  
                                                                    l1005 0DCC  
                                                                    l1014 0ED0  
                                                                    l1111 0272  
                                                                    l1015 0EE0  
                                                                    l1007 0DF8  
                                                                    l1112 02EC  
                                                                    l1113 02BE  
                                                                    l1009 0E18  
                                                                    l1130 03F8  
                                                                    l1122 0366  
                                                                    l1131 0434  
                                                                    l1124 0632  
                                                                    l1140 04E6  
                                                                    l1132 0448  
                                                                    l1116 0308  
                                                                    l1141 0512  
                                                                    l1133 0440  
                                                                    l1117 02FE  
                                                                    l1150 06C6  
                                                                    l1160 07C8  
                                                                    l1144 0528  
                                                                    l1136 0498  
                                                                    l1240 38A8  
                                                                    l1129 068A  
                                                                    l1145 0592  
                                                                    l1241 389A  
                                                                    l1170 08C6  
                                                                    l1154 071A  
                                                                    l1146 05E4  
                                                                    l1075 6E30  
                                                                    l1163 0816  
                                                                    l1155 0740  
                                                                    l1139 04A4  
                                                                    l1091 79F2  
                                                                    l1076 6E18  
                                                                    l1164 0842  
                                                                    l1156 074A  
                                                                    l1148 05F8  
                                                                    l1244 38E0  
                                                                    l1173 0926  
                                                                    l1157 084E  
                                                                    l1149 061E  
                                                                    l1093 79FC  
                                                                    l1245 38F0  
                                                                    l1237 385C  
                                                                    l1174 0952  
                                                                    l1246 3908  
                                                                    l1238 3876  
                                                                    l1159 079C  
                                                                    l1351 37F6  
                                                                    l1176 095A  
                                                                    l1352 37B4  
                                                                    l1177 09E8  
                                                                    l1169 089A  
                                                                    l1345 375C  
                                                                    l1193 74AA  
                                                                    l1610 3FF2  
                                                                    l1178 0A14  
                                                                    l1354 382C  
                                                                    l1346 3754  
                                                                    l1194 74C0  
                                                                    l1371 3E42  
                                                                    l1355 3836  
                                                                    l1099 31CC  
                                                                    l1620 737C  
                                                                    l1372 3E4E  
                                                                    l1364 3DEA  
                                                                    l1380 787C  
                                                                    l1348 37A0  
                                                                    l1605 3FC2  
                                                                    l1373 3E5E  
                                                                    l1365 3DFC  
                                                                    l1381 7872  
                                                                    l1630 6F34  
                                                                    l1606 3FB8  
                                                                    l1526 6CE6  
                                                                    l1615 7354  
                                                                    l1367 3E1E  
                                                                    l1552 797E  
                                                                    l1616 734A  
                                                                    l1368 3E14  
                                                                    l1384 7898  
                                                                    l1553 7970  
                                                                    l1609 3FE6  
                                                                    l1385 78A4  
                                                                    l1377 7854  
                                                                    l1386 78B4  
                                                                    l1378 7862  
                                                                    l1619 7370  
                                                                    l5003 6BCA  
                                                                    l1556 79B6  
                                                                    l1812 7164  
                                                                    l1557 79C6  
                                                                    l1629 6F48  
                                                                    l1817 3EE4  
                                                                    l1818 3E70  
                                                                    l1771 744A  
                                                                    l1819 3EDA  
                                                                    l5123 3E72  
                                                                    l1772 7442  
                                                                    l1783 3F74  
                                                                    l1784 3F0A  
                                                                    l5137 3F00  
                                                                    l1785 3F48  
                                                                    l6211 3C78  
                                                                    l5149 7180  
                                                                    l7021 25A4  
                                                                    ?_map 008E  
                                                                    l5191 6E1A  
                                                                    l7121 32BC  
                                                                    l5187 3F98  
                                                                    l5355 04A6  
                                                                    l7107 321E  
                                                                    l5197 6F36  
                                                                    l5365 052A  
                                                                    l7133 32EE  
                                                                    l5285 3B20  
                                                                    l5277 3B04  
                                                                    l6351 6FA8  
                                                                    l5643 7048  
                                                                    l5399 06CC  
                                                                    l7423 1F78  
                                                                    l6527 2D5C  
                                                                    l6561 2E32  
                                                                    l7169 2060  
                                                                    l6643 2AEC  
                                                                    l6547 2DE8  
                                                                    l6637 2AC4  
                                                                    l7455 1482  
                                                                    l5945 37F0  
                                                                    l6649 2B14  
                                                                    l6993 240A  
                                                                    STR_1 7FE7  
                                                                    STR_2 7FE7  
                                                                    STR_3 7F7F  
                                                                    STR_4 7FDD  
                                                                    STR_5 7FF9  
                                                                    STR_6 7FB0  
                                                                    STR_7 7FB0  
                                                                    STR_8 7FDD  
                                                                    STR_9 7FF9  
                                                                    u5010 032C  
                                                                    u5020 0354  
                                                                    u5040 03B2  
                                                                    u5008 02A2  
                                                                    u5017 0322  
                                                                    u5050 03EE  
                                                                    u5027 034A  
                                                                    u5230 06FE  
                                                                    u5047 03A8  
                                                                    u5160 0584  
                                                                    u5128 04CA  
                                                                    u5080 0478  
                                                                    u5057 03E4  
                                                                    u4610 746E  
                                                                    u5170 05CE  
                                                                    u5090 047E  
                                                                    u5308 0780  
                                                                    u5500 3E24  
                                                                    u6060 27A4  
                                                                    u4710 735A  
                                                                    u5350 0858  
                                                                    u5190 0664  
                                                                    u5158 054E  
                                                                    u5167 057A  
                                                                    u5159 0588  
                                                                    u5087 046E  
                                                                    u5440 0A20  
                                                                    u7040 758E  
                                                                    u4617 7464  
                                                                    u5177 05C4  
                                                                    u5450 0A52  
                                                                    u5418 090A  
                                                                    u5338 07FA  
                                                                    u6410 6FD0  
                                                                    u4740 3EA2  
                                                                    u5460 0A5C  
                                                                    u5380 08D8  
                                                                    u6260 1A44  
                                                                    u8100 3042  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u5197 065A  
                                                                    u5438 09CC  
                                                                    u6430 70C2  
                                                                    u8110 305A  
                                                                    u6510 2DEC  
                                                                    u7150 7726  
                                                                    u4910 3AD2  
                                                                    u4680 3FC8  
                                                                    u5560 7882  
                                                                    u6280 3C6A  
                                                                    u7320 120C  
                                                                    u7400 252E  
                                                                    u6600 2ABC  
                                                                    u8120 3072  
                                                                    u5457 0A48  
                                                                    u4905 6F8C  
                                                                    u6450 7984  
                                                                    u5378 087E  
                                                                    u6290 3C76  
                                                                    u6610 2AD4  
                                                                    u8130 3088  
                                                                    u4860 3F8E  
                                                                    u7420 2604  
                                                                    u8300 1578  
                                                                    u6620 2AE4  
                                                                    u8140 308C  
                                                                    u8108 3048  
                                                                    u6540 2E5A  
                                                                    u7270 1194  
                                                                    u5830 342C  
                                                                    u6630 2AFC  
                                                                    u8150 309A  
                                                                    u8118 3060  
                                                                    u8070 2FFA  
                                                                    u5670 38AE  
                                                                    u8240 14CE  
                                                                    u6640 2B0C  
                                                                    u8160 309E  
                                                                    u8128 3078  
                                                                    u8080 3012  
                                                                    u4960 3B7A  
                                                                    u4890 6F88  
                                                                    u7290 11B6  
                                                                    u8410 16EE  
                                                                    u6650 2B24  
                                                                    u8090 302A  
                                                                    u7610 331A  
                                                                    u6490 2DDA  
                                                                    u4970 3B82  
                                                                    u8340 15F4  
                                                                    u6660 2B34  
                                                                    u9117 3AEC  
                                                                    u7390 2502  
                                                                    u8078 3000  
                                                                    u9207 6D0C  
                                                                    u9127 78D2  
                                                                    u8088 3018  
                                                                    u9137 78EE  
                                                                    u8370 1672  
                                                                    u8098 3030  
                                                                    u7570 323A  
                                                                    u7650 211E  
                                                                    u9147 7908  
                                                                    u9157 2D72  
                                                                    u7590 32E8  
                                                                    u9167 7402  
                                                                    u9177 7416  
                                                                    u9187 7420  
                                                                    u9197 6E22  
                                                                    u8675 7524  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                            __CFG_WRT1$ON 000000  
                                                           _enviaSMS$1400 00C3  
                                                           _enviaSMS$1405 00C5  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                           _enviaSMS$1385 00BD  
                                                           _enviaSMS$1398 00BF  
                                                           _enviaSMS$1399 00C1  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00EE  
                                                                    __ano 00EC  
                                                                    __hor 00EF  
                                                                    __mes 00ED  
                                                                    __min 00F0  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00F1  
                                                          ?_drenarPressao 0001  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 3750  
                                                                    _main 0A6C  
                                             __end_ofi2_getDS1307TimeDate 3660  
                                                                    _tel1 01D3  
                                                                    _tel2 01C7  
                                                        __end_of_I2C_Read 6F9C  
                                              __end_of_configuraTelefones 177E  
                                                                    map@a 00A2  
                                                                    map@b 00A4  
                                                                    map@c 00A6  
                                                                    map@d 009A  
                                                                    map@e 009E  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    map@x 008E  
                                                                    fsr2l 000FD9  
                                                                    btemp 007F  
                                                        __end_of_I2C_Wait 6C20  
                                                        __end_of_I2C_Stop 6B7C  
                                                 __size_of_tela_ajusteRTC 0230  
                                                        _etapaComunicacao 0062  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 6DAC  
                                                                    start 026A  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 014A  
                                            partidaBombaEstacionaria@acao 0080  
                                                        __end_of_BCDtoDEC 6C3A  
                                                         __end_of_Lcd_Cmd 6D1E  
                                                  __size_ofi2_I2C_Restart 000C  
                                                           ?_atualizarLCD 0088  
                                                            ___param_bank 000000  
                                                        __end_of_DECtoBCD 71C8  
                                               __size_of_tela_testeBombas 01D6  
                                                     _timerVerificarSinal 007E  
                                                           _lerParametros 31FC  
                                                                   ??_map 0098  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1645 00C1  
                                                             ?i2_RTC_Init 0001  
                                                         __end_of___aldiv 391E  
                                                                   ?_atoi 00C5  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3E6C  
                                                                   STR_10 7EAD  
                                                                   STR_11 7FF9  
                                                                   STR_20 7EAD  
                                                                   STR_12 7D35  
                                                                   STR_13 7FFC  
                                                                   STR_21 7FA9  
                                                                   STR_30 7FD1  
                                                                   STR_22 7FF9  
                                                                   STR_14 7AAB  
                                                                   STR_23 7D35  
                                                                   STR_31 7FF9  
                                                                   STR_15 7EB9  
                                                                   STR_24 7FFC  
                                                                   STR_32 7FD1  
                                                                   STR_16 7FF9  
                                                                   STR_40 7DF2  
                                                                   STR_33 7FD7  
                                                                   STR_17 7FD7  
                                                                   STR_41 7DD2  
                                                                   STR_25 7B91  
                                                                   STR_18 7FDD  
                                                                   STR_34 7FF9  
                                                                   STR_50 7FE2  
                                                                   STR_42 7CE9  
                                                                   STR_26 7B29  
                                                                   STR_27 7FF9  
                                                                   STR_19 7FF9  
                                                                   STR_35 7F01  
                                                                   STR_51 7E1F  
                                                                   STR_43 7CFC  
                                                                   STR_52 7FF9  
                                                                   STR_28 7FD1  
                                                                   STR_44 7F91  
                                                                   STR_60 7EDD  
                                                                   STR_36 7ED1  
                                                         __end_of___awmod 78C2  
                                                                   STR_37 7FA9  
                                                                   STR_29 7FF9  
                                                                   STR_53 7FE2  
                                                                   STR_45 7F43  
                                                                   STR_61 7C85  
                                                                   STR_46 7EA0  
                                                                   STR_54 7E2E  
                                                                   STR_70 7E01  
                                                                   STR_62 7D7D  
                                                                   STR_38 7C5D  
                                                                   STR_55 7FF9  
                                                                   STR_71 7FC5  
                                                                   STR_39 7E3D  
                                                                   STR_47 7D8F  
                                                                   STR_63 7C1E  
                                                                   STR_56 7FE2  
                                                                   STR_80 7F75  
                                                                   STR_48 7F2D  
                                                                   STR_72 7E10  
                                                                   STR_64 7C33  
                                                                   STR_81 7FF9  
                                                                   STR_49 7FF9  
                                                                   STR_57 7DC2  
                                                                   STR_65 7C71  
                                                                   STR_73 7C48  
                                                                   STR_82 7FE2  
                                                                   STR_90 7F9A  
                                                                   STR_66 7D22  
                                                                   STR_74 7C99  
                                                                   STR_58 7C09  
                                                                   STR_67 7DF2  
                                                                   STR_83 7F17  
                                                                   STR_59 7DA0  
                                                                   STR_91 7CC1  
                                                                   STR_75 7CAD  
                                                                   STR_76 7F38  
                                                                   STR_84 7E77  
                                                                   STR_68 7CD5  
                                                                   STR_92 7BEF  
                                                                   STR_85 7FF9  
                                                                   STR_77 7FF5  
                                                                   STR_69 7FCB  
                                                                   STR_93 7EF5  
                                                                   STR_94 7EB9  
                                                                   STR_86 7FE2  
                                                                   STR_78 7FF1  
                                                                   STR_95 7FB7  
                                                                   STR_87 7E85  
                                                                   STR_79 7BD0  
                                                                   STR_88 7FF9  
                                                                   STR_96 7FBE  
                                                                   STR_89 7FE2  
                                                                   STR_97 7EFE  
                                                                   STR_98 7E93  
                                                                   STR_99 7DB1  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 79DC  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___lwdiv 4000  
                                                         __end_of___lwmod 738A  
                                                                   i2l610 712E  
                                                                   i2l611 7132  
                                                                   i2l612 713C  
                                                                   i2l613 7140  
                                                                   i2l470 36D4  
                                                                   i2l462 3678  
                                                                   i2l606 7112  
                                                                   i2l607 7116  
                                                                   i2l608 7120  
                                                                   i2l473 36EA  
                                                                   i2l465 368E  
                                                                   i2l609 7124  
                                                                   i2l482 374A  
                                                                   i2l474 3702  
                                                                   i2l466 36A6  
                                                                   i2l651 3D5A  
                                                                   i2l477 3718  
                                                                   i2l469 36BC  
                                                                   i2l653 3D66  
                                                                   i2l478 373E  
                                                                   i2l654 3D76  
                                                                   i2l680 399A  
                                                                   i2l920 0072  
                                                                   i2l657 3D88  
                                                                   i2l681 39D8  
                                                                   i2l673 3934  
                                                                   i2l930 00BC  
                                                                   i2l922 007C  
                                                                   i2l659 3DB8  
                                                                   i2l940 0120  
                                                                   i2l932 00D2  
                                                                   i2l924 0092  
                                                                   i2l678 3976  
                                                                   i2l934 00DC  
                                                                   i2l926 009C  
                                                                   i2l679 39F2  
                                                                   i2l951 018A  
                                                                   i2l943 0140  
                                                                   i2l936 00F2  
                                                                   i2l928 00B2  
                                                                   i2l961 01D0  
                                                                   i2l953 0194  
                                                                   i2l945 014A  
                                                                   i2l962 01DE  
                                                                   i2l938 00FC  
                                                                   i2l955 01A6  
                                                                   i2l947 0162  
                                                                   i2l939 010E  
                                                                   i2l964 020E  
                                                         ___awdiv@counter 0084  
                                                                   i2l965 021A  
                                                                   i2l957 01B0  
                                                                   i2l949 016C  
                                                                   i2l959 01C6  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 0A6C  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 720C  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 77B8  
                                                     ___lmul@multiplicand 0084  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 0116  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                             ?i2_Lcd_Init 0001  
                                                      __size_ofi2_Lcd_Cmd 0026  
                                                                   _delay 6E14  
                                                             ?i2_Lcd_Port 0001  
                                                                   _blink 708A  
                                                         __end_of_dpowers 7AAB  
                                                                   _line1 019E  
                                                                   _line2 0189  
                                                                   _line3 0174  
                                                                   _line4 015F  
                                                         __end_of_isdigit 6CF2  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _timer 391E  
                                                                   atoi@a 00CA  
                                                        __end_of_RTC_Init 6EB8  
                                                                   atoi@s 00C5  
                                                                   _putch 6BC4  
                                                       __end_of_I2C_Start 6B70  
                                                       __end_of_I2C_Write 6BA4  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0094  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 21BE  
                                                                   wtemp6 0080  
                                                         __end_of_sprintf 729A  
                                                          _comunicarTeste 260A  
                                                         __end_of_strncmp 3F06  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 794A  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 720C  
                                                     __size_ofi2_I2C_Read 0036  
                                                  _tentativasVerificarGSM 0076  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 77B8  
                                                           _dtl_principal 010E  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 383C  
                                                            __end_of_main 0F1C  
                                                   __end_of_aguardaBuffer 704E  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                    _posicaoColetaLeitura 006C  
                                                                  ??_atoi 00C7  
                                                                  ??_main 00DB  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FD  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                                           __activetblptr 000002  
                                                            ?_reiniciaLCD 0001  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 2D32  
                                                           i2_I2C_Restart 6B58  
                                                    _tempo_limite_partida 006A  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0061  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7D0F  
                                                                  STR_101 7E69  
                                                                  STR_102 7FEC  
                                                                  STR_111 7F88  
                                                                  STR_103 7EC5  
                                                                  STR_104 7FEC  
                                                                  STR_112 7F0C  
                                                                  STR_120 7DE2  
                                                                  STR_113 7F6B  
                                                                  STR_105 7D6B  
                                                                  STR_121 7D47  
                                                                  STR_114 7F9A  
                                                                  STR_122 7F61  
                                                                  STR_106 7F22  
                                                                  _ADRESH 000FC4  
                                                                  STR_107 7F2D  
                                                                  STR_115 7CC1  
                                                                  STR_123 7D59  
                                                                  STR_108 7E1F  
                                                                  STR_124 7F57  
                                                                  STR_116 7E5B  
                                                                  STR_117 7EFE  
                                                                  STR_109 7E2E  
                                                                  STR_125 7EE9  
                                                                  STR_118 7EB9  
                                                                  STR_126 7E4C  
                                                                  _ADRESL 000FC3  
                                                                  STR_127 7FA2  
                                                                  STR_119 7F4D  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                          lerTransdutor@i 00B2  
                                                         ??_drenarPressao 00BB  
                                                               ??i2_delay 0003  
                                                  __end_of_comunicarTeste 27EC  
                                                                  i2l1075 6D94  
                                                                  i2l1076 6D7E  
                                                                  _INTCON 000FF2  
                                                                  i2l5627 6D80  
                                                                  i2l5795 3D6C  
                                                                  i2l5787 3D50  
                                                               ??_Lcd_Cmd 0081  
                                                                  _TMR0IF 007F92  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 0068  
                                                 __size_of_Lcd_Write_Char 0056  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C8  
                                       __size_of_monitorarAlteracaoEstado 007E  
                                               ?_monitorarAlteracaoEstado 0001  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00EA  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 011C  
                                                          _readEEPROM_ext 738A  
                                                                  ___lmul 7496  
                                                       __end_ofi2_Lcd_Cmd 6CCA  
                                                               ??___aldiv 0088  
                                                                  ___wmul 6D1E  
                                                        __end_of_enviaSMS 1AD4  
                                                               ??___awdiv 0084  
                                                            enviaSMS@tipo 00C7  
                                                               ??___awmod 0084  
                                                         _getSinalSIM800L 29C2  
                                                     __size_ofi2_Lcd_Init 007A  
                                                               ??___lldiv 0088  
                                                                  _blinkk 0068  
                                                     __size_ofi2_Lcd_Port 0040  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                 _habilitaTesteAutomatico 00F2  
                                   __end_of_verificarIntervaloTesteBombas 6F28  
                                  __size_of_verificarIntervaloTesteBombas 0038  
                                           _verificarIntervaloTesteBombas 6EF0  
                                                 __end_of_writeEEPROM_ext 7252  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 6F28  
                                                                  delay@x 0080  
                                                                  clear_0 7810  
                                                                  clear_1 781C  
                                                                  clear_2 7828  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 79DC  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 704E  
                                                            __doprnt@prec 0096  
                                                                  _strchr 7146  
                                                        i2_Lcd_Write_Char 72E8  
                                                                  _strlen 7436  
                                                                  _strstr 3F06  
                                                          ?_lerTransdutor 0001  
                                                           dataLoger@logs 00C6  
                                                            __pdataCOMRAM 007E  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7A70  
                                                      _counterPressedTime 0115  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00B5  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 782E  
                                                          _tela_ajusteRTC 21BE  
                                                       __end_of_Lcd_Clear 6BC4  
                                                        _etapaTesteBombas 006E  
                                                           ___rparam_used 000001  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 026A  
                                                              _acaoBombas 39F8  
                                                  __end_of_readEEPROM_ext 73E0  
                                                     _telefoneSelecionado 00F8  
                                                    __size_ofi2_I2C_Start 000C  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 27EC  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FC  
                                                            __pidataBANK0 6B32  
                                                            __pidataBANK1 6B38  
                                                      __size_of_dataLoger 0252  
                                                           __end_of_delay 6E4A  
                                                           __end_of_blink 70C8  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 049A  
                                                           __end_of_timer 39F8  
                                                ??i2_criarCaracteresCGRAM 0005  
                                                           __end_of_putch 6BD8  
                                                          ?_intToFloatStr 00BB  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00C1  
                                                          _tela_menu_posi 011F  
                                                       i2Lcd_Write_Char@a 0004  
                                                       i2Lcd_Write_Char@y 0003  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 00F0  
                                                          _Lcd_Set_Cursor 3B88  
                                                                 ??_TIMER 003D  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0128  
                                                            __sec_partida 0122  
                                                    __end_of_atualizarLCD 260A  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 003D  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00DB  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 23EE  
                                                              __menu_posi 00E1  
                                                 __end_of_getSinalSIM800L 2B82  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                             i2_criarCaracteresCGRAM$1552 0038  
                                                __size_of_resetParametros 003E  
                                                      __end_ofi2_I2C_Read 6E14  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 6C06  
                                                      __end_ofi2_I2C_Stop 6B58  
                                                                 ?___lmul 0080  
                                         __size_of_configuraRegistradores 007A  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 6C3A  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 6BEE  
                                                              _flag_b_esc 011D  
                                                              _codigoErro 00F4  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 13B6  
                                                        ?_writeEEPROM_ext 008C  
                                                          ___lmul@product 0088  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 00AA  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                  __end_of_Lcd_Set_Cursor 3C4C  
                                         i2criarCaracteresCGRAM@character 0008  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                          ?_verificarIntervaloTesteBombas 0001  
                                                                 _INTCON2 000FF1  
                                                                 _INTCON3 000FF0  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                    __size_of_reiniciaLCD 0024  
                                                            ??i2_Lcd_Init 0004  
                                                              ??_Lcd_Init 0083  
                                                            ??i2_Lcd_Port 0001  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 1F86  
                                                                 _SSPSTAT 000FC7  
                                                                 i2_delay 6D7A  
                                                               ?_enviaSMS 0001  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 011B  
                                                          _Lcd_Write_Char 73E0  
                                                                 _Lcd_Cmd 6CF2  
                                                              _dtl_jockey 010F  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 6DDE  
                                                               _I2C_Start 6B64  
                                                              _gsmOcupado 00F5  
                                                               _I2C_Write 6B96  
                                                         _timerReenvioSMS 00F7  
                                                    ??_configuraTelefones 00BF  
                                                             ?_acaoBombas 0001  
                                                   atualizarLCD@lcdEstado 0095  
                                                       __end_of_getSerial 343C  
                                                                 __Hparam 0000  
                                                  __size_ofi2_reiniciaLCD 0024  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 6C5C  
                                                         _sp_estacionaria 00E4  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                                 ___aldiv 383C  
                                                                 __b_mais 0118  
                                                         ??_intToFloatStr 00BD  
                                                                 ___awdiv 3DD2  
                                                         __size_of___lmul 0060  
                                                                 ___awmod 783C  
                                                                 ___lldiv 794A  
                                                         __size_of___wmul 002C  
                                                                 ___lwdiv 3F9E  
                                                                 ___lwmod 7338  
                                                      __end_ofi2_Lcd_Init 763C  
                                                           atualizarLCD@i 0099  
                                                      __end_ofi2_Lcd_Port 7146  
                                                                 __doprnt 026E  
                                                                 __pcinit 77B8  
                                         __size_ofi2_criarCaracteresCGRAM 00C2  
                                                         __size_of_memset 003A  
                                                                 _btPress 7734  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __ptext0 0A6C  
                                                                 __ptext1 6EF0  
                                                                 __ptext2 27EC  
                                                                 __ptext3 21BE  
                                                                 __ptext4 729A  
                                                                 __ptext5 343C  
                                                                 __ptext6 7186  
                                                                 __ptext7 1F86  
                                                                 __ptext8 70C8  
                                                                 __ptext9 6C80  
                                               criarCaracteresCGRAM@F2969 7A71  
                                                         __size_of_printf 003C  
                                                                 _dtl_dia 0114  
                                                                 _dtl_ano 0112  
                                                         __size_of_strchr 0040  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 0113  
                                                                 _dtl_min 0110  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7AA1  
                                                    readEEPROM16_ext@data 0091  
                                                            __size_of_map 0124  
                                                                 _isdigit 6CCA  
                                                       ??_acaoTesteBombas 00C8  
                                                        ___awmod@dividend 0080  
                                                        ___aldiv@dividend 0080  
                                                         _ajusteSP_Bombas 1AD4  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 010C  
                                                  _configuraRegistradores 763C  
                                                                 _pressao 00DB  
                                                                 _sprintf 7252  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 6B88  
                                                  __end_of_Lcd_Write_Char 7436  
                                                                 _strncmp 3E6C  
                                                    end_of_initialization 782E  
                                                       __end_of_salvarLOG 3D10  
                                                              ??_enviaSMS 00BB  
                                                    __end_of_limparBuffer 6E80  
                                                            _coletaMedias 0100  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 72E8  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7A70  
                                                     _timerTrocarTextoLcd 0075  
                                                __end_ofi2_Lcd_Write_Char 7338  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 0123  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1504 00D4  
                                                    _acaoTesteBombas$1514 00D8  
                                                    _acaoTesteBombas$1509 00D6  
                                                    _acaoTesteBombas$1485 00D0  
                                                    _acaoTesteBombas$1497 00D2  
                                                    _acaoTesteBombas$2569 00CE  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00BB  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        ___aldiv@quotient 008A  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                      _timerColetaLeitura 0071  
                                                                 strlen@s 0080  
                                                               i2_Lcd_Cmd 6CA4  
                                                       ??_resetParametros 00BC  
                                                              getSerial@i 00C2  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 021C  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 6BB2  
                                                  __size_of_telaPrincipal 0238  
                                                           i2_reiniciaLCD 6C5C  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 00CA  
                                                __end_of_tela_testeBombas 29C2  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                          monitorarAlteracaoEstado@estado 0082  
                                                         ?_Lcd_Write_Char 0001  
                                                  _out_BOMBA_ESTACIONARIA 00F9  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                              map@out_max 0096  
                                                              map@out_min 0094  
                                                  __size_of_aguardaBuffer 003C  
                                                  i2_criarCaracteresCGRAM 3D10  
                                                       __size_of_BCDtoDEC 001A  
                                                   __end_of_drenarPressao 6D7A  
                                                       __size_of_DECtoBCD 0042  
                                                               _TXSTAbits 000FAC  
                                              __size_of_writeEEPROM16_ext 0022  
                                                        _intensidadeSinal 00FF  
                                                         getSerial@length 00C0  
                                                            _atualizarLCD 23EE  
                                                               _Lcd_Clear 6BB2  
                                                          __end_of___lmul 74F6  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 6D4A  
                                                      intToFloatStr@F2544 01DF  
                                                        _Lcd_Write_String 6F9C  
                                                           __pidataCOMRAM 6B31  
                                                 __end_of_ajusteSP_Bombas 1D34  
                                                              ?i2_Lcd_Cmd 0001  
                                                          __end_of_memset 6F62  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 708A  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 6B7C  
                                                          ?i2_reiniciaLCD 0001  
                                                          __end_of_strchr 7186  
                                                          __end_of_strlen 7496  
                                                          __end_of_strstr 3F9E  
                                                      _flagErroTransdutor 006F  
                                                     start_initialization 77B8  
                                                             i2I2C_Read@a 0002  
                                                             __end_of_map 31FC  
                                                acaoTesteBombas@intervalo 00DA  
                                                   _tela_testeBombas$1600 00BD  
                                                      intToFloatStr@valor 00C5  
                                                _partidaBombaEstacionaria 755A  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                _monitorarAlteracaoEstado 76B6  
                                                       ??_I2C_Master_Init 0091  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 1F86  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 3320  
                                                              ?_Lcd_Clear 0001  
                                         __size_of_configurarEstacionaria 01B0  
                                                                ??___lmul 0088  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00FA  
                                                             __pdataBANK1 01DF  
                                                           _aguardaBuffer 7012  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                   i2Lcd_Write_Char@tempp 0002  
                                                           ??_informacoes 00BB  
                                               _timerIntervaloEntreBombas 00FE  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                             __pbssCOMRAM 0062  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00BB  
                                                   lerTransdutor@_pressao 00AE  
                                                            _isdigit$2062 0081  
                                                     i2_getDS1307TimeDate 354E  
                                                        intToFloatStr@end 00BD  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                         ??_verificarIntervaloTesteBombas 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 1D34  
                                                       __size_of_enviaSMS 0356  
                                                          _timerAtrasoLCD 0074  
                                                            ??_acaoBombas 00C8  
                                                        ___lwdiv@dividend 0080  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7A70  
                                                         _acaoTesteBombas 0F1C  
                                                                ?___aldiv 0080  
                                                               _flag_b_ok 0117  
                                                     configuraTelefones@i 00C3  
                                                                ?___awdiv 0080  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                     __end_ofi2_I2C_Start 6B4C  
                                                                ?___lldiv 0080  
                                                     __end_ofi2_I2C_Write 6B96  
                                                               _getSerial 3320  
                                                   _timerEtapaComunicacao 00F6  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 01B3  
                                                               _ajust_tel 00DF  
                                                            _limparBuffer 6E4A  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                             ??i2_Lcd_Cmd 0002  
                                                        ?_ajusteSP_Bombas 0001  
                                                         ??i2_reiniciaLCD 003D  
                                                   __end_of_lerTransdutor 2E7C  
                                                           ??_reiniciaLCD 00BC  
                                                             _flag_b_mais 0119  
                                                 ?_configuraRegistradores 0001  
                                                               _isPressed 0066  
                                                   __end_ofi2_I2C_Restart 6B64  
                                                          __size_of_TIMER 0262  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 6F62  
                                                                _I2C_Wait 6C06  
                                                                _I2C_Stop 6B70  
                                                     __end_of_readButtons 3750  
                                                          _timerPiscarLCD 0072  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 2B82  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 6C20  
                                                      __end_of_acaoBombas 3AC2  
                                                     __end_of_informacoes 30D8  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003E  
                                                        lerTransdutor@adc 00B0  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 7186  
                                                          __size_of_timer 00DA  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00E2  
                                                               _horimetro 010A  
                                       __end_ofcriarCaracteresCGRAM@F2969 7AA1  
                                                         ___aldiv@divisor 0084  
                                                         ___aldiv@counter 0088  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                                _LATAbits 000F89  
                                                                _LATCbits 000F8B  
                                                                _LATDbits 000F8C  
                                                              ?_dataLoger 0001  
                                                                _LATEbits 000F8D  
                                                               _salvarLOG 3C4C  
                                                       ?i2_Lcd_Write_Char 0001  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E7  
                                                         _ultimoEstadoLCD 01E3  
                                                               _validaRTC 729A  
                                                         _resetParametros 70C8  
                                                        _horario_de_teste 00E9  
                                             __size_of_configuraTelefones 03C8  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                      ??i2_Lcd_Write_Char 0002  
                                                                i2u570_40 3D20  
                                                                i2u575_40 3DC4  
                                                                i2u576_40 3DCC  
                                                                i2u577_40 6E00  
                                                                i2u921_47 3D3A  
                                                                i2u578_45 6E04  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u922_47 7306  
                                                                i2u923_47 7318  
                                                                i2u924_47 7322  
                                                                i2u925_47 75D0  
                                                                i2u686_40 3728  
                                                                i2u926_47 75E6  
                                                                i2u927_47 75FE  
                                                                i2u928_47 6CB8  
                                                                i2u929_47 6D86  
                                                             ??_Lcd_Clear 0083  
                                                               _timerBase 0073  
                                                               _sp_jockey 00E6  
                                                     _dtl_posi_visualizar 0064  
                                                              ?_getSerial 00BB  
                                            __end_of_criarCaracteresCGRAM 3B88  
                                                   __end_of_intToFloatStr 7A70  
                                                                _RTC_Init 6E80  
                                                               map@in_max 0092  
                                                               map@in_min 0090  
                                          __end_of_configuraRegistradores 76B6  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               map@result 00A8  
                                                               _totalLogs 0065  
                                                        _dtl_estacionaria 010D  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                                 ?i2_criarCaracteresCGRAM 0001  
                                               _tempo_limite_estacionaria 00E8  
                                                                _Lcd_Init 78C2  
                                                       i2_writeEEPROM_ext 6FD6  
                                                               _writeChar 6BA4  
                                                                _Lcd_Port 71C8  
                                                       ?_tela_testeBombas 0001  
                                                     __end_of_reiniciaLCD 6CA4  
                                                       ___lmul@multiplier 0080  
                                                               copy_data0 77CC  
                                                               copy_data1 77EC  
                                                        _readEEPROM16_ext 6EB8  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C8  
                                                      ??_tela_testeBombas 00BB  
                                                __end_of_Lcd_Write_String 6FD6  
                                                             _dtl_posicao 00FA  
                                                        __size_ofi2_delay 0032  
                                                 __end_of_acaoTesteBombas 13B6  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 6B40  
                                                             i2_I2C_Write 6B88  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00EB  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                        __size_of___aldiv 00E2  
                                                        __size_of___awdiv 009A  
                                                        __size_of___awmod 0086  
                                                __size_of_getSinalSIM800L 01C0  
                                                        __size_of___lldiv 0092  
                                                                __b_menos 011A  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 3660  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                        __size_of_btPress 0084  
                                              ??_partidaBombaEstacionaria 0080  
                                                         intToFloatStr@pr 00C6  
                                                             _informacoes 2FB0  
                                                    _ajusteSP_Bombas$2571 00C8  
                                                            ?_I2C_Restart 0001  
                                                         _I2C_Master_Init 74F6  
                                          __end_ofi2_criarCaracteresCGRAM 3DD2  
                                               __end_ofi2_writeEEPROM_ext 7012  
                                              ??_monitorarAlteracaoEstado 0080  
                                                          lerParametros@i 0095  
                                                                __sec_aux 0121  
                                                           _tempo_partida 006B  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 3AC2  
                                                                __ptext11 78C2  
                                                                __ptext20 2FB0  
                                                                __ptext12 755A  
                                                                __ptext21 29C2  
                                                                __ptext13 76B6  
                                                                __ptext30 763C  
                                                                __ptext22 3320  
                                                                __ptext14 2D32  
                                                                __ptext31 23EE  
                                                                __ptext23 3750  
                                                                __ptext15 30D8  
                                                                __ptext40 738A  
                                                                __ptext32 6F9C  
                                                                __ptext24 2E7C  
                                                                __ptext16 7496  
                                                                __ptext41 6B7C  
                                                                __ptext33 73E0  
                                                                __ptext25 6C20  
                                                                __ptext17 383C  
                                                                __ptext50 177E  
                                                                __ptext42 6F62  
                                                                __ptext34 3B88  
                                                                __ptext26 1D34  
                                                                __ptext18 31FC  
                                                                __ptext51 6BA4  
                                                                __ptext43 79DC  
                                                                __ptext35 1AD4  
                                                                __ptext27 2B82  
                                                                __ptext19 6EB8  
                                                                __ptext60 6F28  
                                                                __ptext52 704E  
                                                                __ptext44 783C  
                                                                __ptext36 708A  
                                                                __ptext28 13B6  
                                                                __ptext61 7012  
                                                                __ptext53 026E  
                                                                __ptext45 3DD2  
                                                                __ptext37 0F1C  
                                                                __ptext29 260A  
                                                                __ptext70 6B64  
                                                                __ptext62 3F06  
                                                                __ptext54 6BC4  
                                                                __ptext46 6D4A  
                                                                __ptext38 3C4C  
                                                                __ptext71 6C06  
                                                                __ptext63 3E6C  
                                                                __ptext55 6CCA  
                                                                __ptext47 7252  
                                                                __ptext39 720C  
                                                                __ptext80 3D10  
                                                                __ptext72 6BB2  
                                                                __ptext64 7436  
                                                                __ptext56 6D1E  
                                                                __ptext48 7734  
                                                                __ptext81 72E8  
                                                                __ptext73 6CF2  
                                                                __ptext65 7146  
                                                                __ptext57 7338  
                                                                __ptext49 39F8  
                                                                __ptext90 6C3A  
                                                                __ptext82 75C2  
                                                                __ptext74 71C8  
                                                                __ptext66 6E14  
                                                                __ptext58 3F9E  
                                                                __ptext91 6FD6  
                                                                __ptext83 6CA4  
                                                                __ptext75 74F6  
                                                                __ptext67 6E80  
                                                                __ptext59 6E4A  
                                                                __ptext92 6D7A  
                                                                __ptext84 7106  
                                                                __ptext76 794A  
                                                                __ptext68 6B96  
                                                                __ptext93 6B88  
                                                                __ptext85 354E  
                                                                __ptext69 6B70  
                                                                __ptext94 6B4C  
                                                                __ptext86 6B58  
                                                                __ptext78 391E  
                                                                __ptext95 6B40  
                                                                __ptext87 6DDE  
                                                                __ptext79 6C5C  
                                                                __ptext96 6BEE  
                                                                __ptext88 6BD8  
                                                                __ptext97 3660  
                                                                __ptext89 6DAC  
                                                                __ptext98 0000  
                                                                _ajst_rtc 011E  
                                                      _ultimoEstadoSaidas 006D  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00CD  
                                                    getSinalSIM800L@sinal 00CE  
                                                 __end_of_resetParametros 7106  
                                                                _enviaSMS 177E  
                                                                _dtl_hora 0111  
                                                        __size_of_strncmp 009A  
                                                     _comunicarTeste$1370 00BD  
                                                       ??_writeEEPROM_ext 008D  
                                               lerTransdutor@mediaLeitura 00AC  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 04B0  
                                                             ??_dataLoger 00BB  
                                                     _status_estacionaria 00FB  
                                                              strncmp@len 008A  
                                                        _timerTesteBombas 00DD  
                                                                blink@end 0083  
                                                                _tel_posi 00E0  
                                               _criarCaracteresCGRAM$1552 00B7  
                                                                int$flags 007F  
                                                                atoi@sign 00C9  
                                                             ??_getSerial 00BE  
                                                             i2Lcd_Port@a 0001  
                                                      _telaPrincipal$2570 00C8  
                                                  __size_of_drenarPressao 0030  
                                                             _reiniciaLCD 6C80  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 6DDE  
                                                              i2_I2C_Wait 6BEE  
                                                              i2_I2C_Stop 6B4C  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 6BD8  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                                intlevel2 0006  
                                                               sprintf@ap 00B5  
                                                               sprintf@pb 00B7  
                                                               sprintf@wh 00A1  
                                                       _ocorrendoIncendio 00F3  
                                                    _criarCaracteresCGRAM 3AC2  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 01E2  
                                                        _textoAlternativo 0070  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1630 00C4  
                                                          _dataLoger$1625 00C2  
                                                          _dataLoger$1619 00C0  
                                                              _TIMER$1671 004F  
                                                              _TIMER$1680 005D  
                                                              _TIMER$1672 0051  
                                                              _TIMER$1681 005F  
                                                              _TIMER$1673 0053  
                                                              _TIMER$1674 0055  
                                                              _TIMER$1675 0057  
                                                              _TIMER$1678 0059  
                                                              _TIMER$1679 005B  
                                                              i2Lcd_Cmd@a 0003  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 2E7C  
                                                       _setDS1307TimeDate 343C  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00BD  
                                                            getSerial@ret 00C3  
                                                            getSerial@str 00BB  
                                                 __end_of_I2C_Master_Init 755A  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 6DAC  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00CC  
                                                            _sp_principal 00E5  
                                                            ___aldiv@sign 0089  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                              i2_Lcd_Init 75C2  
                                                              i2_Lcd_Port 7106  
                                                  __size_of_lerParametros 0124  
                                                   ?_criarCaracteresCGRAM 0001  
                                                        ?_resetParametros 0001  
                                                           _sub_menu_posi 0120  
                                                             _option_posi 00E3  
                                                           _drenarPressao 6D4A  
                                         _tempo_limite_teste_estacionaria 0069  
                                                 i2criarCaracteresCGRAM@i 003C  
                                                 i2criarCaracteresCGRAM@j 003B  
                                                 i2criarCaracteresCGRAM@k 003A  
                                               __end_of_getDS1307TimeDate 2FB0  
                                               __end_of_setDS1307TimeDate 354E  
