

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 25 13:42:46 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   116                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC18F452 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     
   153                           	psect	idataBANK0
   154  006CA4                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _pressao
   158  006CA4  0062               	dw	98
   159                           
   160                           ;initializer for _dtl_posicao
   161  006CA6  3C                 	db	60
   162                           
   163                           ;initializer for _status_estacionaria
   164  006CA7  01                 	db	1
   165                           
   166                           ;initializer for _status_principal
   167  006CA8  01                 	db	1
   168                           
   169                           ;initializer for _status_jockey
   170  006CA9  01                 	db	1
   171                           
   172                           ;initializer for _timerVerificarSinal
   173  006CAA  05                 	db	5
   174                           
   175                           ;initializer for _intensidadeSinal
   176  006CAB  20                 	db	32
   177                           
   178                           	psect	idataBANK1
   179  006CA0                     __pidataBANK1:
   180                           	opt stack 0
   181                           
   182                           ;initializer for intToFloatStr@F2544
   183  006CA0  20                 	db	32
   184  006CA1  20                 	db	32
   185  006CA2  20                 	db	32
   186  006CA3  20                 	db	32
   187                           
   188                           	psect	mediumconst
   189  007A9C                     __pmediumconst:
   190                           	opt stack 0
   191  007A9C  00                 	db	0
   192  007A9D                     criarCaracteresCGRAM@F2956:
   193                           	opt stack 0
   194  007A9D  00                 	db	0
   195  007A9E  1F                 	db	31
   196  007A9F  0E                 	db	14
   197  007AA0  04                 	db	4
   198  007AA1  04                 	db	4
   199  007AA2  04                 	db	4
   200  007AA3  04                 	db	4
   201  007AA4  04                 	db	4
   202  007AA5  00                 	db	0
   203  007AA6  00                 	db	0
   204  007AA7  00                 	db	0
   205  007AA8  00                 	db	0
   206  007AA9  00                 	db	0
   207  007AAA  10                 	db	16
   208  007AAB  10                 	db	16
   209  007AAC  10                 	db	16
   210  007AAD  00                 	db	0
   211  007AAE  00                 	db	0
   212  007AAF  00                 	db	0
   213  007AB0  04                 	db	4
   214  007AB1  04                 	db	4
   215  007AB2  14                 	db	20
   216  007AB3  14                 	db	20
   217  007AB4  14                 	db	20
   218  007AB5  00                 	db	0
   219  007AB6  01                 	db	1
   220  007AB7  01                 	db	1
   221  007AB8  05                 	db	5
   222  007AB9  05                 	db	5
   223  007ABA  15                 	db	21
   224  007ABB  15                 	db	21
   225  007ABC  15                 	db	21
   226  007ABD  0A                 	db	10
   227  007ABE  0A                 	db	10
   228  007ABF  1F                 	db	31
   229  007AC0  11                 	db	17
   230  007AC1  11                 	db	17
   231  007AC2  0E                 	db	14
   232  007AC3  04                 	db	4
   233  007AC4  04                 	db	4
   234  007AC5  00                 	db	0
   235  007AC6  00                 	db	0
   236  007AC7  00                 	db	0
   237  007AC8  00                 	db	0
   238  007AC9  00                 	db	0
   239  007ACA  00                 	db	0
   240  007ACB  00                 	db	0
   241  007ACC  00                 	db	0
   242  007ACD                     __end_ofcriarCaracteresCGRAM@F2956:
   243                           	opt stack 0
   244  007ACD                     _dpowers:
   245                           	opt stack 0
   246  007ACD  0001               	dw	1
   247  007ACF  000A               	dw	10
   248  007AD1  0064               	dw	100
   249  007AD3  03E8               	dw	1000
   250  007AD5  2710               	dw	10000
   251  007AD7                     __end_of_dpowers:
   252                           	opt stack 0
   253  0000                     _SSPBUF	set	4041
   254  0000                     _SSPSTAT	set	4039
   255  0000                     _SSPADD	set	4040
   256  0000                     _SSPCON2	set	4037
   257  0000                     _SSPCON1	set	4038
   258  0000                     _RCREG	set	4014
   259  0000                     _TMR0L	set	4054
   260  0000                     _TMR0H	set	4055
   261  0000                     _PORTCbits	set	3970
   262  0000                     _PORTDbits	set	3971
   263  0000                     _PORTBbits	set	3969
   264  0000                     _PORTEbits	set	3972
   265  0000                     _TXREG	set	4013
   266  0000                     _ADRESL	set	4035
   267  0000                     _ADRESH	set	4036
   268  0000                     _ADCON0bits	set	4034
   269  0000                     _TRISEbits	set	3990
   270  0000                     _TRISBbits	set	3987
   271  0000                     _PIE1bits	set	3997
   272  0000                     _PIR1bits	set	3998
   273  0000                     _INTCONbits	set	4082
   274  0000                     _SPBRG	set	4015
   275  0000                     _RCSTAbits	set	4011
   276  0000                     _TXSTAbits	set	4012
   277  0000                     _TRISCbits	set	3988
   278  0000                     _TRISDbits	set	3989
   279  0000                     _INTCON	set	4082
   280  0000                     _T0CON	set	4053
   281  0000                     _PORTAbits	set	3968
   282  0000                     _TRISAbits	set	3986
   283  0000                     _ADCON1	set	4033
   284  0000                     _ADCON0	set	4034
   285  0000                     _ACKEN	set	32300
   286  0000                     _ACKDT	set	32301
   287  0000                     _RCEN	set	32299
   288  0000                     _PEN	set	32298
   289  0000                     _RSEN	set	32297
   290  0000                     _SEN	set	32296
   291  0000                     _RCIF	set	31989
   292  0000                     _TMR0IF	set	32658
   293  007AD7                     STR_14:
   294  007AD7  54                 	db	84	;'T'
   295  007AD8  45                 	db	69	;'E'
   296  007AD9  43                 	db	67	;'C'
   297  007ADA  48                 	db	72	;'H'
   298  007ADB  4E                 	db	78	;'N'
   299  007ADC  4F                 	db	79	;'O'
   300  007ADD  57                 	db	87	;'W'
   301  007ADE  20                 	db	32
   302  007ADF  53                 	db	83	;'S'
   303  007AE0  69                 	db	105	;'i'
   304  007AE1  73                 	db	115	;'s'
   305  007AE2  74                 	db	116	;'t'
   306  007AE3  65                 	db	101	;'e'
   307  007AE4  6D                 	db	109	;'m'
   308  007AE5  61                 	db	97	;'a'
   309  007AE6  73                 	db	115	;'s'
   310  007AE7  20                 	db	32
   311  007AE8  65                 	db	101	;'e'
   312  007AE9  6D                 	db	109	;'m'
   313  007AEA  62                 	db	98	;'b'
   314  007AEB  61                 	db	97	;'a'
   315  007AEC  72                 	db	114	;'r'
   316  007AED  63                 	db	99	;'c'
   317  007AEE  61                 	db	97	;'a'
   318  007AEF  64                 	db	100	;'d'
   319  007AF0  6F                 	db	111	;'o'
   320  007AF1  73                 	db	115	;'s'
   321  007AF2  0D                 	db	13
   322  007AF3  0A                 	db	10
   323  007AF4  0D                 	db	13
   324  007AF5  0A                 	db	10
   325  007AF6  54                 	db	84	;'T'
   326  007AF7  65                 	db	101	;'e'
   327  007AF8  73                 	db	115	;'s'
   328  007AF9  74                 	db	116	;'t'
   329  007AFA  65                 	db	101	;'e'
   330  007AFB  20                 	db	32
   331  007AFC  6D                 	db	109	;'m'
   332  007AFD  61                 	db	97	;'a'
   333  007AFE  6E                 	db	110	;'n'
   334  007AFF  75                 	db	117	;'u'
   335  007B00  61                 	db	97	;'a'
   336  007B01  6C                 	db	108	;'l'
   337  007B02  20                 	db	32
   338  007B03  64                 	db	100	;'d'
   339  007B04  65                 	db	101	;'e'
   340  007B05  20                 	db	32
   341  007B06  63                 	db	99	;'c'
   342  007B07  6F                 	db	111	;'o'
   343  007B08  6D                 	db	109	;'m'
   344  007B09  75                 	db	117	;'u'
   345  007B0A  6E                 	db	110	;'n'
   346  007B0B  69                 	db	105	;'i'
   347  007B0C  63                 	db	99	;'c'
   348  007B0D  61                 	db	97	;'a'
   349  007B0E  63                 	db	99	;'c'
   350  007B0F  61                 	db	97	;'a'
   351  007B10  6F                 	db	111	;'o'
   352  007B11  2E                 	db	46
   353  007B12  0D                 	db	13
   354  007B13  0A                 	db	10
   355  007B14  44                 	db	68	;'D'
   356  007B15  61                 	db	97	;'a'
   357  007B16  74                 	db	116	;'t'
   358  007B17  61                 	db	97	;'a'
   359  007B18  3A                 	db	58	;':'
   360  007B19  20                 	db	32
   361  007B1A  25                 	db	37
   362  007B1B  30                 	db	48	;'0'
   363  007B1C  32                 	db	50	;'2'
   364  007B1D  64                 	db	100	;'d'
   365  007B1E  2F                 	db	47
   366  007B1F  25                 	db	37
   367  007B20  30                 	db	48	;'0'
   368  007B21  32                 	db	50	;'2'
   369  007B22  64                 	db	100	;'d'
   370  007B23  2F                 	db	47
   371  007B24  25                 	db	37
   372  007B25  30                 	db	48	;'0'
   373  007B26  32                 	db	50	;'2'
   374  007B27  64                 	db	100	;'d'
   375  007B28  20                 	db	32
   376  007B29  25                 	db	37
   377  007B2A  30                 	db	48	;'0'
   378  007B2B  32                 	db	50	;'2'
   379  007B2C  64                 	db	100	;'d'
   380  007B2D  3A                 	db	58	;':'
   381  007B2E  25                 	db	37
   382  007B2F  30                 	db	48	;'0'
   383  007B30  32                 	db	50	;'2'
   384  007B31  64                 	db	100	;'d'
   385  007B32  3A                 	db	58	;':'
   386  007B33  25                 	db	37
   387  007B34  30                 	db	48	;'0'
   388  007B35  32                 	db	50	;'2'
   389  007B36  64                 	db	100	;'d'
   390  007B37  0D                 	db	13
   391  007B38  0A                 	db	10
   392  007B39  0D                 	db	13
   393  007B3A  0A                 	db	10
   394  007B3B  0D                 	db	13
   395  007B3C  0A                 	db	10
   396  007B3D  56                 	db	86	;'V'
   397  007B3E  65                 	db	101	;'e'
   398  007B3F  72                 	db	114	;'r'
   399  007B40  73                 	db	115	;'s'
   400  007B41  61                 	db	97	;'a'
   401  007B42  6F                 	db	111	;'o'
   402  007B43  20                 	db	32
   403  007B44  64                 	db	100	;'d'
   404  007B45  6F                 	db	111	;'o'
   405  007B46  20                 	db	32
   406  007B47  73                 	db	115	;'s'
   407  007B48  69                 	db	105	;'i'
   408  007B49  73                 	db	115	;'s'
   409  007B4A  74                 	db	116	;'t'
   410  007B4B  65                 	db	101	;'e'
   411  007B4C  6D                 	db	109	;'m'
   412  007B4D  61                 	db	97	;'a'
   413  007B4E  3A                 	db	58	;':'
   414  007B4F  20                 	db	32
   415  007B50  25                 	db	37
   416  007B51  73                 	db	115	;'s'
   417  007B52  0D                 	db	13
   418  007B53  0A                 	db	10
   419  007B54  00                 	db	0
   420  007B55                     STR_26:
   421  007B55  54                 	db	84	;'T'
   422  007B56  45                 	db	69	;'E'
   423  007B57  53                 	db	83	;'S'
   424  007B58  54                 	db	84	;'T'
   425  007B59  45                 	db	69	;'E'
   426  007B5A  20                 	db	32
   427  007B5B  44                 	db	68	;'D'
   428  007B5C  45                 	db	69	;'E'
   429  007B5D  20                 	db	32
   430  007B5E  42                 	db	66	;'B'
   431  007B5F  4F                 	db	79	;'O'
   432  007B60  4D                 	db	77	;'M'
   433  007B61  42                 	db	66	;'B'
   434  007B62  41                 	db	65	;'A'
   435  007B63  53                 	db	83	;'S'
   436  007B64  20                 	db	32
   437  007B65  52                 	db	82	;'R'
   438  007B66  45                 	db	69	;'E'
   439  007B67  41                 	db	65	;'A'
   440  007B68  4C                 	db	76	;'L'
   441  007B69  49                 	db	73	;'I'
   442  007B6A  5A                 	db	90	;'Z'
   443  007B6B  41                 	db	65	;'A'
   444  007B6C  44                 	db	68	;'D'
   445  007B6D  4F                 	db	79	;'O'
   446  007B6E  0D                 	db	13
   447  007B6F  0A                 	db	10
   448  007B70  45                 	db	69	;'E'
   449  007B71  4D                 	db	77	;'M'
   450  007B72  20                 	db	32
   451  007B73  25                 	db	37
   452  007B74  30                 	db	48	;'0'
   453  007B75  32                 	db	50	;'2'
   454  007B76  64                 	db	100	;'d'
   455  007B77  3A                 	db	58	;':'
   456  007B78  25                 	db	37
   457  007B79  30                 	db	48	;'0'
   458  007B7A  32                 	db	50	;'2'
   459  007B7B  64                 	db	100	;'d'
   460  007B7C  3A                 	db	58	;':'
   461  007B7D  25                 	db	37
   462  007B7E  30                 	db	48	;'0'
   463  007B7F  32                 	db	50	;'2'
   464  007B80  64                 	db	100	;'d'
   465  007B81  20                 	db	32
   466  007B82  25                 	db	37
   467  007B83  30                 	db	48	;'0'
   468  007B84  32                 	db	50	;'2'
   469  007B85  64                 	db	100	;'d'
   470  007B86  2F                 	db	47
   471  007B87  25                 	db	37
   472  007B88  30                 	db	48	;'0'
   473  007B89  32                 	db	50	;'2'
   474  007B8A  64                 	db	100	;'d'
   475  007B8B  2F                 	db	47
   476  007B8C  25                 	db	37
   477  007B8D  30                 	db	48	;'0'
   478  007B8E  32                 	db	50	;'2'
   479  007B8F  64                 	db	100	;'d'
   480  007B90  0D                 	db	13
   481  007B91  0A                 	db	10
   482  007B92  4A                 	db	74	;'J'
   483  007B93  4F                 	db	79	;'O'
   484  007B94  43                 	db	67	;'C'
   485  007B95  4B                 	db	75	;'K'
   486  007B96  45                 	db	69	;'E'
   487  007B97  59                 	db	89	;'Y'
   488  007B98  3A                 	db	58	;':'
   489  007B99  20                 	db	32
   490  007B9A  25                 	db	37
   491  007B9B  73                 	db	115	;'s'
   492  007B9C  0D                 	db	13
   493  007B9D  0A                 	db	10
   494  007B9E  50                 	db	80	;'P'
   495  007B9F  52                 	db	82	;'R'
   496  007BA0  49                 	db	73	;'I'
   497  007BA1  4E                 	db	78	;'N'
   498  007BA2  43                 	db	67	;'C'
   499  007BA3  49                 	db	73	;'I'
   500  007BA4  50                 	db	80	;'P'
   501  007BA5  41                 	db	65	;'A'
   502  007BA6  4C                 	db	76	;'L'
   503  007BA7  3A                 	db	58	;':'
   504  007BA8  20                 	db	32
   505  007BA9  25                 	db	37
   506  007BAA  73                 	db	115	;'s'
   507  007BAB  0D                 	db	13
   508  007BAC  0A                 	db	10
   509  007BAD  43                 	db	67	;'C'
   510  007BAE  4F                 	db	79	;'O'
   511  007BAF  4D                 	db	77	;'M'
   512  007BB0  42                 	db	66	;'B'
   513  007BB1  55                 	db	85	;'U'
   514  007BB2  53                 	db	83	;'S'
   515  007BB3  54                 	db	84	;'T'
   516  007BB4  41                 	db	65	;'A'
   517  007BB5  4F                 	db	79	;'O'
   518  007BB6  3A                 	db	58	;':'
   519  007BB7  20                 	db	32
   520  007BB8  25                 	db	37
   521  007BB9  73                 	db	115	;'s'
   522  007BBA  0D                 	db	13
   523  007BBB  0A                 	db	10
   524  007BBC  00                 	db	0
   525  007BBD                     STR_25:
   526  007BBD  44                 	db	68	;'D'
   527  007BBE  49                 	db	73	;'I'
   528  007BBF  53                 	db	83	;'S'
   529  007BC0  50                 	db	80	;'P'
   530  007BC1  41                 	db	65	;'A'
   531  007BC2  52                 	db	82	;'R'
   532  007BC3  4F                 	db	79	;'O'
   533  007BC4  20                 	db	32
   534  007BC5  41                 	db	65	;'A'
   535  007BC6  4C                 	db	76	;'L'
   536  007BC7  41                 	db	65	;'A'
   537  007BC8  52                 	db	82	;'R'
   538  007BC9  4D                 	db	77	;'M'
   539  007BCA  45                 	db	69	;'E'
   540  007BCB  20                 	db	32
   541  007BCC  44                 	db	68	;'D'
   542  007BCD  45                 	db	69	;'E'
   543  007BCE  20                 	db	32
   544  007BCF  49                 	db	73	;'I'
   545  007BD0  4E                 	db	78	;'N'
   546  007BD1  43                 	db	67	;'C'
   547  007BD2  45                 	db	69	;'E'
   548  007BD3  4E                 	db	78	;'N'
   549  007BD4  44                 	db	68	;'D'
   550  007BD5  49                 	db	73	;'I'
   551  007BD6  4F                 	db	79	;'O'
   552  007BD7  0D                 	db	13
   553  007BD8  0A                 	db	10
   554  007BD9  45                 	db	69	;'E'
   555  007BDA  4D                 	db	77	;'M'
   556  007BDB  20                 	db	32
   557  007BDC  25                 	db	37
   558  007BDD  30                 	db	48	;'0'
   559  007BDE  32                 	db	50	;'2'
   560  007BDF  64                 	db	100	;'d'
   561  007BE0  3A                 	db	58	;':'
   562  007BE1  25                 	db	37
   563  007BE2  30                 	db	48	;'0'
   564  007BE3  32                 	db	50	;'2'
   565  007BE4  64                 	db	100	;'d'
   566  007BE5  3A                 	db	58	;':'
   567  007BE6  25                 	db	37
   568  007BE7  30                 	db	48	;'0'
   569  007BE8  32                 	db	50	;'2'
   570  007BE9  64                 	db	100	;'d'
   571  007BEA  20                 	db	32
   572  007BEB  25                 	db	37
   573  007BEC  30                 	db	48	;'0'
   574  007BED  32                 	db	50	;'2'
   575  007BEE  64                 	db	100	;'d'
   576  007BEF  2F                 	db	47
   577  007BF0  25                 	db	37
   578  007BF1  30                 	db	48	;'0'
   579  007BF2  32                 	db	50	;'2'
   580  007BF3  64                 	db	100	;'d'
   581  007BF4  2F                 	db	47
   582  007BF5  25                 	db	37
   583  007BF6  30                 	db	48	;'0'
   584  007BF7  32                 	db	50	;'2'
   585  007BF8  64                 	db	100	;'d'
   586  007BF9  0D                 	db	13
   587  007BFA  0A                 	db	10
   588  007BFB  00                 	db	0
   589  007BFC                     STR_75:
   590  007BFC  44                 	db	68	;'D'
   591  007BFD  61                 	db	97	;'a'
   592  007BFE  74                 	db	116	;'t'
   593  007BFF  61                 	db	97	;'a'
   594  007C00  3A                 	db	58	;':'
   595  007C01  20                 	db	32
   596  007C02  25                 	db	37
   597  007C03  30                 	db	48	;'0'
   598  007C04  32                 	db	50	;'2'
   599  007C05  64                 	db	100	;'d'
   600  007C06  2F                 	db	47
   601  007C07  25                 	db	37
   602  007C08  30                 	db	48	;'0'
   603  007C09  32                 	db	50	;'2'
   604  007C0A  64                 	db	100	;'d'
   605  007C0B  2F                 	db	47
   606  007C0C  25                 	db	37
   607  007C0D  30                 	db	48	;'0'
   608  007C0E  32                 	db	50	;'2'
   609  007C0F  64                 	db	100	;'d'
   610  007C10  20                 	db	32
   611  007C11  25                 	db	37
   612  007C12  30                 	db	48	;'0'
   613  007C13  32                 	db	50	;'2'
   614  007C14  64                 	db	100	;'d'
   615  007C15  3A                 	db	58	;':'
   616  007C16  25                 	db	37
   617  007C17  30                 	db	48	;'0'
   618  007C18  32                 	db	50	;'2'
   619  007C19  64                 	db	100	;'d'
   620  007C1A  00                 	db	0
   621  007C1B                     STR_55:
   622  007C1B  20                 	db	32
   623  007C1C  25                 	db	37
   624  007C1D  30                 	db	48	;'0'
   625  007C1E  32                 	db	50	;'2'
   626  007C1F  64                 	db	100	;'d'
   627  007C20  3A                 	db	58	;':'
   628  007C21  25                 	db	37
   629  007C22  30                 	db	48	;'0'
   630  007C23  32                 	db	50	;'2'
   631  007C24  64                 	db	100	;'d'
   632  007C25  3A                 	db	58	;':'
   633  007C26  25                 	db	37
   634  007C27  30                 	db	48	;'0'
   635  007C28  32                 	db	50	;'2'
   636  007C29  64                 	db	100	;'d'
   637  007C2A  20                 	db	32
   638  007C2B  25                 	db	37
   639  007C2C  30                 	db	48	;'0'
   640  007C2D  32                 	db	50	;'2'
   641  007C2E  64                 	db	100	;'d'
   642  007C2F  2F                 	db	47
   643  007C30  25                 	db	37
   644  007C31  30                 	db	48	;'0'
   645  007C32  32                 	db	50	;'2'
   646  007C33  64                 	db	100	;'d'
   647  007C34  00                 	db	0
   648  007C35                     STR_59:
   649  007C35  20                 	db	32
   650  007C36  2A                 	db	42
   651  007C37  66                 	db	102	;'f'
   652  007C38  61                 	db	97	;'a'
   653  007C39  6C                 	db	108	;'l'
   654  007C3A  68                 	db	104	;'h'
   655  007C3B  61                 	db	97	;'a'
   656  007C3C  20                 	db	32
   657  007C3D  42                 	db	66	;'B'
   658  007C3E  2E                 	db	46
   659  007C3F  20                 	db	32
   660  007C40  70                 	db	112	;'p'
   661  007C41  72                 	db	114	;'r'
   662  007C42  69                 	db	105	;'i'
   663  007C43  6E                 	db	110	;'n'
   664  007C44  63                 	db	99	;'c'
   665  007C45  69                 	db	105	;'i'
   666  007C46  70                 	db	112	;'p'
   667  007C47  61                 	db	97	;'a'
   668  007C48  6C                 	db	108	;'l'
   669  007C49  00                 	db	0
   670  007C4A                     STR_60:
   671  007C4A  20                 	db	32
   672  007C4B  2A                 	db	42
   673  007C4C  66                 	db	102	;'f'
   674  007C4D  61                 	db	97	;'a'
   675  007C4E  6C                 	db	108	;'l'
   676  007C4F  68                 	db	104	;'h'
   677  007C50  61                 	db	97	;'a'
   678  007C51  20                 	db	32
   679  007C52  42                 	db	66	;'B'
   680  007C53  2E                 	db	46
   681  007C54  20                 	db	32
   682  007C55  63                 	db	99	;'c'
   683  007C56  6F                 	db	111	;'o'
   684  007C57  6D                 	db	109	;'m'
   685  007C58  62                 	db	98	;'b'
   686  007C59  75                 	db	117	;'u'
   687  007C5A  73                 	db	115	;'s'
   688  007C5B  74                 	db	116	;'t'
   689  007C5C  61                 	db	97	;'a'
   690  007C5D  6F                 	db	111	;'o'
   691  007C5E  00                 	db	0
   692  007C5F                     STR_69:
   693  007C5F  23                 	db	35
   694  007C60  50                 	db	80	;'P'
   695  007C61  72                 	db	114	;'r'
   696  007C62  6F                 	db	111	;'o'
   697  007C63  78                 	db	120	;'x'
   698  007C64  69                 	db	105	;'i'
   699  007C65  6D                 	db	109	;'m'
   700  007C66  6F                 	db	111	;'o'
   701  007C67  20                 	db	32
   702  007C68  65                 	db	101	;'e'
   703  007C69  6D                 	db	109	;'m'
   704  007C6A  20                 	db	32
   705  007C6B  25                 	db	37
   706  007C6C  32                 	db	50	;'2'
   707  007C6D  64                 	db	100	;'d'
   708  007C6E  20                 	db	32
   709  007C6F  64                 	db	100	;'d'
   710  007C70  69                 	db	105	;'i'
   711  007C71  61                 	db	97	;'a'
   712  007C72  73                 	db	115	;'s'
   713  007C73  00                 	db	0
   714  007C74                     STR_37:
   715  007C74  44                 	db	68	;'D'
   716  007C75  65                 	db	101	;'e'
   717  007C76  73                 	db	115	;'s'
   718  007C77  70                 	db	112	;'p'
   719  007C78  72                 	db	114	;'r'
   720  007C79  65                 	db	101	;'e'
   721  007C7A  73                 	db	115	;'s'
   722  007C7B  73                 	db	115	;'s'
   723  007C7C  75                 	db	117	;'u'
   724  007C7D  72                 	db	114	;'r'
   725  007C7E  69                 	db	105	;'i'
   726  007C7F  7A                 	db	122	;'z'
   727  007C80  61                 	db	97	;'a'
   728  007C81  6E                 	db	110	;'n'
   729  007C82  64                 	db	100	;'d'
   730  007C83  6F                 	db	111	;'o'
   731  007C84  2E                 	db	46
   732  007C85  2E                 	db	46
   733  007C86  2E                 	db	46
   734  007C87  00                 	db	0
   735  007C88                     STR_61:
   736  007C88  20                 	db	32
   737  007C89  41                 	db	65	;'A'
   738  007C8A  4C                 	db	76	;'L'
   739  007C8B  45                 	db	69	;'E'
   740  007C8C  52                 	db	82	;'R'
   741  007C8D  54                 	db	84	;'T'
   742  007C8E  41                 	db	65	;'A'
   743  007C8F  20                 	db	32
   744  007C90  44                 	db	68	;'D'
   745  007C91  45                 	db	69	;'E'
   746  007C92  20                 	db	32
   747  007C93  49                 	db	73	;'I'
   748  007C94  4E                 	db	78	;'N'
   749  007C95  43                 	db	67	;'C'
   750  007C96  45                 	db	69	;'E'
   751  007C97  4E                 	db	78	;'N'
   752  007C98  44                 	db	68	;'D'
   753  007C99  49                 	db	73	;'I'
   754  007C9A  4F                 	db	79	;'O'
   755  007C9B  00                 	db	0
   756  007C9C                     STR_57:
   757  007C9C  20                 	db	32
   758  007C9D  2A                 	db	42
   759  007C9E  66                 	db	102	;'f'
   760  007C9F  61                 	db	97	;'a'
   761  007CA0  6C                 	db	108	;'l'
   762  007CA1  68                 	db	104	;'h'
   763  007CA2  61                 	db	97	;'a'
   764  007CA3  20                 	db	32
   765  007CA4  76                 	db	118	;'v'
   766  007CA5  61                 	db	97	;'a'
   767  007CA6  6C                 	db	108	;'l'
   768  007CA7  2E                 	db	46
   769  007CA8  20                 	db	32
   770  007CA9  6C                 	db	108	;'l'
   771  007CAA  61                 	db	97	;'a'
   772  007CAB  64                 	db	100	;'d'
   773  007CAC  72                 	db	114	;'r'
   774  007CAD  61                 	db	97	;'a'
   775  007CAE  6F                 	db	111	;'o'
   776  007CAF  00                 	db	0
   777  007CB0                     STR_70:
   778  007CB0  49                 	db	73	;'I'
   779  007CB1  4E                 	db	78	;'N'
   780  007CB2  54                 	db	84	;'T'
   781  007CB3  45                 	db	69	;'E'
   782  007CB4  52                 	db	82	;'R'
   783  007CB5  56                 	db	86	;'V'
   784  007CB6  41                 	db	65	;'A'
   785  007CB7  4C                 	db	76	;'L'
   786  007CB8  4F                 	db	79	;'O'
   787  007CB9  3A                 	db	58	;':'
   788  007CBA  20                 	db	32
   789  007CBB  25                 	db	37
   790  007CBC  32                 	db	50	;'2'
   791  007CBD  64                 	db	100	;'d'
   792  007CBE  20                 	db	32
   793  007CBF  64                 	db	100	;'d'
   794  007CC0  69                 	db	105	;'i'
   795  007CC1  61                 	db	97	;'a'
   796  007CC2  73                 	db	115	;'s'
   797  007CC3  00                 	db	0
   798  007CC4                     STR_71:
   799  007CC4  48                 	db	72	;'H'
   800  007CC5  4F                 	db	79	;'O'
   801  007CC6  52                 	db	82	;'R'
   802  007CC7  41                 	db	65	;'A'
   803  007CC8  52                 	db	82	;'R'
   804  007CC9  49                 	db	73	;'I'
   805  007CCA  4F                 	db	79	;'O'
   806  007CCB  3A                 	db	58	;':'
   807  007CCC  20                 	db	32
   808  007CCD  25                 	db	37
   809  007CCE  30                 	db	48	;'0'
   810  007CCF  32                 	db	50	;'2'
   811  007CD0  64                 	db	100	;'d'
   812  007CD1  20                 	db	32
   813  007CD2  68                 	db	104	;'h'
   814  007CD3  6F                 	db	111	;'o'
   815  007CD4  72                 	db	114	;'r'
   816  007CD5  61                 	db	97	;'a'
   817  007CD6  73                 	db	115	;'s'
   818  007CD7  00                 	db	0
   819  007CD8                     STR_87:
   820  007CD8  53                 	db	83	;'S'
   821  007CD9  69                 	db	105	;'i'
   822  007CDA  73                 	db	115	;'s'
   823  007CDB  74                 	db	116	;'t'
   824  007CDC  65                 	db	101	;'e'
   825  007CDD  6D                 	db	109	;'m'
   826  007CDE  61                 	db	97	;'a'
   827  007CDF  73                 	db	115	;'s'
   828  007CE0  20                 	db	32
   829  007CE1  65                 	db	101	;'e'
   830  007CE2  6D                 	db	109	;'m'
   831  007CE3  62                 	db	98	;'b'
   832  007CE4  61                 	db	97	;'a'
   833  007CE5  72                 	db	114	;'r'
   834  007CE6  63                 	db	99	;'c'
   835  007CE7  61                 	db	97	;'a'
   836  007CE8  64                 	db	100	;'d'
   837  007CE9  6F                 	db	111	;'o'
   838  007CEA  73                 	db	115	;'s'
   839  007CEB  00                 	db	0
   840  007CEC                     STR_64:
   841  007CEC  20                 	db	32
   842  007CED  50                 	db	80	;'P'
   843  007CEE  72                 	db	114	;'r'
   844  007CEF  65                 	db	101	;'e'
   845  007CF0  73                 	db	115	;'s'
   846  007CF1  73                 	db	115	;'s'
   847  007CF2  20                 	db	32
   848  007CF3  45                 	db	69	;'E'
   849  007CF4  53                 	db	83	;'S'
   850  007CF5  43                 	db	67	;'C'
   851  007CF6  20                 	db	32
   852  007CF7  70                 	db	112	;'p'
   853  007CF8  2F                 	db	47
   854  007CF9  20                 	db	32
   855  007CFA  52                 	db	82	;'R'
   856  007CFB  65                 	db	101	;'e'
   857  007CFC  73                 	db	115	;'s'
   858  007CFD  65                 	db	101	;'e'
   859  007CFE  74                 	db	116	;'t'
   860  007CFF  00                 	db	0
   861  007D00                     STR_41:
   862  007D00  42                 	db	66	;'B'
   863  007D01  6F                 	db	111	;'o'
   864  007D02  6D                 	db	109	;'m'
   865  007D03  62                 	db	98	;'b'
   866  007D04  61                 	db	97	;'a'
   867  007D05  20                 	db	32
   868  007D06  50                 	db	80	;'P'
   869  007D07  72                 	db	114	;'r'
   870  007D08  69                 	db	105	;'i'
   871  007D09  6E                 	db	110	;'n'
   872  007D0A  63                 	db	99	;'c'
   873  007D0B  69                 	db	105	;'i'
   874  007D0C  70                 	db	112	;'p'
   875  007D0D  61                 	db	97	;'a'
   876  007D0E  6C                 	db	108	;'l'
   877  007D0F  2E                 	db	46
   878  007D10  2E                 	db	46
   879  007D11  2E                 	db	46
   880  007D12  00                 	db	0
   881  007D13                     STR_42:
   882  007D13  42                 	db	66	;'B'
   883  007D14  6F                 	db	111	;'o'
   884  007D15  6D                 	db	109	;'m'
   885  007D16  62                 	db	98	;'b'
   886  007D17  61                 	db	97	;'a'
   887  007D18  20                 	db	32
   888  007D19  43                 	db	67	;'C'
   889  007D1A  6F                 	db	111	;'o'
   890  007D1B  6D                 	db	109	;'m'
   891  007D1C  62                 	db	98	;'b'
   892  007D1D  75                 	db	117	;'u'
   893  007D1E  73                 	db	115	;'s'
   894  007D1F  74                 	db	116	;'t'
   895  007D20  61                 	db	97	;'a'
   896  007D21  6F                 	db	111	;'o'
   897  007D22  2E                 	db	46
   898  007D23  2E                 	db	46
   899  007D24  2E                 	db	46
   900  007D25  00                 	db	0
   901  007D26                     STR_101:
   902  007D26  23                 	db	35
   903  007D27  68                 	db	104	;'h'
   904  007D28  6F                 	db	111	;'o'
   905  007D29  72                 	db	114	;'r'
   906  007D2A  69                 	db	105	;'i'
   907  007D2B  6D                 	db	109	;'m'
   908  007D2C  65                 	db	101	;'e'
   909  007D2D  74                 	db	116	;'t'
   910  007D2E  72                 	db	114	;'r'
   911  007D2F  6F                 	db	111	;'o'
   912  007D30  3A                 	db	58	;':'
   913  007D31  25                 	db	37
   914  007D32  35                 	db	53	;'5'
   915  007D33  64                 	db	100	;'d'
   916  007D34  20                 	db	32
   917  007D35  6D                 	db	109	;'m'
   918  007D36  69                 	db	105	;'i'
   919  007D37  6E                 	db	110	;'n'
   920  007D38  00                 	db	0
   921  007D39                     STR_96:
   922  007D39  43                 	db	67	;'C'
   923  007D3A  6F                 	db	111	;'o'
   924  007D3B  6E                 	db	110	;'n'
   925  007D3C  66                 	db	102	;'f'
   926  007D3D  69                 	db	105	;'i'
   927  007D3E  67                 	db	103	;'g'
   928  007D3F  75                 	db	117	;'u'
   929  007D40  72                 	db	114	;'r'
   930  007D41  61                 	db	97	;'a'
   931  007D42  63                 	db	99	;'c'
   932  007D43  61                 	db	97	;'a'
   933  007D44  6F                 	db	111	;'o'
   934  007D45  20                 	db	32
   935  007D46  74                 	db	116	;'t'
   936  007D47  65                 	db	101	;'e'
   937  007D48  6D                 	db	109	;'m'
   938  007D49  70                 	db	112	;'p'
   939  007D4A  6F                 	db	111	;'o'
   940  007D4B  00                 	db	0
   941  007D4C                     STR_62:
   942  007D4C  45                 	db	69	;'E'
   943  007D4D  72                 	db	114	;'r'
   944  007D4E  72                 	db	114	;'r'
   945  007D4F  6F                 	db	111	;'o'
   946  007D50  20                 	db	32
   947  007D51  6E                 	db	110	;'n'
   948  007D52  6F                 	db	111	;'o'
   949  007D53  20                 	db	32
   950  007D54  54                 	db	84	;'T'
   951  007D55  72                 	db	114	;'r'
   952  007D56  61                 	db	97	;'a'
   953  007D57  6E                 	db	110	;'n'
   954  007D58  73                 	db	115	;'s'
   955  007D59  64                 	db	100	;'d'
   956  007D5A  75                 	db	117	;'u'
   957  007D5B  74                 	db	116	;'t'
   958  007D5C  6F                 	db	111	;'o'
   959  007D5D  72                 	db	114	;'r'
   960  007D5E  00                 	db	0
   961  007D5F                     STR_12:
   962  007D5F  41                 	db	65	;'A'
   963  007D60  54                 	db	84	;'T'
   964  007D61  2B                 	db	43
   965  007D62  43                 	db	67	;'C'
   966  007D63  4D                 	db	77	;'M'
   967  007D64  47                 	db	71	;'G'
   968  007D65  53                 	db	83	;'S'
   969  007D66  3D                 	db	61	;'='
   970  007D67  22                 	db	34
   971  007D68  2B                 	db	43
   972  007D69  35                 	db	53	;'5'
   973  007D6A  35                 	db	53	;'5'
   974  007D6B  25                 	db	37
   975  007D6C  73                 	db	115	;'s'
   976  007D6D  22                 	db	34
   977  007D6E  0D                 	db	13
   978  007D6F  0A                 	db	10
   979  007D70  00                 	db	0
   980  007D71                     STR_117:
   981  007D71  50                 	db	80	;'P'
   982  007D72  41                 	db	65	;'A'
   983  007D73  52                 	db	82	;'R'
   984  007D74  54                 	db	84	;'T'
   985  007D75  49                 	db	73	;'I'
   986  007D76  44                 	db	68	;'D'
   987  007D77  41                 	db	65	;'A'
   988  007D78  20                 	db	32
   989  007D79  43                 	db	67	;'C'
   990  007D7A  4F                 	db	79	;'O'
   991  007D7B  4D                 	db	77	;'M'
   992  007D7C  42                 	db	66	;'B'
   993  007D7D  55                 	db	85	;'U'
   994  007D7E  53                 	db	83	;'S'
   995  007D7F  54                 	db	84	;'T'
   996  007D80  41                 	db	65	;'A'
   997  007D81  4F                 	db	79	;'O'
   998  007D82  00                 	db	0
   999  007D83                     STR_119:
  1000  007D83  50                 	db	80	;'P'
  1001  007D84  45                 	db	69	;'E'
  1002  007D85  52                 	db	82	;'R'
  1003  007D86  49                 	db	73	;'I'
  1004  007D87  4F                 	db	79	;'O'
  1005  007D88  44                 	db	68	;'D'
  1006  007D89  4F                 	db	79	;'O'
  1007  007D8A  20                 	db	32
  1008  007D8B  44                 	db	68	;'D'
  1009  007D8C  45                 	db	69	;'E'
  1010  007D8D  20                 	db	32
  1011  007D8E  54                 	db	84	;'T'
  1012  007D8F  45                 	db	69	;'E'
  1013  007D90  53                 	db	83	;'S'
  1014  007D91  54                 	db	84	;'T'
  1015  007D92  45                 	db	69	;'E'
  1016  007D93  53                 	db	83	;'S'
  1017  007D94  00                 	db	0
  1018  007D95                     STR_58:
  1019  007D95  20                 	db	32
  1020  007D96  2A                 	db	42
  1021  007D97  66                 	db	102	;'f'
  1022  007D98  61                 	db	97	;'a'
  1023  007D99  6C                 	db	108	;'l'
  1024  007D9A  68                 	db	104	;'h'
  1025  007D9B  61                 	db	97	;'a'
  1026  007D9C  20                 	db	32
  1027  007D9D  42                 	db	66	;'B'
  1028  007D9E  2E                 	db	46
  1029  007D9F  20                 	db	32
  1030  007DA0  6A                 	db	106	;'j'
  1031  007DA1  6F                 	db	111	;'o'
  1032  007DA2  63                 	db	99	;'c'
  1033  007DA3  6B                 	db	107	;'k'
  1034  007DA4  65                 	db	101	;'e'
  1035  007DA5  79                 	db	121	;'y'
  1036  007DA6  00                 	db	0
  1037  007DA7                     STR_44:
  1038  007DA7  54                 	db	84	;'T'
  1039  007DA8  65                 	db	101	;'e'
  1040  007DA9  73                 	db	115	;'s'
  1041  007DAA  74                 	db	116	;'t'
  1042  007DAB  65                 	db	101	;'e'
  1043  007DAC  20                 	db	32
  1044  007DAD  43                 	db	67	;'C'
  1045  007DAE  6F                 	db	111	;'o'
  1046  007DAF  6E                 	db	110	;'n'
  1047  007DB0  63                 	db	99	;'c'
  1048  007DB1  6C                 	db	108	;'l'
  1049  007DB2  75                 	db	117	;'u'
  1050  007DB3  69                 	db	105	;'i'
  1051  007DB4  64                 	db	100	;'d'
  1052  007DB5  6F                 	db	111	;'o'
  1053  007DB6  21                 	db	33
  1054  007DB7  00                 	db	0
  1055  007DB8                     STR_88:
  1056  007DB8  20                 	db	32
  1057  007DB9  20                 	db	32
  1058  007DBA  20                 	db	32
  1059  007DBB  34                 	db	52	;'4'
  1060  007DBC  38                 	db	56	;'8'
  1061  007DBD  20                 	db	32
  1062  007DBE  39                 	db	57	;'9'
  1063  007DBF  39                 	db	57	;'9'
  1064  007DC0  39                 	db	57	;'9'
  1065  007DC1  30                 	db	48	;'0'
  1066  007DC2  36                 	db	54	;'6'
  1067  007DC3  2D                 	db	45
  1068  007DC4  35                 	db	53	;'5'
  1069  007DC5  36                 	db	54	;'6'
  1070  007DC6  35                 	db	53	;'5'
  1071  007DC7  31                 	db	49	;'1'
  1072  007DC8  00                 	db	0
  1073  007DC9                     STR_56:
  1074  007DC9  20                 	db	32
  1075  007DCA  2A                 	db	42
  1076  007DCB  66                 	db	102	;'f'
  1077  007DCC  61                 	db	97	;'a'
  1078  007DCD  6C                 	db	108	;'l'
  1079  007DCE  68                 	db	104	;'h'
  1080  007DCF  61                 	db	97	;'a'
  1081  007DD0  20                 	db	32
  1082  007DD1  65                 	db	101	;'e'
  1083  007DD2  6C                 	db	108	;'l'
  1084  007DD3  65                 	db	101	;'e'
  1085  007DD4  74                 	db	116	;'t'
  1086  007DD5  72                 	db	114	;'r'
  1087  007DD6  69                 	db	105	;'i'
  1088  007DD7  63                 	db	99	;'c'
  1089  007DD8  61                 	db	97	;'a'
  1090  007DD9  00                 	db	0
  1091  007DDA                     STR_95:
  1092  007DDA  45                 	db	69	;'E'
  1093  007DDB  6E                 	db	110	;'n'
  1094  007DDC  76                 	db	118	;'v'
  1095  007DDD  69                 	db	105	;'i'
  1096  007DDE  61                 	db	97	;'a'
  1097  007DDF  72                 	db	114	;'r'
  1098  007DE0  20                 	db	32
  1099  007DE1  73                 	db	115	;'s'
  1100  007DE2  6D                 	db	109	;'m'
  1101  007DE3  73                 	db	115	;'s'
  1102  007DE4  20                 	db	32
  1103  007DE5  74                 	db	116	;'t'
  1104  007DE6  65                 	db	101	;'e'
  1105  007DE7  73                 	db	115	;'s'
  1106  007DE8  74                 	db	116	;'t'
  1107  007DE9  65                 	db	101	;'e'
  1108  007DEA  00                 	db	0
  1109  007DEB                     STR_54:
  1110  007DEB  65                 	db	101	;'e'
  1111  007DEC  6E                 	db	110	;'n'
  1112  007DED  76                 	db	118	;'v'
  1113  007DEE  69                 	db	105	;'i'
  1114  007DEF  61                 	db	97	;'a'
  1115  007DF0  6E                 	db	110	;'n'
  1116  007DF1  64                 	db	100	;'d'
  1117  007DF2  6F                 	db	111	;'o'
  1118  007DF3  20                 	db	32
  1119  007DF4  53                 	db	83	;'S'
  1120  007DF5  4D                 	db	77	;'M'
  1121  007DF6  53                 	db	83	;'S'
  1122  007DF7  2E                 	db	46
  1123  007DF8  2E                 	db	46
  1124  007DF9  2E                 	db	46
  1125  007DFA  00                 	db	0
  1126  007DFB                     STR_43:
  1127  007DFB  42                 	db	66	;'B'
  1128  007DFC  6F                 	db	111	;'o'
  1129  007DFD  6D                 	db	109	;'m'
  1130  007DFE  62                 	db	98	;'b'
  1131  007DFF  61                 	db	97	;'a'
  1132  007E00  20                 	db	32
  1133  007E01  4C                 	db	76	;'L'
  1134  007E02  69                 	db	105	;'i'
  1135  007E03  67                 	db	103	;'g'
  1136  007E04  61                 	db	97	;'a'
  1137  007E05  64                 	db	100	;'d'
  1138  007E06  61                 	db	97	;'a'
  1139  007E07  2E                 	db	46
  1140  007E08  2E                 	db	46
  1141  007E09  2E                 	db	46
  1142  007E0A  00                 	db	0
  1143  007E0B                     STR_40:
  1144  007E0B  42                 	db	66	;'B'
  1145  007E0C  6F                 	db	111	;'o'
  1146  007E0D  6D                 	db	109	;'m'
  1147  007E0E  62                 	db	98	;'b'
  1148  007E0F  61                 	db	97	;'a'
  1149  007E10  20                 	db	32
  1150  007E11  4A                 	db	74	;'J'
  1151  007E12  6F                 	db	111	;'o'
  1152  007E13  63                 	db	99	;'c'
  1153  007E14  6B                 	db	107	;'k'
  1154  007E15  65                 	db	101	;'e'
  1155  007E16  79                 	db	121	;'y'
  1156  007E17  2E                 	db	46
  1157  007E18  2E                 	db	46
  1158  007E19  2E                 	db	46
  1159  007E1A  00                 	db	0
  1160  007E1B                     STR_116:
  1161  007E1B  50                 	db	80	;'P'
  1162  007E1C  52                 	db	82	;'R'
  1163  007E1D  45                 	db	69	;'E'
  1164  007E1E  53                 	db	83	;'S'
  1165  007E1F  53                 	db	83	;'S'
  1166  007E20  41                 	db	65	;'A'
  1167  007E21  4F                 	db	79	;'O'
  1168  007E22  20                 	db	32
  1169  007E23  44                 	db	68	;'D'
  1170  007E24  41                 	db	65	;'A'
  1171  007E25  20                 	db	32
  1172  007E26  52                 	db	82	;'R'
  1173  007E27  45                 	db	69	;'E'
  1174  007E28  44                 	db	68	;'D'
  1175  007E29  45                 	db	69	;'E'
  1176  007E2A  00                 	db	0
  1177  007E2B                     STR_39:
  1178  007E2B  50                 	db	80	;'P'
  1179  007E2C  72                 	db	114	;'r'
  1180  007E2D  65                 	db	101	;'e'
  1181  007E2E  73                 	db	115	;'s'
  1182  007E2F  73                 	db	115	;'s'
  1183  007E30  61                 	db	97	;'a'
  1184  007E31  6F                 	db	111	;'o'
  1185  007E32  20                 	db	32
  1186  007E33  25                 	db	37
  1187  007E34  73                 	db	115	;'s'
  1188  007E35  20                 	db	32
  1189  007E36  42                 	db	66	;'B'
  1190  007E37  41                 	db	65	;'A'
  1191  007E38  52                 	db	82	;'R'
  1192  007E39  00                 	db	0
  1193  007E3A                     STR_66:
  1194  007E3A  25                 	db	37
  1195  007E3B  30                 	db	48	;'0'
  1196  007E3C  32                 	db	50	;'2'
  1197  007E3D  64                 	db	100	;'d'
  1198  007E3E  2F                 	db	47
  1199  007E3F  25                 	db	37
  1200  007E40  30                 	db	48	;'0'
  1201  007E41  32                 	db	50	;'2'
  1202  007E42  64                 	db	100	;'d'
  1203  007E43  2F                 	db	47
  1204  007E44  25                 	db	37
  1205  007E45  30                 	db	48	;'0'
  1206  007E46  32                 	db	50	;'2'
  1207  007E47  64                 	db	100	;'d'
  1208  007E48  00                 	db	0
  1209  007E49                     STR_68:
  1210  007E49  25                 	db	37
  1211  007E4A  30                 	db	48	;'0'
  1212  007E4B  32                 	db	50	;'2'
  1213  007E4C  64                 	db	100	;'d'
  1214  007E4D  3A                 	db	58	;':'
  1215  007E4E  25                 	db	37
  1216  007E4F  30                 	db	48	;'0'
  1217  007E50  32                 	db	50	;'2'
  1218  007E51  64                 	db	100	;'d'
  1219  007E52  3A                 	db	58	;':'
  1220  007E53  25                 	db	37
  1221  007E54  30                 	db	48	;'0'
  1222  007E55  32                 	db	50	;'2'
  1223  007E56  64                 	db	100	;'d'
  1224  007E57  00                 	db	0
  1225  007E58                     STR_48:
  1226  007E58  50                 	db	80	;'P'
  1227  007E59  52                 	db	82	;'R'
  1228  007E5A  49                 	db	73	;'I'
  1229  007E5B  4E                 	db	78	;'N'
  1230  007E5C  43                 	db	67	;'C'
  1231  007E5D  49                 	db	73	;'I'
  1232  007E5E  50                 	db	80	;'P'
  1233  007E5F  41                 	db	65	;'A'
  1234  007E60  4C                 	db	76	;'L'
  1235  007E61  20                 	db	32
  1236  007E62  3A                 	db	58	;':'
  1237  007E63  20                 	db	32
  1238  007E64  25                 	db	37
  1239  007E65  73                 	db	115	;'s'
  1240  007E66  00                 	db	0
  1241  007E67                     STR_51:
  1242  007E67  43                 	db	67	;'C'
  1243  007E68  4F                 	db	79	;'O'
  1244  007E69  4D                 	db	77	;'M'
  1245  007E6A  42                 	db	66	;'B'
  1246  007E6B  55                 	db	85	;'U'
  1247  007E6C  53                 	db	83	;'S'
  1248  007E6D  54                 	db	84	;'T'
  1249  007E6E  41                 	db	65	;'A'
  1250  007E6F  4F                 	db	79	;'O'
  1251  007E70  20                 	db	32
  1252  007E71  3A                 	db	58	;':'
  1253  007E72  20                 	db	32
  1254  007E73  25                 	db	37
  1255  007E74  73                 	db	115	;'s'
  1256  007E75  00                 	db	0
  1257  007E76                     STR_38:
  1258  007E76  41                 	db	65	;'A'
  1259  007E77  67                 	db	103	;'g'
  1260  007E78  75                 	db	117	;'u'
  1261  007E79  61                 	db	97	;'a'
  1262  007E7A  72                 	db	114	;'r'
  1263  007E7B  64                 	db	100	;'d'
  1264  007E7C  65                 	db	101	;'e'
  1265  007E7D  2E                 	db	46
  1266  007E7E  2E                 	db	46
  1267  007E7F  2E                 	db	46
  1268  007E80  20                 	db	32
  1269  007E81  25                 	db	37
  1270  007E82  64                 	db	100	;'d'
  1271  007E83  73                 	db	115	;'s'
  1272  007E84  00                 	db	0
  1273  007E85                     STR_122:
  1274  007E85  49                 	db	73	;'I'
  1275  007E86  6E                 	db	110	;'n'
  1276  007E87  69                 	db	105	;'i'
  1277  007E88  63                 	db	99	;'c'
  1278  007E89  69                 	db	105	;'i'
  1279  007E8A  61                 	db	97	;'a'
  1280  007E8B  72                 	db	114	;'r'
  1281  007E8C  20                 	db	32
  1282  007E8D  54                 	db	84	;'T'
  1283  007E8E  65                 	db	101	;'e'
  1284  007E8F  73                 	db	115	;'s'
  1285  007E90  74                 	db	116	;'t'
  1286  007E91  65                 	db	101	;'e'
  1287  007E92  73                 	db	115	;'s'
  1288  007E93  00                 	db	0
  1289  007E94                     STR_112:
  1290  007E94  56                 	db	86	;'V'
  1291  007E95  65                 	db	101	;'e'
  1292  007E96  72                 	db	114	;'r'
  1293  007E97  73                 	db	115	;'s'
  1294  007E98  61                 	db	97	;'a'
  1295  007E99  6F                 	db	111	;'o'
  1296  007E9A  20                 	db	32
  1297  007E9B  53                 	db	83	;'S'
  1298  007E9C  6F                 	db	111	;'o'
  1299  007E9D  66                 	db	102	;'f'
  1300  007E9E  74                 	db	116	;'t'
  1301  007E9F  2E                 	db	46
  1302  007EA0  3A                 	db	58	;':'
  1303  007EA1  00                 	db	0
  1304  007EA2                     STR_97:
  1305  007EA2  4D                 	db	77	;'M'
  1306  007EA3  61                 	db	97	;'a'
  1307  007EA4  78                 	db	120	;'x'
  1308  007EA5  2E                 	db	46
  1309  007EA6  20                 	db	32
  1310  007EA7  50                 	db	80	;'P'
  1311  007EA8  41                 	db	65	;'A'
  1312  007EA9  52                 	db	82	;'R'
  1313  007EAA  54                 	db	84	;'T'
  1314  007EAB  49                 	db	73	;'I'
  1315  007EAC  44                 	db	68	;'D'
  1316  007EAD  41                 	db	65	;'A'
  1317  007EAE  3A                 	db	58	;':'
  1318  007EAF  00                 	db	0
  1319  007EB0                     STR_80:
  1320  007EB0  50                 	db	80	;'P'
  1321  007EB1  72                 	db	114	;'r'
  1322  007EB2  69                 	db	105	;'i'
  1323  007EB3  6E                 	db	110	;'n'
  1324  007EB4  63                 	db	99	;'c'
  1325  007EB5  69                 	db	105	;'i'
  1326  007EB6  70                 	db	112	;'p'
  1327  007EB7  61                 	db	97	;'a'
  1328  007EB8  6C                 	db	108	;'l'
  1329  007EB9  3A                 	db	58	;':'
  1330  007EBA  20                 	db	32
  1331  007EBB  25                 	db	37
  1332  007EBC  73                 	db	115	;'s'
  1333  007EBD  00                 	db	0
  1334  007EBE                     STR_83:
  1335  007EBE  43                 	db	67	;'C'
  1336  007EBF  6F                 	db	111	;'o'
  1337  007EC0  6D                 	db	109	;'m'
  1338  007EC1  62                 	db	98	;'b'
  1339  007EC2  75                 	db	117	;'u'
  1340  007EC3  73                 	db	115	;'s'
  1341  007EC4  74                 	db	116	;'t'
  1342  007EC5  61                 	db	97	;'a'
  1343  007EC6  6F                 	db	111	;'o'
  1344  007EC7  3A                 	db	58	;':'
  1345  007EC8  20                 	db	32
  1346  007EC9  25                 	db	37
  1347  007ECA  73                 	db	115	;'s'
  1348  007ECB  00                 	db	0
  1349  007ECC                     STR_94:
  1350  007ECC  20                 	db	32
  1351  007ECD  61                 	db	97	;'a'
  1352  007ECE  67                 	db	103	;'g'
  1353  007ECF  75                 	db	117	;'u'
  1354  007ED0  61                 	db	97	;'a'
  1355  007ED1  72                 	db	114	;'r'
  1356  007ED2  64                 	db	100	;'d'
  1357  007ED3  65                 	db	101	;'e'
  1358  007ED4  2E                 	db	46
  1359  007ED5  2E                 	db	46
  1360  007ED6  2E                 	db	46
  1361  007ED7  20                 	db	32
  1362  007ED8  00                 	db	0
  1363  007ED9                     STR_10:
  1364  007ED9  41                 	db	65	;'A'
  1365  007EDA  54                 	db	84	;'T'
  1366  007EDB  2B                 	db	43
  1367  007EDC  43                 	db	67	;'C'
  1368  007EDD  4D                 	db	77	;'M'
  1369  007EDE  47                 	db	71	;'G'
  1370  007EDF  46                 	db	70	;'F'
  1371  007EE0  3D                 	db	61	;'='
  1372  007EE1  31                 	db	49	;'1'
  1373  007EE2  0D                 	db	13
  1374  007EE3  0A                 	db	10
  1375  007EE4  00                 	db	0
  1376  007EE5                     STR_15:
  1377  007EE5  41                 	db	65	;'A'
  1378  007EE6  75                 	db	117	;'u'
  1379  007EE7  67                 	db	103	;'g'
  1380  007EE8  20                 	db	32
  1381  007EE9  32                 	db	50	;'2'
  1382  007EEA  35                 	db	53	;'5'
  1383  007EEB  20                 	db	32
  1384  007EEC  32                 	db	50	;'2'
  1385  007EED  30                 	db	48	;'0'
  1386  007EEE  31                 	db	49	;'1'
  1387  007EEF  39                 	db	57	;'9'
  1388  007EF0  00                 	db	0
  1389  007EF1                     STR_99:
  1390  007EF1  4D                 	db	77	;'M'
  1391  007EF2  61                 	db	97	;'a'
  1392  007EF3  78                 	db	120	;'x'
  1393  007EF4  2E                 	db	46
  1394  007EF5  20                 	db	32
  1395  007EF6  54                 	db	84	;'T'
  1396  007EF7  45                 	db	69	;'E'
  1397  007EF8  53                 	db	83	;'S'
  1398  007EF9  54                 	db	84	;'T'
  1399  007EFA  45                 	db	69	;'E'
  1400  007EFB  3A                 	db	58	;':'
  1401  007EFC  00                 	db	0
  1402  007EFD                     STR_121:
  1403  007EFD  49                 	db	73	;'I'
  1404  007EFE  4E                 	db	78	;'N'
  1405  007EFF  46                 	db	70	;'F'
  1406  007F00  4F                 	db	79	;'O'
  1407  007F01  20                 	db	32
  1408  007F02  56                 	db	86	;'V'
  1409  007F03  45                 	db	69	;'E'
  1410  007F04  52                 	db	82	;'R'
  1411  007F05  53                 	db	83	;'S'
  1412  007F06  41                 	db	65	;'A'
  1413  007F07  4F                 	db	79	;'O'
  1414  007F08  00                 	db	0
  1415  007F09                     STR_89:
  1416  007F09  76                 	db	118	;'v'
  1417  007F0A  65                 	db	101	;'e'
  1418  007F0B  72                 	db	114	;'r'
  1419  007F0C  73                 	db	115	;'s'
  1420  007F0D  61                 	db	97	;'a'
  1421  007F0E  6F                 	db	111	;'o'
  1422  007F0F  20                 	db	32
  1423  007F10  2D                 	db	45
  1424  007F11  20                 	db	32
  1425  007F12  25                 	db	37
  1426  007F13  73                 	db	115	;'s'
  1427  007F14  00                 	db	0
  1428  007F15                     STR_35:
  1429  007F15  41                 	db	65	;'A'
  1430  007F16  54                 	db	84	;'T'
  1431  007F17  44                 	db	68	;'D'
  1432  007F18  20                 	db	32
  1433  007F19  30                 	db	48	;'0'
  1434  007F1A  25                 	db	37
  1435  007F1B  73                 	db	115	;'s'
  1436  007F1C  3B                 	db	59	;';'
  1437  007F1D  0D                 	db	13
  1438  007F1E  0A                 	db	10
  1439  007F1F  00                 	db	0
  1440  007F20  74                 	db	116	;'t'
  1441  007F21  65                 	db	101	;'e'
  1442  007F22  74                 	db	116	;'t'
  1443  007F23  61                 	db	97	;'a'
  1444  007F24  70                 	db	112	;'p'
  1445  007F25  61                 	db	97	;'a'
  1446  007F26  20                 	db	32
  1447  007F27  25                 	db	37
  1448  007F28  64                 	db	100	;'d'
  1449  007F29  20                 	db	32
  1450  007F2A  00                 	db	0
  1451  007F2B                     STR_79:
  1452  007F2B  23                 	db	35
  1453  007F2C  25                 	db	37
  1454  007F2D  30                 	db	48	;'0'
  1455  007F2E  32                 	db	50	;'2'
  1456  007F2F  64                 	db	100	;'d'
  1457  007F30  2F                 	db	47
  1458  007F31  25                 	db	37
  1459  007F32  30                 	db	48	;'0'
  1460  007F33  32                 	db	50	;'2'
  1461  007F34  64                 	db	100	;'d'
  1462  007F35  00                 	db	0
  1463  007F36                     STR_102:
  1464  007F36  47                 	db	71	;'G'
  1465  007F37  45                 	db	69	;'E'
  1466  007F38  52                 	db	82	;'R'
  1467  007F39  41                 	db	65	;'A'
  1468  007F3A  4C                 	db	76	;'L'
  1469  007F3B  20                 	db	32
  1470  007F3C  3A                 	db	58	;':'
  1471  007F3D  20                 	db	32
  1472  007F3E  25                 	db	37
  1473  007F3F  73                 	db	115	;'s'
  1474  007F40  00                 	db	0
  1475  007F41                     STR_45:
  1476  007F41  4A                 	db	74	;'J'
  1477  007F42  4F                 	db	79	;'O'
  1478  007F43  4B                 	db	75	;'K'
  1479  007F44  45                 	db	69	;'E'
  1480  007F45  59                 	db	89	;'Y'
  1481  007F46  20                 	db	32
  1482  007F47  3A                 	db	58	;':'
  1483  007F48  20                 	db	32
  1484  007F49  25                 	db	37
  1485  007F4A  73                 	db	115	;'s'
  1486  007F4B  00                 	db	0
  1487  007F4C                     STR_72:
  1488  007F4C  41                 	db	65	;'A'
  1489  007F4D  54                 	db	84	;'T'
  1490  007F4E  49                 	db	73	;'I'
  1491  007F4F  56                 	db	86	;'V'
  1492  007F50  41                 	db	65	;'A'
  1493  007F51  52                 	db	82	;'R'
  1494  007F52  3A                 	db	58	;':'
  1495  007F53  20                 	db	32
  1496  007F54  25                 	db	37
  1497  007F55  73                 	db	115	;'s'
  1498  007F56  00                 	db	0
  1499  007F57                     STR_115:
  1500  007F57  44                 	db	68	;'D'
  1501  007F58  41                 	db	65	;'A'
  1502  007F59  54                 	db	84	;'T'
  1503  007F5A  41                 	db	65	;'A'
  1504  007F5B  2F                 	db	47
  1505  007F5C  48                 	db	72	;'H'
  1506  007F5D  4F                 	db	79	;'O'
  1507  007F5E  52                 	db	82	;'R'
  1508  007F5F  41                 	db	65	;'A'
  1509  007F60  00                 	db	0
  1510  007F61                     STR_120:
  1511  007F61  44                 	db	68	;'D'
  1512  007F62  41                 	db	65	;'A'
  1513  007F63  54                 	db	84	;'T'
  1514  007F64  41                 	db	65	;'A'
  1515  007F65  4C                 	db	76	;'L'
  1516  007F66  4F                 	db	79	;'O'
  1517  007F67  47                 	db	71	;'G'
  1518  007F68  45                 	db	69	;'E'
  1519  007F69  52                 	db	82	;'R'
  1520  007F6A  00                 	db	0
  1521  007F6B                     STR_118:
  1522  007F6B  54                 	db	84	;'T'
  1523  007F6C  45                 	db	69	;'E'
  1524  007F6D  4C                 	db	76	;'L'
  1525  007F6E  45                 	db	69	;'E'
  1526  007F6F  46                 	db	70	;'F'
  1527  007F70  4F                 	db	79	;'O'
  1528  007F71  4E                 	db	78	;'N'
  1529  007F72  45                 	db	69	;'E'
  1530  007F73  53                 	db	83	;'S'
  1531  007F74  00                 	db	0
  1532  007F75  74                 	db	116	;'t'
  1533  007F76  73                 	db	115	;'s'
  1534  007F77  69                 	db	105	;'i'
  1535  007F78  6E                 	db	110	;'n'
  1536  007F79  61                 	db	97	;'a'
  1537  007F7A  6C                 	db	108	;'l'
  1538  007F7B  20                 	db	32
  1539  007F7C  25                 	db	37
  1540  007F7D  64                 	db	100	;'d'
  1541  007F7E  00                 	db	0
  1542  007F7F                     STR_76:
  1543  007F7F  4A                 	db	74	;'J'
  1544  007F80  6F                 	db	111	;'o'
  1545  007F81  6B                 	db	107	;'k'
  1546  007F82  65                 	db	101	;'e'
  1547  007F83  79                 	db	121	;'y'
  1548  007F84  3A                 	db	58	;':'
  1549  007F85  20                 	db	32
  1550  007F86  25                 	db	37
  1551  007F87  73                 	db	115	;'s'
  1552  007F88  00                 	db	0
  1553  007F89                     STR_3:
  1554  007F89  41                 	db	65	;'A'
  1555  007F8A  54                 	db	84	;'T'
  1556  007F8B  2B                 	db	43
  1557  007F8C  43                 	db	67	;'C'
  1558  007F8D  53                 	db	83	;'S'
  1559  007F8E  51                 	db	81	;'Q'
  1560  007F8F  0D                 	db	13
  1561  007F90  0A                 	db	10
  1562  007F91  00                 	db	0
  1563  007F92  65                 	db	101	;'e'
  1564  007F93  74                 	db	116	;'t'
  1565  007F94  61                 	db	97	;'a'
  1566  007F95  70                 	db	112	;'p'
  1567  007F96  61                 	db	97	;'a'
  1568  007F97  20                 	db	32
  1569  007F98  25                 	db	37
  1570  007F99  64                 	db	100	;'d'
  1571  007F9A  00                 	db	0
  1572  007F9B                     STR_86:
  1573  007F9B  54                 	db	84	;'T'
  1574  007F9C  45                 	db	69	;'E'
  1575  007F9D  43                 	db	67	;'C'
  1576  007F9E  48                 	db	72	;'H'
  1577  007F9F  4E                 	db	78	;'N'
  1578  007FA0  4F                 	db	79	;'O'
  1579  007FA1  57                 	db	87	;'W'
  1580  007FA2  00                 	db	0
  1581  007FA3                     STR_123:
  1582  007FA3  28                 	db	40
  1583  007FA4  6E                 	db	110	;'n'
  1584  007FA5  75                 	db	117	;'u'
  1585  007FA6  6C                 	db	108	;'l'
  1586  007FA7  6C                 	db	108	;'l'
  1587  007FA8  29                 	db	41
  1588  007FA9  00                 	db	0
  1589  007FAA                     STR_21:
  1590  007FAA  41                 	db	65	;'A'
  1591  007FAB  54                 	db	84	;'T'
  1592  007FAC  48                 	db	72	;'H'
  1593  007FAD  30                 	db	48	;'0'
  1594  007FAE  0D                 	db	13
  1595  007FAF  0A                 	db	10
  1596  007FB0  00                 	db	0
  1597  007FB1                     STR_6:
  1598  007FB1  2B                 	db	43
  1599  007FB2  43                 	db	67	;'C'
  1600  007FB3  53                 	db	83	;'S'
  1601  007FB4  51                 	db	81	;'Q'
  1602  007FB5  3A                 	db	58	;':'
  1603  007FB6  20                 	db	32
  1604  007FB7  00                 	db	0
  1605  007FB8                     STR_91:
  1606  007FB8  54                 	db	84	;'T'
  1607  007FB9  31                 	db	49	;'1'
  1608  007FBA  3A                 	db	58	;':'
  1609  007FBB  20                 	db	32
  1610  007FBC  25                 	db	37
  1611  007FBD  73                 	db	115	;'s'
  1612  007FBE  00                 	db	0
  1613  007FBF                     STR_92:
  1614  007FBF  54                 	db	84	;'T'
  1615  007FC0  32                 	db	50	;'2'
  1616  007FC1  3A                 	db	58	;':'
  1617  007FC2  20                 	db	32
  1618  007FC3  25                 	db	37
  1619  007FC4  73                 	db	115	;'s'
  1620  007FC5  00                 	db	0
  1621  007FC6                     STR_67:
  1622  007FC6  48                 	db	72	;'H'
  1623  007FC7  4F                 	db	79	;'O'
  1624  007FC8  52                 	db	82	;'R'
  1625  007FC9  41                 	db	65	;'A'
  1626  007FCA  3A                 	db	58	;':'
  1627  007FCB  00                 	db	0
  1628  007FCC                     STR_65:
  1629  007FCC  44                 	db	68	;'D'
  1630  007FCD  41                 	db	65	;'A'
  1631  007FCE  54                 	db	84	;'T'
  1632  007FCF  41                 	db	65	;'A'
  1633  007FD0  3A                 	db	58	;':'
  1634  007FD1  00                 	db	0
  1635  007FD2                     STR_28:
  1636  007FD2  46                 	db	70	;'F'
  1637  007FD3  41                 	db	65	;'A'
  1638  007FD4  4C                 	db	76	;'L'
  1639  007FD5  48                 	db	72	;'H'
  1640  007FD6  41                 	db	65	;'A'
  1641  007FD7  00                 	db	0
  1642  007FD8                     STR_17:
  1643  007FD8  45                 	db	69	;'E'
  1644  007FD9  52                 	db	82	;'R'
  1645  007FDA  52                 	db	82	;'R'
  1646  007FDB  4F                 	db	79	;'O'
  1647  007FDC  52                 	db	82	;'R'
  1648  007FDD  00                 	db	0
  1649  007FDE                     STR_4:
  1650  007FDE  41                 	db	65	;'A'
  1651  007FDF  54                 	db	84	;'T'
  1652  007FE0  0D                 	db	13
  1653  007FE1  0A                 	db	10
  1654  007FE2  00                 	db	0
  1655  007FE3                     STR_47:
  1656  007FE3  45                 	db	69	;'E'
  1657  007FE4  52                 	db	82	;'R'
  1658  007FE5  52                 	db	82	;'R'
  1659  007FE6  4F                 	db	79	;'O'
  1660  007FE7  00                 	db	0
  1661  007FE8                     STR_1:
  1662  007FE8  25                 	db	37
  1663  007FE9  73                 	db	115	;'s'
  1664  007FEA  25                 	db	37
  1665  007FEB  63                 	db	99	;'c'
  1666  007FEC  00                 	db	0
  1667  007FED                     STR_98:
  1668  007FED  25                 	db	37
  1669  007FEE  33                 	db	51	;'3'
  1670  007FEF  64                 	db	100	;'d'
  1671  007FF0  73                 	db	115	;'s'
  1672  007FF1  00                 	db	0
  1673  007FF2                     STR_74:
  1674  007FF2  53                 	db	83	;'S'
  1675  007FF3  69                 	db	105	;'i'
  1676  007FF4  6D                 	db	109	;'m'
  1677  007FF5  00                 	db	0
  1678  007FF6                     STR_73:
  1679  007FF6  4E                 	db	78	;'N'
  1680  007FF7  61                 	db	97	;'a'
  1681  007FF8  6F                 	db	111	;'o'
  1682  007FF9  00                 	db	0
  1683  007FFA                     STR_5:
  1684  007FFA  4F                 	db	79	;'O'
  1685  007FFB  4B                 	db	75	;'K'
  1686  007FFC  00                 	db	0
  1687  007FFD                     STR_13:
  1688  007FFD  3E                 	db	62	;'>'
  1689  007FFE  00                 	db	0
  1690  0000                     
  1691                           ; #config settings
  1692  007FFF  00                 	db	0	; dummy byte at the end
  1693  0000                     
  1694                           	psect	cinit
  1695  007704                     __pcinit:
  1696                           	opt stack 0
  1697  007704                     start_initialization:
  1698                           	opt stack 0
  1699  007704                     __initialization:
  1700                           	opt stack 0
  1701                           
  1702                           ; Initialize objects allocated to BANK1 (4 bytes)
  1703                           ; load TBLPTR registers with __pidataBANK1
  1704  007704  0EA0               	movlw	low __pidataBANK1
  1705  007706  6EF6               	movwf	tblptrl,c
  1706  007708  0E6C               	movlw	high __pidataBANK1
  1707  00770A  6EF7               	movwf	tblptrh,c
  1708  00770C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1709  00770E  6EF8               	movwf	tblptru,c
  1710  007710  EE01  F0BC         	lfsr	0,__pdataBANK1
  1711  007714  EE10 F004          	lfsr	1,4
  1712  007718                     copy_data0:
  1713  007718  0009               	tblrd		*+
  1714  00771A  CFF5 FFEE          	movff	tablat,postinc0
  1715  00771E  50E5               	movf	postdec1,w,c
  1716  007720  50E1               	movf	fsr1l,w,c
  1717  007722  E1FA               	bnz	copy_data0
  1718                           
  1719                           ; Initialize objects allocated to BANK0 (8 bytes)
  1720                           ; load TBLPTR registers with __pidataBANK0
  1721  007724  0EA4               	movlw	low __pidataBANK0
  1722  007726  6EF6               	movwf	tblptrl,c
  1723  007728  0E6C               	movlw	high __pidataBANK0
  1724  00772A  6EF7               	movwf	tblptrh,c
  1725  00772C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1726  00772E  6EF8               	movwf	tblptru,c
  1727  007730  EE00  F0F8         	lfsr	0,__pdataBANK0
  1728  007734  EE10 F008          	lfsr	1,8
  1729  007738                     copy_data1:
  1730  007738  0009               	tblrd		*+
  1731  00773A  CFF5 FFEE          	movff	tablat,postinc0
  1732  00773E  50E5               	movf	postdec1,w,c
  1733  007740  50E1               	movf	fsr1l,w,c
  1734  007742  E1FA               	bnz	copy_data1
  1735                           
  1736                           ; Clear objects allocated to BANK1 (188 bytes)
  1737  007744  EE01  F000         	lfsr	0,__pbssBANK1
  1738  007748  0EBC               	movlw	188
  1739  00774A                     clear_0:
  1740  00774A  6AEE               	clrf	postinc0,c
  1741  00774C  06E8               	decf	wreg,f,c
  1742  00774E  E1FD               	bnz	clear_0
  1743                           
  1744                           ; Clear objects allocated to BANK0 (31 bytes)
  1745  007750  EE00  F0D9         	lfsr	0,__pbssBANK0
  1746  007754  0E1F               	movlw	31
  1747  007756                     clear_1:
  1748  007756  6AEE               	clrf	postinc0,c
  1749  007758  06E8               	decf	wreg,f,c
  1750  00775A  E1FD               	bnz	clear_1
  1751                           
  1752                           ; Clear objects allocated to COMRAM (57 bytes)
  1753  00775C  EE00  F044         	lfsr	0,__pbssCOMRAM
  1754  007760  0E39               	movlw	57
  1755  007762                     clear_2:
  1756  007762  6AEE               	clrf	postinc0,c
  1757  007764  06E8               	decf	wreg,f,c
  1758  007766  E1FD               	bnz	clear_2
  1759  007768                     end_of_initialization:
  1760                           	opt stack 0
  1761  007768                     __end_of__initialization:
  1762                           	opt stack 0
  1763  007768  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1764  00776A  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1765  00776C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1766  00776E  6EF8               	movwf	tblptru,c
  1767  007770  0100               	movlb	0
  1768  007772  EFE4  F006         	goto	_main	;jump to C main() function
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           
  1778                           	psect	bssCOMRAM
  1779  000044                     __pbssCOMRAM:
  1780                           	opt stack 0
  1781  000044                     _shift:
  1782                           	opt stack 0
  1783  000044                     	ds	8
  1784  00004C                     __tensao:
  1785                           	opt stack 0
  1786  00004C                     	ds	3
  1787  00004F                     _horimetro:
  1788                           	opt stack 0
  1789  00004F                     	ds	2
  1790  000051                     _etapaComunicacao:
  1791                           	opt stack 0
  1792  000051                     	ds	2
  1793  000053                     _dtl_posi_visualizar:
  1794                           	opt stack 0
  1795  000053                     	ds	1
  1796  000054                     _totalLogs:
  1797                           	opt stack 0
  1798  000054                     	ds	1
  1799  000055                     _dtl_carregar_log:
  1800                           	opt stack 0
  1801  000055                     	ds	1
  1802  000056                     _dtl_estacionaria:
  1803                           	opt stack 0
  1804  000056                     	ds	1
  1805  000057                     _dtl_principal:
  1806                           	opt stack 0
  1807  000057                     	ds	1
  1808  000058                     _dtl_jockey:
  1809                           	opt stack 0
  1810  000058                     	ds	1
  1811  000059                     _dtl_min:
  1812                           	opt stack 0
  1813  000059                     	ds	1
  1814  00005A                     _dtl_hora:
  1815                           	opt stack 0
  1816  00005A                     	ds	1
  1817  00005B                     _dtl_ano:
  1818                           	opt stack 0
  1819  00005B                     	ds	1
  1820  00005C                     _dtl_mes:
  1821                           	opt stack 0
  1822  00005C                     	ds	1
  1823  00005D                     _dtl_dia:
  1824                           	opt stack 0
  1825  00005D                     	ds	1
  1826  00005E                     __b_ok:
  1827                           	opt stack 0
  1828  00005E                     	ds	1
  1829  00005F                     _flag_b_ok:
  1830                           	opt stack 0
  1831  00005F                     	ds	1
  1832  000060                     __b_mais:
  1833                           	opt stack 0
  1834  000060                     	ds	1
  1835  000061                     _flag_b_mais:
  1836                           	opt stack 0
  1837  000061                     	ds	1
  1838  000062                     __b_menos:
  1839                           	opt stack 0
  1840  000062                     	ds	1
  1841  000063                     _flag_b_menos:
  1842                           	opt stack 0
  1843  000063                     	ds	1
  1844  000064                     __b_esc:
  1845                           	opt stack 0
  1846  000064                     	ds	1
  1847  000065                     _flag_b_esc:
  1848                           	opt stack 0
  1849  000065                     	ds	1
  1850  000066                     _cbf:
  1851                           	opt stack 0
  1852  000066                     	ds	1
  1853  000067                     _blinkk:
  1854                           	opt stack 0
  1855  000067                     	ds	1
  1856  000068                     _ajst_rtc:
  1857                           	opt stack 0
  1858  000068                     	ds	1
  1859  000069                     _tela_menu_posi:
  1860                           	opt stack 0
  1861  000069                     	ds	1
  1862  00006A                     _sub_menu_posi:
  1863                           	opt stack 0
  1864  00006A                     	ds	1
  1865  00006B                     _tel_selecionado:
  1866                           	opt stack 0
  1867  00006B                     	ds	1
  1868  00006C                     _tempo_limite_partida:
  1869                           	opt stack 0
  1870  00006C                     	ds	1
  1871  00006D                     _tempo_partida:
  1872                           	opt stack 0
  1873  00006D                     	ds	1
  1874  00006E                     _qtd_leitura:
  1875                           	opt stack 0
  1876  00006E                     	ds	1
  1877  00006F                     __sec_aux:
  1878                           	opt stack 0
  1879  00006F                     	ds	1
  1880  000070                     __sec_partida:
  1881                           	opt stack 0
  1882  000070                     	ds	1
  1883  000071                     _base_sec:
  1884                           	opt stack 0
  1885  000071                     	ds	1
  1886  000072                     _etapaTesteBombas:
  1887                           	opt stack 0
  1888  000072                     	ds	1
  1889  000073                     _flagErroTransdutor:
  1890                           	opt stack 0
  1891  000073                     	ds	1
  1892  000074                     _flagTexto:
  1893                           	opt stack 0
  1894  000074                     	ds	1
  1895  000075                     _timerTrocarTextoLcd:
  1896                           	opt stack 0
  1897  000075                     	ds	1
  1898  000076                     _rtc:
  1899                           	opt stack 0
  1900  000076                     	ds	7
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	bssBANK0
  1911  0000D9                     __pbssBANK0:
  1912                           	opt stack 0
  1913  0000D9                     _timerTesteBombas:
  1914                           	opt stack 0
  1915  0000D9                     	ds	2
  1916  0000DB                     _ajust_tel:
  1917                           	opt stack 0
  1918  0000DB                     	ds	1
  1919  0000DC                     _tel_posi:
  1920                           	opt stack 0
  1921  0000DC                     	ds	1
  1922  0000DD                     __menu_posi:
  1923                           	opt stack 0
  1924  0000DD                     	ds	1
  1925  0000DE                     _menu_posi:
  1926                           	opt stack 0
  1927  0000DE                     	ds	1
  1928  0000DF                     _option_posi:
  1929                           	opt stack 0
  1930  0000DF                     	ds	1
  1931  0000E0                     _sp_estacionaria:
  1932                           	opt stack 0
  1933  0000E0                     	ds	1
  1934  0000E1                     _sp_principal:
  1935                           	opt stack 0
  1936  0000E1                     	ds	1
  1937  0000E2                     _sp_jockey:
  1938                           	opt stack 0
  1939  0000E2                     	ds	1
  1940  0000E3                     _sp_pressao_rede:
  1941                           	opt stack 0
  1942  0000E3                     	ds	1
  1943  0000E4                     _tempo_limite_teste_estacionaria:
  1944                           	opt stack 0
  1945  0000E4                     	ds	1
  1946  0000E5                     _tempo_limite_estacionaria:
  1947                           	opt stack 0
  1948  0000E5                     	ds	1
  1949  0000E6                     _horario_de_teste:
  1950                           	opt stack 0
  1951  0000E6                     	ds	1
  1952  0000E7                     _dias_restante_teste:
  1953                           	opt stack 0
  1954  0000E7                     	ds	1
  1955  0000E8                     _intervalo_teste_dia:
  1956                           	opt stack 0
  1957  0000E8                     	ds	1
  1958  0000E9                     __ano:
  1959                           	opt stack 0
  1960  0000E9                     	ds	1
  1961  0000EA                     __mes:
  1962                           	opt stack 0
  1963  0000EA                     	ds	1
  1964  0000EB                     __dia:
  1965                           	opt stack 0
  1966  0000EB                     	ds	1
  1967  0000EC                     __hor:
  1968                           	opt stack 0
  1969  0000EC                     	ds	1
  1970  0000ED                     __min:
  1971                           	opt stack 0
  1972  0000ED                     	ds	1
  1973  0000EE                     __sec:
  1974                           	opt stack 0
  1975  0000EE                     	ds	1
  1976  0000EF                     _habilitaTesteAutomatico:
  1977                           	opt stack 0
  1978  0000EF                     	ds	1
  1979  0000F0                     _flagEstacionariaLigada:
  1980                           	opt stack 0
  1981  0000F0                     	ds	1
  1982  0000F1                     _executandoTeste:
  1983                           	opt stack 0
  1984  0000F1                     	ds	1
  1985  0000F2                     _ocorrendoIncendio:
  1986                           	opt stack 0
  1987  0000F2                     	ds	1
  1988  0000F3                     _codigoErro:
  1989                           	opt stack 0
  1990  0000F3                     	ds	1
  1991  0000F4                     _gsmOcupado:
  1992                           	opt stack 0
  1993  0000F4                     	ds	1
  1994  0000F5                     _timerEtapaComunicacao:
  1995                           	opt stack 0
  1996  0000F5                     	ds	1
  1997  0000F6                     _timerReenvioSMS:
  1998                           	opt stack 0
  1999  0000F6                     	ds	1
  2000  0000F7                     _telefoneSelecionado:
  2001                           	opt stack 0
  2002  0000F7                     	ds	1
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           postinc0	equ	0xFEE
  2008                           wreg	equ	0xFE8
  2009                           postdec1	equ	0xFE5
  2010                           fsr1l	equ	0xFE1
  2011                           
  2012                           	psect	dataBANK0
  2013  0000F8                     __pdataBANK0:
  2014                           	opt stack 0
  2015  0000F8                     _pressao:
  2016                           	opt stack 0
  2017  0000F8                     	ds	2
  2018  0000FA                     _dtl_posicao:
  2019                           	opt stack 0
  2020  0000FA                     	ds	1
  2021  0000FB                     _status_estacionaria:
  2022                           	opt stack 0
  2023  0000FB                     	ds	1
  2024  0000FC                     _status_principal:
  2025                           	opt stack 0
  2026  0000FC                     	ds	1
  2027  0000FD                     _status_jockey:
  2028                           	opt stack 0
  2029  0000FD                     	ds	1
  2030  0000FE                     _timerVerificarSinal:
  2031                           	opt stack 0
  2032  0000FE                     	ds	1
  2033  0000FF                     _intensidadeSinal:
  2034                           	opt stack 0
  2035  0000FF                     	ds	1
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1l	equ	0xFE1
  2044                           
  2045                           	psect	bssBANK1
  2046  000100                     __pbssBANK1:
  2047                           	opt stack 0
  2048  000100                     _bufferSerial:
  2049                           	opt stack 0
  2050  000100                     	ds	60
  2051  00013C                     _line4:
  2052                           	opt stack 0
  2053  00013C                     	ds	21
  2054  000151                     _line3:
  2055                           	opt stack 0
  2056  000151                     	ds	21
  2057  000166                     _line2:
  2058                           	opt stack 0
  2059  000166                     	ds	21
  2060  00017B                     _line1:
  2061                           	opt stack 0
  2062  00017B                     	ds	21
  2063  000190                     _bufferAUX:
  2064                           	opt stack 0
  2065  000190                     	ds	20
  2066  0001A4                     _tel2:
  2067                           	opt stack 0
  2068  0001A4                     	ds	12
  2069  0001B0                     _tel1:
  2070                           	opt stack 0
  2071  0001B0                     	ds	12
  2072                           tblptru	equ	0xFF8
  2073                           tblptrh	equ	0xFF7
  2074                           tblptrl	equ	0xFF6
  2075                           tablat	equ	0xFF5
  2076                           postinc0	equ	0xFEE
  2077                           wreg	equ	0xFE8
  2078                           postdec1	equ	0xFE5
  2079                           fsr1l	equ	0xFE1
  2080                           
  2081                           	psect	dataBANK1
  2082  0001BC                     __pdataBANK1:
  2083                           	opt stack 0
  2084  0001BC                     intToFloatStr@F2544:
  2085                           	opt stack 0
  2086  0001BC                     	ds	4
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1l	equ	0xFE1
  2095                           
  2096                           	psect	cstackBANK0
  2097  000080                     __pcstackBANK0:
  2098                           	opt stack 0
  2099  000080                     ??_isdigit:
  2100  000080                     ??_setShiftREG:
  2101  000080                     ??_I2C_Wait:
  2102  000080                     ?_strlen:
  2103                           	opt stack 0
  2104  000080                     ?_strchr:
  2105                           	opt stack 0
  2106  000080                     ?___wmul:
  2107                           	opt stack 0
  2108  000080                     ?___awdiv:
  2109                           	opt stack 0
  2110  000080                     ?___awmod:
  2111                           	opt stack 0
  2112  000080                     ?___lwdiv:
  2113                           	opt stack 0
  2114  000080                     ?___lldiv:
  2115                           	opt stack 0
  2116  000080                     putch@c:
  2117                           	opt stack 0
  2118  000080                     clearShiftREG@i:
  2119                           	opt stack 0
  2120  000080                     btPress@bt:
  2121                           	opt stack 0
  2122  000080                     Lcd_Port@a:
  2123                           	opt stack 0
  2124  000080                     BCDtoDEC@val:
  2125                           	opt stack 0
  2126  000080                     writeChar@hex:
  2127                           	opt stack 0
  2128  000080                     blink@line:
  2129                           	opt stack 0
  2130  000080                     delay@x:
  2131                           	opt stack 0
  2132  000080                     ___wmul@multiplier:
  2133                           	opt stack 0
  2134  000080                     ___awdiv@dividend:
  2135                           	opt stack 0
  2136  000080                     ___awmod@dividend:
  2137                           	opt stack 0
  2138  000080                     ___lwdiv@dividend:
  2139                           	opt stack 0
  2140  000080                     memset@p1:
  2141                           	opt stack 0
  2142  000080                     strlen@s:
  2143                           	opt stack 0
  2144  000080                     strchr@ptr:
  2145                           	opt stack 0
  2146  000080                     ___lldiv@dividend:
  2147                           	opt stack 0
  2148                           
  2149                           ; 4 bytes @ 0x0
  2150  000080                     	ds	1
  2151  000081                     ??_Lcd_Cmd:
  2152  000081                     ?_I2C_Read:
  2153                           	opt stack 0
  2154  000081                     setShiftREG@i:
  2155                           	opt stack 0
  2156  000081                     Lcd_Write_Char@tempp:
  2157                           	opt stack 0
  2158  000081                     _isdigit$1866:
  2159                           	opt stack 0
  2160  000081                     I2C_Read@a:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x1
  2164  000081                     	ds	1
  2165  000082                     ??_delay:
  2166  000082                     ??_strlen:
  2167  000082                     Lcd_Cmd@a:
  2168                           	opt stack 0
  2169  000082                     Lcd_Write_Char@y:
  2170                           	opt stack 0
  2171  000082                     blink@start:
  2172                           	opt stack 0
  2173  000082                     isdigit@c:
  2174                           	opt stack 0
  2175  000082                     ___wmul@multiplicand:
  2176                           	opt stack 0
  2177  000082                     ___awdiv@divisor:
  2178                           	opt stack 0
  2179  000082                     ___awmod@divisor:
  2180                           	opt stack 0
  2181  000082                     ___lwdiv@divisor:
  2182                           	opt stack 0
  2183  000082                     memset@c:
  2184                           	opt stack 0
  2185  000082                     strchr@chr:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x2
  2189  000082                     	ds	1
  2190  000083                     ??_Lcd_Init:
  2191  000083                     partidaBombaEstacionaria@acao:
  2192                           	opt stack 0
  2193  000083                     Lcd_Set_Cursor@b:
  2194                           	opt stack 0
  2195  000083                     Lcd_Write_Char@a:
  2196                           	opt stack 0
  2197  000083                     blink@end:
  2198                           	opt stack 0
  2199  000083                     I2C_Read@temp:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x3
  2203  000083                     	ds	1
  2204  000084                     ??_criarCaracteresCGRAM:
  2205  000084                     Lcd_Set_Cursor@a:
  2206                           	opt stack 0
  2207  000084                     blink@i:
  2208                           	opt stack 0
  2209  000084                     ___awdiv@counter:
  2210                           	opt stack 0
  2211  000084                     ___awmod@counter:
  2212                           	opt stack 0
  2213  000084                     Lcd_Write_String@a:
  2214                           	opt stack 0
  2215  000084                     ___wmul@product:
  2216                           	opt stack 0
  2217  000084                     ___lwdiv@quotient:
  2218                           	opt stack 0
  2219  000084                     memset@n:
  2220                           	opt stack 0
  2221  000084                     strlen@cp:
  2222                           	opt stack 0
  2223  000084                     ___lldiv@divisor:
  2224                           	opt stack 0
  2225                           
  2226                           ; 4 bytes @ 0x4
  2227  000084                     	ds	1
  2228  000085                     Lcd_Set_Cursor@z:
  2229                           	opt stack 0
  2230  000085                     ___awdiv@sign:
  2231                           	opt stack 0
  2232  000085                     ___awmod@sign:
  2233                           	opt stack 0
  2234                           
  2235                           ; 1 bytes @ 0x5
  2236  000085                     	ds	1
  2237  000086                     ?_strncmp:
  2238                           	opt stack 0
  2239  000086                     Lcd_Set_Cursor@y:
  2240                           	opt stack 0
  2241  000086                     Lcd_Write_String@i:
  2242                           	opt stack 0
  2243  000086                     ___lwdiv@counter:
  2244                           	opt stack 0
  2245  000086                     ___awdiv@quotient:
  2246                           	opt stack 0
  2247  000086                     memset@p:
  2248                           	opt stack 0
  2249  000086                     strncmp@s1:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x6
  2253  000086                     	ds	1
  2254  000087                     ?___lwmod:
  2255                           	opt stack 0
  2256  000087                     Lcd_Set_Cursor@temp:
  2257                           	opt stack 0
  2258  000087                     ___lwmod@dividend:
  2259                           	opt stack 0
  2260  000087                     criarCaracteresCGRAM@character:
  2261                           	opt stack 0
  2262                           
  2263                           ; 48 bytes @ 0x7
  2264  000087                     	ds	1
  2265  000088                     DECtoBCD@val:
  2266                           	opt stack 0
  2267  000088                     atualizarLCD@line1:
  2268                           	opt stack 0
  2269  000088                     strncmp@s2:
  2270                           	opt stack 0
  2271  000088                     ___lldiv@quotient:
  2272                           	opt stack 0
  2273                           
  2274                           ; 4 bytes @ 0x8
  2275  000088                     	ds	1
  2276  000089                     DECtoBCD@res:
  2277                           	opt stack 0
  2278  000089                     ___lwmod@divisor:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x9
  2282  000089                     	ds	1
  2283  00008A                     atualizarLCD@line2:
  2284                           	opt stack 0
  2285  00008A                     I2C_Write@d:
  2286                           	opt stack 0
  2287  00008A                     strncmp@len:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0xA
  2291  00008A                     	ds	1
  2292  00008B                     ___lwmod@counter:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0xB
  2296  00008B                     	ds	1
  2297  00008C                     ??_strncmp:
  2298  00008C                     ?__doprnt:
  2299                           	opt stack 0
  2300  00008C                     writeEEPROM_ext@data:
  2301                           	opt stack 0
  2302  00008C                     readEEPROM_ext@adress:
  2303                           	opt stack 0
  2304  00008C                     ___lldiv@counter:
  2305                           	opt stack 0
  2306  00008C                     setDS1307TimeDate@ptrToUserVal:
  2307                           	opt stack 0
  2308  00008C                     getDS1307TimeDate@ptrToUserVal:
  2309                           	opt stack 0
  2310  00008C                     atualizarLCD@line3:
  2311                           	opt stack 0
  2312  00008C                     __doprnt@pb:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0xC
  2316  00008C                     	ds	1
  2317  00008D                     writeEEPROM_ext@adress:
  2318                           	opt stack 0
  2319  00008D                     readEEPROM_ext@data:
  2320                           	opt stack 0
  2321  00008D                     I2C_Master_Init@c:
  2322                           	opt stack 0
  2323                           
  2324                           ; 4 bytes @ 0xD
  2325  00008D                     	ds	1
  2326  00008E                     ??_setDS1307TimeDate:
  2327  00008E                     ??_salvarLOG:
  2328  00008E                     ?_readEEPROM16_ext:
  2329                           	opt stack 0
  2330  00008E                     atualizarLCD@line4:
  2331                           	opt stack 0
  2332  00008E                     __doprnt@f:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0xE
  2336  00008E                     	ds	1
  2337  00008F                     ?_strstr:
  2338                           	opt stack 0
  2339  00008F                     salvarLOG@ultimoLogSalvo:
  2340                           	opt stack 0
  2341  00008F                     strstr@s1:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0xF
  2345  00008F                     	ds	1
  2346  000090                     ??_readEEPROM16_ext:
  2347  000090                     atualizarLCD@i:
  2348                           	opt stack 0
  2349  000090                     __doprnt@ap:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x10
  2353  000090                     	ds	1
  2354  000091                     ??_I2C_Master_Init:
  2355  000091                     readEEPROM16_ext@data:
  2356                           	opt stack 0
  2357  000091                     strstr@s2:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x11
  2361  000091                     	ds	1
  2362  000092                     ??__doprnt:
  2363                           
  2364                           ; 1 bytes @ 0x12
  2365  000092                     	ds	1
  2366  000093                     readEEPROM16_ext@adress:
  2367                           	opt stack 0
  2368  000093                     aguardaBuffer@str:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x13
  2372  000093                     	ds	1
  2373  000094                     lerParametros@verifica_memoria_nova:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x14
  2377  000094                     	ds	1
  2378  000095                     lerParametros@i:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x15
  2382  000095                     	ds	1
  2383  000096                     __doprnt@prec:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x16
  2387  000096                     	ds	1
  2388  000097                     __doprnt@val:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x17
  2392  000097                     	ds	2
  2393  000099                     __doprnt@len:
  2394                           	opt stack 0
  2395                           
  2396                           ; 2 bytes @ 0x19
  2397  000099                     	ds	2
  2398  00009B                     __doprnt@flag:
  2399                           	opt stack 0
  2400                           
  2401                           ; 1 bytes @ 0x1B
  2402  00009B                     	ds	1
  2403  00009C                     __doprnt@cp:
  2404                           	opt stack 0
  2405                           
  2406                           ; 2 bytes @ 0x1C
  2407  00009C                     	ds	2
  2408  00009E                     __doprnt@width:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0x1E
  2412  00009E                     	ds	2
  2413  0000A0                     __doprnt@c:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x20
  2417  0000A0                     	ds	1
  2418  0000A1                     ?_sprintf:
  2419                           	opt stack 0
  2420  0000A1                     ?_printf:
  2421                           	opt stack 0
  2422  0000A1                     printf@f:
  2423                           	opt stack 0
  2424  0000A1                     sprintf@wh:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0x21
  2428  0000A1                     	ds	2
  2429  0000A3                     sprintf@f:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x23
  2433  0000A3                     	ds	12
  2434  0000AF                     sprintf@ap:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0x2F
  2438  0000AF                     	ds	2
  2439  0000B1                     sprintf@pb:
  2440                           	opt stack 0
  2441                           
  2442                           ; 4 bytes @ 0x31
  2443  0000B1                     	ds	4
  2444  0000B5                     ??_tela_testeBombas:
  2445  0000B5                     ??_dataLoger:
  2446  0000B5                     ?_intToFloatStr:
  2447                           	opt stack 0
  2448  0000B5                     ?_getSerial:
  2449                           	opt stack 0
  2450  0000B5                     getSerial@str:
  2451                           	opt stack 0
  2452  0000B5                     printf@ap:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x35
  2456  0000B5                     	ds	2
  2457  0000B7                     getSerial@end:
  2458                           	opt stack 0
  2459  0000B7                     _criarCaracteresCGRAM$1375:
  2460                           	opt stack 0
  2461  0000B7                     _tela_testeBombas$1418:
  2462                           	opt stack 0
  2463  0000B7                     intToFloatStr@end:
  2464                           	opt stack 0
  2465  0000B7                     printf@pb:
  2466                           	opt stack 0
  2467                           
  2468                           ; 4 bytes @ 0x37
  2469  0000B7                     	ds	1
  2470  0000B8                     ??_getSerial:
  2471                           
  2472                           ; 1 bytes @ 0x38
  2473  0000B8                     	ds	1
  2474  0000B9                     criarCaracteresCGRAM@k:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x39
  2478  0000B9                     	ds	1
  2479  0000BA                     criarCaracteresCGRAM@j:
  2480                           	opt stack 0
  2481  0000BA                     getSerial@length:
  2482                           	opt stack 0
  2483  0000BA                     _dataLoger$1437:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x3A
  2487  0000BA                     	ds	1
  2488  0000BB                     ??_comunicarTeste:
  2489  0000BB                     ??_enviaSMS:
  2490  0000BB                     criarCaracteresCGRAM@i:
  2491                           	opt stack 0
  2492  0000BB                     intToFloatStr@conv:
  2493                           	opt stack 0
  2494                           
  2495                           ; 4 bytes @ 0x3B
  2496  0000BB                     	ds	1
  2497  0000BC                     getSerial@i:
  2498                           	opt stack 0
  2499  0000BC                     _dataLoger$1443:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x3C
  2503  0000BC                     	ds	1
  2504  0000BD                     getSerial@ret:
  2505                           	opt stack 0
  2506  0000BD                     _comunicarTeste$1193:
  2507                           	opt stack 0
  2508  0000BD                     _enviaSMS$1208:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x3D
  2512  0000BD                     	ds	1
  2513  0000BE                     _dataLoger$1448:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x3E
  2517  0000BE                     	ds	1
  2518  0000BF                     ??_configuraTelefones:
  2519  0000BF                     ?_atoi:
  2520                           	opt stack 0
  2521  0000BF                     intToFloatStr@valor:
  2522                           	opt stack 0
  2523  0000BF                     _enviaSMS$1221:
  2524                           	opt stack 0
  2525  0000BF                     atoi@s:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x3F
  2529  0000BF                     	ds	1
  2530  0000C0                     dataLoger@logs:
  2531                           	opt stack 0
  2532  0000C0                     intToFloatStr@pr:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x40
  2536  0000C0                     	ds	1
  2537  0000C1                     ??_atoi:
  2538  0000C1                     _enviaSMS$1222:
  2539                           	opt stack 0
  2540  0000C1                     _configuraTelefones$1463:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x41
  2544  0000C1                     	ds	1
  2545  0000C2                     _telaPrincipal$2377:
  2546                           	opt stack 0
  2547  0000C2                     _ajusteSP_Bombas$2378:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x42
  2551  0000C2                     	ds	1
  2552  0000C3                     configuraTelefones@i:
  2553                           	opt stack 0
  2554  0000C3                     atoi@sign:
  2555                           	opt stack 0
  2556  0000C3                     _enviaSMS$1223:
  2557                           	opt stack 0
  2558                           
  2559                           ; 2 bytes @ 0x43
  2560  0000C3                     	ds	1
  2561  0000C4                     atoi@a:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x44
  2565  0000C4                     	ds	1
  2566  0000C5                     _enviaSMS$1228:
  2567                           	opt stack 0
  2568                           
  2569                           ; 2 bytes @ 0x45
  2570  0000C5                     	ds	1
  2571  0000C6                     ??_getSinalSIM800L:
  2572                           
  2573                           ; 1 bytes @ 0x46
  2574  0000C6                     	ds	1
  2575  0000C7                     enviaSMS@tipo:
  2576                           	opt stack 0
  2577                           
  2578                           ; 1 bytes @ 0x47
  2579  0000C7                     	ds	1
  2580  0000C8                     ??_acaoBombas:
  2581  0000C8                     ??_acaoTesteBombas:
  2582  0000C8                     getSinalSIM800L@sinal:
  2583                           	opt stack 0
  2584                           
  2585                           ; 2 bytes @ 0x48
  2586  0000C8                     	ds	5
  2587  0000CD                     _acaoTesteBombas$2376:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x4D
  2591  0000CD                     	ds	2
  2592  0000CF                     _acaoTesteBombas$1292:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x4F
  2596  0000CF                     	ds	2
  2597  0000D1                     _acaoTesteBombas$1308:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x51
  2601  0000D1                     	ds	2
  2602  0000D3                     _acaoTesteBombas$1313:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x53
  2606  0000D3                     	ds	2
  2607  0000D5                     _acaoTesteBombas$1318:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x55
  2611  0000D5                     	ds	2
  2612  0000D7                     acaoTesteBombas@intervalo:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x57
  2616  0000D7                     	ds	1
  2617  0000D8                     acaoTesteBombas@i:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x58
  2621  0000D8                     	ds	1
  2622  0000D9                     tblptru	equ	0xFF8
  2623                           tblptrh	equ	0xFF7
  2624                           tblptrl	equ	0xFF6
  2625                           tablat	equ	0xFF5
  2626                           postinc0	equ	0xFEE
  2627                           wreg	equ	0xFE8
  2628                           postdec1	equ	0xFE5
  2629                           fsr1l	equ	0xFE1
  2630                           
  2631                           ; 1 bytes @ 0x59
  2632                           
  2633                           	psect	cstackCOMRAM
  2634  000001                     __pcstackCOMRAM:
  2635                           	opt stack 0
  2636  000001                     ??i2_I2C_Wait:
  2637  000001                     ?_readADC:
  2638                           	opt stack 0
  2639  000001                     ?___ftpack:
  2640                           	opt stack 0
  2641  000001                     i2BCDtoDEC@val:
  2642                           	opt stack 0
  2643  000001                     i2delay@x:
  2644                           	opt stack 0
  2645  000001                     ___ftpack@arg:
  2646                           	opt stack 0
  2647  000001                     ___ftge@ff1:
  2648                           	opt stack 0
  2649                           
  2650                           ; 3 bytes @ 0x0
  2651  000001                     	ds	1
  2652  000002                     ?i2_I2C_Read:
  2653                           	opt stack 0
  2654  000002                     i2I2C_Write@d:
  2655                           	opt stack 0
  2656  000002                     i2I2C_Read@a:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x1
  2660  000002                     	ds	1
  2661  000003                     ??_readADC:
  2662  000003                     ??i2_delay:
  2663                           
  2664                           ; 1 bytes @ 0x2
  2665  000003                     	ds	1
  2666  000004                     ___ftpack@exp:
  2667                           	opt stack 0
  2668  000004                     i2writeEEPROM_ext@data:
  2669                           	opt stack 0
  2670  000004                     i2I2C_Read@temp:
  2671                           	opt stack 0
  2672  000004                     ___ftge@ff2:
  2673                           	opt stack 0
  2674                           
  2675                           ; 3 bytes @ 0x3
  2676  000004                     	ds	1
  2677  000005                     ___ftpack@sign:
  2678                           	opt stack 0
  2679  000005                     i2writeEEPROM_ext@adress:
  2680                           	opt stack 0
  2681                           
  2682                           ; 1 bytes @ 0x4
  2683  000005                     	ds	1
  2684  000006                     ??___ftpack:
  2685  000006                     writeEEPROM16_ext@data:
  2686                           	opt stack 0
  2687  000006                     i2getDS1307TimeDate@ptrToUserVal:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x5
  2691  000006                     	ds	1
  2692  000007                     ??___ftge:
  2693                           
  2694                           ; 1 bytes @ 0x6
  2695  000007                     	ds	1
  2696  000008                     writeEEPROM16_ext@adress:
  2697                           	opt stack 0
  2698                           
  2699                           ; 1 bytes @ 0x7
  2700  000008                     	ds	1
  2701  000009                     ?___lwtoft:
  2702                           	opt stack 0
  2703  000009                     _timer$1321:
  2704                           	opt stack 0
  2705  000009                     ___lwtoft@c:
  2706                           	opt stack 0
  2707                           
  2708                           ; 2 bytes @ 0x8
  2709  000009                     	ds	2
  2710  00000B                     _timer$1322:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0xA
  2714  00000B                     	ds	1
  2715  00000C                     ?___ftmul:
  2716                           	opt stack 0
  2717  00000C                     ___ftmul@f1:
  2718                           	opt stack 0
  2719                           
  2720                           ; 3 bytes @ 0xB
  2721  00000C                     	ds	1
  2722  00000D                     _timer$1323:
  2723                           	opt stack 0
  2724                           
  2725                           ; 2 bytes @ 0xC
  2726  00000D                     	ds	2
  2727  00000F                     _timer$1324:
  2728                           	opt stack 0
  2729  00000F                     ___ftmul@f2:
  2730                           	opt stack 0
  2731                           
  2732                           ; 3 bytes @ 0xE
  2733  00000F                     	ds	3
  2734  000012                     ??___ftmul:
  2735                           
  2736                           ; 1 bytes @ 0x11
  2737  000012                     	ds	3
  2738  000015                     ___ftmul@exp:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x14
  2742  000015                     	ds	1
  2743  000016                     ___ftmul@f3_as_product:
  2744                           	opt stack 0
  2745                           
  2746                           ; 3 bytes @ 0x15
  2747  000016                     	ds	3
  2748  000019                     ___ftmul@cntr:
  2749                           	opt stack 0
  2750                           
  2751                           ; 1 bytes @ 0x18
  2752  000019                     	ds	1
  2753  00001A                     ___ftmul@sign:
  2754                           	opt stack 0
  2755                           
  2756                           ; 1 bytes @ 0x19
  2757  00001A                     	ds	1
  2758  00001B                     ?___ftadd:
  2759                           	opt stack 0
  2760  00001B                     ?___ftdiv:
  2761                           	opt stack 0
  2762  00001B                     ?___fttol:
  2763                           	opt stack 0
  2764  00001B                     ___ftadd@f1:
  2765                           	opt stack 0
  2766  00001B                     ___ftdiv@f1:
  2767                           	opt stack 0
  2768  00001B                     ___fttol@f1:
  2769                           	opt stack 0
  2770                           
  2771                           ; 3 bytes @ 0x1A
  2772  00001B                     	ds	3
  2773  00001E                     ___ftadd@f2:
  2774                           	opt stack 0
  2775  00001E                     ___ftdiv@f2:
  2776                           	opt stack 0
  2777                           
  2778                           ; 3 bytes @ 0x1D
  2779  00001E                     	ds	1
  2780  00001F                     ??___fttol:
  2781                           
  2782                           ; 1 bytes @ 0x1E
  2783  00001F                     	ds	2
  2784  000021                     ??___ftadd:
  2785  000021                     ??___ftdiv:
  2786                           
  2787                           ; 1 bytes @ 0x20
  2788  000021                     	ds	3
  2789  000024                     ___ftadd@sign:
  2790                           	opt stack 0
  2791  000024                     ___ftdiv@cntr:
  2792                           	opt stack 0
  2793  000024                     ___fttol@sign1:
  2794                           	opt stack 0
  2795                           
  2796                           ; 1 bytes @ 0x23
  2797  000024                     	ds	1
  2798  000025                     ___ftadd@exp2:
  2799                           	opt stack 0
  2800  000025                     ___ftdiv@f3:
  2801                           	opt stack 0
  2802  000025                     ___fttol@lval:
  2803                           	opt stack 0
  2804                           
  2805                           ; 4 bytes @ 0x24
  2806  000025                     	ds	1
  2807  000026                     ___ftadd@exp1:
  2808                           	opt stack 0
  2809                           
  2810                           ; 1 bytes @ 0x25
  2811  000026                     	ds	2
  2812  000028                     ___ftdiv@exp:
  2813                           	opt stack 0
  2814                           
  2815                           ; 1 bytes @ 0x27
  2816  000028                     	ds	1
  2817  000029                     ___ftdiv@sign:
  2818                           	opt stack 0
  2819  000029                     ___fttol@exp1:
  2820                           	opt stack 0
  2821                           
  2822                           ; 1 bytes @ 0x28
  2823  000029                     	ds	1
  2824  00002A                     lerTransdutor@i:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x29
  2828  00002A                     	ds	1
  2829  00002B                     lerTransdutor@_pressao:
  2830                           	opt stack 0
  2831                           
  2832                           ; 3 bytes @ 0x2A
  2833  00002B                     	ds	3
  2834  00002E                     lerTransdutor@tensao:
  2835                           	opt stack 0
  2836                           
  2837                           ; 3 bytes @ 0x2D
  2838  00002E                     	ds	3
  2839  000031                     ??_TIMER:
  2840                           
  2841                           ; 1 bytes @ 0x30
  2842  000031                     	ds	18
  2843  000043                     TIMER@c:
  2844                           	opt stack 0
  2845                           
  2846                           ; 1 bytes @ 0x42
  2847  000043                     	ds	1
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           postinc0	equ	0xFEE
  2853                           wreg	equ	0xFE8
  2854                           postdec1	equ	0xFE5
  2855                           fsr1l	equ	0xFE1
  2856                           
  2857 ;;
  2858 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2859 ;;
  2860 ;; *************** function _main *****************
  2861 ;; Defined at:
  2862 ;;		line 66 in file "Main.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;		None
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;		None
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      void 
  2869 ;; Registers used:
  2870 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2876 ;;      Params:         0       0       0       0       0       0       0
  2877 ;;      Locals:         0       0       0       0       0       0       0
  2878 ;;      Temps:          0       0       0       0       0       0       0
  2879 ;;      Totals:         0       0       0       0       0       0       0
  2880 ;;Total ram usage:        0 bytes
  2881 ;; Hardware stack levels required when called:   11
  2882 ;; This function calls:
  2883 ;;		_I2C_Master_Init
  2884 ;;		_Lcd_Clear
  2885 ;;		_Lcd_Init
  2886 ;;		_RTC_Init
  2887 ;;		_acaoBombas
  2888 ;;		_acaoTesteBombas
  2889 ;;		_ajusteSP_Bombas
  2890 ;;		_atualizarLCD
  2891 ;;		_btPress
  2892 ;;		_configuraRegistradores
  2893 ;;		_configuraTelefones
  2894 ;;		_configurarEstacionaria
  2895 ;;		_criarCaracteresCGRAM
  2896 ;;		_dataLoger
  2897 ;;		_delay
  2898 ;;		_getDS1307TimeDate
  2899 ;;		_getSinalSIM800L
  2900 ;;		_informacoes
  2901 ;;		_lerParametros
  2902 ;;		_setShiftREG
  2903 ;;		_sprintf
  2904 ;;		_telaPrincipal
  2905 ;;		_tela_ajusteRTC
  2906 ;;		_tela_testeBombas
  2907 ;;		_verificarIntervaloTesteBombas
  2908 ;; This function is called by:
  2909 ;;		Startup code after reset
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text0
  2914  000DC8                     __ptext0:
  2915                           	opt stack 0
  2916  000DC8                     _main:
  2917                           	opt stack 0
  2918  000DC8  FFFF               	dw	65535	; assembler added errata NOP
  2919                           
  2920                           ;Main.c: 68: configuraRegistradores();
  2921                           
  2922                           ;incstack = 0
  2923  000DCA  EC8C  F03A         	call	_configuraRegistradores	;wreg free
  2924                           
  2925                           ;Main.c: 69: I2C_Master_Init(100000);
  2926  000DCE  0EA0               	movlw	160
  2927  000DD0  0100               	movlb	0	; () banked
  2928  000DD2  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2929  000DD4  0E86               	movlw	134
  2930  000DD6  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2931  000DD8  0E01               	movlw	1
  2932  000DDA  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2933  000DDC  0E00               	movlw	0
  2934  000DDE  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2935  000DE0  EC18  F03B         	call	_I2C_Master_Init	;wreg free
  2936                           
  2937                           ;Main.c: 70: delay(200);
  2938  000DE4  0E00               	movlw	0
  2939  000DE6  0100               	movlb	0	; () banked
  2940  000DE8  6F81               	movwf	(delay@x+1)& (0+255),b
  2941  000DEA  0EC8               	movlw	200
  2942  000DEC  6F80               	movwf	delay@x& (0+255),b
  2943  000DEE  ECC7  F037         	call	_delay	;wreg free
  2944                           
  2945                           ;Main.c: 71: RTC_Init();
  2946  000DF2  EC18  F038         	call	_RTC_Init	;wreg free
  2947                           
  2948                           ;Main.c: 72: delay(100);
  2949  000DF6  0E00               	movlw	0
  2950  000DF8  0100               	movlb	0	; () banked
  2951  000DFA  6F81               	movwf	(delay@x+1)& (0+255),b
  2952  000DFC  0E64               	movlw	100
  2953  000DFE  6F80               	movwf	delay@x& (0+255),b
  2954  000E00  ECC7  F037         	call	_delay	;wreg free
  2955                           
  2956                           ;Main.c: 73: getDS1307TimeDate(&rtc);
  2957  000E04  0E76               	movlw	low _rtc
  2958  000E06  0100               	movlb	0	; () banked
  2959  000E08  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  2960  000E0A  0E00               	movlw	high _rtc
  2961  000E0C  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  2962  000E0E  EC12  F017         	call	_getDS1307TimeDate	;wreg free
  2963                           
  2964                           ;Main.c: 74: Lcd_Init();
  2965  000E12  EC77  F03C         	call	_Lcd_Init	;wreg free
  2966                           
  2967                           ;Main.c: 75: Lcd_Clear();
  2968  000E16  EC8F  F036         	call	_Lcd_Clear	;wreg free
  2969                           
  2970                           ;Main.c: 76: criarCaracteresCGRAM();
  2971  000E1A  EC24  F01D         	call	_criarCaracteresCGRAM	;wreg free
  2972                           
  2973                           ;Main.c: 77: delay(100);
  2974  000E1E  0E00               	movlw	0
  2975  000E20  0100               	movlb	0	; () banked
  2976  000E22  6F81               	movwf	(delay@x+1)& (0+255),b
  2977  000E24  0E64               	movlw	100
  2978  000E26  6F80               	movwf	delay@x& (0+255),b
  2979  000E28  ECC7  F037         	call	_delay	;wreg free
  2980                           
  2981                           ;Main.c: 78: lerParametros();
  2982  000E2C  ECAC  F017         	call	_lerParametros	;wreg free
  2983                           
  2984                           ;Main.c: 79: sprintf(line1, "TECHNOW");
  2985  000E30  0E7B               	movlw	low _line1
  2986  000E32  0100               	movlb	0	; () banked
  2987  000E34  6FA1               	movwf	sprintf@wh& (0+255),b
  2988  000E36  0E01               	movlw	high _line1
  2989  000E38  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2990  000E3A  0E9B               	movlw	low STR_86
  2991  000E3C  6FA3               	movwf	sprintf@f& (0+255),b
  2992  000E3E  0E7F               	movlw	high STR_86
  2993  000E40  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2994  000E42  ECC9  F039         	call	_sprintf	;wreg free
  2995                           
  2996                           ;Main.c: 80: sprintf(line2, "Sistemas embarcados");
  2997  000E46  0E66               	movlw	low _line2
  2998  000E48  0100               	movlb	0	; () banked
  2999  000E4A  6FA1               	movwf	sprintf@wh& (0+255),b
  3000  000E4C  0E01               	movlw	high _line2
  3001  000E4E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3002  000E50  0ED8               	movlw	low STR_87
  3003  000E52  6FA3               	movwf	sprintf@f& (0+255),b
  3004  000E54  0E7C               	movlw	high STR_87
  3005  000E56  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3006  000E58  ECC9  F039         	call	_sprintf	;wreg free
  3007                           
  3008                           ;Main.c: 81: sprintf(line3, "Versao Soft.:");
  3009  000E5C  0E51               	movlw	low _line3
  3010  000E5E  0100               	movlb	0	; () banked
  3011  000E60  6FA1               	movwf	sprintf@wh& (0+255),b
  3012  000E62  0E01               	movlw	high _line3
  3013  000E64  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3014  000E66  0E94               	movlw	low STR_112
  3015  000E68  6FA3               	movwf	sprintf@f& (0+255),b
  3016  000E6A  0E7E               	movlw	high STR_112
  3017  000E6C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3018  000E6E  ECC9  F039         	call	_sprintf	;wreg free
  3019                           
  3020                           ;Main.c: 82: sprintf(&line4[9], "%s", "Aug 25 2019");
  3021  000E72  0E45               	movlw	low (_line4+9)
  3022  000E74  0100               	movlb	0	; () banked
  3023  000E76  6FA1               	movwf	sprintf@wh& (0+255),b
  3024  000E78  0E01               	movlw	high (_line4+9)
  3025  000E7A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3026  000E7C  0E12               	movlw	low (STR_89+9)
  3027  000E7E  6FA3               	movwf	sprintf@f& (0+255),b
  3028  000E80  0E7F               	movlw	high (STR_89+9)
  3029  000E82  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3030  000E84  0EE5               	movlw	low STR_15
  3031  000E86  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3032  000E88  0E7E               	movlw	high STR_15
  3033  000E8A  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3034  000E8C  ECC9  F039         	call	_sprintf	;wreg free
  3035                           
  3036                           ;Main.c: 83: atualizarLCD(line1, line2, line3, line4);
  3037  000E90  0E7B               	movlw	low _line1
  3038  000E92  0100               	movlb	0	; () banked
  3039  000E94  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3040  000E96  0E01               	movlw	high _line1
  3041  000E98  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3042  000E9A  0E66               	movlw	low _line2
  3043  000E9C  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3044  000E9E  0E01               	movlw	high _line2
  3045  000EA0  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3046  000EA2  0E51               	movlw	low _line3
  3047  000EA4  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3048  000EA6  0E01               	movlw	high _line3
  3049  000EA8  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3050  000EAA  0E3C               	movlw	low _line4
  3051  000EAC  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3052  000EAE  0E01               	movlw	high _line4
  3053  000EB0  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3054  000EB2  ECBB  F01C         	call	_atualizarLCD	;wreg free
  3055                           
  3056                           ;Main.c: 84: delay(2500);
  3057  000EB6  0E09               	movlw	9
  3058  000EB8  0100               	movlb	0	; () banked
  3059  000EBA  6F81               	movwf	(delay@x+1)& (0+255),b
  3060  000EBC  0EC4               	movlw	196
  3061  000EBE  6F80               	movwf	delay@x& (0+255),b
  3062  000EC0  ECC7  F037         	call	_delay	;wreg free
  3063  000EC4                     l900:
  3064  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3065  000EC6  0004               	clrwdt		;# 
  3066                           
  3067                           ;Main.c: 90: if (!executandoTeste && !flagErroTransdutor) {
  3068  000EC8  0100               	movlb	0	; () banked
  3069  000ECA  51F1               	movf	_executandoTeste& (0+255),w,b
  3070  000ECC  A4D8               	btfss	status,2,c
  3071  000ECE  D004               	goto	l901
  3072                           
  3073                           ; BSR set to: 0
  3074  000ED0  5073               	movf	_flagErroTransdutor,w,c
  3075  000ED2  B4D8               	btfsc	status,2,c
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;Main.c: 91: acaoBombas();
  3079  000ED4  EC3F  F018         	call	_acaoBombas	;wreg free
  3080  000ED8                     l901:
  3081  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  3082                           
  3083                           ;Main.c: 92: }
  3084                           ;Main.c: 94: verificarIntervaloTesteBombas();
  3085  000EDA  EC63  F039         	call	_verificarIntervaloTesteBombas	;wreg free
  3086                           
  3087                           ;Main.c: 96: setShiftREG();
  3088  000EDE  ECED  F039         	call	_setShiftREG	;wreg free
  3089                           
  3090                           ;Main.c: 97: getSinalSIM800L();
  3091  000EE2  ECC9  F014         	call	_getSinalSIM800L	;wreg free
  3092                           
  3093                           ;Main.c: 100: switch (menu_posi) {
  3094  000EE6  D085               	goto	l902
  3095  000EE8  FFFF               	dw	65535	; assembler added errata NOP
  3096                           
  3097                           ;Main.c: 102: telaPrincipal();
  3098  000EEA  ECFF  F010         	call	_telaPrincipal	;wreg free
  3099                           
  3100                           ;Main.c: 104: break;
  3101  000EEE  D0A6               	goto	l904
  3102  000EF0  FFFF               	dw	65535	; assembler added errata NOP
  3103                           
  3104                           ;Main.c: 106: sprintf(&line1[1], "DATA/HORA");
  3105  000EF2  0E7C               	movlw	low (_line1+1)
  3106  000EF4  0100               	movlb	0	; () banked
  3107  000EF6  6FA1               	movwf	sprintf@wh& (0+255),b
  3108  000EF8  0E01               	movlw	high (_line1+1)
  3109  000EFA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3110  000EFC  0E57               	movlw	low STR_115
  3111  000EFE  6FA3               	movwf	sprintf@f& (0+255),b
  3112  000F00  0E7F               	movlw	high STR_115
  3113  000F02  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3114  000F04  ECC9  F039         	call	_sprintf	;wreg free
  3115                           
  3116                           ;Main.c: 107: sprintf(&line2[1], "PRESSAO DA REDE");
  3117  000F08  0E67               	movlw	low (_line2+1)
  3118  000F0A  0100               	movlb	0	; () banked
  3119  000F0C  6FA1               	movwf	sprintf@wh& (0+255),b
  3120  000F0E  0E01               	movlw	high (_line2+1)
  3121  000F10  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3122  000F12  0E1B               	movlw	low STR_116
  3123  000F14  6FA3               	movwf	sprintf@f& (0+255),b
  3124  000F16  0E7E               	movlw	high STR_116
  3125  000F18  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3126  000F1A  ECC9  F039         	call	_sprintf	;wreg free
  3127                           
  3128                           ;Main.c: 108: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  3129  000F1E  0E52               	movlw	low (_line3+1)
  3130  000F20  0100               	movlb	0	; () banked
  3131  000F22  6FA1               	movwf	sprintf@wh& (0+255),b
  3132  000F24  0E01               	movlw	high (_line3+1)
  3133  000F26  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3134  000F28  0E71               	movlw	low STR_117
  3135  000F2A  6FA3               	movwf	sprintf@f& (0+255),b
  3136  000F2C  0E7D               	movlw	high STR_117
  3137  000F2E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3138  000F30  ECC9  F039         	call	_sprintf	;wreg free
  3139                           
  3140                           ;Main.c: 109: sprintf(&line4[1], "TELEFONES");
  3141  000F34  0E3D               	movlw	low (_line4+1)
  3142  000F36  0100               	movlb	0	; () banked
  3143  000F38  6FA1               	movwf	sprintf@wh& (0+255),b
  3144  000F3A  0E01               	movlw	high (_line4+1)
  3145  000F3C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3146  000F3E  0E6B               	movlw	low STR_118
  3147  000F40  6FA3               	movwf	sprintf@f& (0+255),b
  3148  000F42  0E7F               	movlw	high STR_118
  3149  000F44  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3150  000F46  ECC9  F039         	call	_sprintf	;wreg free
  3151                           
  3152                           ;Main.c: 110: break;
  3153  000F4A  D078               	goto	l904
  3154  000F4C  FFFF               	dw	65535	; assembler added errata NOP
  3155                           
  3156                           ;Main.c: 112: sprintf(&line1[1], "PERIODO DE TESTES");
  3157  000F4E  0E7C               	movlw	low (_line1+1)
  3158  000F50  0100               	movlb	0	; () banked
  3159  000F52  6FA1               	movwf	sprintf@wh& (0+255),b
  3160  000F54  0E01               	movlw	high (_line1+1)
  3161  000F56  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3162  000F58  0E83               	movlw	low STR_119
  3163  000F5A  6FA3               	movwf	sprintf@f& (0+255),b
  3164  000F5C  0E7D               	movlw	high STR_119
  3165  000F5E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3166  000F60  ECC9  F039         	call	_sprintf	;wreg free
  3167                           
  3168                           ;Main.c: 113: sprintf(&line2[1], "DATALOGER");
  3169  000F64  0E67               	movlw	low (_line2+1)
  3170  000F66  0100               	movlb	0	; () banked
  3171  000F68  6FA1               	movwf	sprintf@wh& (0+255),b
  3172  000F6A  0E01               	movlw	high (_line2+1)
  3173  000F6C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3174  000F6E  0E61               	movlw	low STR_120
  3175  000F70  6FA3               	movwf	sprintf@f& (0+255),b
  3176  000F72  0E7F               	movlw	high STR_120
  3177  000F74  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3178  000F76  ECC9  F039         	call	_sprintf	;wreg free
  3179                           
  3180                           ;Main.c: 114: sprintf(&line3[1], "INFO VERSAO");
  3181  000F7A  0E52               	movlw	low (_line3+1)
  3182  000F7C  0100               	movlb	0	; () banked
  3183  000F7E  6FA1               	movwf	sprintf@wh& (0+255),b
  3184  000F80  0E01               	movlw	high (_line3+1)
  3185  000F82  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3186  000F84  0EFD               	movlw	low STR_121
  3187  000F86  6FA3               	movwf	sprintf@f& (0+255),b
  3188  000F88  0E7E               	movlw	high STR_121
  3189  000F8A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3190  000F8C  ECC9  F039         	call	_sprintf	;wreg free
  3191                           
  3192                           ;Main.c: 115: sprintf(&line4[1], "Iniciar Testes");
  3193  000F90  0E3D               	movlw	low (_line4+1)
  3194  000F92  0100               	movlb	0	; () banked
  3195  000F94  6FA1               	movwf	sprintf@wh& (0+255),b
  3196  000F96  0E01               	movlw	high (_line4+1)
  3197  000F98  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3198  000F9A  0E85               	movlw	low STR_122
  3199  000F9C  6FA3               	movwf	sprintf@f& (0+255),b
  3200  000F9E  0E7E               	movlw	high STR_122
  3201  000FA0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3202  000FA2  ECC9  F039         	call	_sprintf	;wreg free
  3203                           
  3204                           ;Main.c: 116: break;
  3205  000FA6  D04A               	goto	l904
  3206  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  3207                           
  3208                           ;Main.c: 118: tela_ajusteRTC();
  3209  000FAA  ECCA  F00E         	call	_tela_ajusteRTC	;wreg free
  3210                           
  3211                           ;Main.c: 119: break;
  3212  000FAE  D046               	goto	l904
  3213  000FB0  FFFF               	dw	65535	; assembler added errata NOP
  3214                           
  3215                           ;Main.c: 121: ajusteSP_Bombas();
  3216  000FB2  EC81  F00C         	call	_ajusteSP_Bombas	;wreg free
  3217                           
  3218                           ;Main.c: 122: break;
  3219  000FB6  D042               	goto	l904
  3220  000FB8  FFFF               	dw	65535	; assembler added errata NOP
  3221                           
  3222                           ;Main.c: 124: configurarEstacionaria();
  3223  000FBA  EC5B  F016         	call	_configurarEstacionaria	;wreg free
  3224                           
  3225                           ;Main.c: 125: break;
  3226  000FBE  D03E               	goto	l904
  3227  000FC0  FFFF               	dw	65535	; assembler added errata NOP
  3228                           
  3229                           ;Main.c: 127: configuraTelefones();
  3230  000FC2  EC18  F009         	call	_configuraTelefones	;wreg free
  3231                           
  3232                           ;Main.c: 128: break;
  3233  000FC6  D03A               	goto	l904
  3234  000FC8  FFFF               	dw	65535	; assembler added errata NOP
  3235                           
  3236                           ;Main.c: 130: tela_testeBombas();
  3237  000FCA  ECF9  F012         	call	_tela_testeBombas	;wreg free
  3238                           
  3239                           ;Main.c: 131: break;
  3240  000FCE  D036               	goto	l904
  3241  000FD0  FFFF               	dw	65535	; assembler added errata NOP
  3242                           
  3243                           ;Main.c: 133: dataLoger();
  3244  000FD2  ECAE  F00D         	call	_dataLoger	;wreg free
  3245                           
  3246                           ;Main.c: 134: break;
  3247  000FD6  D032               	goto	l904
  3248  000FD8  FFFF               	dw	65535	; assembler added errata NOP
  3249                           
  3250                           ;Main.c: 136: informacoes();
  3251  000FDA  ECBB  F03B         	call	_informacoes	;wreg free
  3252                           
  3253                           ;Main.c: 137: break;
  3254  000FDE  D02E               	goto	l904
  3255  000FE0  FFFF               	dw	65535	; assembler added errata NOP
  3256                           
  3257                           ;Main.c: 139: acaoTesteBombas();
  3258  000FE2  EC8D  F004         	call	_acaoTesteBombas	;wreg free
  3259                           
  3260                           ;Main.c: 140: break;
  3261  000FE6  D02A               	goto	l904
  3262  000FE8  FFFF               	dw	65535	; assembler added errata NOP
  3263  000FEA  0E00               	movlw	0
  3264  000FEC  0100               	movlb	0	; () banked
  3265  000FEE  6FDE               	movwf	_menu_posi& (0+255),b
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;Main.c: 144: }
  3269                           
  3270                           ;Main.c: 143: break;
  3271  000FF0  D025               	goto	l904
  3272  000FF2                     l902:
  3273  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  3274                           
  3275                           ; BSR set to: 0
  3276  000FF4  0100               	movlb	0	; () banked
  3277  000FF6  51DE               	movf	_menu_posi& (0+255),w,b
  3278                           
  3279                           ; Switch size 1, requested type "space"
  3280                           ; Number of cases is 11, Range of values is 0 to 28
  3281                           ; switch strategies available:
  3282                           ; Name         Instructions Cycles
  3283                           ; simple_byte           34    18 (average)
  3284                           ;	Chosen strategy is simple_byte
  3285  000FF8  0A00               	xorlw	0	; case 0
  3286  000FFA  B4D8               	btfsc	status,2,c
  3287  000FFC  D775               	goto	l903
  3288  000FFE  0A01               	xorlw	1	; case 1
  3289  001000  B4D8               	btfsc	status,2,c
  3290  001002  D776               	goto	l905
  3291  001004  0A03               	xorlw	3	; case 2
  3292  001006  B4D8               	btfsc	status,2,c
  3293  001008  D7A1               	goto	l906
  3294  00100A  0A16               	xorlw	22	; case 20
  3295  00100C  B4D8               	btfsc	status,2,c
  3296  00100E  D7CC               	goto	l907
  3297  001010  0A01               	xorlw	1	; case 21
  3298  001012  B4D8               	btfsc	status,2,c
  3299  001014  D7CD               	goto	l908
  3300  001016  0A03               	xorlw	3	; case 22
  3301  001018  B4D8               	btfsc	status,2,c
  3302  00101A  D7CE               	goto	l909
  3303  00101C  0A01               	xorlw	1	; case 23
  3304  00101E  B4D8               	btfsc	status,2,c
  3305  001020  D7CF               	goto	l910
  3306  001022  0A0F               	xorlw	15	; case 24
  3307  001024  B4D8               	btfsc	status,2,c
  3308  001026  D7D0               	goto	l911
  3309  001028  0A01               	xorlw	1	; case 25
  3310  00102A  B4D8               	btfsc	status,2,c
  3311  00102C  D7D1               	goto	l912
  3312  00102E  0A02               	xorlw	2	; case 27
  3313  001030  B4D8               	btfsc	status,2,c
  3314  001032  D7D2               	goto	l913
  3315  001034  0A07               	xorlw	7	; case 28
  3316  001036  B4D8               	btfsc	status,2,c
  3317  001038  D7D3               	goto	l914
  3318  00103A  D7D6               	goto	l915
  3319  00103C                     l904:
  3320  00103C  FFFF               	dw	65535	; assembler added errata NOP
  3321                           
  3322                           ;Main.c: 146: if (menu_posi == 1 | menu_posi == 2) {
  3323                           
  3324                           ; BSR set to: 0
  3325  00103E  0100               	movlb	0	; () banked
  3326  001040  05DE               	decf	_menu_posi& (0+255),w,b
  3327  001042  B4D8               	btfsc	status,2,c
  3328  001044  D09C               	goto	l919
  3329                           
  3330                           ; BSR set to: 0
  3331  001046  0E02               	movlw	2
  3332  001048  19DE               	xorwf	_menu_posi& (0+255),w,b
  3333  00104A  B4D8               	btfsc	status,2,c
  3334  00104C  D098               	goto	l919
  3335  00104E  D0D2               	goto	l943
  3336  001050  FFFF               	dw	65535	; assembler added errata NOP
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;Main.c: 150: menu_posi = 1;
  3340                           
  3341                           ; BSR set to: 0
  3342  001052  0E01               	movlw	1
  3343  001054  6FDE               	movwf	_menu_posi& (0+255),b
  3344                           
  3345                           ;Main.c: 151: line1[0] = '>';
  3346  001056  0E3E               	movlw	62
  3347  001058  0101               	movlb	1	; () banked
  3348  00105A  6F7B               	movwf	_line1& (0+255),b
  3349                           
  3350                           ; BSR set to: 1
  3351                           ;Main.c: 152: if (btPress(4)) {
  3352  00105C  0E04               	movlw	4
  3353  00105E  EC4A  F03B         	call	_btPress
  3354  001062  0900               	iorlw	0
  3355  001064  B4D8               	btfsc	status,2,c
  3356  001066  D0A6               	goto	l922
  3357                           
  3358                           ;Main.c: 153: _menu_posi = menu_posi;
  3359  001068  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3360                           
  3361                           ;Main.c: 154: menu_posi = 20;
  3362  00106C  0E14               	movlw	20
  3363  00106E  D065               	goto	L5
  3364  001070  FFFF               	dw	65535	; assembler added errata NOP
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;Main.c: 158: menu_posi = 1;
  3368                           
  3369                           ; BSR set to: 0
  3370  001072  0E01               	movlw	1
  3371  001074  6FDE               	movwf	_menu_posi& (0+255),b
  3372                           
  3373                           ;Main.c: 159: line2[0] = '>';
  3374  001076  0E3E               	movlw	62
  3375  001078  0101               	movlb	1	; () banked
  3376  00107A  6F66               	movwf	_line2& (0+255),b
  3377                           
  3378                           ; BSR set to: 1
  3379                           ;Main.c: 160: if (btPress(4)) {
  3380  00107C  0E04               	movlw	4
  3381  00107E  EC4A  F03B         	call	_btPress
  3382  001082  0900               	iorlw	0
  3383  001084  B4D8               	btfsc	status,2,c
  3384  001086  D096               	goto	l922
  3385                           
  3386                           ;Main.c: 161: _menu_posi = menu_posi;
  3387  001088  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3388                           
  3389                           ;Main.c: 162: menu_posi = 21;
  3390  00108C  0E15               	movlw	21
  3391  00108E  D055               	goto	L5
  3392  001090  FFFF               	dw	65535	; assembler added errata NOP
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;Main.c: 166: menu_posi = 1;
  3396                           
  3397                           ; BSR set to: 0
  3398  001092  0E01               	movlw	1
  3399  001094  6FDE               	movwf	_menu_posi& (0+255),b
  3400                           
  3401                           ;Main.c: 167: line3[0] = '>';
  3402  001096  0E3E               	movlw	62
  3403  001098  0101               	movlb	1	; () banked
  3404  00109A  6F51               	movwf	_line3& (0+255),b
  3405                           
  3406                           ; BSR set to: 1
  3407                           ;Main.c: 168: if (btPress(4)) {
  3408  00109C  0E04               	movlw	4
  3409  00109E  EC4A  F03B         	call	_btPress
  3410  0010A2  0900               	iorlw	0
  3411  0010A4  B4D8               	btfsc	status,2,c
  3412  0010A6  D086               	goto	l922
  3413                           
  3414                           ;Main.c: 169: _menu_posi = menu_posi;
  3415  0010A8  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3416                           
  3417                           ;Main.c: 170: menu_posi = 22;
  3418  0010AC  0E16               	movlw	22
  3419  0010AE  D045               	goto	L5
  3420  0010B0  FFFF               	dw	65535	; assembler added errata NOP
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;Main.c: 174: menu_posi = 1;
  3424                           
  3425                           ; BSR set to: 0
  3426  0010B2  0E01               	movlw	1
  3427  0010B4  6FDE               	movwf	_menu_posi& (0+255),b
  3428                           
  3429                           ;Main.c: 175: line4[0] = '>';
  3430  0010B6  0E3E               	movlw	62
  3431  0010B8  0101               	movlb	1	; () banked
  3432  0010BA  6F3C               	movwf	_line4& (0+255),b
  3433                           
  3434                           ; BSR set to: 1
  3435                           ;Main.c: 176: if (btPress(4)) {
  3436  0010BC  0E04               	movlw	4
  3437  0010BE  EC4A  F03B         	call	_btPress
  3438  0010C2  0900               	iorlw	0
  3439  0010C4  B4D8               	btfsc	status,2,c
  3440  0010C6  D076               	goto	l922
  3441                           
  3442                           ;Main.c: 177: _menu_posi = menu_posi;
  3443  0010C8  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3444                           
  3445                           ;Main.c: 178: menu_posi = 23;
  3446  0010CC  0E17               	movlw	23
  3447  0010CE  D035               	goto	L5
  3448  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;Main.c: 182: menu_posi = 2;
  3452                           
  3453                           ; BSR set to: 0
  3454  0010D2  0E02               	movlw	2
  3455  0010D4  6FDE               	movwf	_menu_posi& (0+255),b
  3456                           
  3457                           ;Main.c: 183: line1[0] = '>';
  3458  0010D6  0E3E               	movlw	62
  3459  0010D8  0101               	movlb	1	; () banked
  3460  0010DA  6F7B               	movwf	_line1& (0+255),b
  3461                           
  3462                           ; BSR set to: 1
  3463                           ;Main.c: 184: if (btPress(4)) {
  3464  0010DC  0E04               	movlw	4
  3465  0010DE  EC4A  F03B         	call	_btPress
  3466  0010E2  0900               	iorlw	0
  3467  0010E4  B4D8               	btfsc	status,2,c
  3468  0010E6  D066               	goto	l922
  3469                           
  3470                           ;Main.c: 185: _menu_posi = menu_posi;
  3471  0010E8  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3472                           
  3473                           ;Main.c: 186: menu_posi = 24;
  3474  0010EC  0E18               	movlw	24
  3475  0010EE  D025               	goto	L5
  3476  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;Main.c: 190: line2[0] = '>';
  3480                           
  3481                           ; BSR set to: 0
  3482  0010F2  0E3E               	movlw	62
  3483  0010F4  0101               	movlb	1	; () banked
  3484  0010F6  6F66               	movwf	_line2& (0+255),b
  3485                           
  3486                           ;Main.c: 191: menu_posi = 2;
  3487  0010F8  0E02               	movlw	2
  3488  0010FA  0100               	movlb	0	; () banked
  3489  0010FC  6FDE               	movwf	_menu_posi& (0+255),b
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;Main.c: 192: if (btPress(4)) {
  3493  0010FE  0E04               	movlw	4
  3494  001100  EC4A  F03B         	call	_btPress
  3495  001104  0900               	iorlw	0
  3496  001106  B4D8               	btfsc	status,2,c
  3497  001108  D055               	goto	l922
  3498                           
  3499                           ;Main.c: 193: _menu_posi = menu_posi;
  3500  00110A  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3501                           
  3502                           ;Main.c: 194: menu_posi = 25;
  3503  00110E  0E19               	movlw	25
  3504  001110  0100               	movlb	0	; () banked
  3505  001112  6FDE               	movwf	_menu_posi& (0+255),b
  3506                           
  3507                           ;Main.c: 195: dtl_carregar_log = 1;
  3508  001114  0E01               	movlw	1
  3509  001116  6E55               	movwf	_dtl_carregar_log,c
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;Main.c: 196: }
  3513                           ;Main.c: 197: break;
  3514  001118  D04D               	goto	l922
  3515  00111A  FFFF               	dw	65535	; assembler added errata NOP
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;Main.c: 199: line3[0] = '>';
  3519                           
  3520                           ; BSR set to: 0
  3521  00111C  0E3E               	movlw	62
  3522  00111E  0101               	movlb	1	; () banked
  3523  001120  6F51               	movwf	_line3& (0+255),b
  3524                           
  3525                           ;Main.c: 200: menu_posi = 2;
  3526  001122  0E02               	movlw	2
  3527  001124  0100               	movlb	0	; () banked
  3528  001126  6FDE               	movwf	_menu_posi& (0+255),b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;Main.c: 201: if (btPress(4)) {
  3532  001128  0E04               	movlw	4
  3533  00112A  EC4A  F03B         	call	_btPress
  3534  00112E  0900               	iorlw	0
  3535  001130  B4D8               	btfsc	status,2,c
  3536  001132  D040               	goto	l922
  3537                           
  3538                           ;Main.c: 202: _menu_posi = menu_posi;
  3539  001134  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3540                           
  3541                           ;Main.c: 203: menu_posi = 27;
  3542  001138  0E1B               	movlw	27
  3543  00113A                     L5:
  3544  00113A  FFFF               	dw	65535	; assembler added errata NOP
  3545  00113C  0100               	movlb	0	; () banked
  3546  00113E  D01C               	goto	L6
  3547  001140  FFFF               	dw	65535	; assembler added errata NOP
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Main.c: 207: line4[0] = '>';
  3551                           
  3552                           ; BSR set to: 0
  3553  001142  0E3E               	movlw	62
  3554  001144  0101               	movlb	1	; () banked
  3555  001146  6F3C               	movwf	_line4& (0+255),b
  3556                           
  3557                           ;Main.c: 208: menu_posi = 2;
  3558  001148  0E02               	movlw	2
  3559  00114A  0100               	movlb	0	; () banked
  3560  00114C  6FDE               	movwf	_menu_posi& (0+255),b
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;Main.c: 209: if (btPress(4)) {
  3564  00114E  0E04               	movlw	4
  3565  001150  EC4A  F03B         	call	_btPress
  3566  001154  0900               	iorlw	0
  3567  001156  B4D8               	btfsc	status,2,c
  3568  001158  D02D               	goto	l922
  3569                           
  3570                           ;Main.c: 210: if (!ocorrendoIncendio) {
  3571  00115A  0100               	movlb	0	; () banked
  3572  00115C  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  3573  00115E  A4D8               	btfss	status,2,c
  3574  001160  D029               	goto	l922
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;Main.c: 211: menu_posi = 28;
  3578  001162  0E1C               	movlw	28
  3579  001164  6FDE               	movwf	_menu_posi& (0+255),b
  3580                           
  3581                           ;Main.c: 212: executandoTeste = 1;
  3582  001166  0E01               	movlw	1
  3583  001168  6FF1               	movwf	_executandoTeste& (0+255),b
  3584                           
  3585                           ;Main.c: 213: etapaTesteBombas = 0;
  3586  00116A  0E00               	movlw	0
  3587  00116C  6E72               	movwf	_etapaTesteBombas,c
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;Main.c: 214: }
  3591                           ;Main.c: 215: }
  3592                           ;Main.c: 216: break;
  3593                           
  3594                           ; BSR set to: 0
  3595  00116E  D022               	goto	l922
  3596  001170  FFFF               	dw	65535	; assembler added errata NOP
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;Main.c: 218: sub_menu_posi = 1;
  3600                           
  3601                           ; BSR set to: 0
  3602  001172  0E01               	movlw	1
  3603  001174  6E6A               	movwf	_sub_menu_posi,c
  3604                           
  3605                           ;Main.c: 219: menu_posi = 1;
  3606  001176  0E01               	movlw	1
  3607  001178                     L6:
  3608  001178  FFFF               	dw	65535	; assembler added errata NOP
  3609  00117A  6FDE               	movwf	_menu_posi& (0+255),b
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;Main.c: 221: }
  3613                           
  3614                           ;Main.c: 220: break;
  3615  00117C  D01B               	goto	l922
  3616  00117E                     l919:
  3617  00117E  FFFF               	dw	65535	; assembler added errata NOP
  3618                           
  3619                           ; BSR set to: 0
  3620                           
  3621                           ; BSR set to: 0
  3622  001180  506A               	movf	_sub_menu_posi,w,c
  3623                           
  3624                           ; Switch size 1, requested type "space"
  3625                           ; Number of cases is 8, Range of values is 1 to 8
  3626                           ; switch strategies available:
  3627                           ; Name         Instructions Cycles
  3628                           ; simple_byte           25    13 (average)
  3629                           ;	Chosen strategy is simple_byte
  3630  001182  0A01               	xorlw	1	; case 1
  3631  001184  B4D8               	btfsc	status,2,c
  3632  001186  D764               	goto	l920
  3633  001188  0A03               	xorlw	3	; case 2
  3634  00118A  B4D8               	btfsc	status,2,c
  3635  00118C  D771               	goto	l923
  3636  00118E  0A01               	xorlw	1	; case 3
  3637  001190  B4D8               	btfsc	status,2,c
  3638  001192  D77E               	goto	l925
  3639  001194  0A07               	xorlw	7	; case 4
  3640  001196  B4D8               	btfsc	status,2,c
  3641  001198  D78B               	goto	l927
  3642  00119A  0A01               	xorlw	1	; case 5
  3643  00119C  B4D8               	btfsc	status,2,c
  3644  00119E  D798               	goto	l929
  3645  0011A0  0A03               	xorlw	3	; case 6
  3646  0011A2  B4D8               	btfsc	status,2,c
  3647  0011A4  D7A5               	goto	l931
  3648  0011A6  0A01               	xorlw	1	; case 7
  3649  0011A8  B4D8               	btfsc	status,2,c
  3650  0011AA  D7B7               	goto	l933
  3651  0011AC  0A0F               	xorlw	15	; case 8
  3652  0011AE  B4D8               	btfsc	status,2,c
  3653  0011B0  D7C7               	goto	l935
  3654  0011B2  D7DE               	goto	l938
  3655  0011B4                     l922:
  3656  0011B4  FFFF               	dw	65535	; assembler added errata NOP
  3657                           
  3658                           ;Main.c: 223: if (btPress(3)) {
  3659                           
  3660                           ; BSR set to: 0
  3661  0011B6  0E03               	movlw	3
  3662  0011B8  EC4A  F03B         	call	_btPress
  3663  0011BC  0900               	iorlw	0
  3664  0011BE  B4D8               	btfsc	status,2,c
  3665  0011C0  D002               	goto	l939
  3666                           
  3667                           ;Main.c: 224: sub_menu_posi--;
  3668  0011C2  066A               	decf	_sub_menu_posi,f,c
  3669                           
  3670                           ;Main.c: 225: } else if (btPress(2)) {
  3671  0011C4  D017               	goto	l943
  3672  0011C6                     l939:
  3673  0011C6  FFFF               	dw	65535	; assembler added errata NOP
  3674  0011C8  0E02               	movlw	2
  3675  0011CA  EC4A  F03B         	call	_btPress
  3676  0011CE  0900               	iorlw	0
  3677  0011D0  B4D8               	btfsc	status,2,c
  3678  0011D2  D002               	goto	l941
  3679                           
  3680                           ;Main.c: 226: sub_menu_posi++;
  3681  0011D4  2A6A               	incf	_sub_menu_posi,f,c
  3682                           
  3683                           ;Main.c: 227: } else if (btPress(1)) {
  3684  0011D6  D00E               	goto	l943
  3685  0011D8                     l941:
  3686  0011D8  FFFF               	dw	65535	; assembler added errata NOP
  3687  0011DA  0E01               	movlw	1
  3688  0011DC  EC4A  F03B         	call	_btPress
  3689  0011E0  0900               	iorlw	0
  3690  0011E2  B4D8               	btfsc	status,2,c
  3691  0011E4  D007               	goto	l943
  3692                           
  3693                           ;Main.c: 228: menu_posi = 0;
  3694  0011E6  0E00               	movlw	0
  3695  0011E8  0100               	movlb	0	; () banked
  3696  0011EA  6FDE               	movwf	_menu_posi& (0+255),b
  3697                           
  3698                           ;Main.c: 229: option_posi = 0;
  3699  0011EC  0E00               	movlw	0
  3700  0011EE  6FDF               	movwf	_option_posi& (0+255),b
  3701                           
  3702                           ;Main.c: 230: sub_menu_posi = 1;
  3703  0011F0  0E01               	movlw	1
  3704  0011F2  6E6A               	movwf	_sub_menu_posi,c
  3705  0011F4                     l943:
  3706  0011F4  FFFF               	dw	65535	; assembler added errata NOP
  3707                           
  3708                           ;Main.c: 231: }
  3709                           ;Main.c: 232: }
  3710                           ;Main.c: 234: if (menu_posi != 28) {
  3711                           
  3712                           ; BSR set to: 0
  3713                           
  3714                           ; BSR set to: 0
  3715                           
  3716                           ; BSR set to: 0
  3717                           
  3718                           ; BSR set to: 0
  3719  0011F6  0E1C               	movlw	28
  3720  0011F8  0100               	movlb	0	; () banked
  3721  0011FA  19DE               	xorwf	_menu_posi& (0+255),w,b
  3722  0011FC  B4D8               	btfsc	status,2,c
  3723  0011FE  D004               	goto	l944
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;Main.c: 235: executandoTeste = 0;
  3727  001200  0E00               	movlw	0
  3728  001202  6FF1               	movwf	_executandoTeste& (0+255),b
  3729                           
  3730                           ;Main.c: 236: shift[2] = 0;
  3731  001204  0E00               	movlw	0
  3732  001206  6E46               	movwf	_shift+2,c
  3733  001208                     l944:
  3734  001208  FFFF               	dw	65535	; assembler added errata NOP
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;Main.c: 237: }
  3738                           ;Main.c: 238: atualizarLCD(line1, line2, line3, line4);
  3739                           
  3740                           ; BSR set to: 0
  3741  00120A  0E7B               	movlw	low _line1
  3742  00120C  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3743  00120E  0E01               	movlw	high _line1
  3744  001210  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3745  001212  0E66               	movlw	low _line2
  3746  001214  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3747  001216  0E01               	movlw	high _line2
  3748  001218  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3749  00121A  0E51               	movlw	low _line3
  3750  00121C  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3751  00121E  0E01               	movlw	high _line3
  3752  001220  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3753  001222  0E3C               	movlw	low _line4
  3754  001224  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3755  001226  0E01               	movlw	high _line4
  3756  001228  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3757  00122A  ECBB  F01C         	call	_atualizarLCD	;wreg free
  3758  00122E  D64A               	goto	l900
  3759  001230                     __end_of_main:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           postinc0	equ	0xFEE
  3766                           wreg	equ	0xFE8
  3767                           postdec1	equ	0xFE5
  3768                           fsr1l	equ	0xFE1
  3769                           status	equ	0xFD8
  3770                           
  3771 ;; *************** function _verificarIntervaloTesteBombas *****************
  3772 ;; Defined at:
  3773 ;;		line 114 in file "controle.h"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;		None
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3787 ;;      Params:         0       0       0       0       0       0       0
  3788 ;;      Locals:         0       0       0       0       0       0       0
  3789 ;;      Temps:          0       0       0       0       0       0       0
  3790 ;;      Totals:         0       0       0       0       0       0       0
  3791 ;;Total ram usage:        0 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    9
  3794 ;; This function calls:
  3795 ;;		_writeEEPROM_ext
  3796 ;; This function is called by:
  3797 ;;		_main
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text1
  3802  0072C6                     __ptext1:
  3803                           	opt stack 0
  3804  0072C6                     _verificarIntervaloTesteBombas:
  3805                           	opt stack 0
  3806  0072C6  FFFF               	dw	65535	; assembler added errata NOP
  3807                           
  3808                           ;controle.h: 115: if (dias_restante_teste >= intervalo_teste_dia && habilitaTesteAutomat
      +                          ico == 1 && !executandoTeste) {
  3809                           
  3810                           ;incstack = 0
  3811  0072C8  0100               	movlb	0	; () banked
  3812  0072CA  51E8               	movf	_intervalo_teste_dia& (0+255),w,b
  3813  0072CC  5DE7               	subwf	_dias_restante_teste& (0+255),w,b
  3814  0072CE  A0D8               	btfss	status,0,c
  3815  0072D0  D018               	goto	l506
  3816                           
  3817                           ; BSR set to: 0
  3818  0072D2  05EF               	decf	_habilitaTesteAutomatico& (0+255),w,b
  3819  0072D4  A4D8               	btfss	status,2,c
  3820  0072D6  D015               	goto	l506
  3821                           
  3822                           ; BSR set to: 0
  3823  0072D8  51F1               	movf	_executandoTeste& (0+255),w,b
  3824  0072DA  A4D8               	btfss	status,2,c
  3825  0072DC  D012               	goto	l506
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;controle.h: 116: if (_hor == horario_de_teste) {
  3829  0072DE  51E6               	movf	_horario_de_teste& (0+255),w,b
  3830  0072E0  19EC               	xorwf	__hor& (0+255),w,b
  3831  0072E2  A4D8               	btfss	status,2,c
  3832  0072E4  D00E               	goto	l506
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;controle.h: 117: dias_restante_teste = 0;
  3836  0072E6  0E00               	movlw	0
  3837  0072E8  6FE7               	movwf	_dias_restante_teste& (0+255),b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;controle.h: 118: writeEEPROM_ext(10, dias_restante_teste);
  3841  0072EA  C0E7  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
  3842  0072EE  0E0A               	movlw	10
  3843  0072F0  ECA6  F039         	call	_writeEEPROM_ext
  3844                           
  3845                           ;controle.h: 119: etapaTesteBombas = 0;
  3846  0072F4  0E00               	movlw	0
  3847  0072F6  6E72               	movwf	_etapaTesteBombas,c
  3848                           
  3849                           ;controle.h: 120: executandoTeste = 1;
  3850  0072F8  0E01               	movlw	1
  3851  0072FA  0100               	movlb	0	; () banked
  3852  0072FC  6FF1               	movwf	_executandoTeste& (0+255),b
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;controle.h: 121: menu_posi = 28;
  3856  0072FE  0E1C               	movlw	28
  3857  007300  6FDE               	movwf	_menu_posi& (0+255),b
  3858  007302                     l506:
  3859  007302  FFFF               	dw	65535	; assembler added errata NOP
  3860                           
  3861                           ; BSR set to: 0
  3862                           
  3863                           ; BSR set to: 0
  3864                           
  3865                           ; BSR set to: 0
  3866  007304  0012               	return		;funcret
  3867  007306  FFFF               	dw	65535	; errata NOP
  3868  007308                     __end_of_verificarIntervaloTesteBombas:
  3869                           	opt stack 0
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           postinc0	equ	0xFEE
  3875                           wreg	equ	0xFE8
  3876                           postdec1	equ	0xFE5
  3877                           fsr1l	equ	0xFE1
  3878                           status	equ	0xFD8
  3879                           
  3880 ;; *************** function _tela_testeBombas *****************
  3881 ;; Defined at:
  3882 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;		None
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;		None
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  1    wreg      void 
  3889 ;; Registers used:
  3890 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3896 ;;      Params:         0       0       0       0       0       0       0
  3897 ;;      Locals:         0       2       0       0       0       0       0
  3898 ;;      Temps:          0       2       0       0       0       0       0
  3899 ;;      Totals:         0       4       0       0       0       0       0
  3900 ;;Total ram usage:        4 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    9
  3903 ;; This function calls:
  3904 ;;		_blink
  3905 ;;		_btPress
  3906 ;;		_sprintf
  3907 ;;		_writeEEPROM_ext
  3908 ;; This function is called by:
  3909 ;;		_main
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text2
  3914  0025F2                     __ptext2:
  3915                           	opt stack 0
  3916  0025F2                     _tela_testeBombas:
  3917                           	opt stack 0
  3918  0025F2  FFFF               	dw	65535	; assembler added errata NOP
  3919                           
  3920                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;incstack = 0
  3924  0025F4  0E7B               	movlw	low _line1
  3925  0025F6  0100               	movlb	0	; () banked
  3926  0025F8  6FA1               	movwf	sprintf@wh& (0+255),b
  3927  0025FA  0E01               	movlw	high _line1
  3928  0025FC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3929  0025FE  0E5F               	movlw	low STR_69
  3930  002600  6FA3               	movwf	sprintf@f& (0+255),b
  3931  002602  0E7C               	movlw	high STR_69
  3932  002604  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3933  002606  51E7               	movf	_dias_restante_teste& (0+255),w,b
  3934  002608  6FB5               	movwf	??_tela_testeBombas& (0+255),b
  3935  00260A  6BB6               	clrf	(??_tela_testeBombas+1)& (0+255),b
  3936  00260C  1FB5               	comf	??_tela_testeBombas& (0+255),f,b
  3937  00260E  1FB6               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  3938  002610  4BB5               	infsnz	??_tela_testeBombas& (0+255),f,b
  3939  002612  2BB6               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  3940  002614  51E8               	movf	_intervalo_teste_dia& (0+255),w,b
  3941  002616  25B5               	addwf	??_tela_testeBombas& (0+255),w,b
  3942  002618  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3943  00261A  0E00               	movlw	0
  3944  00261C  21B6               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  3945  00261E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3946  002620  ECC9  F039         	call	_sprintf	;wreg free
  3947                           
  3948                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  3949  002624  0E66               	movlw	low _line2
  3950  002626  0100               	movlb	0	; () banked
  3951  002628  6FA1               	movwf	sprintf@wh& (0+255),b
  3952  00262A  0E01               	movlw	high _line2
  3953  00262C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3954  00262E  0EB0               	movlw	low STR_70
  3955  002630  6FA3               	movwf	sprintf@f& (0+255),b
  3956  002632  0E7C               	movlw	high STR_70
  3957  002634  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3958  002636  C0E8  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  3959  00263A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3960  00263C  ECC9  F039         	call	_sprintf	;wreg free
  3961                           
  3962                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  3963  002640  0E51               	movlw	low _line3
  3964  002642  0100               	movlb	0	; () banked
  3965  002644  6FA1               	movwf	sprintf@wh& (0+255),b
  3966  002646  0E01               	movlw	high _line3
  3967  002648  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3968  00264A  0EC4               	movlw	low STR_71
  3969  00264C  6FA3               	movwf	sprintf@f& (0+255),b
  3970  00264E  0E7C               	movlw	high STR_71
  3971  002650  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3972  002652  C0E6  F0A5         	movff	_horario_de_teste,?_sprintf+4
  3973  002656  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3974  002658  ECC9  F039         	call	_sprintf	;wreg free
  3975                           
  3976                           ;tela_TESTE_BOMBAS.h: 13: sprintf(line4, "ATIVAR: %s", habilitaTesteAutomatico == 0 ? "N
      +                          ao" : "Sim");
  3977  00265C  0100               	movlb	0	; () banked
  3978  00265E  51EF               	movf	_habilitaTesteAutomatico& (0+255),w,b
  3979  002660  B4D8               	btfsc	status,2,c
  3980  002662  D004               	goto	l730
  3981                           
  3982                           ; BSR set to: 0
  3983  002664  0EF2               	movlw	low STR_74
  3984  002666  6FB7               	movwf	_tela_testeBombas$1418& (0+255),b
  3985  002668  0E7F               	movlw	high STR_74
  3986  00266A  D004               	goto	L7
  3987  00266C                     l730:
  3988  00266C  FFFF               	dw	65535	; assembler added errata NOP
  3989                           
  3990                           ; BSR set to: 0
  3991                           
  3992                           ; BSR set to: 0
  3993  00266E  0EF6               	movlw	low STR_73
  3994  002670  6FB7               	movwf	_tela_testeBombas$1418& (0+255),b
  3995  002672  0E7F               	movlw	high STR_73
  3996  002674                     L7:
  3997  002674  FFFF               	dw	65535	; assembler added errata NOP
  3998  002676  6FB8               	movwf	(_tela_testeBombas$1418+1)& (0+255),b
  3999                           
  4000                           ; BSR set to: 0
  4001                           
  4002                           ; BSR set to: 0
  4003  002678  0E3C               	movlw	low _line4
  4004  00267A  6FA1               	movwf	sprintf@wh& (0+255),b
  4005  00267C  0E01               	movlw	high _line4
  4006  00267E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4007  002680  0E4C               	movlw	low STR_72
  4008  002682  6FA3               	movwf	sprintf@f& (0+255),b
  4009  002684  0E7F               	movlw	high STR_72
  4010  002686  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4011  002688  C0B7  F0A5         	movff	_tela_testeBombas$1418,?_sprintf+4
  4012  00268C  C0B8  F0A6         	movff	_tela_testeBombas$1418+1,?_sprintf+5
  4013  002690  ECC9  F039         	call	_sprintf	;wreg free
  4014                           
  4015                           ;tela_TESTE_BOMBAS.h: 15: if (btPress(1)) {
  4016  002694  0E01               	movlw	1
  4017  002696  EC4A  F03B         	call	_btPress
  4018  00269A  0900               	iorlw	0
  4019  00269C  B4D8               	btfsc	status,2,c
  4020  00269E  D011               	goto	l733
  4021                           
  4022                           ;tela_TESTE_BOMBAS.h: 16: writeEEPROM_ext(6, intervalo_teste_dia);
  4023  0026A0  C0E8  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  4024  0026A4  0E06               	movlw	6
  4025  0026A6  ECA6  F039         	call	_writeEEPROM_ext
  4026                           
  4027                           ;tela_TESTE_BOMBAS.h: 17: writeEEPROM_ext(11, horario_de_teste);
  4028  0026AA  C0E6  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  4029  0026AE  0E0B               	movlw	11
  4030  0026B0  ECA6  F039         	call	_writeEEPROM_ext
  4031                           
  4032                           ;tela_TESTE_BOMBAS.h: 18: writeEEPROM_ext(15, habilitaTesteAutomatico);
  4033  0026B4  C0EF  F08C         	movff	_habilitaTesteAutomatico,writeEEPROM_ext@data
  4034  0026B8  0E0F               	movlw	15
  4035  0026BA  ECA6  F039         	call	_writeEEPROM_ext
  4036                           
  4037                           ;tela_TESTE_BOMBAS.h: 19: menu_posi = _menu_posi;
  4038  0026BE  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  4039  0026C2                     l733:
  4040  0026C2  FFFF               	dw	65535	; assembler added errata NOP
  4041                           
  4042                           ;tela_TESTE_BOMBAS.h: 20: }
  4043                           ;tela_TESTE_BOMBAS.h: 21: if (btPress(4)) {
  4044  0026C4  0E04               	movlw	4
  4045  0026C6  EC4A  F03B         	call	_btPress
  4046  0026CA  0900               	iorlw	0
  4047  0026CC  B4D8               	btfsc	status,2,c
  4048  0026CE  D069               	goto	l735
  4049                           
  4050                           ;tela_TESTE_BOMBAS.h: 22: option_posi++;
  4051  0026D0  0100               	movlb	0	; () banked
  4052  0026D2  2BDF               	incf	_option_posi& (0+255),f,b
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;tela_TESTE_BOMBAS.h: 23: }
  4056                           ;tela_TESTE_BOMBAS.h: 24: switch (option_posi) {
  4057  0026D4  D066               	goto	l735
  4058  0026D6  FFFF               	dw	65535	; assembler added errata NOP
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;tela_TESTE_BOMBAS.h: 26: blink(line2, 11, 14);
  4062                           
  4063                           ; BSR set to: 0
  4064  0026D8  0E66               	movlw	low _line2
  4065  0026DA  6F80               	movwf	blink@line& (0+255),b
  4066  0026DC  0E01               	movlw	high _line2
  4067  0026DE  6F81               	movwf	(blink@line+1)& (0+255),b
  4068  0026E0  0E0B               	movlw	11
  4069  0026E2  6F82               	movwf	blink@start& (0+255),b
  4070  0026E4  0E0E               	movlw	14
  4071  0026E6  6F83               	movwf	blink@end& (0+255),b
  4072  0026E8  ECE1  F01F         	call	_blink	;wreg free
  4073                           
  4074                           ;tela_TESTE_BOMBAS.h: 27: if (btPress(3)) {
  4075  0026EC  0E03               	movlw	3
  4076  0026EE  EC4A  F03B         	call	_btPress
  4077  0026F2  0900               	iorlw	0
  4078  0026F4  B4D8               	btfsc	status,2,c
  4079  0026F6  D002               	goto	l737
  4080                           
  4081                           ;tela_TESTE_BOMBAS.h: 28: intervalo_teste_dia++;
  4082  0026F8  0100               	movlb	0	; () banked
  4083  0026FA  2BE8               	incf	_intervalo_teste_dia& (0+255),f,b
  4084  0026FC                     l737:
  4085  0026FC  FFFF               	dw	65535	; assembler added errata NOP
  4086                           
  4087                           ;tela_TESTE_BOMBAS.h: 29: }
  4088                           ;tela_TESTE_BOMBAS.h: 30: if (btPress(2)) {
  4089                           
  4090                           ; BSR set to: 0
  4091  0026FE  0E02               	movlw	2
  4092  002700  EC4A  F03B         	call	_btPress
  4093  002704  0900               	iorlw	0
  4094  002706  B4D8               	btfsc	status,2,c
  4095  002708  D059               	goto	l739
  4096                           
  4097                           ;tela_TESTE_BOMBAS.h: 31: intervalo_teste_dia--;
  4098  00270A  0100               	movlb	0	; () banked
  4099  00270C  07E8               	decf	_intervalo_teste_dia& (0+255),f,b
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;tela_TESTE_BOMBAS.h: 32: }
  4103                           ;tela_TESTE_BOMBAS.h: 33: break;
  4104  00270E  D056               	goto	l739
  4105  002710  FFFF               	dw	65535	; assembler added errata NOP
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;tela_TESTE_BOMBAS.h: 35: blink(line3, 9, 11);
  4109                           
  4110                           ; BSR set to: 0
  4111  002712  0E51               	movlw	low _line3
  4112  002714  6F80               	movwf	blink@line& (0+255),b
  4113  002716  0E01               	movlw	high _line3
  4114  002718  6F81               	movwf	(blink@line+1)& (0+255),b
  4115  00271A  0E09               	movlw	9
  4116  00271C  6F82               	movwf	blink@start& (0+255),b
  4117  00271E  0E0B               	movlw	11
  4118  002720  6F83               	movwf	blink@end& (0+255),b
  4119  002722  ECE1  F01F         	call	_blink	;wreg free
  4120                           
  4121                           ;tela_TESTE_BOMBAS.h: 36: if (btPress(3)) {
  4122  002726  0E03               	movlw	3
  4123  002728  EC4A  F03B         	call	_btPress
  4124  00272C  0900               	iorlw	0
  4125  00272E  B4D8               	btfsc	status,2,c
  4126  002730  D002               	goto	l741
  4127                           
  4128                           ;tela_TESTE_BOMBAS.h: 37: horario_de_teste++;
  4129  002732  0100               	movlb	0	; () banked
  4130  002734  2BE6               	incf	_horario_de_teste& (0+255),f,b
  4131  002736                     l741:
  4132  002736  FFFF               	dw	65535	; assembler added errata NOP
  4133                           
  4134                           ;tela_TESTE_BOMBAS.h: 38: }
  4135                           ;tela_TESTE_BOMBAS.h: 39: if (btPress(2)) {
  4136                           
  4137                           ; BSR set to: 0
  4138  002738  0E02               	movlw	2
  4139  00273A  EC4A  F03B         	call	_btPress
  4140  00273E  0900               	iorlw	0
  4141  002740  B4D8               	btfsc	status,2,c
  4142  002742  D002               	goto	l742
  4143                           
  4144                           ;tela_TESTE_BOMBAS.h: 40: horario_de_teste--;
  4145  002744  0100               	movlb	0	; () banked
  4146  002746  07E6               	decf	_horario_de_teste& (0+255),f,b
  4147  002748                     l742:
  4148  002748  FFFF               	dw	65535	; assembler added errata NOP
  4149                           
  4150                           ;tela_TESTE_BOMBAS.h: 41: }
  4151                           ;tela_TESTE_BOMBAS.h: 42: if (horario_de_teste > 23 || horario_de_teste < 0) {
  4152                           
  4153                           ; BSR set to: 0
  4154  00274A  0E18               	movlw	24
  4155  00274C  0100               	movlb	0	; () banked
  4156  00274E  61E6               	cpfslt	_horario_de_teste& (0+255),b
  4157  002750  D001               	goto	l745
  4158  002752  D034               	goto	l739
  4159  002754                     l745:
  4160  002754  FFFF               	dw	65535	; assembler added errata NOP
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;tela_TESTE_BOMBAS.h: 43: horario_de_teste = 0;
  4164                           
  4165                           ; BSR set to: 0
  4166  002756  0E00               	movlw	0
  4167  002758  6FE6               	movwf	_horario_de_teste& (0+255),b
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;tela_TESTE_BOMBAS.h: 44: }
  4171                           ;tela_TESTE_BOMBAS.h: 45: break;
  4172  00275A  D030               	goto	l739
  4173  00275C  FFFF               	dw	65535	; assembler added errata NOP
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;tela_TESTE_BOMBAS.h: 47: blink(line4, 9, 11);
  4177                           
  4178                           ; BSR set to: 0
  4179  00275E  0E3C               	movlw	low _line4
  4180  002760  6F80               	movwf	blink@line& (0+255),b
  4181  002762  0E01               	movlw	high _line4
  4182  002764  6F81               	movwf	(blink@line+1)& (0+255),b
  4183  002766  0E09               	movlw	9
  4184  002768  6F82               	movwf	blink@start& (0+255),b
  4185  00276A  0E0B               	movlw	11
  4186  00276C  6F83               	movwf	blink@end& (0+255),b
  4187  00276E  ECE1  F01F         	call	_blink	;wreg free
  4188                           
  4189                           ;tela_TESTE_BOMBAS.h: 48: if (btPress(3)) {
  4190  002772  0E03               	movlw	3
  4191  002774  EC4A  F03B         	call	_btPress
  4192  002778  0900               	iorlw	0
  4193  00277A  B4D8               	btfsc	status,2,c
  4194  00277C  D003               	goto	l747
  4195                           
  4196                           ;tela_TESTE_BOMBAS.h: 49: habilitaTesteAutomatico = 1;
  4197  00277E  0E01               	movlw	1
  4198  002780  0100               	movlb	0	; () banked
  4199  002782  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  4200  002784                     l747:
  4201  002784  FFFF               	dw	65535	; assembler added errata NOP
  4202                           
  4203                           ;tela_TESTE_BOMBAS.h: 50: }
  4204                           ;tela_TESTE_BOMBAS.h: 51: if (btPress(2)) {
  4205                           
  4206                           ; BSR set to: 0
  4207  002786  0E02               	movlw	2
  4208  002788  EC4A  F03B         	call	_btPress
  4209  00278C  0900               	iorlw	0
  4210  00278E  B4D8               	btfsc	status,2,c
  4211  002790  D015               	goto	l739
  4212                           
  4213                           ;tela_TESTE_BOMBAS.h: 52: habilitaTesteAutomatico = 0;
  4214  002792  0E00               	movlw	0
  4215  002794  0100               	movlb	0	; () banked
  4216  002796  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;tela_TESTE_BOMBAS.h: 53: }
  4220                           ;tela_TESTE_BOMBAS.h: 54: break;
  4221  002798  D011               	goto	l739
  4222  00279A  FFFF               	dw	65535	; assembler added errata NOP
  4223                           
  4224                           ; BSR set to: 0
  4225                           
  4226                           ; BSR set to: 0
  4227  00279C  0E00               	movlw	0
  4228  00279E  6FDF               	movwf	_option_posi& (0+255),b
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;tela_TESTE_BOMBAS.h: 57: }
  4232                           
  4233                           ;tela_TESTE_BOMBAS.h: 56: break;
  4234  0027A0  D00D               	goto	l739
  4235  0027A2                     l735:
  4236  0027A2  FFFF               	dw	65535	; assembler added errata NOP
  4237                           
  4238                           ; BSR set to: 0
  4239  0027A4  0100               	movlb	0	; () banked
  4240  0027A6  51DF               	movf	_option_posi& (0+255),w,b
  4241                           
  4242                           ; Switch size 1, requested type "space"
  4243                           ; Number of cases is 3, Range of values is 0 to 2
  4244                           ; switch strategies available:
  4245                           ; Name         Instructions Cycles
  4246                           ; simple_byte           10     6 (average)
  4247                           ;	Chosen strategy is simple_byte
  4248  0027A8  0A00               	xorlw	0	; case 0
  4249  0027AA  B4D8               	btfsc	status,2,c
  4250  0027AC  D794               	goto	l736
  4251  0027AE  0A01               	xorlw	1	; case 1
  4252  0027B0  B4D8               	btfsc	status,2,c
  4253  0027B2  D7AE               	goto	l740
  4254  0027B4  0A03               	xorlw	3	; case 2
  4255  0027B6  B4D8               	btfsc	status,2,c
  4256  0027B8  D7D1               	goto	l746
  4257  0027BA  D7EF               	goto	l749
  4258  0027BC                     l739:
  4259  0027BC  FFFF               	dw	65535	; assembler added errata NOP
  4260                           
  4261                           ; BSR set to: 0
  4262  0027BE  0012               	return		;funcret
  4263  0027C0  FFFF               	dw	65535	; errata NOP
  4264  0027C2                     __end_of_tela_testeBombas:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           postinc0	equ	0xFEE
  4271                           wreg	equ	0xFE8
  4272                           postdec1	equ	0xFE5
  4273                           fsr1l	equ	0xFE1
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function _tela_ajusteRTC *****************
  4277 ;; Defined at:
  4278 ;;		line 11 in file "tela_RELOGIO.h"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;		None
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4292 ;;      Params:         0       0       0       0       0       0       0
  4293 ;;      Locals:         0       0       0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0
  4295 ;;      Totals:         0       0       0       0       0       0       0
  4296 ;;Total ram usage:        0 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    9
  4299 ;; This function calls:
  4300 ;;		_blink
  4301 ;;		_btPress
  4302 ;;		_setDS1307TimeDate
  4303 ;;		_sprintf
  4304 ;;		_validaRTC
  4305 ;; This function is called by:
  4306 ;;		_main
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text3
  4311  001D94                     __ptext3:
  4312                           	opt stack 0
  4313  001D94                     _tela_ajusteRTC:
  4314                           	opt stack 0
  4315  001D94  FFFF               	dw	65535	; assembler added errata NOP
  4316                           
  4317                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  4318                           
  4319                           ;incstack = 0
  4320  001D96  0E7B               	movlw	low _line1
  4321  001D98  0100               	movlb	0	; () banked
  4322  001D9A  6FA1               	movwf	sprintf@wh& (0+255),b
  4323  001D9C  0E01               	movlw	high _line1
  4324  001D9E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4325  001DA0  0ECC               	movlw	low STR_65
  4326  001DA2  6FA3               	movwf	sprintf@f& (0+255),b
  4327  001DA4  0E7F               	movlw	high STR_65
  4328  001DA6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4329  001DA8  ECC9  F039         	call	_sprintf	;wreg free
  4330                           
  4331                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  4332  001DAC  0E66               	movlw	low _line2
  4333  001DAE  0100               	movlb	0	; () banked
  4334  001DB0  6FA1               	movwf	sprintf@wh& (0+255),b
  4335  001DB2  0E01               	movlw	high _line2
  4336  001DB4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4337  001DB6  0E3A               	movlw	low STR_66
  4338  001DB8  6FA3               	movwf	sprintf@f& (0+255),b
  4339  001DBA  0E7E               	movlw	high STR_66
  4340  001DBC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4341  001DBE  C07A  F0A5         	movff	_rtc+4,?_sprintf+4
  4342  001DC2  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4343  001DC4  C07B  F0A7         	movff	_rtc+5,?_sprintf+6
  4344  001DC8  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4345  001DCA  C07C  F0A9         	movff	_rtc+6,?_sprintf+8
  4346  001DCE  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4347  001DD0  ECC9  F039         	call	_sprintf	;wreg free
  4348                           
  4349                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  4350  001DD4  0E86               	movlw	low (_line1+11)
  4351  001DD6  0100               	movlb	0	; () banked
  4352  001DD8  6FA1               	movwf	sprintf@wh& (0+255),b
  4353  001DDA  0E01               	movlw	high (_line1+11)
  4354  001DDC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4355  001DDE  0EC6               	movlw	low STR_67
  4356  001DE0  6FA3               	movwf	sprintf@f& (0+255),b
  4357  001DE2  0E7F               	movlw	high STR_67
  4358  001DE4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4359  001DE6  ECC9  F039         	call	_sprintf	;wreg free
  4360                           
  4361                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  4362  001DEA  0E71               	movlw	low (_line2+11)
  4363  001DEC  0100               	movlb	0	; () banked
  4364  001DEE  6FA1               	movwf	sprintf@wh& (0+255),b
  4365  001DF0  0E01               	movlw	high (_line2+11)
  4366  001DF2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4367  001DF4  0E49               	movlw	low STR_68
  4368  001DF6  6FA3               	movwf	sprintf@f& (0+255),b
  4369  001DF8  0E7E               	movlw	high STR_68
  4370  001DFA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4371  001DFC  C079  F0A5         	movff	_rtc+3,?_sprintf+4
  4372  001E00  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4373  001E02  C078  F0A7         	movff	_rtc+2,?_sprintf+6
  4374  001E06  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4375  001E08  C077  F0A9         	movff	_rtc+1,?_sprintf+8
  4376  001E0C  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4377  001E0E  ECC9  F039         	call	_sprintf	;wreg free
  4378                           
  4379                           ;tela_RELOGIO.h: 17: if (btPress(4)) {
  4380  001E12  0E04               	movlw	4
  4381  001E14  EC4A  F03B         	call	_btPress
  4382  001E18  0900               	iorlw	0
  4383  001E1A  B4D8               	btfsc	status,2,c
  4384  001E1C  D004               	goto	l703
  4385                           
  4386                           ;tela_RELOGIO.h: 18: ajst_rtc = 1;
  4387  001E1E  0E01               	movlw	1
  4388  001E20  6E68               	movwf	_ajst_rtc,c
  4389                           
  4390                           ;tela_RELOGIO.h: 19: option_posi++;
  4391  001E22  0100               	movlb	0	; () banked
  4392  001E24  2BDF               	incf	_option_posi& (0+255),f,b
  4393  001E26                     l703:
  4394  001E26  FFFF               	dw	65535	; assembler added errata NOP
  4395                           
  4396                           ;tela_RELOGIO.h: 20: }
  4397                           ;tela_RELOGIO.h: 21: if (btPress(1)) {
  4398                           
  4399                           ; BSR set to: 0
  4400  001E28  0E01               	movlw	1
  4401  001E2A  EC4A  F03B         	call	_btPress
  4402  001E2E  0900               	iorlw	0
  4403  001E30  B4D8               	btfsc	status,2,c
  4404  001E32  D0B0               	goto	l705
  4405                           
  4406                           ;tela_RELOGIO.h: 22: ajst_rtc = 0;
  4407  001E34  0E00               	movlw	0
  4408  001E36  6E68               	movwf	_ajst_rtc,c
  4409                           
  4410                           ;tela_RELOGIO.h: 23: option_posi = 0;
  4411  001E38  0E00               	movlw	0
  4412  001E3A  0100               	movlb	0	; () banked
  4413  001E3C  6FDF               	movwf	_option_posi& (0+255),b
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;tela_RELOGIO.h: 24: setDS1307TimeDate(&rtc);
  4417  001E3E  0E76               	movlw	low _rtc
  4418  001E40  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  4419  001E42  0E00               	movlw	high _rtc
  4420  001E44  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  4421  001E46  EC5E  F019         	call	_setDS1307TimeDate	;wreg free
  4422                           
  4423                           ;tela_RELOGIO.h: 25: menu_posi = _menu_posi;
  4424  001E4A  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  4425                           
  4426                           ;tela_RELOGIO.h: 26: _min++;
  4427  001E4E  0100               	movlb	0	; () banked
  4428  001E50  2BED               	incf	__min& (0+255),f,b
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;tela_RELOGIO.h: 27: }
  4432                           ;tela_RELOGIO.h: 28: switch (option_posi) {
  4433  001E52  D0A0               	goto	l705
  4434  001E54  FFFF               	dw	65535	; assembler added errata NOP
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;tela_RELOGIO.h: 30: blink(line2, 1, 2);
  4438                           
  4439                           ; BSR set to: 0
  4440  001E56  0E66               	movlw	low _line2
  4441  001E58  6F80               	movwf	blink@line& (0+255),b
  4442  001E5A  0E01               	movlw	high _line2
  4443  001E5C  6F81               	movwf	(blink@line+1)& (0+255),b
  4444  001E5E  0E01               	movlw	1
  4445  001E60  6F82               	movwf	blink@start& (0+255),b
  4446  001E62  0E02               	movlw	2
  4447  001E64  6F83               	movwf	blink@end& (0+255),b
  4448  001E66  ECE1  F01F         	call	_blink	;wreg free
  4449                           
  4450                           ;tela_RELOGIO.h: 31: if (btPress(3)) {
  4451  001E6A  0E03               	movlw	3
  4452  001E6C  EC4A  F03B         	call	_btPress
  4453  001E70  0900               	iorlw	0
  4454  001E72  A4D8               	btfss	status,2,c
  4455                           
  4456                           ;tela_RELOGIO.h: 32: rtc.date++;
  4457  001E74  2A7A               	incf	_rtc+4,f,c
  4458                           
  4459                           ;tela_RELOGIO.h: 33: }
  4460                           ;tela_RELOGIO.h: 34: if (btPress(2)) {
  4461  001E76  0E02               	movlw	2
  4462  001E78  EC4A  F03B         	call	_btPress
  4463  001E7C  0900               	iorlw	0
  4464  001E7E  B4D8               	btfsc	status,2,c
  4465  001E80  D09F               	goto	l709
  4466                           
  4467                           ;tela_RELOGIO.h: 35: rtc.date--;
  4468  001E82  067A               	decf	_rtc+4,f,c
  4469                           
  4470                           ;tela_RELOGIO.h: 36: }
  4471                           ;tela_RELOGIO.h: 37: break;
  4472  001E84  D09D               	goto	l709
  4473  001E86  FFFF               	dw	65535	; assembler added errata NOP
  4474                           
  4475                           ;tela_RELOGIO.h: 39: blink(line2, 4, 5);
  4476  001E88  0E66               	movlw	low _line2
  4477  001E8A  0100               	movlb	0	; () banked
  4478  001E8C  6F80               	movwf	blink@line& (0+255),b
  4479  001E8E  0E01               	movlw	high _line2
  4480  001E90  6F81               	movwf	(blink@line+1)& (0+255),b
  4481  001E92  0E04               	movlw	4
  4482  001E94  6F82               	movwf	blink@start& (0+255),b
  4483  001E96  0E05               	movlw	5
  4484  001E98  6F83               	movwf	blink@end& (0+255),b
  4485  001E9A  ECE1  F01F         	call	_blink	;wreg free
  4486                           
  4487                           ;tela_RELOGIO.h: 40: if (btPress(3)) {
  4488  001E9E  0E03               	movlw	3
  4489  001EA0  EC4A  F03B         	call	_btPress
  4490  001EA4  0900               	iorlw	0
  4491  001EA6  A4D8               	btfss	status,2,c
  4492                           
  4493                           ;tela_RELOGIO.h: 41: rtc.month++;
  4494  001EA8  2A7B               	incf	_rtc+5,f,c
  4495                           
  4496                           ;tela_RELOGIO.h: 42: }
  4497                           ;tela_RELOGIO.h: 43: if (btPress(2)) {
  4498  001EAA  0E02               	movlw	2
  4499  001EAC  EC4A  F03B         	call	_btPress
  4500  001EB0  0900               	iorlw	0
  4501  001EB2  B4D8               	btfsc	status,2,c
  4502  001EB4  D085               	goto	l709
  4503                           
  4504                           ;tela_RELOGIO.h: 44: rtc.month--;
  4505  001EB6  067B               	decf	_rtc+5,f,c
  4506                           
  4507                           ;tela_RELOGIO.h: 45: }
  4508                           ;tela_RELOGIO.h: 46: break;
  4509  001EB8  D083               	goto	l709
  4510  001EBA  FFFF               	dw	65535	; assembler added errata NOP
  4511                           
  4512                           ;tela_RELOGIO.h: 48: blink(line2, 7, 8);
  4513  001EBC  0E66               	movlw	low _line2
  4514  001EBE  0100               	movlb	0	; () banked
  4515  001EC0  6F80               	movwf	blink@line& (0+255),b
  4516  001EC2  0E01               	movlw	high _line2
  4517  001EC4  6F81               	movwf	(blink@line+1)& (0+255),b
  4518  001EC6  0E07               	movlw	7
  4519  001EC8  6F82               	movwf	blink@start& (0+255),b
  4520  001ECA  0E08               	movlw	8
  4521  001ECC  6F83               	movwf	blink@end& (0+255),b
  4522  001ECE  ECE1  F01F         	call	_blink	;wreg free
  4523                           
  4524                           ;tela_RELOGIO.h: 49: if (btPress(3)) {
  4525  001ED2  0E03               	movlw	3
  4526  001ED4  EC4A  F03B         	call	_btPress
  4527  001ED8  0900               	iorlw	0
  4528  001EDA  A4D8               	btfss	status,2,c
  4529                           
  4530                           ;tela_RELOGIO.h: 50: rtc.year++;
  4531  001EDC  2A7C               	incf	_rtc+6,f,c
  4532                           
  4533                           ;tela_RELOGIO.h: 51: }
  4534                           ;tela_RELOGIO.h: 52: if (btPress(2)) {
  4535  001EDE  0E02               	movlw	2
  4536  001EE0  EC4A  F03B         	call	_btPress
  4537  001EE4  0900               	iorlw	0
  4538  001EE6  B4D8               	btfsc	status,2,c
  4539  001EE8  D06B               	goto	l709
  4540                           
  4541                           ;tela_RELOGIO.h: 53: rtc.year--;
  4542  001EEA  067C               	decf	_rtc+6,f,c
  4543                           
  4544                           ;tela_RELOGIO.h: 54: }
  4545                           ;tela_RELOGIO.h: 55: break;
  4546  001EEC  D069               	goto	l709
  4547  001EEE  FFFF               	dw	65535	; assembler added errata NOP
  4548                           
  4549                           ;tela_RELOGIO.h: 57: blink(line2, 12, 13);
  4550  001EF0  0E66               	movlw	low _line2
  4551  001EF2  0100               	movlb	0	; () banked
  4552  001EF4  6F80               	movwf	blink@line& (0+255),b
  4553  001EF6  0E01               	movlw	high _line2
  4554  001EF8  6F81               	movwf	(blink@line+1)& (0+255),b
  4555  001EFA  0E0C               	movlw	12
  4556  001EFC  6F82               	movwf	blink@start& (0+255),b
  4557  001EFE  0E0D               	movlw	13
  4558  001F00  6F83               	movwf	blink@end& (0+255),b
  4559  001F02  ECE1  F01F         	call	_blink	;wreg free
  4560                           
  4561                           ;tela_RELOGIO.h: 58: if (btPress(3)) {
  4562  001F06  0E03               	movlw	3
  4563  001F08  EC4A  F03B         	call	_btPress
  4564  001F0C  0900               	iorlw	0
  4565  001F0E  A4D8               	btfss	status,2,c
  4566                           
  4567                           ;tela_RELOGIO.h: 59: rtc.hour++;
  4568  001F10  2A79               	incf	_rtc+3,f,c
  4569                           
  4570                           ;tela_RELOGIO.h: 60: }
  4571                           ;tela_RELOGIO.h: 61: if (btPress(2)) {
  4572  001F12  0E02               	movlw	2
  4573  001F14  EC4A  F03B         	call	_btPress
  4574  001F18  0900               	iorlw	0
  4575  001F1A  B4D8               	btfsc	status,2,c
  4576  001F1C  D051               	goto	l709
  4577                           
  4578                           ;tela_RELOGIO.h: 62: rtc.hour--;
  4579  001F1E  0679               	decf	_rtc+3,f,c
  4580                           
  4581                           ;tela_RELOGIO.h: 63: }
  4582                           ;tela_RELOGIO.h: 64: break;
  4583  001F20  D04F               	goto	l709
  4584  001F22  FFFF               	dw	65535	; assembler added errata NOP
  4585                           
  4586                           ;tela_RELOGIO.h: 66: blink(line2, 15, 16);
  4587  001F24  0E66               	movlw	low _line2
  4588  001F26  0100               	movlb	0	; () banked
  4589  001F28  6F80               	movwf	blink@line& (0+255),b
  4590  001F2A  0E01               	movlw	high _line2
  4591  001F2C  6F81               	movwf	(blink@line+1)& (0+255),b
  4592  001F2E  0E0F               	movlw	15
  4593  001F30  6F82               	movwf	blink@start& (0+255),b
  4594  001F32  0E10               	movlw	16
  4595  001F34  6F83               	movwf	blink@end& (0+255),b
  4596  001F36  ECE1  F01F         	call	_blink	;wreg free
  4597                           
  4598                           ;tela_RELOGIO.h: 67: if (btPress(3)) {
  4599  001F3A  0E03               	movlw	3
  4600  001F3C  EC4A  F03B         	call	_btPress
  4601  001F40  0900               	iorlw	0
  4602  001F42  A4D8               	btfss	status,2,c
  4603                           
  4604                           ;tela_RELOGIO.h: 68: rtc.min++;
  4605  001F44  2A78               	incf	_rtc+2,f,c
  4606                           
  4607                           ;tela_RELOGIO.h: 69: }
  4608                           ;tela_RELOGIO.h: 70: if (btPress(2)) {
  4609  001F46  0E02               	movlw	2
  4610  001F48  EC4A  F03B         	call	_btPress
  4611  001F4C  0900               	iorlw	0
  4612  001F4E  B4D8               	btfsc	status,2,c
  4613  001F50  D037               	goto	l709
  4614                           
  4615                           ;tela_RELOGIO.h: 71: rtc.min--;
  4616  001F52  0678               	decf	_rtc+2,f,c
  4617                           
  4618                           ;tela_RELOGIO.h: 72: }
  4619                           ;tela_RELOGIO.h: 73: break;
  4620  001F54  D035               	goto	l709
  4621  001F56  FFFF               	dw	65535	; assembler added errata NOP
  4622                           
  4623                           ;tela_RELOGIO.h: 75: blink(line2, 18, 19);
  4624  001F58  0E66               	movlw	low _line2
  4625  001F5A  0100               	movlb	0	; () banked
  4626  001F5C  6F80               	movwf	blink@line& (0+255),b
  4627  001F5E  0E01               	movlw	high _line2
  4628  001F60  6F81               	movwf	(blink@line+1)& (0+255),b
  4629  001F62  0E12               	movlw	18
  4630  001F64  6F82               	movwf	blink@start& (0+255),b
  4631  001F66  0E13               	movlw	19
  4632  001F68  6F83               	movwf	blink@end& (0+255),b
  4633  001F6A  ECE1  F01F         	call	_blink	;wreg free
  4634                           
  4635                           ;tela_RELOGIO.h: 76: if (btPress(3)) {
  4636  001F6E  0E03               	movlw	3
  4637  001F70  EC4A  F03B         	call	_btPress
  4638  001F74  0900               	iorlw	0
  4639  001F76  A4D8               	btfss	status,2,c
  4640                           
  4641                           ;tela_RELOGIO.h: 77: rtc.sec++;
  4642  001F78  2A77               	incf	_rtc+1,f,c
  4643                           
  4644                           ;tela_RELOGIO.h: 78: }
  4645                           ;tela_RELOGIO.h: 79: if (btPress(2)) {
  4646  001F7A  0E02               	movlw	2
  4647  001F7C  EC4A  F03B         	call	_btPress
  4648  001F80  0900               	iorlw	0
  4649  001F82  B4D8               	btfsc	status,2,c
  4650  001F84  D01D               	goto	l709
  4651                           
  4652                           ;tela_RELOGIO.h: 80: rtc.sec--;
  4653  001F86  0677               	decf	_rtc+1,f,c
  4654                           
  4655                           ;tela_RELOGIO.h: 81: }
  4656                           ;tela_RELOGIO.h: 82: break;
  4657  001F88  D01B               	goto	l709
  4658  001F8A  FFFF               	dw	65535	; assembler added errata NOP
  4659  001F8C  0E01               	movlw	1
  4660  001F8E  0100               	movlb	0	; () banked
  4661  001F90  6FDF               	movwf	_option_posi& (0+255),b
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;tela_RELOGIO.h: 85: }
  4665                           
  4666                           ;tela_RELOGIO.h: 84: break;
  4667  001F92  D016               	goto	l709
  4668  001F94                     l705:
  4669  001F94  FFFF               	dw	65535	; assembler added errata NOP
  4670                           
  4671                           ; BSR set to: 0
  4672  001F96  0100               	movlb	0	; () banked
  4673  001F98  51DF               	movf	_option_posi& (0+255),w,b
  4674                           
  4675                           ; Switch size 1, requested type "space"
  4676                           ; Number of cases is 6, Range of values is 1 to 6
  4677                           ; switch strategies available:
  4678                           ; Name         Instructions Cycles
  4679                           ; simple_byte           19    10 (average)
  4680                           ;	Chosen strategy is simple_byte
  4681  001F9A  0A01               	xorlw	1	; case 1
  4682  001F9C  B4D8               	btfsc	status,2,c
  4683  001F9E  D75A               	goto	l706
  4684  001FA0  0A03               	xorlw	3	; case 2
  4685  001FA2  B4D8               	btfsc	status,2,c
  4686  001FA4  D770               	goto	l710
  4687  001FA6  0A01               	xorlw	1	; case 3
  4688  001FA8  B4D8               	btfsc	status,2,c
  4689  001FAA  D787               	goto	l713
  4690  001FAC  0A07               	xorlw	7	; case 4
  4691  001FAE  B4D8               	btfsc	status,2,c
  4692  001FB0  D79E               	goto	l716
  4693  001FB2  0A01               	xorlw	1	; case 5
  4694  001FB4  B4D8               	btfsc	status,2,c
  4695  001FB6  D7B5               	goto	l719
  4696  001FB8  0A03               	xorlw	3	; case 6
  4697  001FBA  B4D8               	btfsc	status,2,c
  4698  001FBC  D7CC               	goto	l722
  4699  001FBE  D7E5               	goto	l725
  4700  001FC0                     l709:
  4701  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  4702                           
  4703                           ;tela_RELOGIO.h: 86: validaRTC();
  4704                           
  4705                           ; BSR set to: 0
  4706  001FC2  EC11  F03A         	call	_validaRTC	;wreg free
  4707  001FC6  0012               	return		;funcret
  4708  001FC8  FFFF               	dw	65535	; errata NOP
  4709  001FCA                     __end_of_tela_ajusteRTC:
  4710                           	opt stack 0
  4711                           tblptru	equ	0xFF8
  4712                           tblptrh	equ	0xFF7
  4713                           tblptrl	equ	0xFF6
  4714                           tablat	equ	0xFF5
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           postdec1	equ	0xFE5
  4718                           fsr1l	equ	0xFE1
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _validaRTC *****************
  4722 ;; Defined at:
  4723 ;;		line 108 in file "ds1307.h"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  2  290[None  ] int 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4737 ;;      Params:         0       0       0       0       0       0       0
  4738 ;;      Locals:         0       0       0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0
  4740 ;;      Totals:         0       0       0       0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    6
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_tela_ajusteRTC
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text4
  4752  007422                     __ptext4:
  4753                           	opt stack 0
  4754  007422                     _validaRTC:
  4755                           	opt stack 0
  4756  007422  FFFF               	dw	65535	; assembler added errata NOP
  4757                           
  4758                           ;ds1307.h: 109: if (rtc.date > 31) rtc.date = 0;
  4759                           
  4760                           ;incstack = 0
  4761  007424  0E1F               	movlw	31
  4762  007426  647A               	cpfsgt	_rtc+4,c
  4763  007428  D002               	goto	l291
  4764  00742A  0E00               	movlw	0
  4765  00742C  6E7A               	movwf	_rtc+4,c
  4766  00742E                     l291:
  4767  00742E  FFFF               	dw	65535	; assembler added errata NOP
  4768                           
  4769                           ;ds1307.h: 110: if (rtc.hour > 23) rtc.hour = 0;
  4770  007430  0E17               	movlw	23
  4771  007432  6479               	cpfsgt	_rtc+3,c
  4772  007434  D002               	goto	l292
  4773  007436  0E00               	movlw	0
  4774  007438  6E79               	movwf	_rtc+3,c
  4775  00743A                     l292:
  4776  00743A  FFFF               	dw	65535	; assembler added errata NOP
  4777                           
  4778                           ;ds1307.h: 111: if (rtc.min > 59) rtc.min = 0;
  4779  00743C  0E3B               	movlw	59
  4780  00743E  6478               	cpfsgt	_rtc+2,c
  4781  007440  D002               	goto	l293
  4782  007442  0E00               	movlw	0
  4783  007444  6E78               	movwf	_rtc+2,c
  4784  007446                     l293:
  4785  007446  FFFF               	dw	65535	; assembler added errata NOP
  4786                           
  4787                           ;ds1307.h: 112: if (rtc.month > 12) rtc.month = 0;
  4788  007448  0E0C               	movlw	12
  4789  00744A  647B               	cpfsgt	_rtc+5,c
  4790  00744C  D002               	goto	l294
  4791  00744E  0E00               	movlw	0
  4792  007450  6E7B               	movwf	_rtc+5,c
  4793  007452                     l294:
  4794  007452  FFFF               	dw	65535	; assembler added errata NOP
  4795                           
  4796                           ;ds1307.h: 113: if (rtc.sec > 59) rtc.sec = 0;
  4797  007454  0E3B               	movlw	59
  4798  007456  6477               	cpfsgt	_rtc+1,c
  4799  007458  D002               	goto	l295
  4800  00745A  0E00               	movlw	0
  4801  00745C  6E77               	movwf	_rtc+1,c
  4802  00745E                     l295:
  4803  00745E  FFFF               	dw	65535	; assembler added errata NOP
  4804                           
  4805                           ;ds1307.h: 114: if (rtc.year > 99) rtc.year = 0;
  4806  007460  0E63               	movlw	99
  4807  007462  647C               	cpfsgt	_rtc+6,c
  4808  007464  D002               	goto	l296
  4809  007466  0E00               	movlw	0
  4810  007468  6E7C               	movwf	_rtc+6,c
  4811  00746A                     l296:
  4812  00746A  FFFF               	dw	65535	; assembler added errata NOP
  4813  00746C  0012               	return		;funcret
  4814  00746E  FFFF               	dw	65535	; errata NOP
  4815  007470                     __end_of_validaRTC:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           postdec1	equ	0xFE5
  4824                           fsr1l	equ	0xFE1
  4825                           status	equ	0xFD8
  4826                           
  4827 ;; *************** function _setDS1307TimeDate *****************
  4828 ;; Defined at:
  4829 ;;		line 36 in file "ds1307.h"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  4832 ;;		 -> rtc(7), 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4844 ;;      Params:         0       2       0       0       0       0       0
  4845 ;;      Locals:         0       0       0       0       0       0       0
  4846 ;;      Temps:          0       1       0       0       0       0       0
  4847 ;;      Totals:         0       3       0       0       0       0       0
  4848 ;;Total ram usage:        3 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; Hardware stack levels required when called:    8
  4851 ;; This function calls:
  4852 ;;		_DECtoBCD
  4853 ;;		_I2C_Start
  4854 ;;		_I2C_Stop
  4855 ;;		_I2C_Write
  4856 ;; This function is called by:
  4857 ;;		_tela_ajusteRTC
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text5
  4862  0032BC                     __ptext5:
  4863                           	opt stack 0
  4864  0032BC                     _setDS1307TimeDate:
  4865                           	opt stack 0
  4866  0032BC  FFFF               	dw	65535	; assembler added errata NOP
  4867                           
  4868                           ;ds1307.h: 38: I2C_Start();
  4869                           
  4870                           ;incstack = 0
  4871  0032BE  EC68  F036         	call	_I2C_Start	;wreg free
  4872                           
  4873                           ;ds1307.h: 39: I2C_Write(0xD0);
  4874  0032C2  0E00               	movlw	0
  4875  0032C4  0100               	movlb	0	; () banked
  4876  0032C6  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4877  0032C8  0ED0               	movlw	208
  4878  0032CA  6F8A               	movwf	I2C_Write@d& (0+255),b
  4879  0032CC  EC81  F036         	call	_I2C_Write	;wreg free
  4880                           
  4881                           ;ds1307.h: 40: I2C_Write(0x00);
  4882  0032D0  0E00               	movlw	0
  4883  0032D2  0100               	movlb	0	; () banked
  4884  0032D4  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4885  0032D6  0E00               	movlw	0
  4886  0032D8  6F8A               	movwf	I2C_Write@d& (0+255),b
  4887  0032DA  EC81  F036         	call	_I2C_Write	;wreg free
  4888                           
  4889                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  4890  0032DE  0100               	movlb	0	; () banked
  4891  0032E0  EE20 F001          	lfsr	2,1
  4892  0032E4  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4893  0032E6  26D9               	addwf	fsr2l,f,c
  4894  0032E8  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4895  0032EA  22DA               	addwfc	fsr2h,f,c
  4896  0032EC  50DF               	movf	indf2,w,c
  4897  0032EE  EC42  F039         	call	_DECtoBCD
  4898  0032F2  0100               	movlb	0	; () banked
  4899  0032F4  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4900  0032F6  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4901  0032F8  6F8A               	movwf	I2C_Write@d& (0+255),b
  4902  0032FA  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4903  0032FC  EC81  F036         	call	_I2C_Write	;wreg free
  4904                           
  4905                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  4906  003300  0100               	movlb	0	; () banked
  4907  003302  EE20 F002          	lfsr	2,2
  4908  003306  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4909  003308  26D9               	addwf	fsr2l,f,c
  4910  00330A  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4911  00330C  22DA               	addwfc	fsr2h,f,c
  4912  00330E  50DF               	movf	indf2,w,c
  4913  003310  EC42  F039         	call	_DECtoBCD
  4914  003314  0100               	movlb	0	; () banked
  4915  003316  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4916  003318  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4917  00331A  6F8A               	movwf	I2C_Write@d& (0+255),b
  4918  00331C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4919  00331E  EC81  F036         	call	_I2C_Write	;wreg free
  4920                           
  4921                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  4922  003322  0100               	movlb	0	; () banked
  4923  003324  EE20 F003          	lfsr	2,3
  4924  003328  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4925  00332A  26D9               	addwf	fsr2l,f,c
  4926  00332C  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4927  00332E  22DA               	addwfc	fsr2h,f,c
  4928  003330  50DF               	movf	indf2,w,c
  4929  003332  EC42  F039         	call	_DECtoBCD
  4930  003336  0100               	movlb	0	; () banked
  4931  003338  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4932  00333A  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4933  00333C  6F8A               	movwf	I2C_Write@d& (0+255),b
  4934  00333E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4935  003340  EC81  F036         	call	_I2C_Write	;wreg free
  4936                           
  4937                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  4938  003344  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  4939  003348  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  4940  00334C  50DF               	movf	indf2,w,c
  4941  00334E  EC42  F039         	call	_DECtoBCD
  4942  003352  0100               	movlb	0	; () banked
  4943  003354  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4944  003356  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4945  003358  6F8A               	movwf	I2C_Write@d& (0+255),b
  4946  00335A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4947  00335C  EC81  F036         	call	_I2C_Write	;wreg free
  4948                           
  4949                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  4950  003360  0100               	movlb	0	; () banked
  4951  003362  EE20 F004          	lfsr	2,4
  4952  003366  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4953  003368  26D9               	addwf	fsr2l,f,c
  4954  00336A  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4955  00336C  22DA               	addwfc	fsr2h,f,c
  4956  00336E  50DF               	movf	indf2,w,c
  4957  003370  EC42  F039         	call	_DECtoBCD
  4958  003374  0100               	movlb	0	; () banked
  4959  003376  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4960  003378  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4961  00337A  6F8A               	movwf	I2C_Write@d& (0+255),b
  4962  00337C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4963  00337E  EC81  F036         	call	_I2C_Write	;wreg free
  4964                           
  4965                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  4966  003382  0100               	movlb	0	; () banked
  4967  003384  EE20 F005          	lfsr	2,5
  4968  003388  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4969  00338A  26D9               	addwf	fsr2l,f,c
  4970  00338C  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4971  00338E  22DA               	addwfc	fsr2h,f,c
  4972  003390  50DF               	movf	indf2,w,c
  4973  003392  EC42  F039         	call	_DECtoBCD
  4974  003396  0100               	movlb	0	; () banked
  4975  003398  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4976  00339A  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4977  00339C  6F8A               	movwf	I2C_Write@d& (0+255),b
  4978  00339E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4979  0033A0  EC81  F036         	call	_I2C_Write	;wreg free
  4980                           
  4981                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  4982  0033A4  0100               	movlb	0	; () banked
  4983  0033A6  EE20 F006          	lfsr	2,6
  4984  0033AA  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4985  0033AC  26D9               	addwf	fsr2l,f,c
  4986  0033AE  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4987  0033B0  22DA               	addwfc	fsr2h,f,c
  4988  0033B2  50DF               	movf	indf2,w,c
  4989  0033B4  EC42  F039         	call	_DECtoBCD
  4990  0033B8  0100               	movlb	0	; () banked
  4991  0033BA  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4992  0033BC  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4993  0033BE  6F8A               	movwf	I2C_Write@d& (0+255),b
  4994  0033C0  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4995  0033C2  EC81  F036         	call	_I2C_Write	;wreg free
  4996                           
  4997                           ;ds1307.h: 48: I2C_Stop();
  4998  0033C6  EC6E  F036         	call	_I2C_Stop	;wreg free
  4999  0033CA  0012               	return		;funcret
  5000  0033CC  FFFF               	dw	65535	; errata NOP
  5001  0033CE                     __end_of_setDS1307TimeDate:
  5002                           	opt stack 0
  5003                           tblptru	equ	0xFF8
  5004                           tblptrh	equ	0xFF7
  5005                           tblptrl	equ	0xFF6
  5006                           tablat	equ	0xFF5
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           postdec1	equ	0xFE5
  5010                           fsr1l	equ	0xFE1
  5011                           indf2	equ	0xFDF
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function _DECtoBCD *****************
  5017 ;; Defined at:
  5018 ;;		line 25 in file "function.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  val             1    wreg     unsigned char 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  val             1    8[BANK0 ] unsigned char 
  5023 ;;  res             1    9[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      unsigned char 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5033 ;;      Params:         0       0       0       0       0       0       0
  5034 ;;      Locals:         0       2       0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0
  5036 ;;      Totals:         0       2       0       0       0       0       0
  5037 ;;Total ram usage:        2 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    7
  5040 ;; This function calls:
  5041 ;;		___awdiv
  5042 ;;		___awmod
  5043 ;; This function is called by:
  5044 ;;		_setDS1307TimeDate
  5045 ;;		_setDS1307Time
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text6
  5050  007284                     __ptext6:
  5051                           	opt stack 0
  5052  007284                     _DECtoBCD:
  5053                           	opt stack 0
  5054  007284  FFFF               	dw	65535	; assembler added errata NOP
  5055                           
  5056                           ;incstack = 0
  5057                           ;DECtoBCD@val stored from wreg
  5058  007286  0100               	movlb	0	; () banked
  5059  007288  6F88               	movwf	DECtoBCD@val& (0+255),b
  5060                           
  5061                           ;function.c: 26: char res;
  5062                           ;function.c: 27: res = (val / 10) << 4;
  5063  00728A  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  5064  00728E  0100               	movlb	0	; () banked
  5065  007290  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5066  007292  0E00               	movlw	0
  5067  007294  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5068  007296  0E0A               	movlw	10
  5069  007298  6F82               	movwf	___awdiv@divisor& (0+255),b
  5070  00729A  ECFB  F01E         	call	___awdiv	;wreg free
  5071  00729E  0100               	movlb	0	; () banked
  5072  0072A0  3980               	swapf	?___awdiv& (0+255),w,b
  5073  0072A2  0BF0               	andlw	240
  5074  0072A4  6F89               	movwf	DECtoBCD@res& (0+255),b
  5075                           
  5076                           ;function.c: 28: res = res | (val % 10);
  5077  0072A6  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  5078  0072AA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5079  0072AC  0E00               	movlw	0
  5080  0072AE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5081  0072B0  0E0A               	movlw	10
  5082  0072B2  6F82               	movwf	___awmod@divisor& (0+255),b
  5083  0072B4  EC34  F03C         	call	___awmod	;wreg free
  5084  0072B8  0100               	movlb	0	; () banked
  5085  0072BA  5180               	movf	?___awmod& (0+255),w,b
  5086  0072BC  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  5087  0072BE  6F89               	movwf	DECtoBCD@res& (0+255),b
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;function.c: 29: return res;
  5091  0072C0  5189               	movf	DECtoBCD@res& (0+255),w,b
  5092                           
  5093                           ; BSR set to: 0
  5094                           
  5095                           ; BSR set to: 0
  5096  0072C2  0012               	return		;funcret
  5097  0072C4  FFFF               	dw	65535	; errata NOP
  5098  0072C6                     __end_of_DECtoBCD:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           fsr1l	equ	0xFE1
  5108                           indf2	equ	0xFDF
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _telaPrincipal *****************
  5114 ;; Defined at:
  5115 ;;		line 22 in file "tela_PRINCIPAL.h"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;		None
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      void 
  5122 ;; Registers used:
  5123 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5129 ;;      Params:         0       0       0       0       0       0       0
  5130 ;;      Locals:         0       2       0       0       0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0
  5132 ;;      Totals:         0       2       0       0       0       0       0
  5133 ;;Total ram usage:        2 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:   10
  5136 ;; This function calls:
  5137 ;;		_blink
  5138 ;;		_btPress
  5139 ;;		_clearShiftREG
  5140 ;;		_intToFloatStr
  5141 ;;		_resetParametros
  5142 ;;		_sprintf
  5143 ;; This function is called by:
  5144 ;;		_main
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           	psect	text7
  5149  0021FE                     __ptext7:
  5150                           	opt stack 0
  5151  0021FE                     _telaPrincipal:
  5152                           	opt stack 0
  5153  0021FE  FFFF               	dw	65535	; assembler added errata NOP
  5154                           
  5155                           ;tela_PRINCIPAL.h: 24: sprintf(&line1[2], " %02d:%02d:%02d %02d/%02d", _hor, _min, _sec,
      +                           _dia, _mes);
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;incstack = 0
  5159  002200  0E7D               	movlw	low (_line1+2)
  5160  002202  0100               	movlb	0	; () banked
  5161  002204  6FA1               	movwf	sprintf@wh& (0+255),b
  5162  002206  0E01               	movlw	high (_line1+2)
  5163  002208  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5164  00220A  0E1B               	movlw	low STR_55
  5165  00220C  6FA3               	movwf	sprintf@f& (0+255),b
  5166  00220E  0E7C               	movlw	high STR_55
  5167  002210  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5168  002212  C0EC  F0A5         	movff	__hor,?_sprintf+4
  5169  002216  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  5170  002218  C0ED  F0A7         	movff	__min,?_sprintf+6
  5171  00221C  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5172  00221E  C0EE  F0A9         	movff	__sec,?_sprintf+8
  5173  002222  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  5174  002224  C0EB  F0AB         	movff	__dia,?_sprintf+10
  5175  002228  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  5176  00222A  C0EA  F0AD         	movff	__mes,?_sprintf+12
  5177  00222E  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  5178  002230  ECC9  F039         	call	_sprintf	;wreg free
  5179                           
  5180                           ;tela_PRINCIPAL.h: 26: line1[0] = 0x01;
  5181  002234  0E01               	movlw	1
  5182  002236  0101               	movlb	1	; () banked
  5183  002238  6F7B               	movwf	_line1& (0+255),b
  5184                           
  5185                           ; BSR set to: 1
  5186                           ;tela_PRINCIPAL.h: 27: line1[1] = intensidadeSinal;
  5187  00223A  C0FF  F17C         	movff	_intensidadeSinal,_line1+1
  5188                           
  5189                           ; BSR set to: 1
  5190                           ;tela_PRINCIPAL.h: 28: line1[19] = 0x05;
  5191  00223E  0E05               	movlw	5
  5192  002240  6F8E               	movwf	(_line1+19)& (0+255),b
  5193                           
  5194                           ;tela_PRINCIPAL.h: 30: switch (codigoErro) {
  5195  002242  D041               	goto	l677
  5196  002244  FFFF               	dw	65535	; assembler added errata NOP
  5197                           
  5198                           ;tela_PRINCIPAL.h: 32: sprintf(line4, " *falha eletrica");
  5199                           
  5200                           ; BSR set to: 1
  5201  002246  0E3C               	movlw	low _line4
  5202  002248  0100               	movlb	0	; () banked
  5203  00224A  6FA1               	movwf	sprintf@wh& (0+255),b
  5204  00224C  0E01               	movlw	high _line4
  5205  00224E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5206  002250  0EC9               	movlw	low STR_56
  5207  002252  6FA3               	movwf	sprintf@f& (0+255),b
  5208  002254  0E7D               	movlw	high STR_56
  5209  002256  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5210  002258  ECC9  F039         	call	_sprintf	;wreg free
  5211                           
  5212                           ;tela_PRINCIPAL.h: 33: break;
  5213  00225C  D046               	goto	l679
  5214  00225E  FFFF               	dw	65535	; assembler added errata NOP
  5215                           
  5216                           ;tela_PRINCIPAL.h: 35: sprintf(line4, " *falha val. ladrao");
  5217  002260  0E3C               	movlw	low _line4
  5218  002262  0100               	movlb	0	; () banked
  5219  002264  6FA1               	movwf	sprintf@wh& (0+255),b
  5220  002266  0E01               	movlw	high _line4
  5221  002268  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5222  00226A  0E9C               	movlw	low STR_57
  5223  00226C  6FA3               	movwf	sprintf@f& (0+255),b
  5224  00226E  0E7C               	movlw	high STR_57
  5225  002270  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5226  002272  ECC9  F039         	call	_sprintf	;wreg free
  5227                           
  5228                           ;tela_PRINCIPAL.h: 36: break;
  5229  002276  D039               	goto	l679
  5230  002278  FFFF               	dw	65535	; assembler added errata NOP
  5231                           
  5232                           ;tela_PRINCIPAL.h: 38: sprintf(line4, " *falha B. jockey");
  5233  00227A  0E3C               	movlw	low _line4
  5234  00227C  0100               	movlb	0	; () banked
  5235  00227E  6FA1               	movwf	sprintf@wh& (0+255),b
  5236  002280  0E01               	movlw	high _line4
  5237  002282  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5238  002284  0E95               	movlw	low STR_58
  5239  002286  6FA3               	movwf	sprintf@f& (0+255),b
  5240  002288  0E7D               	movlw	high STR_58
  5241  00228A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5242  00228C  ECC9  F039         	call	_sprintf	;wreg free
  5243                           
  5244                           ;tela_PRINCIPAL.h: 39: break;
  5245  002290  D02C               	goto	l679
  5246  002292  FFFF               	dw	65535	; assembler added errata NOP
  5247                           
  5248                           ;tela_PRINCIPAL.h: 41: sprintf(line4, " *falha B. principal");
  5249  002294  0E3C               	movlw	low _line4
  5250  002296  0100               	movlb	0	; () banked
  5251  002298  6FA1               	movwf	sprintf@wh& (0+255),b
  5252  00229A  0E01               	movlw	high _line4
  5253  00229C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5254  00229E  0E35               	movlw	low STR_59
  5255  0022A0  6FA3               	movwf	sprintf@f& (0+255),b
  5256  0022A2  0E7C               	movlw	high STR_59
  5257  0022A4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5258  0022A6  ECC9  F039         	call	_sprintf	;wreg free
  5259                           
  5260                           ;tela_PRINCIPAL.h: 42: break;
  5261  0022AA  D01F               	goto	l679
  5262  0022AC  FFFF               	dw	65535	; assembler added errata NOP
  5263                           
  5264                           ;tela_PRINCIPAL.h: 44: sprintf(line4, " *falha B. combustao");
  5265  0022AE  0E3C               	movlw	low _line4
  5266  0022B0  0100               	movlb	0	; () banked
  5267  0022B2  6FA1               	movwf	sprintf@wh& (0+255),b
  5268  0022B4  0E01               	movlw	high _line4
  5269  0022B6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5270  0022B8  0E4A               	movlw	low STR_60
  5271  0022BA  6FA3               	movwf	sprintf@f& (0+255),b
  5272  0022BC  0E7C               	movlw	high STR_60
  5273  0022BE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5274  0022C0  ECC9  F039         	call	_sprintf	;wreg free
  5275                           
  5276                           ;tela_PRINCIPAL.h: 46: }
  5277                           
  5278                           ;tela_PRINCIPAL.h: 45: break;
  5279  0022C4  D012               	goto	l679
  5280  0022C6                     l677:
  5281  0022C6  FFFF               	dw	65535	; assembler added errata NOP
  5282  0022C8  0100               	movlb	0	; () banked
  5283  0022CA  51F3               	movf	_codigoErro& (0+255),w,b
  5284                           
  5285                           ; Switch size 1, requested type "space"
  5286                           ; Number of cases is 5, Range of values is 1 to 6
  5287                           ; switch strategies available:
  5288                           ; Name         Instructions Cycles
  5289                           ; simple_byte           16     9 (average)
  5290                           ;	Chosen strategy is simple_byte
  5291  0022CC  0A01               	xorlw	1	; case 1
  5292  0022CE  B4D8               	btfsc	status,2,c
  5293  0022D0  D7B9               	goto	l678
  5294  0022D2  0A02               	xorlw	2	; case 3
  5295  0022D4  B4D8               	btfsc	status,2,c
  5296  0022D6  D7C3               	goto	l680
  5297  0022D8  0A07               	xorlw	7	; case 4
  5298  0022DA  B4D8               	btfsc	status,2,c
  5299  0022DC  D7CD               	goto	l681
  5300  0022DE  0A01               	xorlw	1	; case 5
  5301  0022E0  B4D8               	btfsc	status,2,c
  5302  0022E2  D7D7               	goto	l682
  5303  0022E4  0A03               	xorlw	3	; case 6
  5304  0022E6  B4D8               	btfsc	status,2,c
  5305  0022E8  D7E1               	goto	l683
  5306  0022EA                     l679:
  5307  0022EA  FFFF               	dw	65535	; assembler added errata NOP
  5308                           
  5309                           ;tela_PRINCIPAL.h: 48: if (ocorrendoIncendio) {
  5310                           
  5311                           ; BSR set to: 0
  5312  0022EC  0100               	movlb	0	; () banked
  5313  0022EE  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5314  0022F0  B4D8               	btfsc	status,2,c
  5315  0022F2  D00A               	goto	l684
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;tela_PRINCIPAL.h: 49: sprintf(line2, " ALERTA DE INCENDIO");
  5319  0022F4  0E66               	movlw	low _line2
  5320  0022F6  6FA1               	movwf	sprintf@wh& (0+255),b
  5321  0022F8  0E01               	movlw	high _line2
  5322  0022FA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5323  0022FC  0E88               	movlw	low STR_61
  5324  0022FE  6FA3               	movwf	sprintf@f& (0+255),b
  5325  002300  0E7C               	movlw	high STR_61
  5326  002302  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5327  002304  ECC9  F039         	call	_sprintf	;wreg free
  5328  002308                     l684:
  5329  002308  FFFF               	dw	65535	; assembler added errata NOP
  5330                           
  5331                           ;tela_PRINCIPAL.h: 50: }
  5332                           ;tela_PRINCIPAL.h: 51: if (flagErroTransdutor) {
  5333  00230A  5073               	movf	_flagErroTransdutor,w,c
  5334  00230C  B4D8               	btfsc	status,2,c
  5335  00230E  D013               	goto	l685
  5336                           
  5337                           ;tela_PRINCIPAL.h: 52: clearShiftREG();
  5338  002310  ECFD  F037         	call	_clearShiftREG	;wreg free
  5339                           
  5340                           ;tela_PRINCIPAL.h: 53: sprintf(&line3[1], "Erro no Transdutor");
  5341  002314  0E52               	movlw	low (_line3+1)
  5342  002316  0100               	movlb	0	; () banked
  5343  002318  6FA1               	movwf	sprintf@wh& (0+255),b
  5344  00231A  0E01               	movlw	high (_line3+1)
  5345  00231C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5346  00231E  0E4C               	movlw	low STR_62
  5347  002320  6FA3               	movwf	sprintf@f& (0+255),b
  5348  002322  0E7D               	movlw	high STR_62
  5349  002324  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5350  002326  ECC9  F039         	call	_sprintf	;wreg free
  5351                           
  5352                           ;tela_PRINCIPAL.h: 54: ocorrendoIncendio = 0;
  5353  00232A  0E00               	movlw	0
  5354  00232C  0100               	movlb	0	; () banked
  5355  00232E  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;tela_PRINCIPAL.h: 55: shift[1] = 1;
  5359  002330  0E01               	movlw	1
  5360  002332  6E45               	movwf	_shift+1,c
  5361                           
  5362                           ;tela_PRINCIPAL.h: 56: } else {
  5363  002334  D018               	goto	l686
  5364  002336                     l685:
  5365  002336  FFFF               	dw	65535	; assembler added errata NOP
  5366                           
  5367                           ;tela_PRINCIPAL.h: 57: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5368                           
  5369                           ; BSR set to: 0
  5370  002338  0100               	movlb	0	; () banked
  5371  00233A  51F8               	movf	_pressao& (0+255),w,b
  5372  00233C  EC04  F03D         	call	_intToFloatStr
  5373  002340  C0B5  F0C2         	movff	?_intToFloatStr,_telaPrincipal$2377
  5374  002344  C0B6  F0C3         	movff	?_intToFloatStr+1,_telaPrincipal$2377+1
  5375                           
  5376                           ;tela_PRINCIPAL.h: 57: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5377  002348  0E53               	movlw	low (_line3+2)
  5378  00234A  0100               	movlb	0	; () banked
  5379  00234C  6FA1               	movwf	sprintf@wh& (0+255),b
  5380  00234E  0E01               	movlw	high (_line3+2)
  5381  002350  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5382  002352  0E2B               	movlw	low STR_39
  5383  002354  6FA3               	movwf	sprintf@f& (0+255),b
  5384  002356  0E7E               	movlw	high STR_39
  5385  002358  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5386  00235A  C0C2  F0A5         	movff	_telaPrincipal$2377,?_sprintf+4
  5387  00235E  C0C3  F0A6         	movff	_telaPrincipal$2377+1,?_sprintf+5
  5388  002362  ECC9  F039         	call	_sprintf	;wreg free
  5389  002366                     l686:
  5390  002366  FFFF               	dw	65535	; assembler added errata NOP
  5391                           
  5392                           ;tela_PRINCIPAL.h: 58: }
  5393                           ;tela_PRINCIPAL.h: 61: if (codigoErro > 1 || ocorrendoIncendio) {
  5394  002368  0E02               	movlw	2
  5395  00236A  0100               	movlb	0	; () banked
  5396  00236C  61F3               	cpfslt	_codigoErro& (0+255),b
  5397  00236E  D003               	goto	u7820
  5398                           
  5399                           ; BSR set to: 0
  5400  002370  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5401  002372  B4D8               	btfsc	status,2,c
  5402  002374  D016               	goto	l691
  5403  002376                     u7820:
  5404  002376  FFFF               	dw	65535	; assembler added errata NOP
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;tela_PRINCIPAL.h: 62: if (flagTexto) {
  5408                           
  5409                           ; BSR set to: 0
  5410  002378  5074               	movf	_flagTexto,w,c
  5411  00237A  B4D8               	btfsc	status,2,c
  5412  00237C  D00A               	goto	l690
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;tela_PRINCIPAL.h: 63: sprintf(line4, " Press ESC p/ Reset");
  5416  00237E  0E3C               	movlw	low _line4
  5417  002380  6FA1               	movwf	sprintf@wh& (0+255),b
  5418  002382  0E01               	movlw	high _line4
  5419  002384  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5420  002386  0EEC               	movlw	low STR_64
  5421  002388  6FA3               	movwf	sprintf@f& (0+255),b
  5422  00238A  0E7C               	movlw	high STR_64
  5423  00238C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5424  00238E  ECC9  F039         	call	_sprintf	;wreg free
  5425  002392                     l690:
  5426  002392  FFFF               	dw	65535	; assembler added errata NOP
  5427                           
  5428                           ;tela_PRINCIPAL.h: 64: }
  5429                           ;tela_PRINCIPAL.h: 65: if (btPress(1)) {
  5430  002394  0E01               	movlw	1
  5431  002396  EC4A  F03B         	call	_btPress
  5432  00239A  0900               	iorlw	0
  5433  00239C  A4D8               	btfss	status,2,c
  5434                           
  5435                           ;tela_PRINCIPAL.h: 66: resetParametros();
  5436  00239E  EC20  F037         	call	_resetParametros	;wreg free
  5437  0023A2                     l691:
  5438  0023A2  FFFF               	dw	65535	; assembler added errata NOP
  5439                           
  5440                           ;tela_PRINCIPAL.h: 67: }
  5441                           ;tela_PRINCIPAL.h: 68: }
  5442                           ;tela_PRINCIPAL.h: 70: if (btPress(4)) {
  5443  0023A4  0E04               	movlw	4
  5444  0023A6  EC4A  F03B         	call	_btPress
  5445  0023AA  0900               	iorlw	0
  5446  0023AC  B4D8               	btfsc	status,2,c
  5447  0023AE  D005               	goto	l692
  5448                           
  5449                           ;tela_PRINCIPAL.h: 71: menu_posi = 1;
  5450  0023B0  0E01               	movlw	1
  5451  0023B2  0100               	movlb	0	; () banked
  5452  0023B4  6FDE               	movwf	_menu_posi& (0+255),b
  5453                           
  5454                           ;tela_PRINCIPAL.h: 72: sub_menu_posi = 1;
  5455  0023B6  0E01               	movlw	1
  5456  0023B8  6E6A               	movwf	_sub_menu_posi,c
  5457  0023BA                     l692:
  5458  0023BA  FFFF               	dw	65535	; assembler added errata NOP
  5459                           
  5460                           ;tela_PRINCIPAL.h: 73: }
  5461                           ;tela_PRINCIPAL.h: 76: if (!PORTCbits.RC0) {
  5462                           
  5463                           ; BSR set to: 0
  5464  0023BC  B082               	btfsc	3970,0,c	;volatile
  5465  0023BE  D011               	goto	l694
  5466                           
  5467                           ;tela_PRINCIPAL.h: 77: blink(line1, 20, 20);
  5468  0023C0  0E7B               	movlw	low _line1
  5469  0023C2  0100               	movlb	0	; () banked
  5470  0023C4  6F80               	movwf	blink@line& (0+255),b
  5471  0023C6  0E01               	movlw	high _line1
  5472  0023C8  6F81               	movwf	(blink@line+1)& (0+255),b
  5473  0023CA  0E14               	movlw	20
  5474  0023CC  6F82               	movwf	blink@start& (0+255),b
  5475  0023CE  0E14               	movlw	20
  5476  0023D0  6F83               	movwf	blink@end& (0+255),b
  5477  0023D2  ECE1  F01F         	call	_blink	;wreg free
  5478                           
  5479                           ;tela_PRINCIPAL.h: 78: if (codigoErro == 0) {
  5480  0023D6  0100               	movlb	0	; () banked
  5481  0023D8  51F3               	movf	_codigoErro& (0+255),w,b
  5482  0023DA  A4D8               	btfss	status,2,c
  5483  0023DC  D002               	goto	l694
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;tela_PRINCIPAL.h: 79: codigoErro = 1;
  5487  0023DE  0E01               	movlw	1
  5488  0023E0  6FF3               	movwf	_codigoErro& (0+255),b
  5489  0023E2                     l694:
  5490  0023E2  FFFF               	dw	65535	; assembler added errata NOP
  5491                           
  5492                           ;tela_PRINCIPAL.h: 80: }
  5493                           ;tela_PRINCIPAL.h: 81: }
  5494                           ;tela_PRINCIPAL.h: 82: if (status_jockey == 0) {
  5495                           
  5496                           ; BSR set to: 0
  5497  0023E4  0100               	movlb	0	; () banked
  5498  0023E6  51FD               	movf	_status_jockey& (0+255),w,b
  5499  0023E8  A4D8               	btfss	status,2,c
  5500  0023EA  D002               	goto	l695
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;tela_PRINCIPAL.h: 83: codigoErro = 4;
  5504  0023EC  0E04               	movlw	4
  5505  0023EE  D00B               	goto	L9
  5506  0023F0                     l695:
  5507  0023F0  FFFF               	dw	65535	; assembler added errata NOP
  5508                           
  5509                           ; BSR set to: 0
  5510                           
  5511                           ; BSR set to: 0
  5512  0023F2  51FC               	movf	_status_principal& (0+255),w,b
  5513  0023F4  A4D8               	btfss	status,2,c
  5514  0023F6  D002               	goto	l697
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;tela_PRINCIPAL.h: 85: codigoErro = 5;
  5518  0023F8  0E05               	movlw	5
  5519  0023FA  D005               	goto	L9
  5520  0023FC                     l697:
  5521  0023FC  FFFF               	dw	65535	; assembler added errata NOP
  5522                           
  5523                           ; BSR set to: 0
  5524                           
  5525                           ; BSR set to: 0
  5526  0023FE  51FB               	movf	_status_estacionaria& (0+255),w,b
  5527  002400  A4D8               	btfss	status,2,c
  5528  002402  D003               	goto	l699
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;tela_PRINCIPAL.h: 87: codigoErro = 6;
  5532  002404  0E06               	movlw	6
  5533  002406                     L9:
  5534  002406  FFFF               	dw	65535	; assembler added errata NOP
  5535  002408  6FF3               	movwf	_codigoErro& (0+255),b
  5536  00240A                     l699:
  5537  00240A  FFFF               	dw	65535	; assembler added errata NOP
  5538                           
  5539                           ; BSR set to: 0
  5540                           
  5541                           ; BSR set to: 0
  5542                           
  5543                           ; BSR set to: 0
  5544                           
  5545                           ; BSR set to: 0
  5546  00240C  0012               	return		;funcret
  5547  00240E  FFFF               	dw	65535	; errata NOP
  5548  002410                     __end_of_telaPrincipal:
  5549                           	opt stack 0
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           postinc0	equ	0xFEE
  5555                           wreg	equ	0xFE8
  5556                           postdec1	equ	0xFE5
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _resetParametros *****************
  5564 ;; Defined at:
  5565 ;;		line 11 in file "tela_PRINCIPAL.h"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5579 ;;      Params:         0       0       0       0       0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    7
  5586 ;; This function calls:
  5587 ;;		_clearShiftREG
  5588 ;; This function is called by:
  5589 ;;		_telaPrincipal
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text8
  5594  006E40                     __ptext8:
  5595                           	opt stack 0
  5596  006E40                     _resetParametros:
  5597                           	opt stack 0
  5598  006E40  FFFF               	dw	65535	; assembler added errata NOP
  5599                           
  5600                           ;tela_PRINCIPAL.h: 12: ocorrendoIncendio = 0;
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;incstack = 0
  5604  006E42  0E00               	movlw	0
  5605  006E44  0100               	movlb	0	; () banked
  5606  006E46  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5607                           
  5608                           ;tela_PRINCIPAL.h: 13: codigoErro = 0;
  5609  006E48  0E00               	movlw	0
  5610  006E4A  6FF3               	movwf	_codigoErro& (0+255),b
  5611                           
  5612                           ;tela_PRINCIPAL.h: 14: status_estacionaria = 1;
  5613  006E4C  0E01               	movlw	1
  5614  006E4E  6FFB               	movwf	_status_estacionaria& (0+255),b
  5615                           
  5616                           ;tela_PRINCIPAL.h: 15: status_jockey = 1;
  5617  006E50  0E01               	movlw	1
  5618  006E52  6FFD               	movwf	_status_jockey& (0+255),b
  5619                           
  5620                           ;tela_PRINCIPAL.h: 16: status_principal = 1;
  5621  006E54  0E01               	movlw	1
  5622  006E56  6FFC               	movwf	_status_principal& (0+255),b
  5623                           
  5624                           ;tela_PRINCIPAL.h: 17: tempo_limite_partida = 0;
  5625  006E58  0E00               	movlw	0
  5626  006E5A  6E6C               	movwf	_tempo_limite_partida,c
  5627                           
  5628                           ;tela_PRINCIPAL.h: 18: tempo_partida = 0;
  5629  006E5C  0E00               	movlw	0
  5630  006E5E  6E6D               	movwf	_tempo_partida,c
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;tela_PRINCIPAL.h: 19: clearShiftREG();
  5634  006E60  ECFD  F037         	call	_clearShiftREG	;wreg free
  5635  006E64  0012               	return		;funcret
  5636  006E66  FFFF               	dw	65535	; errata NOP
  5637  006E68                     __end_of_resetParametros:
  5638                           	opt stack 0
  5639                           tblptru	equ	0xFF8
  5640                           tblptrh	equ	0xFF7
  5641                           tblptrl	equ	0xFF6
  5642                           tablat	equ	0xFF5
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           postdec1	equ	0xFE5
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function _setShiftREG *****************
  5653 ;; Defined at:
  5654 ;;		line 37 in file "shift595.h"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;		None
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  i               1    1[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5668 ;;      Params:         0       0       0       0       0       0       0
  5669 ;;      Locals:         0       1       0       0       0       0       0
  5670 ;;      Temps:          0       1       0       0       0       0       0
  5671 ;;      Totals:         0       2       0       0       0       0       0
  5672 ;;Total ram usage:        2 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    6
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_main
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text9
  5683  0073DA                     __ptext9:
  5684                           	opt stack 0
  5685  0073DA                     _setShiftREG:
  5686                           	opt stack 0
  5687  0073DA  FFFF               	dw	65535	; assembler added errata NOP
  5688                           
  5689                           ;shift595.h: 38: unsigned char i = 0;
  5690                           
  5691                           ;incstack = 0
  5692  0073DC  0E00               	movlw	0
  5693  0073DE  0100               	movlb	0	; () banked
  5694  0073E0  6F81               	movwf	setShiftREG@i& (0+255),b
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;shift595.h: 39: PORTEbits.RE1 = 0;
  5698  0073E2  9284               	bcf	3972,1,c	;volatile
  5699                           
  5700                           ;shift595.h: 40: for (i = 0; i < 8; i++) {
  5701  0073E4  0E00               	movlw	0
  5702  0073E6  6F81               	movwf	setShiftREG@i& (0+255),b
  5703  0073E8  D015               	goto	l6510
  5704  0073EA                     l431:
  5705  0073EA  FFFF               	dw	65535	; assembler added errata NOP
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;shift595.h: 41: PORTEbits.RE0 = 0;
  5709  0073EC  9084               	bcf	3972,0,c	;volatile
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;shift595.h: 42: PORTEbits.RE2 = shift[i];
  5713  0073EE  5181               	movf	setShiftREG@i& (0+255),w,b
  5714  0073F0  0D01               	mullw	1
  5715  0073F2  0E44               	movlw	low _shift
  5716  0073F4  24F3               	addwf	prodl,w,c
  5717  0073F6  6ED9               	movwf	fsr2l,c
  5718  0073F8  0E00               	movlw	high _shift
  5719  0073FA  20F4               	addwfc	prodh,w,c
  5720  0073FC  6EDA               	movwf	fsr2h,c
  5721  0073FE  50DF               	movf	indf2,w,c
  5722  007400  6F80               	movwf	??_setShiftREG& (0+255),b
  5723  007402  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5724  007404  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5725  007406  5084               	movf	3972,w,c	;volatile
  5726  007408  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5727  00740A  0BFB               	andlw	-5
  5728  00740C  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5729  00740E  6E84               	movwf	3972,c	;volatile
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;shift595.h: 43: PORTEbits.RE0 = 1;
  5733  007410  8084               	bsf	3972,0,c	;volatile
  5734                           
  5735                           ; BSR set to: 0
  5736  007412  2B81               	incf	setShiftREG@i& (0+255),f,b
  5737  007414                     l6510:
  5738  007414  FFFF               	dw	65535	; assembler added errata NOP
  5739                           
  5740                           ; BSR set to: 0
  5741  007416  0E07               	movlw	7
  5742  007418  6581               	cpfsgt	setShiftREG@i& (0+255),b
  5743  00741A  D7E7               	goto	l431
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;shift595.h: 44: }
  5747                           ;shift595.h: 45: PORTEbits.RE1 = 1;
  5748  00741C  8284               	bsf	3972,1,c	;volatile
  5749                           
  5750                           ; BSR set to: 0
  5751  00741E  0012               	return		;funcret
  5752  007420  FFFF               	dw	65535	; errata NOP
  5753  007422                     __end_of_setShiftREG:
  5754                           	opt stack 0
  5755                           tblptru	equ	0xFF8
  5756                           tblptrh	equ	0xFF7
  5757                           tblptrl	equ	0xFF6
  5758                           tablat	equ	0xFF5
  5759                           prodh	equ	0xFF4
  5760                           prodl	equ	0xFF3
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           postdec1	equ	0xFE5
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           fsr2h	equ	0xFDA
  5767                           fsr2l	equ	0xFD9
  5768                           status	equ	0xFD8
  5769                           
  5770 ;; *************** function _lerParametros *****************
  5771 ;; Defined at:
  5772 ;;		line 9 in file "util.h"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  i               1   21[BANK0 ] unsigned char 
  5777 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5787 ;;      Params:         0       0       0       0       0       0       0
  5788 ;;      Locals:         0       2       0       0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0
  5790 ;;      Totals:         0       2       0       0       0       0       0
  5791 ;;Total ram usage:        2 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:   10
  5794 ;; This function calls:
  5795 ;;		_readEEPROM16_ext
  5796 ;;		_readEEPROM_ext
  5797 ;;		_writeEEPROM_ext
  5798 ;; This function is called by:
  5799 ;;		_main
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text10
  5804  002F58                     __ptext10:
  5805                           	opt stack 0
  5806  002F58                     _lerParametros:
  5807                           	opt stack 0
  5808  002F58  FFFF               	dw	65535	; assembler added errata NOP
  5809                           
  5810                           ;util.h: 10: char i = 0;
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;incstack = 0
  5814  002F5A  0E00               	movlw	0
  5815  002F5C  0100               	movlb	0	; () banked
  5816  002F5E  6F95               	movwf	lerParametros@i& (0+255),b
  5817                           
  5818                           ;util.h: 11: char verifica_memoria_nova = 0;
  5819  002F60  0E00               	movlw	0
  5820  002F62  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  5824  002F64  0E0C               	movlw	12
  5825  002F66  EC61  F03A         	call	_readEEPROM_ext
  5826  002F6A  0100               	movlb	0	; () banked
  5827  002F6C  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  5831  002F6E  0E14               	movlw	20
  5832  002F70  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  5833  002F72  B4D8               	btfsc	status,2,c
  5834  002F74  D016               	goto	l600
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;util.h: 14: for (i = 0; i < 100; i++) {
  5838  002F76  0E00               	movlw	0
  5839  002F78  6F95               	movwf	lerParametros@i& (0+255),b
  5840  002F7A                     l6876:
  5841  002F7A  FFFF               	dw	65535	; assembler added errata NOP
  5842                           
  5843                           ; BSR set to: 0
  5844  002F7C  0E63               	movlw	99
  5845  002F7E  6595               	cpfsgt	lerParametros@i& (0+255),b
  5846  002F80  D001               	goto	l601
  5847  002F82  D009               	goto	u7650
  5848  002F84                     l601:
  5849  002F84  FFFF               	dw	65535	; assembler added errata NOP
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;util.h: 15: writeEEPROM_ext(i, 0);
  5853                           
  5854                           ; BSR set to: 0
  5855  002F86  0E00               	movlw	0
  5856  002F88  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5857  002F8A  5195               	movf	lerParametros@i& (0+255),w,b
  5858  002F8C  ECA6  F039         	call	_writeEEPROM_ext
  5859  002F90  0100               	movlb	0	; () banked
  5860  002F92  2B95               	incf	lerParametros@i& (0+255),f,b
  5861  002F94  D7F2               	goto	l6876
  5862  002F96                     u7650:
  5863  002F96  FFFF               	dw	65535	; assembler added errata NOP
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;util.h: 16: }
  5867                           ;util.h: 17: writeEEPROM_ext(12, 20);
  5868                           
  5869                           ; BSR set to: 0
  5870  002F98  0E14               	movlw	20
  5871  002F9A  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5872  002F9C  0E0C               	movlw	12
  5873  002F9E  ECA6  F039         	call	_writeEEPROM_ext
  5874  002FA2                     l600:
  5875  002FA2  FFFF               	dw	65535	; assembler added errata NOP
  5876                           
  5877                           ;util.h: 18: }
  5878                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  5879  002FA4  0E00               	movlw	0
  5880  002FA6  EC61  F03A         	call	_readEEPROM_ext
  5881  002FAA  0100               	movlb	0	; () banked
  5882  002FAC  6FE2               	movwf	_sp_jockey& (0+255),b
  5883                           
  5884                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  5885  002FAE  0E01               	movlw	1
  5886  002FB0  EC61  F03A         	call	_readEEPROM_ext
  5887  002FB4  0100               	movlb	0	; () banked
  5888  002FB6  6FE1               	movwf	_sp_principal& (0+255),b
  5889                           
  5890                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  5891  002FB8  0E02               	movlw	2
  5892  002FBA  EC61  F03A         	call	_readEEPROM_ext
  5893  002FBE  0100               	movlb	0	; () banked
  5894  002FC0  6FE0               	movwf	_sp_estacionaria& (0+255),b
  5895                           
  5896                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  5897  002FC2  0E08               	movlw	8
  5898  002FC4  EC34  F038         	call	_readEEPROM16_ext
  5899  002FC8  C08E  F04F         	movff	?_readEEPROM16_ext,_horimetro
  5900  002FCC  C08F  F050         	movff	?_readEEPROM16_ext+1,_horimetro+1
  5901                           
  5902                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  5903  002FD0  0E04               	movlw	4
  5904  002FD2  EC61  F03A         	call	_readEEPROM_ext
  5905  002FD6  0100               	movlb	0	; () banked
  5906  002FD8  6FE3               	movwf	_sp_pressao_rede& (0+255),b
  5907                           
  5908                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  5909  002FDA  0E06               	movlw	6
  5910  002FDC  EC61  F03A         	call	_readEEPROM_ext
  5911  002FE0  0100               	movlb	0	; () banked
  5912  002FE2  6FE8               	movwf	_intervalo_teste_dia& (0+255),b
  5913                           
  5914                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  5915  002FE4  0E07               	movlw	7
  5916  002FE6  EC61  F03A         	call	_readEEPROM_ext
  5917  002FEA  0100               	movlb	0	; () banked
  5918  002FEC  6FE5               	movwf	_tempo_limite_estacionaria& (0+255),b
  5919                           
  5920                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  5921  002FEE  0E0A               	movlw	10
  5922  002FF0  EC61  F03A         	call	_readEEPROM_ext
  5923  002FF4  0100               	movlb	0	; () banked
  5924  002FF6  6FE7               	movwf	_dias_restante_teste& (0+255),b
  5925                           
  5926                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  5927  002FF8  0E0B               	movlw	11
  5928  002FFA  EC61  F03A         	call	_readEEPROM_ext
  5929  002FFE  0100               	movlb	0	; () banked
  5930  003000  6FE6               	movwf	_horario_de_teste& (0+255),b
  5931                           
  5932                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  5933  003002  0E0D               	movlw	13
  5934  003004  EC61  F03A         	call	_readEEPROM_ext
  5935  003008  0100               	movlb	0	; () banked
  5936  00300A  6FE4               	movwf	_tempo_limite_teste_estacionaria& (0+255),b
  5937                           
  5938                           ;util.h: 31: habilitaTesteAutomatico = readEEPROM_ext(15);
  5939  00300C  0E0F               	movlw	15
  5940  00300E  EC61  F03A         	call	_readEEPROM_ext
  5941  003012  0100               	movlb	0	; () banked
  5942  003014  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;util.h: 33: for (i = 0; i < 11; i++) {
  5946  003016  0E00               	movlw	0
  5947  003018  6F95               	movwf	lerParametros@i& (0+255),b
  5948  00301A                     l6890:
  5949  00301A  FFFF               	dw	65535	; assembler added errata NOP
  5950                           
  5951                           ; BSR set to: 0
  5952  00301C  0E0A               	movlw	10
  5953  00301E  6595               	cpfsgt	lerParametros@i& (0+255),b
  5954  003020  D001               	goto	l603
  5955  003022  D011               	goto	u7670
  5956  003024                     l603:
  5957  003024  FFFF               	dw	65535	; assembler added errata NOP
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;util.h: 34: tel1[i] = readEEPROM_ext(20 + i);
  5961                           
  5962                           ; BSR set to: 0
  5963  003026  5195               	movf	lerParametros@i& (0+255),w,b
  5964  003028  0D01               	mullw	1
  5965  00302A  0EB0               	movlw	low _tel1
  5966  00302C  24F3               	addwf	prodl,w,c
  5967  00302E  6ED9               	movwf	fsr2l,c
  5968  003030  0E01               	movlw	high _tel1
  5969  003032  20F4               	addwfc	prodh,w,c
  5970  003034  6EDA               	movwf	fsr2h,c
  5971  003036  5195               	movf	lerParametros@i& (0+255),w,b
  5972  003038  0F14               	addlw	20
  5973  00303A  EC61  F03A         	call	_readEEPROM_ext
  5974  00303E  6EDF               	movwf	indf2,c
  5975  003040  0100               	movlb	0	; () banked
  5976  003042  2B95               	incf	lerParametros@i& (0+255),f,b
  5977  003044  D7EA               	goto	l6890
  5978  003046                     u7670:
  5979  003046  FFFF               	dw	65535	; assembler added errata NOP
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;util.h: 35: }
  5983                           ;util.h: 36: for (i = 0; i < 11; i++) {
  5984                           
  5985                           ; BSR set to: 0
  5986  003048  0E00               	movlw	0
  5987  00304A  6F95               	movwf	lerParametros@i& (0+255),b
  5988  00304C                     l6902:
  5989  00304C  FFFF               	dw	65535	; assembler added errata NOP
  5990                           
  5991                           ; BSR set to: 0
  5992  00304E  0E0A               	movlw	10
  5993  003050  6595               	cpfsgt	lerParametros@i& (0+255),b
  5994  003052  D001               	goto	l605
  5995  003054  D011               	goto	u7690
  5996  003056                     l605:
  5997  003056  FFFF               	dw	65535	; assembler added errata NOP
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;util.h: 37: tel2[i] = readEEPROM_ext(40 + i);
  6001                           
  6002                           ; BSR set to: 0
  6003  003058  5195               	movf	lerParametros@i& (0+255),w,b
  6004  00305A  0D01               	mullw	1
  6005  00305C  0EA4               	movlw	low _tel2
  6006  00305E  24F3               	addwf	prodl,w,c
  6007  003060  6ED9               	movwf	fsr2l,c
  6008  003062  0E01               	movlw	high _tel2
  6009  003064  20F4               	addwfc	prodh,w,c
  6010  003066  6EDA               	movwf	fsr2h,c
  6011  003068  5195               	movf	lerParametros@i& (0+255),w,b
  6012  00306A  0F28               	addlw	40
  6013  00306C  EC61  F03A         	call	_readEEPROM_ext
  6014  003070  6EDF               	movwf	indf2,c
  6015  003072  0100               	movlb	0	; () banked
  6016  003074  2B95               	incf	lerParametros@i& (0+255),f,b
  6017  003076  D7EA               	goto	l6902
  6018  003078                     u7690:
  6019  003078  FFFF               	dw	65535	; assembler added errata NOP
  6020                           
  6021                           ; BSR set to: 0
  6022                           
  6023                           ; BSR set to: 0
  6024  00307A  0012               	return		;funcret
  6025  00307C  FFFF               	dw	65535	; errata NOP
  6026  00307E                     __end_of_lerParametros:
  6027                           	opt stack 0
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           postinc0	equ	0xFEE
  6035                           wreg	equ	0xFE8
  6036                           postdec1	equ	0xFE5
  6037                           fsr1l	equ	0xFE1
  6038                           indf2	equ	0xFDF
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _readEEPROM16_ext *****************
  6044 ;; Defined at:
  6045 ;;		line 48 in file "eeprom.h"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  adress          1    wreg     unsigned char 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  adress          1   19[BANK0 ] unsigned char 
  6050 ;;  data            2   17[BANK0 ] unsigned int 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  2   14[BANK0 ] unsigned int 
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6060 ;;      Params:         0       2       0       0       0       0       0
  6061 ;;      Locals:         0       3       0       0       0       0       0
  6062 ;;      Temps:          0       1       0       0       0       0       0
  6063 ;;      Totals:         0       6       0       0       0       0       0
  6064 ;;Total ram usage:        6 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    9
  6067 ;; This function calls:
  6068 ;;		_readEEPROM_ext
  6069 ;; This function is called by:
  6070 ;;		_lerParametros
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text11
  6075  007068                     __ptext11:
  6076                           	opt stack 0
  6077  007068                     _readEEPROM16_ext:
  6078                           	opt stack 0
  6079  007068  FFFF               	dw	65535	; assembler added errata NOP
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;incstack = 0
  6083                           ;readEEPROM16_ext@adress stored from wreg
  6084  00706A  0100               	movlb	0	; () banked
  6085  00706C  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  6086                           
  6087                           ;eeprom.h: 49: unsigned int data;
  6088                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  6089  00706E  0100               	movlb	0	; () banked
  6090  007070  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  6091  007072  EC61  F03A         	call	_readEEPROM_ext
  6092  007076  0100               	movlb	0	; () banked
  6093  007078  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6094  00707A  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6095  00707C  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  6096  00707E  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;eeprom.h: 51: data <<= 8;
  6100  007080  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  6101  007082  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  6102  007084  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  6106  007086  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  6107  007088  EC61  F03A         	call	_readEEPROM_ext
  6108  00708C  0100               	movlb	0	; () banked
  6109  00708E  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6110  007090  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6111  007092  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;eeprom.h: 53: return data;
  6115  007094  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  6116  007098  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  6117                           
  6118                           ; BSR set to: 0
  6119                           
  6120                           ; BSR set to: 0
  6121  00709C  0012               	return		;funcret
  6122  00709E  FFFF               	dw	65535	; errata NOP
  6123  0070A0                     __end_of_readEEPROM16_ext:
  6124                           	opt stack 0
  6125                           tblptru	equ	0xFF8
  6126                           tblptrh	equ	0xFF7
  6127                           tblptrl	equ	0xFF6
  6128                           tablat	equ	0xFF5
  6129                           prodh	equ	0xFF4
  6130                           prodl	equ	0xFF3
  6131                           postinc0	equ	0xFEE
  6132                           wreg	equ	0xFE8
  6133                           postdec1	equ	0xFE5
  6134                           fsr1l	equ	0xFE1
  6135                           indf2	equ	0xFDF
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _informacoes *****************
  6141 ;; Defined at:
  6142 ;;		line 7 in file "tela_INFORMACOES.h"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;		None
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      void 
  6149 ;; Registers used:
  6150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6156 ;;      Params:         0       0       0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0
  6159 ;;      Totals:         0       0       0       0       0       0       0
  6160 ;;Total ram usage:        0 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    9
  6163 ;; This function calls:
  6164 ;;		_btPress
  6165 ;;		_sprintf
  6166 ;; This function is called by:
  6167 ;;		_main
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text12
  6172  007776                     __ptext12:
  6173                           	opt stack 0
  6174  007776                     _informacoes:
  6175                           	opt stack 0
  6176  007776  FFFF               	dw	65535	; assembler added errata NOP
  6177                           
  6178                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;incstack = 0
  6182  007778  0E7B               	movlw	low _line1
  6183  00777A  0100               	movlb	0	; () banked
  6184  00777C  6FA1               	movwf	sprintf@wh& (0+255),b
  6185  00777E  0E01               	movlw	high _line1
  6186  007780  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6187  007782  0E9B               	movlw	low STR_86
  6188  007784  6FA3               	movwf	sprintf@f& (0+255),b
  6189  007786  0E7F               	movlw	high STR_86
  6190  007788  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6191  00778A  ECC9  F039         	call	_sprintf	;wreg free
  6192                           
  6193                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  6194  00778E  0E66               	movlw	low _line2
  6195  007790  0100               	movlb	0	; () banked
  6196  007792  6FA1               	movwf	sprintf@wh& (0+255),b
  6197  007794  0E01               	movlw	high _line2
  6198  007796  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6199  007798  0ED8               	movlw	low STR_87
  6200  00779A  6FA3               	movwf	sprintf@f& (0+255),b
  6201  00779C  0E7C               	movlw	high STR_87
  6202  00779E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6203  0077A0  ECC9  F039         	call	_sprintf	;wreg free
  6204                           
  6205                           ;tela_INFORMACOES.h: 10: sprintf(line3, "   48 99906-5651");
  6206  0077A4  0E51               	movlw	low _line3
  6207  0077A6  0100               	movlb	0	; () banked
  6208  0077A8  6FA1               	movwf	sprintf@wh& (0+255),b
  6209  0077AA  0E01               	movlw	high _line3
  6210  0077AC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6211  0077AE  0EB8               	movlw	low STR_88
  6212  0077B0  6FA3               	movwf	sprintf@f& (0+255),b
  6213  0077B2  0E7D               	movlw	high STR_88
  6214  0077B4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6215  0077B6  ECC9  F039         	call	_sprintf	;wreg free
  6216                           
  6217                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Aug 25 2019");
  6218  0077BA  0E3C               	movlw	low _line4
  6219  0077BC  0100               	movlb	0	; () banked
  6220  0077BE  6FA1               	movwf	sprintf@wh& (0+255),b
  6221  0077C0  0E01               	movlw	high _line4
  6222  0077C2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6223  0077C4  0E09               	movlw	low STR_89
  6224  0077C6  6FA3               	movwf	sprintf@f& (0+255),b
  6225  0077C8  0E7F               	movlw	high STR_89
  6226  0077CA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6227  0077CC  0EE5               	movlw	low STR_15
  6228  0077CE  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6229  0077D0  0E7E               	movlw	high STR_15
  6230  0077D2  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6231  0077D4  ECC9  F039         	call	_sprintf	;wreg free
  6232                           
  6233                           ;tela_INFORMACOES.h: 12: if (btPress(1)) {
  6234  0077D8  0E01               	movlw	1
  6235  0077DA  EC4A  F03B         	call	_btPress
  6236  0077DE  0900               	iorlw	0
  6237  0077E0  A4D8               	btfss	status,2,c
  6238                           
  6239                           ;tela_INFORMACOES.h: 13: menu_posi = _menu_posi;
  6240  0077E2  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  6241  0077E6  0012               	return		;funcret
  6242  0077E8  FFFF               	dw	65535	; errata NOP
  6243  0077EA                     __end_of_informacoes:
  6244                           	opt stack 0
  6245                           tblptru	equ	0xFF8
  6246                           tblptrh	equ	0xFF7
  6247                           tblptrl	equ	0xFF6
  6248                           tablat	equ	0xFF5
  6249                           prodh	equ	0xFF4
  6250                           prodl	equ	0xFF3
  6251                           postinc0	equ	0xFEE
  6252                           wreg	equ	0xFE8
  6253                           postdec1	equ	0xFE5
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           fsr2h	equ	0xFDA
  6257                           fsr2l	equ	0xFD9
  6258                           status	equ	0xFD8
  6259                           
  6260 ;; *************** function _getSinalSIM800L *****************
  6261 ;; Defined at:
  6262 ;;		line 13 in file "comunicacao.h"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;		None
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  sinal           2   72[BANK0 ] int 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6276 ;;      Params:         0       0       0       0       0       0       0
  6277 ;;      Locals:         0       2       0       0       0       0       0
  6278 ;;      Temps:          0       2       0       0       0       0       0
  6279 ;;      Totals:         0       4       0       0       0       0       0
  6280 ;;Total ram usage:        4 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:   10
  6283 ;; This function calls:
  6284 ;;		_aguardaBuffer
  6285 ;;		_atoi
  6286 ;;		_delay
  6287 ;;		_getSerial
  6288 ;;		_limparBuffer
  6289 ;;		_printf
  6290 ;;		_writeChar
  6291 ;; This function is called by:
  6292 ;;		_main
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text13
  6297  002992                     __ptext13:
  6298                           	opt stack 0
  6299  002992                     _getSinalSIM800L:
  6300                           	opt stack 0
  6301  002992  FFFF               	dw	65535	; assembler added errata NOP
  6302                           
  6303                           ;comunicacao.h: 14: if (!timerVerificarSinal) {
  6304                           
  6305                           ;incstack = 0
  6306  002994  0100               	movlb	0	; () banked
  6307  002996  51FE               	movf	_timerVerificarSinal& (0+255),w,b
  6308  002998  A4D8               	btfss	status,2,c
  6309  00299A  D0CB               	goto	l304
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;comunicacao.h: 15: if (!gsmOcupado) {
  6313  00299C  51F4               	movf	_gsmOcupado& (0+255),w,b
  6314  00299E  B4D8               	btfsc	status,2,c
  6315  0029A0  D0B7               	goto	l302
  6316  0029A2  D0C7               	goto	l304
  6317  0029A4  FFFF               	dw	65535	; assembler added errata NOP
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;comunicacao.h: 18: limparBuffer();
  6321                           
  6322                           ; BSR set to: 0
  6323  0029A6  ECE2  F037         	call	_limparBuffer	;wreg free
  6324                           
  6325                           ;comunicacao.h: 19: printf("AT+CSQ\r\n");
  6326  0029AA  0E89               	movlw	low STR_3
  6327  0029AC  0100               	movlb	0	; () banked
  6328  0029AE  6FA1               	movwf	printf@f& (0+255),b
  6329  0029B0  0E7F               	movlw	high STR_3
  6330  0029B2  6FA2               	movwf	(printf@f+1)& (0+255),b
  6331  0029B4  ECE3  F038         	call	_printf	;wreg free
  6332                           
  6333                           ;comunicacao.h: 20: timerEtapaComunicacao = 10;
  6334  0029B8  0E0A               	movlw	10
  6335  0029BA  0100               	movlb	0	; () banked
  6336  0029BC  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;comunicacao.h: 21: etapaComunicacao = 1;
  6340  0029BE  0E00               	movlw	0
  6341  0029C0  6E52               	movwf	_etapaComunicacao+1,c
  6342  0029C2  0E01               	movlw	1
  6343  0029C4  D0A2               	goto	L10
  6344  0029C6  FFFF               	dw	65535	; assembler added errata NOP
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;comunicacao.h: 24: if (!timerEtapaComunicacao) {
  6348                           
  6349                           ; BSR set to: 0
  6350  0029C8  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  6351  0029CA  A4D8               	btfss	status,2,c
  6352  0029CC  D02B               	goto	l308
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;comunicacao.h: 25: printf("AT\r\n");
  6356  0029CE  0EDE               	movlw	low STR_4
  6357  0029D0  6FA1               	movwf	printf@f& (0+255),b
  6358  0029D2  0E7F               	movlw	high STR_4
  6359  0029D4  6FA2               	movwf	(printf@f+1)& (0+255),b
  6360  0029D6  ECE3  F038         	call	_printf	;wreg free
  6361                           
  6362                           ;comunicacao.h: 26: delay(100);
  6363  0029DA  0E00               	movlw	0
  6364  0029DC  0100               	movlb	0	; () banked
  6365  0029DE  6F81               	movwf	(delay@x+1)& (0+255),b
  6366  0029E0  0E64               	movlw	100
  6367  0029E2  6F80               	movwf	delay@x& (0+255),b
  6368  0029E4  ECC7  F037         	call	_delay	;wreg free
  6369                           
  6370                           ;comunicacao.h: 27: if (aguardaBuffer("OK")) {
  6371  0029E8  0EFA               	movlw	low STR_5
  6372  0029EA  0100               	movlb	0	; () banked
  6373  0029EC  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6374  0029EE  0E7F               	movlw	high STR_5
  6375  0029F0  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6376  0029F2  ECC5  F038         	call	_aguardaBuffer	;wreg free
  6377  0029F6  0900               	iorlw	0
  6378  0029F8  B4D8               	btfsc	status,2,c
  6379  0029FA  D005               	goto	l307
  6380                           
  6381                           ;comunicacao.h: 28: etapaComunicacao = 0;
  6382  0029FC  0E00               	movlw	0
  6383  0029FE  6E52               	movwf	_etapaComunicacao+1,c
  6384  002A00  0E00               	movlw	0
  6385  002A02  6E51               	movwf	_etapaComunicacao,c
  6386                           
  6387                           ;comunicacao.h: 29: } else {
  6388  002A04  D00F               	goto	l308
  6389  002A06                     l307:
  6390  002A06  FFFF               	dw	65535	; assembler added errata NOP
  6391                           
  6392                           ;comunicacao.h: 30: etapaComunicacao = 0;
  6393  002A08  0E00               	movlw	0
  6394  002A0A  6E52               	movwf	_etapaComunicacao+1,c
  6395  002A0C  0E00               	movlw	0
  6396  002A0E  6E51               	movwf	_etapaComunicacao,c
  6397                           
  6398                           ;comunicacao.h: 31: writeChar(0x1A);
  6399  002A10  0E1A               	movlw	26
  6400  002A12  0100               	movlb	0	; () banked
  6401  002A14  6F80               	movwf	writeChar@hex& (0+255),b
  6402  002A16  0E00               	movlw	0
  6403  002A18  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  6404  002A1A  EC88  F036         	call	_writeChar	;wreg free
  6405                           
  6406                           ;comunicacao.h: 32: intensidadeSinal = 'x';
  6407  002A1E  0E78               	movlw	120
  6408  002A20  0100               	movlb	0	; () banked
  6409  002A22  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6410  002A24                     l308:
  6411  002A24  FFFF               	dw	65535	; assembler added errata NOP
  6412                           
  6413                           ;comunicacao.h: 33: }
  6414                           ;comunicacao.h: 34: }
  6415                           ;comunicacao.h: 35: if (aguardaBuffer("+CSQ: ")) {
  6416                           
  6417                           ; BSR set to: 0
  6418                           
  6419                           ; BSR set to: 0
  6420  002A26  0EB1               	movlw	low STR_6
  6421  002A28  0100               	movlb	0	; () banked
  6422  002A2A  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6423  002A2C  0E7F               	movlw	high STR_6
  6424  002A2E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6425  002A30  ECC5  F038         	call	_aguardaBuffer	;wreg free
  6426  002A34  0900               	iorlw	0
  6427  002A36  B4D8               	btfsc	status,2,c
  6428  002A38  D07C               	goto	l304
  6429                           
  6430                           ;comunicacao.h: 36: int sinal = atoi(getSerial("+CSQ: ", ','));
  6431  002A3A  0EB1               	movlw	low STR_6
  6432  002A3C  0100               	movlb	0	; () banked
  6433  002A3E  6FB5               	movwf	getSerial@str& (0+255),b
  6434  002A40  0E7F               	movlw	high STR_6
  6435  002A42  6FB6               	movwf	(getSerial@str+1)& (0+255),b
  6436  002A44  0E2C               	movlw	44
  6437  002A46  6FB7               	movwf	getSerial@end& (0+255),b
  6438  002A48  ECD0  F018         	call	_getSerial	;wreg free
  6439  002A4C  C0B5  F0BF         	movff	?_getSerial,atoi@s
  6440  002A50  C0B6  F0C0         	movff	?_getSerial+1,atoi@s+1
  6441  002A54  ECEC  F01A         	call	_atoi	;wreg free
  6442  002A58  C0BF  F0C8         	movff	?_atoi,getSinalSIM800L@sinal
  6443  002A5C  C0C0  F0C9         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  6444                           
  6445                           ;comunicacao.h: 37: if (sinal < 10) {
  6446  002A60  0100               	movlb	0	; () banked
  6447  002A62  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6448  002A64  D006               	goto	u6880
  6449  002A66  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6450  002A68  E108               	bnz	l6468
  6451  002A6A  0E0A               	movlw	10
  6452  002A6C  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6453  002A6E  B0D8               	btfsc	status,0,c
  6454  002A70  D003               	goto	l310
  6455  002A72                     u6880:
  6456  002A72  FFFF               	dw	65535	; assembler added errata NOP
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;comunicacao.h: 38: intensidadeSinal = ' ';
  6460  002A74  0E20               	movlw	32
  6461  002A76  D03B               	goto	L13
  6462  002A78                     l310:
  6463  002A78  FFFF               	dw	65535	; assembler added errata NOP
  6464  002A7A                     l6468:
  6465                           
  6466                           ; BSR set to: 0
  6467  002A7A  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6468  002A7C  D011               	goto	l312
  6469  002A7E  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6470  002A80  E104               	bnz	u6890
  6471  002A82  0E0A               	movlw	10
  6472  002A84  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6473  002A86  A0D8               	btfss	status,0,c
  6474  002A88  D00B               	goto	l312
  6475  002A8A                     u6890:
  6476                           
  6477                           ; BSR set to: 0
  6478  002A8A  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6479  002A8C  D006               	goto	u6900
  6480  002A8E  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6481  002A90  E108               	bnz	l6474
  6482  002A92  0E0F               	movlw	15
  6483  002A94  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6484  002A96  B0D8               	btfsc	status,0,c
  6485  002A98  D003               	goto	l312
  6486  002A9A                     u6900:
  6487  002A9A  FFFF               	dw	65535	; assembler added errata NOP
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;comunicacao.h: 40: intensidadeSinal = 0x02;
  6491  002A9C  0E02               	movlw	2
  6492  002A9E  D027               	goto	L13
  6493  002AA0                     l312:
  6494  002AA0  FFFF               	dw	65535	; assembler added errata NOP
  6495  002AA2                     l6474:
  6496                           
  6497                           ; BSR set to: 0
  6498  002AA2  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6499  002AA4  D011               	goto	l314
  6500  002AA6  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6501  002AA8  E104               	bnz	u6910
  6502  002AAA  0E10               	movlw	16
  6503  002AAC  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6504  002AAE  A0D8               	btfss	status,0,c
  6505  002AB0  D00B               	goto	l314
  6506  002AB2                     u6910:
  6507                           
  6508                           ; BSR set to: 0
  6509  002AB2  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6510  002AB4  D006               	goto	u6920
  6511  002AB6  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6512  002AB8  E108               	bnz	l6480
  6513  002ABA  0E14               	movlw	20
  6514  002ABC  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6515  002ABE  B0D8               	btfsc	status,0,c
  6516  002AC0  D003               	goto	l314
  6517  002AC2                     u6920:
  6518  002AC2  FFFF               	dw	65535	; assembler added errata NOP
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;comunicacao.h: 42: intensidadeSinal = 0x03;
  6522  002AC4  0E03               	movlw	3
  6523  002AC6  D013               	goto	L13
  6524  002AC8                     l314:
  6525  002AC8  FFFF               	dw	65535	; assembler added errata NOP
  6526  002ACA                     l6480:
  6527                           
  6528                           ; BSR set to: 0
  6529  002ACA  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6530  002ACC  D012               	goto	l316
  6531  002ACE  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6532  002AD0  E104               	bnz	u6930
  6533  002AD2  0E14               	movlw	20
  6534  002AD4  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6535  002AD6  A0D8               	btfss	status,0,c
  6536  002AD8  D00C               	goto	l316
  6537  002ADA                     u6930:
  6538                           
  6539                           ; BSR set to: 0
  6540  002ADA  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6541  002ADC  D006               	goto	u6940
  6542  002ADE  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6543  002AE0  E109               	bnz	l311
  6544  002AE2  0E1F               	movlw	31
  6545  002AE4  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6546  002AE6  B0D8               	btfsc	status,0,c
  6547  002AE8  D004               	goto	l316
  6548  002AEA                     u6940:
  6549  002AEA  FFFF               	dw	65535	; assembler added errata NOP
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;comunicacao.h: 44: intensidadeSinal = 0x04;
  6553  002AEC  0E04               	movlw	4
  6554  002AEE                     L13:
  6555  002AEE  FFFF               	dw	65535	; assembler added errata NOP
  6556  002AF0  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6557  002AF2                     l316:
  6558  002AF2  FFFF               	dw	65535	; assembler added errata NOP
  6559  002AF4                     l311:
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;comunicacao.h: 45: }
  6563                           ;comunicacao.h: 46: etapaComunicacao = 0;
  6564  002AF4  0E00               	movlw	0
  6565  002AF6  6E52               	movwf	_etapaComunicacao+1,c
  6566  002AF8  0E00               	movlw	0
  6567  002AFA  6E51               	movwf	_etapaComunicacao,c
  6568                           
  6569                           ;comunicacao.h: 47: timerVerificarSinal = 6;
  6570  002AFC  0E06               	movlw	6
  6571  002AFE  6FFE               	movwf	_timerVerificarSinal& (0+255),b
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;comunicacao.h: 48: }
  6575                           ;comunicacao.h: 49: break;
  6576  002B00  D018               	goto	l304
  6577  002B02  FFFF               	dw	65535	; assembler added errata NOP
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;comunicacao.h: 51: etapaComunicacao = 0;
  6581                           
  6582                           ; BSR set to: 0
  6583  002B04  0E00               	movlw	0
  6584  002B06  6E52               	movwf	_etapaComunicacao+1,c
  6585  002B08  0E00               	movlw	0
  6586  002B0A                     L10:
  6587  002B0A  FFFF               	dw	65535	; assembler added errata NOP
  6588  002B0C  6E51               	movwf	_etapaComunicacao,c
  6589                           
  6590                           ;comunicacao.h: 52: }
  6591  002B0E  D011               	goto	l304
  6592  002B10                     l302:
  6593  002B10  FFFF               	dw	65535	; assembler added errata NOP
  6594                           
  6595                           ; BSR set to: 0
  6596                           
  6597                           ; BSR set to: 0
  6598  002B12  C051  F0C6         	movff	_etapaComunicacao,??_getSinalSIM800L
  6599  002B16  C052  F0C7         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  6600                           
  6601                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6602                           ; Switch size 1, requested type "space"
  6603                           ; Number of cases is 1, Range of values is 0 to 0
  6604                           ; switch strategies available:
  6605                           ; Name         Instructions Cycles
  6606                           ; simple_byte            4     3 (average)
  6607                           ;	Chosen strategy is simple_byte
  6608  002B1A  51C7               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  6609  002B1C  0A00               	xorlw	0	; case 0
  6610  002B1E  A4D8               	btfss	status,2,c
  6611  002B20  D7F0               	goto	l317
  6612                           
  6613                           ; BSR set to: 0
  6614                           ; Switch size 1, requested type "space"
  6615                           ; Number of cases is 2, Range of values is 0 to 1
  6616                           ; switch strategies available:
  6617                           ; Name         Instructions Cycles
  6618                           ; simple_byte            7     4 (average)
  6619                           ;	Chosen strategy is simple_byte
  6620  002B22  51C6               	movf	??_getSinalSIM800L& (0+255),w,b
  6621  002B24  0A00               	xorlw	0	; case 0
  6622  002B26  B4D8               	btfsc	status,2,c
  6623  002B28  D73D               	goto	l303
  6624  002B2A  0A01               	xorlw	1	; case 1
  6625  002B2C  B4D8               	btfsc	status,2,c
  6626  002B2E  D74B               	goto	l305
  6627  002B30  D7E8               	goto	l317
  6628  002B32                     l304:
  6629  002B32  FFFF               	dw	65535	; assembler added errata NOP
  6630                           
  6631                           ; BSR set to: 0
  6632                           
  6633                           ; BSR set to: 0
  6634                           
  6635                           ; BSR set to: 0
  6636  002B34  0012               	return		;funcret
  6637  002B36  FFFF               	dw	65535	; errata NOP
  6638  002B38                     __end_of_getSinalSIM800L:
  6639                           	opt stack 0
  6640                           tblptru	equ	0xFF8
  6641                           tblptrh	equ	0xFF7
  6642                           tblptrl	equ	0xFF6
  6643                           tablat	equ	0xFF5
  6644                           prodh	equ	0xFF4
  6645                           prodl	equ	0xFF3
  6646                           postinc0	equ	0xFEE
  6647                           wreg	equ	0xFE8
  6648                           postdec1	equ	0xFE5
  6649                           fsr1l	equ	0xFE1
  6650                           indf2	equ	0xFDF
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           
  6655 ;; *************** function _getSerial *****************
  6656 ;; Defined at:
  6657 ;;		line 40 in file "serial.h"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  str             2   53[BANK0 ] PTR unsigned char 
  6660 ;;		 -> STR_7(7), 
  6661 ;;  end             1   55[BANK0 ] unsigned char 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  i               1   60[BANK0 ] unsigned char 
  6664 ;;  ret             2   61[BANK0 ] PTR unsigned char 
  6665 ;;		 -> NULL(0), bufferSerial(60), 
  6666 ;;  length          2   58[BANK0 ] unsigned int 
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  2   53[BANK0 ] PTR unsigned char 
  6669 ;; Registers used:
  6670 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6676 ;;      Params:         0       3       0       0       0       0       0
  6677 ;;      Locals:         0       5       0       0       0       0       0
  6678 ;;      Temps:          0       2       0       0       0       0       0
  6679 ;;      Totals:         0      10       0       0       0       0       0
  6680 ;;Total ram usage:       10 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    9
  6683 ;; This function calls:
  6684 ;;		_memset
  6685 ;;		_sprintf
  6686 ;;		_strlen
  6687 ;;		_strstr
  6688 ;; This function is called by:
  6689 ;;		_getSinalSIM800L
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text14
  6694  0031A0                     __ptext14:
  6695                           	opt stack 0
  6696  0031A0                     _getSerial:
  6697                           	opt stack 0
  6698  0031A0  FFFF               	dw	65535	; assembler added errata NOP
  6699                           
  6700                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  6701                           
  6702                           ;incstack = 0
  6703  0031A2  0E90               	movlw	low _bufferAUX
  6704  0031A4  0100               	movlb	0	; () banked
  6705  0031A6  6F80               	movwf	memset@p1& (0+255),b
  6706  0031A8  0E01               	movlw	high _bufferAUX
  6707  0031AA  6F81               	movwf	(memset@p1+1)& (0+255),b
  6708  0031AC  0E00               	movlw	0
  6709  0031AE  6F83               	movwf	(memset@c+1)& (0+255),b
  6710  0031B0  0E00               	movlw	0
  6711  0031B2  6F82               	movwf	memset@c& (0+255),b
  6712  0031B4  0E00               	movlw	0
  6713  0031B6  6F85               	movwf	(memset@n+1)& (0+255),b
  6714  0031B8  0E14               	movlw	20
  6715  0031BA  6F84               	movwf	memset@n& (0+255),b
  6716  0031BC  EC50  F038         	call	_memset	;wreg free
  6717                           
  6718                           ;serial.h: 42: unsigned int length = strlen(str);
  6719  0031C0  C0B5  F080         	movff	getSerial@str,strlen@s
  6720  0031C4  C0B6  F081         	movff	getSerial@str+1,strlen@s+1
  6721  0031C8  ECB7  F03A         	call	_strlen	;wreg free
  6722  0031CC  C080  F0BA         	movff	?_strlen,getSerial@length
  6723  0031D0  C081  F0BB         	movff	?_strlen+1,getSerial@length+1
  6724                           
  6725                           ;serial.h: 43: char* ret;
  6726                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  6727  0031D4  0E00               	movlw	low _bufferSerial
  6728  0031D6  0100               	movlb	0	; () banked
  6729  0031D8  6F8F               	movwf	strstr@s1& (0+255),b
  6730  0031DA  0E01               	movlw	high _bufferSerial
  6731  0031DC  6F90               	movwf	(strstr@s1+1)& (0+255),b
  6732  0031DE  C0B5  F091         	movff	getSerial@str,strstr@s2
  6733  0031E2  C0B6  F092         	movff	getSerial@str+1,strstr@s2+1
  6734  0031E6  EC95  F01F         	call	_strstr	;wreg free
  6735  0031EA  C08F  F0BD         	movff	?_strstr,getSerial@ret
  6736  0031EE  C090  F0BE         	movff	?_strstr+1,getSerial@ret+1
  6737                           
  6738                           ;serial.h: 45: if (ret) {
  6739  0031F2  0100               	movlb	0	; () banked
  6740  0031F4  51BD               	movf	getSerial@ret& (0+255),w,b
  6741  0031F6  11BE               	iorwf	(getSerial@ret+1)& (0+255),w,b
  6742  0031F8  B4D8               	btfsc	status,2,c
  6743  0031FA  D058               	goto	u5610
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;serial.h: 46: unsigned char i = 0;
  6747  0031FC  0E00               	movlw	0
  6748  0031FE  6FBC               	movwf	getSerial@i& (0+255),b
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  6752  003200  C0BA  F0BC         	movff	getSerial@length,getSerial@i
  6753  003204  D042               	goto	l267
  6754  003206  FFFF               	dw	65535	; assembler added errata NOP
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;serial.h: 48: if (ret[i] == end) {
  6758                           
  6759                           ; BSR set to: 0
  6760  003208  51BC               	movf	getSerial@i& (0+255),w,b
  6761  00320A  0D01               	mullw	1
  6762  00320C  50F3               	movf	prodl,w,c
  6763  00320E  25BD               	addwf	getSerial@ret& (0+255),w,b
  6764  003210  6ED9               	movwf	fsr2l,c
  6765  003212  50F4               	movf	prodh,w,c
  6766  003214  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6767  003216  6EDA               	movwf	fsr2h,c
  6768  003218  51B7               	movf	getSerial@end& (0+255),w,b
  6769  00321A  18DE               	xorwf	postinc2,w,c
  6770  00321C  A4D8               	btfss	status,2,c
  6771  00321E  D017               	goto	l269
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  6775  003220  0E90               	movlw	low _bufferAUX
  6776  003222  6FA1               	movwf	sprintf@wh& (0+255),b
  6777  003224  0E01               	movlw	high _bufferAUX
  6778  003226  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6779  003228  0EE8               	movlw	low STR_1
  6780  00322A  6FA3               	movwf	sprintf@f& (0+255),b
  6781  00322C  0E7F               	movlw	high STR_1
  6782  00322E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6783  003230  0E90               	movlw	low _bufferAUX
  6784  003232  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6785  003234  0E01               	movlw	high _bufferAUX
  6786  003236  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6787  003238  0E00               	movlw	0
  6788  00323A  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  6789  00323C  0E00               	movlw	0
  6790  00323E  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6791  003240  ECC9  F039         	call	_sprintf	;wreg free
  6792                           
  6793                           ;serial.h: 50: return bufferAUX;
  6794  003244  0E90               	movlw	low _bufferAUX
  6795  003246  0100               	movlb	0	; () banked
  6796  003248  6FB5               	movwf	?_getSerial& (0+255),b
  6797  00324A  0E01               	movlw	high _bufferAUX
  6798  00324C  D033               	goto	L14
  6799  00324E                     l269:
  6800  00324E  FFFF               	dw	65535	; assembler added errata NOP
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;serial.h: 51: }
  6804                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  6805                           
  6806                           ; BSR set to: 0
  6807  003250  0E90               	movlw	low _bufferAUX
  6808  003252  6FA1               	movwf	sprintf@wh& (0+255),b
  6809  003254  0E01               	movlw	high _bufferAUX
  6810  003256  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6811  003258  0EE8               	movlw	low STR_1
  6812  00325A  6FA3               	movwf	sprintf@f& (0+255),b
  6813  00325C  0E7F               	movlw	high STR_1
  6814  00325E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6815  003260  0E90               	movlw	low _bufferAUX
  6816  003262  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6817  003264  0E01               	movlw	high _bufferAUX
  6818  003266  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6819  003268  51BC               	movf	getSerial@i& (0+255),w,b
  6820  00326A  0D01               	mullw	1
  6821  00326C  50F3               	movf	prodl,w,c
  6822  00326E  25BD               	addwf	getSerial@ret& (0+255),w,b
  6823  003270  6ED9               	movwf	fsr2l,c
  6824  003272  50F4               	movf	prodh,w,c
  6825  003274  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6826  003276  6EDA               	movwf	fsr2h,c
  6827  003278  50DF               	movf	indf2,w,c
  6828  00327A  6FB8               	movwf	??_getSerial& (0+255),b
  6829  00327C  51B8               	movf	??_getSerial& (0+255),w,b
  6830  00327E  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6831  003280  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  6832  003282  ECC9  F039         	call	_sprintf	;wreg free
  6833  003286  0100               	movlb	0	; () banked
  6834  003288  2BBC               	incf	getSerial@i& (0+255),f,b
  6835  00328A                     l267:
  6836  00328A  FFFF               	dw	65535	; assembler added errata NOP
  6837                           
  6838                           ; BSR set to: 0
  6839                           
  6840                           ; BSR set to: 0
  6841  00328C  C0BD  F080         	movff	getSerial@ret,strlen@s
  6842  003290  C0BE  F081         	movff	getSerial@ret+1,strlen@s+1
  6843  003294  ECB7  F03A         	call	_strlen	;wreg free
  6844  003298  0100               	movlb	0	; () banked
  6845  00329A  51BC               	movf	getSerial@i& (0+255),w,b
  6846  00329C  6FB8               	movwf	??_getSerial& (0+255),b
  6847  00329E  6BB9               	clrf	(??_getSerial+1)& (0+255),b
  6848  0032A0  5180               	movf	?_strlen& (0+255),w,b
  6849  0032A2  5DB8               	subwf	??_getSerial& (0+255),w,b
  6850  0032A4  5181               	movf	(?_strlen+1)& (0+255),w,b
  6851  0032A6  59B9               	subwfb	(??_getSerial+1)& (0+255),w,b
  6852  0032A8  A0D8               	btfss	status,0,c
  6853  0032AA  D7AD               	goto	l268
  6854  0032AC                     u5610:
  6855  0032AC  FFFF               	dw	65535	; assembler added errata NOP
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;serial.h: 53: }
  6859                           ;serial.h: 54: }
  6860                           ;serial.h: 55: return 0;
  6861                           
  6862                           ; BSR set to: 0
  6863                           
  6864                           ; BSR set to: 0
  6865  0032AE  0E00               	movlw	0
  6866  0032B0  6FB5               	movwf	?_getSerial& (0+255),b
  6867  0032B2  0E00               	movlw	0
  6868  0032B4                     L14:
  6869  0032B4  FFFF               	dw	65535	; assembler added errata NOP
  6870  0032B6  6FB6               	movwf	(?_getSerial+1)& (0+255),b
  6871                           
  6872                           ; BSR set to: 0
  6873                           
  6874                           ; BSR set to: 0
  6875  0032B8  0012               	return		;funcret
  6876  0032BA  FFFF               	dw	65535	; errata NOP
  6877  0032BC                     __end_of_getSerial:
  6878                           	opt stack 0
  6879                           tblptru	equ	0xFF8
  6880                           tblptrh	equ	0xFF7
  6881                           tblptrl	equ	0xFF6
  6882                           tablat	equ	0xFF5
  6883                           prodh	equ	0xFF4
  6884                           prodl	equ	0xFF3
  6885                           postinc0	equ	0xFEE
  6886                           wreg	equ	0xFE8
  6887                           postdec1	equ	0xFE5
  6888                           fsr1l	equ	0xFE1
  6889                           indf2	equ	0xFDF
  6890                           postinc2	equ	0xFDE
  6891                           fsr2h	equ	0xFDA
  6892                           fsr2l	equ	0xFD9
  6893                           status	equ	0xFD8
  6894                           
  6895 ;; *************** function _atoi *****************
  6896 ;; Defined at:
  6897 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;  s               2   63[BANK0 ] PTR const unsigned char 
  6900 ;;		 -> bufferAUX(20), NULL(0), 
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;  a               2   68[BANK0 ] int 
  6903 ;;  sign            1   67[BANK0 ] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  2   63[BANK0 ] int 
  6906 ;; Registers used:
  6907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6913 ;;      Params:         0       2       0       0       0       0       0
  6914 ;;      Locals:         0       3       0       0       0       0       0
  6915 ;;      Temps:          0       2       0       0       0       0       0
  6916 ;;      Totals:         0       7       0       0       0       0       0
  6917 ;;Total ram usage:        7 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    7
  6920 ;; This function calls:
  6921 ;;		___wmul
  6922 ;;		_isdigit
  6923 ;; This function is called by:
  6924 ;;		_getSinalSIM800L
  6925 ;; This function uses a non-reentrant model
  6926 ;;
  6927                           
  6928                           	psect	text15
  6929  0035D8                     __ptext15:
  6930                           	opt stack 0
  6931  0035D8                     _atoi:
  6932                           	opt stack 0
  6933  0035D8  FFFF               	dw	65535	; assembler added errata NOP
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;incstack = 0
  6937  0035DA  D004               	goto	l1270
  6938  0035DC  FFFF               	dw	65535	; assembler added errata NOP
  6939  0035DE  0100               	movlb	0	; () banked
  6940  0035E0  4BBF               	infsnz	atoi@s& (0+255),f,b
  6941  0035E2  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  6942  0035E4                     l1270:
  6943  0035E4  FFFF               	dw	65535	; assembler added errata NOP
  6944                           
  6945                           ; BSR set to: 0
  6946  0035E6  C0BF  FFD9         	movff	atoi@s,fsr2l
  6947  0035EA  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6948  0035EE  0E20               	movlw	32
  6949  0035F0  18DE               	xorwf	postinc2,w,c
  6950  0035F2  B4D8               	btfsc	status,2,c
  6951  0035F4  D7F3               	goto	l1271
  6952  0035F6  C0BF  FFD9         	movff	atoi@s,fsr2l
  6953  0035FA  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6954  0035FE  0E09               	movlw	9
  6955  003600  18DE               	xorwf	postinc2,w,c
  6956  003602  B4D8               	btfsc	status,2,c
  6957  003604  D7EB               	goto	l1271
  6958  003606  0E00               	movlw	0
  6959  003608  0100               	movlb	0	; () banked
  6960  00360A  6FC5               	movwf	(atoi@a+1)& (0+255),b
  6961  00360C  0E00               	movlw	0
  6962  00360E  6FC4               	movwf	atoi@a& (0+255),b
  6963  003610  0E00               	movlw	0
  6964  003612  6FC3               	movwf	atoi@sign& (0+255),b
  6965                           
  6966                           ; BSR set to: 0
  6967  003614  C0BF  FFD9         	movff	atoi@s,fsr2l
  6968  003618  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6969  00361C  0E2D               	movlw	45
  6970  00361E  18DE               	xorwf	postinc2,w,c
  6971  003620  A4D8               	btfss	status,2,c
  6972  003622  D002               	goto	l1273
  6973                           
  6974                           ; BSR set to: 0
  6975  003624  2BC3               	incf	atoi@sign& (0+255),f,b
  6976  003626  D028               	goto	l5558
  6977  003628                     l1273:
  6978  003628  FFFF               	dw	65535	; assembler added errata NOP
  6979                           
  6980                           ; BSR set to: 0
  6981                           
  6982                           ; BSR set to: 0
  6983  00362A  C0BF  FFD9         	movff	atoi@s,fsr2l
  6984  00362E  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6985  003632  0E2B               	movlw	43
  6986  003634  18DE               	xorwf	postinc2,w,c
  6987  003636  A4D8               	btfss	status,2,c
  6988  003638  D022               	goto	l1276
  6989  00363A  D01E               	goto	l5558
  6990  00363C  FFFF               	dw	65535	; assembler added errata NOP
  6991                           
  6992                           ; BSR set to: 0
  6993  00363E  C0C4  F080         	movff	atoi@a,___wmul@multiplier
  6994  003642  C0C5  F081         	movff	atoi@a+1,___wmul@multiplier+1
  6995  003646  0E00               	movlw	0
  6996  003648  0100               	movlb	0	; () banked
  6997  00364A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6998  00364C  0E0A               	movlw	10
  6999  00364E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7000  003650  EC4A  F037         	call	___wmul	;wreg free
  7001  003654  C0BF  FFD9         	movff	atoi@s,fsr2l
  7002  003658  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7003  00365C  50DF               	movf	indf2,w,c
  7004  00365E  0100               	movlb	0	; () banked
  7005  003660  6FC1               	movwf	??_atoi& (0+255),b
  7006  003662  6BC2               	clrf	(??_atoi+1)& (0+255),b
  7007  003664  5180               	movf	?___wmul& (0+255),w,b
  7008  003666  27C1               	addwf	??_atoi& (0+255),f,b
  7009  003668  5181               	movf	(?___wmul+1)& (0+255),w,b
  7010  00366A  23C2               	addwfc	(??_atoi+1)& (0+255),f,b
  7011  00366C  0ED0               	movlw	208
  7012  00366E  25C1               	addwf	??_atoi& (0+255),w,b
  7013  003670  6FC4               	movwf	atoi@a& (0+255),b
  7014  003672  0EFF               	movlw	255
  7015  003674  21C2               	addwfc	(??_atoi+1)& (0+255),w,b
  7016  003676  6FC5               	movwf	(atoi@a+1)& (0+255),b
  7017  003678                     l5558:
  7018  003678  FFFF               	dw	65535	; assembler added errata NOP
  7019                           
  7020                           ; BSR set to: 0
  7021  00367A  4BBF               	infsnz	atoi@s& (0+255),f,b
  7022  00367C  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  7023  00367E                     l1276:
  7024  00367E  FFFF               	dw	65535	; assembler added errata NOP
  7025                           
  7026                           ; BSR set to: 0
  7027                           
  7028                           ; BSR set to: 0
  7029  003680  C0BF  FFD9         	movff	atoi@s,fsr2l
  7030  003684  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7031  003688  50DF               	movf	indf2,w,c
  7032  00368A  EC0C  F037         	call	_isdigit
  7033  00368E  B0D8               	btfsc	status,0,c
  7034  003690  D7D5               	goto	l1277
  7035  003692  0100               	movlb	0	; () banked
  7036  003694  51C3               	movf	atoi@sign& (0+255),w,b
  7037  003696  B4D8               	btfsc	status,2,c
  7038  003698  D00D               	goto	l1279
  7039                           
  7040                           ; BSR set to: 0
  7041  00369A  C0C4  F0C1         	movff	atoi@a,??_atoi
  7042  00369E  C0C5  F0C2         	movff	atoi@a+1,??_atoi+1
  7043  0036A2  1FC1               	comf	??_atoi& (0+255),f,b
  7044  0036A4  1FC2               	comf	(??_atoi+1)& (0+255),f,b
  7045  0036A6  4BC1               	infsnz	??_atoi& (0+255),f,b
  7046  0036A8  2BC2               	incf	(??_atoi+1)& (0+255),f,b
  7047  0036AA  C0C1  F0BF         	movff	??_atoi,?_atoi
  7048  0036AE  C0C2  F0C0         	movff	??_atoi+1,?_atoi+1
  7049  0036B2  D005               	goto	l1280
  7050  0036B4                     l1279:
  7051  0036B4  FFFF               	dw	65535	; assembler added errata NOP
  7052                           
  7053                           ; BSR set to: 0
  7054  0036B6  C0C4  F0BF         	movff	atoi@a,?_atoi
  7055  0036BA  C0C5  F0C0         	movff	atoi@a+1,?_atoi+1
  7056  0036BE                     l1280:
  7057  0036BE  FFFF               	dw	65535	; assembler added errata NOP
  7058                           
  7059                           ; BSR set to: 0
  7060  0036C0  0012               	return		;funcret
  7061  0036C2  FFFF               	dw	65535	; errata NOP
  7062  0036C4                     __end_of_atoi:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           postinc0	equ	0xFEE
  7071                           wreg	equ	0xFE8
  7072                           postdec1	equ	0xFE5
  7073                           fsr1l	equ	0xFE1
  7074                           indf2	equ	0xFDF
  7075                           postinc2	equ	0xFDE
  7076                           fsr2h	equ	0xFDA
  7077                           fsr2l	equ	0xFD9
  7078                           status	equ	0xFD8
  7079                           
  7080 ;; *************** function _getDS1307TimeDate *****************
  7081 ;; Defined at:
  7082 ;;		line 52 in file "ds1307.h"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  7085 ;;		 -> rtc(7), 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      void 
  7090 ;; Registers used:
  7091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7097 ;;      Params:         0       2       0       0       0       0       0
  7098 ;;      Locals:         0       0       0       0       0       0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0
  7100 ;;      Totals:         0       2       0       0       0       0       0
  7101 ;;Total ram usage:        2 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    8
  7104 ;; This function calls:
  7105 ;;		_BCDtoDEC
  7106 ;;		_I2C_Read
  7107 ;;		_I2C_Restart
  7108 ;;		_I2C_Start
  7109 ;;		_I2C_Stop
  7110 ;;		_I2C_Write
  7111 ;; This function is called by:
  7112 ;;		_main
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text16
  7117  002E24                     __ptext16:
  7118                           	opt stack 0
  7119  002E24                     _getDS1307TimeDate:
  7120                           	opt stack 0
  7121  002E24  FFFF               	dw	65535	; assembler added errata NOP
  7122                           
  7123                           ;ds1307.h: 54: I2C_Start();
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;incstack = 0
  7127  002E26  EC68  F036         	call	_I2C_Start	;wreg free
  7128                           
  7129                           ;ds1307.h: 55: I2C_Write(0xD0);
  7130  002E2A  0E00               	movlw	0
  7131  002E2C  0100               	movlb	0	; () banked
  7132  002E2E  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7133  002E30  0ED0               	movlw	208
  7134  002E32  6F8A               	movwf	I2C_Write@d& (0+255),b
  7135  002E34  EC81  F036         	call	_I2C_Write	;wreg free
  7136                           
  7137                           ;ds1307.h: 56: I2C_Write(0x00);
  7138  002E38  0E00               	movlw	0
  7139  002E3A  0100               	movlb	0	; () banked
  7140  002E3C  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7141  002E3E  0E00               	movlw	0
  7142  002E40  6F8A               	movwf	I2C_Write@d& (0+255),b
  7143  002E42  EC81  F036         	call	_I2C_Write	;wreg free
  7144                           
  7145                           ;ds1307.h: 57: I2C_Restart();
  7146  002E46  EC74  F036         	call	_I2C_Restart	;wreg free
  7147                           
  7148                           ;ds1307.h: 58: I2C_Write(0xD1);
  7149  002E4A  0E00               	movlw	0
  7150  002E4C  0100               	movlb	0	; () banked
  7151  002E4E  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7152  002E50  0ED1               	movlw	209
  7153  002E52  6F8A               	movwf	I2C_Write@d& (0+255),b
  7154  002E54  EC81  F036         	call	_I2C_Write	;wreg free
  7155                           
  7156                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  7157  002E58  0100               	movlb	0	; () banked
  7158  002E5A  EE20 F001          	lfsr	2,1
  7159  002E5E  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7160  002E60  26D9               	addwf	fsr2l,f,c
  7161  002E62  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7162  002E64  22DA               	addwfc	fsr2h,f,c
  7163  002E66  0E00               	movlw	0
  7164  002E68  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7165  002E6A  0E01               	movlw	1
  7166  002E6C  6F81               	movwf	I2C_Read@a& (0+255),b
  7167  002E6E  EC6D  F038         	call	_I2C_Read	;wreg free
  7168  002E72  0100               	movlb	0	; () banked
  7169  002E74  5181               	movf	?_I2C_Read& (0+255),w,b
  7170  002E76  ECC6  F036         	call	_BCDtoDEC
  7171  002E7A  6EDF               	movwf	indf2,c
  7172                           
  7173                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  7174  002E7C  0100               	movlb	0	; () banked
  7175  002E7E  EE20 F002          	lfsr	2,2
  7176  002E82  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7177  002E84  26D9               	addwf	fsr2l,f,c
  7178  002E86  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7179  002E88  22DA               	addwfc	fsr2h,f,c
  7180  002E8A  0E00               	movlw	0
  7181  002E8C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7182  002E8E  0E01               	movlw	1
  7183  002E90  6F81               	movwf	I2C_Read@a& (0+255),b
  7184  002E92  EC6D  F038         	call	_I2C_Read	;wreg free
  7185  002E96  0100               	movlb	0	; () banked
  7186  002E98  5181               	movf	?_I2C_Read& (0+255),w,b
  7187  002E9A  ECC6  F036         	call	_BCDtoDEC
  7188  002E9E  6EDF               	movwf	indf2,c
  7189                           
  7190                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  7191  002EA0  0100               	movlb	0	; () banked
  7192  002EA2  EE20 F003          	lfsr	2,3
  7193  002EA6  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7194  002EA8  26D9               	addwf	fsr2l,f,c
  7195  002EAA  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7196  002EAC  22DA               	addwfc	fsr2h,f,c
  7197  002EAE  0E00               	movlw	0
  7198  002EB0  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7199  002EB2  0E01               	movlw	1
  7200  002EB4  6F81               	movwf	I2C_Read@a& (0+255),b
  7201  002EB6  EC6D  F038         	call	_I2C_Read	;wreg free
  7202  002EBA  0100               	movlb	0	; () banked
  7203  002EBC  5181               	movf	?_I2C_Read& (0+255),w,b
  7204  002EBE  ECC6  F036         	call	_BCDtoDEC
  7205  002EC2  6EDF               	movwf	indf2,c
  7206                           
  7207                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  7208  002EC4  0E00               	movlw	0
  7209  002EC6  0100               	movlb	0	; () banked
  7210  002EC8  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7211  002ECA  0E01               	movlw	1
  7212  002ECC  6F81               	movwf	I2C_Read@a& (0+255),b
  7213  002ECE  EC6D  F038         	call	_I2C_Read	;wreg free
  7214  002ED2  0100               	movlb	0	; () banked
  7215  002ED4  5181               	movf	?_I2C_Read& (0+255),w,b
  7216  002ED6  ECC6  F036         	call	_BCDtoDEC
  7217  002EDA  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  7218  002EDE  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  7219  002EE2  6EDF               	movwf	indf2,c
  7220                           
  7221                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  7222  002EE4  0100               	movlb	0	; () banked
  7223  002EE6  EE20 F004          	lfsr	2,4
  7224  002EEA  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7225  002EEC  26D9               	addwf	fsr2l,f,c
  7226  002EEE  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7227  002EF0  22DA               	addwfc	fsr2h,f,c
  7228  002EF2  0E00               	movlw	0
  7229  002EF4  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7230  002EF6  0E01               	movlw	1
  7231  002EF8  6F81               	movwf	I2C_Read@a& (0+255),b
  7232  002EFA  EC6D  F038         	call	_I2C_Read	;wreg free
  7233  002EFE  0100               	movlb	0	; () banked
  7234  002F00  5181               	movf	?_I2C_Read& (0+255),w,b
  7235  002F02  ECC6  F036         	call	_BCDtoDEC
  7236  002F06  6EDF               	movwf	indf2,c
  7237                           
  7238                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  7239  002F08  0100               	movlb	0	; () banked
  7240  002F0A  EE20 F005          	lfsr	2,5
  7241  002F0E  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7242  002F10  26D9               	addwf	fsr2l,f,c
  7243  002F12  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7244  002F14  22DA               	addwfc	fsr2h,f,c
  7245  002F16  0E00               	movlw	0
  7246  002F18  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7247  002F1A  0E01               	movlw	1
  7248  002F1C  6F81               	movwf	I2C_Read@a& (0+255),b
  7249  002F1E  EC6D  F038         	call	_I2C_Read	;wreg free
  7250  002F22  0100               	movlb	0	; () banked
  7251  002F24  5181               	movf	?_I2C_Read& (0+255),w,b
  7252  002F26  ECC6  F036         	call	_BCDtoDEC
  7253  002F2A  6EDF               	movwf	indf2,c
  7254                           
  7255                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  7256  002F2C  0100               	movlb	0	; () banked
  7257  002F2E  EE20 F006          	lfsr	2,6
  7258  002F32  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7259  002F34  26D9               	addwf	fsr2l,f,c
  7260  002F36  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7261  002F38  22DA               	addwfc	fsr2h,f,c
  7262  002F3A  0E00               	movlw	0
  7263  002F3C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7264  002F3E  0E00               	movlw	0
  7265  002F40  6F81               	movwf	I2C_Read@a& (0+255),b
  7266  002F42  EC6D  F038         	call	_I2C_Read	;wreg free
  7267  002F46  0100               	movlb	0	; () banked
  7268  002F48  5181               	movf	?_I2C_Read& (0+255),w,b
  7269  002F4A  ECC6  F036         	call	_BCDtoDEC
  7270  002F4E  6EDF               	movwf	indf2,c
  7271                           
  7272                           ;ds1307.h: 66: I2C_Stop();
  7273  002F50  EC6E  F036         	call	_I2C_Stop	;wreg free
  7274  002F54  0012               	return		;funcret
  7275  002F56  FFFF               	dw	65535	; errata NOP
  7276  002F58                     __end_of_getDS1307TimeDate:
  7277                           	opt stack 0
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           postinc0	equ	0xFEE
  7285                           wreg	equ	0xFE8
  7286                           postdec1	equ	0xFE5
  7287                           fsr1l	equ	0xFE1
  7288                           indf2	equ	0xFDF
  7289                           postinc2	equ	0xFDE
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _BCDtoDEC *****************
  7295 ;; Defined at:
  7296 ;;		line 34 in file "function.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  val             1    wreg     unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  val             1    0[BANK0 ] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      unsigned char 
  7303 ;; Registers used:
  7304 ;;		wreg, status,2, status,0, prodl, prodh
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7310 ;;      Params:         0       0       0       0       0       0       0
  7311 ;;      Locals:         0       1       0       0       0       0       0
  7312 ;;      Temps:          0       0       0       0       0       0       0
  7313 ;;      Totals:         0       1       0       0       0       0       0
  7314 ;;Total ram usage:        1 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    6
  7317 ;; This function calls:
  7318 ;;		Nothing
  7319 ;; This function is called by:
  7320 ;;		_getDS1307TimeDate
  7321 ;;		_getDS1307Time
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text17
  7326  006D8C                     __ptext17:
  7327                           	opt stack 0
  7328  006D8C                     _BCDtoDEC:
  7329                           	opt stack 0
  7330  006D8C  FFFF               	dw	65535	; assembler added errata NOP
  7331                           
  7332                           ;incstack = 0
  7333                           ;BCDtoDEC@val stored from wreg
  7334  006D8E  0100               	movlb	0	; () banked
  7335  006D90  6F80               	movwf	BCDtoDEC@val& (0+255),b
  7336                           
  7337                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  7338  006D92  0100               	movlb	0	; () banked
  7339  006D94  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  7340  006D96  0B0F               	andlw	15
  7341  006D98  0B0F               	andlw	15
  7342  006D9A  0D0A               	mullw	10
  7343  006D9C  5180               	movf	BCDtoDEC@val& (0+255),w,b
  7344  006D9E  0B0F               	andlw	15
  7345  006DA0  24F3               	addwf	prodl,w,c
  7346                           
  7347                           ; BSR set to: 0
  7348                           
  7349                           ; BSR set to: 0
  7350  006DA2  0012               	return		;funcret
  7351  006DA4  FFFF               	dw	65535	; errata NOP
  7352  006DA6                     __end_of_BCDtoDEC:
  7353                           	opt stack 0
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           postinc0	equ	0xFEE
  7361                           wreg	equ	0xFE8
  7362                           postdec1	equ	0xFE5
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           fsr2h	equ	0xFDA
  7367                           fsr2l	equ	0xFD9
  7368                           status	equ	0xFD8
  7369                           
  7370 ;; *************** function _dataLoger *****************
  7371 ;; Defined at:
  7372 ;;		line 12 in file "tela_DATALOGER.h"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  logs            1   64[BANK0 ] unsigned char 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7386 ;;      Params:         0       0       0       0       0       0       0
  7387 ;;      Locals:         0       7       0       0       0       0       0
  7388 ;;      Temps:          0       5       0       0       0       0       0
  7389 ;;      Totals:         0      12       0       0       0       0       0
  7390 ;;Total ram usage:       12 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    9
  7393 ;; This function calls:
  7394 ;;		___awdiv
  7395 ;;		_btPress
  7396 ;;		_readEEPROM_ext
  7397 ;;		_sprintf
  7398 ;; This function is called by:
  7399 ;;		_main
  7400 ;; This function uses a non-reentrant model
  7401 ;;
  7402                           
  7403                           	psect	text18
  7404  001B5C                     __ptext18:
  7405                           	opt stack 0
  7406  001B5C                     _dataLoger:
  7407                           	opt stack 0
  7408  001B5C  FFFF               	dw	65535	; assembler added errata NOP
  7409                           
  7410                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;incstack = 0
  7414  001B5E  0E7B               	movlw	low _line1
  7415  001B60  0100               	movlb	0	; () banked
  7416  001B62  6FA1               	movwf	sprintf@wh& (0+255),b
  7417  001B64  0E01               	movlw	high _line1
  7418  001B66  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7419  001B68  0EFC               	movlw	low STR_75
  7420  001B6A  6FA3               	movwf	sprintf@f& (0+255),b
  7421  001B6C  0E7B               	movlw	high STR_75
  7422  001B6E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7423  001B70  C05D  F0A5         	movff	_dtl_dia,?_sprintf+4
  7424  001B74  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7425  001B76  C05C  F0A7         	movff	_dtl_mes,?_sprintf+6
  7426  001B7A  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7427  001B7C  C05B  F0A9         	movff	_dtl_ano,?_sprintf+8
  7428  001B80  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  7429  001B82  C05A  F0AB         	movff	_dtl_hora,?_sprintf+10
  7430  001B86  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  7431  001B88  C059  F0AD         	movff	_dtl_min,?_sprintf+12
  7432  001B8C  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  7433  001B8E  ECC9  F039         	call	_sprintf	;wreg free
  7434                           
  7435                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  7436  001B92  0458               	decf	_dtl_jockey,w,c
  7437  001B94  B4D8               	btfsc	status,2,c
  7438  001B96  D005               	goto	l778
  7439  001B98  0EE3               	movlw	low STR_47
  7440  001B9A  0100               	movlb	0	; () banked
  7441  001B9C  6FBA               	movwf	_dataLoger$1437& (0+255),b
  7442  001B9E  0E7F               	movlw	high STR_47
  7443  001BA0  D005               	goto	L15
  7444  001BA2                     l778:
  7445  001BA2  FFFF               	dw	65535	; assembler added errata NOP
  7446                           
  7447                           ; BSR set to: 0
  7448  001BA4  0EFA               	movlw	low STR_5
  7449  001BA6  0100               	movlb	0	; () banked
  7450  001BA8  6FBA               	movwf	_dataLoger$1437& (0+255),b
  7451  001BAA  0E7F               	movlw	high STR_5
  7452  001BAC                     L15:
  7453  001BAC  FFFF               	dw	65535	; assembler added errata NOP
  7454  001BAE  6FBB               	movwf	(_dataLoger$1437+1)& (0+255),b
  7455                           
  7456                           ; BSR set to: 0
  7457                           
  7458                           ; BSR set to: 0
  7459  001BB0  0E66               	movlw	low _line2
  7460  001BB2  6FA1               	movwf	sprintf@wh& (0+255),b
  7461  001BB4  0E01               	movlw	high _line2
  7462  001BB6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7463  001BB8  0E7F               	movlw	low STR_76
  7464  001BBA  6FA3               	movwf	sprintf@f& (0+255),b
  7465  001BBC  0E7F               	movlw	high STR_76
  7466  001BBE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7467  001BC0  C0BA  F0A5         	movff	_dataLoger$1437,?_sprintf+4
  7468  001BC4  C0BB  F0A6         	movff	_dataLoger$1437+1,?_sprintf+5
  7469  001BC8  ECC9  F039         	call	_sprintf	;wreg free
  7470                           
  7471                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  7472  001BCC  0E74               	movlw	low (_line2+14)
  7473  001BCE  0100               	movlb	0	; () banked
  7474  001BD0  6FA1               	movwf	sprintf@wh& (0+255),b
  7475  001BD2  0E01               	movlw	high (_line2+14)
  7476  001BD4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7477  001BD6  0E2B               	movlw	low STR_79
  7478  001BD8  6FA3               	movwf	sprintf@f& (0+255),b
  7479  001BDA  0E7F               	movlw	high STR_79
  7480  001BDC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7481  001BDE  0E01               	movlw	1
  7482  001BE0  2453               	addwf	_dtl_posi_visualizar,w,c
  7483  001BE2  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7484  001BE4  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7485  001BE6  0E00               	movlw	0
  7486  001BE8  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  7487  001BEA  C054  F0A7         	movff	_totalLogs,?_sprintf+6
  7488  001BEE  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7489  001BF0  ECC9  F039         	call	_sprintf	;wreg free
  7490                           
  7491                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  7492  001BF4  0457               	decf	_dtl_principal,w,c
  7493  001BF6  B4D8               	btfsc	status,2,c
  7494  001BF8  D005               	goto	l782
  7495  001BFA  0EE3               	movlw	low STR_47
  7496  001BFC  0100               	movlb	0	; () banked
  7497  001BFE  6FBC               	movwf	_dataLoger$1443& (0+255),b
  7498  001C00  0E7F               	movlw	high STR_47
  7499  001C02  D005               	goto	L16
  7500  001C04                     l782:
  7501  001C04  FFFF               	dw	65535	; assembler added errata NOP
  7502                           
  7503                           ; BSR set to: 0
  7504  001C06  0EFA               	movlw	low STR_5
  7505  001C08  0100               	movlb	0	; () banked
  7506  001C0A  6FBC               	movwf	_dataLoger$1443& (0+255),b
  7507  001C0C  0E7F               	movlw	high STR_5
  7508  001C0E                     L16:
  7509  001C0E  FFFF               	dw	65535	; assembler added errata NOP
  7510  001C10  6FBD               	movwf	(_dataLoger$1443+1)& (0+255),b
  7511                           
  7512                           ; BSR set to: 0
  7513                           
  7514                           ; BSR set to: 0
  7515  001C12  0E51               	movlw	low _line3
  7516  001C14  6FA1               	movwf	sprintf@wh& (0+255),b
  7517  001C16  0E01               	movlw	high _line3
  7518  001C18  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7519  001C1A  0EB0               	movlw	low STR_80
  7520  001C1C  6FA3               	movwf	sprintf@f& (0+255),b
  7521  001C1E  0E7E               	movlw	high STR_80
  7522  001C20  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7523  001C22  C0BC  F0A5         	movff	_dataLoger$1443,?_sprintf+4
  7524  001C26  C0BD  F0A6         	movff	_dataLoger$1443+1,?_sprintf+5
  7525  001C2A  ECC9  F039         	call	_sprintf	;wreg free
  7526                           
  7527                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  7528  001C2E  0456               	decf	_dtl_estacionaria,w,c
  7529  001C30  B4D8               	btfsc	status,2,c
  7530  001C32  D005               	goto	l786
  7531  001C34  0EE3               	movlw	low STR_47
  7532  001C36  0100               	movlb	0	; () banked
  7533  001C38  6FBE               	movwf	_dataLoger$1448& (0+255),b
  7534  001C3A  0E7F               	movlw	high STR_47
  7535  001C3C  D005               	goto	L17
  7536  001C3E                     l786:
  7537  001C3E  FFFF               	dw	65535	; assembler added errata NOP
  7538                           
  7539                           ; BSR set to: 0
  7540  001C40  0EFA               	movlw	low STR_5
  7541  001C42  0100               	movlb	0	; () banked
  7542  001C44  6FBE               	movwf	_dataLoger$1448& (0+255),b
  7543  001C46  0E7F               	movlw	high STR_5
  7544  001C48                     L17:
  7545  001C48  FFFF               	dw	65535	; assembler added errata NOP
  7546  001C4A  6FBF               	movwf	(_dataLoger$1448+1)& (0+255),b
  7547                           
  7548                           ; BSR set to: 0
  7549                           
  7550                           ; BSR set to: 0
  7551  001C4C  0E3C               	movlw	low _line4
  7552  001C4E  6FA1               	movwf	sprintf@wh& (0+255),b
  7553  001C50  0E01               	movlw	high _line4
  7554  001C52  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7555  001C54  0EBE               	movlw	low STR_83
  7556  001C56  6FA3               	movwf	sprintf@f& (0+255),b
  7557  001C58  0E7E               	movlw	high STR_83
  7558  001C5A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7559  001C5C  C0BE  F0A5         	movff	_dataLoger$1448,?_sprintf+4
  7560  001C60  C0BF  F0A6         	movff	_dataLoger$1448+1,?_sprintf+5
  7561  001C64  ECC9  F039         	call	_sprintf	;wreg free
  7562                           
  7563                           ;tela_DATALOGER.h: 19: if (btPress(1)) {
  7564  001C68  0E01               	movlw	1
  7565  001C6A  EC4A  F03B         	call	_btPress
  7566  001C6E  0900               	iorlw	0
  7567  001C70  B4D8               	btfsc	status,2,c
  7568  001C72  D005               	goto	l789
  7569                           
  7570                           ;tela_DATALOGER.h: 20: option_posi = 0;
  7571  001C74  0E00               	movlw	0
  7572  001C76  0100               	movlb	0	; () banked
  7573  001C78  6FDF               	movwf	_option_posi& (0+255),b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;tela_DATALOGER.h: 21: menu_posi = _menu_posi;
  7577  001C7A  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  7578  001C7E                     l789:
  7579  001C7E  FFFF               	dw	65535	; assembler added errata NOP
  7580                           
  7581                           ;tela_DATALOGER.h: 22: }
  7582                           ;tela_DATALOGER.h: 27: if (btPress(2)) {
  7583                           
  7584                           ; BSR set to: 0
  7585  001C80  0E02               	movlw	2
  7586  001C82  EC4A  F03B         	call	_btPress
  7587  001C86  0900               	iorlw	0
  7588  001C88  B4D8               	btfsc	status,2,c
  7589  001C8A  D00B               	goto	l790
  7590                           
  7591                           ;tela_DATALOGER.h: 28: dtl_posicao -= 8;
  7592  001C8C  0E08               	movlw	8
  7593  001C8E  0100               	movlb	0	; () banked
  7594  001C90  5FFA               	subwf	_dtl_posicao& (0+255),f,b
  7595                           
  7596                           ;tela_DATALOGER.h: 29: if (dtl_posicao < 60) {
  7597  001C92  0E3C               	movlw	60
  7598  001C94  61FA               	cpfslt	_dtl_posicao& (0+255),b
  7599  001C96  D002               	goto	l791
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;tela_DATALOGER.h: 30: dtl_posicao = 60;
  7603  001C98  0E3C               	movlw	60
  7604  001C9A  6FFA               	movwf	_dtl_posicao& (0+255),b
  7605  001C9C                     l791:
  7606  001C9C  FFFF               	dw	65535	; assembler added errata NOP
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;tela_DATALOGER.h: 31: }
  7610                           ;tela_DATALOGER.h: 32: dtl_carregar_log = 1;
  7611  001C9E  0E01               	movlw	1
  7612  001CA0  6E55               	movwf	_dtl_carregar_log,c
  7613  001CA2                     l790:
  7614  001CA2  FFFF               	dw	65535	; assembler added errata NOP
  7615                           
  7616                           ;tela_DATALOGER.h: 33: }
  7617                           ;tela_DATALOGER.h: 34: if (btPress(3)) {
  7618                           
  7619                           ; BSR set to: 0
  7620  001CA4  0E03               	movlw	3
  7621  001CA6  EC4A  F03B         	call	_btPress
  7622  001CAA  0900               	iorlw	0
  7623  001CAC  B4D8               	btfsc	status,2,c
  7624  001CAE  D019               	goto	l792
  7625                           
  7626                           ;tela_DATALOGER.h: 35: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  7627  001CB0  5054               	movf	_totalLogs,w,c
  7628  001CB2  0100               	movlb	0	; () banked
  7629  001CB4  6FB5               	movwf	??_dataLoger& (0+255),b
  7630  001CB6  6BB6               	clrf	(??_dataLoger+1)& (0+255),b
  7631  001CB8  5053               	movf	_dtl_posi_visualizar,w,c
  7632  001CBA  6FB7               	movwf	(??_dataLoger+2)& (0+255),b
  7633  001CBC  6BB8               	clrf	(??_dataLoger+3)& (0+255),b
  7634  001CBE  0E01               	movlw	1
  7635  001CC0  27B7               	addwf	(??_dataLoger+2)& (0+255),f,b
  7636  001CC2  0E00               	movlw	0
  7637  001CC4  23B8               	addwfc	(??_dataLoger+3)& (0+255),f,b
  7638  001CC6  51B5               	movf	??_dataLoger& (0+255),w,b
  7639  001CC8  5DB7               	subwf	(??_dataLoger+2)& (0+255),w,b
  7640  001CCA  51B8               	movf	(??_dataLoger+3)& (0+255),w,b
  7641  001CCC  0A80               	xorlw	128
  7642  001CCE  6FB9               	movwf	(??_dataLoger+4)& (0+255),b
  7643  001CD0  51B6               	movf	(??_dataLoger+1)& (0+255),w,b
  7644  001CD2  0A80               	xorlw	128
  7645  001CD4  59B9               	subwfb	(??_dataLoger+4)& (0+255),w,b
  7646  001CD6  B0D8               	btfsc	status,0,c
  7647  001CD8  D05A               	goto	l795
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;tela_DATALOGER.h: 37: }
  7651                           ;tela_DATALOGER.h: 38: dtl_posicao += 8;
  7652                           
  7653                           ; BSR set to: 0
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;tela_DATALOGER.h: 36: return;
  7657  001CDA  0E08               	movlw	8
  7658  001CDC  27FA               	addwf	_dtl_posicao& (0+255),f,b
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;tela_DATALOGER.h: 39: dtl_carregar_log = 1;
  7662  001CDE  0E01               	movlw	1
  7663  001CE0  6E55               	movwf	_dtl_carregar_log,c
  7664  001CE2                     l792:
  7665  001CE2  FFFF               	dw	65535	; assembler added errata NOP
  7666                           
  7667                           ;tela_DATALOGER.h: 40: }
  7668                           ;tela_DATALOGER.h: 42: if (dtl_carregar_log == 1) {
  7669                           
  7670                           ; BSR set to: 0
  7671  001CE4  0455               	decf	_dtl_carregar_log,w,c
  7672  001CE6  A4D8               	btfss	status,2,c
  7673  001CE8  D052               	goto	l795
  7674                           
  7675                           ;tela_DATALOGER.h: 43: char logs = readEEPROM_ext(14);
  7676  001CEA  0E0E               	movlw	14
  7677  001CEC  EC61  F03A         	call	_readEEPROM_ext
  7678  001CF0  0100               	movlb	0	; () banked
  7679  001CF2  6FC0               	movwf	dataLoger@logs& (0+255),b
  7680                           
  7681                           ;tela_DATALOGER.h: 44: totalLogs = (logs - 60) / 8;
  7682  001CF4  0EC4               	movlw	196
  7683  001CF6  25C0               	addwf	dataLoger@logs& (0+255),w,b
  7684  001CF8  6F80               	movwf	___awdiv@dividend& (0+255),b
  7685  001CFA  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7686  001CFC  0EFF               	movlw	255
  7687  001CFE  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7688  001D00  0E00               	movlw	0
  7689  001D02  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7690  001D04  0E08               	movlw	8
  7691  001D06  6F82               	movwf	___awdiv@divisor& (0+255),b
  7692  001D08  ECFB  F01E         	call	___awdiv	;wreg free
  7693  001D0C  0100               	movlb	0	; () banked
  7694  001D0E  5180               	movf	?___awdiv& (0+255),w,b
  7695  001D10  6E54               	movwf	_totalLogs,c
  7696                           
  7697                           ;tela_DATALOGER.h: 46: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  7698  001D12  0EC4               	movlw	196
  7699  001D14  25FA               	addwf	_dtl_posicao& (0+255),w,b
  7700  001D16  6F80               	movwf	___awdiv@dividend& (0+255),b
  7701  001D18  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7702  001D1A  0EFF               	movlw	255
  7703  001D1C  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7704  001D1E  0E00               	movlw	0
  7705  001D20  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7706  001D22  0E08               	movlw	8
  7707  001D24  6F82               	movwf	___awdiv@divisor& (0+255),b
  7708  001D26  ECFB  F01E         	call	___awdiv	;wreg free
  7709  001D2A  0100               	movlb	0	; () banked
  7710  001D2C  5180               	movf	?___awdiv& (0+255),w,b
  7711  001D2E  6E53               	movwf	_dtl_posi_visualizar,c
  7712                           
  7713                           ;tela_DATALOGER.h: 48: dtl_dia = readEEPROM_ext(dtl_posicao);
  7714  001D30  51FA               	movf	_dtl_posicao& (0+255),w,b
  7715  001D32  EC61  F03A         	call	_readEEPROM_ext
  7716  001D36  6E5D               	movwf	_dtl_dia,c
  7717                           
  7718                           ;tela_DATALOGER.h: 49: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  7719  001D38  0100               	movlb	0	; () banked
  7720  001D3A  29FA               	incf	_dtl_posicao& (0+255),w,b
  7721  001D3C  EC61  F03A         	call	_readEEPROM_ext
  7722  001D40  6E5C               	movwf	_dtl_mes,c
  7723                           
  7724                           ;tela_DATALOGER.h: 50: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  7725  001D42  0100               	movlb	0	; () banked
  7726  001D44  51FA               	movf	_dtl_posicao& (0+255),w,b
  7727  001D46  0F02               	addlw	2
  7728  001D48  EC61  F03A         	call	_readEEPROM_ext
  7729  001D4C  6E5B               	movwf	_dtl_ano,c
  7730                           
  7731                           ;tela_DATALOGER.h: 51: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  7732  001D4E  0100               	movlb	0	; () banked
  7733  001D50  51FA               	movf	_dtl_posicao& (0+255),w,b
  7734  001D52  0F03               	addlw	3
  7735  001D54  EC61  F03A         	call	_readEEPROM_ext
  7736  001D58  6E5A               	movwf	_dtl_hora,c
  7737                           
  7738                           ;tela_DATALOGER.h: 52: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  7739  001D5A  0100               	movlb	0	; () banked
  7740  001D5C  51FA               	movf	_dtl_posicao& (0+255),w,b
  7741  001D5E  0F04               	addlw	4
  7742  001D60  EC61  F03A         	call	_readEEPROM_ext
  7743  001D64  6E59               	movwf	_dtl_min,c
  7744                           
  7745                           ;tela_DATALOGER.h: 53: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  7746  001D66  0100               	movlb	0	; () banked
  7747  001D68  51FA               	movf	_dtl_posicao& (0+255),w,b
  7748  001D6A  0F05               	addlw	5
  7749  001D6C  EC61  F03A         	call	_readEEPROM_ext
  7750  001D70  6E58               	movwf	_dtl_jockey,c
  7751                           
  7752                           ;tela_DATALOGER.h: 54: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  7753  001D72  0100               	movlb	0	; () banked
  7754  001D74  51FA               	movf	_dtl_posicao& (0+255),w,b
  7755  001D76  0F06               	addlw	6
  7756  001D78  EC61  F03A         	call	_readEEPROM_ext
  7757  001D7C  6E57               	movwf	_dtl_principal,c
  7758                           
  7759                           ;tela_DATALOGER.h: 55: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  7760  001D7E  0100               	movlb	0	; () banked
  7761  001D80  51FA               	movf	_dtl_posicao& (0+255),w,b
  7762  001D82  0F07               	addlw	7
  7763  001D84  EC61  F03A         	call	_readEEPROM_ext
  7764  001D88  6E56               	movwf	_dtl_estacionaria,c
  7765                           
  7766                           ;tela_DATALOGER.h: 56: dtl_carregar_log = 0;
  7767  001D8A  0E00               	movlw	0
  7768  001D8C  6E55               	movwf	_dtl_carregar_log,c
  7769  001D8E                     l795:
  7770  001D8E  FFFF               	dw	65535	; assembler added errata NOP
  7771  001D90  0012               	return		;funcret
  7772  001D92  FFFF               	dw	65535	; errata NOP
  7773  001D94                     __end_of_dataLoger:
  7774                           	opt stack 0
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           prodh	equ	0xFF4
  7780                           prodl	equ	0xFF3
  7781                           postinc0	equ	0xFEE
  7782                           wreg	equ	0xFE8
  7783                           postdec1	equ	0xFE5
  7784                           fsr1l	equ	0xFE1
  7785                           indf2	equ	0xFDF
  7786                           postinc2	equ	0xFDE
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function _criarCaracteresCGRAM *****************
  7792 ;; Defined at:
  7793 ;;		line 152 in file "lcd.h"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;		None
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;  character      48    7[BANK0 ] const unsigned char [8][
  7798 ;;  i               1   59[BANK0 ] unsigned char 
  7799 ;;  j               1   58[BANK0 ] unsigned char 
  7800 ;;  k               1   57[BANK0 ] unsigned char 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;                  1    wreg      void 
  7803 ;; Registers used:
  7804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7810 ;;      Params:         0       0       0       0       0       0       0
  7811 ;;      Locals:         0      53       0       0       0       0       0
  7812 ;;      Temps:          0       3       0       0       0       0       0
  7813 ;;      Totals:         0      56       0       0       0       0       0
  7814 ;;Total ram usage:       56 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    8
  7817 ;; This function calls:
  7818 ;;		_Lcd_Cmd
  7819 ;;		_Lcd_Write_Char
  7820 ;; This function is called by:
  7821 ;;		_main
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text19
  7826  003A48                     __ptext19:
  7827                           	opt stack 0
  7828  003A48                     _criarCaracteresCGRAM:
  7829                           	opt stack 0
  7830  003A48  FFFF               	dw	65535	; assembler added errata NOP
  7831                           
  7832                           ;lcd.h: 153: const char character[6][8] = {
  7833                           ;lcd.h: 154: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  7834                           ;lcd.h: 155: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  7835                           ;lcd.h: 156: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  7836                           ;lcd.h: 157: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  7837                           ;lcd.h: 158: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  7838                           ;lcd.h: 159: };
  7839                           
  7840                           ;incstack = 0
  7841  003A4A  0E9D               	movlw	low criarCaracteresCGRAM@F2956
  7842  003A4C  6EF6               	movwf	tblptrl,c
  7843  003A4E                     	if	1	;There is more than 1 active tblptr byte
  7844  003A4E  0E7A               	movlw	high criarCaracteresCGRAM@F2956
  7845  003A50  6EF7               	movwf	tblptrh,c
  7846  003A52                     	endif
  7847  003A52                     	if	0	;There are less than 3 active tblptr bytes
  7848  003A52                     	endif
  7849  003A52  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  7850  003A56  0E2F               	movlw	47
  7851  003A58                     u7720:
  7852  003A58  0009               	tblrd		*+
  7853  003A5A  FFFF               	dw	65535	; errata NOP
  7854  003A5C  CFF5 FFDE          	movff	tablat,postinc2
  7855  003A60  06E8               	decf	wreg,f,c
  7856  003A62  E2FA               	bc	u7720
  7857                           
  7858                           ;lcd.h: 160: Lcd_Cmd(0b0100);
  7859  003A64  0E04               	movlw	4
  7860  003A66  EC34  F037         	call	_Lcd_Cmd
  7861                           
  7862                           ;lcd.h: 161: Lcd_Cmd(0b0000);
  7863  003A6A  0E00               	movlw	0
  7864  003A6C  EC34  F037         	call	_Lcd_Cmd
  7865                           
  7866                           ;lcd.h: 162: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7867  003A70  0E32               	movlw	50
  7868  003A72                     u9017:
  7869  003A72  FFFF               	dw	65535	; errata NOP
  7870  003A74  2EE8               	decfsz	wreg,f,c
  7871  003A76  D7FD               	bra	u9017
  7872                           
  7873                           ;lcd.h: 163: char i = 0, j = 0, k = 0;
  7874  003A78  0E00               	movlw	0
  7875  003A7A  0100               	movlb	0	; () banked
  7876  003A7C  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7877                           
  7878                           ; BSR set to: 0
  7879  003A7E  0E00               	movlw	0
  7880  003A80  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7881                           
  7882                           ; BSR set to: 0
  7883  003A82  0E00               	movlw	0
  7884  003A84  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;lcd.h: 164: for (i = 0; i < 5; i++) {
  7888  003A86  0E00               	movlw	0
  7889  003A88  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7890  003A8A                     l6984:
  7891  003A8A  FFFF               	dw	65535	; assembler added errata NOP
  7892                           
  7893                           ; BSR set to: 0
  7894  003A8C  0E04               	movlw	4
  7895  003A8E  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  7896  003A90  D001               	goto	l655
  7897  003A92  D03A               	goto	u7780
  7898  003A94                     l655:
  7899  003A94  FFFF               	dw	65535	; assembler added errata NOP
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;lcd.h: 165: if (k == 1) i = 0;
  7903                           
  7904                           ; BSR set to: 0
  7905  003A96  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  7906  003A98  A4D8               	btfss	status,2,c
  7907  003A9A  D002               	goto	l657
  7908                           
  7909                           ; BSR set to: 0
  7910  003A9C  0E00               	movlw	0
  7911  003A9E  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7912  003AA0                     l657:
  7913  003AA0  FFFF               	dw	65535	; assembler added errata NOP
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;lcd.h: 166: for (j = 0; j < 8; j++) {
  7917  003AA2  0E00               	movlw	0
  7918  003AA4  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7919  003AA6                     l6992:
  7920  003AA6  FFFF               	dw	65535	; assembler added errata NOP
  7921                           
  7922                           ; BSR set to: 0
  7923  003AA8  0E07               	movlw	7
  7924  003AAA  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  7925  003AAC  D001               	goto	l658
  7926  003AAE  D028               	goto	u7770
  7927  003AB0                     l658:
  7928  003AB0  FFFF               	dw	65535	; assembler added errata NOP
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;lcd.h: 167: Lcd_Write_Char((k) ? character[i][j] : 0);
  7932                           
  7933                           ; BSR set to: 0
  7934  003AB2  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  7935  003AB4  A4D8               	btfss	status,2,c
  7936  003AB6  D005               	goto	l661
  7937                           
  7938                           ; BSR set to: 0
  7939  003AB8  0E00               	movlw	0
  7940  003ABA  6FB8               	movwf	(_criarCaracteresCGRAM$1375+1)& (0+255),b
  7941  003ABC  0E00               	movlw	0
  7942  003ABE  6FB7               	movwf	_criarCaracteresCGRAM$1375& (0+255),b
  7943  003AC0  D018               	goto	l663
  7944  003AC2                     l661:
  7945  003AC2  FFFF               	dw	65535	; assembler added errata NOP
  7946                           
  7947                           ; BSR set to: 0
  7948                           
  7949                           ; BSR set to: 0
  7950  003AC4  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  7951  003AC6  0D08               	mullw	8
  7952  003AC8  0E87               	movlw	low criarCaracteresCGRAM@character
  7953  003ACA  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  7954  003ACC  0E00               	movlw	high criarCaracteresCGRAM@character
  7955  003ACE  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  7956  003AD0  50F3               	movf	prodl,w,c
  7957  003AD2  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  7958  003AD4  50F4               	movf	prodh,w,c
  7959  003AD6  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  7960  003AD8  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  7961  003ADA  0D01               	mullw	1
  7962  003ADC  50F3               	movf	prodl,w,c
  7963  003ADE  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  7964  003AE0  6ED9               	movwf	fsr2l,c
  7965  003AE2  50F4               	movf	prodh,w,c
  7966  003AE4  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  7967  003AE6  6EDA               	movwf	fsr2h,c
  7968  003AE8  50DF               	movf	indf2,w,c
  7969  003AEA  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  7970  003AEC  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  7971  003AEE  6FB7               	movwf	_criarCaracteresCGRAM$1375& (0+255),b
  7972  003AF0  6BB8               	clrf	(_criarCaracteresCGRAM$1375+1)& (0+255),b
  7973  003AF2                     l663:
  7974  003AF2  FFFF               	dw	65535	; assembler added errata NOP
  7975                           
  7976                           ; BSR set to: 0
  7977                           
  7978                           ; BSR set to: 0
  7979  003AF4  51B7               	movf	_criarCaracteresCGRAM$1375& (0+255),w,b
  7980  003AF6  EC21  F039         	call	_Lcd_Write_Char
  7981  003AFA  0100               	movlb	0	; () banked
  7982  003AFC  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  7983  003AFE  D7D3               	goto	l6992
  7984  003B00                     u7770:
  7985  003B00  FFFF               	dw	65535	; assembler added errata NOP
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;lcd.h: 168: }
  7989                           ;lcd.h: 169: k++;
  7990                           
  7991                           ; BSR set to: 0
  7992  003B02  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  7993  003B04  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  7994  003B06  D7C1               	goto	l6984
  7995  003B08                     u7780:
  7996  003B08  FFFF               	dw	65535	; assembler added errata NOP
  7997                           
  7998                           ; BSR set to: 0
  7999                           
  8000                           ; BSR set to: 0
  8001  003B0A  0012               	return		;funcret
  8002  003B0C  FFFF               	dw	65535	; errata NOP
  8003  003B0E                     __end_of_criarCaracteresCGRAM:
  8004                           	opt stack 0
  8005                           tblptru	equ	0xFF8
  8006                           tblptrh	equ	0xFF7
  8007                           tblptrl	equ	0xFF6
  8008                           tablat	equ	0xFF5
  8009                           prodh	equ	0xFF4
  8010                           prodl	equ	0xFF3
  8011                           postinc0	equ	0xFEE
  8012                           wreg	equ	0xFE8
  8013                           postdec1	equ	0xFE5
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           fsr2h	equ	0xFDA
  8018                           fsr2l	equ	0xFD9
  8019                           status	equ	0xFD8
  8020                           
  8021 ;; *************** function _configurarEstacionaria *****************
  8022 ;; Defined at:
  8023 ;;		line 7 in file "tela_ESTACIONARIA.h"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;		None
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;		None
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8037 ;;      Params:         0       0       0       0       0       0       0
  8038 ;;      Locals:         0       0       0       0       0       0       0
  8039 ;;      Temps:          0       0       0       0       0       0       0
  8040 ;;      Totals:         0       0       0       0       0       0       0
  8041 ;;Total ram usage:        0 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    9
  8044 ;; This function calls:
  8045 ;;		_blink
  8046 ;;		_btPress
  8047 ;;		_sprintf
  8048 ;;		_writeEEPROM_ext
  8049 ;; This function is called by:
  8050 ;;		_main
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           	psect	text20
  8055  002CB6                     __ptext20:
  8056                           	opt stack 0
  8057  002CB6                     _configurarEstacionaria:
  8058                           	opt stack 0
  8059  002CB6  FFFF               	dw	65535	; assembler added errata NOP
  8060                           
  8061                           ;tela_ESTACIONARIA.h: 9: sprintf(line1, "Configuracao tempo");
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;incstack = 0
  8065  002CB8  0E7B               	movlw	low _line1
  8066  002CBA  0100               	movlb	0	; () banked
  8067  002CBC  6FA1               	movwf	sprintf@wh& (0+255),b
  8068  002CBE  0E01               	movlw	high _line1
  8069  002CC0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8070  002CC2  0E39               	movlw	low STR_96
  8071  002CC4  6FA3               	movwf	sprintf@f& (0+255),b
  8072  002CC6  0E7D               	movlw	high STR_96
  8073  002CC8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8074  002CCA  ECC9  F039         	call	_sprintf	;wreg free
  8075                           
  8076                           ;tela_ESTACIONARIA.h: 10: sprintf(line2, "Max. PARTIDA:");
  8077  002CCE  0E66               	movlw	low _line2
  8078  002CD0  0100               	movlb	0	; () banked
  8079  002CD2  6FA1               	movwf	sprintf@wh& (0+255),b
  8080  002CD4  0E01               	movlw	high _line2
  8081  002CD6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8082  002CD8  0EA2               	movlw	low STR_97
  8083  002CDA  6FA3               	movwf	sprintf@f& (0+255),b
  8084  002CDC  0E7E               	movlw	high STR_97
  8085  002CDE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8086  002CE0  ECC9  F039         	call	_sprintf	;wreg free
  8087                           
  8088                           ;tela_ESTACIONARIA.h: 11: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  8089  002CE4  0E76               	movlw	low (_line2+16)
  8090  002CE6  0100               	movlb	0	; () banked
  8091  002CE8  6FA1               	movwf	sprintf@wh& (0+255),b
  8092  002CEA  0E01               	movlw	high (_line2+16)
  8093  002CEC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8094  002CEE  0EED               	movlw	low STR_98
  8095  002CF0  6FA3               	movwf	sprintf@f& (0+255),b
  8096  002CF2  0E7F               	movlw	high STR_98
  8097  002CF4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8098  002CF6  C0E5  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  8099  002CFA  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8100  002CFC  ECC9  F039         	call	_sprintf	;wreg free
  8101                           
  8102                           ;tela_ESTACIONARIA.h: 12: sprintf(line3, "Max. TESTE:");
  8103  002D00  0E51               	movlw	low _line3
  8104  002D02  0100               	movlb	0	; () banked
  8105  002D04  6FA1               	movwf	sprintf@wh& (0+255),b
  8106  002D06  0E01               	movlw	high _line3
  8107  002D08  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8108  002D0A  0EF1               	movlw	low STR_99
  8109  002D0C  6FA3               	movwf	sprintf@f& (0+255),b
  8110  002D0E  0E7E               	movlw	high STR_99
  8111  002D10  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8112  002D12  ECC9  F039         	call	_sprintf	;wreg free
  8113                           
  8114                           ;tela_ESTACIONARIA.h: 13: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  8115  002D16  0E61               	movlw	low (_line3+16)
  8116  002D18  0100               	movlb	0	; () banked
  8117  002D1A  6FA1               	movwf	sprintf@wh& (0+255),b
  8118  002D1C  0E01               	movlw	high (_line3+16)
  8119  002D1E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8120  002D20  0EED               	movlw	low STR_98
  8121  002D22  6FA3               	movwf	sprintf@f& (0+255),b
  8122  002D24  0E7F               	movlw	high STR_98
  8123  002D26  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8124  002D28  C0E4  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  8125  002D2C  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8126  002D2E  ECC9  F039         	call	_sprintf	;wreg free
  8127                           
  8128                           ;tela_ESTACIONARIA.h: 14: sprintf(line4, "#horimetro:%5d min", horimetro);
  8129  002D32  0E3C               	movlw	low _line4
  8130  002D34  0100               	movlb	0	; () banked
  8131  002D36  6FA1               	movwf	sprintf@wh& (0+255),b
  8132  002D38  0E01               	movlw	high _line4
  8133  002D3A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8134  002D3C  0E26               	movlw	low STR_101
  8135  002D3E  6FA3               	movwf	sprintf@f& (0+255),b
  8136  002D40  0E7D               	movlw	high STR_101
  8137  002D42  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8138  002D44  C04F  F0A5         	movff	_horimetro,?_sprintf+4
  8139  002D48  C050  F0A6         	movff	_horimetro+1,?_sprintf+5
  8140  002D4C  ECC9  F039         	call	_sprintf	;wreg free
  8141                           
  8142                           ;tela_ESTACIONARIA.h: 16: if (btPress(4)) {
  8143  002D50  0E04               	movlw	4
  8144  002D52  EC4A  F03B         	call	_btPress
  8145  002D56  0900               	iorlw	0
  8146  002D58  B4D8               	btfsc	status,2,c
  8147  002D5A  D002               	goto	l845
  8148                           
  8149                           ;tela_ESTACIONARIA.h: 17: option_posi++;
  8150  002D5C  0100               	movlb	0	; () banked
  8151  002D5E  2BDF               	incf	_option_posi& (0+255),f,b
  8152  002D60                     l845:
  8153  002D60  FFFF               	dw	65535	; assembler added errata NOP
  8154                           
  8155                           ;tela_ESTACIONARIA.h: 18: }
  8156                           ;tela_ESTACIONARIA.h: 19: if (btPress(1)) {
  8157                           
  8158                           ; BSR set to: 0
  8159  002D62  0E01               	movlw	1
  8160  002D64  EC4A  F03B         	call	_btPress
  8161  002D68  0900               	iorlw	0
  8162  002D6A  B4D8               	btfsc	status,2,c
  8163  002D6C  D04E               	goto	l847
  8164                           
  8165                           ;tela_ESTACIONARIA.h: 20: writeEEPROM_ext(7, tempo_limite_estacionaria);
  8166  002D6E  C0E5  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
  8167  002D72  0E07               	movlw	7
  8168  002D74  ECA6  F039         	call	_writeEEPROM_ext
  8169                           
  8170                           ;tela_ESTACIONARIA.h: 21: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
  8171  002D78  C0E4  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
  8172  002D7C  0E0D               	movlw	13
  8173  002D7E  ECA6  F039         	call	_writeEEPROM_ext
  8174                           
  8175                           ;tela_ESTACIONARIA.h: 22: option_posi = 0;
  8176  002D82  0E00               	movlw	0
  8177  002D84  0100               	movlb	0	; () banked
  8178  002D86  6FDF               	movwf	_option_posi& (0+255),b
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;tela_ESTACIONARIA.h: 23: menu_posi = _menu_posi;
  8182  002D88  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;tela_ESTACIONARIA.h: 24: }
  8186                           ;tela_ESTACIONARIA.h: 25: switch (option_posi) {
  8187  002D8C  D03E               	goto	l847
  8188  002D8E  FFFF               	dw	65535	; assembler added errata NOP
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;tela_ESTACIONARIA.h: 27: blink(line2, 16,20 );
  8192                           
  8193                           ; BSR set to: 0
  8194  002D90  0E66               	movlw	low _line2
  8195  002D92  6F80               	movwf	blink@line& (0+255),b
  8196  002D94  0E01               	movlw	high _line2
  8197  002D96  6F81               	movwf	(blink@line+1)& (0+255),b
  8198  002D98  0E10               	movlw	16
  8199  002D9A  6F82               	movwf	blink@start& (0+255),b
  8200  002D9C  0E14               	movlw	20
  8201  002D9E  6F83               	movwf	blink@end& (0+255),b
  8202  002DA0  ECE1  F01F         	call	_blink	;wreg free
  8203                           
  8204                           ;tela_ESTACIONARIA.h: 28: if (btPress(3)) {
  8205  002DA4  0E03               	movlw	3
  8206  002DA6  EC4A  F03B         	call	_btPress
  8207  002DAA  0900               	iorlw	0
  8208  002DAC  B4D8               	btfsc	status,2,c
  8209  002DAE  D002               	goto	l849
  8210                           
  8211                           ;tela_ESTACIONARIA.h: 29: tempo_limite_estacionaria++;
  8212  002DB0  0100               	movlb	0	; () banked
  8213  002DB2  2BE5               	incf	_tempo_limite_estacionaria& (0+255),f,b
  8214  002DB4                     l849:
  8215  002DB4  FFFF               	dw	65535	; assembler added errata NOP
  8216                           
  8217                           ;tela_ESTACIONARIA.h: 30: }
  8218                           ;tela_ESTACIONARIA.h: 31: if (btPress(2)) {
  8219                           
  8220                           ; BSR set to: 0
  8221  002DB6  0E02               	movlw	2
  8222  002DB8  EC4A  F03B         	call	_btPress
  8223  002DBC  0900               	iorlw	0
  8224  002DBE  B4D8               	btfsc	status,2,c
  8225  002DC0  D02E               	goto	l851
  8226                           
  8227                           ;tela_ESTACIONARIA.h: 32: tempo_limite_estacionaria--;
  8228  002DC2  0100               	movlb	0	; () banked
  8229  002DC4  07E5               	decf	_tempo_limite_estacionaria& (0+255),f,b
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;tela_ESTACIONARIA.h: 33: }
  8233                           ;tela_ESTACIONARIA.h: 34: break;
  8234  002DC6  D02B               	goto	l851
  8235  002DC8  FFFF               	dw	65535	; assembler added errata NOP
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;tela_ESTACIONARIA.h: 36: blink(line3, 16,20 );
  8239                           
  8240                           ; BSR set to: 0
  8241  002DCA  0E51               	movlw	low _line3
  8242  002DCC  6F80               	movwf	blink@line& (0+255),b
  8243  002DCE  0E01               	movlw	high _line3
  8244  002DD0  6F81               	movwf	(blink@line+1)& (0+255),b
  8245  002DD2  0E10               	movlw	16
  8246  002DD4  6F82               	movwf	blink@start& (0+255),b
  8247  002DD6  0E14               	movlw	20
  8248  002DD8  6F83               	movwf	blink@end& (0+255),b
  8249  002DDA  ECE1  F01F         	call	_blink	;wreg free
  8250                           
  8251                           ;tela_ESTACIONARIA.h: 37: if (btPress(3)) {
  8252  002DDE  0E03               	movlw	3
  8253  002DE0  EC4A  F03B         	call	_btPress
  8254  002DE4  0900               	iorlw	0
  8255  002DE6  B4D8               	btfsc	status,2,c
  8256  002DE8  D002               	goto	l853
  8257                           
  8258                           ;tela_ESTACIONARIA.h: 38: tempo_limite_teste_estacionaria++;
  8259  002DEA  0100               	movlb	0	; () banked
  8260  002DEC  2BE4               	incf	_tempo_limite_teste_estacionaria& (0+255),f,b
  8261  002DEE                     l853:
  8262  002DEE  FFFF               	dw	65535	; assembler added errata NOP
  8263                           
  8264                           ;tela_ESTACIONARIA.h: 39: }
  8265                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
  8266                           
  8267                           ; BSR set to: 0
  8268  002DF0  0E02               	movlw	2
  8269  002DF2  EC4A  F03B         	call	_btPress
  8270  002DF6  0900               	iorlw	0
  8271  002DF8  B4D8               	btfsc	status,2,c
  8272  002DFA  D011               	goto	l851
  8273                           
  8274                           ;tela_ESTACIONARIA.h: 41: tempo_limite_teste_estacionaria--;
  8275  002DFC  0100               	movlb	0	; () banked
  8276  002DFE  07E4               	decf	_tempo_limite_teste_estacionaria& (0+255),f,b
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;tela_ESTACIONARIA.h: 42: }
  8280                           ;tela_ESTACIONARIA.h: 43: break;
  8281  002E00  D00E               	goto	l851
  8282  002E02  FFFF               	dw	65535	; assembler added errata NOP
  8283                           
  8284                           ; BSR set to: 0
  8285                           
  8286                           ; BSR set to: 0
  8287  002E04  0E00               	movlw	0
  8288  002E06  6FDF               	movwf	_option_posi& (0+255),b
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;tela_ESTACIONARIA.h: 46: }
  8292                           
  8293                           ;tela_ESTACIONARIA.h: 45: break;
  8294  002E08  D00A               	goto	l851
  8295  002E0A                     l847:
  8296  002E0A  FFFF               	dw	65535	; assembler added errata NOP
  8297                           
  8298                           ; BSR set to: 0
  8299  002E0C  0100               	movlb	0	; () banked
  8300  002E0E  51DF               	movf	_option_posi& (0+255),w,b
  8301                           
  8302                           ; Switch size 1, requested type "space"
  8303                           ; Number of cases is 2, Range of values is 0 to 1
  8304                           ; switch strategies available:
  8305                           ; Name         Instructions Cycles
  8306                           ; simple_byte            7     4 (average)
  8307                           ;	Chosen strategy is simple_byte
  8308  002E10  0A00               	xorlw	0	; case 0
  8309  002E12  B4D8               	btfsc	status,2,c
  8310  002E14  D7BC               	goto	l848
  8311  002E16  0A01               	xorlw	1	; case 1
  8312  002E18  B4D8               	btfsc	status,2,c
  8313  002E1A  D7D6               	goto	l852
  8314  002E1C  D7F2               	goto	l855
  8315  002E1E                     l851:
  8316  002E1E  FFFF               	dw	65535	; assembler added errata NOP
  8317                           
  8318                           ; BSR set to: 0
  8319  002E20  0012               	return		;funcret
  8320  002E22  FFFF               	dw	65535	; errata NOP
  8321  002E24                     __end_of_configurarEstacionaria:
  8322                           	opt stack 0
  8323                           tblptru	equ	0xFF8
  8324                           tblptrh	equ	0xFF7
  8325                           tblptrl	equ	0xFF6
  8326                           tablat	equ	0xFF5
  8327                           prodh	equ	0xFF4
  8328                           prodl	equ	0xFF3
  8329                           postinc0	equ	0xFEE
  8330                           wreg	equ	0xFE8
  8331                           postdec1	equ	0xFE5
  8332                           fsr1l	equ	0xFE1
  8333                           indf2	equ	0xFDF
  8334                           postinc2	equ	0xFDE
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _configuraTelefones *****************
  8340 ;; Defined at:
  8341 ;;		line 9 in file "tela_TELEFONES.h"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  i               1   67[BANK0 ] unsigned char 
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      void 
  8348 ;; Registers used:
  8349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8355 ;;      Params:         0       0       0       0       0       0       0
  8356 ;;      Locals:         0       3       0       0       0       0       0
  8357 ;;      Temps:          0       2       0       0       0       0       0
  8358 ;;      Totals:         0       5       0       0       0       0       0
  8359 ;;Total ram usage:        5 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:   10
  8362 ;; This function calls:
  8363 ;;		_blink
  8364 ;;		_btPress
  8365 ;;		_comunicarTeste
  8366 ;;		_sprintf
  8367 ;;		_writeEEPROM_ext
  8368 ;; This function is called by:
  8369 ;;		_main
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           	psect	text21
  8374  001230                     __ptext21:
  8375                           	opt stack 0
  8376  001230                     _configuraTelefones:
  8377                           	opt stack 0
  8378  001230  FFFF               	dw	65535	; assembler added errata NOP
  8379                           
  8380                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
  8381                           
  8382                           ;incstack = 0
  8383  001232  0E7C               	movlw	low (_line1+1)
  8384  001234  0100               	movlb	0	; () banked
  8385  001236  6FA1               	movwf	sprintf@wh& (0+255),b
  8386  001238  0E01               	movlw	high (_line1+1)
  8387  00123A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8388  00123C  0EB8               	movlw	low STR_91
  8389  00123E  6FA3               	movwf	sprintf@f& (0+255),b
  8390  001240  0E7F               	movlw	high STR_91
  8391  001242  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8392  001244  0EB0               	movlw	low _tel1
  8393  001246  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8394  001248  0E01               	movlw	high _tel1
  8395  00124A  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8396  00124C  ECC9  F039         	call	_sprintf	;wreg free
  8397                           
  8398                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
  8399  001250  0E67               	movlw	low (_line2+1)
  8400  001252  0100               	movlb	0	; () banked
  8401  001254  6FA1               	movwf	sprintf@wh& (0+255),b
  8402  001256  0E01               	movlw	high (_line2+1)
  8403  001258  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8404  00125A  0EBF               	movlw	low STR_92
  8405  00125C  6FA3               	movwf	sprintf@f& (0+255),b
  8406  00125E  0E7F               	movlw	high STR_92
  8407  001260  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8408  001262  0EA4               	movlw	low _tel2
  8409  001264  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8410  001266  0E01               	movlw	high _tel2
  8411  001268  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8412  00126A  ECC9  F039         	call	_sprintf	;wreg free
  8413                           
  8414                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? " aguarde... " : "Enviar sm
      +                          s teste");
  8415  00126E  0100               	movlb	0	; () banked
  8416  001270  51F4               	movf	_gsmOcupado& (0+255),w,b
  8417  001272  A4D8               	btfss	status,2,c
  8418  001274  D004               	goto	l803
  8419                           
  8420                           ; BSR set to: 0
  8421  001276  0EDA               	movlw	low STR_95
  8422  001278  6FC1               	movwf	_configuraTelefones$1463& (0+255),b
  8423  00127A  0E7D               	movlw	high STR_95
  8424  00127C  D004               	goto	L18
  8425  00127E                     l803:
  8426  00127E  FFFF               	dw	65535	; assembler added errata NOP
  8427                           
  8428                           ; BSR set to: 0
  8429                           
  8430                           ; BSR set to: 0
  8431  001280  0ECC               	movlw	low STR_94
  8432  001282  6FC1               	movwf	_configuraTelefones$1463& (0+255),b
  8433  001284  0E7E               	movlw	high STR_94
  8434  001286                     L18:
  8435  001286  FFFF               	dw	65535	; assembler added errata NOP
  8436  001288  6FC2               	movwf	(_configuraTelefones$1463+1)& (0+255),b
  8437                           
  8438                           ; BSR set to: 0
  8439                           
  8440                           ; BSR set to: 0
  8441  00128A  0E52               	movlw	low (_line3+1)
  8442  00128C  6FA1               	movwf	sprintf@wh& (0+255),b
  8443  00128E  0E01               	movlw	high (_line3+1)
  8444  001290  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8445  001292  0E12               	movlw	low (STR_89+9)
  8446  001294  6FA3               	movwf	sprintf@f& (0+255),b
  8447  001296  0E7F               	movlw	high (STR_89+9)
  8448  001298  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8449  00129A  C0C1  F0A5         	movff	_configuraTelefones$1463,?_sprintf+4
  8450  00129E  C0C2  F0A6         	movff	_configuraTelefones$1463+1,?_sprintf+5
  8451  0012A2  ECC9  F039         	call	_sprintf	;wreg free
  8452                           
  8453                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
  8454  0012A6  0100               	movlb	0	; () banked
  8455  0012A8  51DB               	movf	_ajust_tel& (0+255),w,b
  8456  0012AA  A4D8               	btfss	status,2,c
  8457  0012AC  D050               	goto	l811
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
  8461  0012AE  0E03               	movlw	3
  8462  0012B0  EC4A  F03B         	call	_btPress
  8463  0012B4  0900               	iorlw	0
  8464  0012B6  B4D8               	btfsc	status,2,c
  8465  0012B8  D003               	goto	l807
  8466                           
  8467                           ;tela_TELEFONES.h: 16: option_posi--;
  8468  0012BA  0100               	movlb	0	; () banked
  8469  0012BC  07DF               	decf	_option_posi& (0+255),f,b
  8470                           
  8471                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
  8472  0012BE  D047               	goto	l811
  8473  0012C0                     l807:
  8474  0012C0  FFFF               	dw	65535	; assembler added errata NOP
  8475                           
  8476                           ; BSR set to: 0
  8477  0012C2  0E02               	movlw	2
  8478  0012C4  EC4A  F03B         	call	_btPress
  8479  0012C8  0900               	iorlw	0
  8480  0012CA  B4D8               	btfsc	status,2,c
  8481  0012CC  D003               	goto	l809
  8482                           
  8483                           ;tela_TELEFONES.h: 18: option_posi++;
  8484  0012CE  0100               	movlb	0	; () banked
  8485  0012D0  2BDF               	incf	_option_posi& (0+255),f,b
  8486                           
  8487                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
  8488  0012D2  D03D               	goto	l811
  8489  0012D4                     l809:
  8490  0012D4  FFFF               	dw	65535	; assembler added errata NOP
  8491                           
  8492                           ; BSR set to: 0
  8493  0012D6  0E01               	movlw	1
  8494  0012D8  EC4A  F03B         	call	_btPress
  8495  0012DC  0900               	iorlw	0
  8496  0012DE  B4D8               	btfsc	status,2,c
  8497  0012E0  D036               	goto	l811
  8498                           
  8499                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
  8500  0012E2  0E00               	movlw	0
  8501  0012E4  0100               	movlb	0	; () banked
  8502  0012E6  6FF4               	movwf	_gsmOcupado& (0+255),b
  8503                           
  8504                           ;tela_TELEFONES.h: 21: option_posi = 0;
  8505  0012E8  0E00               	movlw	0
  8506  0012EA  6FDF               	movwf	_option_posi& (0+255),b
  8507                           
  8508                           ;tela_TELEFONES.h: 22: tel_posi = 0;
  8509  0012EC  0E00               	movlw	0
  8510  0012EE  6FDC               	movwf	_tel_posi& (0+255),b
  8511                           
  8512                           ;tela_TELEFONES.h: 23: ajust_tel = 0;
  8513  0012F0  0E00               	movlw	0
  8514  0012F2  6FDB               	movwf	_ajust_tel& (0+255),b
  8515                           
  8516                           ;tela_TELEFONES.h: 24: char i = 0;
  8517  0012F4  0E00               	movlw	0
  8518  0012F6  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8519                           
  8520                           ;tela_TELEFONES.h: 25: for (i = 0; i < 11; i++) {
  8521  0012F8  0E00               	movlw	0
  8522  0012FA  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8523  0012FC                     l7314:
  8524  0012FC  FFFF               	dw	65535	; assembler added errata NOP
  8525                           
  8526                           ; BSR set to: 0
  8527  0012FE  0E0A               	movlw	10
  8528  001300  65C3               	cpfsgt	configuraTelefones@i& (0+255),b
  8529  001302  D001               	goto	l812
  8530  001304  D021               	goto	u8310
  8531  001306                     l812:
  8532  001306  FFFF               	dw	65535	; assembler added errata NOP
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;tela_TELEFONES.h: 26: writeEEPROM_ext((20 + i), tel1[i]);
  8536                           
  8537                           ; BSR set to: 0
  8538  001308  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8539  00130A  0D01               	mullw	1
  8540  00130C  0EB0               	movlw	low _tel1
  8541  00130E  24F3               	addwf	prodl,w,c
  8542  001310  6ED9               	movwf	fsr2l,c
  8543  001312  0E01               	movlw	high _tel1
  8544  001314  20F4               	addwfc	prodh,w,c
  8545  001316  6EDA               	movwf	fsr2h,c
  8546  001318  50DF               	movf	indf2,w,c
  8547  00131A  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8548  00131C  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8549  00131E  0F14               	addlw	20
  8550  001320  ECA6  F039         	call	_writeEEPROM_ext
  8551                           
  8552                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((40 + i), tel2[i]);
  8553  001324  0100               	movlb	0	; () banked
  8554  001326  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8555  001328  0D01               	mullw	1
  8556  00132A  0EA4               	movlw	low _tel2
  8557  00132C  24F3               	addwf	prodl,w,c
  8558  00132E  6ED9               	movwf	fsr2l,c
  8559  001330  0E01               	movlw	high _tel2
  8560  001332  20F4               	addwfc	prodh,w,c
  8561  001334  6EDA               	movwf	fsr2h,c
  8562  001336  50DF               	movf	indf2,w,c
  8563  001338  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8564  00133A  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8565  00133C  0F28               	addlw	40
  8566  00133E  ECA6  F039         	call	_writeEEPROM_ext
  8567  001342  0100               	movlb	0	; () banked
  8568  001344  2BC3               	incf	configuraTelefones@i& (0+255),f,b
  8569  001346  D7DA               	goto	l7314
  8570  001348                     u8310:
  8571  001348  FFFF               	dw	65535	; assembler added errata NOP
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;tela_TELEFONES.h: 28: }
  8575                           ;tela_TELEFONES.h: 29: menu_posi = _menu_posi;
  8576  00134A  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  8577  00134E                     l811:
  8578  00134E  FFFF               	dw	65535	; assembler added errata NOP
  8579                           
  8580                           ;tela_TELEFONES.h: 30: }
  8581                           ;tela_TELEFONES.h: 31: }
  8582                           ;tela_TELEFONES.h: 32: if (ajust_tel == 1) {
  8583                           
  8584                           ; BSR set to: 0
  8585                           
  8586                           ; BSR set to: 0
  8587                           
  8588                           ; BSR set to: 0
  8589                           
  8590                           ; BSR set to: 0
  8591  001350  0100               	movlb	0	; () banked
  8592  001352  05DB               	decf	_ajust_tel& (0+255),w,b
  8593  001354  A4D8               	btfss	status,2,c
  8594  001356  D11A               	goto	l818
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;tela_TELEFONES.h: 33: if (btPress(4)) {
  8598  001358  0E04               	movlw	4
  8599  00135A  EC4A  F03B         	call	_btPress
  8600  00135E  0900               	iorlw	0
  8601  001360  B4D8               	btfsc	status,2,c
  8602  001362  D003               	goto	l815
  8603                           
  8604                           ;tela_TELEFONES.h: 34: tel_posi++;
  8605  001364  0100               	movlb	0	; () banked
  8606  001366  2BDC               	incf	_tel_posi& (0+255),f,b
  8607                           
  8608                           ;tela_TELEFONES.h: 35: } else if (btPress(1)) {
  8609  001368  D111               	goto	l818
  8610  00136A                     l815:
  8611  00136A  FFFF               	dw	65535	; assembler added errata NOP
  8612                           
  8613                           ; BSR set to: 0
  8614  00136C  0E01               	movlw	1
  8615  00136E  EC4A  F03B         	call	_btPress
  8616  001372  0900               	iorlw	0
  8617  001374  B4D8               	btfsc	status,2,c
  8618  001376  D10A               	goto	l818
  8619                           
  8620                           ;tela_TELEFONES.h: 36: tel_posi = 0;
  8621  001378  0E00               	movlw	0
  8622  00137A  0100               	movlb	0	; () banked
  8623  00137C  6FDC               	movwf	_tel_posi& (0+255),b
  8624                           
  8625                           ;tela_TELEFONES.h: 37: ajust_tel = 0;
  8626  00137E  0E00               	movlw	0
  8627  001380  6FDB               	movwf	_ajust_tel& (0+255),b
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;tela_TELEFONES.h: 38: }
  8631                           ;tela_TELEFONES.h: 39: }
  8632                           ;tela_TELEFONES.h: 41: switch (option_posi) {
  8633                           
  8634                           ; BSR set to: 0
  8635                           
  8636                           ; BSR set to: 0
  8637  001382  D104               	goto	l818
  8638  001384  FFFF               	dw	65535	; assembler added errata NOP
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;tela_TELEFONES.h: 43: line1[0] = '>';
  8642                           
  8643                           ; BSR set to: 0
  8644  001386  0E3E               	movlw	62
  8645  001388  0101               	movlb	1	; () banked
  8646  00138A  6F7B               	movwf	_line1& (0+255),b
  8647                           
  8648                           ; BSR set to: 1
  8649                           ;tela_TELEFONES.h: 44: if (btPress(4)) {
  8650  00138C  0E04               	movlw	4
  8651  00138E  EC4A  F03B         	call	_btPress
  8652  001392  0900               	iorlw	0
  8653  001394  B4D8               	btfsc	status,2,c
  8654  001396  D003               	goto	l820
  8655                           
  8656                           ;tela_TELEFONES.h: 45: ajust_tel = 1;
  8657  001398  0E01               	movlw	1
  8658  00139A  0100               	movlb	0	; () banked
  8659  00139C  6FDB               	movwf	_ajust_tel& (0+255),b
  8660  00139E                     l820:
  8661  00139E  FFFF               	dw	65535	; assembler added errata NOP
  8662                           
  8663                           ;tela_TELEFONES.h: 46: }
  8664                           ;tela_TELEFONES.h: 47: if (ajust_tel) {
  8665  0013A0  0100               	movlb	0	; () banked
  8666  0013A2  51DB               	movf	_ajust_tel& (0+255),w,b
  8667  0013A4  B4D8               	btfsc	status,2,c
  8668  0013A6  D0FF               	goto	l828
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;tela_TELEFONES.h: 48: blink(line1, (tel_posi + 6), (tel_posi + 6));
  8672  0013A8  0E7B               	movlw	low _line1
  8673  0013AA  6F80               	movwf	blink@line& (0+255),b
  8674  0013AC  0E01               	movlw	high _line1
  8675  0013AE  6F81               	movwf	(blink@line+1)& (0+255),b
  8676  0013B0  51DC               	movf	_tel_posi& (0+255),w,b
  8677  0013B2  0F06               	addlw	6
  8678  0013B4  6F82               	movwf	blink@start& (0+255),b
  8679  0013B6  51DC               	movf	_tel_posi& (0+255),w,b
  8680  0013B8  0F06               	addlw	6
  8681  0013BA  6F83               	movwf	blink@end& (0+255),b
  8682  0013BC  ECE1  F01F         	call	_blink	;wreg free
  8683                           
  8684                           ;tela_TELEFONES.h: 49: if ((tel_posi + 2) > sizeof (tel1)) {
  8685  0013C0  0100               	movlb	0	; () banked
  8686  0013C2  51DC               	movf	_tel_posi& (0+255),w,b
  8687  0013C4  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8688  0013C6  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8689  0013C8  0E02               	movlw	2
  8690  0013CA  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8691  0013CC  0E00               	movlw	0
  8692  0013CE  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8693  0013D0  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8694  0013D2  E104               	bnz	u8370
  8695  0013D4  0E0D               	movlw	13
  8696  0013D6  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8697  0013D8  A0D8               	btfss	status,0,c
  8698  0013DA  D004               	goto	l822
  8699  0013DC                     u8370:
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;tela_TELEFONES.h: 50: tel_posi = 0;
  8703  0013DC  0E00               	movlw	0
  8704  0013DE  6FDC               	movwf	_tel_posi& (0+255),b
  8705                           
  8706                           ;tela_TELEFONES.h: 51: ajust_tel = 0;
  8707  0013E0  0E00               	movlw	0
  8708  0013E2  6FDB               	movwf	_ajust_tel& (0+255),b
  8709  0013E4                     l822:
  8710  0013E4  FFFF               	dw	65535	; assembler added errata NOP
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;tela_TELEFONES.h: 52: }
  8714                           ;tela_TELEFONES.h: 53: if (btPress(3)) {
  8715                           
  8716                           ; BSR set to: 0
  8717  0013E6  0E03               	movlw	3
  8718  0013E8  EC4A  F03B         	call	_btPress
  8719  0013EC  0900               	iorlw	0
  8720  0013EE  B4D8               	btfsc	status,2,c
  8721  0013F0  D00A               	goto	l823
  8722                           
  8723                           ;tela_TELEFONES.h: 54: tel1[tel_posi]++;
  8724  0013F2  0100               	movlb	0	; () banked
  8725  0013F4  51DC               	movf	_tel_posi& (0+255),w,b
  8726  0013F6  0D01               	mullw	1
  8727  0013F8  0EB0               	movlw	low _tel1
  8728  0013FA  24F3               	addwf	prodl,w,c
  8729  0013FC  6ED9               	movwf	fsr2l,c
  8730  0013FE  0E01               	movlw	high _tel1
  8731  001400  20F4               	addwfc	prodh,w,c
  8732  001402  6EDA               	movwf	fsr2h,c
  8733  001404  2ADF               	incf	indf2,f,c
  8734  001406                     l823:
  8735  001406  FFFF               	dw	65535	; assembler added errata NOP
  8736                           
  8737                           ;tela_TELEFONES.h: 55: }
  8738                           ;tela_TELEFONES.h: 56: if (btPress(2)) {
  8739                           
  8740                           ; BSR set to: 0
  8741  001408  0E02               	movlw	2
  8742  00140A  EC4A  F03B         	call	_btPress
  8743  00140E  0900               	iorlw	0
  8744  001410  B4D8               	btfsc	status,2,c
  8745  001412  D00A               	goto	l824
  8746                           
  8747                           ;tela_TELEFONES.h: 57: tel1[tel_posi]--;
  8748  001414  0100               	movlb	0	; () banked
  8749  001416  51DC               	movf	_tel_posi& (0+255),w,b
  8750  001418  0D01               	mullw	1
  8751  00141A  0EB0               	movlw	low _tel1
  8752  00141C  24F3               	addwf	prodl,w,c
  8753  00141E  6ED9               	movwf	fsr2l,c
  8754  001420  0E01               	movlw	high _tel1
  8755  001422  20F4               	addwfc	prodh,w,c
  8756  001424  6EDA               	movwf	fsr2h,c
  8757  001426  06DF               	decf	indf2,f,c
  8758  001428                     l824:
  8759  001428  FFFF               	dw	65535	; assembler added errata NOP
  8760                           
  8761                           ;tela_TELEFONES.h: 58: }
  8762                           ;tela_TELEFONES.h: 59: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
  8763  00142A  0100               	movlb	0	; () banked
  8764  00142C  51DC               	movf	_tel_posi& (0+255),w,b
  8765  00142E  0D01               	mullw	1
  8766  001430  0EB0               	movlw	low _tel1
  8767  001432  24F3               	addwf	prodl,w,c
  8768  001434  6ED9               	movwf	fsr2l,c
  8769  001436  0E01               	movlw	high _tel1
  8770  001438  20F4               	addwfc	prodh,w,c
  8771  00143A  6EDA               	movwf	fsr2h,c
  8772  00143C  0E3A               	movlw	58
  8773  00143E  60DF               	cpfslt	indf2,c
  8774  001440  D00B               	goto	u8410
  8775                           
  8776                           ; BSR set to: 0
  8777  001442  51DC               	movf	_tel_posi& (0+255),w,b
  8778  001444  0D01               	mullw	1
  8779  001446  0EB0               	movlw	low _tel1
  8780  001448  24F3               	addwf	prodl,w,c
  8781  00144A  6ED9               	movwf	fsr2l,c
  8782  00144C  0E01               	movlw	high _tel1
  8783  00144E  20F4               	addwfc	prodh,w,c
  8784  001450  6EDA               	movwf	fsr2h,c
  8785  001452  0E30               	movlw	48
  8786  001454  60DF               	cpfslt	indf2,c
  8787  001456  D0A7               	goto	l828
  8788  001458                     u8410:
  8789  001458  FFFF               	dw	65535	; assembler added errata NOP
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;tela_TELEFONES.h: 60: tel1[tel_posi] = 48;
  8793                           
  8794                           ; BSR set to: 0
  8795  00145A  51DC               	movf	_tel_posi& (0+255),w,b
  8796  00145C  0D01               	mullw	1
  8797  00145E  0EB0               	movlw	low _tel1
  8798  001460  24F3               	addwf	prodl,w,c
  8799  001462  6ED9               	movwf	fsr2l,c
  8800  001464  0E01               	movlw	high _tel1
  8801  001466  D071               	goto	L19
  8802  001468  FFFF               	dw	65535	; assembler added errata NOP
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;tela_TELEFONES.h: 65: line2[0] = '>';
  8806                           
  8807                           ; BSR set to: 0
  8808  00146A  0E3E               	movlw	62
  8809  00146C  0101               	movlb	1	; () banked
  8810  00146E  6F66               	movwf	_line2& (0+255),b
  8811                           
  8812                           ; BSR set to: 1
  8813                           ;tela_TELEFONES.h: 66: if (btPress(4)) {
  8814  001470  0E04               	movlw	4
  8815  001472  EC4A  F03B         	call	_btPress
  8816  001476  0900               	iorlw	0
  8817  001478  B4D8               	btfsc	status,2,c
  8818  00147A  D003               	goto	l830
  8819                           
  8820                           ;tela_TELEFONES.h: 67: ajust_tel = 1;
  8821  00147C  0E01               	movlw	1
  8822  00147E  0100               	movlb	0	; () banked
  8823  001480  6FDB               	movwf	_ajust_tel& (0+255),b
  8824  001482                     l830:
  8825  001482  FFFF               	dw	65535	; assembler added errata NOP
  8826                           
  8827                           ;tela_TELEFONES.h: 68: }
  8828                           ;tela_TELEFONES.h: 69: if (ajust_tel) {
  8829  001484  0100               	movlb	0	; () banked
  8830  001486  51DB               	movf	_ajust_tel& (0+255),w,b
  8831  001488  B4D8               	btfsc	status,2,c
  8832  00148A  D08D               	goto	l828
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;tela_TELEFONES.h: 70: blink(line2, (tel_posi + 6), (tel_posi + 6));
  8836  00148C  0E66               	movlw	low _line2
  8837  00148E  6F80               	movwf	blink@line& (0+255),b
  8838  001490  0E01               	movlw	high _line2
  8839  001492  6F81               	movwf	(blink@line+1)& (0+255),b
  8840  001494  51DC               	movf	_tel_posi& (0+255),w,b
  8841  001496  0F06               	addlw	6
  8842  001498  6F82               	movwf	blink@start& (0+255),b
  8843  00149A  51DC               	movf	_tel_posi& (0+255),w,b
  8844  00149C  0F06               	addlw	6
  8845  00149E  6F83               	movwf	blink@end& (0+255),b
  8846  0014A0  ECE1  F01F         	call	_blink	;wreg free
  8847                           
  8848                           ;tela_TELEFONES.h: 71: if ((tel_posi + 2) > sizeof (tel2)) {
  8849  0014A4  0100               	movlb	0	; () banked
  8850  0014A6  51DC               	movf	_tel_posi& (0+255),w,b
  8851  0014A8  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8852  0014AA  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8853  0014AC  0E02               	movlw	2
  8854  0014AE  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8855  0014B0  0E00               	movlw	0
  8856  0014B2  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8857  0014B4  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8858  0014B6  E104               	bnz	u8440
  8859  0014B8  0E0D               	movlw	13
  8860  0014BA  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8861  0014BC  A0D8               	btfss	status,0,c
  8862  0014BE  D004               	goto	l832
  8863  0014C0                     u8440:
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;tela_TELEFONES.h: 72: tel_posi = 0;
  8867  0014C0  0E00               	movlw	0
  8868  0014C2  6FDC               	movwf	_tel_posi& (0+255),b
  8869                           
  8870                           ;tela_TELEFONES.h: 73: ajust_tel = 0;
  8871  0014C4  0E00               	movlw	0
  8872  0014C6  6FDB               	movwf	_ajust_tel& (0+255),b
  8873  0014C8                     l832:
  8874  0014C8  FFFF               	dw	65535	; assembler added errata NOP
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;tela_TELEFONES.h: 74: }
  8878                           ;tela_TELEFONES.h: 75: if (btPress(3)) {
  8879                           
  8880                           ; BSR set to: 0
  8881  0014CA  0E03               	movlw	3
  8882  0014CC  EC4A  F03B         	call	_btPress
  8883  0014D0  0900               	iorlw	0
  8884  0014D2  B4D8               	btfsc	status,2,c
  8885  0014D4  D00A               	goto	l833
  8886                           
  8887                           ;tela_TELEFONES.h: 76: tel2[tel_posi]++;
  8888  0014D6  0100               	movlb	0	; () banked
  8889  0014D8  51DC               	movf	_tel_posi& (0+255),w,b
  8890  0014DA  0D01               	mullw	1
  8891  0014DC  0EA4               	movlw	low _tel2
  8892  0014DE  24F3               	addwf	prodl,w,c
  8893  0014E0  6ED9               	movwf	fsr2l,c
  8894  0014E2  0E01               	movlw	high _tel2
  8895  0014E4  20F4               	addwfc	prodh,w,c
  8896  0014E6  6EDA               	movwf	fsr2h,c
  8897  0014E8  2ADF               	incf	indf2,f,c
  8898  0014EA                     l833:
  8899  0014EA  FFFF               	dw	65535	; assembler added errata NOP
  8900                           
  8901                           ;tela_TELEFONES.h: 77: }
  8902                           ;tela_TELEFONES.h: 78: if (btPress(2)) {
  8903                           
  8904                           ; BSR set to: 0
  8905  0014EC  0E02               	movlw	2
  8906  0014EE  EC4A  F03B         	call	_btPress
  8907  0014F2  0900               	iorlw	0
  8908  0014F4  B4D8               	btfsc	status,2,c
  8909  0014F6  D00A               	goto	l834
  8910                           
  8911                           ;tela_TELEFONES.h: 79: tel2[tel_posi]--;
  8912  0014F8  0100               	movlb	0	; () banked
  8913  0014FA  51DC               	movf	_tel_posi& (0+255),w,b
  8914  0014FC  0D01               	mullw	1
  8915  0014FE  0EA4               	movlw	low _tel2
  8916  001500  24F3               	addwf	prodl,w,c
  8917  001502  6ED9               	movwf	fsr2l,c
  8918  001504  0E01               	movlw	high _tel2
  8919  001506  20F4               	addwfc	prodh,w,c
  8920  001508  6EDA               	movwf	fsr2h,c
  8921  00150A  06DF               	decf	indf2,f,c
  8922  00150C                     l834:
  8923  00150C  FFFF               	dw	65535	; assembler added errata NOP
  8924                           
  8925                           ;tela_TELEFONES.h: 80: }
  8926                           ;tela_TELEFONES.h: 81: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
  8927  00150E  0100               	movlb	0	; () banked
  8928  001510  51DC               	movf	_tel_posi& (0+255),w,b
  8929  001512  0D01               	mullw	1
  8930  001514  0EA4               	movlw	low _tel2
  8931  001516  24F3               	addwf	prodl,w,c
  8932  001518  6ED9               	movwf	fsr2l,c
  8933  00151A  0E01               	movlw	high _tel2
  8934  00151C  20F4               	addwfc	prodh,w,c
  8935  00151E  6EDA               	movwf	fsr2h,c
  8936  001520  0E3A               	movlw	58
  8937  001522  60DF               	cpfslt	indf2,c
  8938  001524  D00B               	goto	u8480
  8939                           
  8940                           ; BSR set to: 0
  8941  001526  51DC               	movf	_tel_posi& (0+255),w,b
  8942  001528  0D01               	mullw	1
  8943  00152A  0EA4               	movlw	low _tel2
  8944  00152C  24F3               	addwf	prodl,w,c
  8945  00152E  6ED9               	movwf	fsr2l,c
  8946  001530  0E01               	movlw	high _tel2
  8947  001532  20F4               	addwfc	prodh,w,c
  8948  001534  6EDA               	movwf	fsr2h,c
  8949  001536  0E30               	movlw	48
  8950  001538  60DF               	cpfslt	indf2,c
  8951  00153A  D035               	goto	l828
  8952  00153C                     u8480:
  8953  00153C  FFFF               	dw	65535	; assembler added errata NOP
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;tela_TELEFONES.h: 82: tel2[tel_posi] = 48;
  8957                           
  8958                           ; BSR set to: 0
  8959  00153E  51DC               	movf	_tel_posi& (0+255),w,b
  8960  001540  0D01               	mullw	1
  8961  001542  0EA4               	movlw	low _tel2
  8962  001544  24F3               	addwf	prodl,w,c
  8963  001546  6ED9               	movwf	fsr2l,c
  8964  001548  0E01               	movlw	high _tel2
  8965  00154A                     L19:
  8966  00154A  FFFF               	dw	65535	; assembler added errata NOP
  8967  00154C  20F4               	addwfc	prodh,w,c
  8968  00154E  6EDA               	movwf	fsr2h,c
  8969  001550  0E30               	movlw	48
  8970  001552  6EDF               	movwf	indf2,c
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;tela_TELEFONES.h: 83: }
  8974                           ;tela_TELEFONES.h: 84: }
  8975                           ;tela_TELEFONES.h: 85: break;
  8976                           
  8977                           ; BSR set to: 0
  8978  001554  D028               	goto	l828
  8979  001556  FFFF               	dw	65535	; assembler added errata NOP
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;tela_TELEFONES.h: 87: line3[0] = '>';
  8983                           
  8984                           ; BSR set to: 0
  8985  001558  0E3E               	movlw	62
  8986  00155A  0101               	movlb	1	; () banked
  8987  00155C  6F51               	movwf	_line3& (0+255),b
  8988                           
  8989                           ; BSR set to: 1
  8990                           ;tela_TELEFONES.h: 88: if (btPress(4) && intensidadeSinal != 'x' && !gsmOcupado) {
  8991  00155E  0E04               	movlw	4
  8992  001560  EC4A  F03B         	call	_btPress
  8993  001564  0900               	iorlw	0
  8994  001566  B4D8               	btfsc	status,2,c
  8995  001568  D01E               	goto	l828
  8996  00156A  0E78               	movlw	120
  8997  00156C  0100               	movlb	0	; () banked
  8998  00156E  19FF               	xorwf	_intensidadeSinal& (0+255),w,b
  8999  001570  B4D8               	btfsc	status,2,c
  9000  001572  D019               	goto	l828
  9001                           
  9002                           ; BSR set to: 0
  9003  001574  51F4               	movf	_gsmOcupado& (0+255),w,b
  9004  001576  A4D8               	btfss	status,2,c
  9005  001578  D016               	goto	l828
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;tela_TELEFONES.h: 89: gsmOcupado = 1;
  9009  00157A  0E01               	movlw	1
  9010  00157C  6FF4               	movwf	_gsmOcupado& (0+255),b
  9011                           
  9012                           ;tela_TELEFONES.h: 90: telefoneSelecionado = 0;
  9013  00157E  0E00               	movlw	0
  9014  001580  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;tela_TELEFONES.h: 91: }
  9018                           ;tela_TELEFONES.h: 92: break;
  9019  001582  D011               	goto	l828
  9020  001584  FFFF               	dw	65535	; assembler added errata NOP
  9021                           
  9022                           ; BSR set to: 0
  9023                           
  9024                           ; BSR set to: 0
  9025  001586  0E00               	movlw	0
  9026  001588  6FDF               	movwf	_option_posi& (0+255),b
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;tela_TELEFONES.h: 96: }
  9030                           
  9031                           ;tela_TELEFONES.h: 95: break;
  9032  00158A  D00D               	goto	l828
  9033  00158C                     l818:
  9034  00158C  FFFF               	dw	65535	; assembler added errata NOP
  9035                           
  9036                           ; BSR set to: 0
  9037  00158E  0100               	movlb	0	; () banked
  9038  001590  51DF               	movf	_option_posi& (0+255),w,b
  9039                           
  9040                           ; Switch size 1, requested type "space"
  9041                           ; Number of cases is 3, Range of values is 0 to 2
  9042                           ; switch strategies available:
  9043                           ; Name         Instructions Cycles
  9044                           ; simple_byte           10     6 (average)
  9045                           ;	Chosen strategy is simple_byte
  9046  001592  0A00               	xorlw	0	; case 0
  9047  001594  B4D8               	btfsc	status,2,c
  9048  001596  D6F6               	goto	l819
  9049  001598  0A01               	xorlw	1	; case 1
  9050  00159A  B4D8               	btfsc	status,2,c
  9051  00159C  D765               	goto	l829
  9052  00159E  0A03               	xorlw	3	; case 2
  9053  0015A0  B4D8               	btfsc	status,2,c
  9054  0015A2  D7D9               	goto	l838
  9055  0015A4  D7EF               	goto	l840
  9056  0015A6                     l828:
  9057  0015A6  FFFF               	dw	65535	; assembler added errata NOP
  9058                           
  9059                           ;tela_TELEFONES.h: 97: if (gsmOcupado) {
  9060                           
  9061                           ; BSR set to: 0
  9062  0015A8  0100               	movlb	0	; () banked
  9063  0015AA  51F4               	movf	_gsmOcupado& (0+255),w,b
  9064  0015AC  A4D8               	btfss	status,2,c
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;tela_TELEFONES.h: 98: comunicarTeste();
  9068  0015AE  EC08  F012         	call	_comunicarTeste	;wreg free
  9069  0015B2  0012               	return		;funcret
  9070  0015B4  FFFF               	dw	65535	; errata NOP
  9071  0015B6                     __end_of_configuraTelefones:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           postinc0	equ	0xFEE
  9080                           wreg	equ	0xFE8
  9081                           postdec1	equ	0xFE5
  9082                           fsr1l	equ	0xFE1
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function _comunicarTeste *****************
  9090 ;; Defined at:
  9091 ;;		line 57 in file "comunicacao.h"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;		None
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;		None
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  1    wreg      void 
  9098 ;; Registers used:
  9099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9105 ;;      Params:         0       0       0       0       0       0       0
  9106 ;;      Locals:         0       2       0       0       0       0       0
  9107 ;;      Temps:          0       2       0       0       0       0       0
  9108 ;;      Totals:         0       4       0       0       0       0       0
  9109 ;;Total ram usage:        4 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    9
  9112 ;; This function calls:
  9113 ;;		_aguardaBuffer
  9114 ;;		_delay
  9115 ;;		_limparBuffer
  9116 ;;		_printf
  9117 ;;		_writeChar
  9118 ;; This function is called by:
  9119 ;;		_configuraTelefones
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           	psect	text22
  9124  002410                     __ptext22:
  9125                           	opt stack 0
  9126  002410                     _comunicarTeste:
  9127                           	opt stack 0
  9128  002410  FFFF               	dw	65535	; assembler added errata NOP
  9129                           
  9130                           ;comunicacao.h: 58: switch (etapaComunicacao) {
  9131                           
  9132                           ;incstack = 0
  9133  002412  D0D1               	goto	l321
  9134  002414  FFFF               	dw	65535	; assembler added errata NOP
  9135                           
  9136                           ;comunicacao.h: 60: limparBuffer();
  9137  002416  ECE2  F037         	call	_limparBuffer	;wreg free
  9138                           
  9139                           ;comunicacao.h: 61: printf("AT\r\n");
  9140  00241A  0EDE               	movlw	low STR_4
  9141  00241C  0100               	movlb	0	; () banked
  9142  00241E  6FA1               	movwf	printf@f& (0+255),b
  9143  002420  0E7F               	movlw	high STR_4
  9144  002422  6FA2               	movwf	(printf@f+1)& (0+255),b
  9145  002424  ECE3  F038         	call	_printf	;wreg free
  9146                           
  9147                           ;comunicacao.h: 62: etapaComunicacao++;
  9148  002428  4A51               	infsnz	_etapaComunicacao,f,c
  9149  00242A  2A52               	incf	_etapaComunicacao+1,f,c
  9150                           
  9151                           ;comunicacao.h: 63: timerEtapaComunicacao = 5;
  9152  00242C  0E05               	movlw	5
  9153  00242E  0100               	movlb	0	; () banked
  9154  002430  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9155                           
  9156                           ;comunicacao.h: 64: break;
  9157  002432  D0DC               	goto	l323
  9158  002434  FFFF               	dw	65535	; assembler added errata NOP
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;comunicacao.h: 66: if (aguardaBuffer("OK")) {
  9162                           
  9163                           ; BSR set to: 0
  9164  002436  0EFA               	movlw	low STR_5
  9165  002438  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9166  00243A  0E7F               	movlw	high STR_5
  9167  00243C  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9168  00243E  ECC5  F038         	call	_aguardaBuffer	;wreg free
  9169  002442  0900               	iorlw	0
  9170  002444  B4D8               	btfsc	status,2,c
  9171  002446  D00E               	goto	l325
  9172                           
  9173                           ;comunicacao.h: 67: limparBuffer();
  9174  002448  ECE2  F037         	call	_limparBuffer	;wreg free
  9175                           
  9176                           ;comunicacao.h: 68: printf("AT+CMGF=1\r\n");
  9177  00244C  0ED9               	movlw	low STR_10
  9178  00244E  0100               	movlb	0	; () banked
  9179  002450  6FA1               	movwf	printf@f& (0+255),b
  9180  002452  0E7E               	movlw	high STR_10
  9181  002454  6FA2               	movwf	(printf@f+1)& (0+255),b
  9182  002456  ECE3  F038         	call	_printf	;wreg free
  9183                           
  9184                           ;comunicacao.h: 69: etapaComunicacao++;
  9185  00245A  4A51               	infsnz	_etapaComunicacao,f,c
  9186  00245C  2A52               	incf	_etapaComunicacao+1,f,c
  9187                           
  9188                           ;comunicacao.h: 70: timerEtapaComunicacao = 5;
  9189  00245E  0E05               	movlw	5
  9190  002460  0100               	movlb	0	; () banked
  9191  002462  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9192  002464                     l325:
  9193  002464  FFFF               	dw	65535	; assembler added errata NOP
  9194                           
  9195                           ;comunicacao.h: 71: }
  9196                           ;comunicacao.h: 72: if (!timerEtapaComunicacao) {
  9197                           
  9198                           ; BSR set to: 0
  9199  002466  0100               	movlb	0	; () banked
  9200  002468  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9201  00246A  A4D8               	btfss	status,2,c
  9202  00246C  D0BF               	goto	l323
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;comunicacao.h: 73: etapaComunicacao = 0;
  9206  00246E  0E00               	movlw	0
  9207  002470  6E52               	movwf	_etapaComunicacao+1,c
  9208  002472  0E00               	movlw	0
  9209  002474  6E51               	movwf	_etapaComunicacao,c
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;comunicacao.h: 74: writeChar(0x1A);
  9213  002476  0E1A               	movlw	26
  9214  002478  6F80               	movwf	writeChar@hex& (0+255),b
  9215  00247A  0E00               	movlw	0
  9216  00247C  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9217  00247E  EC88  F036         	call	_writeChar	;wreg free
  9218                           
  9219                           ;comunicacao.h: 75: }
  9220                           ;comunicacao.h: 76: break;
  9221  002482  D0B4               	goto	l323
  9222  002484  FFFF               	dw	65535	; assembler added errata NOP
  9223                           
  9224                           ;comunicacao.h: 78: if (aguardaBuffer("OK")) {
  9225  002486  0EFA               	movlw	low STR_5
  9226  002488  0100               	movlb	0	; () banked
  9227  00248A  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9228  00248C  0E7F               	movlw	high STR_5
  9229  00248E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9230  002490  ECC5  F038         	call	_aguardaBuffer	;wreg free
  9231  002494  0900               	iorlw	0
  9232  002496  B4D8               	btfsc	status,2,c
  9233  002498  D083               	goto	L44
  9234                           
  9235                           ;comunicacao.h: 79: limparBuffer();
  9236  00249A  ECE2  F037         	call	_limparBuffer	;wreg free
  9237                           
  9238                           ;comunicacao.h: 80: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
  9239  00249E  0100               	movlb	0	; () banked
  9240  0024A0  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9241  0024A2  B4D8               	btfsc	status,2,c
  9242  0024A4  D004               	goto	l330
  9243                           
  9244                           ; BSR set to: 0
  9245  0024A6  0EA4               	movlw	low _tel2
  9246  0024A8  6FBD               	movwf	_comunicarTeste$1193& (0+255),b
  9247  0024AA  0E01               	movlw	high _tel2
  9248  0024AC  D004               	goto	L20
  9249  0024AE                     l330:
  9250  0024AE  FFFF               	dw	65535	; assembler added errata NOP
  9251                           
  9252                           ; BSR set to: 0
  9253                           
  9254                           ; BSR set to: 0
  9255  0024B0  0EB0               	movlw	low _tel1
  9256  0024B2  6FBD               	movwf	_comunicarTeste$1193& (0+255),b
  9257  0024B4  0E01               	movlw	high _tel1
  9258  0024B6                     L20:
  9259  0024B6  FFFF               	dw	65535	; assembler added errata NOP
  9260  0024B8  6FBE               	movwf	(_comunicarTeste$1193+1)& (0+255),b
  9261                           
  9262                           ; BSR set to: 0
  9263                           
  9264                           ; BSR set to: 0
  9265  0024BA  0E5F               	movlw	low STR_12
  9266  0024BC  6FA1               	movwf	printf@f& (0+255),b
  9267  0024BE  0E7D               	movlw	high STR_12
  9268  0024C0  6FA2               	movwf	(printf@f+1)& (0+255),b
  9269  0024C2  C0BD  F0A3         	movff	_comunicarTeste$1193,?_printf+2
  9270  0024C6  C0BE  F0A4         	movff	_comunicarTeste$1193+1,?_printf+3
  9271  0024CA  ECE3  F038         	call	_printf	;wreg free
  9272                           
  9273                           ;comunicacao.h: 81: timerEtapaComunicacao = 5;
  9274  0024CE  0E05               	movlw	5
  9275  0024D0  0100               	movlb	0	; () banked
  9276  0024D2  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;comunicacao.h: 82: etapaComunicacao++;
  9280  0024D4  4A51               	infsnz	_etapaComunicacao,f,c
  9281  0024D6  2A52               	incf	_etapaComunicacao+1,f,c
  9282                           
  9283                           ;comunicacao.h: 83: break;
  9284  0024D8  D089               	goto	l323
  9285  0024DA  FFFF               	dw	65535	; assembler added errata NOP
  9286                           
  9287                           ; BSR set to: 0
  9288                           ;comunicacao.h: 90: if (aguardaBuffer(">")) {
  9289                           
  9290                           ; BSR set to: 0
  9291  0024DC  0EFD               	movlw	low STR_13
  9292  0024DE  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9293  0024E0  0E7F               	movlw	high STR_13
  9294  0024E2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9295  0024E4  ECC5  F038         	call	_aguardaBuffer	;wreg free
  9296  0024E8  0900               	iorlw	0
  9297  0024EA  B4D8               	btfsc	status,2,c
  9298  0024EC  D059               	goto	L44
  9299                           
  9300                           ;comunicacao.h: 91: limparBuffer();
  9301  0024EE  ECE2  F037         	call	_limparBuffer	;wreg free
  9302                           
  9303                           ;comunicacao.h: 92: printf("TECHNOW Sistemas embarcados\r\n\r\nTeste manual de comunicac
      +                          ao.\r\nData: %02d/%02d/%02d %02d:%02d:%02d\r\n\r\n\r\nVersao do sistema: %s\r\n",
  9304                           ;comunicacao.h: 93: _dia, _mes, _ano, _hor, _min, _sec, "Aug 25 2019");
  9305  0024F2  0ED7               	movlw	low STR_14
  9306  0024F4  0100               	movlb	0	; () banked
  9307  0024F6  6FA1               	movwf	printf@f& (0+255),b
  9308  0024F8  0E7A               	movlw	high STR_14
  9309  0024FA  6FA2               	movwf	(printf@f+1)& (0+255),b
  9310  0024FC  C0EB  F0A3         	movff	__dia,?_printf+2
  9311  002500  6BA4               	clrf	(?_printf+3)& (0+255),b
  9312  002502  C0EA  F0A5         	movff	__mes,?_printf+4
  9313  002506  6BA6               	clrf	(?_printf+5)& (0+255),b
  9314  002508  C0E9  F0A7         	movff	__ano,?_printf+6
  9315  00250C  6BA8               	clrf	(?_printf+7)& (0+255),b
  9316  00250E  C0EC  F0A9         	movff	__hor,?_printf+8
  9317  002512  6BAA               	clrf	(?_printf+9)& (0+255),b
  9318  002514  C0ED  F0AB         	movff	__min,?_printf+10
  9319  002518  6BAC               	clrf	(?_printf+11)& (0+255),b
  9320  00251A  C0EE  F0AD         	movff	__sec,?_printf+12
  9321  00251E  6BAE               	clrf	(?_printf+13)& (0+255),b
  9322  002520  0EE5               	movlw	low STR_15
  9323  002522  6FAF               	movwf	(?_printf+14)& (0+255),b
  9324  002524  0E7E               	movlw	high STR_15
  9325  002526  6FB0               	movwf	(?_printf+15)& (0+255),b
  9326  002528  ECE3  F038         	call	_printf	;wreg free
  9327                           
  9328                           ;comunicacao.h: 94: delay(1000);
  9329  00252C  0E03               	movlw	3
  9330  00252E  0100               	movlb	0	; () banked
  9331  002530  6F81               	movwf	(delay@x+1)& (0+255),b
  9332  002532  0EE8               	movlw	232
  9333  002534  6F80               	movwf	delay@x& (0+255),b
  9334  002536  ECC7  F037         	call	_delay	;wreg free
  9335                           
  9336                           ;comunicacao.h: 95: writeChar(0x1A);
  9337  00253A  0E1A               	movlw	26
  9338  00253C  0100               	movlb	0	; () banked
  9339  00253E  6F80               	movwf	writeChar@hex& (0+255),b
  9340  002540  0E00               	movlw	0
  9341  002542  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9342  002544  EC88  F036         	call	_writeChar	;wreg free
  9343                           
  9344                           ;comunicacao.h: 96: etapaComunicacao++;
  9345  002548  4A51               	infsnz	_etapaComunicacao,f,c
  9346  00254A  2A52               	incf	_etapaComunicacao+1,f,c
  9347                           
  9348                           ;comunicacao.h: 97: timerEtapaComunicacao = 30;
  9349  00254C  0E1E               	movlw	30
  9350  00254E  0100               	movlb	0	; () banked
  9351  002550  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9352                           
  9353                           ; BSR set to: 0
  9354  002552  D026               	goto	L44
  9355  002554  FFFF               	dw	65535	; assembler added errata NOP
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;comunicacao.h: 104: if (aguardaBuffer("OK")) {
  9359                           
  9360                           ; BSR set to: 0
  9361  002556  0EFA               	movlw	low STR_5
  9362  002558  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9363  00255A  0E7F               	movlw	high STR_5
  9364  00255C  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9365  00255E  ECC5  F038         	call	_aguardaBuffer	;wreg free
  9366  002562  0900               	iorlw	0
  9367  002564  B4D8               	btfsc	status,2,c
  9368  002566  D011               	goto	l338
  9369                           
  9370                           ;comunicacao.h: 105: if (telefoneSelecionado == 0) {
  9371  002568  0100               	movlb	0	; () banked
  9372  00256A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9373  00256C  A4D8               	btfss	status,2,c
  9374  00256E  D003               	goto	l339
  9375                           
  9376                           ; BSR set to: 0
  9377                           ;comunicacao.h: 106: telefoneSelecionado = 1;
  9378  002570  0E01               	movlw	1
  9379  002572  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9380                           
  9381                           ;comunicacao.h: 107: } else {
  9382  002574  D005               	goto	l340
  9383  002576                     l339:
  9384  002576  FFFF               	dw	65535	; assembler added errata NOP
  9385                           
  9386                           ; BSR set to: 0
  9387                           ;comunicacao.h: 108: telefoneSelecionado = 0;
  9388                           
  9389                           ; BSR set to: 0
  9390  002578  0E00               	movlw	0
  9391  00257A  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9392                           
  9393                           ;comunicacao.h: 109: gsmOcupado = 0;
  9394  00257C  0E00               	movlw	0
  9395  00257E  6FF4               	movwf	_gsmOcupado& (0+255),b
  9396  002580                     l340:
  9397  002580  FFFF               	dw	65535	; assembler added errata NOP
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;comunicacao.h: 110: }
  9401                           ;comunicacao.h: 111: etapaComunicacao = 0;
  9402  002582  0E00               	movlw	0
  9403  002584  6E52               	movwf	_etapaComunicacao+1,c
  9404  002586  0E00               	movlw	0
  9405  002588  6E51               	movwf	_etapaComunicacao,c
  9406  00258A                     l338:
  9407  00258A  FFFF               	dw	65535	; assembler added errata NOP
  9408                           
  9409                           ;comunicacao.h: 112: }
  9410                           ;comunicacao.h: 113: if (aguardaBuffer("ERROR") || !timerEtapaComunicacao) {
  9411                           
  9412                           ; BSR set to: 0
  9413  00258C  0ED8               	movlw	low STR_17
  9414  00258E  0100               	movlb	0	; () banked
  9415  002590  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9416  002592  0E7F               	movlw	high STR_17
  9417  002594  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9418  002596  ECC5  F038         	call	_aguardaBuffer	;wreg free
  9419  00259A  0900               	iorlw	0
  9420  00259C  A4D8               	btfss	status,2,c
  9421  00259E  D005               	goto	u5840
  9422  0025A0                     L44:
  9423  0025A0  FFFF               	dw	65535	; assembler added errata NOP
  9424  0025A2  0100               	movlb	0	; () banked
  9425  0025A4  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9426  0025A6  A4D8               	btfss	status,2,c
  9427  0025A8  D021               	goto	l323
  9428  0025AA                     u5840:
  9429  0025AA  FFFF               	dw	65535	; assembler added errata NOP
  9430                           
  9431                           ;comunicacao.h: 118: etapaComunicacao = 0;
  9432                           
  9433                           ;comunicacao.h: 117: default:
  9434                           
  9435                           ;comunicacao.h: 115: }
  9436                           ;comunicacao.h: 116: break;
  9437                           
  9438                           ;comunicacao.h: 114: etapaComunicacao = 0;
  9439                           
  9440                           ; BSR set to: 0
  9441  0025AC  0E00               	movlw	0
  9442  0025AE  6E52               	movwf	_etapaComunicacao+1,c
  9443  0025B0  0E00               	movlw	0
  9444  0025B2  6E51               	movwf	_etapaComunicacao,c
  9445                           
  9446                           ;comunicacao.h: 121: }
  9447                           
  9448                           ;comunicacao.h: 119: break;
  9449  0025B4  D01B               	goto	l323
  9450  0025B6                     l321:
  9451  0025B6  FFFF               	dw	65535	; assembler added errata NOP
  9452  0025B8  C051  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
  9453  0025BC  C052  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
  9454                           
  9455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9456                           ; Switch size 1, requested type "space"
  9457                           ; Number of cases is 1, Range of values is 0 to 0
  9458                           ; switch strategies available:
  9459                           ; Name         Instructions Cycles
  9460                           ; simple_byte            4     3 (average)
  9461                           ;	Chosen strategy is simple_byte
  9462  0025C0  0100               	movlb	0	; () banked
  9463  0025C2  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
  9464  0025C4  0A00               	xorlw	0	; case 0
  9465  0025C6  A4D8               	btfss	status,2,c
  9466  0025C8  D7F0               	goto	u5840
  9467                           
  9468                           ; BSR set to: 0
  9469                           ; Switch size 1, requested type "space"
  9470                           ; Number of cases is 5, Range of values is 0 to 4
  9471                           ; switch strategies available:
  9472                           ; Name         Instructions Cycles
  9473                           ; simple_byte           16     9 (average)
  9474                           ;	Chosen strategy is simple_byte
  9475  0025CA  51BB               	movf	??_comunicarTeste& (0+255),w,b
  9476  0025CC  0A00               	xorlw	0	; case 0
  9477  0025CE  B4D8               	btfsc	status,2,c
  9478  0025D0  D721               	goto	l322
  9479  0025D2  0A01               	xorlw	1	; case 1
  9480  0025D4  B4D8               	btfsc	status,2,c
  9481  0025D6  D72E               	goto	l324
  9482  0025D8  0A03               	xorlw	3	; case 2
  9483  0025DA  B4D8               	btfsc	status,2,c
  9484  0025DC  D753               	goto	l327
  9485  0025DE  0A01               	xorlw	1	; case 3
  9486  0025E0  B4D8               	btfsc	status,2,c
  9487  0025E2  D77B               	goto	l334
  9488  0025E4  0A07               	xorlw	7	; case 4
  9489  0025E6  B4D8               	btfsc	status,2,c
  9490  0025E8  D7B5               	goto	l337
  9491  0025EA  D7DF               	goto	u5840
  9492  0025EC                     l323:
  9493  0025EC  FFFF               	dw	65535	; assembler added errata NOP
  9494                           
  9495                           ; BSR set to: 0
  9496  0025EE  0012               	return		;funcret
  9497  0025F0  FFFF               	dw	65535	; errata NOP
  9498  0025F2                     __end_of_comunicarTeste:
  9499                           	opt stack 0
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           postinc0	equ	0xFEE
  9507                           wreg	equ	0xFE8
  9508                           postdec1	equ	0xFE5
  9509                           fsr1l	equ	0xFE1
  9510                           indf2	equ	0xFDF
  9511                           postinc2	equ	0xFDE
  9512                           fsr2h	equ	0xFDA
  9513                           fsr2l	equ	0xFD9
  9514                           status	equ	0xFD8
  9515                           
  9516 ;; *************** function _configuraRegistradores *****************
  9517 ;; Defined at:
  9518 ;;		line 7 in file "registradores.h"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;		None
  9521 ;; Auto vars:     Size  Location     Type
  9522 ;;		None
  9523 ;; Return value:  Size  Location     Type
  9524 ;;                  1    wreg      void 
  9525 ;; Registers used:
  9526 ;;		wreg, status,2
  9527 ;; Tracked objects:
  9528 ;;		On entry : 0/0
  9529 ;;		On exit  : 0/0
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9532 ;;      Params:         0       0       0       0       0       0       0
  9533 ;;      Locals:         0       0       0       0       0       0       0
  9534 ;;      Temps:          0       0       0       0       0       0       0
  9535 ;;      Totals:         0       0       0       0       0       0       0
  9536 ;;Total ram usage:        0 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:    6
  9539 ;; This function calls:
  9540 ;;		Nothing
  9541 ;; This function is called by:
  9542 ;;		_main
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           	psect	text23
  9547  007518                     __ptext23:
  9548                           	opt stack 0
  9549  007518                     _configuraRegistradores:
  9550                           	opt stack 0
  9551  007518  FFFF               	dw	65535	; assembler added errata NOP
  9552                           
  9553                           ;registradores.h: 9: ADCON0 = 0b10000001;
  9554                           
  9555                           ;incstack = 0
  9556  00751A  0E81               	movlw	129
  9557  00751C  6EC2               	movwf	4034,c	;volatile
  9558                           
  9559                           ;registradores.h: 10: ADCON1 = 0b11001110;
  9560  00751E  0ECE               	movlw	206
  9561  007520  6EC1               	movwf	4033,c	;volatile
  9562                           
  9563                           ;registradores.h: 11: TRISAbits.RA0 = 1;
  9564  007522  8092               	bsf	3986,0,c	;volatile
  9565                           
  9566                           ;registradores.h: 12: PORTAbits.AN0 = 0;
  9567  007524  9080               	bcf	3968,0,c	;volatile
  9568                           
  9569                           ;registradores.h: 15: T0CON = 0x81;
  9570  007526  0E81               	movlw	129
  9571  007528  6ED5               	movwf	4053,c	;volatile
  9572                           
  9573                           ;registradores.h: 16: INTCON = 0xE4;
  9574  00752A  0EE4               	movlw	228
  9575  00752C  6EF2               	movwf	intcon,c	;volatile
  9576                           
  9577                           ;registradores.h: 19: TRISDbits.RD5 = 0;
  9578  00752E  9A95               	bcf	3989,5,c	;volatile
  9579                           
  9580                           ;registradores.h: 20: TRISDbits.RD4 = 0;
  9581  007530  9895               	bcf	3989,4,c	;volatile
  9582                           
  9583                           ;registradores.h: 21: TRISDbits.RD3 = 0;
  9584  007532  9695               	bcf	3989,3,c	;volatile
  9585                           
  9586                           ;registradores.h: 22: TRISDbits.RD2 = 0;
  9587  007534  9495               	bcf	3989,2,c	;volatile
  9588                           
  9589                           ;registradores.h: 23: TRISDbits.RD1 = 0;
  9590  007536  9295               	bcf	3989,1,c	;volatile
  9591                           
  9592                           ;registradores.h: 24: TRISDbits.RD0 = 0;
  9593  007538  9095               	bcf	3989,0,c	;volatile
  9594                           
  9595                           ;registradores.h: 27: TRISCbits.TRISC6 = 0;
  9596  00753A  9C94               	bcf	3988,6,c	;volatile
  9597                           
  9598                           ;registradores.h: 28: TRISCbits.TRISC7 = 1;
  9599  00753C  8E94               	bsf	3988,7,c	;volatile
  9600                           
  9601                           ;registradores.h: 29: TXSTAbits.TXEN = 1;
  9602  00753E  8AAC               	bsf	4012,5,c	;volatile
  9603                           
  9604                           ;registradores.h: 30: TXSTAbits.BRGH = 1;
  9605  007540  84AC               	bsf	4012,2,c	;volatile
  9606                           
  9607                           ;registradores.h: 31: TXSTAbits.SYNC = 0;
  9608  007542  98AC               	bcf	4012,4,c	;volatile
  9609                           
  9610                           ;registradores.h: 32: RCSTAbits.SPEN = 1;
  9611  007544  8EAB               	bsf	4011,7,c	;volatile
  9612                           
  9613                           ;registradores.h: 33: RCSTAbits.CREN = 1;
  9614  007546  88AB               	bsf	4011,4,c	;volatile
  9615                           
  9616                           ;registradores.h: 36: SPBRG = 25;
  9617  007548  0E19               	movlw	25
  9618  00754A  6EAF               	movwf	4015,c	;volatile
  9619                           
  9620                           ;registradores.h: 37: INTCONbits.GIE = 1;
  9621  00754C  8EF2               	bsf	intcon,7,c	;volatile
  9622                           
  9623                           ;registradores.h: 38: INTCONbits.PEIE = 1;
  9624  00754E  8CF2               	bsf	intcon,6,c	;volatile
  9625                           
  9626                           ;registradores.h: 39: PIR1bits.RCIF = 0;
  9627  007550  9A9E               	bcf	3998,5,c	;volatile
  9628                           
  9629                           ;registradores.h: 40: PIE1bits.RCIE = 1;
  9630  007552  8A9D               	bsf	3997,5,c	;volatile
  9631                           
  9632                           ;registradores.h: 43: INTCONbits.RBIE = 0;
  9633  007554  96F2               	bcf	intcon,3,c	;volatile
  9634                           
  9635                           ;registradores.h: 44: TRISAbits.RA2 = 1;
  9636  007556  8492               	bsf	3986,2,c	;volatile
  9637                           
  9638                           ;registradores.h: 45: TRISAbits.RA5 = 1;
  9639  007558  8A92               	bsf	3986,5,c	;volatile
  9640                           
  9641                           ;registradores.h: 46: TRISCbits.RC0 = 1;
  9642  00755A  8094               	bsf	3988,0,c	;volatile
  9643                           
  9644                           ;registradores.h: 49: TRISBbits.RB2 = 1;
  9645  00755C  8493               	bsf	3987,2,c	;volatile
  9646                           
  9647                           ;registradores.h: 50: TRISBbits.RB3 = 1;
  9648  00755E  8693               	bsf	3987,3,c	;volatile
  9649                           
  9650                           ;registradores.h: 51: TRISBbits.RB4 = 1;
  9651  007560  8893               	bsf	3987,4,c	;volatile
  9652                           
  9653                           ;registradores.h: 52: TRISBbits.RB5 = 1;
  9654  007562  8A93               	bsf	3987,5,c	;volatile
  9655                           
  9656                           ;registradores.h: 55: TRISEbits.RE0 = 0;
  9657  007564  9096               	bcf	3990,0,c	;volatile
  9658                           
  9659                           ;registradores.h: 56: TRISEbits.RE1 = 0;
  9660  007566  9296               	bcf	3990,1,c	;volatile
  9661                           
  9662                           ;registradores.h: 57: TRISEbits.RE2 = 0;
  9663  007568  9496               	bcf	3990,2,c	;volatile
  9664  00756A  0012               	return		;funcret
  9665  00756C  FFFF               	dw	65535	; errata NOP
  9666  00756E                     __end_of_configuraRegistradores:
  9667                           	opt stack 0
  9668                           tblptru	equ	0xFF8
  9669                           tblptrh	equ	0xFF7
  9670                           tblptrl	equ	0xFF6
  9671                           tablat	equ	0xFF5
  9672                           prodh	equ	0xFF4
  9673                           prodl	equ	0xFF3
  9674                           intcon	equ	0xFF2
  9675                           postinc0	equ	0xFEE
  9676                           wreg	equ	0xFE8
  9677                           postdec1	equ	0xFE5
  9678                           fsr1l	equ	0xFE1
  9679                           indf2	equ	0xFDF
  9680                           postinc2	equ	0xFDE
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function _atualizarLCD *****************
  9686 ;; Defined at:
  9687 ;;		line 132 in file "lcd.h"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  line1           2    8[BANK0 ] PTR unsigned char 
  9690 ;;		 -> line1(21), 
  9691 ;;  line2           2   10[BANK0 ] PTR unsigned char 
  9692 ;;		 -> line2(21), 
  9693 ;;  line3           2   12[BANK0 ] PTR unsigned char 
  9694 ;;		 -> line3(21), 
  9695 ;;  line4           2   14[BANK0 ] PTR unsigned char 
  9696 ;;		 -> line4(21), 
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;  i               1   16[BANK0 ] unsigned char 
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  1    wreg      void 
  9701 ;; Registers used:
  9702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9708 ;;      Params:         0       8       0       0       0       0       0
  9709 ;;      Locals:         0       1       0       0       0       0       0
  9710 ;;      Temps:          0       0       0       0       0       0       0
  9711 ;;      Totals:         0       9       0       0       0       0       0
  9712 ;;Total ram usage:        9 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    9
  9715 ;; This function calls:
  9716 ;;		_Lcd_Set_Cursor
  9717 ;;		_Lcd_Write_String
  9718 ;; This function is called by:
  9719 ;;		_main
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text24
  9724  003976                     __ptext24:
  9725                           	opt stack 0
  9726  003976                     _atualizarLCD:
  9727                           	opt stack 0
  9728  003976  FFFF               	dw	65535	; assembler added errata NOP
  9729                           
  9730                           ;lcd.h: 134: Lcd_Set_Cursor(1, 1);
  9731                           
  9732                           ;incstack = 0
  9733  003978  0E01               	movlw	1
  9734  00397A  0100               	movlb	0	; () banked
  9735  00397C  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9736  00397E  0E01               	movlw	1
  9737  003980  EC87  F01D         	call	_Lcd_Set_Cursor
  9738                           
  9739                           ;lcd.h: 135: Lcd_Write_String(line1);
  9740  003984  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
  9741  003988  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
  9742  00398C  EC8A  F038         	call	_Lcd_Write_String	;wreg free
  9743                           
  9744                           ;lcd.h: 136: Lcd_Set_Cursor(2, 1);
  9745  003990  0E01               	movlw	1
  9746  003992  0100               	movlb	0	; () banked
  9747  003994  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9748  003996  0E02               	movlw	2
  9749  003998  EC87  F01D         	call	_Lcd_Set_Cursor
  9750                           
  9751                           ;lcd.h: 137: Lcd_Write_String(line2);
  9752  00399C  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
  9753  0039A0  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
  9754  0039A4  EC8A  F038         	call	_Lcd_Write_String	;wreg free
  9755                           
  9756                           ;lcd.h: 138: Lcd_Set_Cursor(3, 0);
  9757  0039A8  0E00               	movlw	0
  9758  0039AA  0100               	movlb	0	; () banked
  9759  0039AC  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9760  0039AE  0E03               	movlw	3
  9761  0039B0  EC87  F01D         	call	_Lcd_Set_Cursor
  9762                           
  9763                           ;lcd.h: 139: Lcd_Write_String(line3);
  9764  0039B4  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
  9765  0039B8  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
  9766  0039BC  EC8A  F038         	call	_Lcd_Write_String	;wreg free
  9767                           
  9768                           ;lcd.h: 140: Lcd_Set_Cursor(4, 0);
  9769  0039C0  0E00               	movlw	0
  9770  0039C2  0100               	movlb	0	; () banked
  9771  0039C4  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9772  0039C6  0E04               	movlw	4
  9773  0039C8  EC87  F01D         	call	_Lcd_Set_Cursor
  9774                           
  9775                           ;lcd.h: 141: Lcd_Write_String(line4);
  9776  0039CC  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
  9777  0039D0  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
  9778  0039D4  EC8A  F038         	call	_Lcd_Write_String	;wreg free
  9779                           
  9780                           ;lcd.h: 143: char i = 0;
  9781  0039D8  0E00               	movlw	0
  9782  0039DA  0100               	movlb	0	; () banked
  9783  0039DC  6F90               	movwf	atualizarLCD@i& (0+255),b
  9784                           
  9785                           ; BSR set to: 0
  9786                           ;lcd.h: 144: for (i = 0; i < 20; i++) {
  9787  0039DE  0E00               	movlw	0
  9788  0039E0  6F90               	movwf	atualizarLCD@i& (0+255),b
  9789  0039E2                     l6958:
  9790  0039E2  FFFF               	dw	65535	; assembler added errata NOP
  9791                           
  9792                           ; BSR set to: 0
  9793  0039E4  0E13               	movlw	19
  9794  0039E6  6590               	cpfsgt	atualizarLCD@i& (0+255),b
  9795  0039E8  D001               	goto	l648
  9796  0039EA  D02B               	goto	u7710
  9797  0039EC                     l648:
  9798  0039EC  FFFF               	dw	65535	; assembler added errata NOP
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;lcd.h: 145: line1[i] = ' ';
  9802                           
  9803                           ; BSR set to: 0
  9804  0039EE  5190               	movf	atualizarLCD@i& (0+255),w,b
  9805  0039F0  0D01               	mullw	1
  9806  0039F2  50F3               	movf	prodl,w,c
  9807  0039F4  2588               	addwf	atualizarLCD@line1& (0+255),w,b
  9808  0039F6  6ED9               	movwf	fsr2l,c
  9809  0039F8  50F4               	movf	prodh,w,c
  9810  0039FA  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
  9811  0039FC  6EDA               	movwf	fsr2h,c
  9812  0039FE  0E20               	movlw	32
  9813  003A00  6EDF               	movwf	indf2,c
  9814                           
  9815                           ;lcd.h: 146: line2[i] = ' ';
  9816  003A02  5190               	movf	atualizarLCD@i& (0+255),w,b
  9817  003A04  0D01               	mullw	1
  9818  003A06  50F3               	movf	prodl,w,c
  9819  003A08  258A               	addwf	atualizarLCD@line2& (0+255),w,b
  9820  003A0A  6ED9               	movwf	fsr2l,c
  9821  003A0C  50F4               	movf	prodh,w,c
  9822  003A0E  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
  9823  003A10  6EDA               	movwf	fsr2h,c
  9824  003A12  0E20               	movlw	32
  9825  003A14  6EDF               	movwf	indf2,c
  9826                           
  9827                           ;lcd.h: 147: line3[i] = ' ';
  9828  003A16  5190               	movf	atualizarLCD@i& (0+255),w,b
  9829  003A18  0D01               	mullw	1
  9830  003A1A  50F3               	movf	prodl,w,c
  9831  003A1C  258C               	addwf	atualizarLCD@line3& (0+255),w,b
  9832  003A1E  6ED9               	movwf	fsr2l,c
  9833  003A20  50F4               	movf	prodh,w,c
  9834  003A22  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
  9835  003A24  6EDA               	movwf	fsr2h,c
  9836  003A26  0E20               	movlw	32
  9837  003A28  6EDF               	movwf	indf2,c
  9838                           
  9839                           ;lcd.h: 148: line4[i] = ' ';
  9840  003A2A  5190               	movf	atualizarLCD@i& (0+255),w,b
  9841  003A2C  0D01               	mullw	1
  9842  003A2E  50F3               	movf	prodl,w,c
  9843  003A30  258E               	addwf	atualizarLCD@line4& (0+255),w,b
  9844  003A32  6ED9               	movwf	fsr2l,c
  9845  003A34  50F4               	movf	prodh,w,c
  9846  003A36  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
  9847  003A38  6EDA               	movwf	fsr2h,c
  9848  003A3A  0E20               	movlw	32
  9849  003A3C  6EDF               	movwf	indf2,c
  9850                           
  9851                           ; BSR set to: 0
  9852  003A3E  2B90               	incf	atualizarLCD@i& (0+255),f,b
  9853  003A40  D7D0               	goto	l6958
  9854  003A42                     u7710:
  9855  003A42  FFFF               	dw	65535	; assembler added errata NOP
  9856                           
  9857                           ; BSR set to: 0
  9858                           
  9859                           ; BSR set to: 0
  9860  003A44  0012               	return		;funcret
  9861  003A46  FFFF               	dw	65535	; errata NOP
  9862  003A48                     __end_of_atualizarLCD:
  9863                           	opt stack 0
  9864                           tblptru	equ	0xFF8
  9865                           tblptrh	equ	0xFF7
  9866                           tblptrl	equ	0xFF6
  9867                           tablat	equ	0xFF5
  9868                           prodh	equ	0xFF4
  9869                           prodl	equ	0xFF3
  9870                           intcon	equ	0xFF2
  9871                           postinc0	equ	0xFEE
  9872                           wreg	equ	0xFE8
  9873                           postdec1	equ	0xFE5
  9874                           fsr1l	equ	0xFE1
  9875                           indf2	equ	0xFDF
  9876                           postinc2	equ	0xFDE
  9877                           fsr2h	equ	0xFDA
  9878                           fsr2l	equ	0xFD9
  9879                           status	equ	0xFD8
  9880                           
  9881 ;; *************** function _Lcd_Write_String *****************
  9882 ;; Defined at:
  9883 ;;		line 123 in file "lcd.h"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;  a               2    4[BANK0 ] PTR unsigned char 
  9886 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
  9887 ;; Auto vars:     Size  Location     Type
  9888 ;;  i               1    6[BANK0 ] unsigned char 
  9889 ;; Return value:  Size  Location     Type
  9890 ;;                  1    wreg      void 
  9891 ;; Registers used:
  9892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9893 ;; Tracked objects:
  9894 ;;		On entry : 0/0
  9895 ;;		On exit  : 0/0
  9896 ;;		Unchanged: 0/0
  9897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9898 ;;      Params:         0       2       0       0       0       0       0
  9899 ;;      Locals:         0       1       0       0       0       0       0
  9900 ;;      Temps:          0       0       0       0       0       0       0
  9901 ;;      Totals:         0       3       0       0       0       0       0
  9902 ;;Total ram usage:        3 bytes
  9903 ;; Hardware stack levels used:    1
  9904 ;; Hardware stack levels required when called:    8
  9905 ;; This function calls:
  9906 ;;		_Lcd_Write_Char
  9907 ;; This function is called by:
  9908 ;;		_atualizarLCD
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text25
  9913  007114                     __ptext25:
  9914                           	opt stack 0
  9915  007114                     _Lcd_Write_String:
  9916                           	opt stack 0
  9917  007114  FFFF               	dw	65535	; assembler added errata NOP
  9918                           
  9919                           ;lcd.h: 124: unsigned char i = 0;
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;incstack = 0
  9923  007116  0E00               	movlw	0
  9924  007118  0100               	movlb	0	; () banked
  9925  00711A  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9926                           
  9927                           ;lcd.h: 126: for (i = 0; i < 20; i++) {
  9928  00711C  0E00               	movlw	0
  9929  00711E  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9930  007120                     l6010:
  9931  007120  FFFF               	dw	65535	; assembler added errata NOP
  9932                           
  9933                           ; BSR set to: 0
  9934  007122  0E13               	movlw	19
  9935  007124  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
  9936  007126  D001               	goto	l643
  9937  007128  D00F               	goto	u6280
  9938  00712A                     l643:
  9939  00712A  FFFF               	dw	65535	; assembler added errata NOP
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;lcd.h: 127: Lcd_Write_Char(a[i]);
  9943                           
  9944                           ; BSR set to: 0
  9945  00712C  5186               	movf	Lcd_Write_String@i& (0+255),w,b
  9946  00712E  0D01               	mullw	1
  9947  007130  50F3               	movf	prodl,w,c
  9948  007132  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
  9949  007134  6ED9               	movwf	fsr2l,c
  9950  007136  50F4               	movf	prodh,w,c
  9951  007138  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  9952  00713A  6EDA               	movwf	fsr2h,c
  9953  00713C  50DF               	movf	indf2,w,c
  9954  00713E  EC21  F039         	call	_Lcd_Write_Char
  9955  007142  0100               	movlb	0	; () banked
  9956  007144  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
  9957  007146  D7EC               	goto	l6010
  9958  007148                     u6280:
  9959  007148  FFFF               	dw	65535	; assembler added errata NOP
  9960                           
  9961                           ; BSR set to: 0
  9962                           
  9963                           ; BSR set to: 0
  9964  00714A  0012               	return		;funcret
  9965  00714C  FFFF               	dw	65535	; errata NOP
  9966  00714E                     __end_of_Lcd_Write_String:
  9967                           	opt stack 0
  9968                           tblptru	equ	0xFF8
  9969                           tblptrh	equ	0xFF7
  9970                           tblptrl	equ	0xFF6
  9971                           tablat	equ	0xFF5
  9972                           prodh	equ	0xFF4
  9973                           prodl	equ	0xFF3
  9974                           intcon	equ	0xFF2
  9975                           postinc0	equ	0xFEE
  9976                           wreg	equ	0xFE8
  9977                           postdec1	equ	0xFE5
  9978                           fsr1l	equ	0xFE1
  9979                           indf2	equ	0xFDF
  9980                           postinc2	equ	0xFDE
  9981                           fsr2h	equ	0xFDA
  9982                           fsr2l	equ	0xFD9
  9983                           status	equ	0xFD8
  9984                           
  9985 ;; *************** function _Lcd_Write_Char *****************
  9986 ;; Defined at:
  9987 ;;		line 108 in file "lcd.h"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;  a               1    wreg     unsigned char 
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;  a               1    3[BANK0 ] unsigned char 
  9992 ;;  y               1    2[BANK0 ] unsigned char 
  9993 ;;  tempp           1    1[BANK0 ] unsigned char 
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  1    wreg      void 
  9996 ;; Registers used:
  9997 ;;		wreg, status,2, status,0, cstack
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10003 ;;      Params:         0       0       0       0       0       0       0
 10004 ;;      Locals:         0       3       0       0       0       0       0
 10005 ;;      Temps:          0       0       0       0       0       0       0
 10006 ;;      Totals:         0       3       0       0       0       0       0
 10007 ;;Total ram usage:        3 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; Hardware stack levels required when called:    7
 10010 ;; This function calls:
 10011 ;;		_Lcd_Port
 10012 ;; This function is called by:
 10013 ;;		_Lcd_Write_String
 10014 ;;		_criarCaracteresCGRAM
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text26
 10019  007242                     __ptext26:
 10020                           	opt stack 0
 10021  007242                     _Lcd_Write_Char:
 10022                           	opt stack 0
 10023  007242  FFFF               	dw	65535	; assembler added errata NOP
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;incstack = 0
 10027                           ;Lcd_Write_Char@a stored from wreg
 10028  007244  0100               	movlb	0	; () banked
 10029  007246  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
 10030                           
 10031                           ;lcd.h: 109: char tempp, y;
 10032                           ;lcd.h: 110: tempp = a & 0x0F;
 10033  007248  0100               	movlb	0	; () banked
 10034  00724A  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10035  00724C  0B0F               	andlw	15
 10036  00724E  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
 10037                           
 10038                           ;lcd.h: 111: y = a & 0xF0;
 10039  007250  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10040  007252  0BF0               	andlw	240
 10041  007254  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;lcd.h: 112: PORTDbits.RD1 = 1;
 10045  007256  8283               	bsf	3971,1,c	;volatile
 10046                           
 10047                           ; BSR set to: 0
 10048                           ;lcd.h: 113: Lcd_Port(y >> 4);
 10049  007258  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
 10050  00725A  0B0F               	andlw	15
 10051  00725C  EC84  F039         	call	_Lcd_Port
 10052                           
 10053                           ;lcd.h: 114: PORTDbits.RD0 = 1;
 10054  007260  8083               	bsf	3971,0,c	;volatile
 10055                           
 10056                           ;lcd.h: 115: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10057  007262  0E4B               	movlw	75
 10058  007264                     u9027:
 10059  007264  FFFF               	dw	65535	; errata NOP
 10060  007266  2EE8               	decfsz	wreg,f,c
 10061  007268  D7FD               	bra	u9027
 10062                           
 10063                           ;lcd.h: 116: PORTDbits.RD0 = 0;
 10064  00726A  9083               	bcf	3971,0,c	;volatile
 10065                           
 10066                           ;lcd.h: 117: Lcd_Port(tempp);
 10067  00726C  0100               	movlb	0	; () banked
 10068  00726E  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
 10069  007270  EC84  F039         	call	_Lcd_Port
 10070                           
 10071                           ;lcd.h: 118: PORTDbits.RD0 = 1;
 10072  007274  8083               	bsf	3971,0,c	;volatile
 10073                           
 10074                           ;lcd.h: 119: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10075  007276  0E4B               	movlw	75
 10076  007278                     u9037:
 10077  007278  FFFF               	dw	65535	; errata NOP
 10078  00727A  2EE8               	decfsz	wreg,f,c
 10079  00727C  D7FD               	bra	u9037
 10080                           
 10081                           ;lcd.h: 120: PORTDbits.RD0 = 0;
 10082  00727E  9083               	bcf	3971,0,c	;volatile
 10083  007280  0012               	return		;funcret
 10084  007282  FFFF               	dw	65535	; errata NOP
 10085  007284                     __end_of_Lcd_Write_Char:
 10086                           	opt stack 0
 10087                           tblptru	equ	0xFF8
 10088                           tblptrh	equ	0xFF7
 10089                           tblptrl	equ	0xFF6
 10090                           tablat	equ	0xFF5
 10091                           prodh	equ	0xFF4
 10092                           prodl	equ	0xFF3
 10093                           intcon	equ	0xFF2
 10094                           postinc0	equ	0xFEE
 10095                           wreg	equ	0xFE8
 10096                           postdec1	equ	0xFE5
 10097                           fsr1l	equ	0xFE1
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           fsr2h	equ	0xFDA
 10101                           fsr2l	equ	0xFD9
 10102                           status	equ	0xFD8
 10103                           
 10104 ;; *************** function _Lcd_Set_Cursor *****************
 10105 ;; Defined at:
 10106 ;;		line 73 in file "lcd.h"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;  a               1    wreg     unsigned char 
 10109 ;;  b               1    3[BANK0 ] unsigned char 
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;  a               1    4[BANK0 ] unsigned char 
 10112 ;;  temp            1    7[BANK0 ] unsigned char 
 10113 ;;  y               1    6[BANK0 ] unsigned char 
 10114 ;;  z               1    5[BANK0 ] unsigned char 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      void 
 10117 ;; Registers used:
 10118 ;;		wreg, status,2, status,0, cstack
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10124 ;;      Params:         0       1       0       0       0       0       0
 10125 ;;      Locals:         0       4       0       0       0       0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0
 10127 ;;      Totals:         0       5       0       0       0       0       0
 10128 ;;Total ram usage:        5 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    8
 10131 ;; This function calls:
 10132 ;;		_Lcd_Cmd
 10133 ;; This function is called by:
 10134 ;;		_atualizarLCD
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           	psect	text27
 10139  003B0E                     __ptext27:
 10140                           	opt stack 0
 10141  003B0E                     _Lcd_Set_Cursor:
 10142                           	opt stack 0
 10143  003B0E  FFFF               	dw	65535	; assembler added errata NOP
 10144                           
 10145                           ;incstack = 0
 10146                           ;Lcd_Set_Cursor@a stored from wreg
 10147  003B10  0100               	movlb	0	; () banked
 10148  003B12  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
 10149                           
 10150                           ;lcd.h: 74: char temp, z, y;
 10151                           ;lcd.h: 75: switch (a) {
 10152  003B14  D04C               	goto	l630
 10153  003B16  FFFF               	dw	65535	; assembler added errata NOP
 10154                           
 10155                           ;lcd.h: 77: temp = 0x80 + b - 1;
 10156  003B18  0100               	movlb	0	; () banked
 10157  003B1A  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10158  003B1C  0F7F               	addlw	127
 10159  003B1E  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10160                           
 10161                           ;lcd.h: 78: z = temp >> 4;
 10162  003B20  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10163  003B22  0B0F               	andlw	15
 10164  003B24  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10165                           
 10166                           ;lcd.h: 79: y = temp & 0x0F;
 10167  003B26  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10168  003B28  0B0F               	andlw	15
 10169  003B2A  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;lcd.h: 80: Lcd_Cmd(z);
 10173  003B2C  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10174  003B2E  EC34  F037         	call	_Lcd_Cmd
 10175                           
 10176                           ;lcd.h: 81: Lcd_Cmd(y);
 10177  003B32  0100               	movlb	0	; () banked
 10178  003B34  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10179  003B36  EC34  F037         	call	_Lcd_Cmd
 10180                           
 10181                           ;lcd.h: 82: break;
 10182  003B3A  D048               	goto	l632
 10183  003B3C  FFFF               	dw	65535	; assembler added errata NOP
 10184                           
 10185                           ;lcd.h: 84: temp = 0xC0 + b - 1;
 10186  003B3E  0100               	movlb	0	; () banked
 10187  003B40  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10188  003B42  0FBF               	addlw	191
 10189  003B44  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10190                           
 10191                           ;lcd.h: 85: z = temp >> 4;
 10192  003B46  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10193  003B48  0B0F               	andlw	15
 10194  003B4A  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10195                           
 10196                           ;lcd.h: 86: y = temp & 0x0F;
 10197  003B4C  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10198  003B4E  0B0F               	andlw	15
 10199  003B50  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;lcd.h: 87: Lcd_Cmd(z);
 10203  003B52  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10204  003B54  EC34  F037         	call	_Lcd_Cmd
 10205                           
 10206                           ;lcd.h: 88: Lcd_Cmd(y);
 10207  003B58  0100               	movlb	0	; () banked
 10208  003B5A  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10209  003B5C  EC34  F037         	call	_Lcd_Cmd
 10210                           
 10211                           ;lcd.h: 89: break;
 10212  003B60  D035               	goto	l632
 10213  003B62  FFFF               	dw	65535	; assembler added errata NOP
 10214                           
 10215                           ;lcd.h: 91: temp = 0x94 + b;
 10216  003B64  0100               	movlb	0	; () banked
 10217  003B66  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10218  003B68  0F94               	addlw	148
 10219  003B6A  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10220                           
 10221                           ;lcd.h: 92: z = temp >> 4;
 10222  003B6C  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10223  003B6E  0B0F               	andlw	15
 10224  003B70  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10225                           
 10226                           ;lcd.h: 93: y = temp & 0x0F;
 10227  003B72  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10228  003B74  0B0F               	andlw	15
 10229  003B76  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;lcd.h: 94: Lcd_Cmd(z);
 10233  003B78  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10234  003B7A  EC34  F037         	call	_Lcd_Cmd
 10235                           
 10236                           ;lcd.h: 95: Lcd_Cmd(y);
 10237  003B7E  0100               	movlb	0	; () banked
 10238  003B80  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10239  003B82  EC34  F037         	call	_Lcd_Cmd
 10240                           
 10241                           ;lcd.h: 96: break;
 10242  003B86  D022               	goto	l632
 10243  003B88  FFFF               	dw	65535	; assembler added errata NOP
 10244                           
 10245                           ;lcd.h: 98: temp = 0xD4 + b;
 10246  003B8A  0100               	movlb	0	; () banked
 10247  003B8C  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10248  003B8E  0FD4               	addlw	212
 10249  003B90  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10250                           
 10251                           ;lcd.h: 99: z = temp >> 4;
 10252  003B92  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10253  003B94  0B0F               	andlw	15
 10254  003B96  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10255                           
 10256                           ;lcd.h: 100: y = temp & 0x0F;
 10257  003B98  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10258  003B9A  0B0F               	andlw	15
 10259  003B9C  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;lcd.h: 101: Lcd_Cmd(z);
 10263  003B9E  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10264  003BA0  EC34  F037         	call	_Lcd_Cmd
 10265                           
 10266                           ;lcd.h: 102: Lcd_Cmd(y);
 10267  003BA4  0100               	movlb	0	; () banked
 10268  003BA6  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10269  003BA8  EC34  F037         	call	_Lcd_Cmd
 10270                           
 10271                           ;lcd.h: 105: }
 10272                           
 10273                           ;lcd.h: 104: default:return;
 10274                           
 10275                           ;lcd.h: 103: break;
 10276  003BAC  D00F               	goto	l632
 10277  003BAE                     l630:
 10278  003BAE  FFFF               	dw	65535	; assembler added errata NOP
 10279  003BB0  0100               	movlb	0	; () banked
 10280  003BB2  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 10281                           
 10282                           ; Switch size 1, requested type "space"
 10283                           ; Number of cases is 4, Range of values is 1 to 4
 10284                           ; switch strategies available:
 10285                           ; Name         Instructions Cycles
 10286                           ; simple_byte           13     7 (average)
 10287                           ;	Chosen strategy is simple_byte
 10288  003BB4  0A01               	xorlw	1	; case 1
 10289  003BB6  B4D8               	btfsc	status,2,c
 10290  003BB8  D7AE               	goto	l631
 10291  003BBA  0A03               	xorlw	3	; case 2
 10292  003BBC  B4D8               	btfsc	status,2,c
 10293  003BBE  D7BE               	goto	l633
 10294  003BC0  0A01               	xorlw	1	; case 3
 10295  003BC2  B4D8               	btfsc	status,2,c
 10296  003BC4  D7CE               	goto	l634
 10297  003BC6  0A07               	xorlw	7	; case 4
 10298  003BC8  B4D8               	btfsc	status,2,c
 10299  003BCA  D7DE               	goto	l635
 10300  003BCC                     l632:
 10301  003BCC  FFFF               	dw	65535	; assembler added errata NOP
 10302                           
 10303                           ; BSR set to: 0
 10304  003BCE  0012               	return		;funcret
 10305  003BD0  FFFF               	dw	65535	; errata NOP
 10306  003BD2                     __end_of_Lcd_Set_Cursor:
 10307                           	opt stack 0
 10308                           tblptru	equ	0xFF8
 10309                           tblptrh	equ	0xFF7
 10310                           tblptrl	equ	0xFF6
 10311                           tablat	equ	0xFF5
 10312                           prodh	equ	0xFF4
 10313                           prodl	equ	0xFF3
 10314                           intcon	equ	0xFF2
 10315                           postinc0	equ	0xFEE
 10316                           wreg	equ	0xFE8
 10317                           postdec1	equ	0xFE5
 10318                           fsr1l	equ	0xFE1
 10319                           indf2	equ	0xFDF
 10320                           postinc2	equ	0xFDE
 10321                           fsr2h	equ	0xFDA
 10322                           fsr2l	equ	0xFD9
 10323                           status	equ	0xFD8
 10324                           
 10325 ;; *************** function _ajusteSP_Bombas *****************
 10326 ;; Defined at:
 10327 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;		None
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;		None
 10332 ;; Return value:  Size  Location     Type
 10333 ;;                  1    wreg      void 
 10334 ;; Registers used:
 10335 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10341 ;;      Params:         0       0       0       0       0       0       0
 10342 ;;      Locals:         0       2       0       0       0       0       0
 10343 ;;      Temps:          0       0       0       0       0       0       0
 10344 ;;      Totals:         0       2       0       0       0       0       0
 10345 ;;Total ram usage:        2 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; Hardware stack levels required when called:   10
 10348 ;; This function calls:
 10349 ;;		_blink
 10350 ;;		_btPress
 10351 ;;		_intToFloatStr
 10352 ;;		_sprintf
 10353 ;;		_writeEEPROM_ext
 10354 ;; This function is called by:
 10355 ;;		_main
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           	psect	text28
 10360  001902                     __ptext28:
 10361                           	opt stack 0
 10362  001902                     _ajusteSP_Bombas:
 10363                           	opt stack 0
 10364  001902  FFFF               	dw	65535	; assembler added errata NOP
 10365                           
 10366                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10367                           
 10368                           ;incstack = 0
 10369  001904  0100               	movlb	0	; () banked
 10370  001906  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 10371  001908  EC04  F03D         	call	_intToFloatStr
 10372  00190C  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2378
 10373  001910  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2378+1
 10374                           
 10375                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10376  001914  0E7B               	movlw	low _line1
 10377  001916  0100               	movlb	0	; () banked
 10378  001918  6FA1               	movwf	sprintf@wh& (0+255),b
 10379  00191A  0E01               	movlw	high _line1
 10380  00191C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10381  00191E  0E36               	movlw	low STR_102
 10382  001920  6FA3               	movwf	sprintf@f& (0+255),b
 10383  001922  0E7F               	movlw	high STR_102
 10384  001924  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10385  001926  C0C2  F0A5         	movff	_ajusteSP_Bombas$2378,?_sprintf+4
 10386  00192A  C0C3  F0A6         	movff	_ajusteSP_Bombas$2378+1,?_sprintf+5
 10387  00192E  ECC9  F039         	call	_sprintf	;wreg free
 10388                           
 10389                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10390  001932  0100               	movlb	0	; () banked
 10391  001934  51E2               	movf	_sp_jockey& (0+255),w,b
 10392  001936  EC04  F03D         	call	_intToFloatStr
 10393  00193A  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2378
 10394  00193E  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2378+1
 10395                           
 10396                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10397  001942  0E66               	movlw	low _line2
 10398  001944  0100               	movlb	0	; () banked
 10399  001946  6FA1               	movwf	sprintf@wh& (0+255),b
 10400  001948  0E01               	movlw	high _line2
 10401  00194A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10402  00194C  0E41               	movlw	low STR_45
 10403  00194E  6FA3               	movwf	sprintf@f& (0+255),b
 10404  001950  0E7F               	movlw	high STR_45
 10405  001952  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10406  001954  C0C2  F0A5         	movff	_ajusteSP_Bombas$2378,?_sprintf+4
 10407  001958  C0C3  F0A6         	movff	_ajusteSP_Bombas$2378+1,?_sprintf+5
 10408  00195C  ECC9  F039         	call	_sprintf	;wreg free
 10409                           
 10410                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10411  001960  0100               	movlb	0	; () banked
 10412  001962  51E1               	movf	_sp_principal& (0+255),w,b
 10413  001964  EC04  F03D         	call	_intToFloatStr
 10414  001968  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2378
 10415  00196C  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2378+1
 10416                           
 10417                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10418  001970  0E51               	movlw	low _line3
 10419  001972  0100               	movlb	0	; () banked
 10420  001974  6FA1               	movwf	sprintf@wh& (0+255),b
 10421  001976  0E01               	movlw	high _line3
 10422  001978  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10423  00197A  0E58               	movlw	low STR_48
 10424  00197C  6FA3               	movwf	sprintf@f& (0+255),b
 10425  00197E  0E7E               	movlw	high STR_48
 10426  001980  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10427  001982  C0C2  F0A5         	movff	_ajusteSP_Bombas$2378,?_sprintf+4
 10428  001986  C0C3  F0A6         	movff	_ajusteSP_Bombas$2378+1,?_sprintf+5
 10429  00198A  ECC9  F039         	call	_sprintf	;wreg free
 10430                           
 10431                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10432  00198E  0100               	movlb	0	; () banked
 10433  001990  51E0               	movf	_sp_estacionaria& (0+255),w,b
 10434  001992  EC04  F03D         	call	_intToFloatStr
 10435  001996  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2378
 10436  00199A  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2378+1
 10437                           
 10438                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10439  00199E  0E3C               	movlw	low _line4
 10440  0019A0  0100               	movlb	0	; () banked
 10441  0019A2  6FA1               	movwf	sprintf@wh& (0+255),b
 10442  0019A4  0E01               	movlw	high _line4
 10443  0019A6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10444  0019A8  0E67               	movlw	low STR_51
 10445  0019AA  6FA3               	movwf	sprintf@f& (0+255),b
 10446  0019AC  0E7E               	movlw	high STR_51
 10447  0019AE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10448  0019B0  C0C2  F0A5         	movff	_ajusteSP_Bombas$2378,?_sprintf+4
 10449  0019B4  C0C3  F0A6         	movff	_ajusteSP_Bombas$2378+1,?_sprintf+5
 10450  0019B8  ECC9  F039         	call	_sprintf	;wreg free
 10451                           
 10452                           ;tela_CONFIG_PRESSAO.h: 14: if (btPress(1)) {
 10453  0019BC  0E01               	movlw	1
 10454  0019BE  EC4A  F03B         	call	_btPress
 10455  0019C2  0900               	iorlw	0
 10456  0019C4  B4D8               	btfsc	status,2,c
 10457  0019C6  D019               	goto	l859
 10458                           
 10459                           ;tela_CONFIG_PRESSAO.h: 15: writeEEPROM_ext(0, sp_jockey);
 10460  0019C8  C0E2  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 10461  0019CC  0E00               	movlw	0
 10462  0019CE  ECA6  F039         	call	_writeEEPROM_ext
 10463                           
 10464                           ;tela_CONFIG_PRESSAO.h: 16: writeEEPROM_ext(1, sp_principal);
 10465  0019D2  C0E1  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 10466  0019D6  0E01               	movlw	1
 10467  0019D8  ECA6  F039         	call	_writeEEPROM_ext
 10468                           
 10469                           ;tela_CONFIG_PRESSAO.h: 17: writeEEPROM_ext(2, sp_estacionaria);
 10470  0019DC  C0E0  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 10471  0019E0  0E02               	movlw	2
 10472  0019E2  ECA6  F039         	call	_writeEEPROM_ext
 10473                           
 10474                           ;tela_CONFIG_PRESSAO.h: 18: writeEEPROM_ext(4, sp_pressao_rede);
 10475  0019E6  C0E3  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 10476  0019EA  0E04               	movlw	4
 10477  0019EC  ECA6  F039         	call	_writeEEPROM_ext
 10478                           
 10479                           ;tela_CONFIG_PRESSAO.h: 19: option_posi = 0;
 10480  0019F0  0E00               	movlw	0
 10481  0019F2  0100               	movlb	0	; () banked
 10482  0019F4  6FDF               	movwf	_option_posi& (0+255),b
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;tela_CONFIG_PRESSAO.h: 20: menu_posi = _menu_posi;
 10486  0019F6  C0DD  F0DE         	movff	__menu_posi,_menu_posi
 10487  0019FA                     l859:
 10488  0019FA  FFFF               	dw	65535	; assembler added errata NOP
 10489                           
 10490                           ;tela_CONFIG_PRESSAO.h: 21: }
 10491                           ;tela_CONFIG_PRESSAO.h: 23: if (btPress(4)) {
 10492                           
 10493                           ; BSR set to: 0
 10494  0019FC  0E04               	movlw	4
 10495  0019FE  EC4A  F03B         	call	_btPress
 10496  001A02  0900               	iorlw	0
 10497  001A04  B4D8               	btfsc	status,2,c
 10498  001A06  D097               	goto	l861
 10499                           
 10500                           ;tela_CONFIG_PRESSAO.h: 24: option_posi++;
 10501  001A08  0100               	movlb	0	; () banked
 10502  001A0A  2BDF               	incf	_option_posi& (0+255),f,b
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;tela_CONFIG_PRESSAO.h: 25: }
 10506                           ;tela_CONFIG_PRESSAO.h: 27: switch (option_posi) {
 10507  001A0C  D094               	goto	l861
 10508  001A0E  FFFF               	dw	65535	; assembler added errata NOP
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;tela_CONFIG_PRESSAO.h: 29: blink(line1, 8, 15);
 10512                           
 10513                           ; BSR set to: 0
 10514  001A10  0E7B               	movlw	low _line1
 10515  001A12  6F80               	movwf	blink@line& (0+255),b
 10516  001A14  0E01               	movlw	high _line1
 10517  001A16  6F81               	movwf	(blink@line+1)& (0+255),b
 10518  001A18  0E08               	movlw	8
 10519  001A1A  6F82               	movwf	blink@start& (0+255),b
 10520  001A1C  0E0F               	movlw	15
 10521  001A1E  6F83               	movwf	blink@end& (0+255),b
 10522  001A20  ECE1  F01F         	call	_blink	;wreg free
 10523                           
 10524                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 10525  001A24  0E03               	movlw	3
 10526  001A26  EC4A  F03B         	call	_btPress
 10527  001A2A  0900               	iorlw	0
 10528  001A2C  B4D8               	btfsc	status,2,c
 10529  001A2E  D002               	goto	l863
 10530                           
 10531                           ;tela_CONFIG_PRESSAO.h: 31: sp_pressao_rede++;
 10532  001A30  0100               	movlb	0	; () banked
 10533  001A32  2BE3               	incf	_sp_pressao_rede& (0+255),f,b
 10534  001A34                     l863:
 10535  001A34  FFFF               	dw	65535	; assembler added errata NOP
 10536                           
 10537                           ;tela_CONFIG_PRESSAO.h: 32: }
 10538                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 10539                           
 10540                           ; BSR set to: 0
 10541  001A36  0E02               	movlw	2
 10542  001A38  EC4A  F03B         	call	_btPress
 10543  001A3C  0900               	iorlw	0
 10544  001A3E  B4D8               	btfsc	status,2,c
 10545  001A40  D002               	goto	l864
 10546                           
 10547                           ;tela_CONFIG_PRESSAO.h: 34: sp_pressao_rede--;
 10548  001A42  0100               	movlb	0	; () banked
 10549  001A44  07E3               	decf	_sp_pressao_rede& (0+255),f,b
 10550  001A46                     l864:
 10551  001A46  FFFF               	dw	65535	; assembler added errata NOP
 10552                           
 10553                           ;tela_CONFIG_PRESSAO.h: 35: }
 10554                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_pressao_rede > 99) {
 10555                           
 10556                           ; BSR set to: 0
 10557  001A48  0E63               	movlw	99
 10558  001A4A  0100               	movlb	0	; () banked
 10559  001A4C  65E3               	cpfsgt	_sp_pressao_rede& (0+255),b
 10560  001A4E  D083               	goto	l866
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;tela_CONFIG_PRESSAO.h: 37: sp_pressao_rede = 0;
 10564  001A50  0E00               	movlw	0
 10565  001A52  6FE3               	movwf	_sp_pressao_rede& (0+255),b
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;tela_CONFIG_PRESSAO.h: 38: }
 10569                           ;tela_CONFIG_PRESSAO.h: 39: break;
 10570  001A54  D080               	goto	l866
 10571  001A56  FFFF               	dw	65535	; assembler added errata NOP
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;tela_CONFIG_PRESSAO.h: 41: blink(line2, 8, 15);
 10575                           
 10576                           ; BSR set to: 0
 10577  001A58  0E66               	movlw	low _line2
 10578  001A5A  6F80               	movwf	blink@line& (0+255),b
 10579  001A5C  0E01               	movlw	high _line2
 10580  001A5E  6F81               	movwf	(blink@line+1)& (0+255),b
 10581  001A60  0E08               	movlw	8
 10582  001A62  6F82               	movwf	blink@start& (0+255),b
 10583  001A64  0E0F               	movlw	15
 10584  001A66  6F83               	movwf	blink@end& (0+255),b
 10585  001A68  ECE1  F01F         	call	_blink	;wreg free
 10586                           
 10587                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 10588  001A6C  0E03               	movlw	3
 10589  001A6E  EC4A  F03B         	call	_btPress
 10590  001A72  0900               	iorlw	0
 10591  001A74  B4D8               	btfsc	status,2,c
 10592  001A76  D002               	goto	l868
 10593                           
 10594                           ;tela_CONFIG_PRESSAO.h: 43: sp_jockey++;
 10595  001A78  0100               	movlb	0	; () banked
 10596  001A7A  2BE2               	incf	_sp_jockey& (0+255),f,b
 10597  001A7C                     l868:
 10598  001A7C  FFFF               	dw	65535	; assembler added errata NOP
 10599                           
 10600                           ;tela_CONFIG_PRESSAO.h: 44: }
 10601                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 10602                           
 10603                           ; BSR set to: 0
 10604  001A7E  0E02               	movlw	2
 10605  001A80  EC4A  F03B         	call	_btPress
 10606  001A84  0900               	iorlw	0
 10607  001A86  B4D8               	btfsc	status,2,c
 10608  001A88  D002               	goto	l869
 10609                           
 10610                           ;tela_CONFIG_PRESSAO.h: 46: sp_jockey--;
 10611  001A8A  0100               	movlb	0	; () banked
 10612  001A8C  07E2               	decf	_sp_jockey& (0+255),f,b
 10613  001A8E                     l869:
 10614  001A8E  FFFF               	dw	65535	; assembler added errata NOP
 10615                           
 10616                           ;tela_CONFIG_PRESSAO.h: 47: }
 10617                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_jockey > 99) {
 10618                           
 10619                           ; BSR set to: 0
 10620  001A90  0E63               	movlw	99
 10621  001A92  0100               	movlb	0	; () banked
 10622  001A94  65E2               	cpfsgt	_sp_jockey& (0+255),b
 10623  001A96  D05F               	goto	l866
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;tela_CONFIG_PRESSAO.h: 49: sp_jockey = 0;
 10627  001A98  0E00               	movlw	0
 10628  001A9A  6FE2               	movwf	_sp_jockey& (0+255),b
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;tela_CONFIG_PRESSAO.h: 50: }
 10632                           ;tela_CONFIG_PRESSAO.h: 51: break;
 10633  001A9C  D05C               	goto	l866
 10634  001A9E  FFFF               	dw	65535	; assembler added errata NOP
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;tela_CONFIG_PRESSAO.h: 53: blink(line3, 12, 18);
 10638                           
 10639                           ; BSR set to: 0
 10640  001AA0  0E51               	movlw	low _line3
 10641  001AA2  6F80               	movwf	blink@line& (0+255),b
 10642  001AA4  0E01               	movlw	high _line3
 10643  001AA6  6F81               	movwf	(blink@line+1)& (0+255),b
 10644  001AA8  0E0C               	movlw	12
 10645  001AAA  6F82               	movwf	blink@start& (0+255),b
 10646  001AAC  0E12               	movlw	18
 10647  001AAE  6F83               	movwf	blink@end& (0+255),b
 10648  001AB0  ECE1  F01F         	call	_blink	;wreg free
 10649                           
 10650                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 10651  001AB4  0E03               	movlw	3
 10652  001AB6  EC4A  F03B         	call	_btPress
 10653  001ABA  0900               	iorlw	0
 10654  001ABC  B4D8               	btfsc	status,2,c
 10655  001ABE  D002               	goto	l872
 10656                           
 10657                           ;tela_CONFIG_PRESSAO.h: 55: sp_principal++;
 10658  001AC0  0100               	movlb	0	; () banked
 10659  001AC2  2BE1               	incf	_sp_principal& (0+255),f,b
 10660  001AC4                     l872:
 10661  001AC4  FFFF               	dw	65535	; assembler added errata NOP
 10662                           
 10663                           ;tela_CONFIG_PRESSAO.h: 56: }
 10664                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 10665                           
 10666                           ; BSR set to: 0
 10667  001AC6  0E02               	movlw	2
 10668  001AC8  EC4A  F03B         	call	_btPress
 10669  001ACC  0900               	iorlw	0
 10670  001ACE  B4D8               	btfsc	status,2,c
 10671  001AD0  D002               	goto	l873
 10672                           
 10673                           ;tela_CONFIG_PRESSAO.h: 58: sp_principal--;
 10674  001AD2  0100               	movlb	0	; () banked
 10675  001AD4  07E1               	decf	_sp_principal& (0+255),f,b
 10676  001AD6                     l873:
 10677  001AD6  FFFF               	dw	65535	; assembler added errata NOP
 10678                           
 10679                           ;tela_CONFIG_PRESSAO.h: 59: }
 10680                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_principal > 99) {
 10681                           
 10682                           ; BSR set to: 0
 10683  001AD8  0E63               	movlw	99
 10684  001ADA  0100               	movlb	0	; () banked
 10685  001ADC  65E1               	cpfsgt	_sp_principal& (0+255),b
 10686  001ADE  D03B               	goto	l866
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;tela_CONFIG_PRESSAO.h: 61: sp_principal = 0;
 10690  001AE0  0E00               	movlw	0
 10691  001AE2  6FE1               	movwf	_sp_principal& (0+255),b
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;tela_CONFIG_PRESSAO.h: 62: }
 10695                           ;tela_CONFIG_PRESSAO.h: 63: break;
 10696  001AE4  D038               	goto	l866
 10697  001AE6  FFFF               	dw	65535	; assembler added errata NOP
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;tela_CONFIG_PRESSAO.h: 65: blink(line4, 12, 18);
 10701                           
 10702                           ; BSR set to: 0
 10703  001AE8  0E3C               	movlw	low _line4
 10704  001AEA  6F80               	movwf	blink@line& (0+255),b
 10705  001AEC  0E01               	movlw	high _line4
 10706  001AEE  6F81               	movwf	(blink@line+1)& (0+255),b
 10707  001AF0  0E0C               	movlw	12
 10708  001AF2  6F82               	movwf	blink@start& (0+255),b
 10709  001AF4  0E12               	movlw	18
 10710  001AF6  6F83               	movwf	blink@end& (0+255),b
 10711  001AF8  ECE1  F01F         	call	_blink	;wreg free
 10712                           
 10713                           ;tela_CONFIG_PRESSAO.h: 66: if (btPress(3)) {
 10714  001AFC  0E03               	movlw	3
 10715  001AFE  EC4A  F03B         	call	_btPress
 10716  001B02  0900               	iorlw	0
 10717  001B04  B4D8               	btfsc	status,2,c
 10718  001B06  D002               	goto	l876
 10719                           
 10720                           ;tela_CONFIG_PRESSAO.h: 67: sp_estacionaria++;
 10721  001B08  0100               	movlb	0	; () banked
 10722  001B0A  2BE0               	incf	_sp_estacionaria& (0+255),f,b
 10723  001B0C                     l876:
 10724  001B0C  FFFF               	dw	65535	; assembler added errata NOP
 10725                           
 10726                           ;tela_CONFIG_PRESSAO.h: 68: }
 10727                           ;tela_CONFIG_PRESSAO.h: 69: if (btPress(2)) {
 10728                           
 10729                           ; BSR set to: 0
 10730  001B0E  0E02               	movlw	2
 10731  001B10  EC4A  F03B         	call	_btPress
 10732  001B14  0900               	iorlw	0
 10733  001B16  B4D8               	btfsc	status,2,c
 10734  001B18  D002               	goto	l877
 10735                           
 10736                           ;tela_CONFIG_PRESSAO.h: 70: sp_estacionaria--;
 10737  001B1A  0100               	movlb	0	; () banked
 10738  001B1C  07E0               	decf	_sp_estacionaria& (0+255),f,b
 10739  001B1E                     l877:
 10740  001B1E  FFFF               	dw	65535	; assembler added errata NOP
 10741                           
 10742                           ;tela_CONFIG_PRESSAO.h: 71: }
 10743                           ;tela_CONFIG_PRESSAO.h: 72: if (sp_estacionaria > 99) {
 10744                           
 10745                           ; BSR set to: 0
 10746  001B20  0E63               	movlw	99
 10747  001B22  0100               	movlb	0	; () banked
 10748  001B24  65E0               	cpfsgt	_sp_estacionaria& (0+255),b
 10749  001B26  D017               	goto	l866
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;tela_CONFIG_PRESSAO.h: 73: sp_estacionaria = 0;
 10753  001B28  0E00               	movlw	0
 10754  001B2A  6FE0               	movwf	_sp_estacionaria& (0+255),b
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;tela_CONFIG_PRESSAO.h: 74: }
 10758                           ;tela_CONFIG_PRESSAO.h: 75: break;
 10759  001B2C  D014               	goto	l866
 10760  001B2E  FFFF               	dw	65535	; assembler added errata NOP
 10761                           
 10762                           ; BSR set to: 0
 10763                           
 10764                           ; BSR set to: 0
 10765  001B30  0E00               	movlw	0
 10766  001B32  6FDF               	movwf	_option_posi& (0+255),b
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;tela_CONFIG_PRESSAO.h: 78: }
 10770                           
 10771                           ;tela_CONFIG_PRESSAO.h: 77: break;
 10772  001B34  D010               	goto	l866
 10773  001B36                     l861:
 10774  001B36  FFFF               	dw	65535	; assembler added errata NOP
 10775                           
 10776                           ; BSR set to: 0
 10777  001B38  0100               	movlb	0	; () banked
 10778  001B3A  51DF               	movf	_option_posi& (0+255),w,b
 10779                           
 10780                           ; Switch size 1, requested type "space"
 10781                           ; Number of cases is 4, Range of values is 0 to 3
 10782                           ; switch strategies available:
 10783                           ; Name         Instructions Cycles
 10784                           ; simple_byte           13     7 (average)
 10785                           ;	Chosen strategy is simple_byte
 10786  001B3C  0A00               	xorlw	0	; case 0
 10787  001B3E  B4D8               	btfsc	status,2,c
 10788  001B40  D766               	goto	l862
 10789  001B42  0A01               	xorlw	1	; case 1
 10790  001B44  B4D8               	btfsc	status,2,c
 10791  001B46  D787               	goto	l867
 10792  001B48  0A03               	xorlw	3	; case 2
 10793  001B4A  B4D8               	btfsc	status,2,c
 10794  001B4C  D7A8               	goto	l871
 10795  001B4E  0A01               	xorlw	1	; case 3
 10796  001B50  B4D8               	btfsc	status,2,c
 10797  001B52  D7C9               	goto	l875
 10798  001B54  D7EC               	goto	l879
 10799  001B56                     l866:
 10800  001B56  FFFF               	dw	65535	; assembler added errata NOP
 10801                           
 10802                           ; BSR set to: 0
 10803                           
 10804                           ; BSR set to: 0
 10805  001B58  0012               	return		;funcret
 10806  001B5A  FFFF               	dw	65535	; errata NOP
 10807  001B5C                     __end_of_ajusteSP_Bombas:
 10808                           	opt stack 0
 10809                           tblptru	equ	0xFF8
 10810                           tblptrh	equ	0xFF7
 10811                           tblptrl	equ	0xFF6
 10812                           tablat	equ	0xFF5
 10813                           prodh	equ	0xFF4
 10814                           prodl	equ	0xFF3
 10815                           intcon	equ	0xFF2
 10816                           postinc0	equ	0xFEE
 10817                           wreg	equ	0xFE8
 10818                           postdec1	equ	0xFE5
 10819                           fsr1l	equ	0xFE1
 10820                           indf2	equ	0xFDF
 10821                           postinc2	equ	0xFDE
 10822                           fsr2h	equ	0xFDA
 10823                           fsr2l	equ	0xFD9
 10824                           status	equ	0xFD8
 10825                           
 10826 ;; *************** function _blink *****************
 10827 ;; Defined at:
 10828 ;;		line 173 in file "lcd.h"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;  line            2    0[BANK0 ] PTR unsigned char 
 10831 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 10832 ;;  start           1    2[BANK0 ] unsigned char 
 10833 ;;  end             1    3[BANK0 ] unsigned char 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  i               1    4[BANK0 ] unsigned char 
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      void 
 10838 ;; Registers used:
 10839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10845 ;;      Params:         0       4       0       0       0       0       0
 10846 ;;      Locals:         0       1       0       0       0       0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0
 10848 ;;      Totals:         0       5       0       0       0       0       0
 10849 ;;Total ram usage:        5 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    6
 10852 ;; This function calls:
 10853 ;;		Nothing
 10854 ;; This function is called by:
 10855 ;;		_telaPrincipal
 10856 ;;		_tela_ajusteRTC
 10857 ;;		_tela_testeBombas
 10858 ;;		_configuraTelefones
 10859 ;;		_configurarEstacionaria
 10860 ;;		_ajusteSP_Bombas
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864                           	psect	text29
 10865  003FC2                     __ptext29:
 10866                           	opt stack 0
 10867  003FC2                     _blink:
 10868                           	opt stack 0
 10869  003FC2  FFFF               	dw	65535	; assembler added errata NOP
 10870                           
 10871                           ;lcd.h: 174: if (blinkk) {
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;incstack = 0
 10875  003FC4  5067               	movf	_blinkk,w,c
 10876  003FC6  B4D8               	btfsc	status,2,c
 10877  003FC8  D018               	goto	u6300
 10878                           
 10879                           ;lcd.h: 175: char i = 0;
 10880  003FCA  0E00               	movlw	0
 10881  003FCC  0100               	movlb	0	; () banked
 10882  003FCE  6F84               	movwf	blink@i& (0+255),b
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;lcd.h: 176: for (i = (--start); i < end; i++) {
 10886  003FD0  0782               	decf	blink@start& (0+255),f,b
 10887  003FD2  C082  F084         	movff	blink@start,blink@i
 10888  003FD6  D00C               	goto	l668
 10889  003FD8  FFFF               	dw	65535	; assembler added errata NOP
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;lcd.h: 177: line[i] = ' ';
 10893                           
 10894                           ; BSR set to: 0
 10895  003FDA  5184               	movf	blink@i& (0+255),w,b
 10896  003FDC  0D01               	mullw	1
 10897  003FDE  50F3               	movf	prodl,w,c
 10898  003FE0  2580               	addwf	blink@line& (0+255),w,b
 10899  003FE2  6ED9               	movwf	fsr2l,c
 10900  003FE4  50F4               	movf	prodh,w,c
 10901  003FE6  2181               	addwfc	(blink@line+1)& (0+255),w,b
 10902  003FE8  6EDA               	movwf	fsr2h,c
 10903  003FEA  0E20               	movlw	32
 10904  003FEC  6EDF               	movwf	indf2,c
 10905                           
 10906                           ; BSR set to: 0
 10907  003FEE  2B84               	incf	blink@i& (0+255),f,b
 10908  003FF0                     l668:
 10909  003FF0  FFFF               	dw	65535	; assembler added errata NOP
 10910                           
 10911                           ; BSR set to: 0
 10912                           
 10913                           ; BSR set to: 0
 10914  003FF2  5183               	movf	blink@end& (0+255),w,b
 10915  003FF4  5D84               	subwf	blink@i& (0+255),w,b
 10916  003FF6  A0D8               	btfss	status,0,c
 10917  003FF8  D7EF               	goto	l669
 10918  003FFA                     u6300:
 10919  003FFA  FFFF               	dw	65535	; assembler added errata NOP
 10920                           
 10921                           ; BSR set to: 0
 10922                           
 10923                           ; BSR set to: 0
 10924  003FFC  0012               	return		;funcret
 10925  003FFE  FFFF               	dw	65535	; errata NOP
 10926  004000                     __end_of_blink:
 10927                           	opt stack 0
 10928                           tblptru	equ	0xFF8
 10929                           tblptrh	equ	0xFF7
 10930                           tblptrl	equ	0xFF6
 10931                           tablat	equ	0xFF5
 10932                           prodh	equ	0xFF4
 10933                           prodl	equ	0xFF3
 10934                           intcon	equ	0xFF2
 10935                           postinc0	equ	0xFEE
 10936                           wreg	equ	0xFE8
 10937                           postdec1	equ	0xFE5
 10938                           fsr1l	equ	0xFE1
 10939                           indf2	equ	0xFDF
 10940                           postinc2	equ	0xFDE
 10941                           fsr2h	equ	0xFDA
 10942                           fsr2l	equ	0xFD9
 10943                           status	equ	0xFD8
 10944                           
 10945 ;; *************** function _acaoTesteBombas *****************
 10946 ;; Defined at:
 10947 ;;		line 135 in file "controle.h"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  i               1   88[BANK0 ] unsigned char 
 10952 ;;  intervalo       1   87[BANK0 ] unsigned char 
 10953 ;; Return value:  Size  Location     Type
 10954 ;;                  1    wreg      void 
 10955 ;; Registers used:
 10956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10962 ;;      Params:         0       0       0       0       0       0       0
 10963 ;;      Locals:         0      12       0       0       0       0       0
 10964 ;;      Temps:          0       5       0       0       0       0       0
 10965 ;;      Totals:         0      17       0       0       0       0       0
 10966 ;;Total ram usage:       17 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:   10
 10969 ;; This function calls:
 10970 ;;		_btPress
 10971 ;;		_clearShiftREG
 10972 ;;		_drenarPressao
 10973 ;;		_enviaSMS
 10974 ;;		_intToFloatStr
 10975 ;;		_partidaBombaEstacionaria
 10976 ;;		_readEEPROM_ext
 10977 ;;		_salvarLOG
 10978 ;;		_sprintf
 10979 ;;		_writeEEPROM_ext
 10980 ;; This function is called by:
 10981 ;;		_main
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           	psect	text30
 10986  00091A                     __ptext30:
 10987                           	opt stack 0
 10988  00091A                     _acaoTesteBombas:
 10989                           	opt stack 0
 10990  00091A  FFFF               	dw	65535	; assembler added errata NOP
 10991                           
 10992                           ;controle.h: 136: if (btPress(1)) {
 10993                           
 10994                           ;incstack = 0
 10995  00091C  0E01               	movlw	1
 10996  00091E  EC4A  F03B         	call	_btPress
 10997  000922  0900               	iorlw	0
 10998  000924  B4D8               	btfsc	status,2,c
 10999  000926  D033               	goto	u7270
 11000                           
 11001                           ;controle.h: 137: executandoTeste = 0;
 11002  000928  0E00               	movlw	0
 11003  00092A  0100               	movlb	0	; () banked
 11004  00092C  6FF1               	movwf	_executandoTeste& (0+255),b
 11005                           
 11006                           ;controle.h: 138: gsmOcupado = 0;
 11007  00092E  0E00               	movlw	0
 11008  000930  6FF4               	movwf	_gsmOcupado& (0+255),b
 11009                           
 11010                           ;controle.h: 139: etapaTesteBombas = 0;
 11011  000932  0E00               	movlw	0
 11012  000934  6E72               	movwf	_etapaTesteBombas,c
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;controle.h: 140: unsigned char intervalo = readEEPROM_ext(6);
 11016  000936  0E06               	movlw	6
 11017  000938  EC61  F03A         	call	_readEEPROM_ext
 11018  00093C  0100               	movlb	0	; () banked
 11019  00093E  6FD7               	movwf	acaoTesteBombas@intervalo& (0+255),b
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;controle.h: 141: intervalo_teste_dia = intervalo > 0 ? intervalo : 1;
 11023  000940  51D7               	movf	acaoTesteBombas@intervalo& (0+255),w,b
 11024  000942  A4D8               	btfss	status,2,c
 11025  000944  D005               	goto	l516
 11026                           
 11027                           ; BSR set to: 0
 11028  000946  0E00               	movlw	0
 11029  000948  6FD0               	movwf	(_acaoTesteBombas$1292+1)& (0+255),b
 11030  00094A  0E01               	movlw	1
 11031  00094C  6FCF               	movwf	_acaoTesteBombas$1292& (0+255),b
 11032  00094E  D004               	goto	l518
 11033  000950                     l516:
 11034  000950  FFFF               	dw	65535	; assembler added errata NOP
 11035                           
 11036                           ; BSR set to: 0
 11037  000952  C0D7  F0CF         	movff	acaoTesteBombas@intervalo,_acaoTesteBombas$1292
 11038  000956  6BD0               	clrf	(_acaoTesteBombas$1292+1)& (0+255),b
 11039  000958                     l518:
 11040  000958  FFFF               	dw	65535	; assembler added errata NOP
 11041                           
 11042                           ; BSR set to: 0
 11043  00095A  C0CF  F0E8         	movff	_acaoTesteBombas$1292,_intervalo_teste_dia
 11044                           
 11045                           ;controle.h: 142: menu_posi = _menu_posi;
 11046  00095E  C0DD  F0DE         	movff	__menu_posi,_menu_posi
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;controle.h: 143: char i = 0;
 11050  000962  0E00               	movlw	0
 11051  000964  6FD8               	movwf	acaoTesteBombas@i& (0+255),b
 11052                           
 11053                           ;controle.h: 144: for (i = 0; i < 8; i++) {
 11054  000966  0E00               	movlw	0
 11055  000968  6FD8               	movwf	acaoTesteBombas@i& (0+255),b
 11056  00096A                     l6634:
 11057  00096A  FFFF               	dw	65535	; assembler added errata NOP
 11058                           
 11059                           ; BSR set to: 0
 11060  00096C  0E07               	movlw	7
 11061  00096E  65D8               	cpfsgt	acaoTesteBombas@i& (0+255),b
 11062  000970  D001               	goto	l519
 11063  000972  D00D               	goto	u7270
 11064  000974                     l519:
 11065  000974  FFFF               	dw	65535	; assembler added errata NOP
 11066                           
 11067                           ; BSR set to: 0
 11068                           ;controle.h: 145: shift[i] = 0;
 11069                           
 11070                           ; BSR set to: 0
 11071  000976  51D8               	movf	acaoTesteBombas@i& (0+255),w,b
 11072  000978  0D01               	mullw	1
 11073  00097A  0E44               	movlw	low _shift
 11074  00097C  24F3               	addwf	prodl,w,c
 11075  00097E  6ED9               	movwf	fsr2l,c
 11076  000980  0E00               	movlw	high _shift
 11077  000982  20F4               	addwfc	prodh,w,c
 11078  000984  6EDA               	movwf	fsr2h,c
 11079  000986  0E00               	movlw	0
 11080  000988  6EDF               	movwf	indf2,c
 11081                           
 11082                           ; BSR set to: 0
 11083  00098A  2BD8               	incf	acaoTesteBombas@i& (0+255),f,b
 11084  00098C  D7EE               	goto	l6634
 11085  00098E                     u7270:
 11086  00098E  FFFF               	dw	65535	; assembler added errata NOP
 11087                           
 11088                           ;controle.h: 146: }
 11089                           ;controle.h: 147: }
 11090                           ;controle.h: 149: if (etapaTesteBombas < 10) {
 11091                           
 11092                           ; BSR set to: 0
 11093                           
 11094                           ; BSR set to: 0
 11095  000990  0E0A               	movlw	10
 11096  000992  6072               	cpfslt	_etapaTesteBombas,c
 11097  000994  D1EC               	goto	l522
 11098                           
 11099                           ;controle.h: 150: sprintf(&line1[3], "Aguarde... %ds", timerTesteBombas);
 11100  000996  0E7E               	movlw	low (_line1+3)
 11101  000998  0100               	movlb	0	; () banked
 11102  00099A  6FA1               	movwf	sprintf@wh& (0+255),b
 11103  00099C  0E01               	movlw	high (_line1+3)
 11104  00099E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11105  0009A0  0E76               	movlw	low STR_38
 11106  0009A2  6FA3               	movwf	sprintf@f& (0+255),b
 11107  0009A4  0E7E               	movlw	high STR_38
 11108  0009A6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11109  0009A8  C0D9  F0A5         	movff	_timerTesteBombas,?_sprintf+4
 11110  0009AC  C0DA  F0A6         	movff	_timerTesteBombas+1,?_sprintf+5
 11111  0009B0  ECC9  F039         	call	_sprintf	;wreg free
 11112                           
 11113                           ;controle.h: 151: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11114  0009B4  0100               	movlb	0	; () banked
 11115  0009B6  51F8               	movf	_pressao& (0+255),w,b
 11116  0009B8  EC04  F03D         	call	_intToFloatStr
 11117  0009BC  C0B5  F0CD         	movff	?_intToFloatStr,_acaoTesteBombas$2376
 11118  0009C0  C0B6  F0CE         	movff	?_intToFloatStr+1,_acaoTesteBombas$2376+1
 11119                           
 11120                           ;controle.h: 151: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11121  0009C4  0E68               	movlw	low (_line2+2)
 11122  0009C6  0100               	movlb	0	; () banked
 11123  0009C8  6FA1               	movwf	sprintf@wh& (0+255),b
 11124  0009CA  0E01               	movlw	high (_line2+2)
 11125  0009CC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11126  0009CE  0E2B               	movlw	low STR_39
 11127  0009D0  6FA3               	movwf	sprintf@f& (0+255),b
 11128  0009D2  0E7E               	movlw	high STR_39
 11129  0009D4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11130  0009D6  C0CD  F0A5         	movff	_acaoTesteBombas$2376,?_sprintf+4
 11131  0009DA  C0CE  F0A6         	movff	_acaoTesteBombas$2376+1,?_sprintf+5
 11132  0009DE  ECC9  F039         	call	_sprintf	;wreg free
 11133                           
 11134                           ;controle.h: 152: }
 11135                           ;controle.h: 154: switch (etapaTesteBombas) {
 11136  0009E2  D1C5               	goto	l522
 11137  0009E4  FFFF               	dw	65535	; assembler added errata NOP
 11138                           
 11139                           ;controle.h: 156: dias_restante_teste = 0;
 11140  0009E6  0E00               	movlw	0
 11141  0009E8  0100               	movlb	0	; () banked
 11142  0009EA  6FE7               	movwf	_dias_restante_teste& (0+255),b
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;controle.h: 157: writeEEPROM_ext(10, dias_restante_teste);
 11146  0009EC  C0E7  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 11147  0009F0  0E0A               	movlw	10
 11148  0009F2  ECA6  F039         	call	_writeEEPROM_ext
 11149                           
 11150                           ;controle.h: 158: shift[2] = 1;
 11151  0009F6  0E01               	movlw	1
 11152  0009F8  6E46               	movwf	_shift+2,c
 11153                           
 11154                           ;controle.h: 159: timerTesteBombas = 30;
 11155  0009FA  0E00               	movlw	0
 11156  0009FC  0100               	movlb	0	; () banked
 11157  0009FE  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11158  000A00  0E1E               	movlw	30
 11159  000A02  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;controle.h: 160: etapaTesteBombas = 1;
 11163  000A04  0E01               	movlw	1
 11164  000A06  D112               	goto	L26
 11165  000A08  FFFF               	dw	65535	; assembler added errata NOP
 11166                           
 11167                           ;controle.h: 163: drenarPressao();
 11168                           
 11169                           ; BSR set to: 0
 11170  000A0A  EC92  F037         	call	_drenarPressao	;wreg free
 11171                           
 11172                           ;controle.h: 164: if (pressao <= (sp_pressao_rede - 10)) {
 11173  000A0E  0EF6               	movlw	246
 11174  000A10  0100               	movlb	0	; () banked
 11175  000A12  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11176  000A14  0EFF               	movlw	255
 11177  000A16  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11178  000A18  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11179  000A1A  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11180  000A1C  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11181  000A1E  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11182  000A20  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11183  000A22  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11184  000A24  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11185  000A26  51F8               	movf	_pressao& (0+255),w,b
 11186  000A28  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11187  000A2A  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11188  000A2C  0A80               	xorlw	128
 11189  000A2E  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11190  000A30  51F9               	movf	(_pressao+1)& (0+255),w,b
 11191  000A32  0A80               	xorlw	128
 11192  000A34  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11193  000A36  A0D8               	btfss	status,0,c
 11194  000A38  D1C4               	goto	l524
 11195                           
 11196                           ; BSR set to: 0
 11197                           ;controle.h: 165: shift[2] = 0;
 11198  000A3A  0E00               	movlw	0
 11199  000A3C  6E46               	movwf	_shift+2,c
 11200                           
 11201                           ;controle.h: 166: shift[6] = 1;
 11202  000A3E  0E01               	movlw	1
 11203  000A40  6E4A               	movwf	_shift+6,c
 11204                           
 11205                           ;controle.h: 167: etapaTesteBombas = 2;
 11206  000A42  0E02               	movlw	2
 11207  000A44  D04C               	goto	L31
 11208  000A46  FFFF               	dw	65535	; assembler added errata NOP
 11209                           
 11210                           ;controle.h: 172: sprintf(line4, "Bomba Jockey...");
 11211                           
 11212                           ; BSR set to: 0
 11213  000A48  0E3C               	movlw	low _line4
 11214  000A4A  0100               	movlb	0	; () banked
 11215  000A4C  6FA1               	movwf	sprintf@wh& (0+255),b
 11216  000A4E  0E01               	movlw	high _line4
 11217  000A50  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11218  000A52  0E0B               	movlw	low STR_40
 11219  000A54  6FA3               	movwf	sprintf@f& (0+255),b
 11220  000A56  0E7E               	movlw	high STR_40
 11221  000A58  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11222  000A5A  ECC9  F039         	call	_sprintf	;wreg free
 11223                           
 11224                           ;controle.h: 173: if (pressao >= sp_pressao_rede) {
 11225  000A5E  0100               	movlb	0	; () banked
 11226  000A60  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11227  000A62  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11228  000A64  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11229  000A66  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11230  000A68  5DF8               	subwf	_pressao& (0+255),w,b
 11231  000A6A  51F9               	movf	(_pressao+1)& (0+255),w,b
 11232  000A6C  0A80               	xorlw	128
 11233  000A6E  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11234  000A70  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11235  000A72  0A80               	xorlw	128
 11236  000A74  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11237  000A76  A0D8               	btfss	status,0,c
 11238  000A78  D006               	goto	l528
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;controle.h: 174: shift[6] = 0;
 11242  000A7A  0E00               	movlw	0
 11243  000A7C  6E4A               	movwf	_shift+6,c
 11244                           
 11245                           ;controle.h: 175: status_jockey = 1;
 11246  000A7E  0E01               	movlw	1
 11247  000A80  6FFD               	movwf	_status_jockey& (0+255),b
 11248                           
 11249                           ;controle.h: 176: etapaTesteBombas = 3;
 11250  000A82  0E03               	movlw	3
 11251  000A84  6E72               	movwf	_etapaTesteBombas,c
 11252  000A86                     l528:
 11253  000A86  FFFF               	dw	65535	; assembler added errata NOP
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;controle.h: 177: }
 11257                           ;controle.h: 178: if (!timerTesteBombas) {
 11258                           
 11259                           ; BSR set to: 0
 11260  000A88  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11261  000A8A  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11262  000A8C  A4D8               	btfss	status,2,c
 11263  000A8E  D199               	goto	l524
 11264                           
 11265                           ; BSR set to: 0
 11266                           ;controle.h: 179: status_jockey = 0;
 11267  000A90  0E00               	movlw	0
 11268  000A92  6FFD               	movwf	_status_jockey& (0+255),b
 11269                           
 11270                           ;controle.h: 180: etapaTesteBombas = 3;
 11271  000A94  0E03               	movlw	3
 11272  000A96  D051               	goto	L45
 11273  000A98  FFFF               	dw	65535	; assembler added errata NOP
 11274                           
 11275                           ;controle.h: 185: shift[2] = 1;
 11276                           
 11277                           ; BSR set to: 0
 11278  000A9A  0E01               	movlw	1
 11279  000A9C  6E46               	movwf	_shift+2,c
 11280                           
 11281                           ;controle.h: 186: etapaTesteBombas = 4;
 11282  000A9E  0E04               	movlw	4
 11283  000AA0  D0C5               	goto	L26
 11284  000AA2  FFFF               	dw	65535	; assembler added errata NOP
 11285                           
 11286                           ;controle.h: 189: drenarPressao();
 11287  000AA4  EC92  F037         	call	_drenarPressao	;wreg free
 11288                           
 11289                           ;controle.h: 190: if (pressao <= (sp_pressao_rede - 10)) {
 11290  000AA8  0EF6               	movlw	246
 11291  000AAA  0100               	movlb	0	; () banked
 11292  000AAC  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11293  000AAE  0EFF               	movlw	255
 11294  000AB0  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11295  000AB2  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11296  000AB4  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11297  000AB6  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11298  000AB8  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11299  000ABA  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11300  000ABC  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11301  000ABE  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11302  000AC0  51F8               	movf	_pressao& (0+255),w,b
 11303  000AC2  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11304  000AC4  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11305  000AC6  0A80               	xorlw	128
 11306  000AC8  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11307  000ACA  51F9               	movf	(_pressao+1)& (0+255),w,b
 11308  000ACC  0A80               	xorlw	128
 11309  000ACE  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11310  000AD0  A0D8               	btfss	status,0,c
 11311  000AD2  D177               	goto	l524
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;controle.h: 191: shift[5] = 1;
 11315  000AD4  0E01               	movlw	1
 11316  000AD6  6E49               	movwf	_shift+5,c
 11317                           
 11318                           ;controle.h: 192: shift[2] = 0;
 11319  000AD8  0E00               	movlw	0
 11320  000ADA  6E46               	movwf	_shift+2,c
 11321                           
 11322                           ;controle.h: 193: etapaTesteBombas = 5;
 11323  000ADC  0E05               	movlw	5
 11324  000ADE                     L31:
 11325  000ADE  FFFF               	dw	65535	; assembler added errata NOP
 11326  000AE0  6E72               	movwf	_etapaTesteBombas,c
 11327                           
 11328                           ;controle.h: 194: timerTesteBombas = 50;
 11329  000AE2  0E00               	movlw	0
 11330  000AE4  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11331  000AE6  0E32               	movlw	50
 11332  000AE8  D02D               	goto	L25
 11333  000AEA  FFFF               	dw	65535	; assembler added errata NOP
 11334                           
 11335                           ;controle.h: 198: sprintf(line4, "Bomba Principal...");
 11336                           
 11337                           ; BSR set to: 0
 11338  000AEC  0E3C               	movlw	low _line4
 11339  000AEE  0100               	movlb	0	; () banked
 11340  000AF0  6FA1               	movwf	sprintf@wh& (0+255),b
 11341  000AF2  0E01               	movlw	high _line4
 11342  000AF4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11343  000AF6  0E00               	movlw	low STR_41
 11344  000AF8  6FA3               	movwf	sprintf@f& (0+255),b
 11345  000AFA  0E7D               	movlw	high STR_41
 11346  000AFC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11347  000AFE  ECC9  F039         	call	_sprintf	;wreg free
 11348                           
 11349                           ;controle.h: 199: if (pressao >= sp_pressao_rede) {
 11350  000B02  0100               	movlb	0	; () banked
 11351  000B04  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11352  000B06  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11353  000B08  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11354  000B0A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11355  000B0C  5DF8               	subwf	_pressao& (0+255),w,b
 11356  000B0E  51F9               	movf	(_pressao+1)& (0+255),w,b
 11357  000B10  0A80               	xorlw	128
 11358  000B12  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11359  000B14  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11360  000B16  0A80               	xorlw	128
 11361  000B18  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11362  000B1A  A0D8               	btfss	status,0,c
 11363  000B1C  D006               	goto	l534
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;controle.h: 200: shift[5] = 0;
 11367  000B1E  0E00               	movlw	0
 11368  000B20  6E49               	movwf	_shift+5,c
 11369                           
 11370                           ;controle.h: 201: status_principal = 1;
 11371  000B22  0E01               	movlw	1
 11372  000B24  6FFC               	movwf	_status_principal& (0+255),b
 11373                           
 11374                           ;controle.h: 202: etapaTesteBombas = 6;
 11375  000B26  0E06               	movlw	6
 11376  000B28  6E72               	movwf	_etapaTesteBombas,c
 11377  000B2A                     l534:
 11378  000B2A  FFFF               	dw	65535	; assembler added errata NOP
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;controle.h: 203: }
 11382                           ;controle.h: 204: if (!timerTesteBombas) {
 11383                           
 11384                           ; BSR set to: 0
 11385  000B2C  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11386  000B2E  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11387  000B30  A4D8               	btfss	status,2,c
 11388  000B32  D147               	goto	l524
 11389                           
 11390                           ; BSR set to: 0
 11391                           ;controle.h: 205: status_principal = 0;
 11392  000B34  0E00               	movlw	0
 11393  000B36  6FFC               	movwf	_status_principal& (0+255),b
 11394                           
 11395                           ;controle.h: 206: etapaTesteBombas = 6;
 11396  000B38  0E06               	movlw	6
 11397  000B3A                     L45:
 11398  000B3A  FFFF               	dw	65535	; assembler added errata NOP
 11399  000B3C  6E72               	movwf	_etapaTesteBombas,c
 11400                           
 11401                           ;controle.h: 207: timerTesteBombas = 30;
 11402  000B3E  0E00               	movlw	0
 11403  000B40  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11404  000B42  0E1E               	movlw	30
 11405  000B44                     L25:
 11406  000B44  FFFF               	dw	65535	; assembler added errata NOP
 11407  000B46  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;controle.h: 208: }
 11411                           ;controle.h: 209: break;
 11412  000B48  D13C               	goto	l524
 11413  000B4A  FFFF               	dw	65535	; assembler added errata NOP
 11414                           
 11415                           ;controle.h: 211: shift[2] = 1;
 11416                           
 11417                           ; BSR set to: 0
 11418  000B4C  0E01               	movlw	1
 11419  000B4E  6E46               	movwf	_shift+2,c
 11420                           
 11421                           ;controle.h: 212: etapaTesteBombas = 7;
 11422  000B50  0E07               	movlw	7
 11423  000B52  D06C               	goto	L26
 11424  000B54  FFFF               	dw	65535	; assembler added errata NOP
 11425                           
 11426                           ;controle.h: 215: drenarPressao();
 11427  000B56  EC92  F037         	call	_drenarPressao	;wreg free
 11428                           
 11429                           ;controle.h: 216: if (pressao <= (sp_pressao_rede - 10)) {
 11430  000B5A  0EF6               	movlw	246
 11431  000B5C  0100               	movlb	0	; () banked
 11432  000B5E  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11433  000B60  0EFF               	movlw	255
 11434  000B62  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11435  000B64  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11436  000B66  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11437  000B68  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11438  000B6A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11439  000B6C  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11440  000B6E  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11441  000B70  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11442  000B72  51F8               	movf	_pressao& (0+255),w,b
 11443  000B74  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11444  000B76  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11445  000B78  0A80               	xorlw	128
 11446  000B7A  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11447  000B7C  51F9               	movf	(_pressao+1)& (0+255),w,b
 11448  000B7E  0A80               	xorlw	128
 11449  000B80  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11450  000B82  A0D8               	btfss	status,0,c
 11451  000B84  D11E               	goto	l524
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;controle.h: 217: shift[2] = 0;
 11455  000B86  0E00               	movlw	0
 11456  000B88  6E46               	movwf	_shift+2,c
 11457                           
 11458                           ;controle.h: 218: etapaTesteBombas = 8;
 11459  000B8A  0E08               	movlw	8
 11460  000B8C  6E72               	movwf	_etapaTesteBombas,c
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;controle.h: 219: timerTesteBombas = tempo_limite_partida;
 11464  000B8E  C06C  F0D9         	movff	_tempo_limite_partida,_timerTesteBombas
 11465  000B92  6BDA               	clrf	(_timerTesteBombas+1)& (0+255),b
 11466                           
 11467                           ; BSR set to: 0
 11468                           ;controle.h: 220: }
 11469                           ;controle.h: 221: break;
 11470  000B94  D116               	goto	l524
 11471  000B96  FFFF               	dw	65535	; assembler added errata NOP
 11472                           
 11473                           ;controle.h: 223: sprintf(line4, "Bomba Combustao...");
 11474                           
 11475                           ; BSR set to: 0
 11476  000B98  0E3C               	movlw	low _line4
 11477  000B9A  0100               	movlb	0	; () banked
 11478  000B9C  6FA1               	movwf	sprintf@wh& (0+255),b
 11479  000B9E  0E01               	movlw	high _line4
 11480  000BA0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11481  000BA2  0E13               	movlw	low STR_42
 11482  000BA4  6FA3               	movwf	sprintf@f& (0+255),b
 11483  000BA6  0E7D               	movlw	high STR_42
 11484  000BA8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11485  000BAA  ECC9  F039         	call	_sprintf	;wreg free
 11486                           
 11487                           ;controle.h: 224: partidaBombaEstacionaria(1);
 11488  000BAE  0E01               	movlw	1
 11489  000BB0  EC49  F01C         	call	_partidaBombaEstacionaria
 11490                           
 11491                           ;controle.h: 226: if (flagEstacionariaLigada || pressao >= sp_pressao_rede) {
 11492  000BB4  0100               	movlb	0	; () banked
 11493  000BB6  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 11494  000BB8  A4D8               	btfss	status,2,c
 11495  000BBA  D00D               	goto	u7370
 11496                           
 11497                           ; BSR set to: 0
 11498  000BBC  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11499  000BBE  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11500  000BC0  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11501  000BC2  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11502  000BC4  5DF8               	subwf	_pressao& (0+255),w,b
 11503  000BC6  51F9               	movf	(_pressao+1)& (0+255),w,b
 11504  000BC8  0A80               	xorlw	128
 11505  000BCA  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11506  000BCC  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11507  000BCE  0A80               	xorlw	128
 11508  000BD0  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11509  000BD2  A0D8               	btfss	status,0,c
 11510  000BD4  D008               	goto	l540
 11511  000BD6                     u7370:
 11512  000BD6  FFFF               	dw	65535	; assembler added errata NOP
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;controle.h: 227: status_estacionaria = 1;
 11516                           
 11517                           ; BSR set to: 0
 11518  000BD8  0E01               	movlw	1
 11519  000BDA  6FFB               	movwf	_status_estacionaria& (0+255),b
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;controle.h: 228: timerTesteBombas = tempo_limite_teste_estacionaria;
 11523  000BDC  C0E4  F0D9         	movff	_tempo_limite_teste_estacionaria,_timerTesteBombas
 11524  000BE0  6BDA               	clrf	(_timerTesteBombas+1)& (0+255),b
 11525                           
 11526                           ;controle.h: 229: etapaTesteBombas = 9;
 11527  000BE2  0E09               	movlw	9
 11528  000BE4  6E72               	movwf	_etapaTesteBombas,c
 11529  000BE6                     l540:
 11530  000BE6  FFFF               	dw	65535	; assembler added errata NOP
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;controle.h: 230: }
 11534                           ;controle.h: 231: if (status_estacionaria == 0 || !timerTesteBombas) {
 11535  000BE8  51FB               	movf	_status_estacionaria& (0+255),w,b
 11536  000BEA  B4D8               	btfsc	status,2,c
 11537  000BEC  D004               	goto	u7390
 11538                           
 11539                           ; BSR set to: 0
 11540  000BEE  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11541  000BF0  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11542  000BF2  A4D8               	btfss	status,2,c
 11543  000BF4  D0E6               	goto	l524
 11544  000BF6                     u7390:
 11545  000BF6  FFFF               	dw	65535	; assembler added errata NOP
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;controle.h: 232: etapaTesteBombas = 10;
 11549                           
 11550                           ; BSR set to: 0
 11551  000BF8  0E0A               	movlw	10
 11552  000BFA  6E72               	movwf	_etapaTesteBombas,c
 11553                           
 11554                           ;controle.h: 233: status_estacionaria = 0;
 11555  000BFC  0E00               	movlw	0
 11556  000BFE  6FFB               	movwf	_status_estacionaria& (0+255),b
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;controle.h: 234: }
 11560                           ;controle.h: 235: break;
 11561  000C00  D0E0               	goto	l524
 11562  000C02  FFFF               	dw	65535	; assembler added errata NOP
 11563                           
 11564                           ;controle.h: 237: sprintf(line4, "Bomba Ligada...");
 11565                           
 11566                           ; BSR set to: 0
 11567  000C04  0E3C               	movlw	low _line4
 11568  000C06  0100               	movlb	0	; () banked
 11569  000C08  6FA1               	movwf	sprintf@wh& (0+255),b
 11570  000C0A  0E01               	movlw	high _line4
 11571  000C0C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11572  000C0E  0EFB               	movlw	low STR_43
 11573  000C10  6FA3               	movwf	sprintf@f& (0+255),b
 11574  000C12  0E7D               	movlw	high STR_43
 11575  000C14  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11576  000C16  ECC9  F039         	call	_sprintf	;wreg free
 11577                           
 11578                           ;controle.h: 238: partidaBombaEstacionaria(1);
 11579  000C1A  0E01               	movlw	1
 11580  000C1C  EC49  F01C         	call	_partidaBombaEstacionaria
 11581                           
 11582                           ;controle.h: 239: if (!timerTesteBombas) {
 11583  000C20  0100               	movlb	0	; () banked
 11584  000C22  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11585  000C24  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11586  000C26  A4D8               	btfss	status,2,c
 11587  000C28  D0CC               	goto	l524
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;controle.h: 240: etapaTesteBombas = 10;
 11591  000C2A  0E0A               	movlw	10
 11592  000C2C                     L26:
 11593  000C2C  FFFF               	dw	65535	; assembler added errata NOP
 11594  000C2E  6E72               	movwf	_etapaTesteBombas,c
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;controle.h: 241: }
 11598                           ;controle.h: 242: break;
 11599  000C30  D0C8               	goto	l524
 11600  000C32  FFFF               	dw	65535	; assembler added errata NOP
 11601                           
 11602                           ;controle.h: 244: salvarLOG();
 11603                           
 11604                           ; BSR set to: 0
 11605  000C34  ECE9  F01D         	call	_salvarLOG	;wreg free
 11606                           
 11607                           ;controle.h: 245: partidaBombaEstacionaria(2);
 11608  000C38  0E02               	movlw	2
 11609  000C3A  EC49  F01C         	call	_partidaBombaEstacionaria
 11610                           
 11611                           ;controle.h: 246: clearShiftREG();
 11612  000C3E  ECFD  F037         	call	_clearShiftREG	;wreg free
 11613                           
 11614                           ;controle.h: 247: etapaTesteBombas = 11;
 11615  000C42  0E0B               	movlw	11
 11616  000C44  6E72               	movwf	_etapaTesteBombas,c
 11617                           
 11618                           ;controle.h: 248: timerTesteBombas = 10;
 11619  000C46  0E00               	movlw	0
 11620  000C48  0100               	movlb	0	; () banked
 11621  000C4A  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11622  000C4C  0E0A               	movlw	10
 11623  000C4E  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;controle.h: 249: executandoTeste = 0;
 11627  000C50  0E00               	movlw	0
 11628  000C52  6FF1               	movwf	_executandoTeste& (0+255),b
 11629                           
 11630                           ;controle.h: 250: break;
 11631  000C54  D0B6               	goto	l524
 11632  000C56  FFFF               	dw	65535	; assembler added errata NOP
 11633                           
 11634                           ;controle.h: 252: sprintf(&line1[2], "Teste Concluido!");
 11635                           
 11636                           ; BSR set to: 0
 11637  000C58  0E7D               	movlw	low (_line1+2)
 11638  000C5A  0100               	movlb	0	; () banked
 11639  000C5C  6FA1               	movwf	sprintf@wh& (0+255),b
 11640  000C5E  0E01               	movlw	high (_line1+2)
 11641  000C60  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11642  000C62  0EA7               	movlw	low STR_44
 11643  000C64  6FA3               	movwf	sprintf@f& (0+255),b
 11644  000C66  0E7D               	movlw	high STR_44
 11645  000C68  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11646  000C6A  ECC9  F039         	call	_sprintf	;wreg free
 11647                           
 11648                           ;controle.h: 253: sprintf(line2, "JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 11649  000C6E  0100               	movlb	0	; () banked
 11650  000C70  05FD               	decf	_status_jockey& (0+255),w,b
 11651  000C72  B4D8               	btfsc	status,2,c
 11652  000C74  D004               	goto	l551
 11653                           
 11654                           ; BSR set to: 0
 11655  000C76  0EE3               	movlw	low STR_47
 11656  000C78  6FD1               	movwf	_acaoTesteBombas$1308& (0+255),b
 11657  000C7A  0E7F               	movlw	high STR_47
 11658  000C7C  D004               	goto	L27
 11659  000C7E                     l551:
 11660  000C7E  FFFF               	dw	65535	; assembler added errata NOP
 11661                           
 11662                           ; BSR set to: 0
 11663                           
 11664                           ; BSR set to: 0
 11665  000C80  0EFA               	movlw	low STR_5
 11666  000C82  6FD1               	movwf	_acaoTesteBombas$1308& (0+255),b
 11667  000C84  0E7F               	movlw	high STR_5
 11668  000C86                     L27:
 11669  000C86  FFFF               	dw	65535	; assembler added errata NOP
 11670  000C88  6FD2               	movwf	(_acaoTesteBombas$1308+1)& (0+255),b
 11671                           
 11672                           ; BSR set to: 0
 11673                           
 11674                           ; BSR set to: 0
 11675  000C8A  0E66               	movlw	low _line2
 11676  000C8C  6FA1               	movwf	sprintf@wh& (0+255),b
 11677  000C8E  0E01               	movlw	high _line2
 11678  000C90  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11679  000C92  0E41               	movlw	low STR_45
 11680  000C94  6FA3               	movwf	sprintf@f& (0+255),b
 11681  000C96  0E7F               	movlw	high STR_45
 11682  000C98  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11683  000C9A  C0D1  F0A5         	movff	_acaoTesteBombas$1308,?_sprintf+4
 11684  000C9E  C0D2  F0A6         	movff	_acaoTesteBombas$1308+1,?_sprintf+5
 11685  000CA2  ECC9  F039         	call	_sprintf	;wreg free
 11686                           
 11687                           ;controle.h: 254: sprintf(line3, "PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO"
      +                          );
 11688  000CA6  0100               	movlb	0	; () banked
 11689  000CA8  05FC               	decf	_status_principal& (0+255),w,b
 11690  000CAA  B4D8               	btfsc	status,2,c
 11691  000CAC  D004               	goto	l555
 11692                           
 11693                           ; BSR set to: 0
 11694  000CAE  0EE3               	movlw	low STR_47
 11695  000CB0  6FD3               	movwf	_acaoTesteBombas$1313& (0+255),b
 11696  000CB2  0E7F               	movlw	high STR_47
 11697  000CB4  D004               	goto	L28
 11698  000CB6                     l555:
 11699  000CB6  FFFF               	dw	65535	; assembler added errata NOP
 11700                           
 11701                           ; BSR set to: 0
 11702                           
 11703                           ; BSR set to: 0
 11704  000CB8  0EFA               	movlw	low STR_5
 11705  000CBA  6FD3               	movwf	_acaoTesteBombas$1313& (0+255),b
 11706  000CBC  0E7F               	movlw	high STR_5
 11707  000CBE                     L28:
 11708  000CBE  FFFF               	dw	65535	; assembler added errata NOP
 11709  000CC0  6FD4               	movwf	(_acaoTesteBombas$1313+1)& (0+255),b
 11710                           
 11711                           ; BSR set to: 0
 11712                           
 11713                           ; BSR set to: 0
 11714  000CC2  0E51               	movlw	low _line3
 11715  000CC4  6FA1               	movwf	sprintf@wh& (0+255),b
 11716  000CC6  0E01               	movlw	high _line3
 11717  000CC8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11718  000CCA  0E58               	movlw	low STR_48
 11719  000CCC  6FA3               	movwf	sprintf@f& (0+255),b
 11720  000CCE  0E7E               	movlw	high STR_48
 11721  000CD0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11722  000CD2  C0D3  F0A5         	movff	_acaoTesteBombas$1313,?_sprintf+4
 11723  000CD6  C0D4  F0A6         	movff	_acaoTesteBombas$1313+1,?_sprintf+5
 11724  000CDA  ECC9  F039         	call	_sprintf	;wreg free
 11725                           
 11726                           ;controle.h: 255: sprintf(line4, "COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "ER
      +                          RO");
 11727  000CDE  0100               	movlb	0	; () banked
 11728  000CE0  05FB               	decf	_status_estacionaria& (0+255),w,b
 11729  000CE2  B4D8               	btfsc	status,2,c
 11730  000CE4  D004               	goto	l559
 11731                           
 11732                           ; BSR set to: 0
 11733  000CE6  0EE3               	movlw	low STR_47
 11734  000CE8  6FD5               	movwf	_acaoTesteBombas$1318& (0+255),b
 11735  000CEA  0E7F               	movlw	high STR_47
 11736  000CEC  D004               	goto	L29
 11737  000CEE                     l559:
 11738  000CEE  FFFF               	dw	65535	; assembler added errata NOP
 11739                           
 11740                           ; BSR set to: 0
 11741                           
 11742                           ; BSR set to: 0
 11743  000CF0  0EFA               	movlw	low STR_5
 11744  000CF2  6FD5               	movwf	_acaoTesteBombas$1318& (0+255),b
 11745  000CF4  0E7F               	movlw	high STR_5
 11746  000CF6                     L29:
 11747  000CF6  FFFF               	dw	65535	; assembler added errata NOP
 11748  000CF8  6FD6               	movwf	(_acaoTesteBombas$1318+1)& (0+255),b
 11749                           
 11750                           ; BSR set to: 0
 11751                           
 11752                           ; BSR set to: 0
 11753  000CFA  0E3C               	movlw	low _line4
 11754  000CFC  6FA1               	movwf	sprintf@wh& (0+255),b
 11755  000CFE  0E01               	movlw	high _line4
 11756  000D00  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11757  000D02  0E67               	movlw	low STR_51
 11758  000D04  6FA3               	movwf	sprintf@f& (0+255),b
 11759  000D06  0E7E               	movlw	high STR_51
 11760  000D08  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11761  000D0A  C0D5  F0A5         	movff	_acaoTesteBombas$1318,?_sprintf+4
 11762  000D0E  C0D6  F0A6         	movff	_acaoTesteBombas$1318+1,?_sprintf+5
 11763  000D12  ECC9  F039         	call	_sprintf	;wreg free
 11764                           
 11765                           ;controle.h: 256: if (!timerTesteBombas) {
 11766  000D16  0100               	movlb	0	; () banked
 11767  000D18  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11768  000D1A  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11769  000D1C  A4D8               	btfss	status,2,c
 11770  000D1E  D051               	goto	l524
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;controle.h: 257: etapaTesteBombas = 12;
 11774  000D20  0E0C               	movlw	12
 11775  000D22  6E72               	movwf	_etapaTesteBombas,c
 11776                           
 11777                           ;controle.h: 258: timerTesteBombas = 150;
 11778  000D24  0E00               	movlw	0
 11779  000D26  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11780  000D28  0E96               	movlw	150
 11781  000D2A  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11782                           
 11783                           ;controle.h: 259: gsmOcupado = 1;
 11784  000D2C  0E01               	movlw	1
 11785  000D2E  6FF4               	movwf	_gsmOcupado& (0+255),b
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;controle.h: 260: }
 11789                           ;controle.h: 261: break;
 11790  000D30  D048               	goto	l524
 11791  000D32  FFFF               	dw	65535	; assembler added errata NOP
 11792                           
 11793                           ;controle.h: 263: sprintf(&line4[2], "enviando SMS...");
 11794                           
 11795                           ; BSR set to: 0
 11796  000D34  0E3E               	movlw	low (_line4+2)
 11797  000D36  0100               	movlb	0	; () banked
 11798  000D38  6FA1               	movwf	sprintf@wh& (0+255),b
 11799  000D3A  0E01               	movlw	high (_line4+2)
 11800  000D3C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11801  000D3E  0EEB               	movlw	low STR_54
 11802  000D40  6FA3               	movwf	sprintf@f& (0+255),b
 11803  000D42  0E7D               	movlw	high STR_54
 11804  000D44  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11805  000D46  ECC9  F039         	call	_sprintf	;wreg free
 11806                           
 11807                           ;controle.h: 264: enviaSMS(1);
 11808  000D4A  0E01               	movlw	1
 11809  000D4C  ECDB  F00A         	call	_enviaSMS
 11810                           
 11811                           ;controle.h: 265: if (!timerTesteBombas) {
 11812  000D50  0100               	movlb	0	; () banked
 11813  000D52  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11814  000D54  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11815  000D56  A4D8               	btfss	status,2,c
 11816  000D58  D034               	goto	l524
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;controle.h: 266: menu_posi = 0;
 11820  000D5A  0E00               	movlw	0
 11821  000D5C  D005               	goto	L30
 11822  000D5E  FFFF               	dw	65535	; assembler added errata NOP
 11823                           
 11824                           ;controle.h: 270: etapaTesteBombas = 0;
 11825                           
 11826                           ; BSR set to: 0
 11827  000D60  0E00               	movlw	0
 11828  000D62  6E72               	movwf	_etapaTesteBombas,c
 11829                           
 11830                           ;controle.h: 271: menu_posi = 0;
 11831  000D64  0E00               	movlw	0
 11832  000D66  0100               	movlb	0	; () banked
 11833  000D68                     L30:
 11834  000D68  FFFF               	dw	65535	; assembler added errata NOP
 11835  000D6A  6FDE               	movwf	_menu_posi& (0+255),b
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;controle.h: 273: }
 11839                           
 11840                           ;controle.h: 272: break;
 11841  000D6C  D02A               	goto	l524
 11842  000D6E                     l522:
 11843  000D6E  FFFF               	dw	65535	; assembler added errata NOP
 11844                           
 11845                           ; BSR set to: 0
 11846  000D70  5072               	movf	_etapaTesteBombas,w,c
 11847                           
 11848                           ; Switch size 1, requested type "space"
 11849                           ; Number of cases is 13, Range of values is 0 to 12
 11850                           ; switch strategies available:
 11851                           ; Name         Instructions Cycles
 11852                           ; simple_byte           40    21 (average)
 11853                           ;	Chosen strategy is simple_byte
 11854  000D72  0A00               	xorlw	0	; case 0
 11855  000D74  B4D8               	btfsc	status,2,c
 11856  000D76  D636               	goto	l523
 11857  000D78  0A01               	xorlw	1	; case 1
 11858  000D7A  B4D8               	btfsc	status,2,c
 11859  000D7C  D645               	goto	l525
 11860  000D7E  0A03               	xorlw	3	; case 2
 11861  000D80  B4D8               	btfsc	status,2,c
 11862  000D82  D661               	goto	l527
 11863  000D84  0A01               	xorlw	1	; case 3
 11864  000D86  B4D8               	btfsc	status,2,c
 11865  000D88  D687               	goto	l530
 11866  000D8A  0A07               	xorlw	7	; case 4
 11867  000D8C  B4D8               	btfsc	status,2,c
 11868  000D8E  D689               	goto	l531
 11869  000D90  0A01               	xorlw	1	; case 5
 11870  000D92  B4D8               	btfsc	status,2,c
 11871  000D94  D6AA               	goto	l533
 11872  000D96  0A03               	xorlw	3	; case 6
 11873  000D98  B4D8               	btfsc	status,2,c
 11874  000D9A  D6D7               	goto	l536
 11875  000D9C  0A01               	xorlw	1	; case 7
 11876  000D9E  B4D8               	btfsc	status,2,c
 11877  000DA0  D6D9               	goto	l537
 11878  000DA2  0A0F               	xorlw	15	; case 8
 11879  000DA4  B4D8               	btfsc	status,2,c
 11880  000DA6  D6F7               	goto	l539
 11881  000DA8  0A01               	xorlw	1	; case 9
 11882  000DAA  B4D8               	btfsc	status,2,c
 11883  000DAC  D72A               	goto	l546
 11884  000DAE  0A03               	xorlw	3	; case 10
 11885  000DB0  B4D8               	btfsc	status,2,c
 11886  000DB2  D73F               	goto	l548
 11887  000DB4  0A01               	xorlw	1	; case 11
 11888  000DB6  B4D8               	btfsc	status,2,c
 11889  000DB8  D74E               	goto	l549
 11890  000DBA  0A07               	xorlw	7	; case 12
 11891  000DBC  B4D8               	btfsc	status,2,c
 11892  000DBE  D7B9               	goto	l563
 11893  000DC0  D7CE               	goto	l565
 11894  000DC2                     l524:
 11895  000DC2  FFFF               	dw	65535	; assembler added errata NOP
 11896  000DC4  0012               	return		;funcret
 11897  000DC6  FFFF               	dw	65535	; errata NOP
 11898  000DC8                     __end_of_acaoTesteBombas:
 11899                           	opt stack 0
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           intcon	equ	0xFF2
 11907                           postinc0	equ	0xFEE
 11908                           wreg	equ	0xFE8
 11909                           postdec1	equ	0xFE5
 11910                           fsr1l	equ	0xFE1
 11911                           indf2	equ	0xFDF
 11912                           postinc2	equ	0xFDE
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _salvarLOG *****************
 11918 ;; Defined at:
 11919 ;;		line 9 in file "logs.h"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;		None
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  1    wreg      void 
 11926 ;; Registers used:
 11927 ;;		wreg, status,2, status,0, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11933 ;;      Params:         0       0       0       0       0       0       0
 11934 ;;      Locals:         0       2       0       0       0       0       0
 11935 ;;      Temps:          0       1       0       0       0       0       0
 11936 ;;      Totals:         0       3       0       0       0       0       0
 11937 ;;Total ram usage:        3 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    9
 11940 ;; This function calls:
 11941 ;;		_readEEPROM_ext
 11942 ;;		_writeEEPROM_ext
 11943 ;; This function is called by:
 11944 ;;		_acaoTesteBombas
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           	psect	text31
 11949  003BD2                     __ptext31:
 11950                           	opt stack 0
 11951  003BD2                     _salvarLOG:
 11952                           	opt stack 0
 11953  003BD2  FFFF               	dw	65535	; assembler added errata NOP
 11954                           
 11955                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 11956                           
 11957                           ;incstack = 0
 11958  003BD4  0E0E               	movlw	14
 11959  003BD6  EC61  F03A         	call	_readEEPROM_ext
 11960  003BDA  0100               	movlb	0	; () banked
 11961  003BDC  6F8E               	movwf	??_salvarLOG& (0+255),b
 11962  003BDE  518E               	movf	??_salvarLOG& (0+255),w,b
 11963  003BE0  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 11964  003BE2  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 11968  003BE4  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 11969  003BE6  E104               	bnz	u6060
 11970  003BE8  0E3C               	movlw	60
 11971  003BEA  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11972  003BEC  A0D8               	btfss	status,0,c
 11973  003BEE  D006               	goto	u6070
 11974  003BF0                     u6060:
 11975                           
 11976                           ; BSR set to: 0
 11977  003BF0  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 11978  003BF2  E105               	bnz	l5824
 11979  003BF4  0EFB               	movlw	251
 11980  003BF6  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11981  003BF8  A0D8               	btfss	status,0,c
 11982  003BFA  D005               	goto	l413
 11983  003BFC                     u6070:
 11984  003BFC  FFFF               	dw	65535	; assembler added errata NOP
 11985  003BFE                     l5824:
 11986                           
 11987                           ; BSR set to: 0
 11988                           ;logs.h: 12: ultimoLogSalvo = 60;
 11989  003BFE  0E00               	movlw	0
 11990  003C00  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 11991  003C02  0E3C               	movlw	60
 11992  003C04  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 11993  003C06                     l413:
 11994  003C06  FFFF               	dw	65535	; assembler added errata NOP
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;logs.h: 13: }
 11998                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 11999                           
 12000                           ; BSR set to: 0
 12001  003C08  C0EB  F08C         	movff	__dia,writeEEPROM_ext@data
 12002  003C0C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12003  003C0E  ECA6  F039         	call	_writeEEPROM_ext
 12004                           
 12005                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 12006  003C12  C0EA  F08C         	movff	__mes,writeEEPROM_ext@data
 12007  003C16  0100               	movlb	0	; () banked
 12008  003C18  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12009  003C1A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12010  003C1C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12011  003C1E  ECA6  F039         	call	_writeEEPROM_ext
 12012                           
 12013                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 12014  003C22  C0E9  F08C         	movff	__ano,writeEEPROM_ext@data
 12015  003C26  0100               	movlb	0	; () banked
 12016  003C28  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12017  003C2A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12018  003C2C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12019  003C2E  ECA6  F039         	call	_writeEEPROM_ext
 12020                           
 12021                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 12022  003C32  C0EC  F08C         	movff	__hor,writeEEPROM_ext@data
 12023  003C36  0100               	movlb	0	; () banked
 12024  003C38  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12025  003C3A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12026  003C3C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12027  003C3E  ECA6  F039         	call	_writeEEPROM_ext
 12028                           
 12029                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 12030  003C42  C0ED  F08C         	movff	__min,writeEEPROM_ext@data
 12031  003C46  0100               	movlb	0	; () banked
 12032  003C48  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12033  003C4A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12034  003C4C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12035  003C4E  ECA6  F039         	call	_writeEEPROM_ext
 12036                           
 12037                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 12038  003C52  C0FD  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 12039  003C56  0100               	movlb	0	; () banked
 12040  003C58  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12041  003C5A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12042  003C5C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12043  003C5E  ECA6  F039         	call	_writeEEPROM_ext
 12044                           
 12045                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 12046  003C62  C0FC  F08C         	movff	_status_principal,writeEEPROM_ext@data
 12047  003C66  0100               	movlb	0	; () banked
 12048  003C68  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12049  003C6A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12050  003C6C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12051  003C6E  ECA6  F039         	call	_writeEEPROM_ext
 12052                           
 12053                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 12054  003C72  C0FB  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 12055  003C76  0100               	movlb	0	; () banked
 12056  003C78  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12057  003C7A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12058  003C7C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12059  003C7E  ECA6  F039         	call	_writeEEPROM_ext
 12060                           
 12061                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 12062  003C82  0100               	movlb	0	; () banked
 12063  003C84  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12064  003C86  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12065  003C88  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 12066  003C8C  0E0E               	movlw	14
 12067  003C8E  ECA6  F039         	call	_writeEEPROM_ext
 12068  003C92  0012               	return		;funcret
 12069  003C94  FFFF               	dw	65535	; errata NOP
 12070  003C96                     __end_of_salvarLOG:
 12071                           	opt stack 0
 12072                           tblptru	equ	0xFF8
 12073                           tblptrh	equ	0xFF7
 12074                           tblptrl	equ	0xFF6
 12075                           tablat	equ	0xFF5
 12076                           prodh	equ	0xFF4
 12077                           prodl	equ	0xFF3
 12078                           intcon	equ	0xFF2
 12079                           postinc0	equ	0xFEE
 12080                           wreg	equ	0xFE8
 12081                           postdec1	equ	0xFE5
 12082                           fsr1l	equ	0xFE1
 12083                           indf2	equ	0xFDF
 12084                           postinc2	equ	0xFDE
 12085                           fsr2h	equ	0xFDA
 12086                           fsr2l	equ	0xFD9
 12087                           status	equ	0xFD8
 12088                           
 12089 ;; *************** function _writeEEPROM_ext *****************
 12090 ;; Defined at:
 12091 ;;		line 13 in file "eeprom.h"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;  adress          1    wreg     unsigned char 
 12094 ;;  data            1   12[BANK0 ] unsigned char 
 12095 ;; Auto vars:     Size  Location     Type
 12096 ;;  adress          1   13[BANK0 ] unsigned char 
 12097 ;; Return value:  Size  Location     Type
 12098 ;;                  1    wreg      void 
 12099 ;; Registers used:
 12100 ;;		wreg, status,2, status,0, cstack
 12101 ;; Tracked objects:
 12102 ;;		On entry : 0/0
 12103 ;;		On exit  : 0/0
 12104 ;;		Unchanged: 0/0
 12105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12106 ;;      Params:         0       1       0       0       0       0       0
 12107 ;;      Locals:         0       1       0       0       0       0       0
 12108 ;;      Temps:          0       0       0       0       0       0       0
 12109 ;;      Totals:         0       2       0       0       0       0       0
 12110 ;;Total ram usage:        2 bytes
 12111 ;; Hardware stack levels used:    1
 12112 ;; Hardware stack levels required when called:    8
 12113 ;; This function calls:
 12114 ;;		_I2C_Start
 12115 ;;		_I2C_Stop
 12116 ;;		_I2C_Write
 12117 ;;		_delay
 12118 ;; This function is called by:
 12119 ;;		_salvarLOG
 12120 ;;		_verificarIntervaloTesteBombas
 12121 ;;		_acaoTesteBombas
 12122 ;;		_lerParametros
 12123 ;;		_tela_testeBombas
 12124 ;;		_configuraTelefones
 12125 ;;		_configurarEstacionaria
 12126 ;;		_ajusteSP_Bombas
 12127 ;;		_apagarLOGS
 12128 ;; This function uses a non-reentrant model
 12129 ;;
 12130                           
 12131                           	psect	text32
 12132  00734C                     __ptext32:
 12133                           	opt stack 0
 12134  00734C                     _writeEEPROM_ext:
 12135                           	opt stack 0
 12136  00734C  FFFF               	dw	65535	; assembler added errata NOP
 12137                           
 12138                           ;incstack = 0
 12139                           ;writeEEPROM_ext@adress stored from wreg
 12140  00734E  0100               	movlb	0	; () banked
 12141  007350  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 12142                           
 12143                           ;eeprom.h: 15: I2C_Start();
 12144  007352  EC68  F036         	call	_I2C_Start	;wreg free
 12145                           
 12146                           ;eeprom.h: 16: I2C_Write(0xA0);
 12147  007356  0E00               	movlw	0
 12148  007358  0100               	movlb	0	; () banked
 12149  00735A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12150  00735C  0EA0               	movlw	160
 12151  00735E  6F8A               	movwf	I2C_Write@d& (0+255),b
 12152  007360  EC81  F036         	call	_I2C_Write	;wreg free
 12153                           
 12154                           ;eeprom.h: 18: I2C_Write(adress);
 12155  007364  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 12156  007368  0100               	movlb	0	; () banked
 12157  00736A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12158  00736C  EC81  F036         	call	_I2C_Write	;wreg free
 12159                           
 12160                           ;eeprom.h: 19: I2C_Write(data);
 12161  007370  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 12162  007374  0100               	movlb	0	; () banked
 12163  007376  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12164  007378  EC81  F036         	call	_I2C_Write	;wreg free
 12165                           
 12166                           ;eeprom.h: 20: I2C_Stop();
 12167  00737C  EC6E  F036         	call	_I2C_Stop	;wreg free
 12168                           
 12169                           ;eeprom.h: 21: delay(15);
 12170  007380  0E00               	movlw	0
 12171  007382  0100               	movlb	0	; () banked
 12172  007384  6F81               	movwf	(delay@x+1)& (0+255),b
 12173  007386  0E0F               	movlw	15
 12174  007388  6F80               	movwf	delay@x& (0+255),b
 12175  00738A  ECC7  F037         	call	_delay	;wreg free
 12176  00738E  0012               	return		;funcret
 12177  007390  FFFF               	dw	65535	; errata NOP
 12178  007392                     __end_of_writeEEPROM_ext:
 12179                           	opt stack 0
 12180                           tblptru	equ	0xFF8
 12181                           tblptrh	equ	0xFF7
 12182                           tblptrl	equ	0xFF6
 12183                           tablat	equ	0xFF5
 12184                           prodh	equ	0xFF4
 12185                           prodl	equ	0xFF3
 12186                           intcon	equ	0xFF2
 12187                           postinc0	equ	0xFEE
 12188                           wreg	equ	0xFE8
 12189                           postdec1	equ	0xFE5
 12190                           fsr1l	equ	0xFE1
 12191                           indf2	equ	0xFDF
 12192                           postinc2	equ	0xFDE
 12193                           fsr2h	equ	0xFDA
 12194                           fsr2l	equ	0xFD9
 12195                           status	equ	0xFD8
 12196                           
 12197 ;; *************** function _readEEPROM_ext *****************
 12198 ;; Defined at:
 12199 ;;		line 26 in file "eeprom.h"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;  adress          1    wreg     unsigned char 
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;  adress          1   12[BANK0 ] unsigned char 
 12204 ;;  data            1   13[BANK0 ] unsigned char 
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  1    wreg      unsigned char 
 12207 ;; Registers used:
 12208 ;;		wreg, status,2, status,0, cstack
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12214 ;;      Params:         0       0       0       0       0       0       0
 12215 ;;      Locals:         0       2       0       0       0       0       0
 12216 ;;      Temps:          0       0       0       0       0       0       0
 12217 ;;      Totals:         0       2       0       0       0       0       0
 12218 ;;Total ram usage:        2 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    8
 12221 ;; This function calls:
 12222 ;;		_I2C_Read
 12223 ;;		_I2C_Restart
 12224 ;;		_I2C_Start
 12225 ;;		_I2C_Stop
 12226 ;;		_I2C_Write
 12227 ;; This function is called by:
 12228 ;;		_readEEPROM16_ext
 12229 ;;		_salvarLOG
 12230 ;;		_acaoTesteBombas
 12231 ;;		_lerParametros
 12232 ;;		_dataLoger
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           	psect	text33
 12237  0074C2                     __ptext33:
 12238                           	opt stack 0
 12239  0074C2                     _readEEPROM_ext:
 12240                           	opt stack 0
 12241  0074C2  FFFF               	dw	65535	; assembler added errata NOP
 12242                           
 12243                           ;incstack = 0
 12244                           ;readEEPROM_ext@adress stored from wreg
 12245  0074C4  0100               	movlb	0	; () banked
 12246  0074C6  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 12247                           
 12248                           ;eeprom.h: 27: I2C_Start();
 12249  0074C8  EC68  F036         	call	_I2C_Start	;wreg free
 12250                           
 12251                           ;eeprom.h: 28: I2C_Write(0xA0);
 12252  0074CC  0E00               	movlw	0
 12253  0074CE  0100               	movlb	0	; () banked
 12254  0074D0  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12255  0074D2  0EA0               	movlw	160
 12256  0074D4  6F8A               	movwf	I2C_Write@d& (0+255),b
 12257  0074D6  EC81  F036         	call	_I2C_Write	;wreg free
 12258                           
 12259                           ;eeprom.h: 30: I2C_Write(adress);
 12260  0074DA  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 12261  0074DE  0100               	movlb	0	; () banked
 12262  0074E0  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12263  0074E2  EC81  F036         	call	_I2C_Write	;wreg free
 12264                           
 12265                           ;eeprom.h: 31: I2C_Restart();
 12266  0074E6  EC74  F036         	call	_I2C_Restart	;wreg free
 12267                           
 12268                           ;eeprom.h: 32: I2C_Write(0xA1);
 12269  0074EA  0E00               	movlw	0
 12270  0074EC  0100               	movlb	0	; () banked
 12271  0074EE  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12272  0074F0  0EA1               	movlw	161
 12273  0074F2  6F8A               	movwf	I2C_Write@d& (0+255),b
 12274  0074F4  EC81  F036         	call	_I2C_Write	;wreg free
 12275                           
 12276                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 12277  0074F8  0E00               	movlw	0
 12278  0074FA  0100               	movlb	0	; () banked
 12279  0074FC  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 12280  0074FE  0E00               	movlw	0
 12281  007500  6F81               	movwf	I2C_Read@a& (0+255),b
 12282  007502  EC6D  F038         	call	_I2C_Read	;wreg free
 12283  007506  0100               	movlb	0	; () banked
 12284  007508  5181               	movf	?_I2C_Read& (0+255),w,b
 12285  00750A  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 12286                           
 12287                           ;eeprom.h: 34: I2C_Stop();
 12288  00750C  EC6E  F036         	call	_I2C_Stop	;wreg free
 12289                           
 12290                           ;eeprom.h: 35: return data;
 12291  007510  0100               	movlb	0	; () banked
 12292  007512  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 12293                           
 12294                           ; BSR set to: 0
 12295                           
 12296                           ; BSR set to: 0
 12297  007514  0012               	return		;funcret
 12298  007516  FFFF               	dw	65535	; errata NOP
 12299  007518                     __end_of_readEEPROM_ext:
 12300                           	opt stack 0
 12301                           tblptru	equ	0xFF8
 12302                           tblptrh	equ	0xFF7
 12303                           tblptrl	equ	0xFF6
 12304                           tablat	equ	0xFF5
 12305                           prodh	equ	0xFF4
 12306                           prodl	equ	0xFF3
 12307                           intcon	equ	0xFF2
 12308                           postinc0	equ	0xFEE
 12309                           wreg	equ	0xFE8
 12310                           postdec1	equ	0xFE5
 12311                           fsr1l	equ	0xFE1
 12312                           indf2	equ	0xFDF
 12313                           postinc2	equ	0xFDE
 12314                           fsr2h	equ	0xFDA
 12315                           fsr2l	equ	0xFD9
 12316                           status	equ	0xFD8
 12317                           
 12318 ;; *************** function _I2C_Restart *****************
 12319 ;; Defined at:
 12320 ;;		line 31 in file "I2C.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;		None
 12323 ;; Auto vars:     Size  Location     Type
 12324 ;;		None
 12325 ;; Return value:  Size  Location     Type
 12326 ;;                  1    wreg      void 
 12327 ;; Registers used:
 12328 ;;		wreg, status,2, status,0, cstack
 12329 ;; Tracked objects:
 12330 ;;		On entry : 0/0
 12331 ;;		On exit  : 0/0
 12332 ;;		Unchanged: 0/0
 12333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12334 ;;      Params:         0       0       0       0       0       0       0
 12335 ;;      Locals:         0       0       0       0       0       0       0
 12336 ;;      Temps:          0       0       0       0       0       0       0
 12337 ;;      Totals:         0       0       0       0       0       0       0
 12338 ;;Total ram usage:        0 bytes
 12339 ;; Hardware stack levels used:    1
 12340 ;; Hardware stack levels required when called:    7
 12341 ;; This function calls:
 12342 ;;		_I2C_Wait
 12343 ;; This function is called by:
 12344 ;;		_getDS1307TimeDate
 12345 ;;		_readEEPROM_ext
 12346 ;;		_getDS1307Time
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           	psect	text34
 12351  006CE8                     __ptext34:
 12352                           	opt stack 0
 12353  006CE8                     _I2C_Restart:
 12354                           	opt stack 0
 12355  006CE8  FFFF               	dw	65535	; assembler added errata NOP
 12356                           
 12357                           ;I2C.c: 32: I2C_Wait();
 12358                           
 12359                           ; BSR set to: 0
 12360                           ;incstack = 0
 12361  006CEA  ECB9  F036         	call	_I2C_Wait	;wreg free
 12362                           
 12363                           ;I2C.c: 33: RSEN = 1;
 12364  006CEE  82C5               	bsf	4037,1,c	;volatile
 12365  006CF0  0012               	return		;funcret
 12366  006CF2  FFFF               	dw	65535	; errata NOP
 12367  006CF4                     __end_of_I2C_Restart:
 12368                           	opt stack 0
 12369                           tblptru	equ	0xFF8
 12370                           tblptrh	equ	0xFF7
 12371                           tblptrl	equ	0xFF6
 12372                           tablat	equ	0xFF5
 12373                           prodh	equ	0xFF4
 12374                           prodl	equ	0xFF3
 12375                           intcon	equ	0xFF2
 12376                           postinc0	equ	0xFEE
 12377                           wreg	equ	0xFE8
 12378                           postdec1	equ	0xFE5
 12379                           fsr1l	equ	0xFE1
 12380                           indf2	equ	0xFDF
 12381                           postinc2	equ	0xFDE
 12382                           fsr2h	equ	0xFDA
 12383                           fsr2l	equ	0xFD9
 12384                           status	equ	0xFD8
 12385                           
 12386 ;; *************** function _I2C_Read *****************
 12387 ;; Defined at:
 12388 ;;		line 47 in file "I2C.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;  a               2    1[BANK0 ] unsigned short 
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;  temp            2    3[BANK0 ] unsigned short 
 12393 ;; Return value:  Size  Location     Type
 12394 ;;                  2    1[BANK0 ] unsigned short 
 12395 ;; Registers used:
 12396 ;;		wreg, status,2, status,0, cstack
 12397 ;; Tracked objects:
 12398 ;;		On entry : 0/0
 12399 ;;		On exit  : 0/0
 12400 ;;		Unchanged: 0/0
 12401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12402 ;;      Params:         0       2       0       0       0       0       0
 12403 ;;      Locals:         0       2       0       0       0       0       0
 12404 ;;      Temps:          0       0       0       0       0       0       0
 12405 ;;      Totals:         0       4       0       0       0       0       0
 12406 ;;Total ram usage:        4 bytes
 12407 ;; Hardware stack levels used:    1
 12408 ;; Hardware stack levels required when called:    7
 12409 ;; This function calls:
 12410 ;;		_I2C_Wait
 12411 ;; This function is called by:
 12412 ;;		_getDS1307TimeDate
 12413 ;;		_readEEPROM_ext
 12414 ;;		_getDS1307Time
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           	psect	text35
 12419  0070DA                     __ptext35:
 12420                           	opt stack 0
 12421  0070DA                     _I2C_Read:
 12422                           	opt stack 0
 12423  0070DA  FFFF               	dw	65535	; assembler added errata NOP
 12424                           
 12425                           ;I2C.c: 48: unsigned short temp;
 12426                           ;I2C.c: 49: I2C_Wait();
 12427                           
 12428                           ;incstack = 0
 12429  0070DC  ECB9  F036         	call	_I2C_Wait	;wreg free
 12430                           
 12431                           ;I2C.c: 50: RCEN = 1;
 12432  0070E0  86C5               	bsf	4037,3,c	;volatile
 12433                           
 12434                           ;I2C.c: 51: I2C_Wait();
 12435  0070E2  ECB9  F036         	call	_I2C_Wait	;wreg free
 12436                           
 12437                           ;I2C.c: 52: temp = SSPBUF;
 12438  0070E6  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 12439  0070EA  0100               	movlb	0	; () banked
 12440  0070EC  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 12441                           
 12442                           ;I2C.c: 53: I2C_Wait();
 12443  0070EE  ECB9  F036         	call	_I2C_Wait	;wreg free
 12444                           
 12445                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 12446  0070F2  0100               	movlb	0	; () banked
 12447  0070F4  5181               	movf	I2C_Read@a& (0+255),w,b
 12448  0070F6  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 12449  0070F8  A4D8               	btfss	status,2,c
 12450  0070FA  D002               	goto	u4760
 12451  0070FC  8AC5               	bsf	4037,5,c	;volatile
 12452  0070FE  D002               	goto	u4775
 12453  007100                     u4760:
 12454  007100  FFFF               	dw	65535	; assembler added errata NOP
 12455  007102  9AC5               	bcf	4037,5,c	;volatile
 12456  007104                     u4775:
 12457  007104  FFFF               	dw	65535	; assembler added errata NOP
 12458                           
 12459                           ;I2C.c: 55: ACKEN = 1;
 12460  007106  88C5               	bsf	4037,4,c	;volatile
 12461                           
 12462                           ;I2C.c: 56: return temp;
 12463  007108  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 12464  00710C  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 12465  007110  0012               	return		;funcret
 12466  007112  FFFF               	dw	65535	; errata NOP
 12467  007114                     __end_of_I2C_Read:
 12468                           	opt stack 0
 12469                           tblptru	equ	0xFF8
 12470                           tblptrh	equ	0xFF7
 12471                           tblptrl	equ	0xFF6
 12472                           tablat	equ	0xFF5
 12473                           prodh	equ	0xFF4
 12474                           prodl	equ	0xFF3
 12475                           intcon	equ	0xFF2
 12476                           postinc0	equ	0xFEE
 12477                           wreg	equ	0xFE8
 12478                           postdec1	equ	0xFE5
 12479                           fsr1l	equ	0xFE1
 12480                           indf2	equ	0xFDF
 12481                           postinc2	equ	0xFDE
 12482                           fsr2h	equ	0xFDA
 12483                           fsr2l	equ	0xFD9
 12484                           status	equ	0xFD8
 12485                           
 12486 ;; *************** function _intToFloatStr *****************
 12487 ;; Defined at:
 12488 ;;		line 48 in file "function.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;  valor           1    wreg     unsigned char 
 12491 ;; Auto vars:     Size  Location     Type
 12492 ;;  valor           1   63[BANK0 ] unsigned char 
 12493 ;;  conv            4   59[BANK0 ] unsigned char [4]
 12494 ;;  end             4   55[BANK0 ] unsigned char [4]
 12495 ;;  pr              2   64[BANK0 ] int 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;                  2   53[BANK0 ] PTR unsigned char 
 12498 ;; Registers used:
 12499 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12505 ;;      Params:         0       2       0       0       0       0       0
 12506 ;;      Locals:         0      11       0       0       0       0       0
 12507 ;;      Temps:          0       0       0       0       0       0       0
 12508 ;;      Totals:         0      13       0       0       0       0       0
 12509 ;;Total ram usage:       13 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    9
 12512 ;; This function calls:
 12513 ;;		___awdiv
 12514 ;;		___awmod
 12515 ;;		_sprintf
 12516 ;; This function is called by:
 12517 ;;		_acaoTesteBombas
 12518 ;;		_telaPrincipal
 12519 ;;		_ajusteSP_Bombas
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523                           	psect	text36
 12524  007A08                     __ptext36:
 12525                           	opt stack 0
 12526  007A08                     _intToFloatStr:
 12527                           	opt stack 0
 12528  007A08  FFFF               	dw	65535	; assembler added errata NOP
 12529                           
 12530                           ;incstack = 0
 12531                           ;intToFloatStr@valor stored from wreg
 12532  007A0A  0100               	movlb	0	; () banked
 12533  007A0C  6FBF               	movwf	intToFloatStr@valor& (0+255),b
 12534                           
 12535                           ;function.c: 49: int pr = valor >= 99 ? 99 : valor;
 12536  007A0E  0E63               	movlw	99
 12537  007A10  0100               	movlb	0	; () banked
 12538  007A12  61BF               	cpfslt	intToFloatStr@valor& (0+255),b
 12539  007A14  D004               	goto	l1018
 12540                           
 12541                           ; BSR set to: 0
 12542  007A16  C0BF  F0C0         	movff	intToFloatStr@valor,intToFloatStr@pr
 12543  007A1A  6BC1               	clrf	(intToFloatStr@pr+1)& (0+255),b
 12544  007A1C  D005               	goto	l1020
 12545  007A1E                     l1018:
 12546  007A1E  FFFF               	dw	65535	; assembler added errata NOP
 12547                           
 12548                           ; BSR set to: 0
 12549                           
 12550                           ; BSR set to: 0
 12551  007A20  0E00               	movlw	0
 12552  007A22  6FC1               	movwf	(intToFloatStr@pr+1)& (0+255),b
 12553  007A24  0E63               	movlw	99
 12554  007A26  6FC0               	movwf	intToFloatStr@pr& (0+255),b
 12555  007A28                     l1020:
 12556  007A28  FFFF               	dw	65535	; assembler added errata NOP
 12557                           
 12558                           ; BSR set to: 0
 12559                           ;function.c: 50: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 12560                           
 12561                           ; BSR set to: 0
 12562  007A2A  C1BC  F0BB         	movff	intToFloatStr@F2544,intToFloatStr@conv
 12563  007A2E  C1BD  F0BC         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 12564  007A32  C1BE  F0BD         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 12565  007A36  C1BF  F0BE         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;function.c: 51: conv[0] = (char) ((pr / 10) + 48);
 12569  007A3A  C0C0  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 12570  007A3E  C0C1  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 12571  007A42  0E00               	movlw	0
 12572  007A44  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 12573  007A46  0E0A               	movlw	10
 12574  007A48  6F82               	movwf	___awdiv@divisor& (0+255),b
 12575  007A4A  ECFB  F01E         	call	___awdiv	;wreg free
 12576  007A4E  0100               	movlb	0	; () banked
 12577  007A50  5180               	movf	?___awdiv& (0+255),w,b
 12578  007A52  0F30               	addlw	48
 12579  007A54  6FBB               	movwf	intToFloatStr@conv& (0+255),b
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;function.c: 52: conv[1] = (char) '.';
 12583  007A56  0E2E               	movlw	46
 12584  007A58  6FBC               	movwf	(intToFloatStr@conv+1)& (0+255),b
 12585                           
 12586                           ;function.c: 53: conv[2] = (char) ((pr % 10) + 48);
 12587  007A5A  C0C0  F080         	movff	intToFloatStr@pr,___awmod@dividend
 12588  007A5E  C0C1  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 12589  007A62  0E00               	movlw	0
 12590  007A64  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 12591  007A66  0E0A               	movlw	10
 12592  007A68  6F82               	movwf	___awmod@divisor& (0+255),b
 12593  007A6A  EC34  F03C         	call	___awmod	;wreg free
 12594  007A6E  0100               	movlb	0	; () banked
 12595  007A70  5180               	movf	?___awmod& (0+255),w,b
 12596  007A72  0F30               	addlw	48
 12597  007A74  6FBD               	movwf	(intToFloatStr@conv+2)& (0+255),b
 12598                           
 12599                           ; BSR set to: 0
 12600                           ;function.c: 54: conv[3] = '\0';
 12601  007A76  0E00               	movlw	0
 12602  007A78  6FBE               	movwf	(intToFloatStr@conv+3)& (0+255),b
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;function.c: 55: char end[4];
 12606                           ;function.c: 56: sprintf(end , conv);
 12607  007A7A  0EB7               	movlw	low intToFloatStr@end
 12608  007A7C  6FA1               	movwf	sprintf@wh& (0+255),b
 12609  007A7E  0E00               	movlw	high intToFloatStr@end
 12610  007A80  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12611  007A82  0EBB               	movlw	low intToFloatStr@conv
 12612  007A84  6FA3               	movwf	sprintf@f& (0+255),b
 12613  007A86  0E00               	movlw	high intToFloatStr@conv
 12614  007A88  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12615  007A8A  ECC9  F039         	call	_sprintf	;wreg free
 12616                           
 12617                           ;function.c: 57: return end;
 12618  007A8E  0EB7               	movlw	low intToFloatStr@end
 12619  007A90  0100               	movlb	0	; () banked
 12620  007A92  6FB5               	movwf	?_intToFloatStr& (0+255),b
 12621  007A94  0E00               	movlw	high intToFloatStr@end
 12622  007A96  6FB6               	movwf	(?_intToFloatStr+1)& (0+255),b
 12623                           
 12624                           ; BSR set to: 0
 12625                           
 12626                           ; BSR set to: 0
 12627  007A98  0012               	return		;funcret
 12628  007A9A  FFFF               	dw	65535	; errata NOP
 12629  007A9C                     __end_of_intToFloatStr:
 12630                           	opt stack 0
 12631                           tblptru	equ	0xFF8
 12632                           tblptrh	equ	0xFF7
 12633                           tblptrl	equ	0xFF6
 12634                           tablat	equ	0xFF5
 12635                           prodh	equ	0xFF4
 12636                           prodl	equ	0xFF3
 12637                           intcon	equ	0xFF2
 12638                           postinc0	equ	0xFEE
 12639                           wreg	equ	0xFE8
 12640                           postdec1	equ	0xFE5
 12641                           fsr1l	equ	0xFE1
 12642                           indf2	equ	0xFDF
 12643                           postinc2	equ	0xFDE
 12644                           fsr2h	equ	0xFDA
 12645                           fsr2l	equ	0xFD9
 12646                           status	equ	0xFD8
 12647                           
 12648 ;; *************** function ___awmod *****************
 12649 ;; Defined at:
 12650 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;  dividend        2    0[BANK0 ] int 
 12653 ;;  divisor         2    2[BANK0 ] int 
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;  sign            1    5[BANK0 ] unsigned char 
 12656 ;;  counter         1    4[BANK0 ] unsigned char 
 12657 ;; Return value:  Size  Location     Type
 12658 ;;                  2    0[BANK0 ] int 
 12659 ;; Registers used:
 12660 ;;		wreg, status,2, status,0
 12661 ;; Tracked objects:
 12662 ;;		On entry : 0/0
 12663 ;;		On exit  : 0/0
 12664 ;;		Unchanged: 0/0
 12665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12666 ;;      Params:         0       4       0       0       0       0       0
 12667 ;;      Locals:         0       2       0       0       0       0       0
 12668 ;;      Temps:          0       0       0       0       0       0       0
 12669 ;;      Totals:         0       6       0       0       0       0       0
 12670 ;;Total ram usage:        6 bytes
 12671 ;; Hardware stack levels used:    1
 12672 ;; Hardware stack levels required when called:    6
 12673 ;; This function calls:
 12674 ;;		Nothing
 12675 ;; This function is called by:
 12676 ;;		_DECtoBCD
 12677 ;;		_intToFloatStr
 12678 ;;		_DECtoHEX
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           	psect	text37
 12683  007868                     __ptext37:
 12684                           	opt stack 0
 12685  007868                     ___awmod:
 12686                           	opt stack 0
 12687  007868  FFFF               	dw	65535	; assembler added errata NOP
 12688                           
 12689                           ; BSR set to: 0
 12690                           ;incstack = 0
 12691  00786A  0E00               	movlw	0
 12692  00786C  0100               	movlb	0	; () banked
 12693  00786E  6F85               	movwf	___awmod@sign& (0+255),b
 12694                           
 12695                           ; BSR set to: 0
 12696  007870  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 12697  007872  D006               	goto	l1302
 12698                           
 12699                           ; BSR set to: 0
 12700  007874  6D80               	negf	___awmod@dividend& (0+255),b
 12701  007876  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12702  007878  B0D8               	btfsc	status,0,c
 12703  00787A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12704                           
 12705                           ; BSR set to: 0
 12706  00787C  0E01               	movlw	1
 12707  00787E  6F85               	movwf	___awmod@sign& (0+255),b
 12708  007880                     l1302:
 12709  007880  FFFF               	dw	65535	; assembler added errata NOP
 12710                           
 12711                           ; BSR set to: 0
 12712                           
 12713                           ; BSR set to: 0
 12714  007882  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12715  007884  D004               	goto	l1303
 12716                           
 12717                           ; BSR set to: 0
 12718  007886  6D82               	negf	___awmod@divisor& (0+255),b
 12719  007888  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12720  00788A  B0D8               	btfsc	status,0,c
 12721  00788C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12722  00788E                     l1303:
 12723  00788E  FFFF               	dw	65535	; assembler added errata NOP
 12724                           
 12725                           ; BSR set to: 0
 12726                           
 12727                           ; BSR set to: 0
 12728  007890  5182               	movf	___awmod@divisor& (0+255),w,b
 12729  007892  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12730  007894  B4D8               	btfsc	status,2,c
 12731  007896  D01C               	goto	l1310
 12732                           
 12733                           ; BSR set to: 0
 12734  007898  0E01               	movlw	1
 12735  00789A  6F84               	movwf	___awmod@counter& (0+255),b
 12736  00789C  D005               	goto	l1305
 12737  00789E  FFFF               	dw	65535	; assembler added errata NOP
 12738                           
 12739                           ; BSR set to: 0
 12740                           
 12741                           ; BSR set to: 0
 12742  0078A0  90D8               	bcf	status,0,c
 12743  0078A2  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12744  0078A4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12745  0078A6  2B84               	incf	___awmod@counter& (0+255),f,b
 12746  0078A8                     l1305:
 12747  0078A8  FFFF               	dw	65535	; assembler added errata NOP
 12748                           
 12749                           ; BSR set to: 0
 12750                           
 12751                           ; BSR set to: 0
 12752  0078AA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12753  0078AC  D7F8               	goto	l1306
 12754  0078AE                     u5400:
 12755  0078AE  FFFF               	dw	65535	; assembler added errata NOP
 12756                           
 12757                           ; BSR set to: 0
 12758                           
 12759                           ; BSR set to: 0
 12760                           
 12761                           ; BSR set to: 0
 12762  0078B0  5182               	movf	___awmod@divisor& (0+255),w,b
 12763  0078B2  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12764  0078B4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12765  0078B6  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12766  0078B8  A0D8               	btfss	status,0,c
 12767  0078BA  D004               	goto	l1309
 12768                           
 12769                           ; BSR set to: 0
 12770  0078BC  5182               	movf	___awmod@divisor& (0+255),w,b
 12771  0078BE  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12772  0078C0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12773  0078C2  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12774  0078C4                     l1309:
 12775  0078C4  FFFF               	dw	65535	; assembler added errata NOP
 12776                           
 12777                           ; BSR set to: 0
 12778                           
 12779                           ; BSR set to: 0
 12780  0078C6  90D8               	bcf	status,0,c
 12781  0078C8  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12782  0078CA  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12783                           
 12784                           ; BSR set to: 0
 12785  0078CC  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12786  0078CE  D7EF               	goto	u5400
 12787  0078D0                     l1310:
 12788  0078D0  FFFF               	dw	65535	; assembler added errata NOP
 12789                           
 12790                           ; BSR set to: 0
 12791                           
 12792                           ; BSR set to: 0
 12793                           
 12794                           ; BSR set to: 0
 12795  0078D2  5185               	movf	___awmod@sign& (0+255),w,b
 12796  0078D4  B4D8               	btfsc	status,2,c
 12797  0078D6  D004               	goto	l1311
 12798                           
 12799                           ; BSR set to: 0
 12800  0078D8  6D80               	negf	___awmod@dividend& (0+255),b
 12801  0078DA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12802  0078DC  B0D8               	btfsc	status,0,c
 12803  0078DE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12804  0078E0                     l1311:
 12805  0078E0  FFFF               	dw	65535	; assembler added errata NOP
 12806                           
 12807                           ; BSR set to: 0
 12808                           
 12809                           ; BSR set to: 0
 12810  0078E2  C080  F080         	movff	___awmod@dividend,?___awmod
 12811  0078E6  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12812                           
 12813                           ; BSR set to: 0
 12814                           
 12815                           ; BSR set to: 0
 12816  0078EA  0012               	return		;funcret
 12817  0078EC  FFFF               	dw	65535	; errata NOP
 12818  0078EE                     __end_of___awmod:
 12819                           	opt stack 0
 12820                           tblptru	equ	0xFF8
 12821                           tblptrh	equ	0xFF7
 12822                           tblptrl	equ	0xFF6
 12823                           tablat	equ	0xFF5
 12824                           prodh	equ	0xFF4
 12825                           prodl	equ	0xFF3
 12826                           intcon	equ	0xFF2
 12827                           postinc0	equ	0xFEE
 12828                           wreg	equ	0xFE8
 12829                           postdec1	equ	0xFE5
 12830                           fsr1l	equ	0xFE1
 12831                           indf2	equ	0xFDF
 12832                           postinc2	equ	0xFDE
 12833                           fsr2h	equ	0xFDA
 12834                           fsr2l	equ	0xFD9
 12835                           status	equ	0xFD8
 12836                           
 12837 ;; *************** function ___awdiv *****************
 12838 ;; Defined at:
 12839 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12840 ;; Parameters:    Size  Location     Type
 12841 ;;  dividend        2    0[BANK0 ] int 
 12842 ;;  divisor         2    2[BANK0 ] int 
 12843 ;; Auto vars:     Size  Location     Type
 12844 ;;  quotient        2    6[BANK0 ] int 
 12845 ;;  sign            1    5[BANK0 ] unsigned char 
 12846 ;;  counter         1    4[BANK0 ] unsigned char 
 12847 ;; Return value:  Size  Location     Type
 12848 ;;                  2    0[BANK0 ] int 
 12849 ;; Registers used:
 12850 ;;		wreg, status,2, status,0
 12851 ;; Tracked objects:
 12852 ;;		On entry : 0/0
 12853 ;;		On exit  : 0/0
 12854 ;;		Unchanged: 0/0
 12855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12856 ;;      Params:         0       4       0       0       0       0       0
 12857 ;;      Locals:         0       4       0       0       0       0       0
 12858 ;;      Temps:          0       0       0       0       0       0       0
 12859 ;;      Totals:         0       8       0       0       0       0       0
 12860 ;;Total ram usage:        8 bytes
 12861 ;; Hardware stack levels used:    1
 12862 ;; Hardware stack levels required when called:    6
 12863 ;; This function calls:
 12864 ;;		Nothing
 12865 ;; This function is called by:
 12866 ;;		_dataLoger
 12867 ;;		_DECtoBCD
 12868 ;;		_intToFloatStr
 12869 ;;		_DECtoHEX
 12870 ;; This function uses a non-reentrant model
 12871 ;;
 12872                           
 12873                           	psect	text38
 12874  003DF6                     __ptext38:
 12875                           	opt stack 0
 12876  003DF6                     ___awdiv:
 12877                           	opt stack 0
 12878  003DF6  FFFF               	dw	65535	; assembler added errata NOP
 12879                           
 12880                           ; BSR set to: 0
 12881                           ;incstack = 0
 12882  003DF8  0E00               	movlw	0
 12883  003DFA  0100               	movlb	0	; () banked
 12884  003DFC  6F85               	movwf	___awdiv@sign& (0+255),b
 12885                           
 12886                           ; BSR set to: 0
 12887  003DFE  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12888  003E00  D006               	goto	l1289
 12889                           
 12890                           ; BSR set to: 0
 12891  003E02  6D82               	negf	___awdiv@divisor& (0+255),b
 12892  003E04  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12893  003E06  B0D8               	btfsc	status,0,c
 12894  003E08  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12895                           
 12896                           ; BSR set to: 0
 12897  003E0A  0E01               	movlw	1
 12898  003E0C  6F85               	movwf	___awdiv@sign& (0+255),b
 12899  003E0E                     l1289:
 12900  003E0E  FFFF               	dw	65535	; assembler added errata NOP
 12901                           
 12902                           ; BSR set to: 0
 12903                           
 12904                           ; BSR set to: 0
 12905  003E10  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12906  003E12  D006               	goto	l1290
 12907                           
 12908                           ; BSR set to: 0
 12909  003E14  6D80               	negf	___awdiv@dividend& (0+255),b
 12910  003E16  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12911  003E18  B0D8               	btfsc	status,0,c
 12912  003E1A  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12913                           
 12914                           ; BSR set to: 0
 12915  003E1C  0E01               	movlw	1
 12916  003E1E  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 12917  003E20                     l1290:
 12918  003E20  FFFF               	dw	65535	; assembler added errata NOP
 12919                           
 12920                           ; BSR set to: 0
 12921                           
 12922                           ; BSR set to: 0
 12923  003E22  0E00               	movlw	0
 12924  003E24  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 12925  003E26  0E00               	movlw	0
 12926  003E28  6F86               	movwf	___awdiv@quotient& (0+255),b
 12927                           
 12928                           ; BSR set to: 0
 12929  003E2A  5182               	movf	___awdiv@divisor& (0+255),w,b
 12930  003E2C  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12931  003E2E  B4D8               	btfsc	status,2,c
 12932  003E30  D020               	goto	l1297
 12933                           
 12934                           ; BSR set to: 0
 12935  003E32  0E01               	movlw	1
 12936  003E34  6F84               	movwf	___awdiv@counter& (0+255),b
 12937  003E36  D005               	goto	l1292
 12938  003E38  FFFF               	dw	65535	; assembler added errata NOP
 12939                           
 12940                           ; BSR set to: 0
 12941                           
 12942                           ; BSR set to: 0
 12943  003E3A  90D8               	bcf	status,0,c
 12944  003E3C  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 12945  003E3E  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12946  003E40  2B84               	incf	___awdiv@counter& (0+255),f,b
 12947  003E42                     l1292:
 12948  003E42  FFFF               	dw	65535	; assembler added errata NOP
 12949                           
 12950                           ; BSR set to: 0
 12951                           
 12952                           ; BSR set to: 0
 12953  003E44  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12954  003E46  D7F8               	goto	l1293
 12955  003E48                     u5340:
 12956  003E48  FFFF               	dw	65535	; assembler added errata NOP
 12957                           
 12958                           ; BSR set to: 0
 12959                           
 12960                           ; BSR set to: 0
 12961                           
 12962                           ; BSR set to: 0
 12963  003E4A  90D8               	bcf	status,0,c
 12964  003E4C  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 12965  003E4E  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12966                           
 12967                           ; BSR set to: 0
 12968  003E50  5182               	movf	___awdiv@divisor& (0+255),w,b
 12969  003E52  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 12970  003E54  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12971  003E56  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12972  003E58  A0D8               	btfss	status,0,c
 12973  003E5A  D005               	goto	l1296
 12974                           
 12975                           ; BSR set to: 0
 12976  003E5C  5182               	movf	___awdiv@divisor& (0+255),w,b
 12977  003E5E  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 12978  003E60  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12979  003E62  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12980                           
 12981                           ; BSR set to: 0
 12982  003E64  8186               	bsf	___awdiv@quotient& (0+255),0,b
 12983  003E66                     l1296:
 12984  003E66  FFFF               	dw	65535	; assembler added errata NOP
 12985                           
 12986                           ; BSR set to: 0
 12987                           
 12988                           ; BSR set to: 0
 12989  003E68  90D8               	bcf	status,0,c
 12990  003E6A  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12991  003E6C  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 12992                           
 12993                           ; BSR set to: 0
 12994  003E6E  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 12995  003E70  D7EB               	goto	u5340
 12996  003E72                     l1297:
 12997  003E72  FFFF               	dw	65535	; assembler added errata NOP
 12998                           
 12999                           ; BSR set to: 0
 13000                           
 13001                           ; BSR set to: 0
 13002                           
 13003                           ; BSR set to: 0
 13004  003E74  5185               	movf	___awdiv@sign& (0+255),w,b
 13005  003E76  B4D8               	btfsc	status,2,c
 13006  003E78  D004               	goto	l1298
 13007                           
 13008                           ; BSR set to: 0
 13009  003E7A  6D86               	negf	___awdiv@quotient& (0+255),b
 13010  003E7C  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 13011  003E7E  B0D8               	btfsc	status,0,c
 13012  003E80  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 13013  003E82                     l1298:
 13014  003E82  FFFF               	dw	65535	; assembler added errata NOP
 13015                           
 13016                           ; BSR set to: 0
 13017                           
 13018                           ; BSR set to: 0
 13019  003E84  C086  F080         	movff	___awdiv@quotient,?___awdiv
 13020  003E88  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 13021                           
 13022                           ; BSR set to: 0
 13023                           
 13024                           ; BSR set to: 0
 13025  003E8C  0012               	return		;funcret
 13026  003E8E  FFFF               	dw	65535	; errata NOP
 13027  003E90                     __end_of___awdiv:
 13028                           	opt stack 0
 13029                           tblptru	equ	0xFF8
 13030                           tblptrh	equ	0xFF7
 13031                           tblptrl	equ	0xFF6
 13032                           tablat	equ	0xFF5
 13033                           prodh	equ	0xFF4
 13034                           prodl	equ	0xFF3
 13035                           intcon	equ	0xFF2
 13036                           postinc0	equ	0xFEE
 13037                           wreg	equ	0xFE8
 13038                           postdec1	equ	0xFE5
 13039                           fsr1l	equ	0xFE1
 13040                           indf2	equ	0xFDF
 13041                           postinc2	equ	0xFDE
 13042                           fsr2h	equ	0xFDA
 13043                           fsr2l	equ	0xFD9
 13044                           status	equ	0xFD8
 13045                           
 13046 ;; *************** function _drenarPressao *****************
 13047 ;; Defined at:
 13048 ;;		line 126 in file "controle.h"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;		None
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;		None
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      void 
 13055 ;; Registers used:
 13056 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13062 ;;      Params:         0       0       0       0       0       0       0
 13063 ;;      Locals:         0       0       0       0       0       0       0
 13064 ;;      Temps:          0       0       0       0       0       0       0
 13065 ;;      Totals:         0       0       0       0       0       0       0
 13066 ;;Total ram usage:        0 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    9
 13069 ;; This function calls:
 13070 ;;		_sprintf
 13071 ;; This function is called by:
 13072 ;;		_acaoTesteBombas
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           	psect	text39
 13077  006F24                     __ptext39:
 13078                           	opt stack 0
 13079  006F24                     _drenarPressao:
 13080                           	opt stack 0
 13081  006F24  FFFF               	dw	65535	; assembler added errata NOP
 13082                           
 13083                           ;controle.h: 127: sprintf(line4, "Despressurizando...");
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;incstack = 0
 13087  006F26  0E3C               	movlw	low _line4
 13088  006F28  0100               	movlb	0	; () banked
 13089  006F2A  6FA1               	movwf	sprintf@wh& (0+255),b
 13090  006F2C  0E01               	movlw	high _line4
 13091  006F2E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13092  006F30  0E74               	movlw	low STR_37
 13093  006F32  6FA3               	movwf	sprintf@f& (0+255),b
 13094  006F34  0E7C               	movlw	high STR_37
 13095  006F36  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13096  006F38  ECC9  F039         	call	_sprintf	;wreg free
 13097                           
 13098                           ;controle.h: 128: if (!timerTesteBombas) {
 13099  006F3C  0100               	movlb	0	; () banked
 13100  006F3E  51D9               	movf	_timerTesteBombas& (0+255),w,b
 13101  006F40  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13102  006F42  A4D8               	btfss	status,2,c
 13103  006F44  D006               	goto	l510
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;controle.h: 129: executandoTeste = 0;
 13107  006F46  0E00               	movlw	0
 13108  006F48  6FF1               	movwf	_executandoTeste& (0+255),b
 13109                           
 13110                           ;controle.h: 130: codigoErro = 3;
 13111  006F4A  0E03               	movlw	3
 13112  006F4C  6FF3               	movwf	_codigoErro& (0+255),b
 13113                           
 13114                           ;controle.h: 131: menu_posi = 0;
 13115  006F4E  0E00               	movlw	0
 13116  006F50  6FDE               	movwf	_menu_posi& (0+255),b
 13117  006F52                     l510:
 13118  006F52  FFFF               	dw	65535	; assembler added errata NOP
 13119                           
 13120                           ; BSR set to: 0
 13121                           
 13122                           ; BSR set to: 0
 13123  006F54  0012               	return		;funcret
 13124  006F56  FFFF               	dw	65535	; errata NOP
 13125  006F58                     __end_of_drenarPressao:
 13126                           	opt stack 0
 13127                           tblptru	equ	0xFF8
 13128                           tblptrh	equ	0xFF7
 13129                           tblptrl	equ	0xFF6
 13130                           tablat	equ	0xFF5
 13131                           prodh	equ	0xFF4
 13132                           prodl	equ	0xFF3
 13133                           intcon	equ	0xFF2
 13134                           postinc0	equ	0xFEE
 13135                           wreg	equ	0xFE8
 13136                           postdec1	equ	0xFE5
 13137                           fsr1l	equ	0xFE1
 13138                           indf2	equ	0xFDF
 13139                           postinc2	equ	0xFDE
 13140                           fsr2h	equ	0xFDA
 13141                           fsr2l	equ	0xFD9
 13142                           status	equ	0xFD8
 13143                           
 13144 ;; *************** function _sprintf *****************
 13145 ;; Defined at:
 13146 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 13147 ;; Parameters:    Size  Location     Type
 13148 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 13149 ;;		 -> intToFloatStr@end(4), line3(21), line2(21), line1(21), 
 13150 ;;		 -> line4(21), bufferAUX(20), 
 13151 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 13152 ;;		 -> intToFloatStr@conv(4), STR_122(15), STR_121(12), STR_120(10), 
 13153 ;;		 -> STR_119(18), STR_118(10), STR_117(18), STR_116(16), 
 13154 ;;		 -> STR_115(10), STR_113(3), STR_112(14), STR_111(20), 
 13155 ;;		 -> STR_110(8), STR_109(10), STR_108(11), STR_107(9), 
 13156 ;;		 -> STR_106(3), STR_105(15), STR_104(15), STR_103(11), 
 13157 ;;		 -> STR_102(11), STR_101(19), STR_100(5), STR_99(12), 
 13158 ;;		 -> STR_98(5), STR_97(14), STR_96(19), STR_93(3), 
 13159 ;;		 -> STR_92(7), STR_91(7), STR_89(12), STR_88(17), 
 13160 ;;		 -> STR_87(20), STR_86(8), STR_83(14), STR_80(14), 
 13161 ;;		 -> STR_79(11), STR_76(10), STR_75(31), STR_72(11), 
 13162 ;;		 -> STR_71(20), STR_70(20), STR_69(21), STR_68(15), 
 13163 ;;		 -> STR_67(6), STR_66(15), STR_65(6), STR_64(20), 
 13164 ;;		 -> STR_63(15), STR_62(19), STR_61(20), STR_60(21), 
 13165 ;;		 -> STR_59(21), STR_58(18), STR_57(20), STR_56(17), 
 13166 ;;		 -> STR_55(26), STR_54(16), STR_51(15), STR_48(15), 
 13167 ;;		 -> STR_45(11), STR_44(17), STR_43(16), STR_42(19), 
 13168 ;;		 -> STR_41(19), STR_40(16), STR_39(15), STR_38(15), 
 13169 ;;		 -> STR_37(20), STR_2(5), STR_1(5), 
 13170 ;; Auto vars:     Size  Location     Type
 13171 ;;  pb              4   49[BANK0 ] struct __prbuf
 13172 ;;  ap              2   47[BANK0 ] PTR void [1]
 13173 ;;		 -> ?_sprintf(2), ?_printf(2), 
 13174 ;; Return value:  Size  Location     Type
 13175 ;;                  2   33[BANK0 ] int 
 13176 ;; Registers used:
 13177 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13178 ;; Tracked objects:
 13179 ;;		On entry : 0/0
 13180 ;;		On exit  : 0/0
 13181 ;;		Unchanged: 0/0
 13182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13183 ;;      Params:         0      14       0       0       0       0       0
 13184 ;;      Locals:         0       6       0       0       0       0       0
 13185 ;;      Temps:          0       0       0       0       0       0       0
 13186 ;;      Totals:         0      20       0       0       0       0       0
 13187 ;;Total ram usage:       20 bytes
 13188 ;; Hardware stack levels used:    1
 13189 ;; Hardware stack levels required when called:    8
 13190 ;; This function calls:
 13191 ;;		__doprnt
 13192 ;; This function is called by:
 13193 ;;		_getSerial
 13194 ;;		_drenarPressao
 13195 ;;		_acaoTesteBombas
 13196 ;;		_telaPrincipal
 13197 ;;		_tela_ajusteRTC
 13198 ;;		_tela_testeBombas
 13199 ;;		_dataLoger
 13200 ;;		_informacoes
 13201 ;;		_configuraTelefones
 13202 ;;		_configurarEstacionaria
 13203 ;;		_ajusteSP_Bombas
 13204 ;;		_main
 13205 ;;		_intToFloatStr
 13206 ;;		_telaTeste
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           	psect	text40
 13211  007392                     __ptext40:
 13212                           	opt stack 0
 13213  007392                     _sprintf:
 13214                           	opt stack 0
 13215  007392  FFFF               	dw	65535	; assembler added errata NOP
 13216                           
 13217                           ; BSR set to: 0
 13218                           ;incstack = 0
 13219  007394  C0A1  F0B1         	movff	sprintf@wh,sprintf@pb
 13220  007398  C0A2  F0B2         	movff	sprintf@wh+1,sprintf@pb+1
 13221  00739C  0E00               	movlw	0
 13222  00739E  0100               	movlb	0	; () banked
 13223  0073A0  6FB3               	movwf	(sprintf@pb+2)& (0+255),b
 13224  0073A2  0E00               	movlw	0
 13225  0073A4  6FB4               	movwf	(sprintf@pb+3)& (0+255),b
 13226  0073A6  0EA5               	movlw	low (?_sprintf+4)
 13227  0073A8  6FAF               	movwf	sprintf@ap& (0+255),b
 13228  0073AA  0E00               	movlw	high (?_sprintf+4)
 13229  0073AC  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
 13230                           
 13231                           ; BSR set to: 0
 13232  0073AE  0EB1               	movlw	low sprintf@pb
 13233  0073B0  6F8C               	movwf	__doprnt@pb& (0+255),b
 13234  0073B2  0E00               	movlw	high sprintf@pb
 13235  0073B4  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 13236  0073B6  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 13237  0073BA  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 13238  0073BE  0EAF               	movlw	low sprintf@ap
 13239  0073C0  6F90               	movwf	__doprnt@ap& (0+255),b
 13240  0073C2  0E00               	movlw	high sprintf@ap
 13241  0073C4  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 13242  0073C6  EC8E  F000         	call	__doprnt	;wreg free
 13243  0073CA  C0B1  FFD9         	movff	sprintf@pb,fsr2l
 13244  0073CE  C0B2  FFDA         	movff	sprintf@pb+1,fsr2h
 13245  0073D2  0E00               	movlw	0
 13246  0073D4  6EDF               	movwf	indf2,c
 13247                           
 13248                           ;	Return value of _sprintf is never used
 13249  0073D6  0012               	return		;funcret
 13250  0073D8  FFFF               	dw	65535	; errata NOP
 13251  0073DA                     __end_of_sprintf:
 13252                           	opt stack 0
 13253                           tblptru	equ	0xFF8
 13254                           tblptrh	equ	0xFF7
 13255                           tblptrl	equ	0xFF6
 13256                           tablat	equ	0xFF5
 13257                           prodh	equ	0xFF4
 13258                           prodl	equ	0xFF3
 13259                           intcon	equ	0xFF2
 13260                           postinc0	equ	0xFEE
 13261                           wreg	equ	0xFE8
 13262                           postdec1	equ	0xFE5
 13263                           fsr1l	equ	0xFE1
 13264                           indf2	equ	0xFDF
 13265                           postinc2	equ	0xFDE
 13266                           fsr2h	equ	0xFDA
 13267                           fsr2l	equ	0xFD9
 13268                           status	equ	0xFD8
 13269                           
 13270 ;; *************** function _clearShiftREG *****************
 13271 ;; Defined at:
 13272 ;;		line 30 in file "shift595.h"
 13273 ;; Parameters:    Size  Location     Type
 13274 ;;		None
 13275 ;; Auto vars:     Size  Location     Type
 13276 ;;  i               1    0[BANK0 ] unsigned char 
 13277 ;; Return value:  Size  Location     Type
 13278 ;;                  1    wreg      void 
 13279 ;; Registers used:
 13280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13281 ;; Tracked objects:
 13282 ;;		On entry : 0/0
 13283 ;;		On exit  : 0/0
 13284 ;;		Unchanged: 0/0
 13285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13286 ;;      Params:         0       0       0       0       0       0       0
 13287 ;;      Locals:         0       1       0       0       0       0       0
 13288 ;;      Temps:          0       0       0       0       0       0       0
 13289 ;;      Totals:         0       1       0       0       0       0       0
 13290 ;;Total ram usage:        1 bytes
 13291 ;; Hardware stack levels used:    1
 13292 ;; Hardware stack levels required when called:    6
 13293 ;; This function calls:
 13294 ;;		Nothing
 13295 ;; This function is called by:
 13296 ;;		_acaoTesteBombas
 13297 ;;		_resetParametros
 13298 ;;		_telaPrincipal
 13299 ;; This function uses a non-reentrant model
 13300 ;;
 13301                           
 13302                           	psect	text41
 13303  006FFA                     __ptext41:
 13304                           	opt stack 0
 13305  006FFA                     _clearShiftREG:
 13306                           	opt stack 0
 13307  006FFA  FFFF               	dw	65535	; assembler added errata NOP
 13308                           
 13309                           ;shift595.h: 31: char i = 0;
 13310                           
 13311                           ;incstack = 0
 13312  006FFC  0E00               	movlw	0
 13313  006FFE  0100               	movlb	0	; () banked
 13314  007000  6F80               	movwf	clearShiftREG@i& (0+255),b
 13315                           
 13316                           ;shift595.h: 32: for (i = 0; i < 8; i++) {
 13317  007002  0E00               	movlw	0
 13318  007004  6F80               	movwf	clearShiftREG@i& (0+255),b
 13319  007006                     l5354:
 13320  007006  FFFF               	dw	65535	; assembler added errata NOP
 13321                           
 13322                           ; BSR set to: 0
 13323  007008  0E07               	movlw	7
 13324  00700A  6580               	cpfsgt	clearShiftREG@i& (0+255),b
 13325  00700C  D001               	goto	l426
 13326  00700E  D00D               	goto	u5470
 13327  007010                     l426:
 13328  007010  FFFF               	dw	65535	; assembler added errata NOP
 13329                           
 13330                           ; BSR set to: 0
 13331                           ;shift595.h: 33: shift[i] = 0;
 13332                           
 13333                           ; BSR set to: 0
 13334  007012  5180               	movf	clearShiftREG@i& (0+255),w,b
 13335  007014  0D01               	mullw	1
 13336  007016  0E44               	movlw	low _shift
 13337  007018  24F3               	addwf	prodl,w,c
 13338  00701A  6ED9               	movwf	fsr2l,c
 13339  00701C  0E00               	movlw	high _shift
 13340  00701E  20F4               	addwfc	prodh,w,c
 13341  007020  6EDA               	movwf	fsr2h,c
 13342  007022  0E00               	movlw	0
 13343  007024  6EDF               	movwf	indf2,c
 13344                           
 13345                           ; BSR set to: 0
 13346  007026  2B80               	incf	clearShiftREG@i& (0+255),f,b
 13347  007028  D7EE               	goto	l5354
 13348  00702A                     u5470:
 13349  00702A  FFFF               	dw	65535	; assembler added errata NOP
 13350                           
 13351                           ; BSR set to: 0
 13352                           
 13353                           ; BSR set to: 0
 13354  00702C  0012               	return		;funcret
 13355  00702E  FFFF               	dw	65535	; errata NOP
 13356  007030                     __end_of_clearShiftREG:
 13357                           	opt stack 0
 13358                           tblptru	equ	0xFF8
 13359                           tblptrh	equ	0xFF7
 13360                           tblptrl	equ	0xFF6
 13361                           tablat	equ	0xFF5
 13362                           prodh	equ	0xFF4
 13363                           prodl	equ	0xFF3
 13364                           intcon	equ	0xFF2
 13365                           postinc0	equ	0xFEE
 13366                           wreg	equ	0xFE8
 13367                           postdec1	equ	0xFE5
 13368                           fsr1l	equ	0xFE1
 13369                           indf2	equ	0xFDF
 13370                           postinc2	equ	0xFDE
 13371                           fsr2h	equ	0xFDA
 13372                           fsr2l	equ	0xFD9
 13373                           status	equ	0xFD8
 13374                           
 13375 ;; *************** function _btPress *****************
 13376 ;; Defined at:
 13377 ;;		line 57 in file "teclado.h"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;  bt              1    wreg     unsigned char 
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;  bt              1    0[BANK0 ] unsigned char 
 13382 ;; Return value:  Size  Location     Type
 13383 ;;                  1    wreg      unsigned char 
 13384 ;; Registers used:
 13385 ;;		wreg, status,2, status,0
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/0
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13391 ;;      Params:         0       0       0       0       0       0       0
 13392 ;;      Locals:         0       1       0       0       0       0       0
 13393 ;;      Temps:          0       0       0       0       0       0       0
 13394 ;;      Totals:         0       1       0       0       0       0       0
 13395 ;;Total ram usage:        1 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    6
 13398 ;; This function calls:
 13399 ;;		Nothing
 13400 ;; This function is called by:
 13401 ;;		_acaoTesteBombas
 13402 ;;		_telaPrincipal
 13403 ;;		_tela_ajusteRTC
 13404 ;;		_tela_testeBombas
 13405 ;;		_dataLoger
 13406 ;;		_informacoes
 13407 ;;		_configuraTelefones
 13408 ;;		_configurarEstacionaria
 13409 ;;		_ajusteSP_Bombas
 13410 ;;		_main
 13411 ;; This function uses a non-reentrant model
 13412 ;;
 13413                           
 13414                           	psect	text42
 13415  007694                     __ptext42:
 13416                           	opt stack 0
 13417  007694                     _btPress:
 13418                           	opt stack 0
 13419  007694  FFFF               	dw	65535	; assembler added errata NOP
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;incstack = 0
 13423                           ;btPress@bt stored from wreg
 13424  007696  0100               	movlb	0	; () banked
 13425  007698  6F80               	movwf	btPress@bt& (0+255),b
 13426                           
 13427                           ;teclado.h: 58: switch (bt) {
 13428  00769A  D021               	goto	l463
 13429  00769C  FFFF               	dw	65535	; assembler added errata NOP
 13430  00769E  5064               	movf	__b_esc,w,c
 13431  0076A0  B4D8               	btfsc	status,2,c
 13432  0076A2  D01A               	goto	l472
 13433                           
 13434                           ;teclado.h: 60: _b_esc = 0;
 13435  0076A4  0E00               	movlw	0
 13436  0076A6  6E64               	movwf	__b_esc,c
 13437  0076A8  D014               	goto	l5886
 13438  0076AA  FFFF               	dw	65535	; assembler added errata NOP
 13439                           
 13440                           ;teclado.h: 65: if (_b_mais) {
 13441  0076AC  5060               	movf	__b_mais,w,c
 13442  0076AE  B4D8               	btfsc	status,2,c
 13443  0076B0  D013               	goto	l472
 13444                           
 13445                           ;teclado.h: 66: _b_mais = 0;
 13446  0076B2  0E00               	movlw	0
 13447  0076B4  6E60               	movwf	__b_mais,c
 13448  0076B6  D00D               	goto	l5886
 13449  0076B8  FFFF               	dw	65535	; assembler added errata NOP
 13450  0076BA  5062               	movf	__b_menos,w,c
 13451  0076BC  B4D8               	btfsc	status,2,c
 13452  0076BE  D00C               	goto	l472
 13453                           
 13454                           ;teclado.h: 71: _b_menos = 0;
 13455  0076C0  0E00               	movlw	0
 13456  0076C2  6E62               	movwf	__b_menos,c
 13457  0076C4  D006               	goto	l5886
 13458  0076C6  FFFF               	dw	65535	; assembler added errata NOP
 13459  0076C8  505E               	movf	__b_ok,w,c
 13460  0076CA  B4D8               	btfsc	status,2,c
 13461  0076CC  D005               	goto	l472
 13462                           
 13463                           ;teclado.h: 76: _b_ok = 0;
 13464  0076CE  0E00               	movlw	0
 13465  0076D0  6E5E               	movwf	__b_ok,c
 13466  0076D2                     l5886:
 13467  0076D2  FFFF               	dw	65535	; assembler added errata NOP
 13468                           
 13469                           ;teclado.h: 77: return 1;
 13470  0076D4  0E01               	movlw	1
 13471  0076D6  D013               	goto	l474
 13472  0076D8                     l472:
 13473  0076D8  FFFF               	dw	65535	; assembler added errata NOP
 13474                           
 13475                           ;teclado.h: 80: default: return 0;
 13476                           
 13477                           ;teclado.h: 78: }
 13478                           ;teclado.h: 79: return 0;
 13479  0076DA  0E00               	movlw	0
 13480                           
 13481                           ;teclado.h: 81: }
 13482  0076DC  D010               	goto	l474
 13483  0076DE                     l463:
 13484  0076DE  FFFF               	dw	65535	; assembler added errata NOP
 13485  0076E0  0100               	movlb	0	; () banked
 13486  0076E2  5180               	movf	btPress@bt& (0+255),w,b
 13487                           
 13488                           ; Switch size 1, requested type "space"
 13489                           ; Number of cases is 4, Range of values is 1 to 4
 13490                           ; switch strategies available:
 13491                           ; Name         Instructions Cycles
 13492                           ; simple_byte           13     7 (average)
 13493                           ;	Chosen strategy is simple_byte
 13494  0076E4  0A01               	xorlw	1	; case 1
 13495  0076E6  B4D8               	btfsc	status,2,c
 13496  0076E8  D7D9               	goto	l464
 13497  0076EA  0A03               	xorlw	3	; case 2
 13498  0076EC  B4D8               	btfsc	status,2,c
 13499  0076EE  D7E4               	goto	l469
 13500  0076F0  0A01               	xorlw	1	; case 3
 13501  0076F2  B4D8               	btfsc	status,2,c
 13502  0076F4  D7DA               	goto	l467
 13503  0076F6  0A07               	xorlw	7	; case 4
 13504  0076F8  B4D8               	btfsc	status,2,c
 13505  0076FA  D7E5               	goto	l471
 13506  0076FC  D7ED               	goto	l472
 13507  0076FE                     l474:
 13508  0076FE  FFFF               	dw	65535	; assembler added errata NOP
 13509                           
 13510                           ; BSR set to: 0
 13511  007700  0012               	return		;funcret
 13512  007702  FFFF               	dw	65535	; errata NOP
 13513  007704                     __end_of_btPress:
 13514                           	opt stack 0
 13515                           tblptru	equ	0xFF8
 13516                           tblptrh	equ	0xFF7
 13517                           tblptrl	equ	0xFF6
 13518                           tablat	equ	0xFF5
 13519                           prodh	equ	0xFF4
 13520                           prodl	equ	0xFF3
 13521                           intcon	equ	0xFF2
 13522                           postinc0	equ	0xFEE
 13523                           wreg	equ	0xFE8
 13524                           postdec1	equ	0xFE5
 13525                           fsr1l	equ	0xFE1
 13526                           indf2	equ	0xFDF
 13527                           postinc2	equ	0xFDE
 13528                           fsr2h	equ	0xFDA
 13529                           fsr2l	equ	0xFD9
 13530                           status	equ	0xFD8
 13531                           
 13532 ;; *************** function _acaoBombas *****************
 13533 ;; Defined at:
 13534 ;;		line 18 in file "controle.h"
 13535 ;; Parameters:    Size  Location     Type
 13536 ;;		None
 13537 ;; Auto vars:     Size  Location     Type
 13538 ;;		None
 13539 ;; Return value:  Size  Location     Type
 13540 ;;                  1    wreg      void 
 13541 ;; Registers used:
 13542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13543 ;; Tracked objects:
 13544 ;;		On entry : 0/0
 13545 ;;		On exit  : 0/0
 13546 ;;		Unchanged: 0/0
 13547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13548 ;;      Params:         0       0       0       0       0       0       0
 13549 ;;      Locals:         0       0       0       0       0       0       0
 13550 ;;      Temps:          0       3       0       0       0       0       0
 13551 ;;      Totals:         0       3       0       0       0       0       0
 13552 ;;Total ram usage:        3 bytes
 13553 ;; Hardware stack levels used:    1
 13554 ;; Hardware stack levels required when called:   10
 13555 ;; This function calls:
 13556 ;;		_enviaSMS
 13557 ;;		_partidaBombaEstacionaria
 13558 ;; This function is called by:
 13559 ;;		_main
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563                           	psect	text43
 13564  00307E                     __ptext43:
 13565                           	opt stack 0
 13566  00307E                     _acaoBombas:
 13567                           	opt stack 0
 13568  00307E  FFFF               	dw	65535	; assembler added errata NOP
 13569                           
 13570                           ;controle.h: 19: if (pressao >= sp_pressao_rede && !ocorrendoIncendio && !executandoTest
      +                          e) {
 13571                           
 13572                           ;incstack = 0
 13573  003080  0100               	movlb	0	; () banked
 13574  003082  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13575  003084  6FC8               	movwf	??_acaoBombas& (0+255),b
 13576  003086  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13577  003088  51C8               	movf	??_acaoBombas& (0+255),w,b
 13578  00308A  5DF8               	subwf	_pressao& (0+255),w,b
 13579  00308C  51F9               	movf	(_pressao+1)& (0+255),w,b
 13580  00308E  0A80               	xorlw	128
 13581  003090  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13582  003092  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13583  003094  0A80               	xorlw	128
 13584  003096  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13585  003098  A0D8               	btfss	status,0,c
 13586  00309A  D00F               	goto	l477
 13587                           
 13588                           ; BSR set to: 0
 13589  00309C  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13590  00309E  A4D8               	btfss	status,2,c
 13591  0030A0  D00C               	goto	l477
 13592                           
 13593                           ; BSR set to: 0
 13594  0030A2  51F1               	movf	_executandoTeste& (0+255),w,b
 13595  0030A4  A4D8               	btfss	status,2,c
 13596  0030A6  D009               	goto	l477
 13597                           
 13598                           ; BSR set to: 0
 13599                           ;controle.h: 20: shift[6] = 0;
 13600  0030A8  0E00               	movlw	0
 13601  0030AA  6E4A               	movwf	_shift+6,c
 13602                           
 13603                           ;controle.h: 21: shift[5] = 0;
 13604  0030AC  0E00               	movlw	0
 13605  0030AE  6E49               	movwf	_shift+5,c
 13606                           
 13607                           ; BSR set to: 0
 13608                           ;controle.h: 22: partidaBombaEstacionaria(0);
 13609  0030B0  0E00               	movlw	0
 13610  0030B2  EC49  F01C         	call	_partidaBombaEstacionaria
 13611                           
 13612                           ;controle.h: 23: shift[1] = 0;
 13613  0030B6  0E00               	movlw	0
 13614  0030B8  D06E               	goto	L32
 13615  0030BA                     l477:
 13616  0030BA  FFFF               	dw	65535	; assembler added errata NOP
 13617                           
 13618                           ;controle.h: 25: }
 13619                           ;controle.h: 27: shift[2] = 0;
 13620  0030BC  0E00               	movlw	0
 13621  0030BE  6E46               	movwf	_shift+2,c
 13622                           
 13623                           ;controle.h: 28: if (pressao <= sp_jockey) {
 13624  0030C0  0100               	movlb	0	; () banked
 13625  0030C2  51E2               	movf	_sp_jockey& (0+255),w,b
 13626  0030C4  6FC8               	movwf	??_acaoBombas& (0+255),b
 13627  0030C6  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13628  0030C8  51F8               	movf	_pressao& (0+255),w,b
 13629  0030CA  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13630  0030CC  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13631  0030CE  0A80               	xorlw	128
 13632  0030D0  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13633  0030D2  51F9               	movf	(_pressao+1)& (0+255),w,b
 13634  0030D4  0A80               	xorlw	128
 13635  0030D6  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13636  0030D8  A0D8               	btfss	status,0,c
 13637  0030DA  D002               	goto	l479
 13638                           
 13639                           ; BSR set to: 0
 13640                           ;controle.h: 29: shift[6] = 1;
 13641  0030DC  0E01               	movlw	1
 13642  0030DE  D012               	goto	L33
 13643  0030E0                     l479:
 13644  0030E0  FFFF               	dw	65535	; assembler added errata NOP
 13645                           
 13646                           ; BSR set to: 0
 13647                           
 13648                           ; BSR set to: 0
 13649  0030E2  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13650  0030E4  6FC8               	movwf	??_acaoBombas& (0+255),b
 13651  0030E6  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13652  0030E8  51C8               	movf	??_acaoBombas& (0+255),w,b
 13653  0030EA  5DF8               	subwf	_pressao& (0+255),w,b
 13654  0030EC  51F9               	movf	(_pressao+1)& (0+255),w,b
 13655  0030EE  0A80               	xorlw	128
 13656  0030F0  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13657  0030F2  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13658  0030F4  0A80               	xorlw	128
 13659  0030F6  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13660  0030F8  A0D8               	btfss	status,0,c
 13661  0030FA  D006               	goto	l481
 13662                           
 13663                           ; BSR set to: 0
 13664  0030FC  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13665  0030FE  A4D8               	btfss	status,2,c
 13666  003100  D003               	goto	l481
 13667                           
 13668                           ; BSR set to: 0
 13669                           ;controle.h: 31: shift[6] = 0;
 13670  003102  0E00               	movlw	0
 13671  003104                     L33:
 13672  003104  FFFF               	dw	65535	; assembler added errata NOP
 13673  003106  6E4A               	movwf	_shift+6,c
 13674  003108                     l481:
 13675  003108  FFFF               	dw	65535	; assembler added errata NOP
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;controle.h: 32: }
 13679                           ;controle.h: 34: if (pressao <= sp_principal) {
 13680                           
 13681                           ; BSR set to: 0
 13682                           
 13683                           ; BSR set to: 0
 13684  00310A  51E1               	movf	_sp_principal& (0+255),w,b
 13685  00310C  6FC8               	movwf	??_acaoBombas& (0+255),b
 13686  00310E  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13687  003110  51F8               	movf	_pressao& (0+255),w,b
 13688  003112  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13689  003114  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13690  003116  0A80               	xorlw	128
 13691  003118  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13692  00311A  51F9               	movf	(_pressao+1)& (0+255),w,b
 13693  00311C  0A80               	xorlw	128
 13694  00311E  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13695  003120  A0D8               	btfss	status,0,c
 13696  003122  D004               	goto	l482
 13697                           
 13698                           ; BSR set to: 0
 13699                           ;controle.h: 35: ocorrendoIncendio = 1;
 13700  003124  0E01               	movlw	1
 13701  003126  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 13702                           
 13703                           ;controle.h: 36: shift[5] = 1;
 13704  003128  0E01               	movlw	1
 13705  00312A  6E49               	movwf	_shift+5,c
 13706  00312C                     l482:
 13707  00312C  FFFF               	dw	65535	; assembler added errata NOP
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;controle.h: 40: }
 13711                           ;controle.h: 41: if (pressao >= sp_pressao_rede && !ocorrendoIncendio) {
 13712                           
 13713                           ; BSR set to: 0
 13714  00312E  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13715  003130  6FC8               	movwf	??_acaoBombas& (0+255),b
 13716  003132  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13717  003134  51C8               	movf	??_acaoBombas& (0+255),w,b
 13718  003136  5DF8               	subwf	_pressao& (0+255),w,b
 13719  003138  51F9               	movf	(_pressao+1)& (0+255),w,b
 13720  00313A  0A80               	xorlw	128
 13721  00313C  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13722  00313E  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13723  003140  0A80               	xorlw	128
 13724  003142  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13725  003144  A0D8               	btfss	status,0,c
 13726  003146  D008               	goto	l483
 13727                           
 13728                           ; BSR set to: 0
 13729  003148  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13730  00314A  A4D8               	btfss	status,2,c
 13731  00314C  D005               	goto	l483
 13732                           
 13733                           ; BSR set to: 0
 13734                           ;controle.h: 42: shift[5] = 0;
 13735  00314E  0E00               	movlw	0
 13736  003150  6E49               	movwf	_shift+5,c
 13737                           
 13738                           ; BSR set to: 0
 13739                           ;controle.h: 43: partidaBombaEstacionaria(0);
 13740  003152  0E00               	movlw	0
 13741  003154  EC49  F01C         	call	_partidaBombaEstacionaria
 13742  003158                     l483:
 13743  003158  FFFF               	dw	65535	; assembler added errata NOP
 13744                           
 13745                           ;controle.h: 44: }
 13746                           ;controle.h: 46: if (pressao <= sp_estacionaria) {
 13747  00315A  0100               	movlb	0	; () banked
 13748  00315C  51E0               	movf	_sp_estacionaria& (0+255),w,b
 13749  00315E  6FC8               	movwf	??_acaoBombas& (0+255),b
 13750  003160  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13751  003162  51F8               	movf	_pressao& (0+255),w,b
 13752  003164  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13753  003166  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13754  003168  0A80               	xorlw	128
 13755  00316A  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13756  00316C  51F9               	movf	(_pressao+1)& (0+255),w,b
 13757  00316E  0A80               	xorlw	128
 13758  003170  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13759  003172  A0D8               	btfss	status,0,c
 13760  003174  D006               	goto	l484
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;controle.h: 47: partidaBombaEstacionaria(1);
 13764  003176  0E01               	movlw	1
 13765  003178  EC49  F01C         	call	_partidaBombaEstacionaria
 13766                           
 13767                           ;controle.h: 48: ocorrendoIncendio = 1;
 13768  00317C  0E01               	movlw	1
 13769  00317E  0100               	movlb	0	; () banked
 13770  003180  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 13771  003182                     l484:
 13772  003182  FFFF               	dw	65535	; assembler added errata NOP
 13773                           
 13774                           ; BSR set to: 0
 13775                           ;controle.h: 49: }
 13776                           ;controle.h: 51: if (ocorrendoIncendio) {
 13777                           
 13778                           ; BSR set to: 0
 13779  003184  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13780  003186  B4D8               	btfsc	status,2,c
 13781  003188  D008               	goto	l485
 13782                           
 13783                           ; BSR set to: 0
 13784                           ;controle.h: 52: gsmOcupado = 1;
 13785  00318A  0E01               	movlw	1
 13786  00318C  6FF4               	movwf	_gsmOcupado& (0+255),b
 13787                           
 13788                           ; BSR set to: 0
 13789                           ;controle.h: 53: enviaSMS(1);
 13790  00318E  0E01               	movlw	1
 13791  003190  ECDB  F00A         	call	_enviaSMS
 13792                           
 13793                           ;controle.h: 54: shift[1] = 1;
 13794  003194  0E01               	movlw	1
 13795  003196                     L32:
 13796  003196  FFFF               	dw	65535	; assembler added errata NOP
 13797  003198  6E45               	movwf	_shift+1,c
 13798  00319A                     l485:
 13799  00319A  FFFF               	dw	65535	; assembler added errata NOP
 13800  00319C  0012               	return		;funcret
 13801  00319E  FFFF               	dw	65535	; errata NOP
 13802  0031A0                     __end_of_acaoBombas:
 13803                           	opt stack 0
 13804                           tblptru	equ	0xFF8
 13805                           tblptrh	equ	0xFF7
 13806                           tblptrl	equ	0xFF6
 13807                           tablat	equ	0xFF5
 13808                           prodh	equ	0xFF4
 13809                           prodl	equ	0xFF3
 13810                           intcon	equ	0xFF2
 13811                           postinc0	equ	0xFEE
 13812                           wreg	equ	0xFE8
 13813                           postdec1	equ	0xFE5
 13814                           fsr1l	equ	0xFE1
 13815                           indf2	equ	0xFDF
 13816                           postinc2	equ	0xFDE
 13817                           fsr2h	equ	0xFDA
 13818                           fsr2l	equ	0xFD9
 13819                           status	equ	0xFD8
 13820                           
 13821 ;; *************** function _partidaBombaEstacionaria *****************
 13822 ;; Defined at:
 13823 ;;		line 58 in file "controle.h"
 13824 ;; Parameters:    Size  Location     Type
 13825 ;;  acao            1    wreg     unsigned char 
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;  acao            1    3[BANK0 ] unsigned char 
 13828 ;; Return value:  Size  Location     Type
 13829 ;;                  1    wreg      void 
 13830 ;; Registers used:
 13831 ;;		wreg, status,2, status,0, cstack
 13832 ;; Tracked objects:
 13833 ;;		On entry : 0/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13837 ;;      Params:         0       0       0       0       0       0       0
 13838 ;;      Locals:         0       1       0       0       0       0       0
 13839 ;;      Temps:          0       0       0       0       0       0       0
 13840 ;;      Totals:         0       1       0       0       0       0       0
 13841 ;;Total ram usage:        1 bytes
 13842 ;; Hardware stack levels used:    1
 13843 ;; Hardware stack levels required when called:    7
 13844 ;; This function calls:
 13845 ;;		_delay
 13846 ;; This function is called by:
 13847 ;;		_acaoBombas
 13848 ;;		_acaoTesteBombas
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           	psect	text44
 13853  003892                     __ptext44:
 13854                           	opt stack 0
 13855  003892                     _partidaBombaEstacionaria:
 13856                           	opt stack 0
 13857  003892  FFFF               	dw	65535	; assembler added errata NOP
 13858                           
 13859                           ;incstack = 0
 13860                           ;partidaBombaEstacionaria@acao stored from wreg
 13861  003894  0100               	movlb	0	; () banked
 13862  003896  6F83               	movwf	partidaBombaEstacionaria@acao& (0+255),b
 13863                           
 13864                           ;controle.h: 59: if (acao == 1 && !flagEstacionariaLigada) {
 13865  003898  0100               	movlb	0	; () banked
 13866  00389A  0583               	decf	partidaBombaEstacionaria@acao& (0+255),w,b
 13867  00389C  A4D8               	btfss	status,2,c
 13868  00389E  D01A               	goto	l490
 13869                           
 13870                           ; BSR set to: 0
 13871  0038A0  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 13872  0038A2  A4D8               	btfss	status,2,c
 13873  0038A4  D017               	goto	l490
 13874                           
 13875                           ; BSR set to: 0
 13876                           ;controle.h: 60: if (_sec_partida != _sec) {
 13877  0038A6  51EE               	movf	__sec& (0+255),w,b
 13878  0038A8  1870               	xorwf	__sec_partida,w,c
 13879  0038AA  B4D8               	btfsc	status,2,c
 13880  0038AC  D013               	goto	l490
 13881                           
 13882                           ; BSR set to: 0
 13883                           ;controle.h: 61: _sec_partida = _sec;
 13884  0038AE  C0EE  F070         	movff	__sec,__sec_partida
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;controle.h: 62: tempo_limite_partida++;
 13888  0038B2  2A6C               	incf	_tempo_limite_partida,f,c
 13889                           
 13890                           ;controle.h: 63: tempo_partida++;
 13891  0038B4  2A6D               	incf	_tempo_partida,f,c
 13892                           
 13893                           ; BSR set to: 0
 13894                           ;controle.h: 64: if (!PORTAbits.RA5) {
 13895  0038B6  BA80               	btfsc	3968,5,c	;volatile
 13896  0038B8  D00D               	goto	l490
 13897                           
 13898                           ; BSR set to: 0
 13899                           ;controle.h: 65: delay(700);
 13900  0038BA  0E02               	movlw	2
 13901  0038BC  6F81               	movwf	(delay@x+1)& (0+255),b
 13902  0038BE  0EBC               	movlw	188
 13903  0038C0  6F80               	movwf	delay@x& (0+255),b
 13904  0038C2  ECC7  F037         	call	_delay	;wreg free
 13905                           
 13906                           ;controle.h: 66: flagEstacionariaLigada = 1;
 13907  0038C6  0E01               	movlw	1
 13908  0038C8  0100               	movlb	0	; () banked
 13909  0038CA  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;controle.h: 67: tempo_partida = 0;
 13913  0038CC  0E00               	movlw	0
 13914  0038CE  6E6D               	movwf	_tempo_partida,c
 13915                           
 13916                           ; BSR set to: 0
 13917                           ;controle.h: 68: shift[4] = 0;
 13918  0038D0  0E00               	movlw	0
 13919  0038D2  6E48               	movwf	_shift+4,c
 13920  0038D4                     l490:
 13921  0038D4  FFFF               	dw	65535	; assembler added errata NOP
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;controle.h: 69: }
 13925                           ;controle.h: 70: }
 13926                           ;controle.h: 71: }
 13927                           ;controle.h: 72: if (!flagEstacionariaLigada && status_estacionaria == 1) {
 13928                           
 13929                           ; BSR set to: 0
 13930                           
 13931                           ; BSR set to: 0
 13932                           
 13933                           ; BSR set to: 0
 13934  0038D6  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 13935  0038D8  A4D8               	btfss	status,2,c
 13936  0038DA  D015               	goto	l495
 13937                           
 13938                           ; BSR set to: 0
 13939  0038DC  05FB               	decf	_status_estacionaria& (0+255),w,b
 13940  0038DE  A4D8               	btfss	status,2,c
 13941  0038E0  D012               	goto	l495
 13942                           
 13943                           ; BSR set to: 0
 13944                           ;controle.h: 73: shift[3] = 1;
 13945  0038E2  0E01               	movlw	1
 13946  0038E4  6E47               	movwf	_shift+3,c
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;controle.h: 74: if (tempo_partida <= 7) {
 13950  0038E6  0E08               	movlw	8
 13951  0038E8  606D               	cpfslt	_tempo_partida,c
 13952  0038EA  D002               	goto	l492
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;controle.h: 75: shift[4] = 1;
 13956  0038EC  0E01               	movlw	1
 13957  0038EE  D005               	goto	L34
 13958  0038F0                     l492:
 13959  0038F0  FFFF               	dw	65535	; assembler added errata NOP
 13960                           
 13961                           ; BSR set to: 0
 13962                           
 13963                           ; BSR set to: 0
 13964  0038F2  0E10               	movlw	16
 13965  0038F4  606D               	cpfslt	_tempo_partida,c
 13966  0038F6  D004               	goto	l494
 13967                           
 13968                           ; BSR set to: 0
 13969                           ;controle.h: 77: shift[4] = 0;
 13970  0038F8  0E00               	movlw	0
 13971  0038FA                     L34:
 13972  0038FA  FFFF               	dw	65535	; assembler added errata NOP
 13973  0038FC  6E48               	movwf	_shift+4,c
 13974                           
 13975                           ;controle.h: 78: } else {
 13976  0038FE  D003               	goto	l495
 13977  003900                     l494:
 13978  003900  FFFF               	dw	65535	; assembler added errata NOP
 13979                           
 13980                           ; BSR set to: 0
 13981                           ;controle.h: 79: tempo_partida = 0;
 13982                           
 13983                           ; BSR set to: 0
 13984  003902  0E00               	movlw	0
 13985  003904  6E6D               	movwf	_tempo_partida,c
 13986  003906                     l495:
 13987  003906  FFFF               	dw	65535	; assembler added errata NOP
 13988                           
 13989                           ; BSR set to: 0
 13990                           ;controle.h: 80: }
 13991                           ;controle.h: 81: }
 13992                           ;controle.h: 82: if (tempo_limite_partida > tempo_limite_estacionaria) {
 13993                           
 13994                           ; BSR set to: 0
 13995                           
 13996                           ; BSR set to: 0
 13997                           
 13998                           ; BSR set to: 0
 13999  003908  506C               	movf	_tempo_limite_partida,w,c
 14000  00390A  5DE5               	subwf	_tempo_limite_estacionaria& (0+255),w,b
 14001  00390C  B0D8               	btfsc	status,0,c
 14002  00390E  D00A               	goto	l496
 14003                           
 14004                           ; BSR set to: 0
 14005                           ;controle.h: 83: tempo_limite_partida = 0;
 14006  003910  0E00               	movlw	0
 14007  003912  6E6C               	movwf	_tempo_limite_partida,c
 14008                           
 14009                           ;controle.h: 84: status_estacionaria = 0;
 14010  003914  0E00               	movlw	0
 14011  003916  6FFB               	movwf	_status_estacionaria& (0+255),b
 14012                           
 14013                           ;controle.h: 85: flagEstacionariaLigada = 0;
 14014  003918  0E00               	movlw	0
 14015  00391A  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14016                           
 14017                           ;controle.h: 86: shift[3] = 0;
 14018  00391C  0E00               	movlw	0
 14019  00391E  6E47               	movwf	_shift+3,c
 14020                           
 14021                           ;controle.h: 87: shift[4] = 0;
 14022  003920  0E00               	movlw	0
 14023  003922  6E48               	movwf	_shift+4,c
 14024  003924                     l496:
 14025  003924  FFFF               	dw	65535	; assembler added errata NOP
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;controle.h: 88: }
 14029                           ;controle.h: 91: if (acao == 0) {
 14030  003926  5183               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
 14031  003928  A4D8               	btfss	status,2,c
 14032  00392A  D00A               	goto	l497
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;controle.h: 92: flagEstacionariaLigada = 0;
 14036  00392C  0E00               	movlw	0
 14037  00392E  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14038                           
 14039                           ;controle.h: 93: shift[4] = 0;
 14040  003930  0E00               	movlw	0
 14041  003932  6E48               	movwf	_shift+4,c
 14042                           
 14043                           ;controle.h: 94: shift[3] = 0;
 14044  003934  0E00               	movlw	0
 14045  003936  6E47               	movwf	_shift+3,c
 14046                           
 14047                           ;controle.h: 95: tempo_partida = 0;
 14048  003938  0E00               	movlw	0
 14049  00393A  6E6D               	movwf	_tempo_partida,c
 14050                           
 14051                           ;controle.h: 96: tempo_limite_partida = 0;
 14052  00393C  0E00               	movlw	0
 14053  00393E  6E6C               	movwf	_tempo_limite_partida,c
 14054  003940                     l497:
 14055  003940  FFFF               	dw	65535	; assembler added errata NOP
 14056                           
 14057                           ; BSR set to: 0
 14058                           ;controle.h: 97: }
 14059                           ;controle.h: 99: if (status_estacionaria == 0) {
 14060  003942  51FB               	movf	_status_estacionaria& (0+255),w,b
 14061  003944  A4D8               	btfss	status,2,c
 14062  003946  D006               	goto	l498
 14063                           
 14064                           ; BSR set to: 0
 14065                           ;controle.h: 100: shift[3] = 0;
 14066  003948  0E00               	movlw	0
 14067  00394A  6E47               	movwf	_shift+3,c
 14068                           
 14069                           ;controle.h: 101: shift[4] = 0;
 14070  00394C  0E00               	movlw	0
 14071  00394E  6E48               	movwf	_shift+4,c
 14072                           
 14073                           ;controle.h: 102: tempo_partida = 0;
 14074  003950  0E00               	movlw	0
 14075  003952  6E6D               	movwf	_tempo_partida,c
 14076  003954                     l498:
 14077  003954  FFFF               	dw	65535	; assembler added errata NOP
 14078                           
 14079                           ; BSR set to: 0
 14080                           ;controle.h: 103: }
 14081                           ;controle.h: 104: if (flagEstacionariaLigada) {
 14082  003956  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 14083  003958  B4D8               	btfsc	status,2,c
 14084  00395A  D00A               	goto	l501
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;controle.h: 105: if (!PORTAbits.RA5) {
 14088  00395C  BA80               	btfsc	3968,5,c	;volatile
 14089  00395E  D005               	goto	l500
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;controle.h: 106: shift[4] = 0;
 14093  003960  0E00               	movlw	0
 14094  003962  6E48               	movwf	_shift+4,c
 14095                           
 14096                           ;controle.h: 107: tempo_limite_partida = 0;
 14097  003964  0E00               	movlw	0
 14098  003966  6E6C               	movwf	_tempo_limite_partida,c
 14099                           
 14100                           ;controle.h: 108: } else {
 14101  003968  D003               	goto	l501
 14102  00396A                     l500:
 14103  00396A  FFFF               	dw	65535	; assembler added errata NOP
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;controle.h: 109: flagEstacionariaLigada = 0;
 14107                           
 14108                           ; BSR set to: 0
 14109  00396C  0E00               	movlw	0
 14110  00396E  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14111  003970                     l501:
 14112  003970  FFFF               	dw	65535	; assembler added errata NOP
 14113                           
 14114                           ; BSR set to: 0
 14115                           
 14116                           ; BSR set to: 0
 14117                           
 14118                           ; BSR set to: 0
 14119  003972  0012               	return		;funcret
 14120  003974  FFFF               	dw	65535	; errata NOP
 14121  003976                     __end_of_partidaBombaEstacionaria:
 14122                           	opt stack 0
 14123                           tblptru	equ	0xFF8
 14124                           tblptrh	equ	0xFF7
 14125                           tblptrl	equ	0xFF6
 14126                           tablat	equ	0xFF5
 14127                           prodh	equ	0xFF4
 14128                           prodl	equ	0xFF3
 14129                           intcon	equ	0xFF2
 14130                           postinc0	equ	0xFEE
 14131                           wreg	equ	0xFE8
 14132                           postdec1	equ	0xFE5
 14133                           fsr1l	equ	0xFE1
 14134                           indf2	equ	0xFDF
 14135                           postinc2	equ	0xFDE
 14136                           fsr2h	equ	0xFDA
 14137                           fsr2l	equ	0xFD9
 14138                           status	equ	0xFD8
 14139                           
 14140 ;; *************** function _enviaSMS *****************
 14141 ;; Defined at:
 14142 ;;		line 124 in file "comunicacao.h"
 14143 ;; Parameters:    Size  Location     Type
 14144 ;;  tipo            1    wreg     unsigned char 
 14145 ;; Auto vars:     Size  Location     Type
 14146 ;;  tipo            1   71[BANK0 ] unsigned char 
 14147 ;; Return value:  Size  Location     Type
 14148 ;;                  1    wreg      void 
 14149 ;; Registers used:
 14150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14151 ;; Tracked objects:
 14152 ;;		On entry : 0/0
 14153 ;;		On exit  : 0/0
 14154 ;;		Unchanged: 0/0
 14155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14156 ;;      Params:         0       0       0       0       0       0       0
 14157 ;;      Locals:         0      11       0       0       0       0       0
 14158 ;;      Temps:          0       2       0       0       0       0       0
 14159 ;;      Totals:         0      13       0       0       0       0       0
 14160 ;;Total ram usage:       13 bytes
 14161 ;; Hardware stack levels used:    1
 14162 ;; Hardware stack levels required when called:    9
 14163 ;; This function calls:
 14164 ;;		_aguardaBuffer
 14165 ;;		_delay
 14166 ;;		_limparBuffer
 14167 ;;		_printf
 14168 ;;		_writeChar
 14169 ;; This function is called by:
 14170 ;;		_acaoBombas
 14171 ;;		_acaoTesteBombas
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175                           	psect	text45
 14176  0015B6                     __ptext45:
 14177                           	opt stack 0
 14178  0015B6                     _enviaSMS:
 14179                           	opt stack 0
 14180  0015B6  FFFF               	dw	65535	; assembler added errata NOP
 14181                           
 14182                           ; BSR set to: 0
 14183                           ;incstack = 0
 14184                           ;enviaSMS@tipo stored from wreg
 14185  0015B8  0100               	movlb	0	; () banked
 14186  0015BA  6FC7               	movwf	enviaSMS@tipo& (0+255),b
 14187                           
 14188                           ;comunicacao.h: 125: if (timerReenvioSMS) return;
 14189  0015BC  0100               	movlb	0	; () banked
 14190  0015BE  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 14191  0015C0  A4D8               	btfss	status,2,c
 14192  0015C2  D19C               	goto	l352
 14193  0015C4  D17B               	goto	l350
 14194  0015C6  FFFF               	dw	65535	; assembler added errata NOP
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;comunicacao.h: 129: limparBuffer();
 14198                           
 14199                           ; BSR set to: 0
 14200  0015C8  ECE2  F037         	call	_limparBuffer	;wreg free
 14201                           
 14202                           ;comunicacao.h: 130: printf("AT\r\n");
 14203  0015CC  0EDE               	movlw	low STR_4
 14204  0015CE  0100               	movlb	0	; () banked
 14205  0015D0  6FA1               	movwf	printf@f& (0+255),b
 14206  0015D2  0E7F               	movlw	high STR_4
 14207  0015D4  6FA2               	movwf	(printf@f+1)& (0+255),b
 14208  0015D6  ECE3  F038         	call	_printf	;wreg free
 14209                           
 14210                           ;comunicacao.h: 131: etapaComunicacao++;
 14211  0015DA  4A51               	infsnz	_etapaComunicacao,f,c
 14212  0015DC  2A52               	incf	_etapaComunicacao+1,f,c
 14213                           
 14214                           ;comunicacao.h: 132: timerEtapaComunicacao = 6;
 14215  0015DE  0E06               	movlw	6
 14216  0015E0  0100               	movlb	0	; () banked
 14217  0015E2  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14218                           
 14219                           ;comunicacao.h: 133: break;
 14220  0015E4  D18B               	goto	l352
 14221  0015E6  FFFF               	dw	65535	; assembler added errata NOP
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;comunicacao.h: 135: if (aguardaBuffer("OK")) {
 14225                           
 14226                           ; BSR set to: 0
 14227  0015E8  0EFA               	movlw	low STR_5
 14228  0015EA  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14229  0015EC  0E7F               	movlw	high STR_5
 14230  0015EE  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14231  0015F0  ECC5  F038         	call	_aguardaBuffer	;wreg free
 14232  0015F4  0900               	iorlw	0
 14233  0015F6  B4D8               	btfsc	status,2,c
 14234  0015F8  D00E               	goto	l354
 14235                           
 14236                           ;comunicacao.h: 136: limparBuffer();
 14237  0015FA  ECE2  F037         	call	_limparBuffer	;wreg free
 14238                           
 14239                           ;comunicacao.h: 137: printf("AT+CMGF=1\r\n");
 14240  0015FE  0ED9               	movlw	low STR_10
 14241  001600  0100               	movlb	0	; () banked
 14242  001602  6FA1               	movwf	printf@f& (0+255),b
 14243  001604  0E7E               	movlw	high STR_10
 14244  001606  6FA2               	movwf	(printf@f+1)& (0+255),b
 14245  001608  ECE3  F038         	call	_printf	;wreg free
 14246                           
 14247                           ;comunicacao.h: 138: etapaComunicacao++;
 14248  00160C  4A51               	infsnz	_etapaComunicacao,f,c
 14249  00160E  2A52               	incf	_etapaComunicacao+1,f,c
 14250                           
 14251                           ;comunicacao.h: 139: timerEtapaComunicacao = 6;
 14252  001610  0E06               	movlw	6
 14253  001612  0100               	movlb	0	; () banked
 14254  001614  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14255  001616                     l354:
 14256  001616  FFFF               	dw	65535	; assembler added errata NOP
 14257                           
 14258                           ;comunicacao.h: 140: }
 14259                           ;comunicacao.h: 141: if (!timerEtapaComunicacao) {
 14260                           
 14261                           ; BSR set to: 0
 14262  001618  0100               	movlb	0	; () banked
 14263  00161A  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14264  00161C  A4D8               	btfss	status,2,c
 14265  00161E  D16E               	goto	l352
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;comunicacao.h: 142: writeChar(0x1A);
 14269  001620  0E1A               	movlw	26
 14270  001622  6F80               	movwf	writeChar@hex& (0+255),b
 14271  001624  0E00               	movlw	0
 14272  001626  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14273  001628  EC88  F036         	call	_writeChar	;wreg free
 14274                           
 14275                           ;comunicacao.h: 143: delay(15);
 14276  00162C  0E00               	movlw	0
 14277  00162E  0100               	movlb	0	; () banked
 14278  001630  6F81               	movwf	(delay@x+1)& (0+255),b
 14279  001632  0E0F               	movlw	15
 14280  001634  6F80               	movwf	delay@x& (0+255),b
 14281  001636  ECC7  F037         	call	_delay	;wreg free
 14282                           
 14283                           ;comunicacao.h: 144: printf("ATH0\r\n");
 14284  00163A  0EAA               	movlw	low STR_21
 14285  00163C  0100               	movlb	0	; () banked
 14286  00163E  6FA1               	movwf	printf@f& (0+255),b
 14287  001640  0E7F               	movlw	high STR_21
 14288  001642  6FA2               	movwf	(printf@f+1)& (0+255),b
 14289  001644  ECE3  F038         	call	_printf	;wreg free
 14290  001648  D133               	goto	l398
 14291  00164A  FFFF               	dw	65535	; assembler added errata NOP
 14292                           
 14293                           ;comunicacao.h: 149: if (aguardaBuffer("OK")) {
 14294  00164C  0EFA               	movlw	low STR_5
 14295  00164E  0100               	movlb	0	; () banked
 14296  001650  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14297  001652  0E7F               	movlw	high STR_5
 14298  001654  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14299  001656  ECC5  F038         	call	_aguardaBuffer	;wreg free
 14300  00165A  0900               	iorlw	0
 14301  00165C  B4D8               	btfsc	status,2,c
 14302  00165E  D0B2               	goto	l364
 14303                           
 14304                           ;comunicacao.h: 150: limparBuffer();
 14305  001660  ECE2  F037         	call	_limparBuffer	;wreg free
 14306                           
 14307                           ;comunicacao.h: 151: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : t
      +                          el2);
 14308  001664  0100               	movlb	0	; () banked
 14309  001666  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14310  001668  B4D8               	btfsc	status,2,c
 14311  00166A  D004               	goto	l359
 14312                           
 14313                           ; BSR set to: 0
 14314  00166C  0EA4               	movlw	low _tel2
 14315  00166E  6FBD               	movwf	_enviaSMS$1208& (0+255),b
 14316  001670  0E01               	movlw	high _tel2
 14317  001672  D004               	goto	L37
 14318  001674                     l359:
 14319  001674  FFFF               	dw	65535	; assembler added errata NOP
 14320                           
 14321                           ; BSR set to: 0
 14322                           
 14323                           ; BSR set to: 0
 14324  001676  0EB0               	movlw	low _tel1
 14325  001678  6FBD               	movwf	_enviaSMS$1208& (0+255),b
 14326  00167A  0E01               	movlw	high _tel1
 14327  00167C                     L37:
 14328  00167C  FFFF               	dw	65535	; assembler added errata NOP
 14329  00167E  6FBE               	movwf	(_enviaSMS$1208+1)& (0+255),b
 14330                           
 14331                           ; BSR set to: 0
 14332                           
 14333                           ; BSR set to: 0
 14334  001680  0E5F               	movlw	low STR_12
 14335  001682  6FA1               	movwf	printf@f& (0+255),b
 14336  001684  0E7D               	movlw	high STR_12
 14337  001686  6FA2               	movwf	(printf@f+1)& (0+255),b
 14338  001688  C0BD  F0A3         	movff	_enviaSMS$1208,?_printf+2
 14339  00168C  C0BE  F0A4         	movff	_enviaSMS$1208+1,?_printf+3
 14340  001690  ECE3  F038         	call	_printf	;wreg free
 14341                           
 14342                           ;comunicacao.h: 152: delay(120);
 14343  001694  0E00               	movlw	0
 14344  001696  0100               	movlb	0	; () banked
 14345  001698  6F81               	movwf	(delay@x+1)& (0+255),b
 14346  00169A  0E78               	movlw	120
 14347  00169C  6F80               	movwf	delay@x& (0+255),b
 14348  00169E  ECC7  F037         	call	_delay	;wreg free
 14349                           
 14350                           ;comunicacao.h: 153: timerEtapaComunicacao = 8;
 14351  0016A2  0E08               	movlw	8
 14352  0016A4  FFFF               	dw	65535	; assembler added errata NOP
 14353  0016A6  0100               	movlb	0	; () banked
 14354  0016A8  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;comunicacao.h: 154: etapaComunicacao++;
 14358  0016AA  4A51               	infsnz	_etapaComunicacao,f,c
 14359  0016AC  2A52               	incf	_etapaComunicacao+1,f,c
 14360                           
 14361                           ; BSR set to: 0
 14362  0016AE  D08A               	goto	l364
 14363  0016B0  FFFF               	dw	65535	; assembler added errata NOP
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;comunicacao.h: 162: if (aguardaBuffer(">")) {
 14367                           
 14368                           ; BSR set to: 0
 14369  0016B2  0EFD               	movlw	low STR_13
 14370  0016B4  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14371  0016B6  0E7F               	movlw	high STR_13
 14372  0016B8  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14373  0016BA  ECC5  F038         	call	_aguardaBuffer	;wreg free
 14374  0016BE  0900               	iorlw	0
 14375  0016C0  B4D8               	btfsc	status,2,c
 14376  0016C2  D080               	goto	l364
 14377                           
 14378                           ;comunicacao.h: 163: limparBuffer();
 14379  0016C4  ECE2  F037         	call	_limparBuffer	;wreg free
 14380                           
 14381                           ;comunicacao.h: 164: if (tipo == 1) {
 14382  0016C8  0100               	movlb	0	; () banked
 14383  0016CA  05C7               	decf	enviaSMS@tipo& (0+255),w,b
 14384  0016CC  A4D8               	btfss	status,2,c
 14385  0016CE  D018               	goto	l365
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;comunicacao.h: 165: printf("DISPARO ALARME DE INCENDIO\r\nEM %02d:%02d:%02d %02d/%02d/%
      +                          02d\r\n", _hor, _min, _sec, _dia, _mes, _ano);
 14389  0016D0  0EBD               	movlw	low STR_25
 14390  0016D2  6FA1               	movwf	printf@f& (0+255),b
 14391  0016D4  0E7B               	movlw	high STR_25
 14392  0016D6  6FA2               	movwf	(printf@f+1)& (0+255),b
 14393  0016D8  C0EC  F0A3         	movff	__hor,?_printf+2
 14394  0016DC  6BA4               	clrf	(?_printf+3)& (0+255),b
 14395  0016DE  C0ED  F0A5         	movff	__min,?_printf+4
 14396  0016E2  6BA6               	clrf	(?_printf+5)& (0+255),b
 14397  0016E4  C0EE  F0A7         	movff	__sec,?_printf+6
 14398  0016E8  6BA8               	clrf	(?_printf+7)& (0+255),b
 14399  0016EA  C0EB  F0A9         	movff	__dia,?_printf+8
 14400  0016EE  6BAA               	clrf	(?_printf+9)& (0+255),b
 14401  0016F0  C0EA  F0AB         	movff	__mes,?_printf+10
 14402  0016F4  6BAC               	clrf	(?_printf+11)& (0+255),b
 14403  0016F6  C0E9  F0AD         	movff	__ano,?_printf+12
 14404  0016FA  6BAE               	clrf	(?_printf+13)& (0+255),b
 14405  0016FC  ECE3  F038         	call	_printf	;wreg free
 14406  001700                     l365:
 14407  001700  FFFF               	dw	65535	; assembler added errata NOP
 14408                           
 14409                           ;comunicacao.h: 166: }
 14410                           ;comunicacao.h: 167: if (tipo == 2) {
 14411  001702  0E02               	movlw	2
 14412  001704  0100               	movlb	0	; () banked
 14413  001706  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14414  001708  A4D8               	btfss	status,2,c
 14415  00170A  D04B               	goto	l366
 14416                           
 14417                           ; BSR set to: 0
 14418                           ;comunicacao.h: 168: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%0
      +                          2d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
 14419                           ;comunicacao.h: 169: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FA
      +                          LHA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA")
      +                          ;
 14420  00170C  05FB               	decf	_status_estacionaria& (0+255),w,b
 14421  00170E  B4D8               	btfsc	status,2,c
 14422  001710  D004               	goto	l368
 14423                           
 14424                           ; BSR set to: 0
 14425  001712  0ED2               	movlw	low STR_28
 14426  001714  6FBF               	movwf	_enviaSMS$1221& (0+255),b
 14427  001716  0E7F               	movlw	high STR_28
 14428  001718  D004               	goto	L35
 14429  00171A                     l368:
 14430  00171A  FFFF               	dw	65535	; assembler added errata NOP
 14431                           
 14432                           ; BSR set to: 0
 14433                           
 14434                           ; BSR set to: 0
 14435  00171C  0EFA               	movlw	low STR_5
 14436  00171E  6FBF               	movwf	_enviaSMS$1221& (0+255),b
 14437  001720  0E7F               	movlw	high STR_5
 14438  001722                     L35:
 14439  001722  FFFF               	dw	65535	; assembler added errata NOP
 14440  001724  6FC0               	movwf	(_enviaSMS$1221+1)& (0+255),b
 14441                           
 14442                           ; BSR set to: 0
 14443  001726  05FC               	decf	_status_principal& (0+255),w,b
 14444  001728  B4D8               	btfsc	status,2,c
 14445  00172A  D004               	goto	l372
 14446                           
 14447                           ; BSR set to: 0
 14448  00172C  0ED2               	movlw	low STR_28
 14449  00172E  6FC1               	movwf	_enviaSMS$1222& (0+255),b
 14450  001730  0E7F               	movlw	high STR_28
 14451  001732  D004               	goto	L36
 14452  001734                     l372:
 14453  001734  FFFF               	dw	65535	; assembler added errata NOP
 14454                           
 14455                           ; BSR set to: 0
 14456                           
 14457                           ; BSR set to: 0
 14458  001736  0EFA               	movlw	low STR_5
 14459  001738  6FC1               	movwf	_enviaSMS$1222& (0+255),b
 14460  00173A  0E7F               	movlw	high STR_5
 14461  00173C                     L36:
 14462  00173C  FFFF               	dw	65535	; assembler added errata NOP
 14463  00173E  6FC2               	movwf	(_enviaSMS$1222+1)& (0+255),b
 14464                           
 14465                           ; BSR set to: 0
 14466  001740  05FD               	decf	_status_jockey& (0+255),w,b
 14467  001742  B4D8               	btfsc	status,2,c
 14468  001744  D004               	goto	l376
 14469                           
 14470                           ; BSR set to: 0
 14471  001746  0ED2               	movlw	low STR_28
 14472  001748  6FC3               	movwf	_enviaSMS$1223& (0+255),b
 14473  00174A  0E7F               	movlw	high STR_28
 14474  00174C  D004               	goto	L38
 14475  00174E                     l376:
 14476  00174E  FFFF               	dw	65535	; assembler added errata NOP
 14477                           
 14478                           ; BSR set to: 0
 14479                           
 14480                           ; BSR set to: 0
 14481  001750  0EFA               	movlw	low STR_5
 14482  001752  6FC3               	movwf	_enviaSMS$1223& (0+255),b
 14483  001754  0E7F               	movlw	high STR_5
 14484  001756                     L38:
 14485  001756  FFFF               	dw	65535	; assembler added errata NOP
 14486  001758  6FC4               	movwf	(_enviaSMS$1223+1)& (0+255),b
 14487                           
 14488                           ; BSR set to: 0
 14489                           
 14490                           ; BSR set to: 0
 14491  00175A  0E55               	movlw	low STR_26
 14492  00175C  6FA1               	movwf	printf@f& (0+255),b
 14493  00175E  0E7B               	movlw	high STR_26
 14494  001760  6FA2               	movwf	(printf@f+1)& (0+255),b
 14495  001762  C0EC  F0A3         	movff	__hor,?_printf+2
 14496  001766  6BA4               	clrf	(?_printf+3)& (0+255),b
 14497  001768  C0ED  F0A5         	movff	__min,?_printf+4
 14498  00176C  6BA6               	clrf	(?_printf+5)& (0+255),b
 14499  00176E  C0EE  F0A7         	movff	__sec,?_printf+6
 14500  001772  6BA8               	clrf	(?_printf+7)& (0+255),b
 14501  001774  C0EB  F0A9         	movff	__dia,?_printf+8
 14502  001778  6BAA               	clrf	(?_printf+9)& (0+255),b
 14503  00177A  C0EA  F0AB         	movff	__mes,?_printf+10
 14504  00177E  6BAC               	clrf	(?_printf+11)& (0+255),b
 14505  001780  C0E9  F0AD         	movff	__ano,?_printf+12
 14506  001784  6BAE               	clrf	(?_printf+13)& (0+255),b
 14507  001786  C0C3  F0AF         	movff	_enviaSMS$1223,?_printf+14
 14508  00178A  C0C4  F0B0         	movff	_enviaSMS$1223+1,?_printf+15
 14509  00178E  C0C1  F0B1         	movff	_enviaSMS$1222,?_printf+16
 14510  001792  C0C2  F0B2         	movff	_enviaSMS$1222+1,?_printf+17
 14511  001796  C0BF  F0B3         	movff	_enviaSMS$1221,?_printf+18
 14512  00179A  C0C0  F0B4         	movff	_enviaSMS$1221+1,?_printf+19
 14513  00179E  ECE3  F038         	call	_printf	;wreg free
 14514  0017A2                     l366:
 14515  0017A2  FFFF               	dw	65535	; assembler added errata NOP
 14516                           
 14517                           ;comunicacao.h: 170: }
 14518                           ;comunicacao.h: 171: delay(150);
 14519  0017A4  0E00               	movlw	0
 14520  0017A6  0100               	movlb	0	; () banked
 14521  0017A8  6F81               	movwf	(delay@x+1)& (0+255),b
 14522  0017AA  0E96               	movlw	150
 14523  0017AC  6F80               	movwf	delay@x& (0+255),b
 14524  0017AE  ECC7  F037         	call	_delay	;wreg free
 14525                           
 14526                           ;comunicacao.h: 172: writeChar(0x1A);
 14527  0017B2  0E1A               	movlw	26
 14528  0017B4  0100               	movlb	0	; () banked
 14529  0017B6  6F80               	movwf	writeChar@hex& (0+255),b
 14530  0017B8  0E00               	movlw	0
 14531  0017BA  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14532  0017BC  EC88  F036         	call	_writeChar	;wreg free
 14533                           
 14534                           ;comunicacao.h: 173: timerEtapaComunicacao = 30;
 14535  0017C0  0E1E               	movlw	30
 14536  0017C2  D770               	goto	L40
 14537  0017C4                     l364:
 14538  0017C4  FFFF               	dw	65535	; assembler added errata NOP
 14539                           
 14540                           ;comunicacao.h: 175: }
 14541                           ;comunicacao.h: 176: if (!timerEtapaComunicacao) {
 14542                           
 14543                           ; BSR set to: 0
 14544  0017C6  0100               	movlb	0	; () banked
 14545  0017C8  FFFF               	dw	65535	; assembler added errata NOP
 14546  0017CA  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14547  0017CC  A4D8               	btfss	status,2,c
 14548  0017CE  D096               	goto	l352
 14549  0017D0  D06F               	goto	l398
 14550  0017D2  FFFF               	dw	65535	; assembler added errata NOP
 14551                           
 14552                           ; BSR set to: 0
 14553                           ;comunicacao.h: 181: if (aguardaBuffer("OK") || aguardaBuffer("ERROR")) {
 14554                           
 14555                           ; BSR set to: 0
 14556  0017D4  0EFA               	movlw	low STR_5
 14557  0017D6  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14558  0017D8  0E7F               	movlw	high STR_5
 14559  0017DA  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14560  0017DC  ECC5  F038         	call	_aguardaBuffer	;wreg free
 14561  0017E0  0900               	iorlw	0
 14562  0017E2  A4D8               	btfss	status,2,c
 14563  0017E4  D00A               	goto	u5990
 14564  0017E6  0ED8               	movlw	low STR_17
 14565  0017E8  0100               	movlb	0	; () banked
 14566  0017EA  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14567  0017EC  0E7F               	movlw	high STR_17
 14568  0017EE  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14569  0017F0  ECC5  F038         	call	_aguardaBuffer	;wreg free
 14570  0017F4  0900               	iorlw	0
 14571  0017F6  B4D8               	btfsc	status,2,c
 14572  0017F8  D081               	goto	l352
 14573  0017FA                     u5990:
 14574  0017FA  FFFF               	dw	65535	; assembler added errata NOP
 14575                           
 14576                           ;comunicacao.h: 182: if (tipo == 2) {
 14577  0017FC  0E02               	movlw	2
 14578  0017FE  0100               	movlb	0	; () banked
 14579  001800  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14580  001802  A4D8               	btfss	status,2,c
 14581  001804  D00E               	goto	l384
 14582                           
 14583                           ; BSR set to: 0
 14584                           ;comunicacao.h: 183: if (telefoneSelecionado == 0) {
 14585  001806  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14586  001808  A4D8               	btfss	status,2,c
 14587  00180A  D003               	goto	l385
 14588                           
 14589                           ; BSR set to: 0
 14590                           ;comunicacao.h: 184: telefoneSelecionado = 1;
 14591  00180C  0E01               	movlw	1
 14592  00180E  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14593                           
 14594                           ;comunicacao.h: 185: } else {
 14595  001810  D7DB               	goto	L42
 14596  001812                     l385:
 14597  001812  FFFF               	dw	65535	; assembler added errata NOP
 14598                           
 14599                           ; BSR set to: 0
 14600                           ;comunicacao.h: 186: telefoneSelecionado = 0;
 14601                           
 14602                           ; BSR set to: 0
 14603  001814  0E00               	movlw	0
 14604  001816  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14605                           
 14606                           ;comunicacao.h: 187: gsmOcupado = 0;
 14607  001818  0E00               	movlw	0
 14608  00181A  6FF4               	movwf	_gsmOcupado& (0+255),b
 14609                           
 14610                           ;comunicacao.h: 188: menu_posi = 0;
 14611  00181C  0E00               	movlw	0
 14612  00181E  6FDE               	movwf	_menu_posi& (0+255),b
 14613                           
 14614                           ; BSR set to: 0
 14615                           ;comunicacao.h: 189: }
 14616                           ;comunicacao.h: 190: } else {
 14617  001820  D7D3               	goto	L42
 14618  001822                     l384:
 14619  001822  FFFF               	dw	65535	; assembler added errata NOP
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;comunicacao.h: 191: etapaComunicacao++;
 14623                           
 14624                           ; BSR set to: 0
 14625  001824  4A51               	infsnz	_etapaComunicacao,f,c
 14626  001826  2A52               	incf	_etapaComunicacao+1,f,c
 14627                           
 14628                           ; BSR set to: 0
 14629  001828  D7CF               	goto	L42
 14630  00182A  FFFF               	dw	65535	; assembler added errata NOP
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;comunicacao.h: 199: limparBuffer();
 14634                           
 14635                           ; BSR set to: 0
 14636  00182C  ECE2  F037         	call	_limparBuffer	;wreg free
 14637                           
 14638                           ;comunicacao.h: 200: printf("ATD 0%s;\r\n", telefoneSelecionado == 0 ? tel1 : tel2);
 14639  001830  0100               	movlb	0	; () banked
 14640  001832  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14641  001834  B4D8               	btfsc	status,2,c
 14642  001836  D004               	goto	l391
 14643                           
 14644                           ; BSR set to: 0
 14645  001838  0EA4               	movlw	low _tel2
 14646  00183A  6FC5               	movwf	_enviaSMS$1228& (0+255),b
 14647  00183C  0E01               	movlw	high _tel2
 14648  00183E  D004               	goto	L39
 14649  001840                     l391:
 14650  001840  FFFF               	dw	65535	; assembler added errata NOP
 14651                           
 14652                           ; BSR set to: 0
 14653                           
 14654                           ; BSR set to: 0
 14655  001842  0EB0               	movlw	low _tel1
 14656  001844  6FC5               	movwf	_enviaSMS$1228& (0+255),b
 14657  001846  0E01               	movlw	high _tel1
 14658  001848                     L39:
 14659  001848  FFFF               	dw	65535	; assembler added errata NOP
 14660  00184A  6FC6               	movwf	(_enviaSMS$1228+1)& (0+255),b
 14661                           
 14662                           ; BSR set to: 0
 14663                           
 14664                           ; BSR set to: 0
 14665  00184C  0E15               	movlw	low STR_35
 14666  00184E  6FA1               	movwf	printf@f& (0+255),b
 14667  001850  0E7F               	movlw	high STR_35
 14668  001852  6FA2               	movwf	(printf@f+1)& (0+255),b
 14669  001854  C0C5  F0A3         	movff	_enviaSMS$1228,?_printf+2
 14670  001858  C0C6  F0A4         	movff	_enviaSMS$1228+1,?_printf+3
 14671  00185C  ECE3  F038         	call	_printf	;wreg free
 14672                           
 14673                           ;comunicacao.h: 201: timerEtapaComunicacao = 30;
 14674  001860  0E1E               	movlw	30
 14675  001862  0100               	movlb	0	; () banked
 14676  001864  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14677                           
 14678                           ; BSR set to: 0
 14679                           ;comunicacao.h: 202: etapaComunicacao++;
 14680  001866  4A51               	infsnz	_etapaComunicacao,f,c
 14681  001868  2A52               	incf	_etapaComunicacao+1,f,c
 14682                           
 14683                           ;comunicacao.h: 203: break;
 14684  00186A  D048               	goto	l352
 14685  00186C  FFFF               	dw	65535	; assembler added errata NOP
 14686                           
 14687                           ; BSR set to: 0
 14688                           ;comunicacao.h: 205: if (!timerEtapaComunicacao) {
 14689                           
 14690                           ; BSR set to: 0
 14691  00186E  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14692  001870  A4D8               	btfss	status,2,c
 14693  001872  D044               	goto	l352
 14694                           
 14695                           ; BSR set to: 0
 14696                           ;comunicacao.h: 206: limparBuffer();
 14697  001874  ECE2  F037         	call	_limparBuffer	;wreg free
 14698                           
 14699                           ;comunicacao.h: 207: printf("ATH0\r\n");
 14700  001878  0EAA               	movlw	low STR_21
 14701  00187A  0100               	movlb	0	; () banked
 14702  00187C  6FA1               	movwf	printf@f& (0+255),b
 14703  00187E  0E7F               	movlw	high STR_21
 14704  001880  6FA2               	movwf	(printf@f+1)& (0+255),b
 14705  001882  ECE3  F038         	call	_printf	;wreg free
 14706                           
 14707                           ;comunicacao.h: 208: delay(550);
 14708  001886  0E02               	movlw	2
 14709  001888  0100               	movlb	0	; () banked
 14710  00188A  6F81               	movwf	(delay@x+1)& (0+255),b
 14711  00188C  0E26               	movlw	38
 14712  00188E  6F80               	movwf	delay@x& (0+255),b
 14713  001890  ECC7  F037         	call	_delay	;wreg free
 14714                           
 14715                           ;comunicacao.h: 209: if (telefoneSelecionado == 0) {
 14716  001894  0100               	movlb	0	; () banked
 14717  001896  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14718  001898  A4D8               	btfss	status,2,c
 14719  00189A  D003               	goto	l396
 14720                           
 14721                           ; BSR set to: 0
 14722                           ;comunicacao.h: 210: telefoneSelecionado = 1;
 14723  00189C  0E01               	movlw	1
 14724  00189E  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14725                           
 14726                           ;comunicacao.h: 211: } else {
 14727  0018A0  D007               	goto	l398
 14728  0018A2                     l396:
 14729  0018A2  FFFF               	dw	65535	; assembler added errata NOP
 14730                           
 14731                           ; BSR set to: 0
 14732                           ;comunicacao.h: 212: telefoneSelecionado = 0;
 14733                           
 14734                           ; BSR set to: 0
 14735  0018A4  0E00               	movlw	0
 14736  0018A6  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14737                           
 14738                           ;comunicacao.h: 213: gsmOcupado = 0;
 14739  0018A8  0E00               	movlw	0
 14740  0018AA  6FF4               	movwf	_gsmOcupado& (0+255),b
 14741                           
 14742                           ;comunicacao.h: 214: timerReenvioSMS = 2;
 14743  0018AC  0E02               	movlw	2
 14744  0018AE  6FF6               	movwf	_timerReenvioSMS& (0+255),b
 14745  0018B0                     l398:
 14746  0018B0  FFFF               	dw	65535	; assembler added errata NOP
 14747                           
 14748                           ; BSR set to: 0
 14749                           
 14750                           ; BSR set to: 0
 14751  0018B2  0E00               	movlw	0
 14752  0018B4  6E52               	movwf	_etapaComunicacao+1,c
 14753  0018B6  0E00               	movlw	0
 14754  0018B8  6E51               	movwf	_etapaComunicacao,c
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;comunicacao.h: 222: }
 14758                           
 14759                           ;comunicacao.h: 221: break;
 14760  0018BA  D020               	goto	l352
 14761  0018BC                     l350:
 14762  0018BC  FFFF               	dw	65535	; assembler added errata NOP
 14763                           
 14764                           ; BSR set to: 0
 14765                           
 14766                           ; BSR set to: 0
 14767  0018BE  C051  F0BB         	movff	_etapaComunicacao,??_enviaSMS
 14768  0018C2  C052  F0BC         	movff	_etapaComunicacao+1,??_enviaSMS+1
 14769                           
 14770                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14771                           ; Switch size 1, requested type "space"
 14772                           ; Number of cases is 1, Range of values is 0 to 0
 14773                           ; switch strategies available:
 14774                           ; Name         Instructions Cycles
 14775                           ; simple_byte            4     3 (average)
 14776                           ;	Chosen strategy is simple_byte
 14777  0018C6  51BC               	movf	(??_enviaSMS+1)& (0+255),w,b
 14778  0018C8  0A00               	xorlw	0	; case 0
 14779  0018CA  A4D8               	btfss	status,2,c
 14780  0018CC  D7F1               	goto	l398
 14781                           
 14782                           ; BSR set to: 0
 14783                           ; Switch size 1, requested type "space"
 14784                           ; Number of cases is 7, Range of values is 0 to 6
 14785                           ; switch strategies available:
 14786                           ; Name         Instructions Cycles
 14787                           ; simple_byte           22    12 (average)
 14788                           ;	Chosen strategy is simple_byte
 14789  0018CE  51BB               	movf	??_enviaSMS& (0+255),w,b
 14790  0018D0  0A00               	xorlw	0	; case 0
 14791  0018D2  B4D8               	btfsc	status,2,c
 14792  0018D4  D678               	goto	l351
 14793  0018D6  0A01               	xorlw	1	; case 1
 14794  0018D8  B4D8               	btfsc	status,2,c
 14795  0018DA  D685               	goto	l353
 14796  0018DC  0A03               	xorlw	3	; case 2
 14797  0018DE  B4D8               	btfsc	status,2,c
 14798  0018E0  D6B4               	goto	l356
 14799  0018E2  0A01               	xorlw	1	; case 3
 14800  0018E4  B4D8               	btfsc	status,2,c
 14801  0018E6  D6E4               	goto	l363
 14802  0018E8  0A07               	xorlw	7	; case 4
 14803  0018EA  B4D8               	btfsc	status,2,c
 14804  0018EC  D772               	goto	l380
 14805  0018EE  0A01               	xorlw	1	; case 5
 14806  0018F0  B4D8               	btfsc	status,2,c
 14807  0018F2  D79B               	goto	l389
 14808  0018F4  0A03               	xorlw	3	; case 6
 14809  0018F6  B4D8               	btfsc	status,2,c
 14810  0018F8  D7B9               	goto	l394
 14811  0018FA  D7DA               	goto	l398
 14812  0018FC                     l352:
 14813  0018FC  FFFF               	dw	65535	; assembler added errata NOP
 14814                           
 14815                           ; BSR set to: 0
 14816  0018FE  0012               	return		;funcret
 14817  001900  FFFF               	dw	65535	; errata NOP
 14818  001902                     __end_of_enviaSMS:
 14819                           	opt stack 0
 14820                           tblptru	equ	0xFF8
 14821                           tblptrh	equ	0xFF7
 14822                           tblptrl	equ	0xFF6
 14823                           tablat	equ	0xFF5
 14824                           prodh	equ	0xFF4
 14825                           prodl	equ	0xFF3
 14826                           intcon	equ	0xFF2
 14827                           postinc0	equ	0xFEE
 14828                           wreg	equ	0xFE8
 14829                           postdec1	equ	0xFE5
 14830                           fsr1l	equ	0xFE1
 14831                           indf2	equ	0xFDF
 14832                           postinc2	equ	0xFDE
 14833                           fsr2h	equ	0xFDA
 14834                           fsr2l	equ	0xFD9
 14835                           status	equ	0xFD8
 14836                           
 14837 ;; *************** function _writeChar *****************
 14838 ;; Defined at:
 14839 ;;		line 21 in file "serial.h"
 14840 ;; Parameters:    Size  Location     Type
 14841 ;;  hex             2    0[BANK0 ] PTR unsigned char 
 14842 ;;		 -> RAM(1535), 
 14843 ;; Auto vars:     Size  Location     Type
 14844 ;;		None
 14845 ;; Return value:  Size  Location     Type
 14846 ;;                  1    wreg      void 
 14847 ;; Registers used:
 14848 ;;		None
 14849 ;; Tracked objects:
 14850 ;;		On entry : 0/0
 14851 ;;		On exit  : 0/0
 14852 ;;		Unchanged: 0/0
 14853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14854 ;;      Params:         0       2       0       0       0       0       0
 14855 ;;      Locals:         0       0       0       0       0       0       0
 14856 ;;      Temps:          0       0       0       0       0       0       0
 14857 ;;      Totals:         0       2       0       0       0       0       0
 14858 ;;Total ram usage:        2 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; Hardware stack levels required when called:    6
 14861 ;; This function calls:
 14862 ;;		Nothing
 14863 ;; This function is called by:
 14864 ;;		_getSinalSIM800L
 14865 ;;		_comunicarTeste
 14866 ;;		_enviaSMS
 14867 ;; This function uses a non-reentrant model
 14868 ;;
 14869                           
 14870                           	psect	text46
 14871  006D10                     __ptext46:
 14872                           	opt stack 0
 14873  006D10                     _writeChar:
 14874                           	opt stack 0
 14875  006D10  FFFF               	dw	65535	; assembler added errata NOP
 14876                           
 14877                           ;serial.h: 22: while (!TXSTAbits.TRMT);
 14878                           
 14879                           ;incstack = 0
 14880  006D12  A2AC               	btfss	4012,1,c	;volatile
 14881  006D14  D7FD               	goto	_writeChar
 14882                           
 14883                           ;serial.h: 23: TXREG = hex;
 14884  006D16  C080  FFAD         	movff	writeChar@hex,4013	;volatile
 14885  006D1A  0012               	return		;funcret
 14886  006D1C  FFFF               	dw	65535	; errata NOP
 14887  006D1E                     __end_of_writeChar:
 14888                           	opt stack 0
 14889                           tblptru	equ	0xFF8
 14890                           tblptrh	equ	0xFF7
 14891                           tblptrl	equ	0xFF6
 14892                           tablat	equ	0xFF5
 14893                           prodh	equ	0xFF4
 14894                           prodl	equ	0xFF3
 14895                           intcon	equ	0xFF2
 14896                           postinc0	equ	0xFEE
 14897                           wreg	equ	0xFE8
 14898                           postdec1	equ	0xFE5
 14899                           fsr1l	equ	0xFE1
 14900                           indf2	equ	0xFDF
 14901                           postinc2	equ	0xFDE
 14902                           fsr2h	equ	0xFDA
 14903                           fsr2l	equ	0xFD9
 14904                           status	equ	0xFD8
 14905                           
 14906 ;; *************** function _printf *****************
 14907 ;; Defined at:
 14908 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
 14909 ;; Parameters:    Size  Location     Type
 14910 ;;  f               2   33[BANK0 ] PTR const unsigned char 
 14911 ;;		 -> STR_36(7), STR_35(11), STR_26(104), STR_25(63), 
 14912 ;;		 -> STR_23(18), STR_21(7), STR_20(12), STR_18(5), 
 14913 ;;		 -> STR_14(126), STR_12(18), STR_10(12), STR_8(5), 
 14914 ;;		 -> STR_4(5), STR_3(9), 
 14915 ;; Auto vars:     Size  Location     Type
 14916 ;;  pb              4   55[BANK0 ] struct __prbuf
 14917 ;;  ap              2   53[BANK0 ] PTR void [1]
 14918 ;;		 -> ?_sprintf(2), ?_printf(2), 
 14919 ;; Return value:  Size  Location     Type
 14920 ;;                  2   33[BANK0 ] int 
 14921 ;; Registers used:
 14922 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14923 ;; Tracked objects:
 14924 ;;		On entry : 0/0
 14925 ;;		On exit  : 0/0
 14926 ;;		Unchanged: 0/0
 14927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14928 ;;      Params:         0      20       0       0       0       0       0
 14929 ;;      Locals:         0       6       0       0       0       0       0
 14930 ;;      Temps:          0       0       0       0       0       0       0
 14931 ;;      Totals:         0      26       0       0       0       0       0
 14932 ;;Total ram usage:       26 bytes
 14933 ;; Hardware stack levels used:    1
 14934 ;; Hardware stack levels required when called:    8
 14935 ;; This function calls:
 14936 ;;		__doprnt
 14937 ;; This function is called by:
 14938 ;;		_getSinalSIM800L
 14939 ;;		_comunicarTeste
 14940 ;;		_enviaSMS
 14941 ;; This function uses a non-reentrant model
 14942 ;;
 14943                           
 14944                           	psect	text47
 14945  0071C6                     __ptext47:
 14946                           	opt stack 0
 14947  0071C6                     _printf:
 14948                           	opt stack 0
 14949  0071C6  FFFF               	dw	65535	; assembler added errata NOP
 14950                           
 14951                           ;incstack = 0
 14952  0071C8  0E00               	movlw	0
 14953  0071CA  0100               	movlb	0	; () banked
 14954  0071CC  6FB7               	movwf	printf@pb& (0+255),b
 14955  0071CE  0E00               	movlw	0
 14956  0071D0  6FB8               	movwf	(printf@pb+1)& (0+255),b
 14957  0071D2  0E30               	movlw	low _putch
 14958  0071D4  6FB9               	movwf	(printf@pb+2)& (0+255),b
 14959  0071D6  0E6D               	movlw	high _putch
 14960  0071D8  6FBA               	movwf	(printf@pb+3)& (0+255),b
 14961  0071DA  0EA3               	movlw	low (?_printf+2)
 14962  0071DC  6FB5               	movwf	printf@ap& (0+255),b
 14963  0071DE  0E00               	movlw	high (?_printf+2)
 14964  0071E0  6FB6               	movwf	(printf@ap+1)& (0+255),b
 14965                           
 14966                           ; BSR set to: 0
 14967                           ;	Return value of _printf is never used
 14968  0071E2  0EB7               	movlw	low printf@pb
 14969  0071E4  6F8C               	movwf	__doprnt@pb& (0+255),b
 14970  0071E6  0E00               	movlw	high printf@pb
 14971  0071E8  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 14972  0071EA  C0A1  F08E         	movff	printf@f,__doprnt@f
 14973  0071EE  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
 14974  0071F2  0EB5               	movlw	low printf@ap
 14975  0071F4  6F90               	movwf	__doprnt@ap& (0+255),b
 14976  0071F6  0E00               	movlw	high printf@ap
 14977  0071F8  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 14978  0071FA  EC8E  F000         	call	__doprnt	;wreg free
 14979  0071FE  0012               	return		;funcret
 14980  007200  FFFF               	dw	65535	; errata NOP
 14981  007202                     __end_of_printf:
 14982                           	opt stack 0
 14983                           tblptru	equ	0xFF8
 14984                           tblptrh	equ	0xFF7
 14985                           tblptrl	equ	0xFF6
 14986                           tablat	equ	0xFF5
 14987                           prodh	equ	0xFF4
 14988                           prodl	equ	0xFF3
 14989                           intcon	equ	0xFF2
 14990                           postinc0	equ	0xFEE
 14991                           wreg	equ	0xFE8
 14992                           postdec1	equ	0xFE5
 14993                           fsr1l	equ	0xFE1
 14994                           indf2	equ	0xFDF
 14995                           postinc2	equ	0xFDE
 14996                           fsr2h	equ	0xFDA
 14997                           fsr2l	equ	0xFD9
 14998                           status	equ	0xFD8
 14999                           
 15000 ;; *************** function __doprnt *****************
 15001 ;; Defined at:
 15002 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 15003 ;; Parameters:    Size  Location     Type
 15004 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 15005 ;;		 -> sprintf@pb(4), printf@pb(4), 
 15006 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15007 ;;		 -> intToFloatStr@conv(4), STR_122(15), STR_121(12), STR_120(10), 
 15008 ;;		 -> STR_119(18), STR_118(10), STR_117(18), STR_116(16), 
 15009 ;;		 -> STR_115(10), STR_113(3), STR_112(14), STR_111(20), 
 15010 ;;		 -> STR_110(8), STR_109(10), STR_108(11), STR_107(9), 
 15011 ;;		 -> STR_106(3), STR_105(15), STR_104(15), STR_103(11), 
 15012 ;;		 -> STR_102(11), STR_101(19), STR_100(5), STR_99(12), 
 15013 ;;		 -> STR_98(5), STR_97(14), STR_96(19), STR_93(3), 
 15014 ;;		 -> STR_92(7), STR_91(7), STR_89(12), STR_88(17), 
 15015 ;;		 -> STR_87(20), STR_86(8), STR_83(14), STR_80(14), 
 15016 ;;		 -> STR_79(11), STR_76(10), STR_75(31), STR_72(11), 
 15017 ;;		 -> STR_71(20), STR_70(20), STR_69(21), STR_68(15), 
 15018 ;;		 -> STR_67(6), STR_66(15), STR_65(6), STR_64(20), 
 15019 ;;		 -> STR_63(15), STR_62(19), STR_61(20), STR_60(21), 
 15020 ;;		 -> STR_59(21), STR_58(18), STR_57(20), STR_56(17), 
 15021 ;;		 -> STR_55(26), STR_54(16), STR_51(15), STR_48(15), 
 15022 ;;		 -> STR_45(11), STR_44(17), STR_43(16), STR_42(19), 
 15023 ;;		 -> STR_41(19), STR_40(16), STR_39(15), STR_38(15), 
 15024 ;;		 -> STR_37(20), STR_36(7), STR_35(11), STR_26(104), 
 15025 ;;		 -> STR_25(63), STR_23(18), STR_21(7), STR_20(12), 
 15026 ;;		 -> STR_18(5), STR_14(126), STR_12(18), STR_10(12), 
 15027 ;;		 -> STR_8(5), STR_4(5), STR_3(9), STR_2(5), 
 15028 ;;		 -> STR_1(5), 
 15029 ;;  ap              2   16[BANK0 ] PTR PTR void 
 15030 ;;		 -> sprintf@ap(2), printf@ap(2), 
 15031 ;; Auto vars:     Size  Location     Type
 15032 ;;  tmpval          4    0        struct .
 15033 ;;  width           2   30[BANK0 ] int 
 15034 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 15035 ;;		 -> ?_sprintf(2), ?_printf(2), STR_123(7), _doprnt@c(1), 
 15036 ;;		 -> intToFloatStr@end(4), STR_114(12), STR_95(17), STR_94(13), 
 15037 ;;		 -> STR_90(12), STR_85(5), STR_84(3), STR_82(5), 
 15038 ;;		 -> STR_81(3), STR_78(5), STR_77(3), STR_74(4), 
 15039 ;;		 -> STR_73(4), STR_53(5), STR_52(3), STR_50(5), 
 15040 ;;		 -> STR_49(3), line3(21), STR_47(5), STR_46(3), 
 15041 ;;		 -> line2(21), line1(21), line4(21), STR_32(6), 
 15042 ;;		 -> STR_31(3), STR_30(6), STR_29(3), STR_28(6), 
 15043 ;;		 -> STR_27(3), STR_15(12), tel2(12), tel1(12), 
 15044 ;;		 -> bufferAUX(20), NULL(0), bufferSerial(60), 
 15045 ;;  len             2   25[BANK0 ] unsigned int 
 15046 ;;  val             2   23[BANK0 ] unsigned int 
 15047 ;;  c               1   32[BANK0 ] char 
 15048 ;;  flag            1   27[BANK0 ] unsigned char 
 15049 ;;  prec            1   22[BANK0 ] char 
 15050 ;; Return value:  Size  Location     Type
 15051 ;;                  2   12[BANK0 ] int 
 15052 ;; Registers used:
 15053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15054 ;; Tracked objects:
 15055 ;;		On entry : 0/0
 15056 ;;		On exit  : 0/0
 15057 ;;		Unchanged: 0/0
 15058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15059 ;;      Params:         0       6       0       0       0       0       0
 15060 ;;      Locals:         0      11       0       0       0       0       0
 15061 ;;      Temps:          0       4       0       0       0       0       0
 15062 ;;      Totals:         0      21       0       0       0       0       0
 15063 ;;Total ram usage:       21 bytes
 15064 ;; Hardware stack levels used:    1
 15065 ;; Hardware stack levels required when called:    7
 15066 ;; This function calls:
 15067 ;;		Absolute function
 15068 ;;		___lwdiv
 15069 ;;		___lwmod
 15070 ;;		___wmul
 15071 ;;		_isdigit
 15072 ;;		_putch
 15073 ;; This function is called by:
 15074 ;;		_printf
 15075 ;;		_sprintf
 15076 ;; This function uses a non-reentrant model
 15077 ;;
 15078                           
 15079                           	psect	text48
 15080  00011C                     __ptext48:
 15081                           	opt stack 0
 15082  00011C                     __doprnt:
 15083                           	opt stack 0
 15084  00011C  FFFF               	dw	65535	; assembler added errata NOP
 15085                           
 15086                           ;doprnt.c: 499: signed char c;
 15087                           ;doprnt.c: 501: int width;
 15088                           ;doprnt.c: 506: signed char prec;
 15089                           ;doprnt.c: 508: unsigned char flag;
 15090                           ;doprnt.c: 523: union {
 15091                           ;doprnt.c: 524: unsigned long vd;
 15092                           ;doprnt.c: 525: double integ;
 15093                           ;doprnt.c: 526: } tmpval;
 15094                           ;doprnt.c: 528: unsigned int val;
 15095                           ;doprnt.c: 529: unsigned len;
 15096                           ;doprnt.c: 530: const char * cp;
 15097                           ;doprnt.c: 536: while(c = *f++) {
 15098                           
 15099                           ;incstack = 0
 15100  00011E  D3D7               	goto	u5280
 15101  000120  FFFF               	dw	65535	; assembler added errata NOP
 15102                           
 15103                           ;doprnt.c: 538: if(c != '%')
 15104  000122  0E25               	movlw	37
 15105  000124  0100               	movlb	0	; () banked
 15106  000126  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15107  000128  B4D8               	btfsc	status,2,c
 15108  00012A  D037               	goto	l1037
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;doprnt.c: 540: {
 15112                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 15113  00012C  EE20 F002          	lfsr	2,2
 15114  000130  518C               	movf	__doprnt@pb& (0+255),w,b
 15115  000132  26D9               	addwf	fsr2l,f,c
 15116  000134  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15117  000136  22DA               	addwfc	fsr2h,f,c
 15118  000138  50DE               	movf	postinc2,w,c
 15119  00013A  10DE               	iorwf	postinc2,w,c
 15120  00013C  B4D8               	btfsc	status,2,c
 15121  00013E  D016               	goto	l1038
 15122                           
 15123                           ; BSR set to: 0
 15124  000140  EE20 F002          	lfsr	2,2
 15125  000144  518C               	movf	__doprnt@pb& (0+255),w,b
 15126  000146  26D9               	addwf	fsr2l,f,c
 15127  000148  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15128  00014A  22DA               	addwfc	fsr2h,f,c
 15129  00014C  D801               	call	u4848
 15130  00014E  D3BF               	goto	u5280
 15131  000150                     u4848:
 15132  000150  FFFF               	dw	65535	; assembler added errata NOP
 15133  000152  0005               	push	
 15134  000154  6EFA               	movwf	pclath,c
 15135  000156  50DE               	movf	postinc2,w,c
 15136  000158  6EFD               	movwf	tosl,c
 15137  00015A  50DE               	movf	postinc2,w,c
 15138  00015C  6EFE               	movwf	tosh,c
 15139  00015E  50F8               	movf	tblptru,w,c
 15140  000160  6EFF               	movwf	tosu,c
 15141  000162  50FA               	movf	pclath,w,c
 15142  000164  51A0               	movf	__doprnt@c& (0+255),w,b
 15143  000166  0012               	return		;indir
 15144  000168  FFFF               	dw	65535	; errata NOP
 15145  00016A  D3B1               	goto	u5280
 15146  00016C                     l1038:
 15147  00016C  FFFF               	dw	65535	; assembler added errata NOP
 15148  00016E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15149  000172  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15150  000176  CFDE F092          	movff	postinc2,??__doprnt
 15151  00017A  CFDD F093          	movff	postdec2,??__doprnt+1
 15152  00017E  C092  FFD9         	movff	??__doprnt,fsr2l
 15153  000182  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15154  000186  C0A0  FFDF         	movff	__doprnt@c,indf2
 15155  00018A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15156  00018E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15157  000192  2ADE               	incf	postinc2,f,c
 15158  000194  0E00               	movlw	0
 15159  000196  22DD               	addwfc	postdec2,f,c
 15160                           
 15161                           ;doprnt.c: 542: continue;
 15162  000198  D39A               	goto	u5280
 15163  00019A                     l1037:
 15164  00019A  FFFF               	dw	65535	; assembler added errata NOP
 15165                           
 15166                           ;doprnt.c: 543: }
 15167                           ;doprnt.c: 546: width = 0;
 15168  00019C  0E00               	movlw	0
 15169  00019E  0100               	movlb	0	; () banked
 15170  0001A0  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15171  0001A2  0E00               	movlw	0
 15172  0001A4  6F9E               	movwf	__doprnt@width& (0+255),b
 15173                           
 15174                           ;doprnt.c: 548: flag = 0;
 15175  0001A6  0E00               	movlw	0
 15176  0001A8  6F9B               	movwf	__doprnt@flag& (0+255),b
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;doprnt.c: 551: switch(*f) {
 15180                           
 15181                           ;doprnt.c: 550: for(;;) {
 15182  0001AA  D005               	goto	l1041
 15183  0001AC  FFFF               	dw	65535	; assembler added errata NOP
 15184                           
 15185                           ;doprnt.c: 580: flag |= 0x04;
 15186                           
 15187                           ; BSR set to: 0
 15188  0001AE  0100               	movlb	0	; () banked
 15189  0001B0  859B               	bsf	__doprnt@flag& (0+255),2,b
 15190                           
 15191                           ;doprnt.c: 581: f++;
 15192  0001B2  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15193  0001B4  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15194  0001B6                     l1041:
 15195  0001B6  FFFF               	dw	65535	; assembler added errata NOP
 15196                           
 15197                           ; BSR set to: 0
 15198  0001B8  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15199  0001BC  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15200  0001C0  6AF8               	clrf	tblptru,c
 15201  0001C2  0E05               	movlw	(high __ramtop+-1)
 15202  0001C4  64F7               	cpfsgt	tblptrh,c
 15203  0001C6  D004               	bra	u4857
 15204  0001C8  0008               	tblrd		*
 15205  0001CA  FFFF               	dw	65535	; errata NOP
 15206  0001CC  50F5               	movf	tablat,w,c
 15207  0001CE  D005               	bra	u4850
 15208  0001D0                     u4857:
 15209  0001D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15210  0001D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15211  0001D8  50EF               	movf	indf0,w,c
 15212  0001DA                     u4850:
 15213                           
 15214                           ; Switch size 1, requested type "space"
 15215                           ; Number of cases is 1, Range of values is 48 to 48
 15216                           ; switch strategies available:
 15217                           ; Name         Instructions Cycles
 15218                           ; simple_byte            4     3 (average)
 15219                           ;	Chosen strategy is simple_byte
 15220  0001DA  0A30               	xorlw	48	; case 48
 15221  0001DC  B4D8               	btfsc	status,2,c
 15222  0001DE  D7E6               	goto	l1042
 15223                           
 15224                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15225                           
 15226                           ;doprnt.c: 586: }
 15227                           
 15228                           ;doprnt.c: 585: break;
 15229  0001E0  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15230  0001E4  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15231  0001E8  6AF8               	clrf	tblptru,c
 15232  0001EA  0E05               	movlw	(high __ramtop+-1)
 15233  0001EC  64F7               	cpfsgt	tblptrh,c
 15234  0001EE  D004               	bra	u4867
 15235  0001F0  0008               	tblrd		*
 15236  0001F2  FFFF               	dw	65535	; errata NOP
 15237  0001F4  50F5               	movf	tablat,w,c
 15238  0001F6  D005               	bra	u4860
 15239  0001F8                     u4867:
 15240  0001F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15241  0001FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15242  000200  50EF               	movf	indf0,w,c
 15243  000202                     u4860:
 15244  000202  EC0C  F037         	call	_isdigit
 15245  000206  A0D8               	btfss	status,0,c
 15246  000208  D16B               	goto	l1049
 15247                           
 15248                           ;doprnt.c: 598: width = 0;
 15249  00020A  0E00               	movlw	0
 15250  00020C  0100               	movlb	0	; () banked
 15251  00020E  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15252  000210  0E00               	movlw	0
 15253  000212  6F9E               	movwf	__doprnt@width& (0+255),b
 15254  000214  FFFF               	dw	65535	; assembler added errata NOP
 15255                           
 15256                           ;doprnt.c: 600: width *= 10;
 15257                           
 15258                           ; BSR set to: 0
 15259  000216  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 15260  00021A  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 15261  00021E  0E00               	movlw	0
 15262  000220  0100               	movlb	0	; () banked
 15263  000222  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15264  000224  0E0A               	movlw	10
 15265  000226  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15266  000228  EC4A  F037         	call	___wmul	;wreg free
 15267  00022C  C080  F09E         	movff	?___wmul,__doprnt@width
 15268  000230  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 15269                           
 15270                           ;doprnt.c: 601: width += *f++ - '0';
 15271  000234  0ED0               	movlw	208
 15272  000236  0100               	movlb	0	; () banked
 15273  000238  6F92               	movwf	??__doprnt& (0+255),b
 15274  00023A  0EFF               	movlw	255
 15275  00023C  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15276  00023E  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15277  000242  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15278  000246  6AF8               	clrf	tblptru,c
 15279  000248  0E05               	movlw	(high __ramtop+-1)
 15280  00024A  64F7               	cpfsgt	tblptrh,c
 15281  00024C  D004               	bra	u4887
 15282  00024E  0008               	tblrd		*
 15283  000250  FFFF               	dw	65535	; errata NOP
 15284  000252  50F5               	movf	tablat,w,c
 15285  000254  D005               	bra	u4880
 15286  000256                     u4887:
 15287  000256  CFF6 FFE9          	movff	tblptrl,fsr0l
 15288  00025A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15289  00025E  50EF               	movf	indf0,w,c
 15290  000260                     u4880:
 15291  000260  0100               	movlb	0	; () banked
 15292  000262  6F94               	movwf	(??__doprnt+2)& (0+255),b
 15293  000264  6B95               	clrf	(??__doprnt+3)& (0+255),b
 15294  000266  5192               	movf	??__doprnt& (0+255),w,b
 15295  000268  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 15296  00026A  5193               	movf	(??__doprnt+1)& (0+255),w,b
 15297  00026C  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 15298  00026E  5194               	movf	(??__doprnt+2)& (0+255),w,b
 15299  000270  279E               	addwf	__doprnt@width& (0+255),f,b
 15300  000272  5195               	movf	(??__doprnt+3)& (0+255),w,b
 15301  000274  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 15302                           
 15303                           ; BSR set to: 0
 15304  000276  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15305  000278  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15306                           
 15307                           ; BSR set to: 0
 15308                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15309  00027A  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15310  00027E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15311  000282  6AF8               	clrf	tblptru,c
 15312  000284  0E05               	movlw	(high __ramtop+-1)
 15313  000286  64F7               	cpfsgt	tblptrh,c
 15314  000288  D004               	bra	u4897
 15315  00028A  0008               	tblrd		*
 15316  00028C  FFFF               	dw	65535	; errata NOP
 15317  00028E  50F5               	movf	tablat,w,c
 15318  000290  D005               	bra	u4890
 15319  000292                     u4897:
 15320  000292  CFF6 FFE9          	movff	tblptrl,fsr0l
 15321  000296  CFF7 FFEA          	movff	tblptrh,fsr0h
 15322  00029A  50EF               	movf	indf0,w,c
 15323  00029C                     u4890:
 15324  00029C  EC0C  F037         	call	_isdigit
 15325  0002A0  A0D8               	btfss	status,0,c
 15326  0002A2  D11E               	goto	l1049
 15327  0002A4  D7B7               	goto	l1047
 15328  0002A6  FFFF               	dw	65535	; assembler added errata NOP
 15329                           
 15330                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15331  0002A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15332  0002AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15333  0002B0  CFDF F092          	movff	indf2,??__doprnt
 15334  0002B4  0E02               	movlw	2
 15335  0002B6  26DE               	addwf	postinc2,f,c
 15336  0002B8  CFDF F093          	movff	indf2,??__doprnt+1
 15337  0002BC  0E00               	movlw	0
 15338  0002BE  22DD               	addwfc	postdec2,f,c
 15339  0002C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15340  0002C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15341  0002C8  CFDE F09C          	movff	postinc2,__doprnt@cp
 15342  0002CC  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 15343                           
 15344                           ;doprnt.c: 740: if(!cp)
 15345  0002D0  0100               	movlb	0	; () banked
 15346  0002D2  519C               	movf	__doprnt@cp& (0+255),w,b
 15347  0002D4  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 15348  0002D6  A4D8               	btfss	status,2,c
 15349  0002D8  D004               	goto	l1056
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;doprnt.c: 741: cp = "(null)";
 15353  0002DA  0EA3               	movlw	low STR_123
 15354  0002DC  6F9C               	movwf	__doprnt@cp& (0+255),b
 15355  0002DE  0E7F               	movlw	high STR_123
 15356  0002E0  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15357  0002E2                     l1056:
 15358  0002E2  FFFF               	dw	65535	; assembler added errata NOP
 15359                           
 15360                           ; BSR set to: 0
 15361                           ;doprnt.c: 745: len = 0;
 15362                           
 15363                           ; BSR set to: 0
 15364  0002E4  0E00               	movlw	0
 15365  0002E6  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15366  0002E8  0E00               	movlw	0
 15367  0002EA  6F99               	movwf	__doprnt@len& (0+255),b
 15368                           
 15369                           ;doprnt.c: 746: while(cp[len])
 15370  0002EC  D004               	goto	l1057
 15371  0002EE  FFFF               	dw	65535	; assembler added errata NOP
 15372                           
 15373                           ;doprnt.c: 747: len++;
 15374                           
 15375                           ; BSR set to: 0
 15376  0002F0  0100               	movlb	0	; () banked
 15377  0002F2  4B99               	infsnz	__doprnt@len& (0+255),f,b
 15378  0002F4  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 15379  0002F6                     l1057:
 15380  0002F6  FFFF               	dw	65535	; assembler added errata NOP
 15381                           
 15382                           ; BSR set to: 0
 15383                           
 15384                           ; BSR set to: 0
 15385  0002F8  5199               	movf	__doprnt@len& (0+255),w,b
 15386  0002FA  259C               	addwf	__doprnt@cp& (0+255),w,b
 15387  0002FC  6F92               	movwf	??__doprnt& (0+255),b
 15388  0002FE  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15389  000300  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 15390  000302  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15391  000304  C092  FFF6         	movff	??__doprnt,tblptrl
 15392  000308  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15393  00030C  6AF8               	clrf	tblptru,c
 15394  00030E  0E05               	movlw	(high __ramtop+-1)
 15395  000310  64F7               	cpfsgt	tblptrh,c
 15396  000312  D004               	bra	u4927
 15397  000314  0008               	tblrd		*
 15398  000316  FFFF               	dw	65535	; errata NOP
 15399  000318  50F5               	movf	tablat,w,c
 15400  00031A  D005               	bra	u4920
 15401  00031C                     u4927:
 15402  00031C  CFF6 FFE9          	movff	tblptrl,fsr0l
 15403  000320  CFF7 FFEA          	movff	tblptrh,fsr0h
 15404  000324  50EF               	movf	indf0,w,c
 15405  000326                     u4920:
 15406  000326  0900               	iorlw	0
 15407  000328  A4D8               	btfss	status,2,c
 15408  00032A  D7E1               	goto	l1058
 15409  00032C                     u4930:
 15410  00032C  FFFF               	dw	65535	; assembler added errata NOP
 15411                           
 15412                           ;doprnt.c: 757: if(width > len)
 15413                           
 15414                           ;doprnt.c: 750: dostring:
 15415  00032E  0100               	movlb	0	; () banked
 15416  000330  519E               	movf	__doprnt@width& (0+255),w,b
 15417  000332  5D99               	subwf	__doprnt@len& (0+255),w,b
 15418  000334  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15419  000336  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 15420  000338  B0D8               	btfsc	status,0,c
 15421  00033A  D005               	goto	l1061
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;doprnt.c: 758: width -= len;
 15425  00033C  5199               	movf	__doprnt@len& (0+255),w,b
 15426  00033E  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15427  000340  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15428  000342  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15429  000344  D03D               	goto	l1066
 15430  000346                     l1061:
 15431  000346  FFFF               	dw	65535	; assembler added errata NOP
 15432                           
 15433                           ; BSR set to: 0
 15434                           ;doprnt.c: 759: else
 15435                           ;doprnt.c: 760: width = 0;
 15436                           
 15437                           ; BSR set to: 0
 15438  000348  0E00               	movlw	0
 15439  00034A  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15440  00034C  0E00               	movlw	0
 15441  00034E  6F9E               	movwf	__doprnt@width& (0+255),b
 15442                           
 15443                           ; BSR set to: 0
 15444                           ;doprnt.c: 764: while(width--)
 15445  000350  D037               	goto	l1066
 15446  000352  FFFF               	dw	65535	; assembler added errata NOP
 15447  000354                     l5072:
 15448                           
 15449                           ; BSR set to: 0
 15450                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 15451  000354  EE20 F002          	lfsr	2,2
 15452  000358  518C               	movf	__doprnt@pb& (0+255),w,b
 15453  00035A  26D9               	addwf	fsr2l,f,c
 15454  00035C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15455  00035E  22DA               	addwfc	fsr2h,f,c
 15456  000360  50DE               	movf	postinc2,w,c
 15457  000362  10DE               	iorwf	postinc2,w,c
 15458  000364  B4D8               	btfsc	status,2,c
 15459  000366  D016               	goto	l1065
 15460                           
 15461                           ; BSR set to: 0
 15462  000368  EE20 F002          	lfsr	2,2
 15463  00036C  518C               	movf	__doprnt@pb& (0+255),w,b
 15464  00036E  26D9               	addwf	fsr2l,f,c
 15465  000370  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15466  000372  22DA               	addwfc	fsr2h,f,c
 15467  000374  D801               	call	u4968
 15468  000376  D024               	goto	l1066
 15469  000378                     u4968:
 15470  000378  FFFF               	dw	65535	; assembler added errata NOP
 15471  00037A  0005               	push	
 15472  00037C  6EFA               	movwf	pclath,c
 15473  00037E  50DE               	movf	postinc2,w,c
 15474  000380  6EFD               	movwf	tosl,c
 15475  000382  50DE               	movf	postinc2,w,c
 15476  000384  6EFE               	movwf	tosh,c
 15477  000386  50F8               	movf	tblptru,w,c
 15478  000388  6EFF               	movwf	tosu,c
 15479  00038A  50FA               	movf	pclath,w,c
 15480  00038C  0E20               	movlw	32
 15481  00038E  0012               	return		;indir
 15482  000390  FFFF               	dw	65535	; errata NOP
 15483  000392  D016               	goto	l1066
 15484  000394                     l1065:
 15485  000394  FFFF               	dw	65535	; assembler added errata NOP
 15486  000396  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15487  00039A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15488  00039E  CFDE F092          	movff	postinc2,??__doprnt
 15489  0003A2  CFDD F093          	movff	postdec2,??__doprnt+1
 15490  0003A6  C092  FFD9         	movff	??__doprnt,fsr2l
 15491  0003AA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15492  0003AE  0E20               	movlw	32
 15493  0003B0  6EDF               	movwf	indf2,c
 15494  0003B2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15495  0003B6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15496  0003BA  2ADE               	incf	postinc2,f,c
 15497  0003BC  0E00               	movlw	0
 15498  0003BE  22DD               	addwfc	postdec2,f,c
 15499  0003C0                     l1066:
 15500  0003C0  FFFF               	dw	65535	; assembler added errata NOP
 15501  0003C2  0100               	movlb	0	; () banked
 15502  0003C4  079E               	decf	__doprnt@width& (0+255),f,b
 15503  0003C6  A0D8               	btfss	status,0,c
 15504  0003C8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15505  0003CA  299E               	incf	__doprnt@width& (0+255),w,b
 15506  0003CC  E1C3               	bnz	l5072
 15507  0003CE  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 15508  0003D0  B4D8               	btfsc	status,2,c
 15509  0003D2  D05F               	goto	l1071
 15510  0003D4  D7BE               	goto	l1064
 15511  0003D6  FFFF               	dw	65535	; assembler added errata NOP
 15512  0003D8                     l5082:
 15513                           
 15514                           ; BSR set to: 0
 15515                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 15516  0003D8  EE20 F002          	lfsr	2,2
 15517  0003DC  518C               	movf	__doprnt@pb& (0+255),w,b
 15518  0003DE  26D9               	addwf	fsr2l,f,c
 15519  0003E0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15520  0003E2  22DA               	addwfc	fsr2h,f,c
 15521  0003E4  50DE               	movf	postinc2,w,c
 15522  0003E6  10DE               	iorwf	postinc2,w,c
 15523  0003E8  B4D8               	btfsc	status,2,c
 15524  0003EA  D02A               	goto	l1070
 15525                           
 15526                           ; BSR set to: 0
 15527  0003EC  EE20 F002          	lfsr	2,2
 15528  0003F0  518C               	movf	__doprnt@pb& (0+255),w,b
 15529  0003F2  26D9               	addwf	fsr2l,f,c
 15530  0003F4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15531  0003F6  22DA               	addwfc	fsr2h,f,c
 15532  0003F8  D801               	call	u4998
 15533  0003FA  D01D               	goto	u4999
 15534  0003FC                     u4998:
 15535  0003FC  FFFF               	dw	65535	; assembler added errata NOP
 15536  0003FE  0005               	push	
 15537  000400  6EFA               	movwf	pclath,c
 15538  000402  50DE               	movf	postinc2,w,c
 15539  000404  6EFD               	movwf	tosl,c
 15540  000406  50DE               	movf	postinc2,w,c
 15541  000408  6EFE               	movwf	tosh,c
 15542  00040A  50F8               	movf	tblptru,w,c
 15543  00040C  6EFF               	movwf	tosu,c
 15544  00040E  50FA               	movf	pclath,w,c
 15545  000410  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15546  000414  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15547  000418  6AF8               	clrf	tblptru,c
 15548  00041A  0E05               	movlw	(high __ramtop+-1)
 15549  00041C  64F7               	cpfsgt	tblptrh,c
 15550  00041E  D004               	bra	u5007
 15551  000420  0008               	tblrd		*
 15552  000422  FFFF               	dw	65535	; errata NOP
 15553  000424  50F5               	movf	tablat,w,c
 15554  000426  D005               	bra	u5000
 15555  000428                     u5007:
 15556  000428  CFF6 FFE9          	movff	tblptrl,fsr0l
 15557  00042C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15558  000430  50EF               	movf	indf0,w,c
 15559  000432                     u5000:
 15560  000432  0012               	return		;indir
 15561  000434  FFFF               	dw	65535	; errata NOP
 15562  000436                     u4999:
 15563  000436  FFFF               	dw	65535	; assembler added errata NOP
 15564  000438  0100               	movlb	0	; () banked
 15565  00043A  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15566  00043C  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15567  00043E  D029               	goto	l1071
 15568  000440                     l1070:
 15569  000440  FFFF               	dw	65535	; assembler added errata NOP
 15570                           
 15571                           ; BSR set to: 0
 15572                           
 15573                           ; BSR set to: 0
 15574  000442  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15575  000446  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15576  00044A  6AF8               	clrf	tblptru,c
 15577  00044C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15578  000450  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15579  000454  CFDE F092          	movff	postinc2,??__doprnt
 15580  000458  CFDD F093          	movff	postdec2,??__doprnt+1
 15581  00045C  C092  FFD9         	movff	??__doprnt,fsr2l
 15582  000460  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15583  000464  0E05               	movlw	(high __ramtop+-1)
 15584  000466  64F7               	cpfsgt	tblptrh,c
 15585  000468  D004               	bra	u5017
 15586  00046A  0008               	tblrd		*
 15587  00046C  FFFF               	dw	65535	; errata NOP
 15588  00046E  50F5               	movf	tablat,w,c
 15589  000470  D005               	bra	u5010
 15590  000472                     u5017:
 15591  000472  CFF6 FFE9          	movff	tblptrl,fsr0l
 15592  000476  CFF7 FFEA          	movff	tblptrh,fsr0h
 15593  00047A  50EF               	movf	indf0,w,c
 15594  00047C                     u5010:
 15595  00047C  6EDF               	movwf	indf2,c
 15596  00047E  0100               	movlb	0	; () banked
 15597  000480  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15598  000482  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15599                           
 15600                           ; BSR set to: 0
 15601  000484  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15602  000488  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15603  00048C  2ADE               	incf	postinc2,f,c
 15604  00048E  0E00               	movlw	0
 15605  000490  22DD               	addwfc	postdec2,f,c
 15606  000492                     l1071:
 15607  000492  FFFF               	dw	65535	; assembler added errata NOP
 15608                           
 15609                           ; BSR set to: 0
 15610                           
 15611                           ; BSR set to: 0
 15612                           
 15613                           ; BSR set to: 0
 15614  000494  0799               	decf	__doprnt@len& (0+255),f,b
 15615  000496  A0D8               	btfss	status,0,c
 15616  000498  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 15617  00049A  2999               	incf	__doprnt@len& (0+255),w,b
 15618  00049C  E19D               	bnz	l5082
 15619  00049E  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 15620  0004A0  B4D8               	btfsc	status,2,c
 15621  0004A2  D215               	goto	u5280
 15622  0004A4  D798               	goto	l1069
 15623  0004A6  FFFF               	dw	65535	; assembler added errata NOP
 15624                           
 15625                           ; BSR set to: 0
 15626                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 15627                           
 15628                           ; BSR set to: 0
 15629  0004A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15630  0004AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15631  0004B0  CFDF F092          	movff	indf2,??__doprnt
 15632  0004B4  0E02               	movlw	2
 15633  0004B6  26DE               	addwf	postinc2,f,c
 15634  0004B8  CFDF F093          	movff	indf2,??__doprnt+1
 15635  0004BC  0E00               	movlw	0
 15636  0004BE  22DD               	addwfc	postdec2,f,c
 15637  0004C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15638  0004C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15639  0004C8  50DF               	movf	indf2,w,c
 15640  0004CA  6FA0               	movwf	__doprnt@c& (0+255),b
 15641  0004CC  FFFF               	dw	65535	; assembler added errata NOP
 15642                           
 15643                           ; BSR set to: 0
 15644                           ;doprnt.c: 805: cp = (char *)&c;
 15645                           
 15646                           ; BSR set to: 0
 15647  0004CE  0EA0               	movlw	low __doprnt@c
 15648  0004D0  6F9C               	movwf	__doprnt@cp& (0+255),b
 15649  0004D2  0E00               	movlw	high __doprnt@c
 15650  0004D4  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15651                           
 15652                           ; BSR set to: 0
 15653                           ;doprnt.c: 806: len = 1;
 15654  0004D6  0E00               	movlw	0
 15655  0004D8  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15656  0004DA  0E01               	movlw	1
 15657  0004DC  6F99               	movwf	__doprnt@len& (0+255),b
 15658                           
 15659                           ;doprnt.c: 807: goto dostring;
 15660  0004DE  D726               	goto	u4930
 15661  0004E0                     l1049:
 15662  0004E0  FFFF               	dw	65535	; assembler added errata NOP
 15663                           
 15664                           ; BSR set to: 0
 15665  0004E2  0100               	movlb	0	; () banked
 15666  0004E4  518E               	movf	__doprnt@f& (0+255),w,b
 15667  0004E6  6F92               	movwf	??__doprnt& (0+255),b
 15668  0004E8  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 15669  0004EA  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15670  0004EC  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15671  0004EE  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15672  0004F0  C092  FFF6         	movff	??__doprnt,tblptrl
 15673  0004F4  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15674  0004F8  6AF8               	clrf	tblptru,c
 15675  0004FA  0E05               	movlw	(high __ramtop+-1)
 15676  0004FC  64F7               	cpfsgt	tblptrh,c
 15677  0004FE  D004               	bra	u5037
 15678  000500  0008               	tblrd		*
 15679  000502  FFFF               	dw	65535	; errata NOP
 15680  000504  50F5               	movf	tablat,w,c
 15681  000506  D005               	bra	u5030
 15682  000508                     u5037:
 15683  000508  CFF6 FFE9          	movff	tblptrl,fsr0l
 15684  00050C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15685  000510  50EF               	movf	indf0,w,c
 15686  000512                     u5030:
 15687  000512  0100               	movlb	0	; () banked
 15688  000514  6FA0               	movwf	__doprnt@c& (0+255),b
 15689  000516  51A0               	movf	__doprnt@c& (0+255),w,b
 15690                           
 15691                           ; Switch size 1, requested type "space"
 15692                           ; Number of cases is 5, Range of values is 0 to 115
 15693                           ; switch strategies available:
 15694                           ; Name         Instructions Cycles
 15695                           ; simple_byte           16     9 (average)
 15696                           ;	Chosen strategy is simple_byte
 15697  000518  0A00               	xorlw	0	; case 0
 15698  00051A  B4D8               	btfsc	status,2,c
 15699  00051C  D1F6               	goto	u5300
 15700  00051E  0A63               	xorlw	99	; case 99
 15701  000520  B4D8               	btfsc	status,2,c
 15702  000522  D7C1               	goto	l1073
 15703  000524  0A07               	xorlw	7	; case 100
 15704  000526  B4D8               	btfsc	status,2,c
 15705  000528  D007               	goto	l1054
 15706  00052A  0A0D               	xorlw	13	; case 105
 15707  00052C  B4D8               	btfsc	status,2,c
 15708  00052E  D004               	goto	l1054
 15709  000530  0A1A               	xorlw	26	; case 115
 15710  000532  B4D8               	btfsc	status,2,c
 15711  000534  D6B8               	goto	l1055
 15712  000536  D7CA               	goto	l1074
 15713  000538                     l1054:
 15714  000538  FFFF               	dw	65535	; assembler added errata NOP
 15715                           
 15716                           ;doprnt.c: 1253: {
 15717                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15718                           
 15719                           ; BSR set to: 0
 15720  00053A  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15721  00053E  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15722  000542  CFDF F092          	movff	indf2,??__doprnt
 15723  000546  0E02               	movlw	2
 15724  000548  26DE               	addwf	postinc2,f,c
 15725  00054A  CFDF F093          	movff	indf2,??__doprnt+1
 15726  00054E  0E00               	movlw	0
 15727  000550  22DD               	addwfc	postdec2,f,c
 15728  000552  C092  FFD9         	movff	??__doprnt,fsr2l
 15729  000556  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15730  00055A  CFDE F097          	movff	postinc2,__doprnt@val
 15731  00055E  CFDD F098          	movff	postdec2,__doprnt@val+1
 15732                           
 15733                           ;doprnt.c: 1261: if((int)val < 0) {
 15734  000562  0100               	movlb	0	; () banked
 15735  000564  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 15736  000566  D006               	goto	l1075
 15737                           
 15738                           ; BSR set to: 0
 15739                           ;doprnt.c: 1262: flag |= 0x03;
 15740  000568  0E03               	movlw	3
 15741  00056A  139B               	iorwf	__doprnt@flag& (0+255),f,b
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;doprnt.c: 1263: val = -val;
 15745  00056C  6D97               	negf	__doprnt@val& (0+255),b
 15746  00056E  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 15747  000570  B0D8               	btfsc	status,0,c
 15748  000572  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 15749  000574                     l1075:
 15750  000574  FFFF               	dw	65535	; assembler added errata NOP
 15751                           
 15752                           ; BSR set to: 0
 15753                           ;doprnt.c: 1264: }
 15754                           ;doprnt.c: 1266: }
 15755                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15756                           
 15757                           ; BSR set to: 0
 15758  000576  0E01               	movlw	1
 15759  000578  6FA0               	movwf	__doprnt@c& (0+255),b
 15760  00057A                     l5116:
 15761  00057A  FFFF               	dw	65535	; assembler added errata NOP
 15762                           
 15763                           ; BSR set to: 0
 15764  00057C  0E05               	movlw	5
 15765  00057E  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15766  000580  B4D8               	btfsc	status,2,c
 15767  000582  D014               	goto	u5070
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;doprnt.c: 1306: if(val < dpowers[c])
 15771                           
 15772                           ; BSR set to: 0
 15773                           
 15774                           ; BSR set to: 0
 15775  000584  51A0               	movf	__doprnt@c& (0+255),w,b
 15776  000586  0D02               	mullw	2
 15777  000588  0ECD               	movlw	low _dpowers
 15778  00058A  24F3               	addwf	prodl,w,c
 15779  00058C  6EF6               	movwf	tblptrl,c
 15780  00058E  0E7A               	movlw	high _dpowers
 15781  000590  20F4               	addwfc	prodh,w,c
 15782  000592  6EF7               	movwf	tblptrh,c
 15783  000594                     	if	0	;There are less than 3 active tblptr bytes
 15784  000594                     	endif
 15785  000594  0009               	tblrd		*+
 15786  000596  FFFF               	dw	65535	; errata NOP
 15787  000598  50F5               	movf	tablat,w,c
 15788  00059A  5D97               	subwf	__doprnt@val& (0+255),w,b
 15789  00059C  0009               	tblrd		*+
 15790  00059E  FFFF               	dw	65535	; errata NOP
 15791  0005A0  50F5               	movf	tablat,w,c
 15792  0005A2  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 15793  0005A4  A0D8               	btfss	status,0,c
 15794  0005A6  D002               	goto	u5070
 15795                           
 15796                           ; BSR set to: 0
 15797                           
 15798                           ; BSR set to: 0
 15799                           
 15800                           ; BSR set to: 0
 15801                           ;doprnt.c: 1307: break;
 15802  0005A8  2BA0               	incf	__doprnt@c& (0+255),f,b
 15803  0005AA  D7E7               	goto	l5116
 15804  0005AC                     u5070:
 15805  0005AC  FFFF               	dw	65535	; assembler added errata NOP
 15806                           
 15807                           ; BSR set to: 0
 15808                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15809                           
 15810                           ; BSR set to: 0
 15811  0005AE  519E               	movf	__doprnt@width& (0+255),w,b
 15812  0005B0  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15813  0005B2  B4D8               	btfsc	status,2,c
 15814  0005B4  D009               	goto	l1079
 15815                           
 15816                           ; BSR set to: 0
 15817  0005B6  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15818  0005BA  0E03               	movlw	3
 15819  0005BC  1792               	andwf	??__doprnt& (0+255),f,b
 15820  0005BE  B4D8               	btfsc	status,2,c
 15821  0005C0  D003               	goto	l1079
 15822                           
 15823                           ; BSR set to: 0
 15824                           ;doprnt.c: 1346: width--;
 15825  0005C2  079E               	decf	__doprnt@width& (0+255),f,b
 15826  0005C4  A0D8               	btfss	status,0,c
 15827  0005C6  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15828  0005C8                     l1079:
 15829  0005C8  FFFF               	dw	65535	; assembler added errata NOP
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;doprnt.c: 1381: if(width > c)
 15833                           
 15834                           ; BSR set to: 0
 15835  0005CA  0E80               	movlw	128
 15836  0005CC  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15837  0005CE  0E7F               	movlw	127
 15838  0005D0  6F92               	movwf	??__doprnt& (0+255),b
 15839  0005D2  519E               	movf	__doprnt@width& (0+255),w,b
 15840  0005D4  5DA0               	subwf	__doprnt@c& (0+255),w,b
 15841  0005D6  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15842  0005D8  0A80               	xorlw	128
 15843  0005DA  5992               	subwfb	??__doprnt& (0+255),w,b
 15844  0005DC  B0D8               	btfsc	status,0,c
 15845  0005DE  D007               	goto	l1080
 15846                           
 15847                           ; BSR set to: 0
 15848                           ;doprnt.c: 1382: width -= c;
 15849  0005E0  51A0               	movf	__doprnt@c& (0+255),w,b
 15850  0005E2  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15851  0005E4  0E00               	movlw	0
 15852  0005E6  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15853  0005E8  0EFF               	movlw	255
 15854  0005EA  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15855  0005EC  D005               	goto	l1081
 15856  0005EE                     l1080:
 15857  0005EE  FFFF               	dw	65535	; assembler added errata NOP
 15858                           
 15859                           ; BSR set to: 0
 15860                           ;doprnt.c: 1383: else
 15861                           ;doprnt.c: 1384: width = 0;
 15862                           
 15863                           ; BSR set to: 0
 15864  0005F0  0E00               	movlw	0
 15865  0005F2  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15866  0005F4  0E00               	movlw	0
 15867  0005F6  6F9E               	movwf	__doprnt@width& (0+255),b
 15868  0005F8                     l1081:
 15869  0005F8  FFFF               	dw	65535	; assembler added errata NOP
 15870                           
 15871                           ; BSR set to: 0
 15872                           ;doprnt.c: 1387: if(flag & 0x04) {
 15873                           
 15874                           ; BSR set to: 0
 15875  0005FA  A59B               	btfss	__doprnt@flag& (0+255),2,b
 15876  0005FC  D07F               	goto	l1082
 15877                           
 15878                           ; BSR set to: 0
 15879                           ;doprnt.c: 1392: if(flag & 0x03)
 15880  0005FE  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15881  000602  0E03               	movlw	3
 15882  000604  1792               	andwf	??__doprnt& (0+255),f,b
 15883  000606  B4D8               	btfsc	status,2,c
 15884  000608  D036               	goto	l1085
 15885                           
 15886                           ; BSR set to: 0
 15887                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 15888  00060A  EE20 F002          	lfsr	2,2
 15889  00060E  518C               	movf	__doprnt@pb& (0+255),w,b
 15890  000610  26D9               	addwf	fsr2l,f,c
 15891  000612  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15892  000614  22DA               	addwfc	fsr2h,f,c
 15893  000616  50DE               	movf	postinc2,w,c
 15894  000618  10DE               	iorwf	postinc2,w,c
 15895  00061A  B4D8               	btfsc	status,2,c
 15896  00061C  D016               	goto	l1084
 15897                           
 15898                           ; BSR set to: 0
 15899  00061E  EE20 F002          	lfsr	2,2
 15900  000622  518C               	movf	__doprnt@pb& (0+255),w,b
 15901  000624  26D9               	addwf	fsr2l,f,c
 15902  000626  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15903  000628  22DA               	addwfc	fsr2h,f,c
 15904  00062A  D801               	call	u5148
 15905  00062C  D024               	goto	l1085
 15906  00062E                     u5148:
 15907  00062E  FFFF               	dw	65535	; assembler added errata NOP
 15908  000630  0005               	push	
 15909  000632  6EFA               	movwf	pclath,c
 15910  000634  50DE               	movf	postinc2,w,c
 15911  000636  6EFD               	movwf	tosl,c
 15912  000638  50DE               	movf	postinc2,w,c
 15913  00063A  6EFE               	movwf	tosh,c
 15914  00063C  50F8               	movf	tblptru,w,c
 15915  00063E  6EFF               	movwf	tosu,c
 15916  000640  50FA               	movf	pclath,w,c
 15917  000642  0E2D               	movlw	45
 15918  000644  0012               	return		;indir
 15919  000646  FFFF               	dw	65535	; errata NOP
 15920  000648  D016               	goto	l1085
 15921  00064A                     l1084:
 15922  00064A  FFFF               	dw	65535	; assembler added errata NOP
 15923  00064C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15924  000650  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15925  000654  CFDE F092          	movff	postinc2,??__doprnt
 15926  000658  CFDD F093          	movff	postdec2,??__doprnt+1
 15927  00065C  C092  FFD9         	movff	??__doprnt,fsr2l
 15928  000660  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15929  000664  0E2D               	movlw	45
 15930  000666  6EDF               	movwf	indf2,c
 15931  000668  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15932  00066C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15933  000670  2ADE               	incf	postinc2,f,c
 15934  000672  0E00               	movlw	0
 15935  000674  22DD               	addwfc	postdec2,f,c
 15936  000676                     l1085:
 15937  000676  FFFF               	dw	65535	; assembler added errata NOP
 15938                           
 15939                           ;doprnt.c: 1415: if(width)
 15940  000678  0100               	movlb	0	; () banked
 15941  00067A  FFFF               	dw	65535	; assembler added errata NOP
 15942  00067C  519E               	movf	__doprnt@width& (0+255),w,b
 15943  00067E  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15944  000680  B4D8               	btfsc	status,2,c
 15945  000682  D0BE               	goto	l1099
 15946                           
 15947                           ; BSR set to: 0
 15948                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 15949                           
 15950                           ; BSR set to: 0
 15951                           
 15952                           ;doprnt.c: 1416: do
 15953  000684  EE20 F002          	lfsr	2,2
 15954  000688  518C               	movf	__doprnt@pb& (0+255),w,b
 15955  00068A  26D9               	addwf	fsr2l,f,c
 15956  00068C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15957  00068E  22DA               	addwfc	fsr2h,f,c
 15958  000690  50DE               	movf	postinc2,w,c
 15959  000692  10DE               	iorwf	postinc2,w,c
 15960  000694  B4D8               	btfsc	status,2,c
 15961  000696  D016               	goto	l1088
 15962                           
 15963                           ; BSR set to: 0
 15964  000698  EE20 F002          	lfsr	2,2
 15965  00069C  518C               	movf	__doprnt@pb& (0+255),w,b
 15966  00069E  26D9               	addwf	fsr2l,f,c
 15967  0006A0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15968  0006A2  22DA               	addwfc	fsr2h,f,c
 15969  0006A4  D801               	call	u5178
 15970  0006A6  D024               	goto	l1089
 15971  0006A8                     u5178:
 15972  0006A8  FFFF               	dw	65535	; assembler added errata NOP
 15973  0006AA  0005               	push	
 15974  0006AC  6EFA               	movwf	pclath,c
 15975  0006AE  50DE               	movf	postinc2,w,c
 15976  0006B0  6EFD               	movwf	tosl,c
 15977  0006B2  50DE               	movf	postinc2,w,c
 15978  0006B4  6EFE               	movwf	tosh,c
 15979  0006B6  50F8               	movf	tblptru,w,c
 15980  0006B8  6EFF               	movwf	tosu,c
 15981  0006BA  50FA               	movf	pclath,w,c
 15982  0006BC  0E30               	movlw	48
 15983  0006BE  0012               	return		;indir
 15984  0006C0  FFFF               	dw	65535	; errata NOP
 15985  0006C2  D016               	goto	l1089
 15986  0006C4                     l1088:
 15987  0006C4  FFFF               	dw	65535	; assembler added errata NOP
 15988  0006C6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15989  0006CA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15990  0006CE  CFDE F092          	movff	postinc2,??__doprnt
 15991  0006D2  CFDD F093          	movff	postdec2,??__doprnt+1
 15992  0006D6  C092  FFD9         	movff	??__doprnt,fsr2l
 15993  0006DA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15994  0006DE  0E30               	movlw	48
 15995  0006E0  6EDF               	movwf	indf2,c
 15996  0006E2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15997  0006E6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15998  0006EA  2ADE               	incf	postinc2,f,c
 15999  0006EC  0E00               	movlw	0
 16000  0006EE  22DD               	addwfc	postdec2,f,c
 16001  0006F0                     l1089:
 16002  0006F0  FFFF               	dw	65535	; assembler added errata NOP
 16003                           
 16004                           ;doprnt.c: 1418: while(--width);
 16005  0006F2  0100               	movlb	0	; () banked
 16006  0006F4  079E               	decf	__doprnt@width& (0+255),f,b
 16007  0006F6  A0D8               	btfss	status,0,c
 16008  0006F8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16009  0006FA  D7BF               	goto	L46
 16010  0006FC                     l1082:
 16011  0006FC  FFFF               	dw	65535	; assembler added errata NOP
 16012                           
 16013                           ; BSR set to: 0
 16014                           ;doprnt.c: 1422: {
 16015                           ;doprnt.c: 1424: if(width
 16016                           ;doprnt.c: 1428: )
 16017                           
 16018                           ; BSR set to: 0
 16019  0006FE  519E               	movf	__doprnt@width& (0+255),w,b
 16020  000700  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16021  000702  B4D8               	btfsc	status,2,c
 16022  000704  D040               	goto	u5220
 16023  000706                     u5190:
 16024  000706  FFFF               	dw	65535	; assembler added errata NOP
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 16028                           
 16029                           ; BSR set to: 0
 16030                           
 16031                           ;doprnt.c: 1429: do
 16032  000708  EE20 F002          	lfsr	2,2
 16033  00070C  518C               	movf	__doprnt@pb& (0+255),w,b
 16034  00070E  26D9               	addwf	fsr2l,f,c
 16035  000710  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16036  000712  22DA               	addwfc	fsr2h,f,c
 16037  000714  50DE               	movf	postinc2,w,c
 16038  000716  10DE               	iorwf	postinc2,w,c
 16039  000718  B4D8               	btfsc	status,2,c
 16040  00071A  D016               	goto	l1094
 16041                           
 16042                           ; BSR set to: 0
 16043  00071C  EE20 F002          	lfsr	2,2
 16044  000720  518C               	movf	__doprnt@pb& (0+255),w,b
 16045  000722  26D9               	addwf	fsr2l,f,c
 16046  000724  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16047  000726  22DA               	addwfc	fsr2h,f,c
 16048  000728  D801               	call	u5218
 16049  00072A  D024               	goto	l1095
 16050  00072C                     u5218:
 16051  00072C  FFFF               	dw	65535	; assembler added errata NOP
 16052  00072E  0005               	push	
 16053  000730  6EFA               	movwf	pclath,c
 16054  000732  50DE               	movf	postinc2,w,c
 16055  000734  6EFD               	movwf	tosl,c
 16056  000736  50DE               	movf	postinc2,w,c
 16057  000738  6EFE               	movwf	tosh,c
 16058  00073A  50F8               	movf	tblptru,w,c
 16059  00073C  6EFF               	movwf	tosu,c
 16060  00073E  50FA               	movf	pclath,w,c
 16061  000740  0E20               	movlw	32
 16062  000742  0012               	return		;indir
 16063  000744  FFFF               	dw	65535	; errata NOP
 16064  000746  D016               	goto	l1095
 16065  000748                     l1094:
 16066  000748  FFFF               	dw	65535	; assembler added errata NOP
 16067  00074A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16068  00074E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16069  000752  CFDE F092          	movff	postinc2,??__doprnt
 16070  000756  CFDD F093          	movff	postdec2,??__doprnt+1
 16071  00075A  C092  FFD9         	movff	??__doprnt,fsr2l
 16072  00075E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16073  000762  0E20               	movlw	32
 16074  000764  6EDF               	movwf	indf2,c
 16075  000766  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16076  00076A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16077  00076E  2ADE               	incf	postinc2,f,c
 16078  000770  0E00               	movlw	0
 16079  000772  22DD               	addwfc	postdec2,f,c
 16080  000774                     l1095:
 16081  000774  FFFF               	dw	65535	; assembler added errata NOP
 16082                           
 16083                           ;doprnt.c: 1431: while(--width);
 16084  000776  0100               	movlb	0	; () banked
 16085  000778  079E               	decf	__doprnt@width& (0+255),f,b
 16086  00077A  A0D8               	btfss	status,0,c
 16087  00077C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16088  00077E  519E               	movf	__doprnt@width& (0+255),w,b
 16089  000780  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16090  000782  A4D8               	btfss	status,2,c
 16091  000784  D7C0               	goto	u5190
 16092  000786                     u5220:
 16093  000786  FFFF               	dw	65535	; assembler added errata NOP
 16094                           
 16095                           ; BSR set to: 0
 16096                           ;doprnt.c: 1438: if(flag & 0x03)
 16097                           
 16098                           ; BSR set to: 0
 16099                           
 16100                           ; BSR set to: 0
 16101  000788  C09B  F092         	movff	__doprnt@flag,??__doprnt
 16102  00078C  0E03               	movlw	3
 16103  00078E  1792               	andwf	??__doprnt& (0+255),f,b
 16104  000790  B4D8               	btfsc	status,2,c
 16105  000792  D036               	goto	l1099
 16106                           
 16107                           ; BSR set to: 0
 16108                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 16109  000794  EE20 F002          	lfsr	2,2
 16110  000798  518C               	movf	__doprnt@pb& (0+255),w,b
 16111  00079A  26D9               	addwf	fsr2l,f,c
 16112  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16113  00079E  22DA               	addwfc	fsr2h,f,c
 16114  0007A0  50DE               	movf	postinc2,w,c
 16115  0007A2  10DE               	iorwf	postinc2,w,c
 16116  0007A4  B4D8               	btfsc	status,2,c
 16117  0007A6  D016               	goto	l1098
 16118                           
 16119                           ; BSR set to: 0
 16120  0007A8  EE20 F002          	lfsr	2,2
 16121  0007AC  518C               	movf	__doprnt@pb& (0+255),w,b
 16122  0007AE  26D9               	addwf	fsr2l,f,c
 16123  0007B0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16124  0007B2  22DA               	addwfc	fsr2h,f,c
 16125  0007B4  D801               	call	u5258
 16126  0007B6  D024               	goto	l1099
 16127  0007B8                     u5258:
 16128  0007B8  FFFF               	dw	65535	; assembler added errata NOP
 16129  0007BA  0005               	push	
 16130  0007BC  6EFA               	movwf	pclath,c
 16131  0007BE  50DE               	movf	postinc2,w,c
 16132  0007C0  6EFD               	movwf	tosl,c
 16133  0007C2  50DE               	movf	postinc2,w,c
 16134  0007C4  6EFE               	movwf	tosh,c
 16135  0007C6  50F8               	movf	tblptru,w,c
 16136  0007C8  6EFF               	movwf	tosu,c
 16137  0007CA  50FA               	movf	pclath,w,c
 16138  0007CC  0E2D               	movlw	45
 16139  0007CE  0012               	return		;indir
 16140  0007D0  FFFF               	dw	65535	; errata NOP
 16141  0007D2  D016               	goto	l1099
 16142  0007D4                     l1098:
 16143  0007D4  FFFF               	dw	65535	; assembler added errata NOP
 16144  0007D6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16145  0007DA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16146  0007DE  CFDE F092          	movff	postinc2,??__doprnt
 16147  0007E2  CFDD F093          	movff	postdec2,??__doprnt+1
 16148  0007E6  C092  FFD9         	movff	??__doprnt,fsr2l
 16149  0007EA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16150  0007EE  0E2D               	movlw	45
 16151  0007F0  6EDF               	movwf	indf2,c
 16152  0007F2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16153  0007F6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16154  0007FA  2ADE               	incf	postinc2,f,c
 16155  0007FC  0E00               	movlw	0
 16156  0007FE  22DD               	addwfc	postdec2,f,c
 16157  000800                     l1099:
 16158  000800  FFFF               	dw	65535	; assembler added errata NOP
 16159                           
 16160                           ;doprnt.c: 1469: }
 16161                           ;doprnt.c: 1472: prec = c;
 16162  000802  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 16163                           
 16164                           ;doprnt.c: 1474: while(prec--) {
 16165  000806  D05D               	goto	l1103
 16166  000808  FFFF               	dw	65535	; assembler added errata NOP
 16167                           
 16168                           ;doprnt.c: 1478: {
 16169                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16170  00080A  0100               	movlb	0	; () banked
 16171  00080C  5196               	movf	__doprnt@prec& (0+255),w,b
 16172  00080E  0D02               	mullw	2
 16173  000810  0ECD               	movlw	low _dpowers
 16174  000812  24F3               	addwf	prodl,w,c
 16175  000814  6EF6               	movwf	tblptrl,c
 16176  000816  0E7A               	movlw	high _dpowers
 16177  000818  20F4               	addwfc	prodh,w,c
 16178  00081A  6EF7               	movwf	tblptrh,c
 16179  00081C                     	if	0	;There are less than 3 active tblptr bytes
 16180  00081C                     	endif
 16181  00081C  0009               	tblrd		*+
 16182  00081E  FFFF               	dw	65535	; errata NOP
 16183  000820  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16184  000824  000A               	tblrd		*-
 16185  000826  FFFF               	dw	65535	; errata NOP
 16186  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16187  00082C  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 16188  000830  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 16189  000834  ECE7  F03A         	call	___lwdiv
 16190  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16191  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16192  000840  0E00               	movlw	0
 16193  000842  0100               	movlb	0	; () banked
 16194  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16195  000846  0E0A               	movlw	10
 16196  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
 16197  00084A  EC38  F03A         	call	___lwmod	;wreg free
 16198  00084E  0100               	movlb	0	; () banked
 16199  000850  5187               	movf	?___lwmod& (0+255),w,b
 16200  000852  0F30               	addlw	48
 16201  000854  6FA0               	movwf	__doprnt@c& (0+255),b
 16202                           
 16203                           ; BSR set to: 0
 16204                           ;doprnt.c: 1523: }
 16205                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 16206  000856  EE20 F002          	lfsr	2,2
 16207  00085A  518C               	movf	__doprnt@pb& (0+255),w,b
 16208  00085C  26D9               	addwf	fsr2l,f,c
 16209  00085E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16210  000860  22DA               	addwfc	fsr2h,f,c
 16211  000862  50DE               	movf	postinc2,w,c
 16212  000864  10DE               	iorwf	postinc2,w,c
 16213  000866  B4D8               	btfsc	status,2,c
 16214  000868  D016               	goto	l1102
 16215                           
 16216                           ; BSR set to: 0
 16217  00086A  EE20 F002          	lfsr	2,2
 16218  00086E  518C               	movf	__doprnt@pb& (0+255),w,b
 16219  000870  26D9               	addwf	fsr2l,f,c
 16220  000872  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16221  000874  22DA               	addwfc	fsr2h,f,c
 16222  000876  D801               	call	u5278
 16223  000878  D024               	goto	l1103
 16224  00087A                     u5278:
 16225  00087A  FFFF               	dw	65535	; assembler added errata NOP
 16226  00087C  0005               	push	
 16227  00087E  6EFA               	movwf	pclath,c
 16228  000880  50DE               	movf	postinc2,w,c
 16229  000882  6EFD               	movwf	tosl,c
 16230  000884  50DE               	movf	postinc2,w,c
 16231  000886  6EFE               	movwf	tosh,c
 16232  000888  50F8               	movf	tblptru,w,c
 16233  00088A  6EFF               	movwf	tosu,c
 16234  00088C  50FA               	movf	pclath,w,c
 16235  00088E  51A0               	movf	__doprnt@c& (0+255),w,b
 16236  000890  0012               	return		;indir
 16237  000892  FFFF               	dw	65535	; errata NOP
 16238  000894  D016               	goto	l1103
 16239  000896                     l1102:
 16240  000896  FFFF               	dw	65535	; assembler added errata NOP
 16241  000898  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16242  00089C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16243  0008A0  CFDE F092          	movff	postinc2,??__doprnt
 16244  0008A4  CFDD F093          	movff	postdec2,??__doprnt+1
 16245  0008A8  C092  FFD9         	movff	??__doprnt,fsr2l
 16246  0008AC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16247  0008B0  C0A0  FFDF         	movff	__doprnt@c,indf2
 16248  0008B4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16249  0008B8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16250  0008BC  2ADE               	incf	postinc2,f,c
 16251  0008BE  0E00               	movlw	0
 16252  0008C0  22DD               	addwfc	postdec2,f,c
 16253  0008C2                     l1103:
 16254  0008C2  FFFF               	dw	65535	; assembler added errata NOP
 16255  0008C4  0100               	movlb	0	; () banked
 16256  0008C6  0796               	decf	__doprnt@prec& (0+255),f,b
 16257  0008C8  2996               	incf	__doprnt@prec& (0+255),w,b
 16258  0008CA  A4D8               	btfss	status,2,c
 16259  0008CC  D79D               	goto	l1101
 16260  0008CE                     u5280:
 16261  0008CE  FFFF               	dw	65535	; assembler added errata NOP
 16262                           
 16263                           ; BSR set to: 0
 16264                           
 16265                           ; BSR set to: 0
 16266  0008D0  0100               	movlb	0	; () banked
 16267  0008D2  518E               	movf	__doprnt@f& (0+255),w,b
 16268  0008D4  6F92               	movwf	??__doprnt& (0+255),b
 16269  0008D6  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 16270  0008D8  6F93               	movwf	(??__doprnt+1)& (0+255),b
 16271  0008DA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 16272  0008DC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 16273  0008DE  C092  FFF6         	movff	??__doprnt,tblptrl
 16274  0008E2  C093  FFF7         	movff	??__doprnt+1,tblptrh
 16275  0008E6  6AF8               	clrf	tblptru,c
 16276  0008E8  0E05               	movlw	(high __ramtop+-1)
 16277  0008EA  64F7               	cpfsgt	tblptrh,c
 16278  0008EC  D004               	bra	u5297
 16279  0008EE  0008               	tblrd		*
 16280  0008F0  FFFF               	dw	65535	; errata NOP
 16281  0008F2  50F5               	movf	tablat,w,c
 16282  0008F4  D005               	bra	u5290
 16283  0008F6                     u5297:
 16284  0008F6  CFF6 FFE9          	movff	tblptrl,fsr0l
 16285  0008FA  CFF7 FFEA          	movff	tblptrh,fsr0h
 16286  0008FE  50EF               	movf	indf0,w,c
 16287  000900                     u5290:
 16288  000900  0100               	movlb	0	; () banked
 16289  000902  6FA0               	movwf	__doprnt@c& (0+255),b
 16290  000904  51A0               	movf	__doprnt@c& (0+255),w,b
 16291  000906  A4D8               	btfss	status,2,c
 16292  000908  D40B               	goto	l1036
 16293  00090A                     u5300:
 16294  00090A  FFFF               	dw	65535	; assembler added errata NOP
 16295                           
 16296                           ;doprnt.c: 1540: return 0;
 16297                           
 16298                           ; BSR set to: 0
 16299                           
 16300                           ;doprnt.c: 1525: }
 16301                           ;doprnt.c: 1533: }
 16302                           ;doprnt.c: 1535: alldone:
 16303                           
 16304                           ; BSR set to: 0
 16305  00090C  0E00               	movlw	0
 16306  00090E  0100               	movlb	0	; () banked
 16307  000910  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 16308  000912  0E00               	movlw	0
 16309  000914  6F8C               	movwf	?__doprnt& (0+255),b
 16310                           
 16311                           ; BSR set to: 0
 16312                           
 16313                           ; BSR set to: 0
 16314  000916  0012               	return		;funcret
 16315  000918  FFFF               	dw	65535	; errata NOP
 16316  00091A                     __end_of__doprnt:
 16317                           	opt stack 0
 16318                           tosu	equ	0xFFF
 16319                           tosh	equ	0xFFE
 16320                           tosl	equ	0xFFD
 16321                           pclath	equ	0xFFA
 16322                           tblptru	equ	0xFF8
 16323                           tblptrh	equ	0xFF7
 16324                           tblptrl	equ	0xFF6
 16325                           tablat	equ	0xFF5
 16326                           prodh	equ	0xFF4
 16327                           prodl	equ	0xFF3
 16328                           intcon	equ	0xFF2
 16329                           indf0	equ	0xFEF
 16330                           postinc0	equ	0xFEE
 16331                           fsr0h	equ	0xFEA
 16332                           fsr0l	equ	0xFE9
 16333                           wreg	equ	0xFE8
 16334                           postdec1	equ	0xFE5
 16335                           fsr1l	equ	0xFE1
 16336                           indf2	equ	0xFDF
 16337                           postinc2	equ	0xFDE
 16338                           postdec2	equ	0xFDD
 16339                           fsr2h	equ	0xFDA
 16340                           fsr2l	equ	0xFD9
 16341                           status	equ	0xFD8
 16342                           
 16343 ;; *************** function _putch *****************
 16344 ;; Defined at:
 16345 ;;		line 16 in file "serial.h"
 16346 ;; Parameters:    Size  Location     Type
 16347 ;;  c               1    wreg     unsigned char 
 16348 ;; Auto vars:     Size  Location     Type
 16349 ;;  c               1    0[BANK0 ] unsigned char 
 16350 ;; Return value:  Size  Location     Type
 16351 ;;                  1    wreg      void 
 16352 ;; Registers used:
 16353 ;;		wreg
 16354 ;; Tracked objects:
 16355 ;;		On entry : 0/0
 16356 ;;		On exit  : 0/0
 16357 ;;		Unchanged: 0/0
 16358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16359 ;;      Params:         0       0       0       0       0       0       0
 16360 ;;      Locals:         0       1       0       0       0       0       0
 16361 ;;      Temps:          0       0       0       0       0       0       0
 16362 ;;      Totals:         0       1       0       0       0       0       0
 16363 ;;Total ram usage:        1 bytes
 16364 ;; Hardware stack levels used:    1
 16365 ;; Hardware stack levels required when called:    6
 16366 ;; This function calls:
 16367 ;;		Nothing
 16368 ;; This function is called by:
 16369 ;;		_printf
 16370 ;;		__doprnt
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           	psect	text49
 16375  006D30                     __ptext49:
 16376                           	opt stack 0
 16377  006D30                     _putch:
 16378                           	opt stack 0
 16379  006D30  FFFF               	dw	65535	; assembler added errata NOP
 16380                           
 16381                           ; BSR set to: 0
 16382                           ;incstack = 0
 16383                           ;putch@c stored from wreg
 16384  006D32  0100               	movlb	0	; () banked
 16385  006D34  6F80               	movwf	putch@c& (0+255),b
 16386  006D36  FFFF               	dw	65535	; assembler added errata NOP
 16387                           
 16388                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 16389  006D38  A2AC               	btfss	4012,1,c	;volatile
 16390  006D3A  D7FD               	goto	l4836
 16391                           
 16392                           ;serial.h: 18: TXREG = c;
 16393  006D3C  C080  FFAD         	movff	putch@c,4013	;volatile
 16394  006D40  0012               	return		;funcret
 16395  006D42  FFFF               	dw	65535	; errata NOP
 16396  006D44                     __end_of_putch:
 16397                           	opt stack 0
 16398                           tosu	equ	0xFFF
 16399                           tosh	equ	0xFFE
 16400                           tosl	equ	0xFFD
 16401                           pclath	equ	0xFFA
 16402                           tblptru	equ	0xFF8
 16403                           tblptrh	equ	0xFF7
 16404                           tblptrl	equ	0xFF6
 16405                           tablat	equ	0xFF5
 16406                           prodh	equ	0xFF4
 16407                           prodl	equ	0xFF3
 16408                           intcon	equ	0xFF2
 16409                           indf0	equ	0xFEF
 16410                           postinc0	equ	0xFEE
 16411                           fsr0h	equ	0xFEA
 16412                           fsr0l	equ	0xFE9
 16413                           wreg	equ	0xFE8
 16414                           postdec1	equ	0xFE5
 16415                           fsr1l	equ	0xFE1
 16416                           indf2	equ	0xFDF
 16417                           postinc2	equ	0xFDE
 16418                           postdec2	equ	0xFDD
 16419                           fsr2h	equ	0xFDA
 16420                           fsr2l	equ	0xFD9
 16421                           status	equ	0xFD8
 16422                           
 16423 ;; *************** function _isdigit *****************
 16424 ;; Defined at:
 16425 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 16426 ;; Parameters:    Size  Location     Type
 16427 ;;  c               1    wreg     unsigned char 
 16428 ;; Auto vars:     Size  Location     Type
 16429 ;;  c               1    2[BANK0 ] unsigned char 
 16430 ;; Return value:  Size  Location     Type
 16431 ;;		None               void
 16432 ;; Registers used:
 16433 ;;		wreg, status,2, status,0
 16434 ;; Tracked objects:
 16435 ;;		On entry : 0/0
 16436 ;;		On exit  : 0/0
 16437 ;;		Unchanged: 0/0
 16438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16439 ;;      Params:         0       0       0       0       0       0       0
 16440 ;;      Locals:         0       2       0       0       0       0       0
 16441 ;;      Temps:          0       1       0       0       0       0       0
 16442 ;;      Totals:         0       3       0       0       0       0       0
 16443 ;;Total ram usage:        3 bytes
 16444 ;; Hardware stack levels used:    1
 16445 ;; Hardware stack levels required when called:    6
 16446 ;; This function calls:
 16447 ;;		Nothing
 16448 ;; This function is called by:
 16449 ;;		__doprnt
 16450 ;;		_atoi
 16451 ;; This function uses a non-reentrant model
 16452 ;;
 16453                           
 16454                           	psect	text50
 16455  006E18                     __ptext50:
 16456                           	opt stack 0
 16457  006E18                     _isdigit:
 16458                           	opt stack 0
 16459  006E18  FFFF               	dw	65535	; assembler added errata NOP
 16460                           
 16461                           ;incstack = 0
 16462                           ;isdigit@c stored from wreg
 16463  006E1A  0100               	movlb	0	; () banked
 16464  006E1C  6F82               	movwf	isdigit@c& (0+255),b
 16465  006E1E  0E00               	movlw	0
 16466  006E20  0100               	movlb	0	; () banked
 16467  006E22  6F81               	movwf	_isdigit$1866& (0+255),b
 16468                           
 16469                           ; BSR set to: 0
 16470  006E24  0E3A               	movlw	58
 16471  006E26  6182               	cpfslt	isdigit@c& (0+255),b
 16472  006E28  D005               	goto	l1451
 16473                           
 16474                           ; BSR set to: 0
 16475  006E2A  0E2F               	movlw	47
 16476  006E2C  6582               	cpfsgt	isdigit@c& (0+255),b
 16477  006E2E  D002               	goto	l1451
 16478                           
 16479                           ; BSR set to: 0
 16480  006E30  0E01               	movlw	1
 16481  006E32  6F81               	movwf	_isdigit$1866& (0+255),b
 16482  006E34                     l1451:
 16483  006E34  FFFF               	dw	65535	; assembler added errata NOP
 16484                           
 16485                           ; BSR set to: 0
 16486                           
 16487                           ; BSR set to: 0
 16488  006E36  C081  F080         	movff	_isdigit$1866,??_isdigit
 16489  006E3A  3180               	rrcf	??_isdigit& (0+255),w,b
 16490                           
 16491                           ; BSR set to: 0
 16492                           
 16493                           ; BSR set to: 0
 16494  006E3C  0012               	return		;funcret
 16495  006E3E  FFFF               	dw	65535	; errata NOP
 16496  006E40                     __end_of_isdigit:
 16497                           	opt stack 0
 16498                           tosu	equ	0xFFF
 16499                           tosh	equ	0xFFE
 16500                           tosl	equ	0xFFD
 16501                           pclath	equ	0xFFA
 16502                           tblptru	equ	0xFF8
 16503                           tblptrh	equ	0xFF7
 16504                           tblptrl	equ	0xFF6
 16505                           tablat	equ	0xFF5
 16506                           prodh	equ	0xFF4
 16507                           prodl	equ	0xFF3
 16508                           intcon	equ	0xFF2
 16509                           indf0	equ	0xFEF
 16510                           postinc0	equ	0xFEE
 16511                           fsr0h	equ	0xFEA
 16512                           fsr0l	equ	0xFE9
 16513                           wreg	equ	0xFE8
 16514                           postdec1	equ	0xFE5
 16515                           fsr1l	equ	0xFE1
 16516                           indf2	equ	0xFDF
 16517                           postinc2	equ	0xFDE
 16518                           postdec2	equ	0xFDD
 16519                           fsr2h	equ	0xFDA
 16520                           fsr2l	equ	0xFD9
 16521                           status	equ	0xFD8
 16522                           
 16523 ;; *************** function ___wmul *****************
 16524 ;; Defined at:
 16525 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16526 ;; Parameters:    Size  Location     Type
 16527 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16528 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16529 ;; Auto vars:     Size  Location     Type
 16530 ;;  product         2    4[BANK0 ] unsigned int 
 16531 ;; Return value:  Size  Location     Type
 16532 ;;                  2    0[BANK0 ] unsigned int 
 16533 ;; Registers used:
 16534 ;;		wreg, status,2, status,0, prodl, prodh
 16535 ;; Tracked objects:
 16536 ;;		On entry : 0/0
 16537 ;;		On exit  : 0/0
 16538 ;;		Unchanged: 0/0
 16539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16540 ;;      Params:         0       4       0       0       0       0       0
 16541 ;;      Locals:         0       2       0       0       0       0       0
 16542 ;;      Temps:          0       0       0       0       0       0       0
 16543 ;;      Totals:         0       6       0       0       0       0       0
 16544 ;;Total ram usage:        6 bytes
 16545 ;; Hardware stack levels used:    1
 16546 ;; Hardware stack levels required when called:    6
 16547 ;; This function calls:
 16548 ;;		Nothing
 16549 ;; This function is called by:
 16550 ;;		__doprnt
 16551 ;;		_atoi
 16552 ;; This function uses a non-reentrant model
 16553 ;;
 16554                           
 16555                           	psect	text51
 16556  006E94                     __ptext51:
 16557                           	opt stack 0
 16558  006E94                     ___wmul:
 16559                           	opt stack 0
 16560  006E94  FFFF               	dw	65535	; assembler added errata NOP
 16561                           
 16562                           ; BSR set to: 0
 16563                           ;incstack = 0
 16564  006E96  0100               	movlb	0	; () banked
 16565  006E98  5180               	movf	___wmul@multiplier& (0+255),w,b
 16566  006E9A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16567  006E9C  CFF3 F084          	movff	prodl,___wmul@product
 16568  006EA0  CFF4 F085          	movff	prodh,___wmul@product+1
 16569  006EA4  5180               	movf	___wmul@multiplier& (0+255),w,b
 16570  006EA6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16571  006EA8  50F3               	movf	prodl,w,c
 16572  006EAA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16573  006EAC  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16574  006EAE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16575  006EB0  50F3               	movf	prodl,w,c
 16576  006EB2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16577                           
 16578                           ; BSR set to: 0
 16579  006EB4  C084  F080         	movff	___wmul@product,?___wmul
 16580  006EB8  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16581                           
 16582                           ; BSR set to: 0
 16583                           
 16584                           ; BSR set to: 0
 16585  006EBC  0012               	return		;funcret
 16586  006EBE  FFFF               	dw	65535	; errata NOP
 16587  006EC0                     __end_of___wmul:
 16588                           	opt stack 0
 16589                           tosu	equ	0xFFF
 16590                           tosh	equ	0xFFE
 16591                           tosl	equ	0xFFD
 16592                           pclath	equ	0xFFA
 16593                           tblptru	equ	0xFF8
 16594                           tblptrh	equ	0xFF7
 16595                           tblptrl	equ	0xFF6
 16596                           tablat	equ	0xFF5
 16597                           prodh	equ	0xFF4
 16598                           prodl	equ	0xFF3
 16599                           intcon	equ	0xFF2
 16600                           indf0	equ	0xFEF
 16601                           postinc0	equ	0xFEE
 16602                           fsr0h	equ	0xFEA
 16603                           fsr0l	equ	0xFE9
 16604                           wreg	equ	0xFE8
 16605                           postdec1	equ	0xFE5
 16606                           fsr1l	equ	0xFE1
 16607                           indf2	equ	0xFDF
 16608                           postinc2	equ	0xFDE
 16609                           postdec2	equ	0xFDD
 16610                           fsr2h	equ	0xFDA
 16611                           fsr2l	equ	0xFD9
 16612                           status	equ	0xFD8
 16613                           
 16614 ;; *************** function ___lwmod *****************
 16615 ;; Defined at:
 16616 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16617 ;; Parameters:    Size  Location     Type
 16618 ;;  dividend        2    7[BANK0 ] unsigned int 
 16619 ;;  divisor         2    9[BANK0 ] unsigned int 
 16620 ;; Auto vars:     Size  Location     Type
 16621 ;;  counter         1   11[BANK0 ] unsigned char 
 16622 ;; Return value:  Size  Location     Type
 16623 ;;                  2    7[BANK0 ] unsigned int 
 16624 ;; Registers used:
 16625 ;;		wreg, status,2, status,0
 16626 ;; Tracked objects:
 16627 ;;		On entry : 0/0
 16628 ;;		On exit  : 0/0
 16629 ;;		Unchanged: 0/0
 16630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16631 ;;      Params:         0       4       0       0       0       0       0
 16632 ;;      Locals:         0       1       0       0       0       0       0
 16633 ;;      Temps:          0       0       0       0       0       0       0
 16634 ;;      Totals:         0       5       0       0       0       0       0
 16635 ;;Total ram usage:        5 bytes
 16636 ;; Hardware stack levels used:    1
 16637 ;; Hardware stack levels required when called:    6
 16638 ;; This function calls:
 16639 ;;		Nothing
 16640 ;; This function is called by:
 16641 ;;		__doprnt
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           	psect	text52
 16646  007470                     __ptext52:
 16647                           	opt stack 0
 16648  007470                     ___lwmod:
 16649                           	opt stack 0
 16650  007470  FFFF               	dw	65535	; assembler added errata NOP
 16651                           
 16652                           ; BSR set to: 0
 16653                           ;incstack = 0
 16654  007472  0100               	movlb	0	; () banked
 16655  007474  5189               	movf	___lwmod@divisor& (0+255),w,b
 16656  007476  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16657  007478  B4D8               	btfsc	status,2,c
 16658  00747A  D01C               	goto	l1545
 16659                           
 16660                           ; BSR set to: 0
 16661  00747C  0E01               	movlw	1
 16662  00747E  6F8B               	movwf	___lwmod@counter& (0+255),b
 16663  007480  D005               	goto	l1540
 16664  007482  FFFF               	dw	65535	; assembler added errata NOP
 16665                           
 16666                           ; BSR set to: 0
 16667                           
 16668                           ; BSR set to: 0
 16669  007484  90D8               	bcf	status,0,c
 16670  007486  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16671  007488  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16672  00748A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16673  00748C                     l1540:
 16674  00748C  FFFF               	dw	65535	; assembler added errata NOP
 16675                           
 16676                           ; BSR set to: 0
 16677                           
 16678                           ; BSR set to: 0
 16679  00748E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16680  007490  D7F8               	goto	l1541
 16681  007492                     u4620:
 16682  007492  FFFF               	dw	65535	; assembler added errata NOP
 16683                           
 16684                           ; BSR set to: 0
 16685                           
 16686                           ; BSR set to: 0
 16687                           
 16688                           ; BSR set to: 0
 16689  007494  5189               	movf	___lwmod@divisor& (0+255),w,b
 16690  007496  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16691  007498  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16692  00749A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16693  00749C  A0D8               	btfss	status,0,c
 16694  00749E  D004               	goto	l1544
 16695                           
 16696                           ; BSR set to: 0
 16697  0074A0  5189               	movf	___lwmod@divisor& (0+255),w,b
 16698  0074A2  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16699  0074A4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16700  0074A6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16701  0074A8                     l1544:
 16702  0074A8  FFFF               	dw	65535	; assembler added errata NOP
 16703                           
 16704                           ; BSR set to: 0
 16705                           
 16706                           ; BSR set to: 0
 16707  0074AA  90D8               	bcf	status,0,c
 16708  0074AC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16709  0074AE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16710                           
 16711                           ; BSR set to: 0
 16712  0074B0  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16713  0074B2  D7EF               	goto	u4620
 16714  0074B4                     l1545:
 16715  0074B4  FFFF               	dw	65535	; assembler added errata NOP
 16716                           
 16717                           ; BSR set to: 0
 16718                           
 16719                           ; BSR set to: 0
 16720  0074B6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16721  0074BA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16722                           
 16723                           ; BSR set to: 0
 16724  0074BE  0012               	return		;funcret
 16725  0074C0  FFFF               	dw	65535	; errata NOP
 16726  0074C2                     __end_of___lwmod:
 16727                           	opt stack 0
 16728                           tosu	equ	0xFFF
 16729                           tosh	equ	0xFFE
 16730                           tosl	equ	0xFFD
 16731                           pclath	equ	0xFFA
 16732                           tblptru	equ	0xFF8
 16733                           tblptrh	equ	0xFF7
 16734                           tblptrl	equ	0xFF6
 16735                           tablat	equ	0xFF5
 16736                           prodh	equ	0xFF4
 16737                           prodl	equ	0xFF3
 16738                           intcon	equ	0xFF2
 16739                           indf0	equ	0xFEF
 16740                           postinc0	equ	0xFEE
 16741                           fsr0h	equ	0xFEA
 16742                           fsr0l	equ	0xFE9
 16743                           wreg	equ	0xFE8
 16744                           postdec1	equ	0xFE5
 16745                           fsr1l	equ	0xFE1
 16746                           indf2	equ	0xFDF
 16747                           postinc2	equ	0xFDE
 16748                           postdec2	equ	0xFDD
 16749                           fsr2h	equ	0xFDA
 16750                           fsr2l	equ	0xFD9
 16751                           status	equ	0xFD8
 16752                           
 16753 ;; *************** function ___lwdiv *****************
 16754 ;; Defined at:
 16755 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 16756 ;; Parameters:    Size  Location     Type
 16757 ;;  dividend        2    0[BANK0 ] unsigned int 
 16758 ;;  divisor         2    2[BANK0 ] unsigned int 
 16759 ;; Auto vars:     Size  Location     Type
 16760 ;;  quotient        2    4[BANK0 ] unsigned int 
 16761 ;;  counter         1    6[BANK0 ] unsigned char 
 16762 ;; Return value:  Size  Location     Type
 16763 ;;                  2    0[BANK0 ] unsigned int 
 16764 ;; Registers used:
 16765 ;;		wreg, status,2, status,0
 16766 ;; Tracked objects:
 16767 ;;		On entry : 0/0
 16768 ;;		On exit  : 0/0
 16769 ;;		Unchanged: 0/0
 16770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16771 ;;      Params:         0       4       0       0       0       0       0
 16772 ;;      Locals:         0       3       0       0       0       0       0
 16773 ;;      Temps:          0       0       0       0       0       0       0
 16774 ;;      Totals:         0       7       0       0       0       0       0
 16775 ;;Total ram usage:        7 bytes
 16776 ;; Hardware stack levels used:    1
 16777 ;; Hardware stack levels required when called:    6
 16778 ;; This function calls:
 16779 ;;		Nothing
 16780 ;; This function is called by:
 16781 ;;		__doprnt
 16782 ;; This function uses a non-reentrant model
 16783 ;;
 16784                           
 16785                           	psect	text53
 16786  0075CE                     __ptext53:
 16787                           	opt stack 0
 16788  0075CE                     ___lwdiv:
 16789                           	opt stack 0
 16790  0075CE  FFFF               	dw	65535	; assembler added errata NOP
 16791                           
 16792                           ; BSR set to: 0
 16793                           ;incstack = 0
 16794  0075D0  0E00               	movlw	0
 16795  0075D2  0100               	movlb	0	; () banked
 16796  0075D4  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16797  0075D6  0E00               	movlw	0
 16798  0075D8  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16799                           
 16800                           ; BSR set to: 0
 16801  0075DA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16802  0075DC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16803  0075DE  B4D8               	btfsc	status,2,c
 16804  0075E0  D020               	goto	l1535
 16805                           
 16806                           ; BSR set to: 0
 16807  0075E2  0E01               	movlw	1
 16808  0075E4  6F86               	movwf	___lwdiv@counter& (0+255),b
 16809  0075E6  D005               	goto	l1530
 16810  0075E8  FFFF               	dw	65535	; assembler added errata NOP
 16811                           
 16812                           ; BSR set to: 0
 16813                           
 16814                           ; BSR set to: 0
 16815  0075EA  90D8               	bcf	status,0,c
 16816  0075EC  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16817  0075EE  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16818  0075F0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16819  0075F2                     l1530:
 16820  0075F2  FFFF               	dw	65535	; assembler added errata NOP
 16821                           
 16822                           ; BSR set to: 0
 16823                           
 16824                           ; BSR set to: 0
 16825  0075F4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16826  0075F6  D7F8               	goto	l1531
 16827  0075F8                     u4590:
 16828  0075F8  FFFF               	dw	65535	; assembler added errata NOP
 16829                           
 16830                           ; BSR set to: 0
 16831                           
 16832                           ; BSR set to: 0
 16833                           
 16834                           ; BSR set to: 0
 16835  0075FA  90D8               	bcf	status,0,c
 16836  0075FC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16837  0075FE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16838                           
 16839                           ; BSR set to: 0
 16840  007600  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16841  007602  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16842  007604  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16843  007606  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16844  007608  A0D8               	btfss	status,0,c
 16845  00760A  D005               	goto	l1534
 16846                           
 16847                           ; BSR set to: 0
 16848  00760C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16849  00760E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16850  007610  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16851  007612  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16852                           
 16853                           ; BSR set to: 0
 16854  007614  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16855  007616                     l1534:
 16856  007616  FFFF               	dw	65535	; assembler added errata NOP
 16857                           
 16858                           ; BSR set to: 0
 16859                           
 16860                           ; BSR set to: 0
 16861  007618  90D8               	bcf	status,0,c
 16862  00761A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16863  00761C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16864                           
 16865                           ; BSR set to: 0
 16866  00761E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16867  007620  D7EB               	goto	u4590
 16868  007622                     l1535:
 16869  007622  FFFF               	dw	65535	; assembler added errata NOP
 16870                           
 16871                           ; BSR set to: 0
 16872                           
 16873                           ; BSR set to: 0
 16874  007624  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16875  007628  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16876                           
 16877                           ; BSR set to: 0
 16878  00762C  0012               	return		;funcret
 16879  00762E  FFFF               	dw	65535	; errata NOP
 16880  007630                     __end_of___lwdiv:
 16881                           	opt stack 0
 16882                           tosu	equ	0xFFF
 16883                           tosh	equ	0xFFE
 16884                           tosl	equ	0xFFD
 16885                           pclath	equ	0xFFA
 16886                           tblptru	equ	0xFF8
 16887                           tblptrh	equ	0xFF7
 16888                           tblptrl	equ	0xFF6
 16889                           tablat	equ	0xFF5
 16890                           prodh	equ	0xFF4
 16891                           prodl	equ	0xFF3
 16892                           intcon	equ	0xFF2
 16893                           indf0	equ	0xFEF
 16894                           postinc0	equ	0xFEE
 16895                           fsr0h	equ	0xFEA
 16896                           fsr0l	equ	0xFE9
 16897                           wreg	equ	0xFE8
 16898                           postdec1	equ	0xFE5
 16899                           fsr1l	equ	0xFE1
 16900                           indf2	equ	0xFDF
 16901                           postinc2	equ	0xFDE
 16902                           postdec2	equ	0xFDD
 16903                           fsr2h	equ	0xFDA
 16904                           fsr2l	equ	0xFD9
 16905                           status	equ	0xFD8
 16906                           
 16907 ;; *************** function _limparBuffer *****************
 16908 ;; Defined at:
 16909 ;;		line 34 in file "serial.h"
 16910 ;; Parameters:    Size  Location     Type
 16911 ;;		None
 16912 ;; Auto vars:     Size  Location     Type
 16913 ;;		None
 16914 ;; Return value:  Size  Location     Type
 16915 ;;                  1    wreg      void 
 16916 ;; Registers used:
 16917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16918 ;; Tracked objects:
 16919 ;;		On entry : 0/0
 16920 ;;		On exit  : 0/0
 16921 ;;		Unchanged: 0/0
 16922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16923 ;;      Params:         0       0       0       0       0       0       0
 16924 ;;      Locals:         0       0       0       0       0       0       0
 16925 ;;      Temps:          0       0       0       0       0       0       0
 16926 ;;      Totals:         0       0       0       0       0       0       0
 16927 ;;Total ram usage:        0 bytes
 16928 ;; Hardware stack levels used:    1
 16929 ;; Hardware stack levels required when called:    7
 16930 ;; This function calls:
 16931 ;;		_delay
 16932 ;;		_memset
 16933 ;; This function is called by:
 16934 ;;		_getSinalSIM800L
 16935 ;;		_comunicarTeste
 16936 ;;		_enviaSMS
 16937 ;; This function uses a non-reentrant model
 16938 ;;
 16939                           
 16940                           	psect	text54
 16941  006FC4                     __ptext54:
 16942                           	opt stack 0
 16943  006FC4                     _limparBuffer:
 16944                           	opt stack 0
 16945  006FC4  FFFF               	dw	65535	; assembler added errata NOP
 16946                           
 16947                           ;serial.h: 35: cbf = 0;
 16948                           
 16949                           ; BSR set to: 0
 16950                           ;incstack = 0
 16951  006FC6  0E00               	movlw	0
 16952  006FC8  6E66               	movwf	_cbf,c
 16953                           
 16954                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
 16955  006FCA  0E00               	movlw	low _bufferSerial
 16956  006FCC  0100               	movlb	0	; () banked
 16957  006FCE  6F80               	movwf	memset@p1& (0+255),b
 16958  006FD0  0E01               	movlw	high _bufferSerial
 16959  006FD2  6F81               	movwf	(memset@p1+1)& (0+255),b
 16960  006FD4  0E00               	movlw	0
 16961  006FD6  6F83               	movwf	(memset@c+1)& (0+255),b
 16962  006FD8  0E00               	movlw	0
 16963  006FDA  6F82               	movwf	memset@c& (0+255),b
 16964  006FDC  0E00               	movlw	0
 16965  006FDE  6F85               	movwf	(memset@n+1)& (0+255),b
 16966  006FE0  0E3C               	movlw	60
 16967  006FE2  6F84               	movwf	memset@n& (0+255),b
 16968  006FE4  EC50  F038         	call	_memset
 16969                           
 16970                           ;serial.h: 37: delay(150);
 16971  006FE8  0E00               	movlw	0
 16972  006FEA  0100               	movlb	0	; () banked
 16973  006FEC  6F81               	movwf	(delay@x+1)& (0+255),b
 16974  006FEE  0E96               	movlw	150
 16975  006FF0  6F80               	movwf	delay@x& (0+255),b
 16976  006FF2  ECC7  F037         	call	_delay	;wreg free
 16977  006FF6  0012               	return		;funcret
 16978  006FF8  FFFF               	dw	65535	; errata NOP
 16979  006FFA                     __end_of_limparBuffer:
 16980                           	opt stack 0
 16981                           tosu	equ	0xFFF
 16982                           tosh	equ	0xFFE
 16983                           tosl	equ	0xFFD
 16984                           pclath	equ	0xFFA
 16985                           tblptru	equ	0xFF8
 16986                           tblptrh	equ	0xFF7
 16987                           tblptrl	equ	0xFF6
 16988                           tablat	equ	0xFF5
 16989                           prodh	equ	0xFF4
 16990                           prodl	equ	0xFF3
 16991                           intcon	equ	0xFF2
 16992                           indf0	equ	0xFEF
 16993                           postinc0	equ	0xFEE
 16994                           fsr0h	equ	0xFEA
 16995                           fsr0l	equ	0xFE9
 16996                           wreg	equ	0xFE8
 16997                           postdec1	equ	0xFE5
 16998                           fsr1l	equ	0xFE1
 16999                           indf2	equ	0xFDF
 17000                           postinc2	equ	0xFDE
 17001                           postdec2	equ	0xFDD
 17002                           fsr2h	equ	0xFDA
 17003                           fsr2l	equ	0xFD9
 17004                           status	equ	0xFD8
 17005                           
 17006 ;; *************** function _memset *****************
 17007 ;; Defined at:
 17008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 17009 ;; Parameters:    Size  Location     Type
 17010 ;;  p1              2    0[BANK0 ] PTR void 
 17011 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17012 ;;  c               2    2[BANK0 ] int 
 17013 ;;  n               2    4[BANK0 ] unsigned int 
 17014 ;; Auto vars:     Size  Location     Type
 17015 ;;  p               2    6[BANK0 ] PTR unsigned char 
 17016 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17017 ;; Return value:  Size  Location     Type
 17018 ;;                  2    0[BANK0 ] PTR void 
 17019 ;; Registers used:
 17020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17021 ;; Tracked objects:
 17022 ;;		On entry : 0/0
 17023 ;;		On exit  : 0/0
 17024 ;;		Unchanged: 0/0
 17025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17026 ;;      Params:         0       6       0       0       0       0       0
 17027 ;;      Locals:         0       2       0       0       0       0       0
 17028 ;;      Temps:          0       0       0       0       0       0       0
 17029 ;;      Totals:         0       8       0       0       0       0       0
 17030 ;;Total ram usage:        8 bytes
 17031 ;; Hardware stack levels used:    1
 17032 ;; Hardware stack levels required when called:    6
 17033 ;; This function calls:
 17034 ;;		Nothing
 17035 ;; This function is called by:
 17036 ;;		_limparBuffer
 17037 ;;		_getSerial
 17038 ;; This function uses a non-reentrant model
 17039 ;;
 17040                           
 17041                           	psect	text55
 17042  0070A0                     __ptext55:
 17043                           	opt stack 0
 17044  0070A0                     _memset:
 17045                           	opt stack 0
 17046  0070A0  FFFF               	dw	65535	; assembler added errata NOP
 17047                           
 17048                           ;incstack = 0
 17049  0070A2  C080  F086         	movff	memset@p1,memset@p
 17050  0070A6  C081  F087         	movff	memset@p1+1,memset@p+1
 17051  0070AA  D00A               	goto	l1554
 17052  0070AC  FFFF               	dw	65535	; assembler added errata NOP
 17053  0070AE                     l4970:
 17054  0070AE  C086  FFD9         	movff	memset@p,fsr2l
 17055  0070B2  C087  FFDA         	movff	memset@p+1,fsr2h
 17056  0070B6  C082  FFDF         	movff	memset@c,indf2
 17057  0070BA  0100               	movlb	0	; () banked
 17058  0070BC  4B86               	infsnz	memset@p& (0+255),f,b
 17059  0070BE  2B87               	incf	(memset@p+1)& (0+255),f,b
 17060  0070C0                     l1554:
 17061  0070C0  FFFF               	dw	65535	; assembler added errata NOP
 17062                           
 17063                           ; BSR set to: 0
 17064  0070C2  0100               	movlb	0	; () banked
 17065  0070C4  0784               	decf	memset@n& (0+255),f,b
 17066  0070C6  A0D8               	btfss	status,0,c
 17067  0070C8  0785               	decf	(memset@n+1)& (0+255),f,b
 17068  0070CA  2984               	incf	memset@n& (0+255),w,b
 17069  0070CC  E1F0               	bnz	l4970
 17070  0070CE  2985               	incf	(memset@n+1)& (0+255),w,b
 17071  0070D0  B4D8               	btfsc	status,2,c
 17072                           
 17073                           ; BSR set to: 0
 17074                           
 17075                           ; BSR set to: 0
 17076                           ;	Return value of _memset is never used
 17077  0070D2  0012               	return		;funcret
 17078  0070D4  FFFF               	dw	65535	; assembler added errata NOP
 17079  0070D6  D7EA               	goto	l1555
 17080  0070D8  FFFF               	dw	65535	; errata NOP
 17081  0070DA                     __end_of_memset:
 17082                           	opt stack 0
 17083                           tosu	equ	0xFFF
 17084                           tosh	equ	0xFFE
 17085                           tosl	equ	0xFFD
 17086                           pclath	equ	0xFFA
 17087                           tblptru	equ	0xFF8
 17088                           tblptrh	equ	0xFF7
 17089                           tblptrl	equ	0xFF6
 17090                           tablat	equ	0xFF5
 17091                           prodh	equ	0xFF4
 17092                           prodl	equ	0xFF3
 17093                           intcon	equ	0xFF2
 17094                           indf0	equ	0xFEF
 17095                           postinc0	equ	0xFEE
 17096                           fsr0h	equ	0xFEA
 17097                           fsr0l	equ	0xFE9
 17098                           wreg	equ	0xFE8
 17099                           postdec1	equ	0xFE5
 17100                           fsr1l	equ	0xFE1
 17101                           indf2	equ	0xFDF
 17102                           postinc2	equ	0xFDE
 17103                           postdec2	equ	0xFDD
 17104                           fsr2h	equ	0xFDA
 17105                           fsr2l	equ	0xFD9
 17106                           status	equ	0xFD8
 17107                           
 17108 ;; *************** function _aguardaBuffer *****************
 17109 ;; Defined at:
 17110 ;;		line 26 in file "serial.h"
 17111 ;; Parameters:    Size  Location     Type
 17112 ;;  str             2   19[BANK0 ] PTR unsigned char 
 17113 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17114 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17115 ;;		 -> STR_11(3), STR_9(3), STR_6(7), STR_5(3), 
 17116 ;; Auto vars:     Size  Location     Type
 17117 ;;		None
 17118 ;; Return value:  Size  Location     Type
 17119 ;;                  1    wreg      unsigned char 
 17120 ;; Registers used:
 17121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17122 ;; Tracked objects:
 17123 ;;		On entry : 0/0
 17124 ;;		On exit  : 0/0
 17125 ;;		Unchanged: 0/0
 17126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17127 ;;      Params:         0       2       0       0       0       0       0
 17128 ;;      Locals:         0       0       0       0       0       0       0
 17129 ;;      Temps:          0       0       0       0       0       0       0
 17130 ;;      Totals:         0       2       0       0       0       0       0
 17131 ;;Total ram usage:        2 bytes
 17132 ;; Hardware stack levels used:    1
 17133 ;; Hardware stack levels required when called:    8
 17134 ;; This function calls:
 17135 ;;		_delay
 17136 ;;		_strstr
 17137 ;; This function is called by:
 17138 ;;		_getSinalSIM800L
 17139 ;;		_comunicarTeste
 17140 ;;		_enviaSMS
 17141 ;; This function uses a non-reentrant model
 17142 ;;
 17143                           
 17144                           	psect	text56
 17145  00718A                     __ptext56:
 17146                           	opt stack 0
 17147  00718A                     _aguardaBuffer:
 17148                           	opt stack 0
 17149  00718A  FFFF               	dw	65535	; assembler added errata NOP
 17150                           
 17151                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;incstack = 0
 17155  00718C  0E00               	movlw	low _bufferSerial
 17156  00718E  0100               	movlb	0	; () banked
 17157  007190  6F8F               	movwf	strstr@s1& (0+255),b
 17158  007192  0E01               	movlw	high _bufferSerial
 17159  007194  6F90               	movwf	(strstr@s1+1)& (0+255),b
 17160  007196  C093  F091         	movff	aguardaBuffer@str,strstr@s2
 17161  00719A  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
 17162  00719E  EC95  F01F         	call	_strstr	;wreg free
 17163  0071A2  0100               	movlb	0	; () banked
 17164  0071A4  518F               	movf	?_strstr& (0+255),w,b
 17165  0071A6  1190               	iorwf	(?_strstr+1)& (0+255),w,b
 17166  0071A8  B4D8               	btfsc	status,2,c
 17167  0071AA  D008               	goto	l259
 17168                           
 17169                           ; BSR set to: 0
 17170                           ;serial.h: 28: delay(150);
 17171  0071AC  0E00               	movlw	0
 17172  0071AE  6F81               	movwf	(delay@x+1)& (0+255),b
 17173  0071B0  0E96               	movlw	150
 17174  0071B2  6F80               	movwf	delay@x& (0+255),b
 17175  0071B4  ECC7  F037         	call	_delay	;wreg free
 17176                           
 17177                           ;serial.h: 29: return 1;
 17178  0071B8  0E01               	movlw	1
 17179  0071BA  D002               	goto	l5316
 17180  0071BC                     l259:
 17181  0071BC  FFFF               	dw	65535	; assembler added errata NOP
 17182                           
 17183                           ;serial.h: 30: }
 17184                           ;serial.h: 31: return 0;
 17185  0071BE  0E00               	movlw	0
 17186  0071C0                     l5316:
 17187  0071C0  FFFF               	dw	65535	; assembler added errata NOP
 17188  0071C2  0012               	return		;funcret
 17189  0071C4  FFFF               	dw	65535	; errata NOP
 17190  0071C6                     __end_of_aguardaBuffer:
 17191                           	opt stack 0
 17192                           tosu	equ	0xFFF
 17193                           tosh	equ	0xFFE
 17194                           tosl	equ	0xFFD
 17195                           pclath	equ	0xFFA
 17196                           tblptru	equ	0xFF8
 17197                           tblptrh	equ	0xFF7
 17198                           tblptrl	equ	0xFF6
 17199                           tablat	equ	0xFF5
 17200                           prodh	equ	0xFF4
 17201                           prodl	equ	0xFF3
 17202                           intcon	equ	0xFF2
 17203                           indf0	equ	0xFEF
 17204                           postinc0	equ	0xFEE
 17205                           fsr0h	equ	0xFEA
 17206                           fsr0l	equ	0xFE9
 17207                           wreg	equ	0xFE8
 17208                           postdec1	equ	0xFE5
 17209                           fsr1l	equ	0xFE1
 17210                           indf2	equ	0xFDF
 17211                           postinc2	equ	0xFDE
 17212                           postdec2	equ	0xFDD
 17213                           fsr2h	equ	0xFDA
 17214                           fsr2l	equ	0xFD9
 17215                           status	equ	0xFD8
 17216                           
 17217 ;; *************** function _strstr *****************
 17218 ;; Defined at:
 17219 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
 17220 ;; Parameters:    Size  Location     Type
 17221 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
 17222 ;;		 -> NULL(0), bufferSerial(60), 
 17223 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
 17224 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17225 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17226 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17227 ;;		 -> STR_5(3), 
 17228 ;; Auto vars:     Size  Location     Type
 17229 ;;		None
 17230 ;; Return value:  Size  Location     Type
 17231 ;;                  2   15[BANK0 ] PTR unsigned char 
 17232 ;; Registers used:
 17233 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17234 ;; Tracked objects:
 17235 ;;		On entry : 0/0
 17236 ;;		On exit  : 0/0
 17237 ;;		Unchanged: 0/0
 17238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17239 ;;      Params:         0       4       0       0       0       0       0
 17240 ;;      Locals:         0       0       0       0       0       0       0
 17241 ;;      Temps:          0       0       0       0       0       0       0
 17242 ;;      Totals:         0       4       0       0       0       0       0
 17243 ;;Total ram usage:        4 bytes
 17244 ;; Hardware stack levels used:    1
 17245 ;; Hardware stack levels required when called:    7
 17246 ;; This function calls:
 17247 ;;		_strchr
 17248 ;;		_strlen
 17249 ;;		_strncmp
 17250 ;; This function is called by:
 17251 ;;		_aguardaBuffer
 17252 ;;		_getSerial
 17253 ;; This function uses a non-reentrant model
 17254 ;;
 17255                           
 17256                           	psect	text57
 17257  003F2A                     __ptext57:
 17258                           	opt stack 0
 17259  003F2A                     _strstr:
 17260                           	opt stack 0
 17261  003F2A  FFFF               	dw	65535	; assembler added errata NOP
 17262                           
 17263                           ;incstack = 0
 17264  003F2C  D035               	goto	l1708
 17265  003F2E  FFFF               	dw	65535	; assembler added errata NOP
 17266  003F30  C08F  F086         	movff	strstr@s1,strncmp@s1
 17267  003F34  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
 17268  003F38  C091  F088         	movff	strstr@s2,strncmp@s2
 17269  003F3C  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
 17270  003F40  C091  F080         	movff	strstr@s2,strlen@s
 17271  003F44  C092  F081         	movff	strstr@s2+1,strlen@s+1
 17272  003F48  ECB7  F03A         	call	_strlen	;wreg free
 17273  003F4C  C080  F08A         	movff	?_strlen,strncmp@len
 17274  003F50  C081  F08B         	movff	?_strlen+1,strncmp@len+1
 17275  003F54  EC48  F01F         	call	_strncmp	;wreg free
 17276  003F58  0100               	movlb	0	; () banked
 17277  003F5A  5186               	movf	?_strncmp& (0+255),w,b
 17278  003F5C  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
 17279  003F5E  A4D8               	btfss	status,2,c
 17280  003F60  D005               	goto	l1710
 17281                           
 17282                           ; BSR set to: 0
 17283  003F62  C08F  F08F         	movff	strstr@s1,?_strstr
 17284  003F66  C090  F090         	movff	strstr@s1+1,?_strstr+1
 17285                           
 17286                           ; BSR set to: 0
 17287  003F6A  D028               	goto	l4960
 17288  003F6C                     l1710:
 17289  003F6C  FFFF               	dw	65535	; assembler added errata NOP
 17290                           
 17291                           ; BSR set to: 0
 17292                           
 17293                           ; BSR set to: 0
 17294  003F6E  0E01               	movlw	1
 17295  003F70  258F               	addwf	strstr@s1& (0+255),w,b
 17296  003F72  6F80               	movwf	strchr@ptr& (0+255),b
 17297  003F74  0E00               	movlw	0
 17298  003F76  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
 17299  003F78  6F81               	movwf	(strchr@ptr+1)& (0+255),b
 17300  003F7A  C091  FFF6         	movff	strstr@s2,tblptrl
 17301  003F7E  C092  FFF7         	movff	strstr@s2+1,tblptrh
 17302  003F82                     	if	0	;tblptru may be non-zero
 17303  003F82                     	endif
 17304  003F82                     	if	0	;tblptru may be non-zero
 17305  003F82                     	endif
 17306  003F82  0008               	tblrd		*
 17307  003F84  FFFF               	dw	65535	; errata NOP
 17308  003F86  50F5               	movf	tablat,w,c
 17309  003F88  6F82               	movwf	strchr@chr& (0+255),b
 17310  003F8A  6B83               	clrf	(strchr@chr+1)& (0+255),b
 17311  003F8C  EC01  F039         	call	_strchr	;wreg free
 17312  003F90  C080  F08F         	movff	?_strchr,strstr@s1
 17313  003F94  C081  F090         	movff	?_strchr+1,strstr@s1+1
 17314  003F98                     l1708:
 17315  003F98  FFFF               	dw	65535	; assembler added errata NOP
 17316  003F9A  0100               	movlb	0	; () banked
 17317  003F9C  518F               	movf	strstr@s1& (0+255),w,b
 17318  003F9E  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
 17319  003FA0  B4D8               	btfsc	status,2,c
 17320  003FA2  D007               	goto	u4730
 17321                           
 17322                           ; BSR set to: 0
 17323  003FA4  C08F  FFD9         	movff	strstr@s1,fsr2l
 17324  003FA8  C090  FFDA         	movff	strstr@s1+1,fsr2h
 17325  003FAC  50DF               	movf	indf2,w,c
 17326  003FAE  A4D8               	btfss	status,2,c
 17327  003FB0  D7BE               	goto	l1709
 17328  003FB2                     u4730:
 17329  003FB2  FFFF               	dw	65535	; assembler added errata NOP
 17330                           
 17331                           ; BSR set to: 0
 17332                           
 17333                           ; BSR set to: 0
 17334                           
 17335                           ; BSR set to: 0
 17336  003FB4  0E00               	movlw	0
 17337  003FB6  6F8F               	movwf	?_strstr& (0+255),b
 17338  003FB8  0E00               	movlw	0
 17339  003FBA  6F90               	movwf	(?_strstr+1)& (0+255),b
 17340  003FBC                     l4960:
 17341  003FBC  FFFF               	dw	65535	; assembler added errata NOP
 17342                           
 17343                           ; BSR set to: 0
 17344                           
 17345                           ; BSR set to: 0
 17346  003FBE  0012               	return		;funcret
 17347  003FC0  FFFF               	dw	65535	; errata NOP
 17348  003FC2                     __end_of_strstr:
 17349                           	opt stack 0
 17350                           tosu	equ	0xFFF
 17351                           tosh	equ	0xFFE
 17352                           tosl	equ	0xFFD
 17353                           pclath	equ	0xFFA
 17354                           tblptru	equ	0xFF8
 17355                           tblptrh	equ	0xFF7
 17356                           tblptrl	equ	0xFF6
 17357                           tablat	equ	0xFF5
 17358                           prodh	equ	0xFF4
 17359                           prodl	equ	0xFF3
 17360                           intcon	equ	0xFF2
 17361                           indf0	equ	0xFEF
 17362                           postinc0	equ	0xFEE
 17363                           fsr0h	equ	0xFEA
 17364                           fsr0l	equ	0xFE9
 17365                           wreg	equ	0xFE8
 17366                           postdec1	equ	0xFE5
 17367                           fsr1l	equ	0xFE1
 17368                           indf2	equ	0xFDF
 17369                           postinc2	equ	0xFDE
 17370                           postdec2	equ	0xFDD
 17371                           fsr2h	equ	0xFDA
 17372                           fsr2l	equ	0xFD9
 17373                           status	equ	0xFD8
 17374                           
 17375 ;; *************** function _strncmp *****************
 17376 ;; Defined at:
 17377 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
 17378 ;; Parameters:    Size  Location     Type
 17379 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 17380 ;;		 -> NULL(0), bufferSerial(60), 
 17381 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 17382 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17383 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17384 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17385 ;;		 -> STR_5(3), 
 17386 ;;  len             2   10[BANK0 ] unsigned int 
 17387 ;; Auto vars:     Size  Location     Type
 17388 ;;		None
 17389 ;; Return value:  Size  Location     Type
 17390 ;;                  2    6[BANK0 ] int 
 17391 ;; Registers used:
 17392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17393 ;; Tracked objects:
 17394 ;;		On entry : 0/0
 17395 ;;		On exit  : 0/0
 17396 ;;		Unchanged: 0/0
 17397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17398 ;;      Params:         0       6       0       0       0       0       0
 17399 ;;      Locals:         0       0       0       0       0       0       0
 17400 ;;      Temps:          0       3       0       0       0       0       0
 17401 ;;      Totals:         0       9       0       0       0       0       0
 17402 ;;Total ram usage:        9 bytes
 17403 ;; Hardware stack levels used:    1
 17404 ;; Hardware stack levels required when called:    6
 17405 ;; This function calls:
 17406 ;;		Nothing
 17407 ;; This function is called by:
 17408 ;;		_strstr
 17409 ;; This function uses a non-reentrant model
 17410 ;;
 17411                           
 17412                           	psect	text58
 17413  003E90                     __ptext58:
 17414                           	opt stack 0
 17415  003E90                     _strncmp:
 17416                           	opt stack 0
 17417  003E90  FFFF               	dw	65535	; assembler added errata NOP
 17418                           
 17419                           ; BSR set to: 0
 17420                           ;incstack = 0
 17421  003E92  D03A               	goto	l1742
 17422  003E94  FFFF               	dw	65535	; assembler added errata NOP
 17423  003E96                     l4912:
 17424  003E96  C086  FFD9         	movff	strncmp@s1,fsr2l
 17425  003E9A  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17426  003E9E  50DF               	movf	indf2,w,c
 17427  003EA0  B4D8               	btfsc	status,2,c
 17428  003EA2  D011               	goto	u4650
 17429  003EA4  C086  FFD9         	movff	strncmp@s1,fsr2l
 17430  003EA8  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17431  003EAC  50DF               	movf	indf2,w,c
 17432  003EAE  0100               	movlb	0	; () banked
 17433  003EB0  6F8C               	movwf	??_strncmp& (0+255),b
 17434  003EB2  C088  FFF6         	movff	strncmp@s2,tblptrl
 17435  003EB6  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17436  003EBA                     	if	0	;tblptru may be non-zero
 17437  003EBA                     	endif
 17438  003EBA                     	if	0	;tblptru may be non-zero
 17439  003EBA                     	endif
 17440  003EBA  0008               	tblrd		*
 17441  003EBC  FFFF               	dw	65535	; errata NOP
 17442  003EBE  50F5               	movf	tablat,w,c
 17443  003EC0  198C               	xorwf	??_strncmp& (0+255),w,b
 17444  003EC2  B4D8               	btfsc	status,2,c
 17445  003EC4  D01C               	goto	l1744
 17446  003EC6                     u4650:
 17447  003EC6  FFFF               	dw	65535	; assembler added errata NOP
 17448                           
 17449                           ; BSR set to: 0
 17450  003EC8  C088  FFF6         	movff	strncmp@s2,tblptrl
 17451  003ECC  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17452  003ED0                     	if	0	;tblptru may be non-zero
 17453  003ED0                     	endif
 17454  003ED0                     	if	0	;tblptru may be non-zero
 17455  003ED0                     	endif
 17456  003ED0  0008               	tblrd		*
 17457  003ED2  FFFF               	dw	65535	; errata NOP
 17458  003ED4  50F5               	movf	tablat,w,c
 17459  003ED6  0100               	movlb	0	; () banked
 17460  003ED8  6F8C               	movwf	??_strncmp& (0+255),b
 17461  003EDA  6B8D               	clrf	(??_strncmp+1)& (0+255),b
 17462  003EDC  1F8C               	comf	??_strncmp& (0+255),f,b
 17463  003EDE  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
 17464  003EE0  4B8C               	infsnz	??_strncmp& (0+255),f,b
 17465  003EE2  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
 17466  003EE4  C086  FFD9         	movff	strncmp@s1,fsr2l
 17467  003EE8  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17468  003EEC  50DF               	movf	indf2,w,c
 17469  003EEE  6F8E               	movwf	(??_strncmp+2)& (0+255),b
 17470  003EF0  518E               	movf	(??_strncmp+2)& (0+255),w,b
 17471  003EF2  258C               	addwf	??_strncmp& (0+255),w,b
 17472  003EF4  6F86               	movwf	?_strncmp& (0+255),b
 17473  003EF6  0E00               	movlw	0
 17474  003EF8  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
 17475  003EFA  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17476                           
 17477                           ; BSR set to: 0
 17478  003EFC  D013               	goto	l4926
 17479  003EFE                     l1744:
 17480  003EFE  FFFF               	dw	65535	; assembler added errata NOP
 17481                           
 17482                           ; BSR set to: 0
 17483                           
 17484                           ; BSR set to: 0
 17485  003F00  4B86               	infsnz	strncmp@s1& (0+255),f,b
 17486  003F02  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
 17487  003F04  4B88               	infsnz	strncmp@s2& (0+255),f,b
 17488  003F06  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
 17489  003F08                     l1742:
 17490  003F08  FFFF               	dw	65535	; assembler added errata NOP
 17491                           
 17492                           ; BSR set to: 0
 17493  003F0A  0100               	movlb	0	; () banked
 17494  003F0C  078A               	decf	strncmp@len& (0+255),f,b
 17495  003F0E  A0D8               	btfss	status,0,c
 17496  003F10  078B               	decf	(strncmp@len+1)& (0+255),f,b
 17497  003F12  298A               	incf	strncmp@len& (0+255),w,b
 17498  003F14  E1C0               	bnz	l4912
 17499  003F16  298B               	incf	(strncmp@len+1)& (0+255),w,b
 17500  003F18  A4D8               	btfss	status,2,c
 17501  003F1A  D7BC               	goto	l1743
 17502                           
 17503                           ; BSR set to: 0
 17504                           
 17505                           ; BSR set to: 0
 17506  003F1C  0E00               	movlw	0
 17507  003F1E  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17508  003F20  0E00               	movlw	0
 17509  003F22  6F86               	movwf	?_strncmp& (0+255),b
 17510  003F24                     l4926:
 17511  003F24  FFFF               	dw	65535	; assembler added errata NOP
 17512                           
 17513                           ; BSR set to: 0
 17514                           
 17515                           ; BSR set to: 0
 17516  003F26  0012               	return		;funcret
 17517  003F28  FFFF               	dw	65535	; errata NOP
 17518  003F2A                     __end_of_strncmp:
 17519                           	opt stack 0
 17520                           tosu	equ	0xFFF
 17521                           tosh	equ	0xFFE
 17522                           tosl	equ	0xFFD
 17523                           pclath	equ	0xFFA
 17524                           tblptru	equ	0xFF8
 17525                           tblptrh	equ	0xFF7
 17526                           tblptrl	equ	0xFF6
 17527                           tablat	equ	0xFF5
 17528                           prodh	equ	0xFF4
 17529                           prodl	equ	0xFF3
 17530                           intcon	equ	0xFF2
 17531                           indf0	equ	0xFEF
 17532                           postinc0	equ	0xFEE
 17533                           fsr0h	equ	0xFEA
 17534                           fsr0l	equ	0xFE9
 17535                           wreg	equ	0xFE8
 17536                           postdec1	equ	0xFE5
 17537                           fsr1l	equ	0xFE1
 17538                           indf2	equ	0xFDF
 17539                           postinc2	equ	0xFDE
 17540                           postdec2	equ	0xFDD
 17541                           fsr2h	equ	0xFDA
 17542                           fsr2l	equ	0xFD9
 17543                           status	equ	0xFD8
 17544                           
 17545 ;; *************** function _strlen *****************
 17546 ;; Defined at:
 17547 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 17550 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17551 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17552 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17553 ;;		 -> STR_5(3), NULL(0), bufferSerial(60), 
 17554 ;; Auto vars:     Size  Location     Type
 17555 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 17556 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17557 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17558 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17559 ;;		 -> STR_5(3), NULL(0), bufferSerial(60), 
 17560 ;; Return value:  Size  Location     Type
 17561 ;;                  2    0[BANK0 ] unsigned int 
 17562 ;; Registers used:
 17563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17564 ;; Tracked objects:
 17565 ;;		On entry : 0/0
 17566 ;;		On exit  : 0/0
 17567 ;;		Unchanged: 0/0
 17568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17569 ;;      Params:         0       2       0       0       0       0       0
 17570 ;;      Locals:         0       2       0       0       0       0       0
 17571 ;;      Temps:          0       2       0       0       0       0       0
 17572 ;;      Totals:         0       6       0       0       0       0       0
 17573 ;;Total ram usage:        6 bytes
 17574 ;; Hardware stack levels used:    1
 17575 ;; Hardware stack levels required when called:    6
 17576 ;; This function calls:
 17577 ;;		Nothing
 17578 ;; This function is called by:
 17579 ;;		_getSerial
 17580 ;;		_strstr
 17581 ;; This function uses a non-reentrant model
 17582 ;;
 17583                           
 17584                           	psect	text59
 17585  00756E                     __ptext59:
 17586                           	opt stack 0
 17587  00756E                     _strlen:
 17588                           	opt stack 0
 17589  00756E  FFFF               	dw	65535	; assembler added errata NOP
 17590                           
 17591                           ; BSR set to: 0
 17592                           ;incstack = 0
 17593  007570  C080  F084         	movff	strlen@s,strlen@cp
 17594  007574  C081  F085         	movff	strlen@s+1,strlen@cp+1
 17595  007578  D004               	goto	l1696
 17596  00757A  FFFF               	dw	65535	; assembler added errata NOP
 17597  00757C  0100               	movlb	0	; () banked
 17598  00757E  4B84               	infsnz	strlen@cp& (0+255),f,b
 17599  007580  2B85               	incf	(strlen@cp+1)& (0+255),f,b
 17600  007582                     l1696:
 17601  007582  FFFF               	dw	65535	; assembler added errata NOP
 17602                           
 17603                           ; BSR set to: 0
 17604  007584  C084  FFF6         	movff	strlen@cp,tblptrl
 17605  007588  C085  FFF7         	movff	strlen@cp+1,tblptrh
 17606  00758C  6AF8               	clrf	tblptru,c
 17607  00758E  0E05               	movlw	(high __ramtop+-1)
 17608  007590  64F7               	cpfsgt	tblptrh,c
 17609  007592  D004               	bra	u4527
 17610  007594  0008               	tblrd		*
 17611  007596  FFFF               	dw	65535	; errata NOP
 17612  007598  50F5               	movf	tablat,w,c
 17613  00759A  D005               	bra	u4520
 17614  00759C                     u4527:
 17615  00759C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17616  0075A0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17617  0075A4  50EF               	movf	indf0,w,c
 17618  0075A6                     u4520:
 17619  0075A6  0900               	iorlw	0
 17620  0075A8  A4D8               	btfss	status,2,c
 17621  0075AA  D7E7               	goto	l1697
 17622  0075AC  C080  F082         	movff	strlen@s,??_strlen
 17623  0075B0  C081  F083         	movff	strlen@s+1,??_strlen+1
 17624  0075B4  0100               	movlb	0	; () banked
 17625  0075B6  1F82               	comf	??_strlen& (0+255),f,b
 17626  0075B8  1F83               	comf	(??_strlen+1)& (0+255),f,b
 17627  0075BA  4B82               	infsnz	??_strlen& (0+255),f,b
 17628  0075BC  2B83               	incf	(??_strlen+1)& (0+255),f,b
 17629  0075BE  5184               	movf	strlen@cp& (0+255),w,b
 17630  0075C0  2582               	addwf	??_strlen& (0+255),w,b
 17631  0075C2  6F80               	movwf	?_strlen& (0+255),b
 17632  0075C4  5185               	movf	(strlen@cp+1)& (0+255),w,b
 17633  0075C6  2183               	addwfc	(??_strlen+1)& (0+255),w,b
 17634  0075C8  6F81               	movwf	(?_strlen+1)& (0+255),b
 17635                           
 17636                           ; BSR set to: 0
 17637                           
 17638                           ; BSR set to: 0
 17639  0075CA  0012               	return		;funcret
 17640  0075CC  FFFF               	dw	65535	; errata NOP
 17641  0075CE                     __end_of_strlen:
 17642                           	opt stack 0
 17643                           tosu	equ	0xFFF
 17644                           tosh	equ	0xFFE
 17645                           tosl	equ	0xFFD
 17646                           pclath	equ	0xFFA
 17647                           tblptru	equ	0xFF8
 17648                           tblptrh	equ	0xFF7
 17649                           tblptrl	equ	0xFF6
 17650                           tablat	equ	0xFF5
 17651                           prodh	equ	0xFF4
 17652                           prodl	equ	0xFF3
 17653                           intcon	equ	0xFF2
 17654                           indf0	equ	0xFEF
 17655                           postinc0	equ	0xFEE
 17656                           fsr0h	equ	0xFEA
 17657                           fsr0l	equ	0xFE9
 17658                           wreg	equ	0xFE8
 17659                           postdec1	equ	0xFE5
 17660                           fsr1l	equ	0xFE1
 17661                           indf2	equ	0xFDF
 17662                           postinc2	equ	0xFDE
 17663                           postdec2	equ	0xFDD
 17664                           fsr2h	equ	0xFDA
 17665                           fsr2l	equ	0xFD9
 17666                           status	equ	0xFD8
 17667                           
 17668 ;; *************** function _strchr *****************
 17669 ;; Defined at:
 17670 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
 17671 ;; Parameters:    Size  Location     Type
 17672 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 17673 ;;		 -> NULL(0), bufferSerial(60), 
 17674 ;;  chr             2    2[BANK0 ] int 
 17675 ;; Auto vars:     Size  Location     Type
 17676 ;;		None
 17677 ;; Return value:  Size  Location     Type
 17678 ;;                  2    0[BANK0 ] PTR unsigned char 
 17679 ;; Registers used:
 17680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17681 ;; Tracked objects:
 17682 ;;		On entry : 0/0
 17683 ;;		On exit  : 0/0
 17684 ;;		Unchanged: 0/0
 17685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17686 ;;      Params:         0       4       0       0       0       0       0
 17687 ;;      Locals:         0       0       0       0       0       0       0
 17688 ;;      Temps:          0       1       0       0       0       0       0
 17689 ;;      Totals:         0       5       0       0       0       0       0
 17690 ;;Total ram usage:        5 bytes
 17691 ;; Hardware stack levels used:    1
 17692 ;; Hardware stack levels required when called:    6
 17693 ;; This function calls:
 17694 ;;		Nothing
 17695 ;; This function is called by:
 17696 ;;		_strstr
 17697 ;; This function uses a non-reentrant model
 17698 ;;
 17699                           
 17700                           	psect	text60
 17701  007202                     __ptext60:
 17702                           	opt stack 0
 17703  007202                     _strchr:
 17704                           	opt stack 0
 17705  007202  FFFF               	dw	65535	; assembler added errata NOP
 17706                           
 17707                           ; BSR set to: 0
 17708                           ;incstack = 0
 17709  007204  C080  FFD9         	movff	strchr@ptr,fsr2l
 17710  007208  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17711  00720C  0100               	movlb	0	; () banked
 17712  00720E  5182               	movf	strchr@chr& (0+255),w,b
 17713  007210  18DE               	xorwf	postinc2,w,c
 17714  007212  A4D8               	btfss	status,2,c
 17715  007214  D005               	goto	l1737
 17716                           
 17717                           ; BSR set to: 0
 17718  007216  C080  F080         	movff	strchr@ptr,?_strchr
 17719  00721A  C081  F081         	movff	strchr@ptr+1,?_strchr+1
 17720                           
 17721                           ; BSR set to: 0
 17722  00721E  D00E               	goto	l4938
 17723  007220                     l1737:
 17724  007220  FFFF               	dw	65535	; assembler added errata NOP
 17725                           
 17726                           ; BSR set to: 0
 17727                           
 17728                           ; BSR set to: 0
 17729  007222  C080  FFD9         	movff	strchr@ptr,fsr2l
 17730  007226  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17731  00722A  4B80               	infsnz	strchr@ptr& (0+255),f,b
 17732  00722C  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
 17733  00722E  50DF               	movf	indf2,w,c
 17734  007230  A4D8               	btfss	status,2,c
 17735  007232  D7E7               	goto	_strchr
 17736                           
 17737                           ; BSR set to: 0
 17738                           
 17739                           ; BSR set to: 0
 17740  007234  0E00               	movlw	0
 17741  007236  6F80               	movwf	?_strchr& (0+255),b
 17742  007238  0E00               	movlw	0
 17743  00723A  6F81               	movwf	(?_strchr+1)& (0+255),b
 17744  00723C                     l4938:
 17745  00723C  FFFF               	dw	65535	; assembler added errata NOP
 17746                           
 17747                           ; BSR set to: 0
 17748                           
 17749                           ; BSR set to: 0
 17750  00723E  0012               	return		;funcret
 17751  007240  FFFF               	dw	65535	; errata NOP
 17752  007242                     __end_of_strchr:
 17753                           	opt stack 0
 17754                           tosu	equ	0xFFF
 17755                           tosh	equ	0xFFE
 17756                           tosl	equ	0xFFD
 17757                           pclath	equ	0xFFA
 17758                           tblptru	equ	0xFF8
 17759                           tblptrh	equ	0xFF7
 17760                           tblptrl	equ	0xFF6
 17761                           tablat	equ	0xFF5
 17762                           prodh	equ	0xFF4
 17763                           prodl	equ	0xFF3
 17764                           intcon	equ	0xFF2
 17765                           indf0	equ	0xFEF
 17766                           postinc0	equ	0xFEE
 17767                           fsr0h	equ	0xFEA
 17768                           fsr0l	equ	0xFE9
 17769                           wreg	equ	0xFE8
 17770                           postdec1	equ	0xFE5
 17771                           fsr1l	equ	0xFE1
 17772                           indf2	equ	0xFDF
 17773                           postinc2	equ	0xFDE
 17774                           postdec2	equ	0xFDD
 17775                           fsr2h	equ	0xFDA
 17776                           fsr2l	equ	0xFD9
 17777                           status	equ	0xFD8
 17778                           
 17779 ;; *************** function _delay *****************
 17780 ;; Defined at:
 17781 ;;		line 16 in file "function.c"
 17782 ;; Parameters:    Size  Location     Type
 17783 ;;  x               2    0[BANK0 ] int 
 17784 ;; Auto vars:     Size  Location     Type
 17785 ;;		None
 17786 ;; Return value:  Size  Location     Type
 17787 ;;                  1    wreg      void 
 17788 ;; Registers used:
 17789 ;;		wreg, status,2, status,0
 17790 ;; Tracked objects:
 17791 ;;		On entry : 0/0
 17792 ;;		On exit  : 0/0
 17793 ;;		Unchanged: 0/0
 17794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17795 ;;      Params:         0       2       0       0       0       0       0
 17796 ;;      Locals:         0       0       0       0       0       0       0
 17797 ;;      Temps:          0       1       0       0       0       0       0
 17798 ;;      Totals:         0       3       0       0       0       0       0
 17799 ;;Total ram usage:        3 bytes
 17800 ;; Hardware stack levels used:    1
 17801 ;; Hardware stack levels required when called:    6
 17802 ;; This function calls:
 17803 ;;		Nothing
 17804 ;; This function is called by:
 17805 ;;		_aguardaBuffer
 17806 ;;		_limparBuffer
 17807 ;;		_getSinalSIM800L
 17808 ;;		_comunicarTeste
 17809 ;;		_enviaSMS
 17810 ;;		_writeEEPROM_ext
 17811 ;;		_partidaBombaEstacionaria
 17812 ;;		_main
 17813 ;; This function uses a non-reentrant model
 17814 ;;
 17815                           
 17816                           	psect	text61
 17817  006F8E                     __ptext61:
 17818                           	opt stack 0
 17819  006F8E                     _delay:
 17820                           	opt stack 0
 17821  006F8E  FFFF               	dw	65535	; assembler added errata NOP
 17822                           
 17823                           ;function.c: 17: while (x--) {
 17824                           
 17825                           ; BSR set to: 0
 17826                           ;incstack = 0
 17827  006F90  D00C               	goto	l1002
 17828  006F92  FFFF               	dw	65535	; assembler added errata NOP
 17829  006F94                     l4964:
 17830                           
 17831                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 17832  006F94  0E02               	movlw	2
 17833  006F96  0100               	movlb	0	; () banked
 17834  006F98  6F82               	movwf	??_delay& (0+255),b
 17835  006F9A  0EF2               	movlw	242
 17836  006F9C                     u9047:
 17837  006F9C  FFFF               	dw	65535	; errata NOP
 17838  006F9E  2EE8               	decfsz	wreg,f,c
 17839  006FA0  D7FD               	bra	u9047
 17840  006FA2  2F82               	decfsz	??_delay& (0+255),f,b
 17841  006FA4  D7FB               	bra	u9047
 17842  006FA6  F000               	nop	
 17843  006FA8  0004               	clrwdt		;# 
 17844  006FAA                     l1002:
 17845  006FAA  FFFF               	dw	65535	; assembler added errata NOP
 17846  006FAC  0100               	movlb	0	; () banked
 17847  006FAE  0780               	decf	delay@x& (0+255),f,b
 17848  006FB0  A0D8               	btfss	status,0,c
 17849  006FB2  0781               	decf	(delay@x+1)& (0+255),f,b
 17850  006FB4  2980               	incf	delay@x& (0+255),w,b
 17851  006FB6  E1EE               	bnz	l4964
 17852  006FB8  2981               	incf	(delay@x+1)& (0+255),w,b
 17853  006FBA  B4D8               	btfsc	status,2,c
 17854                           
 17855                           ; BSR set to: 0
 17856                           
 17857                           ; BSR set to: 0
 17858  006FBC  0012               	return		;funcret
 17859  006FBE  FFFF               	dw	65535	; assembler added errata NOP
 17860  006FC0  D7E8               	goto	l1003
 17861  006FC2  FFFF               	dw	65535	; errata NOP
 17862  006FC4                     __end_of_delay:
 17863                           	opt stack 0
 17864                           tosu	equ	0xFFF
 17865                           tosh	equ	0xFFE
 17866                           tosl	equ	0xFFD
 17867                           pclath	equ	0xFFA
 17868                           tblptru	equ	0xFF8
 17869                           tblptrh	equ	0xFF7
 17870                           tblptrl	equ	0xFF6
 17871                           tablat	equ	0xFF5
 17872                           prodh	equ	0xFF4
 17873                           prodl	equ	0xFF3
 17874                           intcon	equ	0xFF2
 17875                           indf0	equ	0xFEF
 17876                           postinc0	equ	0xFEE
 17877                           fsr0h	equ	0xFEA
 17878                           fsr0l	equ	0xFE9
 17879                           wreg	equ	0xFE8
 17880                           postdec1	equ	0xFE5
 17881                           fsr1l	equ	0xFE1
 17882                           indf2	equ	0xFDF
 17883                           postinc2	equ	0xFDE
 17884                           postdec2	equ	0xFDD
 17885                           fsr2h	equ	0xFDA
 17886                           fsr2l	equ	0xFD9
 17887                           status	equ	0xFD8
 17888                           
 17889 ;; *************** function _RTC_Init *****************
 17890 ;; Defined at:
 17891 ;;		line 98 in file "ds1307.h"
 17892 ;; Parameters:    Size  Location     Type
 17893 ;;		None
 17894 ;; Auto vars:     Size  Location     Type
 17895 ;;		None
 17896 ;; Return value:  Size  Location     Type
 17897 ;;                  1    wreg      void 
 17898 ;; Registers used:
 17899 ;;		wreg, status,2, status,0, cstack
 17900 ;; Tracked objects:
 17901 ;;		On entry : 0/0
 17902 ;;		On exit  : 0/0
 17903 ;;		Unchanged: 0/0
 17904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17905 ;;      Params:         0       0       0       0       0       0       0
 17906 ;;      Locals:         0       0       0       0       0       0       0
 17907 ;;      Temps:          0       0       0       0       0       0       0
 17908 ;;      Totals:         0       0       0       0       0       0       0
 17909 ;;Total ram usage:        0 bytes
 17910 ;; Hardware stack levels used:    1
 17911 ;; Hardware stack levels required when called:    8
 17912 ;; This function calls:
 17913 ;;		_I2C_Start
 17914 ;;		_I2C_Stop
 17915 ;;		_I2C_Write
 17916 ;; This function is called by:
 17917 ;;		_main
 17918 ;; This function uses a non-reentrant model
 17919 ;;
 17920                           
 17921                           	psect	text62
 17922  007030                     __ptext62:
 17923                           	opt stack 0
 17924  007030                     _RTC_Init:
 17925                           	opt stack 0
 17926  007030  FFFF               	dw	65535	; assembler added errata NOP
 17927                           
 17928                           ;ds1307.h: 100: I2C_Start();
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;incstack = 0
 17932  007032  EC68  F036         	call	_I2C_Start	;wreg free
 17933                           
 17934                           ;ds1307.h: 101: I2C_Write(0xD0);
 17935  007036  0E00               	movlw	0
 17936  007038  0100               	movlb	0	; () banked
 17937  00703A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17938  00703C  0ED0               	movlw	208
 17939  00703E  6F8A               	movwf	I2C_Write@d& (0+255),b
 17940  007040  EC81  F036         	call	_I2C_Write	;wreg free
 17941                           
 17942                           ;ds1307.h: 102: I2C_Write(0x07);
 17943  007044  0E00               	movlw	0
 17944  007046  0100               	movlb	0	; () banked
 17945  007048  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17946  00704A  0E07               	movlw	7
 17947  00704C  6F8A               	movwf	I2C_Write@d& (0+255),b
 17948  00704E  EC81  F036         	call	_I2C_Write	;wreg free
 17949                           
 17950                           ;ds1307.h: 103: I2C_Write(0x00);
 17951  007052  0E00               	movlw	0
 17952  007054  0100               	movlb	0	; () banked
 17953  007056  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17954  007058  0E00               	movlw	0
 17955  00705A  6F8A               	movwf	I2C_Write@d& (0+255),b
 17956  00705C  EC81  F036         	call	_I2C_Write	;wreg free
 17957                           
 17958                           ;ds1307.h: 104: I2C_Stop();
 17959  007060  EC6E  F036         	call	_I2C_Stop	;wreg free
 17960  007064  0012               	return		;funcret
 17961  007066  FFFF               	dw	65535	; errata NOP
 17962  007068                     __end_of_RTC_Init:
 17963                           	opt stack 0
 17964                           tosu	equ	0xFFF
 17965                           tosh	equ	0xFFE
 17966                           tosl	equ	0xFFD
 17967                           pclath	equ	0xFFA
 17968                           tblptru	equ	0xFF8
 17969                           tblptrh	equ	0xFF7
 17970                           tblptrl	equ	0xFF6
 17971                           tablat	equ	0xFF5
 17972                           prodh	equ	0xFF4
 17973                           prodl	equ	0xFF3
 17974                           intcon	equ	0xFF2
 17975                           indf0	equ	0xFEF
 17976                           postinc0	equ	0xFEE
 17977                           fsr0h	equ	0xFEA
 17978                           fsr0l	equ	0xFE9
 17979                           wreg	equ	0xFE8
 17980                           postdec1	equ	0xFE5
 17981                           fsr1l	equ	0xFE1
 17982                           indf2	equ	0xFDF
 17983                           postinc2	equ	0xFDE
 17984                           postdec2	equ	0xFDD
 17985                           fsr2h	equ	0xFDA
 17986                           fsr2l	equ	0xFD9
 17987                           status	equ	0xFD8
 17988                           
 17989 ;; *************** function _I2C_Write *****************
 17990 ;; Defined at:
 17991 ;;		line 42 in file "I2C.c"
 17992 ;; Parameters:    Size  Location     Type
 17993 ;;  d               2   10[BANK0 ] unsigned int 
 17994 ;; Auto vars:     Size  Location     Type
 17995 ;;		None
 17996 ;; Return value:  Size  Location     Type
 17997 ;;                  1    wreg      void 
 17998 ;; Registers used:
 17999 ;;		wreg, status,2, status,0, cstack
 18000 ;; Tracked objects:
 18001 ;;		On entry : 0/0
 18002 ;;		On exit  : 0/0
 18003 ;;		Unchanged: 0/0
 18004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18005 ;;      Params:         0       2       0       0       0       0       0
 18006 ;;      Locals:         0       0       0       0       0       0       0
 18007 ;;      Temps:          0       0       0       0       0       0       0
 18008 ;;      Totals:         0       2       0       0       0       0       0
 18009 ;;Total ram usage:        2 bytes
 18010 ;; Hardware stack levels used:    1
 18011 ;; Hardware stack levels required when called:    7
 18012 ;; This function calls:
 18013 ;;		_I2C_Wait
 18014 ;; This function is called by:
 18015 ;;		_setDS1307TimeDate
 18016 ;;		_getDS1307TimeDate
 18017 ;;		_RTC_Init
 18018 ;;		_writeEEPROM_ext
 18019 ;;		_readEEPROM_ext
 18020 ;;		_getDS1307Time
 18021 ;;		_setDS1307Time
 18022 ;; This function uses a non-reentrant model
 18023 ;;
 18024                           
 18025                           	psect	text63
 18026  006D02                     __ptext63:
 18027                           	opt stack 0
 18028  006D02                     _I2C_Write:
 18029                           	opt stack 0
 18030  006D02  FFFF               	dw	65535	; assembler added errata NOP
 18031                           
 18032                           ;I2C.c: 43: I2C_Wait();
 18033                           
 18034                           ;incstack = 0
 18035  006D04  ECB9  F036         	call	_I2C_Wait	;wreg free
 18036                           
 18037                           ;I2C.c: 44: SSPBUF = d;
 18038  006D08  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 18039  006D0C  0012               	return		;funcret
 18040  006D0E  FFFF               	dw	65535	; errata NOP
 18041  006D10                     __end_of_I2C_Write:
 18042                           	opt stack 0
 18043                           tosu	equ	0xFFF
 18044                           tosh	equ	0xFFE
 18045                           tosl	equ	0xFFD
 18046                           pclath	equ	0xFFA
 18047                           tblptru	equ	0xFF8
 18048                           tblptrh	equ	0xFF7
 18049                           tblptrl	equ	0xFF6
 18050                           tablat	equ	0xFF5
 18051                           prodh	equ	0xFF4
 18052                           prodl	equ	0xFF3
 18053                           intcon	equ	0xFF2
 18054                           indf0	equ	0xFEF
 18055                           postinc0	equ	0xFEE
 18056                           fsr0h	equ	0xFEA
 18057                           fsr0l	equ	0xFE9
 18058                           wreg	equ	0xFE8
 18059                           postdec1	equ	0xFE5
 18060                           fsr1l	equ	0xFE1
 18061                           indf2	equ	0xFDF
 18062                           postinc2	equ	0xFDE
 18063                           postdec2	equ	0xFDD
 18064                           fsr2h	equ	0xFDA
 18065                           fsr2l	equ	0xFD9
 18066                           status	equ	0xFD8
 18067                           
 18068 ;; *************** function _I2C_Stop *****************
 18069 ;; Defined at:
 18070 ;;		line 36 in file "I2C.c"
 18071 ;; Parameters:    Size  Location     Type
 18072 ;;		None
 18073 ;; Auto vars:     Size  Location     Type
 18074 ;;		None
 18075 ;; Return value:  Size  Location     Type
 18076 ;;                  1    wreg      void 
 18077 ;; Registers used:
 18078 ;;		wreg, status,2, status,0, cstack
 18079 ;; Tracked objects:
 18080 ;;		On entry : 0/0
 18081 ;;		On exit  : 0/0
 18082 ;;		Unchanged: 0/0
 18083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18084 ;;      Params:         0       0       0       0       0       0       0
 18085 ;;      Locals:         0       0       0       0       0       0       0
 18086 ;;      Temps:          0       0       0       0       0       0       0
 18087 ;;      Totals:         0       0       0       0       0       0       0
 18088 ;;Total ram usage:        0 bytes
 18089 ;; Hardware stack levels used:    1
 18090 ;; Hardware stack levels required when called:    7
 18091 ;; This function calls:
 18092 ;;		_I2C_Wait
 18093 ;; This function is called by:
 18094 ;;		_setDS1307TimeDate
 18095 ;;		_getDS1307TimeDate
 18096 ;;		_RTC_Init
 18097 ;;		_writeEEPROM_ext
 18098 ;;		_readEEPROM_ext
 18099 ;;		_getDS1307Time
 18100 ;;		_setDS1307Time
 18101 ;; This function uses a non-reentrant model
 18102 ;;
 18103                           
 18104                           	psect	text64
 18105  006CDC                     __ptext64:
 18106                           	opt stack 0
 18107  006CDC                     _I2C_Stop:
 18108                           	opt stack 0
 18109  006CDC  FFFF               	dw	65535	; assembler added errata NOP
 18110                           
 18111                           ;I2C.c: 37: I2C_Wait();
 18112                           
 18113                           ;incstack = 0
 18114  006CDE  ECB9  F036         	call	_I2C_Wait	;wreg free
 18115                           
 18116                           ;I2C.c: 38: PEN = 1;
 18117  006CE2  84C5               	bsf	4037,2,c	;volatile
 18118  006CE4  0012               	return		;funcret
 18119  006CE6  FFFF               	dw	65535	; errata NOP
 18120  006CE8                     __end_of_I2C_Stop:
 18121                           	opt stack 0
 18122                           tosu	equ	0xFFF
 18123                           tosh	equ	0xFFE
 18124                           tosl	equ	0xFFD
 18125                           pclath	equ	0xFFA
 18126                           tblptru	equ	0xFF8
 18127                           tblptrh	equ	0xFF7
 18128                           tblptrl	equ	0xFF6
 18129                           tablat	equ	0xFF5
 18130                           prodh	equ	0xFF4
 18131                           prodl	equ	0xFF3
 18132                           intcon	equ	0xFF2
 18133                           indf0	equ	0xFEF
 18134                           postinc0	equ	0xFEE
 18135                           fsr0h	equ	0xFEA
 18136                           fsr0l	equ	0xFE9
 18137                           wreg	equ	0xFE8
 18138                           postdec1	equ	0xFE5
 18139                           fsr1l	equ	0xFE1
 18140                           indf2	equ	0xFDF
 18141                           postinc2	equ	0xFDE
 18142                           postdec2	equ	0xFDD
 18143                           fsr2h	equ	0xFDA
 18144                           fsr2l	equ	0xFD9
 18145                           status	equ	0xFD8
 18146                           
 18147 ;; *************** function _I2C_Start *****************
 18148 ;; Defined at:
 18149 ;;		line 26 in file "I2C.c"
 18150 ;; Parameters:    Size  Location     Type
 18151 ;;		None
 18152 ;; Auto vars:     Size  Location     Type
 18153 ;;		None
 18154 ;; Return value:  Size  Location     Type
 18155 ;;                  1    wreg      void 
 18156 ;; Registers used:
 18157 ;;		wreg, status,2, status,0, cstack
 18158 ;; Tracked objects:
 18159 ;;		On entry : 0/0
 18160 ;;		On exit  : 0/0
 18161 ;;		Unchanged: 0/0
 18162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18163 ;;      Params:         0       0       0       0       0       0       0
 18164 ;;      Locals:         0       0       0       0       0       0       0
 18165 ;;      Temps:          0       0       0       0       0       0       0
 18166 ;;      Totals:         0       0       0       0       0       0       0
 18167 ;;Total ram usage:        0 bytes
 18168 ;; Hardware stack levels used:    1
 18169 ;; Hardware stack levels required when called:    7
 18170 ;; This function calls:
 18171 ;;		_I2C_Wait
 18172 ;; This function is called by:
 18173 ;;		_setDS1307TimeDate
 18174 ;;		_getDS1307TimeDate
 18175 ;;		_RTC_Init
 18176 ;;		_writeEEPROM_ext
 18177 ;;		_readEEPROM_ext
 18178 ;;		_getDS1307Time
 18179 ;;		_setDS1307Time
 18180 ;; This function uses a non-reentrant model
 18181 ;;
 18182                           
 18183                           	psect	text65
 18184  006CD0                     __ptext65:
 18185                           	opt stack 0
 18186  006CD0                     _I2C_Start:
 18187                           	opt stack 0
 18188  006CD0  FFFF               	dw	65535	; assembler added errata NOP
 18189                           
 18190                           ;I2C.c: 27: I2C_Wait();
 18191                           
 18192                           ;incstack = 0
 18193  006CD2  ECB9  F036         	call	_I2C_Wait	;wreg free
 18194                           
 18195                           ;I2C.c: 28: SEN = 1;
 18196  006CD6  80C5               	bsf	4037,0,c	;volatile
 18197  006CD8  0012               	return		;funcret
 18198  006CDA  FFFF               	dw	65535	; errata NOP
 18199  006CDC                     __end_of_I2C_Start:
 18200                           	opt stack 0
 18201                           tosu	equ	0xFFF
 18202                           tosh	equ	0xFFE
 18203                           tosl	equ	0xFFD
 18204                           pclath	equ	0xFFA
 18205                           tblptru	equ	0xFF8
 18206                           tblptrh	equ	0xFF7
 18207                           tblptrl	equ	0xFF6
 18208                           tablat	equ	0xFF5
 18209                           prodh	equ	0xFF4
 18210                           prodl	equ	0xFF3
 18211                           intcon	equ	0xFF2
 18212                           indf0	equ	0xFEF
 18213                           postinc0	equ	0xFEE
 18214                           fsr0h	equ	0xFEA
 18215                           fsr0l	equ	0xFE9
 18216                           wreg	equ	0xFE8
 18217                           postdec1	equ	0xFE5
 18218                           fsr1l	equ	0xFE1
 18219                           indf2	equ	0xFDF
 18220                           postinc2	equ	0xFDE
 18221                           postdec2	equ	0xFDD
 18222                           fsr2h	equ	0xFDA
 18223                           fsr2l	equ	0xFD9
 18224                           status	equ	0xFD8
 18225                           
 18226 ;; *************** function _I2C_Wait *****************
 18227 ;; Defined at:
 18228 ;;		line 22 in file "I2C.c"
 18229 ;; Parameters:    Size  Location     Type
 18230 ;;		None
 18231 ;; Auto vars:     Size  Location     Type
 18232 ;;		None
 18233 ;; Return value:  Size  Location     Type
 18234 ;;                  1    wreg      void 
 18235 ;; Registers used:
 18236 ;;		wreg, status,2, status,0
 18237 ;; Tracked objects:
 18238 ;;		On entry : 0/0
 18239 ;;		On exit  : 0/0
 18240 ;;		Unchanged: 0/0
 18241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18242 ;;      Params:         0       0       0       0       0       0       0
 18243 ;;      Locals:         0       0       0       0       0       0       0
 18244 ;;      Temps:          0       1       0       0       0       0       0
 18245 ;;      Totals:         0       1       0       0       0       0       0
 18246 ;;Total ram usage:        1 bytes
 18247 ;; Hardware stack levels used:    1
 18248 ;; Hardware stack levels required when called:    6
 18249 ;; This function calls:
 18250 ;;		Nothing
 18251 ;; This function is called by:
 18252 ;;		_I2C_Start
 18253 ;;		_I2C_Restart
 18254 ;;		_I2C_Stop
 18255 ;;		_I2C_Write
 18256 ;;		_I2C_Read
 18257 ;; This function uses a non-reentrant model
 18258 ;;
 18259                           
 18260                           	psect	text66
 18261  006D72                     __ptext66:
 18262                           	opt stack 0
 18263  006D72                     _I2C_Wait:
 18264                           	opt stack 0
 18265  006D72  FFFF               	dw	65535	; assembler added errata NOP
 18266                           
 18267                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 18268                           
 18269                           ;incstack = 0
 18270  006D74  B4C7               	btfsc	4039,2,c	;volatile
 18271  006D76  D7FD               	goto	_I2C_Wait
 18272  006D78  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 18273  006D7C  0E1F               	movlw	31
 18274  006D7E  0100               	movlb	0	; () banked
 18275  006D80  1780               	andwf	??_I2C_Wait& (0+255),f,b
 18276  006D82  B4D8               	btfsc	status,2,c
 18277                           
 18278                           ; BSR set to: 0
 18279                           
 18280                           ; BSR set to: 0
 18281  006D84  0012               	return		;funcret
 18282  006D86  FFFF               	dw	65535	; assembler added errata NOP
 18283  006D88  D7F4               	goto	_I2C_Wait
 18284  006D8A  FFFF               	dw	65535	; errata NOP
 18285  006D8C                     __end_of_I2C_Wait:
 18286                           	opt stack 0
 18287                           tosu	equ	0xFFF
 18288                           tosh	equ	0xFFE
 18289                           tosl	equ	0xFFD
 18290                           pclath	equ	0xFFA
 18291                           tblptru	equ	0xFF8
 18292                           tblptrh	equ	0xFF7
 18293                           tblptrl	equ	0xFF6
 18294                           tablat	equ	0xFF5
 18295                           prodh	equ	0xFF4
 18296                           prodl	equ	0xFF3
 18297                           intcon	equ	0xFF2
 18298                           indf0	equ	0xFEF
 18299                           postinc0	equ	0xFEE
 18300                           fsr0h	equ	0xFEA
 18301                           fsr0l	equ	0xFE9
 18302                           wreg	equ	0xFE8
 18303                           postdec1	equ	0xFE5
 18304                           fsr1l	equ	0xFE1
 18305                           indf2	equ	0xFDF
 18306                           postinc2	equ	0xFDE
 18307                           postdec2	equ	0xFDD
 18308                           fsr2h	equ	0xFDA
 18309                           fsr2l	equ	0xFD9
 18310                           status	equ	0xFD8
 18311                           
 18312 ;; *************** function _Lcd_Init *****************
 18313 ;; Defined at:
 18314 ;;		line 12 in file "lcd.h"
 18315 ;; Parameters:    Size  Location     Type
 18316 ;;		None
 18317 ;; Auto vars:     Size  Location     Type
 18318 ;;		None
 18319 ;; Return value:  Size  Location     Type
 18320 ;;                  1    wreg      void 
 18321 ;; Registers used:
 18322 ;;		wreg, status,2, cstack
 18323 ;; Tracked objects:
 18324 ;;		On entry : 0/0
 18325 ;;		On exit  : 0/0
 18326 ;;		Unchanged: 0/0
 18327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18328 ;;      Params:         0       0       0       0       0       0       0
 18329 ;;      Locals:         0       0       0       0       0       0       0
 18330 ;;      Temps:          0       1       0       0       0       0       0
 18331 ;;      Totals:         0       1       0       0       0       0       0
 18332 ;;Total ram usage:        1 bytes
 18333 ;; Hardware stack levels used:    1
 18334 ;; Hardware stack levels required when called:    8
 18335 ;; This function calls:
 18336 ;;		_Lcd_Cmd
 18337 ;;		_Lcd_Port
 18338 ;; This function is called by:
 18339 ;;		_main
 18340 ;; This function uses a non-reentrant model
 18341 ;;
 18342                           
 18343                           	psect	text67
 18344  0078EE                     __ptext67:
 18345                           	opt stack 0
 18346  0078EE                     _Lcd_Init:
 18347                           	opt stack 0
 18348  0078EE  FFFF               	dw	65535	; assembler added errata NOP
 18349                           
 18350                           ;lcd.h: 21: Lcd_Port(0x00);
 18351                           
 18352                           ; BSR set to: 0
 18353                           ;incstack = 0
 18354  0078F0  0E00               	movlw	0
 18355  0078F2  EC84  F039         	call	_Lcd_Port
 18356                           
 18357                           ;lcd.h: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
 18358  0078F6  0E3B               	movlw	59
 18359  0078F8  0100               	movlb	0	; () banked
 18360  0078FA  6F83               	movwf	??_Lcd_Init& (0+255),b
 18361  0078FC  0E79               	movlw	121
 18362  0078FE                     u9057:
 18363  0078FE  FFFF               	dw	65535	; errata NOP
 18364  007900  2EE8               	decfsz	wreg,f,c
 18365  007902  D7FD               	bra	u9057
 18366  007904  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18367  007906  D7FB               	bra	u9057
 18368  007908  D000               	nop2	
 18369  00790A  F000               	nop	
 18370                           
 18371                           ;lcd.h: 23: Lcd_Cmd(0x03);
 18372  00790C  0E03               	movlw	3
 18373  00790E  EC34  F037         	call	_Lcd_Cmd
 18374                           
 18375                           ;lcd.h: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
 18376  007912  0E1E               	movlw	30
 18377  007914  0100               	movlb	0	; () banked
 18378  007916  6F83               	movwf	??_Lcd_Init& (0+255),b
 18379  007918  0E3C               	movlw	60
 18380  00791A                     u9067:
 18381  00791A  FFFF               	dw	65535	; errata NOP
 18382  00791C  2EE8               	decfsz	wreg,f,c
 18383  00791E  D7FD               	bra	u9067
 18384  007920  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18385  007922  D7FB               	bra	u9067
 18386  007924  F000               	nop	
 18387                           
 18388                           ;lcd.h: 25: Lcd_Cmd(0x03);
 18389  007926  0E03               	movlw	3
 18390  007928  EC34  F037         	call	_Lcd_Cmd
 18391                           
 18392                           ;lcd.h: 26: _delay((unsigned long)((20)*(8000000/4000.0)));
 18393  00792C  0E27               	movlw	39
 18394  00792E  0100               	movlb	0	; () banked
 18395  007930  6F83               	movwf	??_Lcd_Init& (0+255),b
 18396  007932  0EFB               	movlw	251
 18397  007934                     u9077:
 18398  007934  FFFF               	dw	65535	; errata NOP
 18399  007936  2EE8               	decfsz	wreg,f,c
 18400  007938  D7FD               	bra	u9077
 18401  00793A  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18402  00793C  D7FB               	bra	u9077
 18403  00793E  D000               	nop2	
 18404  007940  F000               	nop	
 18405                           
 18406                           ;lcd.h: 27: Lcd_Cmd(0x03);
 18407  007942  0E03               	movlw	3
 18408  007944  EC34  F037         	call	_Lcd_Cmd
 18409                           
 18410                           ;lcd.h: 29: Lcd_Cmd(0x02);
 18411  007948  0E02               	movlw	2
 18412  00794A  EC34  F037         	call	_Lcd_Cmd
 18413                           
 18414                           ;lcd.h: 30: Lcd_Cmd(0x02);
 18415  00794E  0E02               	movlw	2
 18416  007950  EC34  F037         	call	_Lcd_Cmd
 18417                           
 18418                           ;lcd.h: 31: Lcd_Cmd(0x08);
 18419  007954  0E08               	movlw	8
 18420  007956  EC34  F037         	call	_Lcd_Cmd
 18421                           
 18422                           ;lcd.h: 32: Lcd_Cmd(0x00);
 18423  00795A  0E00               	movlw	0
 18424  00795C  EC34  F037         	call	_Lcd_Cmd
 18425                           
 18426                           ;lcd.h: 33: Lcd_Cmd(0x0C);
 18427  007960  0E0C               	movlw	12
 18428  007962  EC34  F037         	call	_Lcd_Cmd
 18429                           
 18430                           ;lcd.h: 34: Lcd_Cmd(0x00);
 18431  007966  0E00               	movlw	0
 18432  007968  EC34  F037         	call	_Lcd_Cmd
 18433                           
 18434                           ;lcd.h: 35: Lcd_Cmd(0x06);
 18435  00796C  0E06               	movlw	6
 18436  00796E  EC34  F037         	call	_Lcd_Cmd
 18437  007972  0012               	return		;funcret
 18438  007974  FFFF               	dw	65535	; errata NOP
 18439  007976                     __end_of_Lcd_Init:
 18440                           	opt stack 0
 18441                           tosu	equ	0xFFF
 18442                           tosh	equ	0xFFE
 18443                           tosl	equ	0xFFD
 18444                           pclath	equ	0xFFA
 18445                           tblptru	equ	0xFF8
 18446                           tblptrh	equ	0xFF7
 18447                           tblptrl	equ	0xFF6
 18448                           tablat	equ	0xFF5
 18449                           prodh	equ	0xFF4
 18450                           prodl	equ	0xFF3
 18451                           intcon	equ	0xFF2
 18452                           indf0	equ	0xFEF
 18453                           postinc0	equ	0xFEE
 18454                           fsr0h	equ	0xFEA
 18455                           fsr0l	equ	0xFE9
 18456                           wreg	equ	0xFE8
 18457                           postdec1	equ	0xFE5
 18458                           fsr1l	equ	0xFE1
 18459                           indf2	equ	0xFDF
 18460                           postinc2	equ	0xFDE
 18461                           postdec2	equ	0xFDD
 18462                           fsr2h	equ	0xFDA
 18463                           fsr2l	equ	0xFD9
 18464                           status	equ	0xFD8
 18465                           
 18466 ;; *************** function _Lcd_Clear *****************
 18467 ;; Defined at:
 18468 ;;		line 68 in file "lcd.h"
 18469 ;; Parameters:    Size  Location     Type
 18470 ;;		None
 18471 ;; Auto vars:     Size  Location     Type
 18472 ;;		None
 18473 ;; Return value:  Size  Location     Type
 18474 ;;                  1    wreg      void 
 18475 ;; Registers used:
 18476 ;;		wreg, status,2, cstack
 18477 ;; Tracked objects:
 18478 ;;		On entry : 0/0
 18479 ;;		On exit  : 0/0
 18480 ;;		Unchanged: 0/0
 18481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18482 ;;      Params:         0       0       0       0       0       0       0
 18483 ;;      Locals:         0       0       0       0       0       0       0
 18484 ;;      Temps:          0       0       0       0       0       0       0
 18485 ;;      Totals:         0       0       0       0       0       0       0
 18486 ;;Total ram usage:        0 bytes
 18487 ;; Hardware stack levels used:    1
 18488 ;; Hardware stack levels required when called:    8
 18489 ;; This function calls:
 18490 ;;		_Lcd_Cmd
 18491 ;; This function is called by:
 18492 ;;		_main
 18493 ;; This function uses a non-reentrant model
 18494 ;;
 18495                           
 18496                           	psect	text68
 18497  006D1E                     __ptext68:
 18498                           	opt stack 0
 18499  006D1E                     _Lcd_Clear:
 18500                           	opt stack 0
 18501  006D1E  FFFF               	dw	65535	; assembler added errata NOP
 18502                           
 18503                           ;lcd.h: 69: Lcd_Cmd(0);
 18504                           
 18505                           ;incstack = 0
 18506  006D20  0E00               	movlw	0
 18507  006D22  EC34  F037         	call	_Lcd_Cmd
 18508                           
 18509                           ;lcd.h: 70: Lcd_Cmd(1);
 18510  006D26  0E01               	movlw	1
 18511  006D28  EC34  F037         	call	_Lcd_Cmd
 18512  006D2C  0012               	return		;funcret
 18513  006D2E  FFFF               	dw	65535	; errata NOP
 18514  006D30                     __end_of_Lcd_Clear:
 18515                           	opt stack 0
 18516                           tosu	equ	0xFFF
 18517                           tosh	equ	0xFFE
 18518                           tosl	equ	0xFFD
 18519                           pclath	equ	0xFFA
 18520                           tblptru	equ	0xFF8
 18521                           tblptrh	equ	0xFF7
 18522                           tblptrl	equ	0xFF6
 18523                           tablat	equ	0xFF5
 18524                           prodh	equ	0xFF4
 18525                           prodl	equ	0xFF3
 18526                           intcon	equ	0xFF2
 18527                           indf0	equ	0xFEF
 18528                           postinc0	equ	0xFEE
 18529                           fsr0h	equ	0xFEA
 18530                           fsr0l	equ	0xFE9
 18531                           wreg	equ	0xFE8
 18532                           postdec1	equ	0xFE5
 18533                           fsr1l	equ	0xFE1
 18534                           indf2	equ	0xFDF
 18535                           postinc2	equ	0xFDE
 18536                           postdec2	equ	0xFDD
 18537                           fsr2h	equ	0xFDA
 18538                           fsr2l	equ	0xFD9
 18539                           status	equ	0xFD8
 18540                           
 18541 ;; *************** function _Lcd_Cmd *****************
 18542 ;; Defined at:
 18543 ;;		line 60 in file "lcd.h"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;  a               1    wreg     unsigned char 
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;  a               1    2[BANK0 ] unsigned char 
 18548 ;; Return value:  Size  Location     Type
 18549 ;;                  1    wreg      void 
 18550 ;; Registers used:
 18551 ;;		wreg, status,2, cstack
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18557 ;;      Params:         0       0       0       0       0       0       0
 18558 ;;      Locals:         0       1       0       0       0       0       0
 18559 ;;      Temps:          0       1       0       0       0       0       0
 18560 ;;      Totals:         0       2       0       0       0       0       0
 18561 ;;Total ram usage:        2 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    7
 18564 ;; This function calls:
 18565 ;;		_Lcd_Port
 18566 ;; This function is called by:
 18567 ;;		_Lcd_Init
 18568 ;;		_Lcd_Clear
 18569 ;;		_Lcd_Set_Cursor
 18570 ;;		_criarCaracteresCGRAM
 18571 ;; This function uses a non-reentrant model
 18572 ;;
 18573                           
 18574                           	psect	text69
 18575  006E68                     __ptext69:
 18576                           	opt stack 0
 18577  006E68                     _Lcd_Cmd:
 18578                           	opt stack 0
 18579  006E68  FFFF               	dw	65535	; assembler added errata NOP
 18580                           
 18581                           ;incstack = 0
 18582                           ;Lcd_Cmd@a stored from wreg
 18583  006E6A  0100               	movlb	0	; () banked
 18584  006E6C  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 18585                           
 18586                           ;lcd.h: 61: PORTDbits.RD1 = 0;
 18587  006E6E  9283               	bcf	3971,1,c	;volatile
 18588                           
 18589                           ;lcd.h: 62: Lcd_Port(a);
 18590  006E70  0100               	movlb	0	; () banked
 18591  006E72  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 18592  006E74  EC84  F039         	call	_Lcd_Port
 18593                           
 18594                           ;lcd.h: 63: PORTDbits.RD0 = 1;
 18595  006E78  8083               	bsf	3971,0,c	;volatile
 18596                           
 18597                           ;lcd.h: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
 18598  006E7A  0E1E               	movlw	30
 18599  006E7C  0100               	movlb	0	; () banked
 18600  006E7E  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 18601  006E80  0E3C               	movlw	60
 18602  006E82                     u9087:
 18603  006E82  FFFF               	dw	65535	; errata NOP
 18604  006E84  2EE8               	decfsz	wreg,f,c
 18605  006E86  D7FD               	bra	u9087
 18606  006E88  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 18607  006E8A  D7FB               	bra	u9087
 18608  006E8C  F000               	nop	
 18609                           
 18610                           ;lcd.h: 65: PORTDbits.RD0 = 0;
 18611  006E8E  9083               	bcf	3971,0,c	;volatile
 18612  006E90  0012               	return		;funcret
 18613  006E92  FFFF               	dw	65535	; errata NOP
 18614  006E94                     __end_of_Lcd_Cmd:
 18615                           	opt stack 0
 18616                           tosu	equ	0xFFF
 18617                           tosh	equ	0xFFE
 18618                           tosl	equ	0xFFD
 18619                           pclath	equ	0xFFA
 18620                           tblptru	equ	0xFF8
 18621                           tblptrh	equ	0xFF7
 18622                           tblptrl	equ	0xFF6
 18623                           tablat	equ	0xFF5
 18624                           prodh	equ	0xFF4
 18625                           prodl	equ	0xFF3
 18626                           intcon	equ	0xFF2
 18627                           indf0	equ	0xFEF
 18628                           postinc0	equ	0xFEE
 18629                           fsr0h	equ	0xFEA
 18630                           fsr0l	equ	0xFE9
 18631                           wreg	equ	0xFE8
 18632                           postdec1	equ	0xFE5
 18633                           fsr1l	equ	0xFE1
 18634                           indf2	equ	0xFDF
 18635                           postinc2	equ	0xFDE
 18636                           postdec2	equ	0xFDD
 18637                           fsr2h	equ	0xFDA
 18638                           fsr2l	equ	0xFD9
 18639                           status	equ	0xFD8
 18640                           
 18641 ;; *************** function _Lcd_Port *****************
 18642 ;; Defined at:
 18643 ;;		line 38 in file "lcd.h"
 18644 ;; Parameters:    Size  Location     Type
 18645 ;;  a               1    wreg     unsigned char 
 18646 ;; Auto vars:     Size  Location     Type
 18647 ;;  a               1    0[BANK0 ] unsigned char 
 18648 ;; Return value:  Size  Location     Type
 18649 ;;                  1    wreg      void 
 18650 ;; Registers used:
 18651 ;;		wreg
 18652 ;; Tracked objects:
 18653 ;;		On entry : 0/0
 18654 ;;		On exit  : 0/0
 18655 ;;		Unchanged: 0/0
 18656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18657 ;;      Params:         0       0       0       0       0       0       0
 18658 ;;      Locals:         0       1       0       0       0       0       0
 18659 ;;      Temps:          0       0       0       0       0       0       0
 18660 ;;      Totals:         0       1       0       0       0       0       0
 18661 ;;Total ram usage:        1 bytes
 18662 ;; Hardware stack levels used:    1
 18663 ;; Hardware stack levels required when called:    6
 18664 ;; This function calls:
 18665 ;;		Nothing
 18666 ;; This function is called by:
 18667 ;;		_Lcd_Init
 18668 ;;		_Lcd_Cmd
 18669 ;;		_Lcd_Write_Char
 18670 ;; This function uses a non-reentrant model
 18671 ;;
 18672                           
 18673                           	psect	text70
 18674  007308                     __ptext70:
 18675                           	opt stack 0
 18676  007308                     _Lcd_Port:
 18677                           	opt stack 0
 18678  007308  FFFF               	dw	65535	; assembler added errata NOP
 18679                           
 18680                           ;incstack = 0
 18681                           ;Lcd_Port@a stored from wreg
 18682  00730A  0100               	movlb	0	; () banked
 18683  00730C  6F80               	movwf	Lcd_Port@a& (0+255),b
 18684                           
 18685                           ;lcd.h: 39: if (a & 1)
 18686  00730E  0100               	movlb	0	; () banked
 18687  007310  A180               	btfss	Lcd_Port@a& (0+255),0,b
 18688  007312  D002               	goto	l613
 18689                           
 18690                           ; BSR set to: 0
 18691                           ;lcd.h: 40: PORTDbits.RD2 = 1;
 18692  007314  8483               	bsf	3971,2,c	;volatile
 18693  007316  D002               	goto	l614
 18694  007318                     l613:
 18695  007318  FFFF               	dw	65535	; assembler added errata NOP
 18696                           
 18697                           ; BSR set to: 0
 18698                           ;lcd.h: 41: else
 18699                           ;lcd.h: 42: PORTDbits.RD2 = 0;
 18700  00731A  9483               	bcf	3971,2,c	;volatile
 18701  00731C                     l614:
 18702  00731C  FFFF               	dw	65535	; assembler added errata NOP
 18703                           
 18704                           ; BSR set to: 0
 18705                           ;lcd.h: 44: if (a & 2)
 18706                           
 18707                           ; BSR set to: 0
 18708  00731E  A380               	btfss	Lcd_Port@a& (0+255),1,b
 18709  007320  D002               	goto	l615
 18710                           
 18711                           ; BSR set to: 0
 18712                           ;lcd.h: 45: PORTDbits.RD3 = 1;
 18713  007322  8683               	bsf	3971,3,c	;volatile
 18714  007324  D002               	goto	l616
 18715  007326                     l615:
 18716  007326  FFFF               	dw	65535	; assembler added errata NOP
 18717                           
 18718                           ; BSR set to: 0
 18719                           ;lcd.h: 46: else
 18720                           ;lcd.h: 47: PORTDbits.RD3 = 0;
 18721  007328  9683               	bcf	3971,3,c	;volatile
 18722  00732A                     l616:
 18723  00732A  FFFF               	dw	65535	; assembler added errata NOP
 18724                           
 18725                           ; BSR set to: 0
 18726                           ;lcd.h: 49: if (a & 4)
 18727                           
 18728                           ; BSR set to: 0
 18729  00732C  A580               	btfss	Lcd_Port@a& (0+255),2,b
 18730  00732E  D002               	goto	l617
 18731                           
 18732                           ; BSR set to: 0
 18733                           ;lcd.h: 50: PORTDbits.RD4 = 1;
 18734  007330  8883               	bsf	3971,4,c	;volatile
 18735  007332  D002               	goto	l618
 18736  007334                     l617:
 18737  007334  FFFF               	dw	65535	; assembler added errata NOP
 18738                           
 18739                           ; BSR set to: 0
 18740                           ;lcd.h: 51: else
 18741                           ;lcd.h: 52: PORTDbits.RD4 = 0;
 18742  007336  9883               	bcf	3971,4,c	;volatile
 18743  007338                     l618:
 18744  007338  FFFF               	dw	65535	; assembler added errata NOP
 18745                           
 18746                           ; BSR set to: 0
 18747                           ;lcd.h: 54: if (a & 8)
 18748                           
 18749                           ; BSR set to: 0
 18750  00733A  A780               	btfss	Lcd_Port@a& (0+255),3,b
 18751  00733C  D002               	goto	l619
 18752                           
 18753                           ; BSR set to: 0
 18754                           ;lcd.h: 55: PORTDbits.RD5 = 1;
 18755  00733E  8A83               	bsf	3971,5,c	;volatile
 18756  007340  D002               	goto	l620
 18757  007342                     l619:
 18758  007342  FFFF               	dw	65535	; assembler added errata NOP
 18759                           
 18760                           ; BSR set to: 0
 18761                           ;lcd.h: 56: else
 18762                           ;lcd.h: 57: PORTDbits.RD5 = 0;
 18763  007344  9A83               	bcf	3971,5,c	;volatile
 18764  007346                     l620:
 18765  007346  FFFF               	dw	65535	; assembler added errata NOP
 18766                           
 18767                           ; BSR set to: 0
 18768                           
 18769                           ; BSR set to: 0
 18770  007348  0012               	return		;funcret
 18771  00734A  FFFF               	dw	65535	; errata NOP
 18772  00734C                     __end_of_Lcd_Port:
 18773                           	opt stack 0
 18774                           tosu	equ	0xFFF
 18775                           tosh	equ	0xFFE
 18776                           tosl	equ	0xFFD
 18777                           pclath	equ	0xFFA
 18778                           tblptru	equ	0xFF8
 18779                           tblptrh	equ	0xFF7
 18780                           tblptrl	equ	0xFF6
 18781                           tablat	equ	0xFF5
 18782                           prodh	equ	0xFF4
 18783                           prodl	equ	0xFF3
 18784                           intcon	equ	0xFF2
 18785                           indf0	equ	0xFEF
 18786                           postinc0	equ	0xFEE
 18787                           fsr0h	equ	0xFEA
 18788                           fsr0l	equ	0xFE9
 18789                           wreg	equ	0xFE8
 18790                           postdec1	equ	0xFE5
 18791                           fsr1l	equ	0xFE1
 18792                           indf2	equ	0xFDF
 18793                           postinc2	equ	0xFDE
 18794                           postdec2	equ	0xFDD
 18795                           fsr2h	equ	0xFDA
 18796                           fsr2l	equ	0xFD9
 18797                           status	equ	0xFD8
 18798                           
 18799 ;; *************** function _I2C_Master_Init *****************
 18800 ;; Defined at:
 18801 ;;		line 13 in file "I2C.c"
 18802 ;; Parameters:    Size  Location     Type
 18803 ;;  c               4   13[BANK0 ] const unsigned long 
 18804 ;; Auto vars:     Size  Location     Type
 18805 ;;		None
 18806 ;; Return value:  Size  Location     Type
 18807 ;;                  1    wreg      void 
 18808 ;; Registers used:
 18809 ;;		wreg, status,2, status,0, cstack
 18810 ;; Tracked objects:
 18811 ;;		On entry : 0/0
 18812 ;;		On exit  : 0/0
 18813 ;;		Unchanged: 0/0
 18814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18815 ;;      Params:         0       4       0       0       0       0       0
 18816 ;;      Locals:         0       0       0       0       0       0       0
 18817 ;;      Temps:          0       4       0       0       0       0       0
 18818 ;;      Totals:         0       8       0       0       0       0       0
 18819 ;;Total ram usage:        8 bytes
 18820 ;; Hardware stack levels used:    1
 18821 ;; Hardware stack levels required when called:    7
 18822 ;; This function calls:
 18823 ;;		___lldiv
 18824 ;; This function is called by:
 18825 ;;		_main
 18826 ;; This function uses a non-reentrant model
 18827 ;;
 18828                           
 18829                           	psect	text71
 18830  007630                     __ptext71:
 18831                           	opt stack 0
 18832  007630                     _I2C_Master_Init:
 18833                           	opt stack 0
 18834  007630  FFFF               	dw	65535	; assembler added errata NOP
 18835                           
 18836                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 18837                           
 18838                           ; BSR set to: 0
 18839                           ;incstack = 0
 18840  007632  0E28               	movlw	40
 18841  007634  6EC6               	movwf	4038,c	;volatile
 18842                           
 18843                           ;I2C.c: 15: SSPCON2 = 0;
 18844  007636  0E00               	movlw	0
 18845  007638  6EC5               	movwf	4037,c	;volatile
 18846                           
 18847                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 18848  00763A  0E00               	movlw	0
 18849  00763C  0100               	movlb	0	; () banked
 18850  00763E  6F80               	movwf	___lldiv@dividend& (0+255),b
 18851  007640  0E12               	movlw	18
 18852  007642  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 18853  007644  0E7A               	movlw	122
 18854  007646  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 18855  007648  0E00               	movlw	0
 18856  00764A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 18857  00764C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 18858  007650  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 18859  007654  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 18860  007658  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 18861  00765C  0E02               	movlw	2
 18862  00765E                     u8735:
 18863  00765E  FFFF               	dw	65535	; assembler added errata NOP
 18864  007660  90D8               	bcf	status,0,c
 18865  007662  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 18866  007664  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 18867  007666  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 18868  007668  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 18869  00766A  2EE8               	decfsz	wreg,f,c
 18870  00766C  D7F8               	goto	u8735
 18871  00766E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 18872  007672  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 18873  007676  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 18874  00767A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 18875  00767E  ECBB  F03C         	call	___lldiv	;wreg free
 18876  007682  0100               	movlb	0	; () banked
 18877  007684  0580               	decf	?___lldiv& (0+255),w,b
 18878  007686  6EC8               	movwf	4040,c	;volatile
 18879                           
 18880                           ; BSR set to: 0
 18881                           ;I2C.c: 17: SSPSTAT = 0;
 18882  007688  0E00               	movlw	0
 18883  00768A  6EC7               	movwf	4039,c	;volatile
 18884                           
 18885                           ; BSR set to: 0
 18886                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 18887  00768C  8694               	bsf	3988,3,c	;volatile
 18888                           
 18889                           ; BSR set to: 0
 18890                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 18891  00768E  8894               	bsf	3988,4,c	;volatile
 18892                           
 18893                           ; BSR set to: 0
 18894  007690  0012               	return		;funcret
 18895  007692  FFFF               	dw	65535	; errata NOP
 18896  007694                     __end_of_I2C_Master_Init:
 18897                           	opt stack 0
 18898                           tosu	equ	0xFFF
 18899                           tosh	equ	0xFFE
 18900                           tosl	equ	0xFFD
 18901                           pclath	equ	0xFFA
 18902                           tblptru	equ	0xFF8
 18903                           tblptrh	equ	0xFF7
 18904                           tblptrl	equ	0xFF6
 18905                           tablat	equ	0xFF5
 18906                           prodh	equ	0xFF4
 18907                           prodl	equ	0xFF3
 18908                           intcon	equ	0xFF2
 18909                           indf0	equ	0xFEF
 18910                           postinc0	equ	0xFEE
 18911                           fsr0h	equ	0xFEA
 18912                           fsr0l	equ	0xFE9
 18913                           wreg	equ	0xFE8
 18914                           postdec1	equ	0xFE5
 18915                           fsr1l	equ	0xFE1
 18916                           indf2	equ	0xFDF
 18917                           postinc2	equ	0xFDE
 18918                           postdec2	equ	0xFDD
 18919                           fsr2h	equ	0xFDA
 18920                           fsr2l	equ	0xFD9
 18921                           status	equ	0xFD8
 18922                           
 18923 ;; *************** function ___lldiv *****************
 18924 ;; Defined at:
 18925 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 18926 ;; Parameters:    Size  Location     Type
 18927 ;;  dividend        4    0[BANK0 ] unsigned long 
 18928 ;;  divisor         4    4[BANK0 ] unsigned long 
 18929 ;; Auto vars:     Size  Location     Type
 18930 ;;  quotient        4    8[BANK0 ] unsigned long 
 18931 ;;  counter         1   12[BANK0 ] unsigned char 
 18932 ;; Return value:  Size  Location     Type
 18933 ;;                  4    0[BANK0 ] unsigned long 
 18934 ;; Registers used:
 18935 ;;		wreg, status,2, status,0
 18936 ;; Tracked objects:
 18937 ;;		On entry : 0/0
 18938 ;;		On exit  : 0/0
 18939 ;;		Unchanged: 0/0
 18940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18941 ;;      Params:         0       8       0       0       0       0       0
 18942 ;;      Locals:         0       5       0       0       0       0       0
 18943 ;;      Temps:          0       0       0       0       0       0       0
 18944 ;;      Totals:         0      13       0       0       0       0       0
 18945 ;;Total ram usage:       13 bytes
 18946 ;; Hardware stack levels used:    1
 18947 ;; Hardware stack levels required when called:    6
 18948 ;; This function calls:
 18949 ;;		Nothing
 18950 ;; This function is called by:
 18951 ;;		_I2C_Master_Init
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           	psect	text72
 18956  007976                     __ptext72:
 18957                           	opt stack 0
 18958  007976                     ___lldiv:
 18959                           	opt stack 0
 18960  007976  FFFF               	dw	65535	; assembler added errata NOP
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;incstack = 0
 18964  007978  0E00               	movlw	0
 18965  00797A  0100               	movlb	0	; () banked
 18966  00797C  6F88               	movwf	___lldiv@quotient& (0+255),b
 18967  00797E  0E00               	movlw	0
 18968  007980  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 18969  007982  0E00               	movlw	0
 18970  007984  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 18971  007986  0E00               	movlw	0
 18972  007988  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 18973                           
 18974                           ; BSR set to: 0
 18975  00798A  5184               	movf	___lldiv@divisor& (0+255),w,b
 18976  00798C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 18977  00798E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 18978  007990  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 18979  007992  B4D8               	btfsc	status,2,c
 18980  007994  D02E               	goto	l1482
 18981                           
 18982                           ; BSR set to: 0
 18983  007996  0E01               	movlw	1
 18984  007998  6F8C               	movwf	___lldiv@counter& (0+255),b
 18985  00799A  D007               	goto	l1477
 18986  00799C  FFFF               	dw	65535	; assembler added errata NOP
 18987                           
 18988                           ; BSR set to: 0
 18989                           
 18990                           ; BSR set to: 0
 18991  00799E  90D8               	bcf	status,0,c
 18992  0079A0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 18993  0079A2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 18994  0079A4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 18995  0079A6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 18996  0079A8  2B8C               	incf	___lldiv@counter& (0+255),f,b
 18997  0079AA                     l1477:
 18998  0079AA  FFFF               	dw	65535	; assembler added errata NOP
 18999                           
 19000                           ; BSR set to: 0
 19001                           
 19002                           ; BSR set to: 0
 19003  0079AC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19004  0079AE  D7F6               	goto	l1478
 19005  0079B0                     u6750:
 19006  0079B0  FFFF               	dw	65535	; assembler added errata NOP
 19007                           
 19008                           ; BSR set to: 0
 19009                           
 19010                           ; BSR set to: 0
 19011                           
 19012                           ; BSR set to: 0
 19013  0079B2  90D8               	bcf	status,0,c
 19014  0079B4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 19015  0079B6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19016  0079B8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19017  0079BA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19018                           
 19019                           ; BSR set to: 0
 19020  0079BC  5184               	movf	___lldiv@divisor& (0+255),w,b
 19021  0079BE  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 19022  0079C0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19023  0079C2  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19024  0079C4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19025  0079C6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19026  0079C8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19027  0079CA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19028  0079CC  A0D8               	btfss	status,0,c
 19029  0079CE  D009               	goto	l1481
 19030                           
 19031                           ; BSR set to: 0
 19032  0079D0  5184               	movf	___lldiv@divisor& (0+255),w,b
 19033  0079D2  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 19034  0079D4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19035  0079D6  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19036  0079D8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19037  0079DA  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19038  0079DC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19039  0079DE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19040                           
 19041                           ; BSR set to: 0
 19042  0079E0  8188               	bsf	___lldiv@quotient& (0+255),0,b
 19043  0079E2                     l1481:
 19044  0079E2  FFFF               	dw	65535	; assembler added errata NOP
 19045                           
 19046                           ; BSR set to: 0
 19047                           
 19048                           ; BSR set to: 0
 19049  0079E4  90D8               	bcf	status,0,c
 19050  0079E6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19051  0079E8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19052  0079EA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19053  0079EC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 19054                           
 19055                           ; BSR set to: 0
 19056  0079EE  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 19057  0079F0  D7DF               	goto	u6750
 19058  0079F2                     l1482:
 19059  0079F2  FFFF               	dw	65535	; assembler added errata NOP
 19060                           
 19061                           ; BSR set to: 0
 19062                           
 19063                           ; BSR set to: 0
 19064  0079F4  C088  F080         	movff	___lldiv@quotient,?___lldiv
 19065  0079F8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 19066  0079FC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 19067  007A00  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 19068                           
 19069                           ; BSR set to: 0
 19070  007A04  0012               	return		;funcret
 19071  007A06  FFFF               	dw	65535	; errata NOP
 19072  007A08                     __end_of___lldiv:
 19073                           	opt stack 0
 19074                           tosu	equ	0xFFF
 19075                           tosh	equ	0xFFE
 19076                           tosl	equ	0xFFD
 19077                           pclath	equ	0xFFA
 19078                           tblptru	equ	0xFF8
 19079                           tblptrh	equ	0xFF7
 19080                           tblptrl	equ	0xFF6
 19081                           tablat	equ	0xFF5
 19082                           prodh	equ	0xFF4
 19083                           prodl	equ	0xFF3
 19084                           intcon	equ	0xFF2
 19085                           indf0	equ	0xFEF
 19086                           postinc0	equ	0xFEE
 19087                           fsr0h	equ	0xFEA
 19088                           fsr0l	equ	0xFE9
 19089                           wreg	equ	0xFE8
 19090                           postdec1	equ	0xFE5
 19091                           fsr1l	equ	0xFE1
 19092                           indf2	equ	0xFDF
 19093                           postinc2	equ	0xFDE
 19094                           postdec2	equ	0xFDD
 19095                           fsr2h	equ	0xFDA
 19096                           fsr2l	equ	0xFD9
 19097                           status	equ	0xFD8
 19098                           
 19099 ;; *************** function _TIMER *****************
 19100 ;; Defined at:
 19101 ;;		line 32 in file "Main.c"
 19102 ;; Parameters:    Size  Location     Type
 19103 ;;		None
 19104 ;; Auto vars:     Size  Location     Type
 19105 ;;  c               1   66[COMRAM] unsigned char 
 19106 ;; Return value:  Size  Location     Type
 19107 ;;                  1    wreg      void 
 19108 ;; Registers used:
 19109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19110 ;; Tracked objects:
 19111 ;;		On entry : 0/0
 19112 ;;		On exit  : 0/0
 19113 ;;		Unchanged: 0/0
 19114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19115 ;;      Params:         0       0       0       0       0       0       0
 19116 ;;      Locals:         1       0       0       0       0       0       0
 19117 ;;      Temps:         18       0       0       0       0       0       0
 19118 ;;      Totals:        19       0       0       0       0       0       0
 19119 ;;Total ram usage:       19 bytes
 19120 ;; Hardware stack levels used:    1
 19121 ;; Hardware stack levels required when called:    5
 19122 ;; This function calls:
 19123 ;;		_lerTransdutor
 19124 ;;		_readButtons
 19125 ;;		_timer
 19126 ;; This function is called by:
 19127 ;;		Interrupt level 2
 19128 ;; This function uses a non-reentrant model
 19129 ;;
 19130                           
 19131                           	psect	intcode
 19132  000008                     __pintcode:
 19133                           	opt stack 0
 19134  000008                     _TIMER:
 19135                           	opt stack 0
 19136  000008  FFFF               	dw	65535	; assembler added errata NOP
 19137                           
 19138                           ; BSR set to: 0
 19139                           ;incstack = 0
 19140  00000A  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19141  00000C  CFFA F031          	movff	pclath,??_TIMER
 19142  000010  CFFB F032          	movff	pclatu,??_TIMER+1
 19143  000014  CFE9 F033          	movff	fsr0l,??_TIMER+2
 19144  000018  CFEA F034          	movff	fsr0h,??_TIMER+3
 19145  00001C  CFE1 F035          	movff	fsr1l,??_TIMER+4
 19146  000020  CFE2 F036          	movff	fsr1h,??_TIMER+5
 19147  000024  CFD9 F037          	movff	fsr2l,??_TIMER+6
 19148  000028  CFDA F038          	movff	fsr2h,??_TIMER+7
 19149  00002C  CFF3 F039          	movff	prodl,??_TIMER+8
 19150  000030  CFF4 F03A          	movff	prodh,??_TIMER+9
 19151  000034  CFF6 F03B          	movff	tblptrl,??_TIMER+10
 19152  000038  CFF7 F03C          	movff	tblptrh,??_TIMER+11
 19153  00003C  CFF8 F03D          	movff	tblptru,??_TIMER+12
 19154  000040  CFF5 F03E          	movff	tablat,??_TIMER+13
 19155  000044  C07D  F03F         	movff	btemp,??_TIMER+14
 19156  000048  C07E  F040         	movff	btemp+1,??_TIMER+15
 19157  00004C  C07F  F041         	movff	btemp+2,??_TIMER+16
 19158  000050  C080  F042         	movff	btemp+3,??_TIMER+17
 19159                           
 19160                           ;Main.c: 33: if (TMR0IF) {
 19161  000054  A4F2               	btfss	intcon,2,c	;volatile
 19162  000056  D01A               	goto	i2l891
 19163                           
 19164                           ;Main.c: 34: TMR0IF = 0x00;
 19165  000058  94F2               	bcf	intcon,2,c	;volatile
 19166                           
 19167                           ;Main.c: 35: TMR0H = 0x3C;
 19168  00005A  0E3C               	movlw	60
 19169  00005C  6ED7               	movwf	4055,c	;volatile
 19170                           
 19171                           ;Main.c: 36: TMR0L = 0xB0;
 19172  00005E  0EB0               	movlw	176
 19173  000060  6ED6               	movwf	4054,c	;volatile
 19174                           
 19175                           ;Main.c: 38: base_sec++;
 19176  000062  2A71               	incf	_base_sec,f,c
 19177                           
 19178                           ;Main.c: 40: if (base_sec == 5) {
 19179  000064  0E05               	movlw	5
 19180  000066  1871               	xorwf	_base_sec,w,c
 19181  000068  B4D8               	btfsc	status,2,c
 19182                           
 19183                           ;Main.c: 41: blinkk = ~blinkk;
 19184  00006A  1E67               	comf	_blinkk,f,c
 19185                           
 19186                           ;Main.c: 42: }
 19187                           ;Main.c: 44: lerTransdutor();
 19188  00006C  ECE5  F00F         	call	_lerTransdutor	;wreg free
 19189                           
 19190                           ;Main.c: 45: readButtons();
 19191  000070  ECF5  F03B         	call	_readButtons	;wreg free
 19192                           
 19193                           ;Main.c: 47: if (base_sec > 9) {
 19194  000074  0E09               	movlw	9
 19195  000076  6471               	cpfsgt	_base_sec,c
 19196  000078  D009               	goto	i2l891
 19197                           
 19198                           ;Main.c: 48: base_sec = 0;
 19199  00007A  0E00               	movlw	0
 19200  00007C  6E71               	movwf	_base_sec,c
 19201                           
 19202                           ;Main.c: 49: blinkk = ~blinkk;
 19203  00007E  1E67               	comf	_blinkk,f,c
 19204                           
 19205                           ;Main.c: 50: timer();
 19206  000080  EC9C  F015         	call	_timer	;wreg free
 19207                           
 19208                           ;Main.c: 51: if (RCSTAbits.OERR) {
 19209  000084  A2AB               	btfss	4011,1,c	;volatile
 19210  000086  D002               	goto	i2l891
 19211                           
 19212                           ;Main.c: 52: RCSTAbits.CREN = 0;
 19213  000088  98AB               	bcf	4011,4,c	;volatile
 19214                           
 19215                           ;Main.c: 53: RCSTAbits.CREN = 1;
 19216  00008A  88AB               	bsf	4011,4,c	;volatile
 19217  00008C                     i2l891:
 19218  00008C  FFFF               	dw	65535	; assembler added errata NOP
 19219                           
 19220                           ;Main.c: 54: }
 19221                           ;Main.c: 55: }
 19222                           ;Main.c: 56: }
 19223                           ;Main.c: 57: if (RCIF) {
 19224  00008E  AA9E               	btfss	3998,5,c	;volatile
 19225  000090  D01B               	goto	i2l894
 19226                           
 19227                           ;Main.c: 58: char c = RCREG;
 19228  000092  CFAE F043          	movff	4014,TIMER@c	;volatile
 19229                           
 19230                           ;Main.c: 59: if (c != '\n' && c != '\r') {
 19231  000096  0E0A               	movlw	10
 19232  000098  1843               	xorwf	TIMER@c,w,c
 19233  00009A  B4D8               	btfsc	status,2,c
 19234  00009C  D00F               	goto	i2l893
 19235  00009E  0E0D               	movlw	13
 19236  0000A0  1843               	xorwf	TIMER@c,w,c
 19237  0000A2  B4D8               	btfsc	status,2,c
 19238  0000A4  D00B               	goto	i2l893
 19239                           
 19240                           ;Main.c: 60: bufferSerial[cbf++] = c;
 19241  0000A6  5066               	movf	_cbf,w,c
 19242  0000A8  0D01               	mullw	1
 19243  0000AA  0E00               	movlw	low _bufferSerial
 19244  0000AC  24F3               	addwf	prodl,w,c
 19245  0000AE  6ED9               	movwf	fsr2l,c
 19246  0000B0  0E01               	movlw	high _bufferSerial
 19247  0000B2  20F4               	addwfc	prodh,w,c
 19248  0000B4  6EDA               	movwf	fsr2h,c
 19249  0000B6  C043  FFDF         	movff	TIMER@c,indf2
 19250  0000BA  2A66               	incf	_cbf,f,c
 19251  0000BC                     i2l893:
 19252  0000BC  FFFF               	dw	65535	; assembler added errata NOP
 19253                           
 19254                           ;Main.c: 61: }
 19255                           ;Main.c: 62: if (cbf >= 60) cbf = 0;
 19256  0000BE  0E3B               	movlw	59
 19257  0000C0  6466               	cpfsgt	_cbf,c
 19258  0000C2  D002               	goto	i2l894
 19259  0000C4  0E00               	movlw	0
 19260  0000C6  6E66               	movwf	_cbf,c
 19261  0000C8                     i2l894:
 19262  0000C8  FFFF               	dw	65535	; assembler added errata NOP
 19263  0000CA  C042  F080         	movff	??_TIMER+17,btemp+3
 19264  0000CE  C041  F07F         	movff	??_TIMER+16,btemp+2
 19265  0000D2  C040  F07E         	movff	??_TIMER+15,btemp+1
 19266  0000D6  C03F  F07D         	movff	??_TIMER+14,btemp
 19267  0000DA  C03E  FFF5         	movff	??_TIMER+13,tablat
 19268  0000DE  C03D  FFF8         	movff	??_TIMER+12,tblptru
 19269  0000E2  C03C  FFF7         	movff	??_TIMER+11,tblptrh
 19270  0000E6  C03B  FFF6         	movff	??_TIMER+10,tblptrl
 19271  0000EA  C03A  FFF4         	movff	??_TIMER+9,prodh
 19272  0000EE  C039  FFF3         	movff	??_TIMER+8,prodl
 19273  0000F2  C038  FFDA         	movff	??_TIMER+7,fsr2h
 19274  0000F6  C037  FFD9         	movff	??_TIMER+6,fsr2l
 19275  0000FA  C036  FFE2         	movff	??_TIMER+5,fsr1h
 19276  0000FE  C035  FFE1         	movff	??_TIMER+4,fsr1l
 19277  000102  C034  FFEA         	movff	??_TIMER+3,fsr0h
 19278  000106  C033  FFE9         	movff	??_TIMER+2,fsr0l
 19279  00010A  C032  FFFB         	movff	??_TIMER+1,pclatu
 19280  00010E  C031  FFFA         	movff	??_TIMER,pclath
 19281  000112  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19282  000114  0011               	retfie		f
 19283  000116  FFFF               	dw	65535	; errata NOP
 19284  000118                     __end_of_TIMER:
 19285                           	opt stack 0
 19286                           tosu	equ	0xFFF
 19287                           tosh	equ	0xFFE
 19288                           tosl	equ	0xFFD
 19289                           pclatu	equ	0xFFB
 19290                           pclath	equ	0xFFA
 19291                           tblptru	equ	0xFF8
 19292                           tblptrh	equ	0xFF7
 19293                           tblptrl	equ	0xFF6
 19294                           tablat	equ	0xFF5
 19295                           prodh	equ	0xFF4
 19296                           prodl	equ	0xFF3
 19297                           intcon	equ	0xFF2
 19298                           indf0	equ	0xFEF
 19299                           postinc0	equ	0xFEE
 19300                           fsr0h	equ	0xFEA
 19301                           fsr0l	equ	0xFE9
 19302                           wreg	equ	0xFE8
 19303                           postdec1	equ	0xFE5
 19304                           fsr1h	equ	0xFE2
 19305                           fsr1l	equ	0xFE1
 19306                           indf2	equ	0xFDF
 19307                           postinc2	equ	0xFDE
 19308                           postdec2	equ	0xFDD
 19309                           fsr2h	equ	0xFDA
 19310                           fsr2l	equ	0xFD9
 19311                           status	equ	0xFD8
 19312                           
 19313 ;; *************** function _timer *****************
 19314 ;; Defined at:
 19315 ;;		line 9 in file "temporizador.h"
 19316 ;; Parameters:    Size  Location     Type
 19317 ;;		None
 19318 ;; Auto vars:     Size  Location     Type
 19319 ;;		None
 19320 ;; Return value:  Size  Location     Type
 19321 ;;                  1    wreg      void 
 19322 ;; Registers used:
 19323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19324 ;; Tracked objects:
 19325 ;;		On entry : 0/0
 19326 ;;		On exit  : 0/0
 19327 ;;		Unchanged: 0/0
 19328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19329 ;;      Params:         0       0       0       0       0       0       0
 19330 ;;      Locals:         8       0       0       0       0       0       0
 19331 ;;      Temps:          0       0       0       0       0       0       0
 19332 ;;      Totals:         8       0       0       0       0       0       0
 19333 ;;Total ram usage:        8 bytes
 19334 ;; Hardware stack levels used:    1
 19335 ;; Hardware stack levels required when called:    4
 19336 ;; This function calls:
 19337 ;;		_writeEEPROM16_ext
 19338 ;;		i2_RTC_Init
 19339 ;;		i2_getDS1307TimeDate
 19340 ;;		i2_writeEEPROM_ext
 19341 ;; This function is called by:
 19342 ;;		_TIMER
 19343 ;; This function uses a non-reentrant model
 19344 ;;
 19345                           
 19346                           	psect	text74
 19347  002B38                     __ptext74:
 19348                           	opt stack 0
 19349  002B38                     _timer:
 19350                           	opt stack 0
 19351  002B38  FFFF               	dw	65535	; assembler added errata NOP
 19352                           
 19353                           ;temporizador.h: 11: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerifi
      +                          carSinal);
 19354                           
 19355                           ;incstack = 0
 19356  002B3A  0100               	movlb	0	; () banked
 19357  002B3C  51FE               	movf	_timerVerificarSinal& (0+255),w,b
 19358  002B3E  B4D8               	btfsc	status,2,c
 19359  002B40  D005               	goto	i2l570
 19360                           
 19361                           ; BSR set to: 0
 19362  002B42  07FE               	decf	_timerVerificarSinal& (0+255),f,b
 19363  002B44  C0FE  F009         	movff	_timerVerificarSinal,_timer$1321
 19364  002B48  6A0A               	clrf	_timer$1321+1,c
 19365  002B4A  D005               	goto	i2l572
 19366  002B4C                     i2l570:
 19367  002B4C  FFFF               	dw	65535	; assembler added errata NOP
 19368                           
 19369                           ; BSR set to: 0
 19370                           
 19371                           ; BSR set to: 0
 19372  002B4E  0E00               	movlw	0
 19373  002B50  6E0A               	movwf	_timer$1321+1,c
 19374  002B52  0E00               	movlw	0
 19375  002B54  6E09               	movwf	_timer$1321,c
 19376  002B56                     i2l572:
 19377  002B56  FFFF               	dw	65535	; assembler added errata NOP
 19378                           
 19379                           ; BSR set to: 0
 19380                           
 19381                           ; BSR set to: 0
 19382  002B58  C009  F0FE         	movff	_timer$1321,_timerVerificarSinal
 19383                           
 19384                           ;temporizador.h: 12: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEt
      +                          apaComunicacao);
 19385  002B5C  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 19386  002B5E  B4D8               	btfsc	status,2,c
 19387  002B60  D005               	goto	i2l574
 19388                           
 19389                           ; BSR set to: 0
 19390  002B62  07F5               	decf	_timerEtapaComunicacao& (0+255),f,b
 19391  002B64  C0F5  F00B         	movff	_timerEtapaComunicacao,_timer$1322
 19392  002B68  6A0C               	clrf	_timer$1322+1,c
 19393  002B6A  D005               	goto	i2l576
 19394  002B6C                     i2l574:
 19395  002B6C  FFFF               	dw	65535	; assembler added errata NOP
 19396                           
 19397                           ; BSR set to: 0
 19398                           
 19399                           ; BSR set to: 0
 19400  002B6E  0E00               	movlw	0
 19401  002B70  6E0C               	movwf	_timer$1322+1,c
 19402  002B72  0E00               	movlw	0
 19403  002B74  6E0B               	movwf	_timer$1322,c
 19404  002B76                     i2l576:
 19405  002B76  FFFF               	dw	65535	; assembler added errata NOP
 19406                           
 19407                           ; BSR set to: 0
 19408                           
 19409                           ; BSR set to: 0
 19410  002B78  C00B  F0F5         	movff	_timer$1322,_timerEtapaComunicacao
 19411                           
 19412                           ; BSR set to: 0
 19413                           ;temporizador.h: 13: timerTesteBombas = (timerTesteBombas <= 0 ? 0 : --timerTesteBombas)
      +                          ;
 19414  002B7C  51D9               	movf	_timerTesteBombas& (0+255),w,b
 19415  002B7E  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 19416  002B80  B4D8               	btfsc	status,2,c
 19417  002B82  D008               	goto	i2l578
 19418                           
 19419                           ; BSR set to: 0
 19420  002B84  07D9               	decf	_timerTesteBombas& (0+255),f,b
 19421  002B86  A0D8               	btfss	status,0,c
 19422  002B88  07DA               	decf	(_timerTesteBombas+1)& (0+255),f,b
 19423  002B8A  C0D9  F0D9         	movff	_timerTesteBombas,_timerTesteBombas
 19424  002B8E  C0DA  F0DA         	movff	_timerTesteBombas+1,_timerTesteBombas+1
 19425  002B92  D005               	goto	i2l580
 19426  002B94                     i2l578:
 19427  002B94  FFFF               	dw	65535	; assembler added errata NOP
 19428                           
 19429                           ; BSR set to: 0
 19430                           
 19431                           ; BSR set to: 0
 19432  002B96  0E00               	movlw	0
 19433  002B98  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 19434  002B9A  0E00               	movlw	0
 19435  002B9C  6FD9               	movwf	_timerTesteBombas& (0+255),b
 19436  002B9E                     i2l580:
 19437  002B9E  FFFF               	dw	65535	; assembler added errata NOP
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;temporizador.h: 14: timerReenvioSMS = (timerReenvioSMS <= 0 ? 0 : --timerReenvioSMS);
 19441  002BA0  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 19442  002BA2  B4D8               	btfsc	status,2,c
 19443  002BA4  D005               	goto	i2l582
 19444                           
 19445                           ; BSR set to: 0
 19446  002BA6  07F6               	decf	_timerReenvioSMS& (0+255),f,b
 19447  002BA8  C0F6  F00D         	movff	_timerReenvioSMS,_timer$1323
 19448  002BAC  6A0E               	clrf	_timer$1323+1,c
 19449  002BAE  D005               	goto	i2l584
 19450  002BB0                     i2l582:
 19451  002BB0  FFFF               	dw	65535	; assembler added errata NOP
 19452                           
 19453                           ; BSR set to: 0
 19454                           
 19455                           ; BSR set to: 0
 19456  002BB2  0E00               	movlw	0
 19457  002BB4  6E0E               	movwf	_timer$1323+1,c
 19458  002BB6  0E00               	movlw	0
 19459  002BB8  6E0D               	movwf	_timer$1323,c
 19460  002BBA                     i2l584:
 19461  002BBA  FFFF               	dw	65535	; assembler added errata NOP
 19462                           
 19463                           ; BSR set to: 0
 19464                           
 19465                           ; BSR set to: 0
 19466  002BBC  C00D  F0F6         	movff	_timer$1323,_timerReenvioSMS
 19467                           
 19468                           ;temporizador.h: 15: timerTrocarTextoLcd = (timerTrocarTextoLcd <= 0 ? 0 : --timerTrocar
      +                          TextoLcd);
 19469  002BC0  5075               	movf	_timerTrocarTextoLcd,w,c
 19470  002BC2  B4D8               	btfsc	status,2,c
 19471  002BC4  D005               	goto	i2l586
 19472                           
 19473                           ; BSR set to: 0
 19474  002BC6  0675               	decf	_timerTrocarTextoLcd,f,c
 19475  002BC8  C075  F00F         	movff	_timerTrocarTextoLcd,_timer$1324
 19476  002BCC  6A10               	clrf	_timer$1324+1,c
 19477  002BCE  D005               	goto	i2l588
 19478  002BD0                     i2l586:
 19479  002BD0  FFFF               	dw	65535	; assembler added errata NOP
 19480                           
 19481                           ; BSR set to: 0
 19482                           
 19483                           ; BSR set to: 0
 19484  002BD2  0E00               	movlw	0
 19485  002BD4  6E10               	movwf	_timer$1324+1,c
 19486  002BD6  0E00               	movlw	0
 19487  002BD8  6E0F               	movwf	_timer$1324,c
 19488  002BDA                     i2l588:
 19489  002BDA  FFFF               	dw	65535	; assembler added errata NOP
 19490                           
 19491                           ; BSR set to: 0
 19492                           
 19493                           ; BSR set to: 0
 19494  002BDC  C00F  F075         	movff	_timer$1324,_timerTrocarTextoLcd
 19495                           
 19496                           ;temporizador.h: 17: if(!timerTrocarTextoLcd){
 19497  002BE0  5075               	movf	_timerTrocarTextoLcd,w,c
 19498  002BE2  A4D8               	btfss	status,2,c
 19499  002BE4  D00B               	goto	i2l589
 19500                           
 19501                           ; BSR set to: 0
 19502                           ;temporizador.h: 18: timerTrocarTextoLcd = 3;
 19503  002BE6  0E03               	movlw	3
 19504  002BE8  6E75               	movwf	_timerTrocarTextoLcd,c
 19505                           
 19506                           ;temporizador.h: 19: flagTexto = !flagTexto;
 19507  002BEA  5074               	movf	_flagTexto,w,c
 19508  002BEC  A4D8               	btfss	status,2,c
 19509  002BEE  D002               	goto	i2u752_40
 19510  002BF0  0E01               	movlw	1
 19511  002BF2  D002               	goto	i2u753_40
 19512  002BF4                     i2u752_40:
 19513  002BF4  FFFF               	dw	65535	; assembler added errata NOP
 19514  002BF6  0E00               	movlw	0
 19515  002BF8                     i2u753_40:
 19516  002BF8  FFFF               	dw	65535	; assembler added errata NOP
 19517  002BFA  6E74               	movwf	_flagTexto,c
 19518  002BFC                     i2l589:
 19519  002BFC  FFFF               	dw	65535	; assembler added errata NOP
 19520                           
 19521                           ; BSR set to: 0
 19522                           ;temporizador.h: 20: }
 19523                           ;temporizador.h: 22: if (ajst_rtc) {
 19524  002BFE  5068               	movf	_ajst_rtc,w,c
 19525  002C00  A4D8               	btfss	status,2,c
 19526  002C02  D056               	goto	i2l595
 19527                           
 19528                           ; BSR set to: 0
 19529                           ;temporizador.h: 24: }
 19530                           ;temporizador.h: 25: _sec++;
 19531                           
 19532                           ; BSR set to: 0
 19533                           
 19534                           ; BSR set to: 0
 19535                           ;temporizador.h: 23: return;
 19536  002C04  2BEE               	incf	__sec& (0+255),f,b
 19537                           
 19538                           ; BSR set to: 0
 19539                           ;temporizador.h: 26: if (_sec > 59) {
 19540  002C06  0E3B               	movlw	59
 19541  002C08  65EE               	cpfsgt	__sec& (0+255),b
 19542  002C0A  D014               	goto	i2l594
 19543                           
 19544                           ; BSR set to: 0
 19545                           ;temporizador.h: 27: _sec = 0;
 19546  002C0C  0E00               	movlw	0
 19547  002C0E  6FEE               	movwf	__sec& (0+255),b
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;temporizador.h: 28: _min++;
 19551  002C10  2BED               	incf	__min& (0+255),f,b
 19552                           
 19553                           ; BSR set to: 0
 19554                           ;temporizador.h: 29: if (_min > 59) {
 19555  002C12  0E3B               	movlw	59
 19556  002C14  65ED               	cpfsgt	__min& (0+255),b
 19557  002C16  D00E               	goto	i2l594
 19558                           
 19559                           ; BSR set to: 0
 19560                           ;temporizador.h: 30: _min = 0;
 19561  002C18  0E00               	movlw	0
 19562  002C1A  6FED               	movwf	__min& (0+255),b
 19563                           
 19564                           ; BSR set to: 0
 19565                           ;temporizador.h: 31: _hor++;
 19566  002C1C  2BEC               	incf	__hor& (0+255),f,b
 19567                           
 19568                           ; BSR set to: 0
 19569                           ;temporizador.h: 32: if (_hor > 23) {
 19570  002C1E  0E17               	movlw	23
 19571  002C20  65EC               	cpfsgt	__hor& (0+255),b
 19572  002C22  D008               	goto	i2l594
 19573                           
 19574                           ; BSR set to: 0
 19575                           ;temporizador.h: 33: _hor = 0;
 19576  002C24  0E00               	movlw	0
 19577  002C26  6FEC               	movwf	__hor& (0+255),b
 19578                           
 19579                           ; BSR set to: 0
 19580                           ;temporizador.h: 34: dias_restante_teste++;
 19581  002C28  2BE7               	incf	_dias_restante_teste& (0+255),f,b
 19582                           
 19583                           ; BSR set to: 0
 19584                           ;temporizador.h: 35: writeEEPROM_ext(10, dias_restante_teste);
 19585  002C2A  C0E7  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 19586  002C2E  0E0A               	movlw	10
 19587  002C30  ECA7  F038         	call	i2_writeEEPROM_ext
 19588  002C34                     i2l594:
 19589  002C34  FFFF               	dw	65535	; assembler added errata NOP
 19590                           
 19591                           ;temporizador.h: 36: }
 19592                           ;temporizador.h: 37: }
 19593                           ;temporizador.h: 38: }
 19594                           ;temporizador.h: 40: if (rtc.min != _min) {
 19595  002C36  0100               	movlb	0	; () banked
 19596  002C38  51ED               	movf	__min& (0+255),w,b
 19597  002C3A  1878               	xorwf	_rtc+2,w,c
 19598  002C3C  B4D8               	btfsc	status,2,c
 19599  002C3E  D038               	goto	i2l595
 19600                           
 19601                           ; BSR set to: 0
 19602                           ;temporizador.h: 42: if (flagEstacionariaLigada) {
 19603  002C40  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 19604  002C42  B4D8               	btfsc	status,2,c
 19605  002C44  D009               	goto	i2l596
 19606                           
 19607                           ; BSR set to: 0
 19608                           ;temporizador.h: 43: horimetro++;
 19609  002C46  4A4F               	infsnz	_horimetro,f,c
 19610  002C48  2A50               	incf	_horimetro+1,f,c
 19611                           
 19612                           ; BSR set to: 0
 19613                           ;temporizador.h: 44: writeEEPROM16_ext(8, horimetro);
 19614  002C4A  C04F  F006         	movff	_horimetro,writeEEPROM16_ext@data
 19615  002C4E  C050  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 19616  002C52  0E08               	movlw	8
 19617  002C54  ECD3  F036         	call	_writeEEPROM16_ext
 19618  002C58                     i2l596:
 19619  002C58  FFFF               	dw	65535	; assembler added errata NOP
 19620                           
 19621                           ;temporizador.h: 45: }
 19622                           ;temporizador.h: 46: getDS1307TimeDate(&rtc);
 19623  002C5A  0E76               	movlw	low _rtc
 19624  002C5C  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 19625  002C5E  0E00               	movlw	high _rtc
 19626  002C60  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 19627  002C62  ECE7  F019         	call	i2_getDS1307TimeDate	;wreg free
 19628                           
 19629                           ;temporizador.h: 47: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 19630  002C66  0E3C               	movlw	60
 19631  002C68  6477               	cpfsgt	_rtc+1,c
 19632  002C6A  D015               	goto	i2l597
 19633  002C6C  0E3C               	movlw	60
 19634  002C6E  6478               	cpfsgt	_rtc+2,c
 19635  002C70  D012               	goto	i2l597
 19636  002C72  0E18               	movlw	24
 19637  002C74  6479               	cpfsgt	_rtc+3,c
 19638  002C76  D00F               	goto	i2l597
 19639                           
 19640                           ;temporizador.h: 49: RTC_Init();
 19641  002C78  EC79  F037         	call	i2_RTC_Init	;wreg free
 19642                           
 19643                           ;temporizador.h: 50: rtc.sec = _sec;
 19644  002C7C  C0EE  F077         	movff	__sec,_rtc+1
 19645                           
 19646                           ;temporizador.h: 51: rtc.min = _min;
 19647  002C80  C0ED  F078         	movff	__min,_rtc+2
 19648                           
 19649                           ;temporizador.h: 52: rtc.hour = _hor;
 19650  002C84  C0EC  F079         	movff	__hor,_rtc+3
 19651                           
 19652                           ;temporizador.h: 53: rtc.date = _dia;
 19653  002C88  C0EB  F07A         	movff	__dia,_rtc+4
 19654                           
 19655                           ;temporizador.h: 54: rtc.month = _mes;
 19656  002C8C  C0EA  F07B         	movff	__mes,_rtc+5
 19657                           
 19658                           ;temporizador.h: 55: rtc.year = _ano;
 19659  002C90  C0E9  F07C         	movff	__ano,_rtc+6
 19660                           
 19661                           ;temporizador.h: 56: return;
 19662  002C94  D00D               	goto	i2l595
 19663  002C96                     i2l597:
 19664  002C96  FFFF               	dw	65535	; assembler added errata NOP
 19665                           
 19666                           ;temporizador.h: 57: }
 19667                           ;temporizador.h: 58: _sec = rtc.sec;
 19668  002C98  C077  F0EE         	movff	_rtc+1,__sec
 19669                           
 19670                           ;temporizador.h: 59: _min = rtc.min;
 19671  002C9C  C078  F0ED         	movff	_rtc+2,__min
 19672                           
 19673                           ;temporizador.h: 60: _hor = rtc.hour;
 19674  002CA0  C079  F0EC         	movff	_rtc+3,__hor
 19675                           
 19676                           ;temporizador.h: 61: _dia = rtc.date;
 19677  002CA4  C07A  F0EB         	movff	_rtc+4,__dia
 19678                           
 19679                           ;temporizador.h: 62: _mes = rtc.month;
 19680  002CA8  C07B  F0EA         	movff	_rtc+5,__mes
 19681                           
 19682                           ;temporizador.h: 63: _ano = rtc.year;
 19683  002CAC  C07C  F0E9         	movff	_rtc+6,__ano
 19684  002CB0                     i2l595:
 19685  002CB0  FFFF               	dw	65535	; assembler added errata NOP
 19686  002CB2  0012               	return		;funcret
 19687  002CB4  FFFF               	dw	65535	; errata NOP
 19688  002CB6                     __end_of_timer:
 19689                           	opt stack 0
 19690                           tosu	equ	0xFFF
 19691                           tosh	equ	0xFFE
 19692                           tosl	equ	0xFFD
 19693                           pclatu	equ	0xFFB
 19694                           pclath	equ	0xFFA
 19695                           tblptru	equ	0xFF8
 19696                           tblptrh	equ	0xFF7
 19697                           tblptrl	equ	0xFF6
 19698                           tablat	equ	0xFF5
 19699                           prodh	equ	0xFF4
 19700                           prodl	equ	0xFF3
 19701                           intcon	equ	0xFF2
 19702                           indf0	equ	0xFEF
 19703                           postinc0	equ	0xFEE
 19704                           fsr0h	equ	0xFEA
 19705                           fsr0l	equ	0xFE9
 19706                           wreg	equ	0xFE8
 19707                           postdec1	equ	0xFE5
 19708                           fsr1h	equ	0xFE2
 19709                           fsr1l	equ	0xFE1
 19710                           indf2	equ	0xFDF
 19711                           postinc2	equ	0xFDE
 19712                           postdec2	equ	0xFDD
 19713                           fsr2h	equ	0xFDA
 19714                           fsr2l	equ	0xFD9
 19715                           status	equ	0xFD8
 19716                           
 19717 ;; *************** function i2_getDS1307TimeDate *****************
 19718 ;; Defined at:
 19719 ;;		line 52 in file "ds1307.h"
 19720 ;; Parameters:    Size  Location     Type
 19721 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 19722 ;;		 -> rtc(7), 
 19723 ;; Auto vars:     Size  Location     Type
 19724 ;;		None
 19725 ;; Return value:  Size  Location     Type
 19726 ;;                  1    wreg      void 
 19727 ;; Registers used:
 19728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19729 ;; Tracked objects:
 19730 ;;		On entry : 0/0
 19731 ;;		On exit  : 0/0
 19732 ;;		Unchanged: 0/0
 19733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19734 ;;      Params:         2       0       0       0       0       0       0
 19735 ;;      Locals:         0       0       0       0       0       0       0
 19736 ;;      Temps:          0       0       0       0       0       0       0
 19737 ;;      Totals:         2       0       0       0       0       0       0
 19738 ;;Total ram usage:        2 bytes
 19739 ;; Hardware stack levels used:    1
 19740 ;; Hardware stack levels required when called:    2
 19741 ;; This function calls:
 19742 ;;		i2_BCDtoDEC
 19743 ;;		i2_I2C_Read
 19744 ;;		i2_I2C_Restart
 19745 ;;		i2_I2C_Start
 19746 ;;		i2_I2C_Stop
 19747 ;;		i2_I2C_Write
 19748 ;; This function is called by:
 19749 ;;		_timer
 19750 ;; This function uses a non-reentrant model
 19751 ;;
 19752                           
 19753                           	psect	text75
 19754  0033CE                     __ptext75:
 19755                           	opt stack 0
 19756  0033CE                     i2_getDS1307TimeDate:
 19757                           	opt stack 0
 19758  0033CE  FFFF               	dw	65535	; assembler added errata NOP
 19759                           
 19760                           ;ds1307.h: 54: I2C_Start();
 19761                           
 19762                           ;incstack = 0
 19763  0033D0  EC56  F036         	call	i2_I2C_Start	;wreg free
 19764                           
 19765                           ;ds1307.h: 55: I2C_Write(0xD0);
 19766  0033D4  0E00               	movlw	0
 19767  0033D6  6E03               	movwf	i2I2C_Write@d+1,c
 19768  0033D8  0ED0               	movlw	208
 19769  0033DA  6E02               	movwf	i2I2C_Write@d,c
 19770  0033DC  EC7A  F036         	call	i2_I2C_Write	;wreg free
 19771                           
 19772                           ;ds1307.h: 56: I2C_Write(0x00);
 19773  0033E0  0E00               	movlw	0
 19774  0033E2  6E03               	movwf	i2I2C_Write@d+1,c
 19775  0033E4  0E00               	movlw	0
 19776  0033E6  6E02               	movwf	i2I2C_Write@d,c
 19777  0033E8  EC7A  F036         	call	i2_I2C_Write	;wreg free
 19778                           
 19779                           ;ds1307.h: 57: I2C_Restart();
 19780  0033EC  EC62  F036         	call	i2_I2C_Restart	;wreg free
 19781                           
 19782                           ;ds1307.h: 58: I2C_Write(0xD1);
 19783  0033F0  0E00               	movlw	0
 19784  0033F2  6E03               	movwf	i2I2C_Write@d+1,c
 19785  0033F4  0ED1               	movlw	209
 19786  0033F6  6E02               	movwf	i2I2C_Write@d,c
 19787  0033F8  EC7A  F036         	call	i2_I2C_Write	;wreg free
 19788                           
 19789                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 19790  0033FC  EE20 F001          	lfsr	2,1
 19791  003400  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19792  003402  26D9               	addwf	fsr2l,f,c
 19793  003404  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19794  003406  22DA               	addwfc	fsr2h,f,c
 19795  003408  0E00               	movlw	0
 19796  00340A  6E03               	movwf	i2I2C_Read@a+1,c
 19797  00340C  0E01               	movlw	1
 19798  00340E  6E02               	movwf	i2I2C_Read@a,c
 19799  003410  ECAC  F037         	call	i2_I2C_Read	;wreg free
 19800  003414  5002               	movf	?i2_I2C_Read,w,c
 19801  003416  ECA2  F036         	call	i2_BCDtoDEC
 19802  00341A  6EDF               	movwf	indf2,c
 19803                           
 19804                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 19805  00341C  EE20 F002          	lfsr	2,2
 19806  003420  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19807  003422  26D9               	addwf	fsr2l,f,c
 19808  003424  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19809  003426  22DA               	addwfc	fsr2h,f,c
 19810  003428  0E00               	movlw	0
 19811  00342A  6E03               	movwf	i2I2C_Read@a+1,c
 19812  00342C  0E01               	movlw	1
 19813  00342E  6E02               	movwf	i2I2C_Read@a,c
 19814  003430  ECAC  F037         	call	i2_I2C_Read	;wreg free
 19815  003434  5002               	movf	?i2_I2C_Read,w,c
 19816  003436  ECA2  F036         	call	i2_BCDtoDEC
 19817  00343A  6EDF               	movwf	indf2,c
 19818                           
 19819                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 19820  00343C  EE20 F003          	lfsr	2,3
 19821  003440  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19822  003442  26D9               	addwf	fsr2l,f,c
 19823  003444  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19824  003446  22DA               	addwfc	fsr2h,f,c
 19825  003448  0E00               	movlw	0
 19826  00344A  6E03               	movwf	i2I2C_Read@a+1,c
 19827  00344C  0E01               	movlw	1
 19828  00344E  6E02               	movwf	i2I2C_Read@a,c
 19829  003450  ECAC  F037         	call	i2_I2C_Read	;wreg free
 19830  003454  5002               	movf	?i2_I2C_Read,w,c
 19831  003456  ECA2  F036         	call	i2_BCDtoDEC
 19832  00345A  6EDF               	movwf	indf2,c
 19833                           
 19834                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 19835  00345C  0E00               	movlw	0
 19836  00345E  6E03               	movwf	i2I2C_Read@a+1,c
 19837  003460  0E01               	movlw	1
 19838  003462  6E02               	movwf	i2I2C_Read@a,c
 19839  003464  ECAC  F037         	call	i2_I2C_Read	;wreg free
 19840  003468  5002               	movf	?i2_I2C_Read,w,c
 19841  00346A  ECA2  F036         	call	i2_BCDtoDEC
 19842  00346E  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 19843  003472  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 19844  003476  6EDF               	movwf	indf2,c
 19845                           
 19846                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 19847  003478  EE20 F004          	lfsr	2,4
 19848  00347C  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19849  00347E  26D9               	addwf	fsr2l,f,c
 19850  003480  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19851  003482  22DA               	addwfc	fsr2h,f,c
 19852  003484  0E00               	movlw	0
 19853  003486  6E03               	movwf	i2I2C_Read@a+1,c
 19854  003488  0E01               	movlw	1
 19855  00348A  6E02               	movwf	i2I2C_Read@a,c
 19856  00348C  ECAC  F037         	call	i2_I2C_Read	;wreg free
 19857  003490  5002               	movf	?i2_I2C_Read,w,c
 19858  003492  ECA2  F036         	call	i2_BCDtoDEC
 19859  003496  6EDF               	movwf	indf2,c
 19860                           
 19861                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 19862  003498  EE20 F005          	lfsr	2,5
 19863  00349C  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19864  00349E  26D9               	addwf	fsr2l,f,c
 19865  0034A0  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19866  0034A2  22DA               	addwfc	fsr2h,f,c
 19867  0034A4  0E00               	movlw	0
 19868  0034A6  6E03               	movwf	i2I2C_Read@a+1,c
 19869  0034A8  0E01               	movlw	1
 19870  0034AA  6E02               	movwf	i2I2C_Read@a,c
 19871  0034AC  ECAC  F037         	call	i2_I2C_Read	;wreg free
 19872  0034B0  5002               	movf	?i2_I2C_Read,w,c
 19873  0034B2  ECA2  F036         	call	i2_BCDtoDEC
 19874  0034B6  6EDF               	movwf	indf2,c
 19875                           
 19876                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 19877  0034B8  EE20 F006          	lfsr	2,6
 19878  0034BC  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19879  0034BE  26D9               	addwf	fsr2l,f,c
 19880  0034C0  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19881  0034C2  22DA               	addwfc	fsr2h,f,c
 19882  0034C4  0E00               	movlw	0
 19883  0034C6  6E03               	movwf	i2I2C_Read@a+1,c
 19884  0034C8  0E00               	movlw	0
 19885  0034CA  6E02               	movwf	i2I2C_Read@a,c
 19886  0034CC  ECAC  F037         	call	i2_I2C_Read	;wreg free
 19887  0034D0  5002               	movf	?i2_I2C_Read,w,c
 19888  0034D2  ECA2  F036         	call	i2_BCDtoDEC
 19889  0034D6  6EDF               	movwf	indf2,c
 19890                           
 19891                           ;ds1307.h: 66: I2C_Stop();
 19892  0034D8  EC5C  F036         	call	i2_I2C_Stop	;wreg free
 19893  0034DC  0012               	return		;funcret
 19894  0034DE  FFFF               	dw	65535	; errata NOP
 19895  0034E0                     __end_ofi2_getDS1307TimeDate:
 19896                           	opt stack 0
 19897                           tosu	equ	0xFFF
 19898                           tosh	equ	0xFFE
 19899                           tosl	equ	0xFFD
 19900                           pclatu	equ	0xFFB
 19901                           pclath	equ	0xFFA
 19902                           tblptru	equ	0xFF8
 19903                           tblptrh	equ	0xFF7
 19904                           tblptrl	equ	0xFF6
 19905                           tablat	equ	0xFF5
 19906                           prodh	equ	0xFF4
 19907                           prodl	equ	0xFF3
 19908                           intcon	equ	0xFF2
 19909                           indf0	equ	0xFEF
 19910                           postinc0	equ	0xFEE
 19911                           fsr0h	equ	0xFEA
 19912                           fsr0l	equ	0xFE9
 19913                           wreg	equ	0xFE8
 19914                           postdec1	equ	0xFE5
 19915                           fsr1h	equ	0xFE2
 19916                           fsr1l	equ	0xFE1
 19917                           indf2	equ	0xFDF
 19918                           postinc2	equ	0xFDE
 19919                           postdec2	equ	0xFDD
 19920                           fsr2h	equ	0xFDA
 19921                           fsr2l	equ	0xFD9
 19922                           status	equ	0xFD8
 19923                           
 19924 ;; *************** function i2_I2C_Restart *****************
 19925 ;; Defined at:
 19926 ;;		line 31 in file "I2C.c"
 19927 ;; Parameters:    Size  Location     Type
 19928 ;;		None
 19929 ;; Auto vars:     Size  Location     Type
 19930 ;;		None
 19931 ;; Return value:  Size  Location     Type
 19932 ;;                  1    wreg      void 
 19933 ;; Registers used:
 19934 ;;		wreg, status,2, status,0, cstack
 19935 ;; Tracked objects:
 19936 ;;		On entry : 0/0
 19937 ;;		On exit  : 0/0
 19938 ;;		Unchanged: 0/0
 19939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19940 ;;      Params:         0       0       0       0       0       0       0
 19941 ;;      Locals:         0       0       0       0       0       0       0
 19942 ;;      Temps:          0       0       0       0       0       0       0
 19943 ;;      Totals:         0       0       0       0       0       0       0
 19944 ;;Total ram usage:        0 bytes
 19945 ;; Hardware stack levels used:    1
 19946 ;; Hardware stack levels required when called:    1
 19947 ;; This function calls:
 19948 ;;		i2_I2C_Wait
 19949 ;; This function is called by:
 19950 ;;		i2_getDS1307TimeDate
 19951 ;; This function uses a non-reentrant model
 19952 ;;
 19953                           
 19954                           	psect	text76
 19955  006CC4                     __ptext76:
 19956                           	opt stack 0
 19957  006CC4                     i2_I2C_Restart:
 19958                           	opt stack 0
 19959  006CC4  FFFF               	dw	65535	; assembler added errata NOP
 19960                           
 19961                           ;I2C.c: 32: I2C_Wait();
 19962                           
 19963                           ;incstack = 0
 19964  006CC6  ECAD  F036         	call	i2_I2C_Wait	;wreg free
 19965                           
 19966                           ;I2C.c: 33: RSEN = 1;
 19967  006CCA  82C5               	bsf	4037,1,c	;volatile
 19968  006CCC  0012               	return		;funcret
 19969  006CCE  FFFF               	dw	65535	; errata NOP
 19970  006CD0                     __end_ofi2_I2C_Restart:
 19971                           	opt stack 0
 19972                           tosu	equ	0xFFF
 19973                           tosh	equ	0xFFE
 19974                           tosl	equ	0xFFD
 19975                           pclatu	equ	0xFFB
 19976                           pclath	equ	0xFFA
 19977                           tblptru	equ	0xFF8
 19978                           tblptrh	equ	0xFF7
 19979                           tblptrl	equ	0xFF6
 19980                           tablat	equ	0xFF5
 19981                           prodh	equ	0xFF4
 19982                           prodl	equ	0xFF3
 19983                           intcon	equ	0xFF2
 19984                           indf0	equ	0xFEF
 19985                           postinc0	equ	0xFEE
 19986                           fsr0h	equ	0xFEA
 19987                           fsr0l	equ	0xFE9
 19988                           wreg	equ	0xFE8
 19989                           postdec1	equ	0xFE5
 19990                           fsr1h	equ	0xFE2
 19991                           fsr1l	equ	0xFE1
 19992                           indf2	equ	0xFDF
 19993                           postinc2	equ	0xFDE
 19994                           postdec2	equ	0xFDD
 19995                           fsr2h	equ	0xFDA
 19996                           fsr2l	equ	0xFD9
 19997                           status	equ	0xFD8
 19998                           
 19999 ;; *************** function i2_I2C_Read *****************
 20000 ;; Defined at:
 20001 ;;		line 47 in file "I2C.c"
 20002 ;; Parameters:    Size  Location     Type
 20003 ;;  a               2    1[COMRAM] unsigned short 
 20004 ;; Auto vars:     Size  Location     Type
 20005 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 20006 ;; Return value:  Size  Location     Type
 20007 ;;                  2    1[COMRAM] unsigned short 
 20008 ;; Registers used:
 20009 ;;		wreg, status,2, status,0, cstack
 20010 ;; Tracked objects:
 20011 ;;		On entry : 0/0
 20012 ;;		On exit  : 0/0
 20013 ;;		Unchanged: 0/0
 20014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20015 ;;      Params:         2       0       0       0       0       0       0
 20016 ;;      Locals:         2       0       0       0       0       0       0
 20017 ;;      Temps:          0       0       0       0       0       0       0
 20018 ;;      Totals:         4       0       0       0       0       0       0
 20019 ;;Total ram usage:        4 bytes
 20020 ;; Hardware stack levels used:    1
 20021 ;; Hardware stack levels required when called:    1
 20022 ;; This function calls:
 20023 ;;		i2_I2C_Wait
 20024 ;; This function is called by:
 20025 ;;		i2_getDS1307TimeDate
 20026 ;; This function uses a non-reentrant model
 20027 ;;
 20028                           
 20029                           	psect	text77
 20030  006F58                     __ptext77:
 20031                           	opt stack 0
 20032  006F58                     i2_I2C_Read:
 20033                           	opt stack 0
 20034  006F58  FFFF               	dw	65535	; assembler added errata NOP
 20035                           
 20036                           ;I2C.c: 48: unsigned short temp;
 20037                           ;I2C.c: 49: I2C_Wait();
 20038                           
 20039                           ;incstack = 0
 20040  006F5A  ECAD  F036         	call	i2_I2C_Wait	;wreg free
 20041                           
 20042                           ;I2C.c: 50: RCEN = 1;
 20043  006F5E  86C5               	bsf	4037,3,c	;volatile
 20044                           
 20045                           ;I2C.c: 51: I2C_Wait();
 20046  006F60  ECAD  F036         	call	i2_I2C_Wait	;wreg free
 20047                           
 20048                           ;I2C.c: 52: temp = SSPBUF;
 20049  006F64  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 20050  006F68  6A05               	clrf	i2I2C_Read@temp+1,c
 20051                           
 20052                           ;I2C.c: 53: I2C_Wait();
 20053  006F6A  ECAD  F036         	call	i2_I2C_Wait	;wreg free
 20054                           
 20055                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 20056  006F6E  5002               	movf	i2I2C_Read@a,w,c
 20057  006F70  1003               	iorwf	i2I2C_Read@a+1,w,c
 20058  006F72  A4D8               	btfss	status,2,c
 20059  006F74  D002               	goto	i2u556_40
 20060  006F76  8AC5               	bsf	4037,5,c	;volatile
 20061  006F78  D002               	goto	i2u557_45
 20062  006F7A                     i2u556_40:
 20063  006F7A  FFFF               	dw	65535	; assembler added errata NOP
 20064  006F7C  9AC5               	bcf	4037,5,c	;volatile
 20065  006F7E                     i2u557_45:
 20066  006F7E  FFFF               	dw	65535	; assembler added errata NOP
 20067                           
 20068                           ;I2C.c: 55: ACKEN = 1;
 20069  006F80  88C5               	bsf	4037,4,c	;volatile
 20070                           
 20071                           ;I2C.c: 56: return temp;
 20072  006F82  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 20073  006F86  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 20074  006F8A  0012               	return		;funcret
 20075  006F8C  FFFF               	dw	65535	; errata NOP
 20076  006F8E                     __end_ofi2_I2C_Read:
 20077                           	opt stack 0
 20078                           tosu	equ	0xFFF
 20079                           tosh	equ	0xFFE
 20080                           tosl	equ	0xFFD
 20081                           pclatu	equ	0xFFB
 20082                           pclath	equ	0xFFA
 20083                           tblptru	equ	0xFF8
 20084                           tblptrh	equ	0xFF7
 20085                           tblptrl	equ	0xFF6
 20086                           tablat	equ	0xFF5
 20087                           prodh	equ	0xFF4
 20088                           prodl	equ	0xFF3
 20089                           intcon	equ	0xFF2
 20090                           indf0	equ	0xFEF
 20091                           postinc0	equ	0xFEE
 20092                           fsr0h	equ	0xFEA
 20093                           fsr0l	equ	0xFE9
 20094                           wreg	equ	0xFE8
 20095                           postdec1	equ	0xFE5
 20096                           fsr1h	equ	0xFE2
 20097                           fsr1l	equ	0xFE1
 20098                           indf2	equ	0xFDF
 20099                           postinc2	equ	0xFDE
 20100                           postdec2	equ	0xFDD
 20101                           fsr2h	equ	0xFDA
 20102                           fsr2l	equ	0xFD9
 20103                           status	equ	0xFD8
 20104                           
 20105 ;; *************** function i2_BCDtoDEC *****************
 20106 ;; Defined at:
 20107 ;;		line 34 in file "function.c"
 20108 ;; Parameters:    Size  Location     Type
 20109 ;;  val             1    wreg     unsigned char 
 20110 ;; Auto vars:     Size  Location     Type
 20111 ;;  val             1    0[COMRAM] unsigned char 
 20112 ;; Return value:  Size  Location     Type
 20113 ;;                  1    wreg      unsigned char 
 20114 ;; Registers used:
 20115 ;;		wreg, status,2, status,0, prodl, prodh
 20116 ;; Tracked objects:
 20117 ;;		On entry : 0/0
 20118 ;;		On exit  : 0/0
 20119 ;;		Unchanged: 0/0
 20120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20121 ;;      Params:         0       0       0       0       0       0       0
 20122 ;;      Locals:         1       0       0       0       0       0       0
 20123 ;;      Temps:          0       0       0       0       0       0       0
 20124 ;;      Totals:         1       0       0       0       0       0       0
 20125 ;;Total ram usage:        1 bytes
 20126 ;; Hardware stack levels used:    1
 20127 ;; This function calls:
 20128 ;;		Nothing
 20129 ;; This function is called by:
 20130 ;;		i2_getDS1307TimeDate
 20131 ;; This function uses a non-reentrant model
 20132 ;;
 20133                           
 20134                           	psect	text78
 20135  006D44                     __ptext78:
 20136                           	opt stack 0
 20137  006D44                     i2_BCDtoDEC:
 20138                           	opt stack 0
 20139  006D44  FFFF               	dw	65535	; assembler added errata NOP
 20140                           
 20141                           ;incstack = 0
 20142                           ;i2BCDtoDEC@val stored from wreg
 20143  006D46  6E01               	movwf	i2BCDtoDEC@val,c
 20144                           
 20145                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 20146  006D48  3801               	swapf	i2BCDtoDEC@val,w,c
 20147  006D4A  0B0F               	andlw	15
 20148  006D4C  0B0F               	andlw	15
 20149  006D4E  0D0A               	mullw	10
 20150  006D50  5001               	movf	i2BCDtoDEC@val,w,c
 20151  006D52  0B0F               	andlw	15
 20152  006D54  24F3               	addwf	prodl,w,c
 20153  006D56  0012               	return		;funcret
 20154  006D58  FFFF               	dw	65535	; errata NOP
 20155  006D5A                     __end_ofi2_BCDtoDEC:
 20156                           	opt stack 0
 20157                           tosu	equ	0xFFF
 20158                           tosh	equ	0xFFE
 20159                           tosl	equ	0xFFD
 20160                           pclatu	equ	0xFFB
 20161                           pclath	equ	0xFFA
 20162                           tblptru	equ	0xFF8
 20163                           tblptrh	equ	0xFF7
 20164                           tblptrl	equ	0xFF6
 20165                           tablat	equ	0xFF5
 20166                           prodh	equ	0xFF4
 20167                           prodl	equ	0xFF3
 20168                           intcon	equ	0xFF2
 20169                           indf0	equ	0xFEF
 20170                           postinc0	equ	0xFEE
 20171                           fsr0h	equ	0xFEA
 20172                           fsr0l	equ	0xFE9
 20173                           wreg	equ	0xFE8
 20174                           postdec1	equ	0xFE5
 20175                           fsr1h	equ	0xFE2
 20176                           fsr1l	equ	0xFE1
 20177                           indf2	equ	0xFDF
 20178                           postinc2	equ	0xFDE
 20179                           postdec2	equ	0xFDD
 20180                           fsr2h	equ	0xFDA
 20181                           fsr2l	equ	0xFD9
 20182                           status	equ	0xFD8
 20183                           
 20184 ;; *************** function i2_RTC_Init *****************
 20185 ;; Defined at:
 20186 ;;		line 98 in file "ds1307.h"
 20187 ;; Parameters:    Size  Location     Type
 20188 ;;		None
 20189 ;; Auto vars:     Size  Location     Type
 20190 ;;		None
 20191 ;; Return value:  Size  Location     Type
 20192 ;;                  1    wreg      void 
 20193 ;; Registers used:
 20194 ;;		wreg, status,2, status,0, cstack
 20195 ;; Tracked objects:
 20196 ;;		On entry : 0/0
 20197 ;;		On exit  : 0/0
 20198 ;;		Unchanged: 0/0
 20199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20200 ;;      Params:         0       0       0       0       0       0       0
 20201 ;;      Locals:         0       0       0       0       0       0       0
 20202 ;;      Temps:          0       0       0       0       0       0       0
 20203 ;;      Totals:         0       0       0       0       0       0       0
 20204 ;;Total ram usage:        0 bytes
 20205 ;; Hardware stack levels used:    1
 20206 ;; Hardware stack levels required when called:    2
 20207 ;; This function calls:
 20208 ;;		i2_I2C_Start
 20209 ;;		i2_I2C_Stop
 20210 ;;		i2_I2C_Write
 20211 ;; This function is called by:
 20212 ;;		_timer
 20213 ;; This function uses a non-reentrant model
 20214 ;;
 20215                           
 20216                           	psect	text79
 20217  006EF2                     __ptext79:
 20218                           	opt stack 0
 20219  006EF2                     i2_RTC_Init:
 20220                           	opt stack 0
 20221  006EF2  FFFF               	dw	65535	; assembler added errata NOP
 20222                           
 20223                           ;ds1307.h: 100: I2C_Start();
 20224                           
 20225                           ;incstack = 0
 20226  006EF4  EC56  F036         	call	i2_I2C_Start	;wreg free
 20227                           
 20228                           ;ds1307.h: 101: I2C_Write(0xD0);
 20229  006EF8  0E00               	movlw	0
 20230  006EFA  6E03               	movwf	i2I2C_Write@d+1,c
 20231  006EFC  0ED0               	movlw	208
 20232  006EFE  6E02               	movwf	i2I2C_Write@d,c
 20233  006F00  EC7A  F036         	call	i2_I2C_Write	;wreg free
 20234                           
 20235                           ;ds1307.h: 102: I2C_Write(0x07);
 20236  006F04  0E00               	movlw	0
 20237  006F06  6E03               	movwf	i2I2C_Write@d+1,c
 20238  006F08  0E07               	movlw	7
 20239  006F0A  6E02               	movwf	i2I2C_Write@d,c
 20240  006F0C  EC7A  F036         	call	i2_I2C_Write	;wreg free
 20241                           
 20242                           ;ds1307.h: 103: I2C_Write(0x00);
 20243  006F10  0E00               	movlw	0
 20244  006F12  6E03               	movwf	i2I2C_Write@d+1,c
 20245  006F14  0E00               	movlw	0
 20246  006F16  6E02               	movwf	i2I2C_Write@d,c
 20247  006F18  EC7A  F036         	call	i2_I2C_Write	;wreg free
 20248                           
 20249                           ;ds1307.h: 104: I2C_Stop();
 20250  006F1C  EC5C  F036         	call	i2_I2C_Stop	;wreg free
 20251  006F20  0012               	return		;funcret
 20252  006F22  FFFF               	dw	65535	; errata NOP
 20253  006F24                     __end_ofi2_RTC_Init:
 20254                           	opt stack 0
 20255                           tosu	equ	0xFFF
 20256                           tosh	equ	0xFFE
 20257                           tosl	equ	0xFFD
 20258                           pclatu	equ	0xFFB
 20259                           pclath	equ	0xFFA
 20260                           tblptru	equ	0xFF8
 20261                           tblptrh	equ	0xFF7
 20262                           tblptrl	equ	0xFF6
 20263                           tablat	equ	0xFF5
 20264                           prodh	equ	0xFF4
 20265                           prodl	equ	0xFF3
 20266                           intcon	equ	0xFF2
 20267                           indf0	equ	0xFEF
 20268                           postinc0	equ	0xFEE
 20269                           fsr0h	equ	0xFEA
 20270                           fsr0l	equ	0xFE9
 20271                           wreg	equ	0xFE8
 20272                           postdec1	equ	0xFE5
 20273                           fsr1h	equ	0xFE2
 20274                           fsr1l	equ	0xFE1
 20275                           indf2	equ	0xFDF
 20276                           postinc2	equ	0xFDE
 20277                           postdec2	equ	0xFDD
 20278                           fsr2h	equ	0xFDA
 20279                           fsr2l	equ	0xFD9
 20280                           status	equ	0xFD8
 20281                           
 20282 ;; *************** function _writeEEPROM16_ext *****************
 20283 ;; Defined at:
 20284 ;;		line 40 in file "eeprom.h"
 20285 ;; Parameters:    Size  Location     Type
 20286 ;;  adress          1    wreg     unsigned char 
 20287 ;;  data            2    5[COMRAM] unsigned int 
 20288 ;; Auto vars:     Size  Location     Type
 20289 ;;  adress          1    7[COMRAM] unsigned char 
 20290 ;; Return value:  Size  Location     Type
 20291 ;;                  1    wreg      void 
 20292 ;; Registers used:
 20293 ;;		wreg, status,2, status,0, cstack
 20294 ;; Tracked objects:
 20295 ;;		On entry : 0/0
 20296 ;;		On exit  : 0/0
 20297 ;;		Unchanged: 0/0
 20298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20299 ;;      Params:         2       0       0       0       0       0       0
 20300 ;;      Locals:         1       0       0       0       0       0       0
 20301 ;;      Temps:          0       0       0       0       0       0       0
 20302 ;;      Totals:         3       0       0       0       0       0       0
 20303 ;;Total ram usage:        3 bytes
 20304 ;; Hardware stack levels used:    1
 20305 ;; Hardware stack levels required when called:    3
 20306 ;; This function calls:
 20307 ;;		i2_writeEEPROM_ext
 20308 ;; This function is called by:
 20309 ;;		_timer
 20310 ;; This function uses a non-reentrant model
 20311 ;;
 20312                           
 20313                           	psect	text80
 20314  006DA6                     __ptext80:
 20315                           	opt stack 0
 20316  006DA6                     _writeEEPROM16_ext:
 20317                           	opt stack 0
 20318  006DA6  FFFF               	dw	65535	; assembler added errata NOP
 20319                           
 20320                           ;incstack = 0
 20321                           ;writeEEPROM16_ext@adress stored from wreg
 20322  006DA8  6E08               	movwf	writeEEPROM16_ext@adress,c
 20323                           
 20324                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 20325  006DAA  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20326  006DAE  5008               	movf	writeEEPROM16_ext@adress,w,c
 20327  006DB0  ECA7  F038         	call	i2_writeEEPROM_ext
 20328                           
 20329                           ;eeprom.h: 42: data>> = 8;
 20330  006DB4  5007               	movf	writeEEPROM16_ext@data+1,w,c
 20331  006DB6  6E06               	movwf	writeEEPROM16_ext@data,c
 20332  006DB8  6A07               	clrf	writeEEPROM16_ext@data+1,c
 20333                           
 20334                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 20335  006DBA  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20336  006DBE  2808               	incf	writeEEPROM16_ext@adress,w,c
 20337  006DC0  ECA7  F038         	call	i2_writeEEPROM_ext
 20338  006DC4  0012               	return		;funcret
 20339  006DC6  FFFF               	dw	65535	; errata NOP
 20340  006DC8                     __end_of_writeEEPROM16_ext:
 20341                           	opt stack 0
 20342                           tosu	equ	0xFFF
 20343                           tosh	equ	0xFFE
 20344                           tosl	equ	0xFFD
 20345                           pclatu	equ	0xFFB
 20346                           pclath	equ	0xFFA
 20347                           tblptru	equ	0xFF8
 20348                           tblptrh	equ	0xFF7
 20349                           tblptrl	equ	0xFF6
 20350                           tablat	equ	0xFF5
 20351                           prodh	equ	0xFF4
 20352                           prodl	equ	0xFF3
 20353                           intcon	equ	0xFF2
 20354                           indf0	equ	0xFEF
 20355                           postinc0	equ	0xFEE
 20356                           fsr0h	equ	0xFEA
 20357                           fsr0l	equ	0xFE9
 20358                           wreg	equ	0xFE8
 20359                           postdec1	equ	0xFE5
 20360                           fsr1h	equ	0xFE2
 20361                           fsr1l	equ	0xFE1
 20362                           indf2	equ	0xFDF
 20363                           postinc2	equ	0xFDE
 20364                           postdec2	equ	0xFDD
 20365                           fsr2h	equ	0xFDA
 20366                           fsr2l	equ	0xFD9
 20367                           status	equ	0xFD8
 20368                           
 20369 ;; *************** function i2_writeEEPROM_ext *****************
 20370 ;; Defined at:
 20371 ;;		line 13 in file "eeprom.h"
 20372 ;; Parameters:    Size  Location     Type
 20373 ;;  adress          1    wreg     unsigned char 
 20374 ;;  data            1    3[COMRAM] unsigned char 
 20375 ;; Auto vars:     Size  Location     Type
 20376 ;;  adress          1    4[COMRAM] unsigned char 
 20377 ;; Return value:  Size  Location     Type
 20378 ;;                  1    wreg      void 
 20379 ;; Registers used:
 20380 ;;		wreg, status,2, status,0, cstack
 20381 ;; Tracked objects:
 20382 ;;		On entry : 0/0
 20383 ;;		On exit  : 0/0
 20384 ;;		Unchanged: 0/0
 20385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20386 ;;      Params:         1       0       0       0       0       0       0
 20387 ;;      Locals:         1       0       0       0       0       0       0
 20388 ;;      Temps:          0       0       0       0       0       0       0
 20389 ;;      Totals:         2       0       0       0       0       0       0
 20390 ;;Total ram usage:        2 bytes
 20391 ;; Hardware stack levels used:    1
 20392 ;; Hardware stack levels required when called:    2
 20393 ;; This function calls:
 20394 ;;		i2_I2C_Start
 20395 ;;		i2_I2C_Stop
 20396 ;;		i2_I2C_Write
 20397 ;;		i2_delay
 20398 ;; This function is called by:
 20399 ;;		_writeEEPROM16_ext
 20400 ;;		_timer
 20401 ;; This function uses a non-reentrant model
 20402 ;;
 20403                           
 20404                           	psect	text81
 20405  00714E                     __ptext81:
 20406                           	opt stack 0
 20407  00714E                     i2_writeEEPROM_ext:
 20408                           	opt stack 0
 20409  00714E  FFFF               	dw	65535	; assembler added errata NOP
 20410                           
 20411                           ;incstack = 0
 20412                           ;i2writeEEPROM_ext@adress stored from wreg
 20413  007150  6E05               	movwf	i2writeEEPROM_ext@adress,c
 20414                           
 20415                           ;eeprom.h: 15: I2C_Start();
 20416  007152  EC56  F036         	call	i2_I2C_Start	;wreg free
 20417                           
 20418                           ;eeprom.h: 16: I2C_Write(0xA0);
 20419  007156  0E00               	movlw	0
 20420  007158  6E03               	movwf	i2I2C_Write@d+1,c
 20421  00715A  0EA0               	movlw	160
 20422  00715C  6E02               	movwf	i2I2C_Write@d,c
 20423  00715E  EC7A  F036         	call	i2_I2C_Write	;wreg free
 20424                           
 20425                           ;eeprom.h: 18: I2C_Write(adress);
 20426  007162  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 20427  007166  6A03               	clrf	i2I2C_Write@d+1,c
 20428  007168  EC7A  F036         	call	i2_I2C_Write	;wreg free
 20429                           
 20430                           ;eeprom.h: 19: I2C_Write(data);
 20431  00716C  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 20432  007170  6A03               	clrf	i2I2C_Write@d+1,c
 20433  007172  EC7A  F036         	call	i2_I2C_Write	;wreg free
 20434                           
 20435                           ;eeprom.h: 20: I2C_Stop();
 20436  007176  EC5C  F036         	call	i2_I2C_Stop	;wreg free
 20437                           
 20438                           ;eeprom.h: 21: delay(15);
 20439  00717A  0E00               	movlw	0
 20440  00717C  6E02               	movwf	i2delay@x+1,c
 20441  00717E  0E0F               	movlw	15
 20442  007180  6E01               	movwf	i2delay@x,c
 20443  007182  EC60  F037         	call	i2_delay	;wreg free
 20444  007186  0012               	return		;funcret
 20445  007188  FFFF               	dw	65535	; errata NOP
 20446  00718A                     __end_ofi2_writeEEPROM_ext:
 20447                           	opt stack 0
 20448                           tosu	equ	0xFFF
 20449                           tosh	equ	0xFFE
 20450                           tosl	equ	0xFFD
 20451                           pclatu	equ	0xFFB
 20452                           pclath	equ	0xFFA
 20453                           tblptru	equ	0xFF8
 20454                           tblptrh	equ	0xFF7
 20455                           tblptrl	equ	0xFF6
 20456                           tablat	equ	0xFF5
 20457                           prodh	equ	0xFF4
 20458                           prodl	equ	0xFF3
 20459                           intcon	equ	0xFF2
 20460                           indf0	equ	0xFEF
 20461                           postinc0	equ	0xFEE
 20462                           fsr0h	equ	0xFEA
 20463                           fsr0l	equ	0xFE9
 20464                           wreg	equ	0xFE8
 20465                           postdec1	equ	0xFE5
 20466                           fsr1h	equ	0xFE2
 20467                           fsr1l	equ	0xFE1
 20468                           indf2	equ	0xFDF
 20469                           postinc2	equ	0xFDE
 20470                           postdec2	equ	0xFDD
 20471                           fsr2h	equ	0xFDA
 20472                           fsr2l	equ	0xFD9
 20473                           status	equ	0xFD8
 20474                           
 20475 ;; *************** function i2_delay *****************
 20476 ;; Defined at:
 20477 ;;		line 16 in file "function.c"
 20478 ;; Parameters:    Size  Location     Type
 20479 ;;  x               2    0[COMRAM] int 
 20480 ;; Auto vars:     Size  Location     Type
 20481 ;;		None
 20482 ;; Return value:  Size  Location     Type
 20483 ;;                  1    wreg      void 
 20484 ;; Registers used:
 20485 ;;		wreg, status,2, status,0
 20486 ;; Tracked objects:
 20487 ;;		On entry : 0/0
 20488 ;;		On exit  : 0/0
 20489 ;;		Unchanged: 0/0
 20490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20491 ;;      Params:         2       0       0       0       0       0       0
 20492 ;;      Locals:         0       0       0       0       0       0       0
 20493 ;;      Temps:          1       0       0       0       0       0       0
 20494 ;;      Totals:         3       0       0       0       0       0       0
 20495 ;;Total ram usage:        3 bytes
 20496 ;; Hardware stack levels used:    1
 20497 ;; This function calls:
 20498 ;;		Nothing
 20499 ;; This function is called by:
 20500 ;;		i2_writeEEPROM_ext
 20501 ;; This function uses a non-reentrant model
 20502 ;;
 20503                           
 20504                           	psect	text82
 20505  006EC0                     __ptext82:
 20506                           	opt stack 0
 20507  006EC0                     i2_delay:
 20508                           	opt stack 0
 20509  006EC0  FFFF               	dw	65535	; assembler added errata NOP
 20510                           
 20511                           ;function.c: 17: while (x--) {
 20512                           
 20513                           ;incstack = 0
 20514  006EC2  D00B               	goto	i2l1002
 20515  006EC4  FFFF               	dw	65535	; assembler added errata NOP
 20516  006EC6                     i2l5300:
 20517                           
 20518                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 20519  006EC6  0E02               	movlw	2
 20520  006EC8  6E03               	movwf	??i2_delay& (0+255),c
 20521  006ECA  0EF2               	movlw	242
 20522  006ECC                     i2u909_47:
 20523  006ECC  FFFF               	dw	65535	; errata NOP
 20524  006ECE  2EE8               	decfsz	wreg,f,c
 20525  006ED0  D7FD               	bra	i2u909_47
 20526  006ED2  2E03               	decfsz	??i2_delay& (0+255),f,c
 20527  006ED4  D7FB               	bra	i2u909_47
 20528  006ED6  D000               	nop2	
 20529  006ED8  0004               	clrwdt		;# 
 20530  006EDA                     i2l1002:
 20531  006EDA  FFFF               	dw	65535	; assembler added errata NOP
 20532  006EDC  0601               	decf	i2delay@x,f,c
 20533  006EDE  A0D8               	btfss	status,0,c
 20534  006EE0  0602               	decf	i2delay@x+1,f,c
 20535  006EE2  2801               	incf	i2delay@x,w,c
 20536  006EE4  E1F0               	bnz	i2l5300
 20537  006EE6  2802               	incf	i2delay@x+1,w,c
 20538  006EE8  B4D8               	btfsc	status,2,c
 20539  006EEA  0012               	return		;funcret
 20540  006EEC  FFFF               	dw	65535	; assembler added errata NOP
 20541  006EEE  D7EA               	goto	i2l1003
 20542  006EF0  FFFF               	dw	65535	; errata NOP
 20543  006EF2                     __end_ofi2_delay:
 20544                           	opt stack 0
 20545                           tosu	equ	0xFFF
 20546                           tosh	equ	0xFFE
 20547                           tosl	equ	0xFFD
 20548                           pclatu	equ	0xFFB
 20549                           pclath	equ	0xFFA
 20550                           tblptru	equ	0xFF8
 20551                           tblptrh	equ	0xFF7
 20552                           tblptrl	equ	0xFF6
 20553                           tablat	equ	0xFF5
 20554                           prodh	equ	0xFF4
 20555                           prodl	equ	0xFF3
 20556                           intcon	equ	0xFF2
 20557                           indf0	equ	0xFEF
 20558                           postinc0	equ	0xFEE
 20559                           fsr0h	equ	0xFEA
 20560                           fsr0l	equ	0xFE9
 20561                           wreg	equ	0xFE8
 20562                           postdec1	equ	0xFE5
 20563                           fsr1h	equ	0xFE2
 20564                           fsr1l	equ	0xFE1
 20565                           indf2	equ	0xFDF
 20566                           postinc2	equ	0xFDE
 20567                           postdec2	equ	0xFDD
 20568                           fsr2h	equ	0xFDA
 20569                           fsr2l	equ	0xFD9
 20570                           status	equ	0xFD8
 20571                           
 20572 ;; *************** function i2_I2C_Write *****************
 20573 ;; Defined at:
 20574 ;;		line 42 in file "I2C.c"
 20575 ;; Parameters:    Size  Location     Type
 20576 ;;  d               2    1[COMRAM] unsigned int 
 20577 ;; Auto vars:     Size  Location     Type
 20578 ;;		None
 20579 ;; Return value:  Size  Location     Type
 20580 ;;                  1    wreg      void 
 20581 ;; Registers used:
 20582 ;;		wreg, status,2, status,0, cstack
 20583 ;; Tracked objects:
 20584 ;;		On entry : 0/0
 20585 ;;		On exit  : 0/0
 20586 ;;		Unchanged: 0/0
 20587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20588 ;;      Params:         2       0       0       0       0       0       0
 20589 ;;      Locals:         0       0       0       0       0       0       0
 20590 ;;      Temps:          0       0       0       0       0       0       0
 20591 ;;      Totals:         2       0       0       0       0       0       0
 20592 ;;Total ram usage:        2 bytes
 20593 ;; Hardware stack levels used:    1
 20594 ;; Hardware stack levels required when called:    1
 20595 ;; This function calls:
 20596 ;;		i2_I2C_Wait
 20597 ;; This function is called by:
 20598 ;;		i2_getDS1307TimeDate
 20599 ;;		i2_RTC_Init
 20600 ;;		i2_writeEEPROM_ext
 20601 ;; This function uses a non-reentrant model
 20602 ;;
 20603                           
 20604                           	psect	text83
 20605  006CF4                     __ptext83:
 20606                           	opt stack 0
 20607  006CF4                     i2_I2C_Write:
 20608                           	opt stack 0
 20609  006CF4  FFFF               	dw	65535	; assembler added errata NOP
 20610                           
 20611                           ;I2C.c: 43: I2C_Wait();
 20612                           
 20613                           ;incstack = 0
 20614  006CF6  ECAD  F036         	call	i2_I2C_Wait	;wreg free
 20615                           
 20616                           ;I2C.c: 44: SSPBUF = d;
 20617  006CFA  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 20618  006CFE  0012               	return		;funcret
 20619  006D00  FFFF               	dw	65535	; errata NOP
 20620  006D02                     __end_ofi2_I2C_Write:
 20621                           	opt stack 0
 20622                           tosu	equ	0xFFF
 20623                           tosh	equ	0xFFE
 20624                           tosl	equ	0xFFD
 20625                           pclatu	equ	0xFFB
 20626                           pclath	equ	0xFFA
 20627                           tblptru	equ	0xFF8
 20628                           tblptrh	equ	0xFF7
 20629                           tblptrl	equ	0xFF6
 20630                           tablat	equ	0xFF5
 20631                           prodh	equ	0xFF4
 20632                           prodl	equ	0xFF3
 20633                           intcon	equ	0xFF2
 20634                           indf0	equ	0xFEF
 20635                           postinc0	equ	0xFEE
 20636                           fsr0h	equ	0xFEA
 20637                           fsr0l	equ	0xFE9
 20638                           wreg	equ	0xFE8
 20639                           postdec1	equ	0xFE5
 20640                           fsr1h	equ	0xFE2
 20641                           fsr1l	equ	0xFE1
 20642                           indf2	equ	0xFDF
 20643                           postinc2	equ	0xFDE
 20644                           postdec2	equ	0xFDD
 20645                           fsr2h	equ	0xFDA
 20646                           fsr2l	equ	0xFD9
 20647                           status	equ	0xFD8
 20648                           
 20649 ;; *************** function i2_I2C_Stop *****************
 20650 ;; Defined at:
 20651 ;;		line 36 in file "I2C.c"
 20652 ;; Parameters:    Size  Location     Type
 20653 ;;		None
 20654 ;; Auto vars:     Size  Location     Type
 20655 ;;		None
 20656 ;; Return value:  Size  Location     Type
 20657 ;;                  1    wreg      void 
 20658 ;; Registers used:
 20659 ;;		wreg, status,2, status,0, cstack
 20660 ;; Tracked objects:
 20661 ;;		On entry : 0/0
 20662 ;;		On exit  : 0/0
 20663 ;;		Unchanged: 0/0
 20664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20665 ;;      Params:         0       0       0       0       0       0       0
 20666 ;;      Locals:         0       0       0       0       0       0       0
 20667 ;;      Temps:          0       0       0       0       0       0       0
 20668 ;;      Totals:         0       0       0       0       0       0       0
 20669 ;;Total ram usage:        0 bytes
 20670 ;; Hardware stack levels used:    1
 20671 ;; Hardware stack levels required when called:    1
 20672 ;; This function calls:
 20673 ;;		i2_I2C_Wait
 20674 ;; This function is called by:
 20675 ;;		i2_getDS1307TimeDate
 20676 ;;		i2_RTC_Init
 20677 ;;		i2_writeEEPROM_ext
 20678 ;; This function uses a non-reentrant model
 20679 ;;
 20680                           
 20681                           	psect	text84
 20682  006CB8                     __ptext84:
 20683                           	opt stack 0
 20684  006CB8                     i2_I2C_Stop:
 20685                           	opt stack 0
 20686  006CB8  FFFF               	dw	65535	; assembler added errata NOP
 20687                           
 20688                           ;I2C.c: 37: I2C_Wait();
 20689                           
 20690                           ;incstack = 0
 20691  006CBA  ECAD  F036         	call	i2_I2C_Wait	;wreg free
 20692                           
 20693                           ;I2C.c: 38: PEN = 1;
 20694  006CBE  84C5               	bsf	4037,2,c	;volatile
 20695  006CC0  0012               	return		;funcret
 20696  006CC2  FFFF               	dw	65535	; errata NOP
 20697  006CC4                     __end_ofi2_I2C_Stop:
 20698                           	opt stack 0
 20699                           tosu	equ	0xFFF
 20700                           tosh	equ	0xFFE
 20701                           tosl	equ	0xFFD
 20702                           pclatu	equ	0xFFB
 20703                           pclath	equ	0xFFA
 20704                           tblptru	equ	0xFF8
 20705                           tblptrh	equ	0xFF7
 20706                           tblptrl	equ	0xFF6
 20707                           tablat	equ	0xFF5
 20708                           prodh	equ	0xFF4
 20709                           prodl	equ	0xFF3
 20710                           intcon	equ	0xFF2
 20711                           indf0	equ	0xFEF
 20712                           postinc0	equ	0xFEE
 20713                           fsr0h	equ	0xFEA
 20714                           fsr0l	equ	0xFE9
 20715                           wreg	equ	0xFE8
 20716                           postdec1	equ	0xFE5
 20717                           fsr1h	equ	0xFE2
 20718                           fsr1l	equ	0xFE1
 20719                           indf2	equ	0xFDF
 20720                           postinc2	equ	0xFDE
 20721                           postdec2	equ	0xFDD
 20722                           fsr2h	equ	0xFDA
 20723                           fsr2l	equ	0xFD9
 20724                           status	equ	0xFD8
 20725                           
 20726 ;; *************** function i2_I2C_Start *****************
 20727 ;; Defined at:
 20728 ;;		line 26 in file "I2C.c"
 20729 ;; Parameters:    Size  Location     Type
 20730 ;;		None
 20731 ;; Auto vars:     Size  Location     Type
 20732 ;;		None
 20733 ;; Return value:  Size  Location     Type
 20734 ;;                  1    wreg      void 
 20735 ;; Registers used:
 20736 ;;		wreg, status,2, status,0, cstack
 20737 ;; Tracked objects:
 20738 ;;		On entry : 0/0
 20739 ;;		On exit  : 0/0
 20740 ;;		Unchanged: 0/0
 20741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20742 ;;      Params:         0       0       0       0       0       0       0
 20743 ;;      Locals:         0       0       0       0       0       0       0
 20744 ;;      Temps:          0       0       0       0       0       0       0
 20745 ;;      Totals:         0       0       0       0       0       0       0
 20746 ;;Total ram usage:        0 bytes
 20747 ;; Hardware stack levels used:    1
 20748 ;; Hardware stack levels required when called:    1
 20749 ;; This function calls:
 20750 ;;		i2_I2C_Wait
 20751 ;; This function is called by:
 20752 ;;		i2_getDS1307TimeDate
 20753 ;;		i2_RTC_Init
 20754 ;;		i2_writeEEPROM_ext
 20755 ;; This function uses a non-reentrant model
 20756 ;;
 20757                           
 20758                           	psect	text85
 20759  006CAC                     __ptext85:
 20760                           	opt stack 0
 20761  006CAC                     i2_I2C_Start:
 20762                           	opt stack 0
 20763  006CAC  FFFF               	dw	65535	; assembler added errata NOP
 20764                           
 20765                           ;I2C.c: 27: I2C_Wait();
 20766                           
 20767                           ;incstack = 0
 20768  006CAE  ECAD  F036         	call	i2_I2C_Wait	;wreg free
 20769                           
 20770                           ;I2C.c: 28: SEN = 1;
 20771  006CB2  80C5               	bsf	4037,0,c	;volatile
 20772  006CB4  0012               	return		;funcret
 20773  006CB6  FFFF               	dw	65535	; errata NOP
 20774  006CB8                     __end_ofi2_I2C_Start:
 20775                           	opt stack 0
 20776                           tosu	equ	0xFFF
 20777                           tosh	equ	0xFFE
 20778                           tosl	equ	0xFFD
 20779                           pclatu	equ	0xFFB
 20780                           pclath	equ	0xFFA
 20781                           tblptru	equ	0xFF8
 20782                           tblptrh	equ	0xFF7
 20783                           tblptrl	equ	0xFF6
 20784                           tablat	equ	0xFF5
 20785                           prodh	equ	0xFF4
 20786                           prodl	equ	0xFF3
 20787                           intcon	equ	0xFF2
 20788                           indf0	equ	0xFEF
 20789                           postinc0	equ	0xFEE
 20790                           fsr0h	equ	0xFEA
 20791                           fsr0l	equ	0xFE9
 20792                           wreg	equ	0xFE8
 20793                           postdec1	equ	0xFE5
 20794                           fsr1h	equ	0xFE2
 20795                           fsr1l	equ	0xFE1
 20796                           indf2	equ	0xFDF
 20797                           postinc2	equ	0xFDE
 20798                           postdec2	equ	0xFDD
 20799                           fsr2h	equ	0xFDA
 20800                           fsr2l	equ	0xFD9
 20801                           status	equ	0xFD8
 20802                           
 20803 ;; *************** function i2_I2C_Wait *****************
 20804 ;; Defined at:
 20805 ;;		line 22 in file "I2C.c"
 20806 ;; Parameters:    Size  Location     Type
 20807 ;;		None
 20808 ;; Auto vars:     Size  Location     Type
 20809 ;;		None
 20810 ;; Return value:  Size  Location     Type
 20811 ;;                  1    wreg      void 
 20812 ;; Registers used:
 20813 ;;		wreg, status,2, status,0
 20814 ;; Tracked objects:
 20815 ;;		On entry : 0/0
 20816 ;;		On exit  : 0/0
 20817 ;;		Unchanged: 0/0
 20818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20819 ;;      Params:         0       0       0       0       0       0       0
 20820 ;;      Locals:         0       0       0       0       0       0       0
 20821 ;;      Temps:          1       0       0       0       0       0       0
 20822 ;;      Totals:         1       0       0       0       0       0       0
 20823 ;;Total ram usage:        1 bytes
 20824 ;; Hardware stack levels used:    1
 20825 ;; This function calls:
 20826 ;;		Nothing
 20827 ;; This function is called by:
 20828 ;;		i2_I2C_Start
 20829 ;;		i2_I2C_Restart
 20830 ;;		i2_I2C_Stop
 20831 ;;		i2_I2C_Write
 20832 ;;		i2_I2C_Read
 20833 ;; This function uses a non-reentrant model
 20834 ;;
 20835                           
 20836                           	psect	text86
 20837  006D5A                     __ptext86:
 20838                           	opt stack 0
 20839  006D5A                     i2_I2C_Wait:
 20840                           	opt stack 0
 20841  006D5A  FFFF               	dw	65535	; assembler added errata NOP
 20842                           
 20843                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 20844                           
 20845                           ;incstack = 0
 20846  006D5C  B4C7               	btfsc	4039,2,c	;volatile
 20847  006D5E  D7FD               	goto	i2_I2C_Wait
 20848  006D60  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 20849  006D64  0E1F               	movlw	31
 20850  006D66  1601               	andwf	??i2_I2C_Wait,f,c
 20851  006D68  B4D8               	btfsc	status,2,c
 20852  006D6A  0012               	return		;funcret
 20853  006D6C  FFFF               	dw	65535	; assembler added errata NOP
 20854  006D6E  D7F5               	goto	i2_I2C_Wait
 20855  006D70  FFFF               	dw	65535	; errata NOP
 20856  006D72                     __end_ofi2_I2C_Wait:
 20857                           	opt stack 0
 20858                           tosu	equ	0xFFF
 20859                           tosh	equ	0xFFE
 20860                           tosl	equ	0xFFD
 20861                           pclatu	equ	0xFFB
 20862                           pclath	equ	0xFFA
 20863                           tblptru	equ	0xFF8
 20864                           tblptrh	equ	0xFF7
 20865                           tblptrl	equ	0xFF6
 20866                           tablat	equ	0xFF5
 20867                           prodh	equ	0xFF4
 20868                           prodl	equ	0xFF3
 20869                           intcon	equ	0xFF2
 20870                           indf0	equ	0xFEF
 20871                           postinc0	equ	0xFEE
 20872                           fsr0h	equ	0xFEA
 20873                           fsr0l	equ	0xFE9
 20874                           wreg	equ	0xFE8
 20875                           postdec1	equ	0xFE5
 20876                           fsr1h	equ	0xFE2
 20877                           fsr1l	equ	0xFE1
 20878                           indf2	equ	0xFDF
 20879                           postinc2	equ	0xFDE
 20880                           postdec2	equ	0xFDD
 20881                           fsr2h	equ	0xFDA
 20882                           fsr2l	equ	0xFD9
 20883                           status	equ	0xFD8
 20884                           
 20885 ;; *************** function _readButtons *****************
 20886 ;; Defined at:
 20887 ;;		line 23 in file "teclado.h"
 20888 ;; Parameters:    Size  Location     Type
 20889 ;;		None
 20890 ;; Auto vars:     Size  Location     Type
 20891 ;;		None
 20892 ;; Return value:  Size  Location     Type
 20893 ;;                  1    wreg      void 
 20894 ;; Registers used:
 20895 ;;		wreg, status,2
 20896 ;; Tracked objects:
 20897 ;;		On entry : 0/0
 20898 ;;		On exit  : 0/0
 20899 ;;		Unchanged: 0/0
 20900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20901 ;;      Params:         0       0       0       0       0       0       0
 20902 ;;      Locals:         0       0       0       0       0       0       0
 20903 ;;      Temps:          0       0       0       0       0       0       0
 20904 ;;      Totals:         0       0       0       0       0       0       0
 20905 ;;Total ram usage:        0 bytes
 20906 ;; Hardware stack levels used:    1
 20907 ;; This function calls:
 20908 ;;		Nothing
 20909 ;; This function is called by:
 20910 ;;		_TIMER
 20911 ;; This function uses a non-reentrant model
 20912 ;;
 20913                           
 20914                           	psect	text87
 20915  0077EA                     __ptext87:
 20916                           	opt stack 0
 20917  0077EA                     _readButtons:
 20918                           	opt stack 0
 20919  0077EA  FFFF               	dw	65535	; assembler added errata NOP
 20920                           
 20921                           ;teclado.h: 24: if (!PORTBbits.RB2) {
 20922                           
 20923                           ;incstack = 0
 20924  0077EC  B481               	btfsc	3969,2,c	;volatile
 20925  0077EE  D002               	goto	i2l452
 20926                           
 20927                           ;teclado.h: 25: flag_b_esc = 1;
 20928  0077F0  0E01               	movlw	1
 20929  0077F2  6E65               	movwf	_flag_b_esc,c
 20930  0077F4                     i2l452:
 20931  0077F4  FFFF               	dw	65535	; assembler added errata NOP
 20932                           
 20933                           ;teclado.h: 26: }
 20934                           ;teclado.h: 27: if (PORTBbits.RB2 && flag_b_esc) {
 20935  0077F6  A481               	btfss	3969,2,c	;volatile
 20936  0077F8  D007               	goto	i2l453
 20937  0077FA  5065               	movf	_flag_b_esc,w,c
 20938  0077FC  B4D8               	btfsc	status,2,c
 20939  0077FE  D004               	goto	i2l453
 20940                           
 20941                           ;teclado.h: 28: _b_esc = 1;
 20942  007800  0E01               	movlw	1
 20943  007802  6E64               	movwf	__b_esc,c
 20944                           
 20945                           ;teclado.h: 29: flag_b_esc = 0;
 20946  007804  0E00               	movlw	0
 20947  007806  6E65               	movwf	_flag_b_esc,c
 20948  007808                     i2l453:
 20949  007808  FFFF               	dw	65535	; assembler added errata NOP
 20950                           
 20951                           ;teclado.h: 30: }
 20952                           ;teclado.h: 32: if (!PORTBbits.RB4) {
 20953  00780A  B881               	btfsc	3969,4,c	;volatile
 20954  00780C  D002               	goto	i2l454
 20955                           
 20956                           ;teclado.h: 33: flag_b_menos = 1;
 20957  00780E  0E01               	movlw	1
 20958  007810  6E63               	movwf	_flag_b_menos,c
 20959  007812                     i2l454:
 20960  007812  FFFF               	dw	65535	; assembler added errata NOP
 20961                           
 20962                           ;teclado.h: 34: }
 20963                           ;teclado.h: 35: if (PORTBbits.RB4 && flag_b_menos) {
 20964  007814  A881               	btfss	3969,4,c	;volatile
 20965  007816  D007               	goto	i2l455
 20966  007818  5063               	movf	_flag_b_menos,w,c
 20967  00781A  B4D8               	btfsc	status,2,c
 20968  00781C  D004               	goto	i2l455
 20969                           
 20970                           ;teclado.h: 36: _b_menos = 1;
 20971  00781E  0E01               	movlw	1
 20972  007820  6E62               	movwf	__b_menos,c
 20973                           
 20974                           ;teclado.h: 37: flag_b_menos = 0;
 20975  007822  0E00               	movlw	0
 20976  007824  6E63               	movwf	_flag_b_menos,c
 20977  007826                     i2l455:
 20978  007826  FFFF               	dw	65535	; assembler added errata NOP
 20979                           
 20980                           ;teclado.h: 38: }
 20981                           ;teclado.h: 40: if (!PORTBbits.RB5) {
 20982  007828  BA81               	btfsc	3969,5,c	;volatile
 20983  00782A  D002               	goto	i2l456
 20984                           
 20985                           ;teclado.h: 41: flag_b_mais = 1;
 20986  00782C  0E01               	movlw	1
 20987  00782E  6E61               	movwf	_flag_b_mais,c
 20988  007830                     i2l456:
 20989  007830  FFFF               	dw	65535	; assembler added errata NOP
 20990                           
 20991                           ;teclado.h: 42: }
 20992                           ;teclado.h: 43: if (PORTBbits.RB5 && flag_b_mais) {
 20993  007832  AA81               	btfss	3969,5,c	;volatile
 20994  007834  D007               	goto	i2l457
 20995  007836  5061               	movf	_flag_b_mais,w,c
 20996  007838  B4D8               	btfsc	status,2,c
 20997  00783A  D004               	goto	i2l457
 20998                           
 20999                           ;teclado.h: 44: _b_mais = 1;
 21000  00783C  0E01               	movlw	1
 21001  00783E  6E60               	movwf	__b_mais,c
 21002                           
 21003                           ;teclado.h: 45: flag_b_mais = 0;
 21004  007840  0E00               	movlw	0
 21005  007842  6E61               	movwf	_flag_b_mais,c
 21006  007844                     i2l457:
 21007  007844  FFFF               	dw	65535	; assembler added errata NOP
 21008                           
 21009                           ;teclado.h: 46: }
 21010                           ;teclado.h: 48: if (!PORTBbits.RB3) {
 21011  007846  B681               	btfsc	3969,3,c	;volatile
 21012  007848  D002               	goto	i2l458
 21013                           
 21014                           ;teclado.h: 49: flag_b_ok = 1;
 21015  00784A  0E01               	movlw	1
 21016  00784C  6E5F               	movwf	_flag_b_ok,c
 21017  00784E                     i2l458:
 21018  00784E  FFFF               	dw	65535	; assembler added errata NOP
 21019                           
 21020                           ;teclado.h: 50: }
 21021                           ;teclado.h: 51: if (PORTBbits.RB3 && flag_b_ok) {
 21022  007850  A681               	btfss	3969,3,c	;volatile
 21023  007852  D007               	goto	i2l459
 21024  007854  505F               	movf	_flag_b_ok,w,c
 21025  007856  B4D8               	btfsc	status,2,c
 21026  007858  D004               	goto	i2l459
 21027                           
 21028                           ;teclado.h: 52: _b_ok = 1;
 21029  00785A  0E01               	movlw	1
 21030  00785C  6E5E               	movwf	__b_ok,c
 21031                           
 21032                           ;teclado.h: 53: flag_b_ok = 0;
 21033  00785E  0E00               	movlw	0
 21034  007860  6E5F               	movwf	_flag_b_ok,c
 21035  007862                     i2l459:
 21036  007862  FFFF               	dw	65535	; assembler added errata NOP
 21037  007864  0012               	return		;funcret
 21038  007866  FFFF               	dw	65535	; errata NOP
 21039  007868                     __end_of_readButtons:
 21040                           	opt stack 0
 21041                           tosu	equ	0xFFF
 21042                           tosh	equ	0xFFE
 21043                           tosl	equ	0xFFD
 21044                           pclatu	equ	0xFFB
 21045                           pclath	equ	0xFFA
 21046                           tblptru	equ	0xFF8
 21047                           tblptrh	equ	0xFF7
 21048                           tblptrl	equ	0xFF6
 21049                           tablat	equ	0xFF5
 21050                           prodh	equ	0xFF4
 21051                           prodl	equ	0xFF3
 21052                           intcon	equ	0xFF2
 21053                           indf0	equ	0xFEF
 21054                           postinc0	equ	0xFEE
 21055                           fsr0h	equ	0xFEA
 21056                           fsr0l	equ	0xFE9
 21057                           wreg	equ	0xFE8
 21058                           postdec1	equ	0xFE5
 21059                           fsr1h	equ	0xFE2
 21060                           fsr1l	equ	0xFE1
 21061                           indf2	equ	0xFDF
 21062                           postinc2	equ	0xFDE
 21063                           postdec2	equ	0xFDD
 21064                           fsr2h	equ	0xFDA
 21065                           fsr2l	equ	0xFD9
 21066                           status	equ	0xFD8
 21067                           
 21068 ;; *************** function _lerTransdutor *****************
 21069 ;; Defined at:
 21070 ;;		line 7 in file "transdutor.h"
 21071 ;; Parameters:    Size  Location     Type
 21072 ;;		None
 21073 ;; Auto vars:     Size  Location     Type
 21074 ;;  tensao          3   45[COMRAM] float 
 21075 ;;  _pressao        3   42[COMRAM] float 
 21076 ;;  i               1   41[COMRAM] unsigned char 
 21077 ;; Return value:  Size  Location     Type
 21078 ;;                  1    wreg      void 
 21079 ;; Registers used:
 21080 ;;		wreg, status,2, status,0, cstack
 21081 ;; Tracked objects:
 21082 ;;		On entry : 0/0
 21083 ;;		On exit  : 0/0
 21084 ;;		Unchanged: 0/0
 21085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21086 ;;      Params:         0       0       0       0       0       0       0
 21087 ;;      Locals:         7       0       0       0       0       0       0
 21088 ;;      Temps:          0       0       0       0       0       0       0
 21089 ;;      Totals:         7       0       0       0       0       0       0
 21090 ;;Total ram usage:        7 bytes
 21091 ;; Hardware stack levels used:    1
 21092 ;; Hardware stack levels required when called:    2
 21093 ;; This function calls:
 21094 ;;		___ftadd
 21095 ;;		___ftdiv
 21096 ;;		___ftge
 21097 ;;		___ftmul
 21098 ;;		___fttol
 21099 ;;		___lwtoft
 21100 ;;		_readADC
 21101 ;; This function is called by:
 21102 ;;		_TIMER
 21103 ;; This function uses a non-reentrant model
 21104 ;;
 21105                           
 21106                           	psect	text88
 21107  001FCA                     __ptext88:
 21108                           	opt stack 0
 21109  001FCA                     _lerTransdutor:
 21110                           	opt stack 0
 21111  001FCA  FFFF               	dw	65535	; assembler added errata NOP
 21112                           
 21113                           ;transdutor.h: 8: char i = 0;
 21114                           
 21115                           ;incstack = 0
 21116  001FCC  0E00               	movlw	0
 21117  001FCE  6E2A               	movwf	lerTransdutor@i,c
 21118                           
 21119                           ;transdutor.h: 9: float tensao = 0, _pressao = 0;
 21120  001FD0  0E00               	movlw	0
 21121  001FD2  6E2E               	movwf	lerTransdutor@tensao,c
 21122  001FD4  0E00               	movlw	0
 21123  001FD6  6E2F               	movwf	lerTransdutor@tensao+1,c
 21124  001FD8  0E00               	movlw	0
 21125  001FDA  6E30               	movwf	lerTransdutor@tensao+2,c
 21126  001FDC  0E00               	movlw	0
 21127  001FDE  6E2B               	movwf	lerTransdutor@_pressao,c
 21128  001FE0  0E00               	movlw	0
 21129  001FE2  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21130  001FE4  0E00               	movlw	0
 21131  001FE6  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21132                           
 21133                           ;transdutor.h: 10: for (i = 0; i < 9; i++) {
 21134  001FE8  0E00               	movlw	0
 21135  001FEA  6E2A               	movwf	lerTransdutor@i,c
 21136  001FEC                     i2l6374:
 21137  001FEC  FFFF               	dw	65535	; assembler added errata NOP
 21138  001FEE  0E08               	movlw	8
 21139  001FF0  642A               	cpfsgt	lerTransdutor@i,c
 21140  001FF2  D001               	goto	i2l230
 21141  001FF4  D02D               	goto	i2u678_40
 21142  001FF6                     i2l230:
 21143  001FF6  FFFF               	dw	65535	; assembler added errata NOP
 21144                           
 21145                           ;transdutor.h: 11: tensao += readADC()*0.004887586;
 21146  001FF8  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21147  001FFC  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21148  002000  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21149  002004  0E28               	movlw	40
 21150  002006  6E0F               	movwf	___ftmul@f2,c
 21151  002008  0EA0               	movlw	160
 21152  00200A  6E10               	movwf	___ftmul@f2+1,c
 21153  00200C  0E3B               	movlw	59
 21154  00200E  6E11               	movwf	___ftmul@f2+2,c
 21155  002010  ECF8  F036         	call	_readADC	;wreg free
 21156  002014  C001  F009         	movff	?_readADC,___lwtoft@c
 21157  002018  C002  F00A         	movff	?_readADC+1,___lwtoft@c+1
 21158  00201C  ECE4  F036         	call	___lwtoft	;wreg free
 21159  002020  C009  F00C         	movff	?___lwtoft,___ftmul@f1
 21160  002024  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
 21161  002028  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
 21162  00202C  EC70  F01A         	call	___ftmul	;wreg free
 21163  002030  C00C  F01E         	movff	?___ftmul,___ftadd@f2
 21164  002034  C00D  F01F         	movff	?___ftmul+1,___ftadd@f2+1
 21165  002038  C00E  F020         	movff	?___ftmul+2,___ftadd@f2+2
 21166  00203C  ECE1  F013         	call	___ftadd	;wreg free
 21167  002040  C01B  F02E         	movff	?___ftadd,lerTransdutor@tensao
 21168  002044  C01C  F02F         	movff	?___ftadd+1,lerTransdutor@tensao+1
 21169  002048  C01D  F030         	movff	?___ftadd+2,lerTransdutor@tensao+2
 21170  00204C  2A2A               	incf	lerTransdutor@i,f,c
 21171  00204E  D7CE               	goto	i2l6374
 21172  002050                     i2u678_40:
 21173  002050  FFFF               	dw	65535	; assembler added errata NOP
 21174                           
 21175                           ;transdutor.h: 12: }
 21176                           ;transdutor.h: 13: tensao = tensao / 10;
 21177  002052  C02E  F01B         	movff	lerTransdutor@tensao,___ftdiv@f1
 21178  002056  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftdiv@f1+1
 21179  00205A  C030  F01D         	movff	lerTransdutor@tensao+2,___ftdiv@f1+2
 21180  00205E  0E00               	movlw	0
 21181  002060  6E1E               	movwf	___ftdiv@f2,c
 21182  002062  0E20               	movlw	32
 21183  002064  6E1F               	movwf	___ftdiv@f2+1,c
 21184  002066  0E41               	movlw	65
 21185  002068  6E20               	movwf	___ftdiv@f2+2,c
 21186  00206A  ECD6  F01B         	call	___ftdiv	;wreg free
 21187  00206E  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21188  002072  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21189  002076  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21190                           
 21191                           ;transdutor.h: 14: _tensao += (float) tensao;
 21192  00207A  C04C  F01B         	movff	__tensao,___ftadd@f1
 21193  00207E  C04D  F01C         	movff	__tensao+1,___ftadd@f1+1
 21194  002082  C04E  F01D         	movff	__tensao+2,___ftadd@f1+2
 21195  002086  C02E  F01E         	movff	lerTransdutor@tensao,___ftadd@f2
 21196  00208A  C02F  F01F         	movff	lerTransdutor@tensao+1,___ftadd@f2+1
 21197  00208E  C030  F020         	movff	lerTransdutor@tensao+2,___ftadd@f2+2
 21198  002092  ECE1  F013         	call	___ftadd	;wreg free
 21199  002096  C01B  F04C         	movff	?___ftadd,__tensao
 21200  00209A  C01C  F04D         	movff	?___ftadd+1,__tensao+1
 21201  00209E  C01D  F04E         	movff	?___ftadd+2,__tensao+2
 21202                           
 21203                           ;transdutor.h: 15: qtd_leitura++;
 21204  0020A2  2A6E               	incf	_qtd_leitura,f,c
 21205                           
 21206                           ;transdutor.h: 17: if (tensao < 0.4) {
 21207  0020A4  C02E  F001         	movff	lerTransdutor@tensao,___ftge@ff1
 21208  0020A8  C02F  F002         	movff	lerTransdutor@tensao+1,___ftge@ff1+1
 21209  0020AC  C030  F003         	movff	lerTransdutor@tensao+2,___ftge@ff1+2
 21210  0020B0  0ECD               	movlw	205
 21211  0020B2  6E04               	movwf	___ftge@ff2,c
 21212  0020B4  0ECC               	movlw	204
 21213  0020B6  6E05               	movwf	___ftge@ff2+1,c
 21214  0020B8  0E3E               	movlw	62
 21215  0020BA  6E06               	movwf	___ftge@ff2+2,c
 21216  0020BC  ECAD  F01E         	call	___ftge	;wreg free
 21217  0020C0  B0D8               	btfsc	status,0,c
 21218  0020C2  D005               	goto	i2l232
 21219                           
 21220                           ;transdutor.h: 18: pressao = -10;
 21221  0020C4  0EFF               	movlw	255
 21222  0020C6  0100               	movlb	0	; () banked
 21223  0020C8  6FF9               	movwf	(_pressao+1)& (0+255),b
 21224  0020CA  0EF6               	movlw	246
 21225  0020CC  D015               	goto	L43
 21226  0020CE                     i2l232:
 21227  0020CE  FFFF               	dw	65535	; assembler added errata NOP
 21228                           
 21229                           ; BSR set to: 0
 21230  0020D0  0E00               	movlw	0
 21231  0020D2  6E01               	movwf	___ftge@ff1,c
 21232  0020D4  0E90               	movlw	144
 21233  0020D6  6E02               	movwf	___ftge@ff1+1,c
 21234  0020D8  0E40               	movlw	64
 21235  0020DA  6E03               	movwf	___ftge@ff1+2,c
 21236  0020DC  C02E  F004         	movff	lerTransdutor@tensao,___ftge@ff2
 21237  0020E0  C02F  F005         	movff	lerTransdutor@tensao+1,___ftge@ff2+1
 21238  0020E4  C030  F006         	movff	lerTransdutor@tensao+2,___ftge@ff2+2
 21239  0020E8  ECAD  F01E         	call	___ftge	;wreg free
 21240  0020EC  B0D8               	btfsc	status,0,c
 21241  0020EE  D009               	goto	i2l234
 21242                           
 21243                           ;transdutor.h: 21: pressao = 99;
 21244  0020F0  0E00               	movlw	0
 21245  0020F2  0100               	movlb	0	; () banked
 21246  0020F4  6FF9               	movwf	(_pressao+1)& (0+255),b
 21247  0020F6  0E63               	movlw	99
 21248  0020F8                     L43:
 21249  0020F8  FFFF               	dw	65535	; assembler added errata NOP
 21250  0020FA  6FF8               	movwf	_pressao& (0+255),b
 21251                           
 21252                           ;transdutor.h: 22: flagErroTransdutor = 1;
 21253  0020FC  0E01               	movlw	1
 21254  0020FE  6E73               	movwf	_flagErroTransdutor,c
 21255                           
 21256                           ;transdutor.h: 23: } else if (qtd_leitura >= 6) {
 21257  002100  D07B               	goto	i2l236
 21258  002102                     i2l234:
 21259  002102  FFFF               	dw	65535	; assembler added errata NOP
 21260                           
 21261                           ; BSR set to: 0
 21262  002104  0E05               	movlw	5
 21263  002106  646E               	cpfsgt	_qtd_leitura,c
 21264  002108  D077               	goto	i2l236
 21265                           
 21266                           ;transdutor.h: 24: flagErroTransdutor = 0;
 21267  00210A  0E00               	movlw	0
 21268  00210C  6E73               	movwf	_flagErroTransdutor,c
 21269                           
 21270                           ;transdutor.h: 25: qtd_leitura = 0;
 21271  00210E  0E00               	movlw	0
 21272  002110  6E6E               	movwf	_qtd_leitura,c
 21273                           
 21274                           ;transdutor.h: 26: tensao = (float) (_tensao / 6);
 21275  002112  C04C  F01B         	movff	__tensao,___ftdiv@f1
 21276  002116  C04D  F01C         	movff	__tensao+1,___ftdiv@f1+1
 21277  00211A  C04E  F01D         	movff	__tensao+2,___ftdiv@f1+2
 21278  00211E  0E00               	movlw	0
 21279  002120  6E1E               	movwf	___ftdiv@f2,c
 21280  002122  0EC0               	movlw	192
 21281  002124  6E1F               	movwf	___ftdiv@f2+1,c
 21282  002126  0E40               	movlw	64
 21283  002128  6E20               	movwf	___ftdiv@f2+2,c
 21284  00212A  ECD6  F01B         	call	___ftdiv	;wreg free
 21285  00212E  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21286  002132  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21287  002136  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21288                           
 21289                           ;transdutor.h: 27: _tensao = 0;
 21290  00213A  0E00               	movlw	0
 21291  00213C  6E4C               	movwf	__tensao,c
 21292  00213E  0E00               	movlw	0
 21293  002140  6E4D               	movwf	__tensao+1,c
 21294  002142  0E00               	movlw	0
 21295  002144  6E4E               	movwf	__tensao+2,c
 21296                           
 21297                           ;transdutor.h: 28: _pressao = tensao - 0.5;
 21298  002146  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21299  00214A  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21300  00214E  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21301  002152  0E00               	movlw	0
 21302  002154  6E1E               	movwf	___ftadd@f2,c
 21303  002156  0E00               	movlw	0
 21304  002158  6E1F               	movwf	___ftadd@f2+1,c
 21305  00215A  0EBF               	movlw	191
 21306  00215C  6E20               	movwf	___ftadd@f2+2,c
 21307  00215E  ECE1  F013         	call	___ftadd	;wreg free
 21308  002162  C01B  F02B         	movff	?___ftadd,lerTransdutor@_pressao
 21309  002166  C01C  F02C         	movff	?___ftadd+1,lerTransdutor@_pressao+1
 21310  00216A  C01D  F02D         	movff	?___ftadd+2,lerTransdutor@_pressao+2
 21311                           
 21312                           ;transdutor.h: 29: _pressao = _pressao * 10 / 4;
 21313  00216E  0E00               	movlw	0
 21314  002170  6E0F               	movwf	___ftmul@f2,c
 21315  002172  0E20               	movlw	32
 21316  002174  6E10               	movwf	___ftmul@f2+1,c
 21317  002176  0E41               	movlw	65
 21318  002178  6E11               	movwf	___ftmul@f2+2,c
 21319  00217A  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21320  00217E  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21321  002182  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21322  002186  EC70  F01A         	call	___ftmul	;wreg free
 21323  00218A  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
 21324  00218E  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
 21325  002192  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
 21326  002196  0E00               	movlw	0
 21327  002198  6E1E               	movwf	___ftdiv@f2,c
 21328  00219A  0E80               	movlw	128
 21329  00219C  6E1F               	movwf	___ftdiv@f2+1,c
 21330  00219E  0E40               	movlw	64
 21331  0021A0  6E20               	movwf	___ftdiv@f2+2,c
 21332  0021A2  ECD6  F01B         	call	___ftdiv	;wreg free
 21333  0021A6  C01B  F02B         	movff	?___ftdiv,lerTransdutor@_pressao
 21334  0021AA  C01C  F02C         	movff	?___ftdiv+1,lerTransdutor@_pressao+1
 21335  0021AE  C01D  F02D         	movff	?___ftdiv+2,lerTransdutor@_pressao+2
 21336                           
 21337                           ;transdutor.h: 30: if (_pressao < 0) {
 21338  0021B2  AE2D               	btfss	lerTransdutor@_pressao+2,7,c
 21339  0021B4  D006               	goto	i2l237
 21340                           
 21341                           ;transdutor.h: 31: _pressao = 0;
 21342  0021B6  0E00               	movlw	0
 21343  0021B8  6E2B               	movwf	lerTransdutor@_pressao,c
 21344  0021BA  0E00               	movlw	0
 21345  0021BC  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21346  0021BE  0E00               	movlw	0
 21347  0021C0  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21348  0021C2                     i2l237:
 21349  0021C2  FFFF               	dw	65535	; assembler added errata NOP
 21350                           
 21351                           ;transdutor.h: 32: }
 21352                           ;transdutor.h: 33: pressao = _pressao * 10;
 21353  0021C4  0E00               	movlw	0
 21354  0021C6  6E0F               	movwf	___ftmul@f2,c
 21355  0021C8  0E20               	movlw	32
 21356  0021CA  6E10               	movwf	___ftmul@f2+1,c
 21357  0021CC  0E41               	movlw	65
 21358  0021CE  6E11               	movwf	___ftmul@f2+2,c
 21359  0021D0  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21360  0021D4  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21361  0021D8  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21362  0021DC  EC70  F01A         	call	___ftmul	;wreg free
 21363  0021E0  C00C  F01B         	movff	?___ftmul,___fttol@f1
 21364  0021E4  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
 21365  0021E8  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
 21366  0021EC  EC62  F01B         	call	___fttol	;wreg free
 21367  0021F0  C01B  F0F8         	movff	?___fttol,_pressao
 21368  0021F4  C01C  F0F9         	movff	?___fttol+1,_pressao+1
 21369  0021F8                     i2l236:
 21370  0021F8  FFFF               	dw	65535	; assembler added errata NOP
 21371  0021FA  0012               	return		;funcret
 21372  0021FC  FFFF               	dw	65535	; errata NOP
 21373  0021FE                     __end_of_lerTransdutor:
 21374                           	opt stack 0
 21375                           tosu	equ	0xFFF
 21376                           tosh	equ	0xFFE
 21377                           tosl	equ	0xFFD
 21378                           pclatu	equ	0xFFB
 21379                           pclath	equ	0xFFA
 21380                           tblptru	equ	0xFF8
 21381                           tblptrh	equ	0xFF7
 21382                           tblptrl	equ	0xFF6
 21383                           tablat	equ	0xFF5
 21384                           prodh	equ	0xFF4
 21385                           prodl	equ	0xFF3
 21386                           intcon	equ	0xFF2
 21387                           indf0	equ	0xFEF
 21388                           postinc0	equ	0xFEE
 21389                           fsr0h	equ	0xFEA
 21390                           fsr0l	equ	0xFE9
 21391                           wreg	equ	0xFE8
 21392                           postdec1	equ	0xFE5
 21393                           fsr1h	equ	0xFE2
 21394                           fsr1l	equ	0xFE1
 21395                           indf2	equ	0xFDF
 21396                           postinc2	equ	0xFDE
 21397                           postdec2	equ	0xFDD
 21398                           fsr2h	equ	0xFDA
 21399                           fsr2l	equ	0xFD9
 21400                           status	equ	0xFD8
 21401                           
 21402 ;; *************** function _readADC *****************
 21403 ;; Defined at:
 21404 ;;		line 8 in file "adc.h"
 21405 ;; Parameters:    Size  Location     Type
 21406 ;;		None
 21407 ;; Auto vars:     Size  Location     Type
 21408 ;;		None
 21409 ;; Return value:  Size  Location     Type
 21410 ;;                  2    0[COMRAM] unsigned int 
 21411 ;; Registers used:
 21412 ;;		wreg, status,2, status,0
 21413 ;; Tracked objects:
 21414 ;;		On entry : 0/0
 21415 ;;		On exit  : 0/0
 21416 ;;		Unchanged: 0/0
 21417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21418 ;;      Params:         2       0       0       0       0       0       0
 21419 ;;      Locals:         0       0       0       0       0       0       0
 21420 ;;      Temps:          2       0       0       0       0       0       0
 21421 ;;      Totals:         4       0       0       0       0       0       0
 21422 ;;Total ram usage:        4 bytes
 21423 ;; Hardware stack levels used:    1
 21424 ;; This function calls:
 21425 ;;		Nothing
 21426 ;; This function is called by:
 21427 ;;		_lerTransdutor
 21428 ;; This function uses a non-reentrant model
 21429 ;;
 21430                           
 21431                           	psect	text89
 21432  006DF0                     __ptext89:
 21433                           	opt stack 0
 21434  006DF0                     _readADC:
 21435                           	opt stack 0
 21436  006DF0  FFFF               	dw	65535	; assembler added errata NOP
 21437                           
 21438                           ;adc.h: 9: ADCON0bits.GO = 1;
 21439                           
 21440                           ;incstack = 0
 21441  006DF2  84C2               	bsf	4034,2,c	;volatile
 21442                           
 21443                           ;adc.h: 10: _delay((unsigned long)((50)*(8000000/4000000.0)));
 21444  006DF4  0E19               	movlw	25
 21445  006DF6                     i2u910_47:
 21446  006DF6  FFFF               	dw	65535	; errata NOP
 21447  006DF8  2EE8               	decfsz	wreg,f,c
 21448  006DFA  D7FD               	bra	i2u910_47
 21449  006DFC  FFFF               	dw	65535	; assembler added errata NOP
 21450  006DFE  A4C2               	btfss	4034,2,c	;volatile
 21451  006E00  D7FD               	goto	i2l225
 21452                           
 21453                           ;adc.h: 12: }
 21454                           ;adc.h: 13: return((ADRESH<<8)+ ADRESL);
 21455  006E02  50C4               	movf	4036,w,c	;volatile
 21456  006E04  6E04               	movwf	(??_readADC+1)& (0+255),c
 21457  006E06  6A03               	clrf	??_readADC& (0+255),c
 21458  006E08  50C3               	movf	4035,w,c	;volatile
 21459  006E0A  2403               	addwf	??_readADC,w,c
 21460  006E0C  6E01               	movwf	?_readADC,c
 21461  006E0E  0E00               	movlw	0
 21462  006E10  2004               	addwfc	??_readADC+1,w,c
 21463  006E12  6E02               	movwf	?_readADC+1,c
 21464  006E14  0012               	return		;funcret
 21465  006E16  FFFF               	dw	65535	; errata NOP
 21466  006E18                     __end_of_readADC:
 21467                           	opt stack 0
 21468                           tosu	equ	0xFFF
 21469                           tosh	equ	0xFFE
 21470                           tosl	equ	0xFFD
 21471                           pclatu	equ	0xFFB
 21472                           pclath	equ	0xFFA
 21473                           tblptru	equ	0xFF8
 21474                           tblptrh	equ	0xFF7
 21475                           tblptrl	equ	0xFF6
 21476                           tablat	equ	0xFF5
 21477                           prodh	equ	0xFF4
 21478                           prodl	equ	0xFF3
 21479                           intcon	equ	0xFF2
 21480                           indf0	equ	0xFEF
 21481                           postinc0	equ	0xFEE
 21482                           fsr0h	equ	0xFEA
 21483                           fsr0l	equ	0xFE9
 21484                           wreg	equ	0xFE8
 21485                           postdec1	equ	0xFE5
 21486                           fsr1h	equ	0xFE2
 21487                           fsr1l	equ	0xFE1
 21488                           indf2	equ	0xFDF
 21489                           postinc2	equ	0xFDE
 21490                           postdec2	equ	0xFDD
 21491                           fsr2h	equ	0xFDA
 21492                           fsr2l	equ	0xFD9
 21493                           status	equ	0xFD8
 21494                           
 21495 ;; *************** function ___lwtoft *****************
 21496 ;; Defined at:
 21497 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 21498 ;; Parameters:    Size  Location     Type
 21499 ;;  c               2    8[COMRAM] unsigned int 
 21500 ;; Auto vars:     Size  Location     Type
 21501 ;;		None
 21502 ;; Return value:  Size  Location     Type
 21503 ;;                  3    8[COMRAM] float 
 21504 ;; Registers used:
 21505 ;;		wreg, status,2, status,0, cstack
 21506 ;; Tracked objects:
 21507 ;;		On entry : 0/0
 21508 ;;		On exit  : 0/0
 21509 ;;		Unchanged: 0/0
 21510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21511 ;;      Params:         3       0       0       0       0       0       0
 21512 ;;      Locals:         0       0       0       0       0       0       0
 21513 ;;      Temps:          0       0       0       0       0       0       0
 21514 ;;      Totals:         3       0       0       0       0       0       0
 21515 ;;Total ram usage:        3 bytes
 21516 ;; Hardware stack levels used:    1
 21517 ;; Hardware stack levels required when called:    1
 21518 ;; This function calls:
 21519 ;;		___ftpack
 21520 ;; This function is called by:
 21521 ;;		_lerTransdutor
 21522 ;; This function uses a non-reentrant model
 21523 ;;
 21524                           
 21525                           	psect	text90
 21526  006DC8                     __ptext90:
 21527                           	opt stack 0
 21528  006DC8                     ___lwtoft:
 21529                           	opt stack 0
 21530  006DC8  FFFF               	dw	65535	; assembler added errata NOP
 21531                           
 21532                           ;incstack = 0
 21533  006DCA  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 21534  006DCE  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 21535  006DD2  6A03               	clrf	___ftpack@arg+2,c
 21536  006DD4  0E8E               	movlw	142
 21537  006DD6  6E04               	movwf	___ftpack@exp,c
 21538  006DD8  0E00               	movlw	0
 21539  006DDA  6E05               	movwf	___ftpack@sign,c
 21540  006DDC  EC4B  F01E         	call	___ftpack	;wreg free
 21541  006DE0  C001  F009         	movff	?___ftpack,?___lwtoft
 21542  006DE4  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 21543  006DE8  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 21544  006DEC  0012               	return		;funcret
 21545  006DEE  FFFF               	dw	65535	; errata NOP
 21546  006DF0                     __end_of___lwtoft:
 21547                           	opt stack 0
 21548                           tosu	equ	0xFFF
 21549                           tosh	equ	0xFFE
 21550                           tosl	equ	0xFFD
 21551                           pclatu	equ	0xFFB
 21552                           pclath	equ	0xFFA
 21553                           tblptru	equ	0xFF8
 21554                           tblptrh	equ	0xFF7
 21555                           tblptrl	equ	0xFF6
 21556                           tablat	equ	0xFF5
 21557                           prodh	equ	0xFF4
 21558                           prodl	equ	0xFF3
 21559                           intcon	equ	0xFF2
 21560                           indf0	equ	0xFEF
 21561                           postinc0	equ	0xFEE
 21562                           fsr0h	equ	0xFEA
 21563                           fsr0l	equ	0xFE9
 21564                           wreg	equ	0xFE8
 21565                           postdec1	equ	0xFE5
 21566                           fsr1h	equ	0xFE2
 21567                           fsr1l	equ	0xFE1
 21568                           indf2	equ	0xFDF
 21569                           postinc2	equ	0xFDE
 21570                           postdec2	equ	0xFDD
 21571                           fsr2h	equ	0xFDA
 21572                           fsr2l	equ	0xFD9
 21573                           status	equ	0xFD8
 21574                           
 21575 ;; *************** function ___fttol *****************
 21576 ;; Defined at:
 21577 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 21578 ;; Parameters:    Size  Location     Type
 21579 ;;  f1              3   26[COMRAM] float 
 21580 ;; Auto vars:     Size  Location     Type
 21581 ;;  lval            4   36[COMRAM] unsigned long 
 21582 ;;  exp1            1   40[COMRAM] unsigned char 
 21583 ;;  sign1           1   35[COMRAM] unsigned char 
 21584 ;; Return value:  Size  Location     Type
 21585 ;;                  4   26[COMRAM] long 
 21586 ;; Registers used:
 21587 ;;		wreg, status,2, status,0
 21588 ;; Tracked objects:
 21589 ;;		On entry : 0/0
 21590 ;;		On exit  : 0/0
 21591 ;;		Unchanged: 0/0
 21592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21593 ;;      Params:         4       0       0       0       0       0       0
 21594 ;;      Locals:         6       0       0       0       0       0       0
 21595 ;;      Temps:          5       0       0       0       0       0       0
 21596 ;;      Totals:        15       0       0       0       0       0       0
 21597 ;;Total ram usage:       15 bytes
 21598 ;; Hardware stack levels used:    1
 21599 ;; This function calls:
 21600 ;;		Nothing
 21601 ;; This function is called by:
 21602 ;;		_lerTransdutor
 21603 ;; This function uses a non-reentrant model
 21604 ;;
 21605                           
 21606                           	psect	text91
 21607  0036C4                     __ptext91:
 21608                           	opt stack 0
 21609  0036C4                     ___fttol:
 21610                           	opt stack 0
 21611  0036C4  FFFF               	dw	65535	; assembler added errata NOP
 21612                           
 21613                           ;incstack = 0
 21614  0036C6  C01D  F01F         	movff	___fttol@f1+2,??___fttol
 21615  0036CA  6A20               	clrf	(??___fttol+1)& (0+255),c
 21616  0036CC  6A21               	clrf	(??___fttol+2)& (0+255),c
 21617  0036CE  341C               	rlcf	___fttol@f1+1,w,c
 21618  0036D0  361F               	rlcf	??___fttol& (0+255),f,c
 21619  0036D2  E301               	bnc	u666_41
 21620  0036D4  8020               	bsf	(??___fttol+1)& (0+255),0,c
 21621  0036D6                     u666_41:
 21622  0036D6  501F               	movf	??___fttol,w,c
 21623  0036D8  6E29               	movwf	___fttol@exp1,c
 21624  0036DA  5029               	movf	___fttol@exp1,w,c
 21625  0036DC  B4D8               	btfsc	status,2,c
 21626  0036DE  D039               	goto	i2u671_40
 21627  0036E0  0E17               	movlw	23
 21628  0036E2  6E1F               	movwf	??___fttol& (0+255),c
 21629  0036E4  C01B  F020         	movff	___fttol@f1,??___fttol+1
 21630  0036E8  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
 21631  0036EC  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
 21632  0036F0  281F               	incf	??___fttol,w,c
 21633  0036F2  6E23               	movwf	(??___fttol+4)& (0+255),c
 21634  0036F4  D005               	goto	i2u668_40
 21635  0036F6                     i2u668_45:
 21636  0036F6  FFFF               	dw	65535	; assembler added errata NOP
 21637  0036F8  90D8               	bcf	status,0,c
 21638  0036FA  3222               	rrcf	??___fttol+3,f,c
 21639  0036FC  3221               	rrcf	??___fttol+2,f,c
 21640  0036FE  3220               	rrcf	??___fttol+1,f,c
 21641  003700                     i2u668_40:
 21642  003700  FFFF               	dw	65535	; assembler added errata NOP
 21643  003702  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
 21644  003704  D7F8               	goto	i2u668_45
 21645  003706  5020               	movf	??___fttol+1,w,c
 21646  003708  6E24               	movwf	___fttol@sign1,c
 21647  00370A  8E1C               	bsf	___fttol@f1+1,7,c
 21648  00370C  0EFF               	movlw	255
 21649  00370E  161B               	andwf	___fttol@f1,f,c
 21650  003710  0EFF               	movlw	255
 21651  003712  161C               	andwf	___fttol@f1+1,f,c
 21652  003714  0E00               	movlw	0
 21653  003716  161D               	andwf	___fttol@f1+2,f,c
 21654  003718  501B               	movf	___fttol@f1,w,c
 21655  00371A  6E25               	movwf	___fttol@lval,c
 21656  00371C  501C               	movf	___fttol@f1+1,w,c
 21657  00371E  6E26               	movwf	___fttol@lval+1,c
 21658  003720  501D               	movf	___fttol@f1+2,w,c
 21659  003722  6E27               	movwf	___fttol@lval+2,c
 21660  003724  6A28               	clrf	___fttol@lval+3,c
 21661  003726  0E8E               	movlw	142
 21662  003728  5E29               	subwf	___fttol@exp1,f,c
 21663  00372A  AE29               	btfss	___fttol@exp1,7,c
 21664  00372C  D00E               	goto	i2l1438
 21665  00372E  5029               	movf	___fttol@exp1,w,c
 21666  003730  0A80               	xorlw	128
 21667  003732  0F8F               	addlw	143
 21668  003734  A0D8               	btfss	status,0,c
 21669  003736  D00D               	goto	i2u671_40
 21670  003738  FFFF               	dw	65535	; assembler added errata NOP
 21671  00373A  90D8               	bcf	status,0,c
 21672  00373C  3228               	rrcf	___fttol@lval+3,f,c
 21673  00373E  3227               	rrcf	___fttol@lval+2,f,c
 21674  003740  3226               	rrcf	___fttol@lval+1,f,c
 21675  003742  3225               	rrcf	___fttol@lval,f,c
 21676  003744  3E29               	incfsz	___fttol@exp1,f,c
 21677  003746  D7F8               	goto	i2l1439
 21678  003748  D019               	goto	i2u672_40
 21679  00374A                     i2l1438:
 21680  00374A  FFFF               	dw	65535	; assembler added errata NOP
 21681  00374C  0E17               	movlw	23
 21682  00374E  6429               	cpfsgt	___fttol@exp1,c
 21683  003750  D011               	goto	i2l1444
 21684  003752                     i2u671_40:
 21685  003752  FFFF               	dw	65535	; assembler added errata NOP
 21686  003754  0E00               	movlw	0
 21687  003756  6E1B               	movwf	?___fttol,c
 21688  003758  0E00               	movlw	0
 21689  00375A  6E1C               	movwf	?___fttol+1,c
 21690  00375C  0E00               	movlw	0
 21691  00375E  6E1D               	movwf	?___fttol+2,c
 21692  003760  0E00               	movlw	0
 21693  003762  6E1E               	movwf	?___fttol+3,c
 21694  003764  D020               	goto	i2l6262
 21695  003766  FFFF               	dw	65535	; assembler added errata NOP
 21696  003768  90D8               	bcf	status,0,c
 21697  00376A  3625               	rlcf	___fttol@lval,f,c
 21698  00376C  3626               	rlcf	___fttol@lval+1,f,c
 21699  00376E  3627               	rlcf	___fttol@lval+2,f,c
 21700  003770  3628               	rlcf	___fttol@lval+3,f,c
 21701  003772  0629               	decf	___fttol@exp1,f,c
 21702  003774                     i2l1444:
 21703  003774  FFFF               	dw	65535	; assembler added errata NOP
 21704  003776  5029               	movf	___fttol@exp1,w,c
 21705  003778  A4D8               	btfss	status,2,c
 21706  00377A  D7F5               	goto	i2l1445
 21707  00377C                     i2u672_40:
 21708  00377C  FFFF               	dw	65535	; assembler added errata NOP
 21709  00377E  5024               	movf	___fttol@sign1,w,c
 21710  003780  B4D8               	btfsc	status,2,c
 21711  003782  D008               	goto	i2l1447
 21712  003784  1E28               	comf	___fttol@lval+3,f,c
 21713  003786  1E27               	comf	___fttol@lval+2,f,c
 21714  003788  1E26               	comf	___fttol@lval+1,f,c
 21715  00378A  6C25               	negf	___fttol@lval,c
 21716  00378C  0E00               	movlw	0
 21717  00378E  2226               	addwfc	___fttol@lval+1,f,c
 21718  003790  2227               	addwfc	___fttol@lval+2,f,c
 21719  003792  2228               	addwfc	___fttol@lval+3,f,c
 21720  003794                     i2l1447:
 21721  003794  FFFF               	dw	65535	; assembler added errata NOP
 21722  003796  C025  F01B         	movff	___fttol@lval,?___fttol
 21723  00379A  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
 21724  00379E  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
 21725  0037A2  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
 21726  0037A6                     i2l6262:
 21727  0037A6  FFFF               	dw	65535	; assembler added errata NOP
 21728  0037A8  0012               	return		;funcret
 21729  0037AA  FFFF               	dw	65535	; errata NOP
 21730  0037AC                     __end_of___fttol:
 21731                           	opt stack 0
 21732                           tosu	equ	0xFFF
 21733                           tosh	equ	0xFFE
 21734                           tosl	equ	0xFFD
 21735                           pclatu	equ	0xFFB
 21736                           pclath	equ	0xFFA
 21737                           tblptru	equ	0xFF8
 21738                           tblptrh	equ	0xFF7
 21739                           tblptrl	equ	0xFF6
 21740                           tablat	equ	0xFF5
 21741                           prodh	equ	0xFF4
 21742                           prodl	equ	0xFF3
 21743                           intcon	equ	0xFF2
 21744                           indf0	equ	0xFEF
 21745                           postinc0	equ	0xFEE
 21746                           fsr0h	equ	0xFEA
 21747                           fsr0l	equ	0xFE9
 21748                           wreg	equ	0xFE8
 21749                           postdec1	equ	0xFE5
 21750                           fsr1h	equ	0xFE2
 21751                           fsr1l	equ	0xFE1
 21752                           indf2	equ	0xFDF
 21753                           postinc2	equ	0xFDE
 21754                           postdec2	equ	0xFDD
 21755                           fsr2h	equ	0xFDA
 21756                           fsr2l	equ	0xFD9
 21757                           status	equ	0xFD8
 21758                           
 21759 ;; *************** function ___ftmul *****************
 21760 ;; Defined at:
 21761 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 21762 ;; Parameters:    Size  Location     Type
 21763 ;;  f1              3   11[COMRAM] float 
 21764 ;;  f2              3   14[COMRAM] float 
 21765 ;; Auto vars:     Size  Location     Type
 21766 ;;  f3_as_produc    3   21[COMRAM] unsigned um
 21767 ;;  sign            1   25[COMRAM] unsigned char 
 21768 ;;  cntr            1   24[COMRAM] unsigned char 
 21769 ;;  exp             1   20[COMRAM] unsigned char 
 21770 ;; Return value:  Size  Location     Type
 21771 ;;                  3   11[COMRAM] float 
 21772 ;; Registers used:
 21773 ;;		wreg, status,2, status,0, cstack
 21774 ;; Tracked objects:
 21775 ;;		On entry : 0/0
 21776 ;;		On exit  : 0/0
 21777 ;;		Unchanged: 0/0
 21778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21779 ;;      Params:         6       0       0       0       0       0       0
 21780 ;;      Locals:         6       0       0       0       0       0       0
 21781 ;;      Temps:          3       0       0       0       0       0       0
 21782 ;;      Totals:        15       0       0       0       0       0       0
 21783 ;;Total ram usage:       15 bytes
 21784 ;; Hardware stack levels used:    1
 21785 ;; Hardware stack levels required when called:    1
 21786 ;; This function calls:
 21787 ;;		___ftpack
 21788 ;; This function is called by:
 21789 ;;		_lerTransdutor
 21790 ;;		_map
 21791 ;; This function uses a non-reentrant model
 21792 ;;
 21793                           
 21794                           	psect	text92
 21795  0034E0                     __ptext92:
 21796                           	opt stack 0
 21797  0034E0                     ___ftmul:
 21798                           	opt stack 0
 21799  0034E0  FFFF               	dw	65535	; assembler added errata NOP
 21800                           
 21801                           ;incstack = 0
 21802  0034E2  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
 21803  0034E6  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21804  0034E8  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21805  0034EA  340D               	rlcf	___ftmul@f1+1,w,c
 21806  0034EC  3612               	rlcf	??___ftmul& (0+255),f,c
 21807  0034EE  E301               	bnc	u657_41
 21808  0034F0  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21809  0034F2                     u657_41:
 21810  0034F2  5012               	movf	??___ftmul,w,c
 21811  0034F4  6E15               	movwf	___ftmul@exp,c
 21812  0034F6  5015               	movf	___ftmul@exp,w,c
 21813  0034F8  B4D8               	btfsc	status,2,c
 21814  0034FA  D00D               	goto	i2u660_40
 21815  0034FC  C011  F012         	movff	___ftmul@f2+2,??___ftmul
 21816  003500  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21817  003502  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21818  003504  3410               	rlcf	___ftmul@f2+1,w,c
 21819  003506  3612               	rlcf	??___ftmul& (0+255),f,c
 21820  003508  E301               	bnc	u659_41
 21821  00350A  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21822  00350C                     u659_41:
 21823  00350C  5012               	movf	??___ftmul,w,c
 21824  00350E  6E1A               	movwf	___ftmul@sign,c
 21825  003510  501A               	movf	___ftmul@sign,w,c
 21826  003512  A4D8               	btfss	status,2,c
 21827  003514  D008               	goto	i2l1417
 21828  003516                     i2u660_40:
 21829  003516  FFFF               	dw	65535	; assembler added errata NOP
 21830  003518  0E00               	movlw	0
 21831  00351A  6E0C               	movwf	?___ftmul,c
 21832  00351C  0E00               	movlw	0
 21833  00351E  6E0D               	movwf	?___ftmul+1,c
 21834  003520  0E00               	movlw	0
 21835  003522  6E0E               	movwf	?___ftmul+2,c
 21836  003524  D056               	goto	i2l6198
 21837  003526                     i2l1417:
 21838  003526  FFFF               	dw	65535	; assembler added errata NOP
 21839  003528  501A               	movf	___ftmul@sign,w,c
 21840  00352A  0F7B               	addlw	123
 21841  00352C  2615               	addwf	___ftmul@exp,f,c
 21842  00352E  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
 21843  003532  5011               	movf	___ftmul@f2+2,w,c
 21844  003534  1A1A               	xorwf	___ftmul@sign,f,c
 21845  003536  0E80               	movlw	128
 21846  003538  161A               	andwf	___ftmul@sign,f,c
 21847  00353A  8E0D               	bsf	___ftmul@f1+1,7,c
 21848  00353C  8E10               	bsf	___ftmul@f2+1,7,c
 21849  00353E  0EFF               	movlw	255
 21850  003540  160F               	andwf	___ftmul@f2,f,c
 21851  003542  0EFF               	movlw	255
 21852  003544  1610               	andwf	___ftmul@f2+1,f,c
 21853  003546  0E00               	movlw	0
 21854  003548  1611               	andwf	___ftmul@f2+2,f,c
 21855  00354A  0E00               	movlw	0
 21856  00354C  6E16               	movwf	___ftmul@f3_as_product,c
 21857  00354E  0E00               	movlw	0
 21858  003550  6E17               	movwf	___ftmul@f3_as_product+1,c
 21859  003552  0E00               	movlw	0
 21860  003554  6E18               	movwf	___ftmul@f3_as_product+2,c
 21861  003556  0E07               	movlw	7
 21862  003558  6E19               	movwf	___ftmul@cntr,c
 21863  00355A  FFFF               	dw	65535	; assembler added errata NOP
 21864  00355C  A00C               	btfss	___ftmul@f1,0,c
 21865  00355E  D006               	goto	i2l1419
 21866  003560  500F               	movf	___ftmul@f2,w,c
 21867  003562  2616               	addwf	___ftmul@f3_as_product,f,c
 21868  003564  5010               	movf	___ftmul@f2+1,w,c
 21869  003566  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 21870  003568  5011               	movf	___ftmul@f2+2,w,c
 21871  00356A  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 21872  00356C                     i2l1419:
 21873  00356C  FFFF               	dw	65535	; assembler added errata NOP
 21874  00356E  90D8               	bcf	status,0,c
 21875  003570  320E               	rrcf	___ftmul@f1+2,f,c
 21876  003572  320D               	rrcf	___ftmul@f1+1,f,c
 21877  003574  320C               	rrcf	___ftmul@f1,f,c
 21878  003576  90D8               	bcf	status,0,c
 21879  003578  360F               	rlcf	___ftmul@f2,f,c
 21880  00357A  3610               	rlcf	___ftmul@f2+1,f,c
 21881  00357C  3611               	rlcf	___ftmul@f2+2,f,c
 21882  00357E  2E19               	decfsz	___ftmul@cntr,f,c
 21883  003580  D7EC               	goto	i2l1418
 21884  003582  0E09               	movlw	9
 21885  003584  6E19               	movwf	___ftmul@cntr,c
 21886  003586  FFFF               	dw	65535	; assembler added errata NOP
 21887  003588  A00C               	btfss	___ftmul@f1,0,c
 21888  00358A  D006               	goto	i2l1422
 21889  00358C  500F               	movf	___ftmul@f2,w,c
 21890  00358E  2616               	addwf	___ftmul@f3_as_product,f,c
 21891  003590  5010               	movf	___ftmul@f2+1,w,c
 21892  003592  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 21893  003594  5011               	movf	___ftmul@f2+2,w,c
 21894  003596  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 21895  003598                     i2l1422:
 21896  003598  FFFF               	dw	65535	; assembler added errata NOP
 21897  00359A  90D8               	bcf	status,0,c
 21898  00359C  320E               	rrcf	___ftmul@f1+2,f,c
 21899  00359E  320D               	rrcf	___ftmul@f1+1,f,c
 21900  0035A0  320C               	rrcf	___ftmul@f1,f,c
 21901  0035A2  90D8               	bcf	status,0,c
 21902  0035A4  3218               	rrcf	___ftmul@f3_as_product+2,f,c
 21903  0035A6  3217               	rrcf	___ftmul@f3_as_product+1,f,c
 21904  0035A8  3216               	rrcf	___ftmul@f3_as_product,f,c
 21905  0035AA  2E19               	decfsz	___ftmul@cntr,f,c
 21906  0035AC  D7EC               	goto	i2l1421
 21907  0035AE  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 21908  0035B2  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 21909  0035B6  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 21910  0035BA  C015  F004         	movff	___ftmul@exp,___ftpack@exp
 21911  0035BE  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
 21912  0035C2  EC4B  F01E         	call	___ftpack	;wreg free
 21913  0035C6  C001  F00C         	movff	?___ftpack,?___ftmul
 21914  0035CA  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
 21915  0035CE  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
 21916  0035D2                     i2l6198:
 21917  0035D2  FFFF               	dw	65535	; assembler added errata NOP
 21918  0035D4  0012               	return		;funcret
 21919  0035D6  FFFF               	dw	65535	; errata NOP
 21920  0035D8                     __end_of___ftmul:
 21921                           	opt stack 0
 21922                           tosu	equ	0xFFF
 21923                           tosh	equ	0xFFE
 21924                           tosl	equ	0xFFD
 21925                           pclatu	equ	0xFFB
 21926                           pclath	equ	0xFFA
 21927                           tblptru	equ	0xFF8
 21928                           tblptrh	equ	0xFF7
 21929                           tblptrl	equ	0xFF6
 21930                           tablat	equ	0xFF5
 21931                           prodh	equ	0xFF4
 21932                           prodl	equ	0xFF3
 21933                           intcon	equ	0xFF2
 21934                           indf0	equ	0xFEF
 21935                           postinc0	equ	0xFEE
 21936                           fsr0h	equ	0xFEA
 21937                           fsr0l	equ	0xFE9
 21938                           wreg	equ	0xFE8
 21939                           postdec1	equ	0xFE5
 21940                           fsr1h	equ	0xFE2
 21941                           fsr1l	equ	0xFE1
 21942                           indf2	equ	0xFDF
 21943                           postinc2	equ	0xFDE
 21944                           postdec2	equ	0xFDD
 21945                           fsr2h	equ	0xFDA
 21946                           fsr2l	equ	0xFD9
 21947                           status	equ	0xFD8
 21948                           
 21949 ;; *************** function ___ftge *****************
 21950 ;; Defined at:
 21951 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 21952 ;; Parameters:    Size  Location     Type
 21953 ;;  ff1             3    0[COMRAM] float 
 21954 ;;  ff2             3    3[COMRAM] float 
 21955 ;; Auto vars:     Size  Location     Type
 21956 ;;		None
 21957 ;; Return value:  Size  Location     Type
 21958 ;;		None               void
 21959 ;; Registers used:
 21960 ;;		wreg, status,2, status,0
 21961 ;; Tracked objects:
 21962 ;;		On entry : 0/0
 21963 ;;		On exit  : 0/0
 21964 ;;		Unchanged: 0/0
 21965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21966 ;;      Params:         6       0       0       0       0       0       0
 21967 ;;      Locals:         0       0       0       0       0       0       0
 21968 ;;      Temps:          3       0       0       0       0       0       0
 21969 ;;      Totals:         9       0       0       0       0       0       0
 21970 ;;Total ram usage:        9 bytes
 21971 ;; Hardware stack levels used:    1
 21972 ;; This function calls:
 21973 ;;		Nothing
 21974 ;; This function is called by:
 21975 ;;		_lerTransdutor
 21976 ;; This function uses a non-reentrant model
 21977 ;;
 21978                           
 21979                           	psect	text93
 21980  003D5A                     __ptext93:
 21981                           	opt stack 0
 21982  003D5A                     ___ftge:
 21983                           	opt stack 0
 21984  003D5A  FFFF               	dw	65535	; assembler added errata NOP
 21985                           
 21986                           ;incstack = 0
 21987  003D5C  AE03               	btfss	___ftge@ff1+2,7,c
 21988  003D5E  D016               	goto	i2l1408
 21989  003D60  C001  F007         	movff	___ftge@ff1,??___ftge
 21990  003D64  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 21991  003D68  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 21992  003D6C  1E07               	comf	??___ftge,f,c
 21993  003D6E  1E08               	comf	??___ftge+1,f,c
 21994  003D70  1E09               	comf	??___ftge+2,f,c
 21995  003D72  2A07               	incf	??___ftge,f,c
 21996  003D74  0E00               	movlw	0
 21997  003D76  2208               	addwfc	??___ftge+1,f,c
 21998  003D78  2209               	addwfc	??___ftge+2,f,c
 21999  003D7A  0E00               	movlw	0
 22000  003D7C  2407               	addwf	??___ftge,w,c
 22001  003D7E  6E01               	movwf	___ftge@ff1,c
 22002  003D80  0E00               	movlw	0
 22003  003D82  2008               	addwfc	??___ftge+1,w,c
 22004  003D84  6E02               	movwf	___ftge@ff1+1,c
 22005  003D86  0E80               	movlw	128
 22006  003D88  2009               	addwfc	??___ftge+2,w,c
 22007  003D8A  6E03               	movwf	___ftge@ff1+2,c
 22008  003D8C                     i2l1408:
 22009  003D8C  FFFF               	dw	65535	; assembler added errata NOP
 22010  003D8E  AE06               	btfss	___ftge@ff2+2,7,c
 22011  003D90  D016               	goto	i2l1409
 22012  003D92  C004  F007         	movff	___ftge@ff2,??___ftge
 22013  003D96  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 22014  003D9A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 22015  003D9E  1E07               	comf	??___ftge,f,c
 22016  003DA0  1E08               	comf	??___ftge+1,f,c
 22017  003DA2  1E09               	comf	??___ftge+2,f,c
 22018  003DA4  2A07               	incf	??___ftge,f,c
 22019  003DA6  0E00               	movlw	0
 22020  003DA8  2208               	addwfc	??___ftge+1,f,c
 22021  003DAA  2209               	addwfc	??___ftge+2,f,c
 22022  003DAC  0E00               	movlw	0
 22023  003DAE  2407               	addwf	??___ftge,w,c
 22024  003DB0  6E04               	movwf	___ftge@ff2,c
 22025  003DB2  0E00               	movlw	0
 22026  003DB4  2008               	addwfc	??___ftge+1,w,c
 22027  003DB6  6E05               	movwf	___ftge@ff2+1,c
 22028  003DB8  0E80               	movlw	128
 22029  003DBA  2009               	addwfc	??___ftge+2,w,c
 22030  003DBC  6E06               	movwf	___ftge@ff2+2,c
 22031  003DBE                     i2l1409:
 22032  003DBE  FFFF               	dw	65535	; assembler added errata NOP
 22033  003DC0  0E00               	movlw	0
 22034  003DC2  1A01               	xorwf	___ftge@ff1,f,c
 22035  003DC4  0E00               	movlw	0
 22036  003DC6  1A02               	xorwf	___ftge@ff1+1,f,c
 22037  003DC8  0E80               	movlw	128
 22038  003DCA  1A03               	xorwf	___ftge@ff1+2,f,c
 22039  003DCC  0E00               	movlw	0
 22040  003DCE  1A04               	xorwf	___ftge@ff2,f,c
 22041  003DD0  0E00               	movlw	0
 22042  003DD2  1A05               	xorwf	___ftge@ff2+1,f,c
 22043  003DD4  0E80               	movlw	128
 22044  003DD6  1A06               	xorwf	___ftge@ff2+2,f,c
 22045  003DD8  5004               	movf	___ftge@ff2,w,c
 22046  003DDA  5C01               	subwf	___ftge@ff1,w,c
 22047  003DDC  5005               	movf	___ftge@ff2+1,w,c
 22048  003DDE  5802               	subwfb	___ftge@ff1+1,w,c
 22049  003DE0  5006               	movf	___ftge@ff2+2,w,c
 22050  003DE2  5803               	subwfb	___ftge@ff1+2,w,c
 22051  003DE4  B0D8               	btfsc	status,0,c
 22052  003DE6  D002               	goto	i2l4832
 22053  003DE8  90D8               	bcf	status,0,c
 22054  003DEA  D002               	goto	i2l4834
 22055  003DEC                     i2l4832:
 22056  003DEC  FFFF               	dw	65535	; assembler added errata NOP
 22057  003DEE  80D8               	bsf	status,0,c
 22058  003DF0                     i2l4834:
 22059  003DF0  FFFF               	dw	65535	; assembler added errata NOP
 22060  003DF2  0012               	return		;funcret
 22061  003DF4  FFFF               	dw	65535	; errata NOP
 22062  003DF6                     __end_of___ftge:
 22063                           	opt stack 0
 22064                           tosu	equ	0xFFF
 22065                           tosh	equ	0xFFE
 22066                           tosl	equ	0xFFD
 22067                           pclatu	equ	0xFFB
 22068                           pclath	equ	0xFFA
 22069                           tblptru	equ	0xFF8
 22070                           tblptrh	equ	0xFF7
 22071                           tblptrl	equ	0xFF6
 22072                           tablat	equ	0xFF5
 22073                           prodh	equ	0xFF4
 22074                           prodl	equ	0xFF3
 22075                           intcon	equ	0xFF2
 22076                           indf0	equ	0xFEF
 22077                           postinc0	equ	0xFEE
 22078                           fsr0h	equ	0xFEA
 22079                           fsr0l	equ	0xFE9
 22080                           wreg	equ	0xFE8
 22081                           postdec1	equ	0xFE5
 22082                           fsr1h	equ	0xFE2
 22083                           fsr1l	equ	0xFE1
 22084                           indf2	equ	0xFDF
 22085                           postinc2	equ	0xFDE
 22086                           postdec2	equ	0xFDD
 22087                           fsr2h	equ	0xFDA
 22088                           fsr2l	equ	0xFD9
 22089                           status	equ	0xFD8
 22090                           
 22091 ;; *************** function ___ftdiv *****************
 22092 ;; Defined at:
 22093 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 22094 ;; Parameters:    Size  Location     Type
 22095 ;;  f1              3   26[COMRAM] float 
 22096 ;;  f2              3   29[COMRAM] float 
 22097 ;; Auto vars:     Size  Location     Type
 22098 ;;  f3              3   36[COMRAM] float 
 22099 ;;  sign            1   40[COMRAM] unsigned char 
 22100 ;;  exp             1   39[COMRAM] unsigned char 
 22101 ;;  cntr            1   35[COMRAM] unsigned char 
 22102 ;; Return value:  Size  Location     Type
 22103 ;;                  3   26[COMRAM] float 
 22104 ;; Registers used:
 22105 ;;		wreg, status,2, status,0, cstack
 22106 ;; Tracked objects:
 22107 ;;		On entry : 0/0
 22108 ;;		On exit  : 0/0
 22109 ;;		Unchanged: 0/0
 22110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22111 ;;      Params:         6       0       0       0       0       0       0
 22112 ;;      Locals:         6       0       0       0       0       0       0
 22113 ;;      Temps:          3       0       0       0       0       0       0
 22114 ;;      Totals:        15       0       0       0       0       0       0
 22115 ;;Total ram usage:       15 bytes
 22116 ;; Hardware stack levels used:    1
 22117 ;; Hardware stack levels required when called:    1
 22118 ;; This function calls:
 22119 ;;		___ftpack
 22120 ;; This function is called by:
 22121 ;;		_lerTransdutor
 22122 ;;		_map
 22123 ;; This function uses a non-reentrant model
 22124 ;;
 22125                           
 22126                           	psect	text94
 22127  0037AC                     __ptext94:
 22128                           	opt stack 0
 22129  0037AC                     ___ftdiv:
 22130                           	opt stack 0
 22131  0037AC  FFFF               	dw	65535	; assembler added errata NOP
 22132                           
 22133                           ;incstack = 0
 22134  0037AE  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 22135  0037B2  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22136  0037B4  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22137  0037B6  341C               	rlcf	___ftdiv@f1+1,w,c
 22138  0037B8  3621               	rlcf	??___ftdiv& (0+255),f,c
 22139  0037BA  E301               	bnc	u652_41
 22140  0037BC  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22141  0037BE                     u652_41:
 22142  0037BE  5021               	movf	??___ftdiv,w,c
 22143  0037C0  6E28               	movwf	___ftdiv@exp,c
 22144  0037C2  5028               	movf	___ftdiv@exp,w,c
 22145  0037C4  B4D8               	btfsc	status,2,c
 22146  0037C6  D00D               	goto	i2u655_40
 22147  0037C8  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 22148  0037CC  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22149  0037CE  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22150  0037D0  341F               	rlcf	___ftdiv@f2+1,w,c
 22151  0037D2  3621               	rlcf	??___ftdiv& (0+255),f,c
 22152  0037D4  E301               	bnc	u654_41
 22153  0037D6  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22154  0037D8                     u654_41:
 22155  0037D8  5021               	movf	??___ftdiv,w,c
 22156  0037DA  6E29               	movwf	___ftdiv@sign,c
 22157  0037DC  5029               	movf	___ftdiv@sign,w,c
 22158  0037DE  A4D8               	btfss	status,2,c
 22159  0037E0  D008               	goto	i2l1402
 22160  0037E2                     i2u655_40:
 22161  0037E2  FFFF               	dw	65535	; assembler added errata NOP
 22162  0037E4  0E00               	movlw	0
 22163  0037E6  6E1B               	movwf	?___ftdiv,c
 22164  0037E8  0E00               	movlw	0
 22165  0037EA  6E1C               	movwf	?___ftdiv+1,c
 22166  0037EC  0E00               	movlw	0
 22167  0037EE  6E1D               	movwf	?___ftdiv+2,c
 22168  0037F0  D04D               	goto	i2l6150
 22169  0037F2                     i2l1402:
 22170  0037F2  FFFF               	dw	65535	; assembler added errata NOP
 22171  0037F4  0E00               	movlw	0
 22172  0037F6  6E25               	movwf	___ftdiv@f3,c
 22173  0037F8  0E00               	movlw	0
 22174  0037FA  6E26               	movwf	___ftdiv@f3+1,c
 22175  0037FC  0E00               	movlw	0
 22176  0037FE  6E27               	movwf	___ftdiv@f3+2,c
 22177  003800  5029               	movf	___ftdiv@sign,w,c
 22178  003802  0F89               	addlw	137
 22179  003804  5E28               	subwf	___ftdiv@exp,f,c
 22180  003806  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 22181  00380A  5020               	movf	___ftdiv@f2+2,w,c
 22182  00380C  1A29               	xorwf	___ftdiv@sign,f,c
 22183  00380E  0E80               	movlw	128
 22184  003810  1629               	andwf	___ftdiv@sign,f,c
 22185  003812  8E1C               	bsf	___ftdiv@f1+1,7,c
 22186  003814  0EFF               	movlw	255
 22187  003816  161B               	andwf	___ftdiv@f1,f,c
 22188  003818  0EFF               	movlw	255
 22189  00381A  161C               	andwf	___ftdiv@f1+1,f,c
 22190  00381C  0E00               	movlw	0
 22191  00381E  161D               	andwf	___ftdiv@f1+2,f,c
 22192  003820  8E1F               	bsf	___ftdiv@f2+1,7,c
 22193  003822  0EFF               	movlw	255
 22194  003824  161E               	andwf	___ftdiv@f2,f,c
 22195  003826  0EFF               	movlw	255
 22196  003828  161F               	andwf	___ftdiv@f2+1,f,c
 22197  00382A  0E00               	movlw	0
 22198  00382C  1620               	andwf	___ftdiv@f2+2,f,c
 22199  00382E  0E18               	movlw	24
 22200  003830  6E24               	movwf	___ftdiv@cntr,c
 22201  003832  FFFF               	dw	65535	; assembler added errata NOP
 22202  003834  90D8               	bcf	status,0,c
 22203  003836  3625               	rlcf	___ftdiv@f3,f,c
 22204  003838  3626               	rlcf	___ftdiv@f3+1,f,c
 22205  00383A  3627               	rlcf	___ftdiv@f3+2,f,c
 22206  00383C  501E               	movf	___ftdiv@f2,w,c
 22207  00383E  5C1B               	subwf	___ftdiv@f1,w,c
 22208  003840  501F               	movf	___ftdiv@f2+1,w,c
 22209  003842  581C               	subwfb	___ftdiv@f1+1,w,c
 22210  003844  5020               	movf	___ftdiv@f2+2,w,c
 22211  003846  581D               	subwfb	___ftdiv@f1+2,w,c
 22212  003848  A0D8               	btfss	status,0,c
 22213  00384A  D007               	goto	i2l1404
 22214  00384C  501E               	movf	___ftdiv@f2,w,c
 22215  00384E  5E1B               	subwf	___ftdiv@f1,f,c
 22216  003850  501F               	movf	___ftdiv@f2+1,w,c
 22217  003852  5A1C               	subwfb	___ftdiv@f1+1,f,c
 22218  003854  5020               	movf	___ftdiv@f2+2,w,c
 22219  003856  5A1D               	subwfb	___ftdiv@f1+2,f,c
 22220  003858  8025               	bsf	___ftdiv@f3,0,c
 22221  00385A                     i2l1404:
 22222  00385A  FFFF               	dw	65535	; assembler added errata NOP
 22223  00385C  90D8               	bcf	status,0,c
 22224  00385E  361B               	rlcf	___ftdiv@f1,f,c
 22225  003860  361C               	rlcf	___ftdiv@f1+1,f,c
 22226  003862  361D               	rlcf	___ftdiv@f1+2,f,c
 22227  003864  2E24               	decfsz	___ftdiv@cntr,f,c
 22228  003866  D7E5               	goto	i2l1403
 22229  003868  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
 22230  00386C  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 22231  003870  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 22232  003874  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
 22233  003878  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
 22234  00387C  EC4B  F01E         	call	___ftpack	;wreg free
 22235  003880  C001  F01B         	movff	?___ftpack,?___ftdiv
 22236  003884  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
 22237  003888  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
 22238  00388C                     i2l6150:
 22239  00388C  FFFF               	dw	65535	; assembler added errata NOP
 22240  00388E  0012               	return		;funcret
 22241  003890  FFFF               	dw	65535	; errata NOP
 22242  003892                     __end_of___ftdiv:
 22243                           	opt stack 0
 22244                           tosu	equ	0xFFF
 22245                           tosh	equ	0xFFE
 22246                           tosl	equ	0xFFD
 22247                           pclatu	equ	0xFFB
 22248                           pclath	equ	0xFFA
 22249                           tblptru	equ	0xFF8
 22250                           tblptrh	equ	0xFF7
 22251                           tblptrl	equ	0xFF6
 22252                           tablat	equ	0xFF5
 22253                           prodh	equ	0xFF4
 22254                           prodl	equ	0xFF3
 22255                           intcon	equ	0xFF2
 22256                           indf0	equ	0xFEF
 22257                           postinc0	equ	0xFEE
 22258                           fsr0h	equ	0xFEA
 22259                           fsr0l	equ	0xFE9
 22260                           wreg	equ	0xFE8
 22261                           postdec1	equ	0xFE5
 22262                           fsr1h	equ	0xFE2
 22263                           fsr1l	equ	0xFE1
 22264                           indf2	equ	0xFDF
 22265                           postinc2	equ	0xFDE
 22266                           postdec2	equ	0xFDD
 22267                           fsr2h	equ	0xFDA
 22268                           fsr2l	equ	0xFD9
 22269                           status	equ	0xFD8
 22270                           
 22271 ;; *************** function ___ftadd *****************
 22272 ;; Defined at:
 22273 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 22274 ;; Parameters:    Size  Location     Type
 22275 ;;  f1              3   26[COMRAM] float 
 22276 ;;  f2              3   29[COMRAM] float 
 22277 ;; Auto vars:     Size  Location     Type
 22278 ;;  exp1            1   37[COMRAM] unsigned char 
 22279 ;;  exp2            1   36[COMRAM] unsigned char 
 22280 ;;  sign            1   35[COMRAM] unsigned char 
 22281 ;; Return value:  Size  Location     Type
 22282 ;;                  3   26[COMRAM] float 
 22283 ;; Registers used:
 22284 ;;		wreg, status,2, status,0, cstack
 22285 ;; Tracked objects:
 22286 ;;		On entry : 0/0
 22287 ;;		On exit  : 0/0
 22288 ;;		Unchanged: 0/0
 22289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22290 ;;      Params:         6       0       0       0       0       0       0
 22291 ;;      Locals:         3       0       0       0       0       0       0
 22292 ;;      Temps:          3       0       0       0       0       0       0
 22293 ;;      Totals:        12       0       0       0       0       0       0
 22294 ;;Total ram usage:       12 bytes
 22295 ;; Hardware stack levels used:    1
 22296 ;; Hardware stack levels required when called:    1
 22297 ;; This function calls:
 22298 ;;		___ftpack
 22299 ;; This function is called by:
 22300 ;;		_lerTransdutor
 22301 ;;		_map
 22302 ;; This function uses a non-reentrant model
 22303 ;;
 22304                           
 22305                           	psect	text95
 22306  0027C2                     __ptext95:
 22307                           	opt stack 0
 22308  0027C2                     ___ftadd:
 22309                           	opt stack 0
 22310  0027C2  FFFF               	dw	65535	; assembler added errata NOP
 22311                           
 22312                           ;incstack = 0
 22313  0027C4  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
 22314  0027C8  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22315  0027CA  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22316  0027CC  341C               	rlcf	___ftadd@f1+1,w,c
 22317  0027CE  3621               	rlcf	??___ftadd& (0+255),f,c
 22318  0027D0  E301               	bnc	u631_41
 22319  0027D2  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22320  0027D4                     u631_41:
 22321  0027D4  5021               	movf	??___ftadd,w,c
 22322  0027D6  6E26               	movwf	___ftadd@exp1,c
 22323  0027D8  C020  F021         	movff	___ftadd@f2+2,??___ftadd
 22324  0027DC  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22325  0027DE  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22326  0027E0  341F               	rlcf	___ftadd@f2+1,w,c
 22327  0027E2  3621               	rlcf	??___ftadd& (0+255),f,c
 22328  0027E4  E301               	bnc	u632_41
 22329  0027E6  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22330  0027E8                     u632_41:
 22331  0027E8  5021               	movf	??___ftadd,w,c
 22332  0027EA  6E25               	movwf	___ftadd@exp2,c
 22333  0027EC  5026               	movf	___ftadd@exp1,w,c
 22334  0027EE  B4D8               	btfsc	status,2,c
 22335  0027F0  D00B               	goto	i2u635_40
 22336  0027F2  5025               	movf	___ftadd@exp2,w,c
 22337  0027F4  5C26               	subwf	___ftadd@exp1,w,c
 22338  0027F6  B0D8               	btfsc	status,0,c
 22339  0027F8  D00F               	goto	i2l1367
 22340  0027FA  5026               	movf	___ftadd@exp1,w,c
 22341  0027FC  0800               	sublw	0
 22342  0027FE  2425               	addwf	___ftadd@exp2,w,c
 22343  002800  6E21               	movwf	??___ftadd& (0+255),c
 22344  002802  0E18               	movlw	24
 22345  002804  6421               	cpfsgt	??___ftadd,c
 22346  002806  D008               	goto	i2l1367
 22347  002808                     i2u635_40:
 22348  002808  FFFF               	dw	65535	; assembler added errata NOP
 22349  00280A  C01E  F01B         	movff	___ftadd@f2,?___ftadd
 22350  00280E  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
 22351  002812  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
 22352  002816  D0BA               	goto	i2l6104
 22353  002818                     i2l1367:
 22354  002818  FFFF               	dw	65535	; assembler added errata NOP
 22355  00281A  5025               	movf	___ftadd@exp2,w,c
 22356  00281C  B4D8               	btfsc	status,2,c
 22357  00281E  D00B               	goto	i2u638_40
 22358  002820  5026               	movf	___ftadd@exp1,w,c
 22359  002822  5C25               	subwf	___ftadd@exp2,w,c
 22360  002824  B0D8               	btfsc	status,0,c
 22361  002826  D00F               	goto	i2l1371
 22362  002828  5025               	movf	___ftadd@exp2,w,c
 22363  00282A  0800               	sublw	0
 22364  00282C  2426               	addwf	___ftadd@exp1,w,c
 22365  00282E  6E21               	movwf	??___ftadd& (0+255),c
 22366  002830  0E18               	movlw	24
 22367  002832  6421               	cpfsgt	??___ftadd,c
 22368  002834  D008               	goto	i2l1371
 22369  002836                     i2u638_40:
 22370  002836  FFFF               	dw	65535	; assembler added errata NOP
 22371  002838  C01B  F01B         	movff	___ftadd@f1,?___ftadd
 22372  00283C  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
 22373  002840  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
 22374  002844  D0A3               	goto	i2l6104
 22375  002846                     i2l1371:
 22376  002846  FFFF               	dw	65535	; assembler added errata NOP
 22377  002848  0E06               	movlw	6
 22378  00284A  6E24               	movwf	___ftadd@sign,c
 22379  00284C  BE1D               	btfsc	___ftadd@f1+2,7,c
 22380  00284E  8E24               	bsf	___ftadd@sign,7,c
 22381  002850  BE20               	btfsc	___ftadd@f2+2,7,c
 22382  002852  8C24               	bsf	___ftadd@sign,6,c
 22383  002854  8E1C               	bsf	___ftadd@f1+1,7,c
 22384  002856  0EFF               	movlw	255
 22385  002858  161B               	andwf	___ftadd@f1,f,c
 22386  00285A  0EFF               	movlw	255
 22387  00285C  161C               	andwf	___ftadd@f1+1,f,c
 22388  00285E  0E00               	movlw	0
 22389  002860  161D               	andwf	___ftadd@f1+2,f,c
 22390  002862  8E1F               	bsf	___ftadd@f2+1,7,c
 22391  002864  0EFF               	movlw	255
 22392  002866  161E               	andwf	___ftadd@f2,f,c
 22393  002868  0EFF               	movlw	255
 22394  00286A  161F               	andwf	___ftadd@f2+1,f,c
 22395  00286C  0E00               	movlw	0
 22396  00286E  1620               	andwf	___ftadd@f2+2,f,c
 22397  002870  5025               	movf	___ftadd@exp2,w,c
 22398  002872  5C26               	subwf	___ftadd@exp1,w,c
 22399  002874  B0D8               	btfsc	status,0,c
 22400  002876  D01E               	goto	i2l1376
 22401  002878                     i2u641_40:
 22402  002878  FFFF               	dw	65535	; assembler added errata NOP
 22403  00287A  90D8               	bcf	status,0,c
 22404  00287C  361E               	rlcf	___ftadd@f2,f,c
 22405  00287E  361F               	rlcf	___ftadd@f2+1,f,c
 22406  002880  3620               	rlcf	___ftadd@f2+2,f,c
 22407  002882  0625               	decf	___ftadd@exp2,f,c
 22408  002884  5026               	movf	___ftadd@exp1,w,c
 22409  002886  1825               	xorwf	___ftadd@exp2,w,c
 22410  002888  B4D8               	btfsc	status,2,c
 22411  00288A  D00E               	goto	i2l1381
 22412  00288C  0624               	decf	___ftadd@sign,f,c
 22413  00288E  C024  F021         	movff	___ftadd@sign,??___ftadd
 22414  002892  0E07               	movlw	7
 22415  002894  1621               	andwf	??___ftadd,f,c
 22416  002896  B4D8               	btfsc	status,2,c
 22417  002898  D007               	goto	i2l1381
 22418  00289A  D7EE               	goto	i2u641_40
 22419  00289C  FFFF               	dw	65535	; assembler added errata NOP
 22420  00289E  90D8               	bcf	status,0,c
 22421  0028A0  321D               	rrcf	___ftadd@f1+2,f,c
 22422  0028A2  321C               	rrcf	___ftadd@f1+1,f,c
 22423  0028A4  321B               	rrcf	___ftadd@f1,f,c
 22424  0028A6  2A26               	incf	___ftadd@exp1,f,c
 22425  0028A8                     i2l1381:
 22426  0028A8  FFFF               	dw	65535	; assembler added errata NOP
 22427  0028AA  5025               	movf	___ftadd@exp2,w,c
 22428  0028AC  1826               	xorwf	___ftadd@exp1,w,c
 22429  0028AE  B4D8               	btfsc	status,2,c
 22430  0028B0  D023               	goto	i2u648_40
 22431  0028B2  D7F4               	goto	i2l1382
 22432  0028B4                     i2l1376:
 22433  0028B4  FFFF               	dw	65535	; assembler added errata NOP
 22434  0028B6  5026               	movf	___ftadd@exp1,w,c
 22435  0028B8  5C25               	subwf	___ftadd@exp2,w,c
 22436  0028BA  B0D8               	btfsc	status,0,c
 22437  0028BC  D01D               	goto	i2u648_40
 22438  0028BE                     i2u645_40:
 22439  0028BE  FFFF               	dw	65535	; assembler added errata NOP
 22440  0028C0  90D8               	bcf	status,0,c
 22441  0028C2  361B               	rlcf	___ftadd@f1,f,c
 22442  0028C4  361C               	rlcf	___ftadd@f1+1,f,c
 22443  0028C6  361D               	rlcf	___ftadd@f1+2,f,c
 22444  0028C8  0626               	decf	___ftadd@exp1,f,c
 22445  0028CA  5026               	movf	___ftadd@exp1,w,c
 22446  0028CC  1825               	xorwf	___ftadd@exp2,w,c
 22447  0028CE  B4D8               	btfsc	status,2,c
 22448  0028D0  D00E               	goto	i2l1390
 22449  0028D2  0624               	decf	___ftadd@sign,f,c
 22450  0028D4  C024  F021         	movff	___ftadd@sign,??___ftadd
 22451  0028D8  0E07               	movlw	7
 22452  0028DA  1621               	andwf	??___ftadd,f,c
 22453  0028DC  B4D8               	btfsc	status,2,c
 22454  0028DE  D007               	goto	i2l1390
 22455  0028E0  D7EE               	goto	i2u645_40
 22456  0028E2  FFFF               	dw	65535	; assembler added errata NOP
 22457  0028E4  90D8               	bcf	status,0,c
 22458  0028E6  3220               	rrcf	___ftadd@f2+2,f,c
 22459  0028E8  321F               	rrcf	___ftadd@f2+1,f,c
 22460  0028EA  321E               	rrcf	___ftadd@f2,f,c
 22461  0028EC  2A25               	incf	___ftadd@exp2,f,c
 22462  0028EE                     i2l1390:
 22463  0028EE  FFFF               	dw	65535	; assembler added errata NOP
 22464  0028F0  5025               	movf	___ftadd@exp2,w,c
 22465  0028F2  1826               	xorwf	___ftadd@exp1,w,c
 22466  0028F4  A4D8               	btfss	status,2,c
 22467  0028F6  D7F5               	goto	i2l1391
 22468  0028F8                     i2u648_40:
 22469  0028F8  FFFF               	dw	65535	; assembler added errata NOP
 22470  0028FA  AE24               	btfss	___ftadd@sign,7,c
 22471  0028FC  D00C               	goto	i2l1393
 22472  0028FE  0EFF               	movlw	255
 22473  002900  1A1B               	xorwf	___ftadd@f1,f,c
 22474  002902  0EFF               	movlw	255
 22475  002904  1A1C               	xorwf	___ftadd@f1+1,f,c
 22476  002906  0EFF               	movlw	255
 22477  002908  1A1D               	xorwf	___ftadd@f1+2,f,c
 22478  00290A  0E01               	movlw	1
 22479  00290C  261B               	addwf	___ftadd@f1,f,c
 22480  00290E  0E00               	movlw	0
 22481  002910  221C               	addwfc	___ftadd@f1+1,f,c
 22482  002912  0E00               	movlw	0
 22483  002914  221D               	addwfc	___ftadd@f1+2,f,c
 22484  002916                     i2l1393:
 22485  002916  FFFF               	dw	65535	; assembler added errata NOP
 22486  002918  AC24               	btfss	___ftadd@sign,6,c
 22487  00291A  D00C               	goto	i2l1394
 22488  00291C  0EFF               	movlw	255
 22489  00291E  1A1E               	xorwf	___ftadd@f2,f,c
 22490  002920  0EFF               	movlw	255
 22491  002922  1A1F               	xorwf	___ftadd@f2+1,f,c
 22492  002924  0EFF               	movlw	255
 22493  002926  1A20               	xorwf	___ftadd@f2+2,f,c
 22494  002928  0E01               	movlw	1
 22495  00292A  261E               	addwf	___ftadd@f2,f,c
 22496  00292C  0E00               	movlw	0
 22497  00292E  221F               	addwfc	___ftadd@f2+1,f,c
 22498  002930  0E00               	movlw	0
 22499  002932  2220               	addwfc	___ftadd@f2+2,f,c
 22500  002934                     i2l1394:
 22501  002934  FFFF               	dw	65535	; assembler added errata NOP
 22502  002936  0E00               	movlw	0
 22503  002938  6E24               	movwf	___ftadd@sign,c
 22504  00293A  501B               	movf	___ftadd@f1,w,c
 22505  00293C  261E               	addwf	___ftadd@f2,f,c
 22506  00293E  501C               	movf	___ftadd@f1+1,w,c
 22507  002940  221F               	addwfc	___ftadd@f2+1,f,c
 22508  002942  501D               	movf	___ftadd@f1+2,w,c
 22509  002944  2220               	addwfc	___ftadd@f2+2,f,c
 22510  002946  AE20               	btfss	___ftadd@f2+2,7,c
 22511  002948  D00E               	goto	i2l1395
 22512  00294A  0EFF               	movlw	255
 22513  00294C  1A1E               	xorwf	___ftadd@f2,f,c
 22514  00294E  0EFF               	movlw	255
 22515  002950  1A1F               	xorwf	___ftadd@f2+1,f,c
 22516  002952  0EFF               	movlw	255
 22517  002954  1A20               	xorwf	___ftadd@f2+2,f,c
 22518  002956  0E01               	movlw	1
 22519  002958  261E               	addwf	___ftadd@f2,f,c
 22520  00295A  0E00               	movlw	0
 22521  00295C  221F               	addwfc	___ftadd@f2+1,f,c
 22522  00295E  0E00               	movlw	0
 22523  002960  2220               	addwfc	___ftadd@f2+2,f,c
 22524  002962  0E01               	movlw	1
 22525  002964  6E24               	movwf	___ftadd@sign,c
 22526  002966                     i2l1395:
 22527  002966  FFFF               	dw	65535	; assembler added errata NOP
 22528  002968  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
 22529  00296C  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22530  002970  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22531  002974  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
 22532  002978  C024  F005         	movff	___ftadd@sign,___ftpack@sign
 22533  00297C  EC4B  F01E         	call	___ftpack	;wreg free
 22534  002980  C001  F01B         	movff	?___ftpack,?___ftadd
 22535  002984  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
 22536  002988  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
 22537  00298C                     i2l6104:
 22538  00298C  FFFF               	dw	65535	; assembler added errata NOP
 22539  00298E  0012               	return		;funcret
 22540  002990  FFFF               	dw	65535	; errata NOP
 22541  002992                     __end_of___ftadd:
 22542                           	opt stack 0
 22543                           tosu	equ	0xFFF
 22544                           tosh	equ	0xFFE
 22545                           tosl	equ	0xFFD
 22546                           pclatu	equ	0xFFB
 22547                           pclath	equ	0xFFA
 22548                           tblptru	equ	0xFF8
 22549                           tblptrh	equ	0xFF7
 22550                           tblptrl	equ	0xFF6
 22551                           tablat	equ	0xFF5
 22552                           prodh	equ	0xFF4
 22553                           prodl	equ	0xFF3
 22554                           intcon	equ	0xFF2
 22555                           indf0	equ	0xFEF
 22556                           postinc0	equ	0xFEE
 22557                           fsr0h	equ	0xFEA
 22558                           fsr0l	equ	0xFE9
 22559                           wreg	equ	0xFE8
 22560                           postdec1	equ	0xFE5
 22561                           fsr1h	equ	0xFE2
 22562                           fsr1l	equ	0xFE1
 22563                           indf2	equ	0xFDF
 22564                           postinc2	equ	0xFDE
 22565                           postdec2	equ	0xFDD
 22566                           fsr2h	equ	0xFDA
 22567                           fsr2l	equ	0xFD9
 22568                           status	equ	0xFD8
 22569                           
 22570 ;; *************** function ___ftpack *****************
 22571 ;; Defined at:
 22572 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 22573 ;; Parameters:    Size  Location     Type
 22574 ;;  arg             3    0[COMRAM] unsigned um
 22575 ;;  exp             1    3[COMRAM] unsigned char 
 22576 ;;  sign            1    4[COMRAM] unsigned char 
 22577 ;; Auto vars:     Size  Location     Type
 22578 ;;		None
 22579 ;; Return value:  Size  Location     Type
 22580 ;;                  3    0[COMRAM] float 
 22581 ;; Registers used:
 22582 ;;		wreg, status,2, status,0
 22583 ;; Tracked objects:
 22584 ;;		On entry : 0/0
 22585 ;;		On exit  : 0/0
 22586 ;;		Unchanged: 0/0
 22587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22588 ;;      Params:         5       0       0       0       0       0       0
 22589 ;;      Locals:         0       0       0       0       0       0       0
 22590 ;;      Temps:          3       0       0       0       0       0       0
 22591 ;;      Totals:         8       0       0       0       0       0       0
 22592 ;;Total ram usage:        8 bytes
 22593 ;; Hardware stack levels used:    1
 22594 ;; This function calls:
 22595 ;;		Nothing
 22596 ;; This function is called by:
 22597 ;;		___ftadd
 22598 ;;		___ftdiv
 22599 ;;		___ftmul
 22600 ;;		___lwtoft
 22601 ;; This function uses a non-reentrant model
 22602 ;;
 22603                           
 22604                           	psect	text96
 22605  003C96                     __ptext96:
 22606                           	opt stack 0
 22607  003C96                     ___ftpack:
 22608                           	opt stack 0
 22609  003C96  FFFF               	dw	65535	; assembler added errata NOP
 22610                           
 22611                           ;incstack = 0
 22612  003C98  5004               	movf	___ftpack@exp,w,c
 22613  003C9A  B4D8               	btfsc	status,2,c
 22614  003C9C  D005               	goto	i2u549_40
 22615  003C9E  5001               	movf	___ftpack@arg,w,c
 22616  003CA0  1002               	iorwf	___ftpack@arg+1,w,c
 22617  003CA2  1003               	iorwf	___ftpack@arg+2,w,c
 22618  003CA4  A4D8               	btfss	status,2,c
 22619  003CA6  D00E               	goto	i2l1336
 22620  003CA8                     i2u549_40:
 22621  003CA8  FFFF               	dw	65535	; assembler added errata NOP
 22622  003CAA  0E00               	movlw	0
 22623  003CAC  6E01               	movwf	?___ftpack,c
 22624  003CAE  0E00               	movlw	0
 22625  003CB0  6E02               	movwf	?___ftpack+1,c
 22626  003CB2  0E00               	movlw	0
 22627  003CB4  6E03               	movwf	?___ftpack+2,c
 22628  003CB6  D04E               	goto	i2l5428
 22629  003CB8  FFFF               	dw	65535	; assembler added errata NOP
 22630  003CBA  2A04               	incf	___ftpack@exp,f,c
 22631  003CBC  90D8               	bcf	status,0,c
 22632  003CBE  3203               	rrcf	___ftpack@arg+2,f,c
 22633  003CC0  3202               	rrcf	___ftpack@arg+1,f,c
 22634  003CC2  3201               	rrcf	___ftpack@arg,f,c
 22635  003CC4                     i2l1336:
 22636  003CC4  FFFF               	dw	65535	; assembler added errata NOP
 22637  003CC6  0E00               	movlw	0
 22638  003CC8  1401               	andwf	___ftpack@arg,w,c
 22639  003CCA  6E06               	movwf	??___ftpack& (0+255),c
 22640  003CCC  0E00               	movlw	0
 22641  003CCE  1402               	andwf	___ftpack@arg+1,w,c
 22642  003CD0  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22643  003CD2  0EFE               	movlw	254
 22644  003CD4  1403               	andwf	___ftpack@arg+2,w,c
 22645  003CD6  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22646  003CD8  5006               	movf	??___ftpack,w,c
 22647  003CDA  1007               	iorwf	??___ftpack+1,w,c
 22648  003CDC  1008               	iorwf	??___ftpack+2,w,c
 22649  003CDE  B4D8               	btfsc	status,2,c
 22650  003CE0  D00D               	goto	i2l1339
 22651  003CE2  D7EA               	goto	i2l1337
 22652  003CE4  FFFF               	dw	65535	; assembler added errata NOP
 22653  003CE6  2A04               	incf	___ftpack@exp,f,c
 22654  003CE8  0E01               	movlw	1
 22655  003CEA  2601               	addwf	___ftpack@arg,f,c
 22656  003CEC  0E00               	movlw	0
 22657  003CEE  2202               	addwfc	___ftpack@arg+1,f,c
 22658  003CF0  0E00               	movlw	0
 22659  003CF2  2203               	addwfc	___ftpack@arg+2,f,c
 22660  003CF4  90D8               	bcf	status,0,c
 22661  003CF6  3203               	rrcf	___ftpack@arg+2,f,c
 22662  003CF8  3202               	rrcf	___ftpack@arg+1,f,c
 22663  003CFA  3201               	rrcf	___ftpack@arg,f,c
 22664  003CFC                     i2l1339:
 22665  003CFC  FFFF               	dw	65535	; assembler added errata NOP
 22666  003CFE  0E00               	movlw	0
 22667  003D00  1401               	andwf	___ftpack@arg,w,c
 22668  003D02  6E06               	movwf	??___ftpack& (0+255),c
 22669  003D04  0E00               	movlw	0
 22670  003D06  1402               	andwf	___ftpack@arg+1,w,c
 22671  003D08  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22672  003D0A  0EFF               	movlw	255
 22673  003D0C  1403               	andwf	___ftpack@arg+2,w,c
 22674  003D0E  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22675  003D10  5006               	movf	??___ftpack,w,c
 22676  003D12  1007               	iorwf	??___ftpack+1,w,c
 22677  003D14  1008               	iorwf	??___ftpack+2,w,c
 22678  003D16  B4D8               	btfsc	status,2,c
 22679  003D18  D007               	goto	i2l1342
 22680  003D1A  D7E4               	goto	i2l1340
 22681  003D1C  FFFF               	dw	65535	; assembler added errata NOP
 22682  003D1E  0604               	decf	___ftpack@exp,f,c
 22683  003D20  90D8               	bcf	status,0,c
 22684  003D22  3601               	rlcf	___ftpack@arg,f,c
 22685  003D24  3602               	rlcf	___ftpack@arg+1,f,c
 22686  003D26  3603               	rlcf	___ftpack@arg+2,f,c
 22687  003D28                     i2l1342:
 22688  003D28  FFFF               	dw	65535	; assembler added errata NOP
 22689  003D2A  BE02               	btfsc	___ftpack@arg+1,7,c
 22690  003D2C  D003               	goto	i2u553_40
 22691  003D2E  0E02               	movlw	2
 22692  003D30  6004               	cpfslt	___ftpack@exp,c
 22693  003D32  D7F4               	goto	i2l1343
 22694  003D34                     i2u553_40:
 22695  003D34  FFFF               	dw	65535	; assembler added errata NOP
 22696  003D36  A004               	btfss	___ftpack@exp,0,c
 22697  003D38  9E02               	bcf	___ftpack@arg+1,7,c
 22698  003D3A  90D8               	bcf	status,0,c
 22699  003D3C  3204               	rrcf	___ftpack@exp,f,c
 22700  003D3E  5004               	movf	___ftpack@exp,w,c
 22701  003D40  1203               	iorwf	___ftpack@arg+2,f,c
 22702  003D42  5005               	movf	___ftpack@sign,w,c
 22703  003D44  A4D8               	btfss	status,2,c
 22704  003D46  8E03               	bsf	___ftpack@arg+2,7,c
 22705  003D48  C001  F001         	movff	___ftpack@arg,?___ftpack
 22706  003D4C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 22707  003D50  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 22708  003D54                     i2l5428:
 22709  003D54  FFFF               	dw	65535	; assembler added errata NOP
 22710  003D56  0012               	return		;funcret
 22711  003D58  FFFF               	dw	65535	; errata NOP
 22712  003D5A                     __end_of___ftpack:
 22713                           	opt stack 0
 22714                           tosu	equ	0xFFF
 22715                           tosh	equ	0xFFE
 22716                           tosl	equ	0xFFD
 22717                           pclatu	equ	0xFFB
 22718                           pclath	equ	0xFFA
 22719                           tblptru	equ	0xFF8
 22720                           tblptrh	equ	0xFF7
 22721                           tblptrl	equ	0xFF6
 22722                           tablat	equ	0xFF5
 22723                           prodh	equ	0xFF4
 22724                           prodl	equ	0xFF3
 22725                           intcon	equ	0xFF2
 22726                           indf0	equ	0xFEF
 22727                           postinc0	equ	0xFEE
 22728                           fsr0h	equ	0xFEA
 22729                           fsr0l	equ	0xFE9
 22730                           wreg	equ	0xFE8
 22731                           postdec1	equ	0xFE5
 22732                           fsr1h	equ	0xFE2
 22733                           fsr1l	equ	0xFE1
 22734                           indf2	equ	0xFDF
 22735                           postinc2	equ	0xFDE
 22736                           postdec2	equ	0xFDD
 22737                           fsr2h	equ	0xFDA
 22738                           fsr2l	equ	0xFD9
 22739                           status	equ	0xFD8
 22740                           tosu	equ	0xFFF
 22741                           tosh	equ	0xFFE
 22742                           tosl	equ	0xFFD
 22743                           pclatu	equ	0xFFB
 22744                           pclath	equ	0xFFA
 22745                           tblptru	equ	0xFF8
 22746                           tblptrh	equ	0xFF7
 22747                           tblptrl	equ	0xFF6
 22748                           tablat	equ	0xFF5
 22749                           prodh	equ	0xFF4
 22750                           prodl	equ	0xFF3
 22751                           intcon	equ	0xFF2
 22752                           indf0	equ	0xFEF
 22753                           postinc0	equ	0xFEE
 22754                           fsr0h	equ	0xFEA
 22755                           fsr0l	equ	0xFE9
 22756                           wreg	equ	0xFE8
 22757                           postdec1	equ	0xFE5
 22758                           fsr1h	equ	0xFE2
 22759                           fsr1l	equ	0xFE1
 22760                           indf2	equ	0xFDF
 22761                           postinc2	equ	0xFDE
 22762                           postdec2	equ	0xFDD
 22763                           fsr2h	equ	0xFDA
 22764                           fsr2l	equ	0xFD9
 22765                           status	equ	0xFD8
 22766                           
 22767                           	psect	text97
 22768  000000                     __ptext97:
 22769                           	opt stack 0
 22770                           tosu	equ	0xFFF
 22771                           tosh	equ	0xFFE
 22772                           tosl	equ	0xFFD
 22773                           pclatu	equ	0xFFB
 22774                           pclath	equ	0xFFA
 22775                           tblptru	equ	0xFF8
 22776                           tblptrh	equ	0xFF7
 22777                           tblptrl	equ	0xFF6
 22778                           tablat	equ	0xFF5
 22779                           prodh	equ	0xFF4
 22780                           prodl	equ	0xFF3
 22781                           intcon	equ	0xFF2
 22782                           indf0	equ	0xFEF
 22783                           postinc0	equ	0xFEE
 22784                           fsr0h	equ	0xFEA
 22785                           fsr0l	equ	0xFE9
 22786                           wreg	equ	0xFE8
 22787                           postdec1	equ	0xFE5
 22788                           fsr1h	equ	0xFE2
 22789                           fsr1l	equ	0xFE1
 22790                           indf2	equ	0xFDF
 22791                           postinc2	equ	0xFDE
 22792                           postdec2	equ	0xFDD
 22793                           fsr2h	equ	0xFDA
 22794                           fsr2l	equ	0xFD9
 22795                           status	equ	0xFD8
 22796                           
 22797                           	psect	rparam
 22798  0000                     tosu	equ	0xFFF
 22799                           tosh	equ	0xFFE
 22800                           tosl	equ	0xFFD
 22801                           pclatu	equ	0xFFB
 22802                           pclath	equ	0xFFA
 22803                           tblptru	equ	0xFF8
 22804                           tblptrh	equ	0xFF7
 22805                           tblptrl	equ	0xFF6
 22806                           tablat	equ	0xFF5
 22807                           prodh	equ	0xFF4
 22808                           prodl	equ	0xFF3
 22809                           intcon	equ	0xFF2
 22810                           indf0	equ	0xFEF
 22811                           postinc0	equ	0xFEE
 22812                           fsr0h	equ	0xFEA
 22813                           fsr0l	equ	0xFE9
 22814                           wreg	equ	0xFE8
 22815                           postdec1	equ	0xFE5
 22816                           fsr1h	equ	0xFE2
 22817                           fsr1l	equ	0xFE1
 22818                           indf2	equ	0xFDF
 22819                           postinc2	equ	0xFDE
 22820                           postdec2	equ	0xFDD
 22821                           fsr2h	equ	0xFDA
 22822                           fsr2l	equ	0xFD9
 22823                           status	equ	0xFD8
 22824                           
 22825                           	psect	temp
 22826  00007D                     btemp:
 22827                           	opt stack 0
 22828  00007D                     	ds	1
 22829  0000                     int$flags	set	btemp
 22830  0000                     wtemp6	set	btemp+1
 22831                           tosu	equ	0xFFF
 22832                           tosh	equ	0xFFE
 22833                           tosl	equ	0xFFD
 22834                           pclatu	equ	0xFFB
 22835                           pclath	equ	0xFFA
 22836                           tblptru	equ	0xFF8
 22837                           tblptrh	equ	0xFF7
 22838                           tblptrl	equ	0xFF6
 22839                           tablat	equ	0xFF5
 22840                           prodh	equ	0xFF4
 22841                           prodl	equ	0xFF3
 22842                           intcon	equ	0xFF2
 22843                           indf0	equ	0xFEF
 22844                           postinc0	equ	0xFEE
 22845                           fsr0h	equ	0xFEA
 22846                           fsr0l	equ	0xFE9
 22847                           wreg	equ	0xFE8
 22848                           postdec1	equ	0xFE5
 22849                           fsr1h	equ	0xFE2
 22850                           fsr1l	equ	0xFE1
 22851                           indf2	equ	0xFDF
 22852                           postinc2	equ	0xFDE
 22853                           postdec2	equ	0xFDD
 22854                           fsr2h	equ	0xFDA
 22855                           fsr2l	equ	0xFD9
 22856                           status	equ	0xFD8


Data Sizes:
    Strings     1320
    Constant    58
    Data        12
    BSS         276
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     124
    BANK0           128     89     128
    BANK1           256      0     192
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2378	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2377	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2376	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_122(CODE[15]), STR_121(CODE[12]), STR_120(CODE[10]), 
		 -> STR_119(CODE[18]), STR_118(CODE[10]), STR_117(CODE[18]), STR_116(CODE[16]), 
		 -> STR_115(CODE[10]), STR_113(CODE[3]), STR_112(CODE[14]), STR_111(CODE[20]), 
		 -> STR_110(CODE[8]), STR_109(CODE[10]), STR_108(CODE[11]), STR_107(CODE[9]), 
		 -> STR_106(CODE[3]), STR_105(CODE[15]), STR_104(CODE[15]), STR_103(CODE[11]), 
		 -> STR_102(CODE[11]), STR_101(CODE[19]), STR_100(CODE[5]), STR_99(CODE[12]), 
		 -> STR_98(CODE[5]), STR_97(CODE[14]), STR_96(CODE[19]), STR_93(CODE[3]), 
		 -> STR_92(CODE[7]), STR_91(CODE[7]), STR_89(CODE[12]), STR_88(CODE[17]), 
		 -> STR_87(CODE[20]), STR_86(CODE[8]), STR_83(CODE[14]), STR_80(CODE[14]), 
		 -> STR_79(CODE[11]), STR_76(CODE[10]), STR_75(CODE[31]), STR_72(CODE[11]), 
		 -> STR_71(CODE[20]), STR_70(CODE[20]), STR_69(CODE[21]), STR_68(CODE[15]), 
		 -> STR_67(CODE[6]), STR_66(CODE[15]), STR_65(CODE[6]), STR_64(CODE[20]), 
		 -> STR_63(CODE[15]), STR_62(CODE[19]), STR_61(CODE[20]), STR_60(CODE[21]), 
		 -> STR_59(CODE[21]), STR_58(CODE[18]), STR_57(CODE[20]), STR_56(CODE[17]), 
		 -> STR_55(CODE[26]), STR_54(CODE[16]), STR_51(CODE[15]), STR_48(CODE[15]), 
		 -> STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[16]), STR_42(CODE[19]), 
		 -> STR_41(CODE[19]), STR_40(CODE[16]), STR_39(CODE[15]), STR_38(CODE[15]), 
		 -> STR_37(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_36(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), STR_25(CODE[63]), 
		 -> STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), STR_18(CODE[5]), 
		 -> STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), STR_8(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_123(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_114(CODE[12]), STR_95(CODE[17]), STR_94(CODE[13]), 
		 -> STR_90(CODE[12]), STR_85(CODE[5]), STR_84(CODE[3]), STR_82(CODE[5]), 
		 -> STR_81(CODE[3]), STR_78(CODE[5]), STR_77(CODE[3]), STR_74(CODE[4]), 
		 -> STR_73(CODE[4]), STR_53(CODE[5]), STR_52(CODE[3]), STR_50(CODE[5]), 
		 -> STR_49(CODE[3]), line3(BANK1[21]), STR_47(CODE[5]), STR_46(CODE[3]), 
		 -> line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), STR_32(CODE[6]), 
		 -> STR_31(CODE[3]), STR_30(CODE[6]), STR_29(CODE[3]), STR_28(CODE[6]), 
		 -> STR_27(CODE[3]), STR_15(CODE[12]), tel2(BANK1[12]), tel1(BANK1[12]), 
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 126
		 -> intToFloatStr@conv(BANK0[4]), STR_122(CODE[15]), STR_121(CODE[12]), STR_120(CODE[10]), 
		 -> STR_119(CODE[18]), STR_118(CODE[10]), STR_117(CODE[18]), STR_116(CODE[16]), 
		 -> STR_115(CODE[10]), STR_113(CODE[3]), STR_112(CODE[14]), STR_111(CODE[20]), 
		 -> STR_110(CODE[8]), STR_109(CODE[10]), STR_108(CODE[11]), STR_107(CODE[9]), 
		 -> STR_106(CODE[3]), STR_105(CODE[15]), STR_104(CODE[15]), STR_103(CODE[11]), 
		 -> STR_102(CODE[11]), STR_101(CODE[19]), STR_100(CODE[5]), STR_99(CODE[12]), 
		 -> STR_98(CODE[5]), STR_97(CODE[14]), STR_96(CODE[19]), STR_93(CODE[3]), 
		 -> STR_92(CODE[7]), STR_91(CODE[7]), STR_89(CODE[12]), STR_88(CODE[17]), 
		 -> STR_87(CODE[20]), STR_86(CODE[8]), STR_83(CODE[14]), STR_80(CODE[14]), 
		 -> STR_79(CODE[11]), STR_76(CODE[10]), STR_75(CODE[31]), STR_72(CODE[11]), 
		 -> STR_71(CODE[20]), STR_70(CODE[20]), STR_69(CODE[21]), STR_68(CODE[15]), 
		 -> STR_67(CODE[6]), STR_66(CODE[15]), STR_65(CODE[6]), STR_64(CODE[20]), 
		 -> STR_63(CODE[15]), STR_62(CODE[19]), STR_61(CODE[20]), STR_60(CODE[21]), 
		 -> STR_59(CODE[21]), STR_58(CODE[18]), STR_57(CODE[20]), STR_56(CODE[17]), 
		 -> STR_55(CODE[26]), STR_54(CODE[16]), STR_51(CODE[15]), STR_48(CODE[15]), 
		 -> STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[16]), STR_42(CODE[19]), 
		 -> STR_41(CODE[19]), STR_40(CODE[16]), STR_39(CODE[15]), STR_38(CODE[15]), 
		 -> STR_37(CODE[20]), STR_36(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), 
		 -> STR_25(CODE[63]), STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), 
		 -> STR_18(CODE[5]), STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), 
		 -> STR_8(CODE[5]), STR_4(CODE[5]), STR_3(CODE[9]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    S1604__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1604__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1463	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_95(CODE[17]), STR_94(CODE[13]), 

    dataLoger$1448	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_85(CODE[5]), STR_84(CODE[3]), 

    dataLoger$1443	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_82(CODE[5]), STR_81(CODE[3]), 

    dataLoger$1437	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_78(CODE[5]), STR_77(CODE[3]), 

    tela_testeBombas$1418	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_74(CODE[4]), STR_73(CODE[4]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    acaoTesteBombas$1318	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[3]), 

    acaoTesteBombas$1313	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_50(CODE[5]), STR_49(CODE[3]), 

    acaoTesteBombas$1308	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_47(CODE[5]), STR_46(CODE[3]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    enviaSMS$1228	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    enviaSMS$1223	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_28(CODE[6]), STR_27(CODE[3]), 

    enviaSMS$1222	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), STR_29(CODE[3]), 

    enviaSMS$1221	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), STR_31(CODE[3]), 

    enviaSMS$1208	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    comunicarTeste$1193	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    _TIMER->_lerTransdutor
    _timer->_writeEEPROM16_ext
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait
    _lerTransdutor->___ftdiv
    _lerTransdutor->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _verificarIntervaloTesteBombas->_writeEEPROM_ext
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _resetParametros->_clearShiftREG
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBombas->_enviaSMS
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _drenarPressao->_sprintf
    _sprintf->__doprnt
    _acaoBombas->_enviaSMS
    _partidaBombaEstacionaria->_delay
    _enviaSMS->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  375852
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                        _setShiftREG
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
      _verificarIntervaloTesteBombas
 ---------------------------------------------------------------------------------
 (1) _verificarIntervaloTesteBombas                        0     0      0    5482
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     4     4      0   24159
                                             53 BANK0      4     4      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   23011
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4358
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    1902
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   35298
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
                    _resetParametros
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _resetParametros                                      0     0      0      69
                      _clearShiftREG
 ---------------------------------------------------------------------------------
 (1) _setShiftREG                                          2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   12128
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          0     0      0   14436
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   29251
                                             70 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   17084
                                             53 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             63 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   18743
                                             53 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _criarCaracteresCGRAM                                56    56      0     521
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   24135
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   35495
                                             63 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                       4     4      0   11201
                                             59 BANK0      4     4      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                         9     1      8    2380
                                              8 BANK0      9     1      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   40711
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    4217
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     17    17      0   75641
                                             72 BANK0     17    17      0
                            _btPress
                      _clearShiftREG
                      _drenarPressao
                           _enviaSMS
                      _intToFloatStr
           _partidaBombaEstacionaria
                     _readEEPROM_ext
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8878
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5482
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   16484
                                             53 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1060
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _drenarPressao                                        0     0      0   14414
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20     6     14   14414
                                             33 BANK0     20     6     14
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _clearShiftREG                                        1     1      0      69
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           3     3      0   12493
                                             72 BANK0      3     3      0
                           _enviaSMS
           _partidaBombaEstacionaria
 ---------------------------------------------------------------------------------
 (2) _partidaBombaEstacionaria                             1     1      0    1130
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _enviaSMS                                            13    13      0   11363
                                             59 BANK0     13    13      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     402
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4630
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1638
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3421
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2    1086
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TIMER                                               19    19      0   17356
                                             48 COMRAM    19    19      0
                      _lerTransdutor
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (7) _timer                                                8     8      0    2076
                                              8 COMRAM     8     8      0
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Restart                                        0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Read                                           4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_BCDtoDEC                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (8) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (9) i2_delay                                              3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Write                                          2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Stop                                           0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Start                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _lerTransdutor                                        7     7      0   15213
                                             41 COMRAM     7     7      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (8) _readADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     328
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3526
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             15     9      6    3480
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    4622
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _partidaBombaEstacionaria
       _delay
   _acaoTesteBombas
     _btPress
     _clearShiftREG
     _drenarPressao
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _partidaBombaEstacionaria
       _delay
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _setShiftREG
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _resetParametros
       _clearShiftREG
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _verificarIntervaloTesteBombas
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _lerTransdutor
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
     ___lwtoft
       ___ftpack
       _readADC (ARG)
     _readADC
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C0       7       75.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      7C       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BC      15        0.0%
DATA                 0      0     1BC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 25 13:42:46 2019

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 70A0  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2E24  
                                        __end_of_partidaBombaEstacionaria 3976  
                                                             __CFG_OSC$HS 000000  
                                                            ___ftadd@exp1 0026  
                                                            ___ftadd@exp2 0025  
                                                            ___ftadd@sign 0024  
                                                             __CFG_WDT$ON 000000  
                                                                     l302 2B10  
                                                                     l310 2A78  
                                                                     l311 2AF4  
                                                                     l303 29A4  
                                                                     l304 2B32  
                                                                     l312 2AA0  
                                                                     l321 25B6  
                                                                     l305 29C6  
                                                                     l330 24AE  
                                                                     l322 2414  
                                                                     l314 2AC8  
                                                                     l323 25EC  
                                                                     l307 2A06  
                                                                     l500 396A  
                                                                     l340 2580  
                                                                     l324 2434  
                                                                     l316 2AF2  
                                                                     l308 2A24  
                                                                     l501 3970  
                                                                     l413 3C06  
                                                                     l325 2464  
                                                                     l317 2B02  
                                                                     l350 18BC  
                                                                     l510 6F52  
                                                                     l334 24DA  
                                                                     l351 15C6  
                                                                     l327 2484  
                                                                     l431 73EA  
                                                                     l352 18FC  
                                                                     l600 2FA2  
                                                                     l353 15E6  
                                                                     l337 2554  
                                                                     l601 2F84  
                                                                     l354 1616  
                                                                     l426 7010  
                                                                     l522 0D6E  
                                                                     l530 0A98  
                                                                     l338 258A  
                                                                     l506 7302  
                                                                     l259 71BC  
                                                                     l363 16B0  
                                                                     l531 0AA2  
                                                                     l523 09E4  
                                                                     l339 2576  
                                                                     l267 328A  
                                                                     l603 3024  
                                                                     l291 742E  
                                                                     l620 7346  
                                                                     l380 17D2  
                                                                     l364 17C4  
                                                                     l372 1734  
                                                                     l356 164A  
                                                                     l524 0DC2  
                                                                     l540 0BE6  
                                                                     l516 0950  
                                                                     l268 3206  
                                                                     l292 743A  
                                                                     l613 7318  
                                                                     l365 1700  
                                                                     l533 0AEA  
                                                                     l525 0A08  
                                                                     l269 324E  
                                                                     l605 3056  
                                                                     l293 7446  
                                                                     l614 731C  
                                                                     l366 17A2  
                                                                     l534 0B2A  
                                                                     l518 0958  
                                                                     l630 3BAE  
                                                                     l294 7452  
                                                                     l710 1E86  
                                                                     l615 7326  
                                                                     l391 1840  
                                                                     l359 1674  
                                                                     l463 76DE  
                                                                     l471 76C6  
                                                                     l551 0C7E  
                                                                     l527 0A46  
                                                                     l519 0974  
                                                                     l631 3B16  
                                                                     l295 745E  
                                                                     l703 1E26  
                                                                     l616 732A  
                                                                     l384 1822  
                                                                     l376 174E  
                                                                     l368 171A  
                                                                     l472 76D8  
                                                                     l464 769C  
                                                                     l536 0B4A  
                                                                     l528 0A86  
                                                                     l632 3BCC  
                                                                     l296 746A  
                                                                     l617 7334  
                                                                     l385 1812  
                                                                     l481 3108  
                                                                     l537 0B54  
                                                                     l633 3B3C  
                                                                     l705 1F94  
                                                                     l713 1EBA  
                                                                     l618 7338  
                                                                     l394 186C  
                                                                     l490 38D4  
                                                                     l482 312C  
                                                                     l474 76FE  
                                                                     l546 0C02  
                                                                     l634 3B62  
                                                                     l722 1F56  
                                                                     l706 1E54  
                                                                     l730 266C  
                                                                     l619 7342  
                                                                     l483 3158  
                                                                     l467 76AA  
                                                                     l563 0D32  
                                                                     l555 0CB6  
                                                                     l539 0B96  
                                                                     l635 3B88  
                                                                     l643 712A  
                                                                     l811 134E  
                                                                     l803 127E  
                                                                     l396 18A2  
                                                                     l492 38F0  
                                                                     l484 3182  
                                                                     l548 0C32  
                                                                     l820 139E  
                                                                     l812 1306  
                                                                     l716 1EEE  
                                                                     l740 2710  
                                                                     l900 0EC4  
                                                                     l389 182A  
                                                                     l485 319A  
                                                                     l477 30BA  
                                                                     l469 76B8  
                                                                     l565 0D5E  
                                                                     l549 0C56  
                                                                     l661 3AC2  
                                                                     l709 1FC0  
                                                                     l725 1F8A  
                                                                     l741 2736  
                                                                     l733 26C2  
                                                                     l901 0ED8  
                                                                     l398 18B0  
                                                                     l494 3900  
                                                                     l830 1482  
                                                                     l822 13E4  
                                                                     l742 2748  
                                                                     l902 0FF2  
                                                                     l910 0FC0  
                                                                     l495 3906  
                                                                     l479 30E0  
                                                                     l559 0CEE  
                                                                     l823 1406  
                                                                     l815 136A  
                                                                     l807 12C0  
                                                                     l663 3AF2  
                                                                     l655 3A94  
                                                                     l719 1F22  
                                                                     l735 27A2  
                                                                     l911 0FC8  
                                                                     l903 0EE8  
                                                                     l496 3924  
                                                                     l648 39EC  
                                                                     l840 1584  
                                                                     l832 14C8  
                                                                     l824 1428  
                                                                     l680 225E  
                                                                     l736 26D6  
                                                                     l920 1050  
                                                                     l904 103C  
                                                                     l912 0FD0  
                                                                     l497 3940  
                                                                     l833 14EA  
                                                                     l809 12D4  
                                                                     l657 3AA0  
                                                                     l681 2278  
                                                                     l745 2754  
                                                                     l737 26FC  
                                                                     l913 0FD8  
                                                                     l905 0EF0  
                                                                     l498 3954  
                                                                     l818 158C  
                                                                     l834 150C  
                                                                     l658 3AB0  
                                                                     l690 2392  
                                                                     l682 2292  
                                                                     l746 275C  
                                                                     l922 11B4  
                                                                     l914 0FE0  
                                                                     l906 0F4C  
                                                                     l819 1384  
                                                                     l851 2E1E  
                                                                     l691 23A2  
                                                                     l683 22AC  
                                                                     l739 27BC  
                                                                     l747 2784  
                                                                     l931 10F0  
                                                                     l923 1070  
                                                                     l915 0FE8  
                                                                     l907 0FA8  
                                                                     l668 3FF0  
                                                                     l828 15A6  
                                                                     l852 2DC8  
                                                                     l692 23BA  
                                                                     l684 2308  
                                                                     l908 0FB0  
                                                                     l669 3FD8  
                                                                     l861 1B36  
                                                                     l829 1468  
                                                                     l853 2DEE  
                                                                     l845 2D60  
                                                                     l685 2336  
                                                                     l677 22C6  
                                                                     l749 279A  
                                                                     l941 11D8  
                                                                     l933 111A  
                                                                     l925 1090  
                                                                     l909 0FB8  
                                                                     l862 1A0E  
                                                                     l838 1556  
                                                                     l790 1CA2  
                                                                     l782 1C04  
                                                                     l694 23E2  
                                                                     l686 2366  
                                                                     l678 2244  
                                                                     l871 1A9E  
                                                                     l863 1A34  
                                                                     l847 2E0A  
                                                                     l855 2E02  
                                                                     l791 1C9C  
                                                                     l695 23F0  
                                                                     l679 22EA  
                                                                     l943 11F4  
                                                                     l919 117E  
                                                                     l935 1140  
                                                                     l927 10B0  
                                                                     l872 1AC4  
                                                                     l864 1A46  
                                                                     l848 2D8E  
                                                                     l792 1CE2  
                                                                     l944 1208  
                                                                     l873 1AD6  
                                                                     l849 2DB4  
                                                                     l697 23FC  
                                                                     l929 10D0  
                                                                     l866 1B56  
                                                                     l786 1C3E  
                                                                     l778 1BA2  
                                                                     l938 1170  
                                                                     l875 1AE6  
                                                                     l867 1A56  
                                                                     l859 19FA  
                                                                     l795 1D8E  
                                                                     l699 240A  
                                                                     l939 11C6  
                                                                     l876 1B0C  
                                                                     l868 1A7C  
                                                                     l877 1B1E  
                                                                     l869 1A8E  
                                                                     l789 1C7E  
                                                                     l879 1B2E  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                                     _cbf 0066  
                                                                     _rtc 0076  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 025A  
                                                            __CFG_LVP$OFF 000000  
                                                            ___ftdiv@cntr 0024  
                                                            ___ftdiv@sign 0029  
                                                                    l1002 6FAA  
                                                                    l1003 6F92  
                                                                    l1020 7A28  
                                                                    l1101 0808  
                                                                    l1102 0896  
                                                                    l1103 08C2  
                                                                    l1041 01B6  
                                                                    l1042 01AC  
                                                                    l1018 7A1E  
                                                                    l1036 0120  
                                                                    l1061 0346  
                                                                    l1037 019A  
                                                                    l1054 0538  
                                                                    l1070 0440  
                                                                    l1038 016C  
                                                                    l1310 78D0  
                                                                    l1302 7880  
                                                                    l1071 0492  
                                                                    l1055 02A6  
                                                                    l1047 0214  
                                                                    l1311 78E0  
                                                                    l1303 788E  
                                                                    l1080 05EE  
                                                                    l1064 0352  
                                                                    l1056 02E2  
                                                                    l1081 05F8  
                                                                    l1049 04E0  
                                                                    l1073 04A6  
                                                                    l1065 0394  
                                                                    l1057 02F6  
                                                                    l1305 78A8  
                                                                    l1082 06FC  
                                                                    l1074 04CC  
                                                                    l1066 03C0  
                                                                    l1058 02EE  
                                                                    l1306 789E  
                                                                    l1075 0574  
                                                                    l1084 064A  
                                                                    l1085 0676  
                                                                    l1069 03D6  
                                                                    l1309 78C4  
                                                                    l1094 0748  
                                                                    l1270 35E4  
                                                                    l1095 0774  
                                                                    l1079 05C8  
                                                                    l1271 35DC  
                                                                    l1088 06C4  
                                                                    l1280 36BE  
                                                                    l1089 06F0  
                                                                    l1273 3628  
                                                                    l1530 75F2  
                                                                    l1098 07D4  
                                                                    l1290 3E20  
                                                                    l1531 75E8  
                                                                    l1451 6E34  
                                                                    l1099 0800  
                                                                    l1540 748C  
                                                                    l1292 3E42  
                                                                    l1276 367E  
                                                                    l1541 7482  
                                                                    l1293 3E38  
                                                                    l1277 363C  
                                                                    l1710 3F6C  
                                                                    l1534 7616  
                                                                    l1535 7622  
                                                                    l1279 36B4  
                                                                    l1544 74A8  
                                                                    l1296 3E66  
                                                                    l1481 79E2  
                                                                    l1545 74B4  
                                                                    l1297 3E72  
                                                                    l1289 3E0E  
                                                                    l1482 79F2  
                                                                    l1554 70C0  
                                                                    l1298 3E82  
                                                                    l1555 70AC  
                                                                    l1708 3F98  
                                                                    l1477 79AA  
                                                                    l1709 3F2E  
                                                                    l1478 799C  
                                                                    l1742 3F08  
                                                                    l1743 3E94  
                                                                    l1744 3EFE  
                                                                    l1737 7220  
                                                                    l6010 7120  
                                                                    l5116 057A  
                                                                    l1696 7582  
                                                                    l5072 0354  
                                                                    l1697 757A  
                                                                    l5082 03D8  
                                                                    l5316 71C0  
                                                                    l5354 7006  
                                                                    l6510 7414  
                                                                    l4912 3E96  
                                                                    l7314 12FC  
                                                                    l4836 6D36  
                                                                    l4926 3F24  
                                                                    l5558 3678  
                                                                    l4960 3FBC  
                                                                    l5824 3BFE  
                                                                    l6480 2ACA  
                                                                    l4938 723C  
                                                                    l4970 70AE  
                                                                    l6634 096A  
                                                                    l6474 2AA2  
                                                                    l4964 6F94  
                                                                    l6468 2A7A  
                                                                    l6902 304C  
                                                                    l5886 76D2  
                                                                    l6890 301A  
                                                                    l6876 2F7A  
                                                                    l6958 39E2  
                                                                    l6992 3AA6  
                                                                    l6984 3A8A  
                                                                    STR_1 7FE8  
                                                                    STR_2 7FE8  
                                                                    STR_3 7F89  
                                                                    STR_4 7FDE  
                                                                    STR_5 7FFA  
                                                                    STR_6 7FB1  
                                                                    STR_7 7FB1  
                                                                    STR_8 7FDE  
                                                                    STR_9 7FFA  
                                                                    u5000 0432  
                                                                    u5010 047C  
                                                                    u5030 0512  
                                                                    u5007 0428  
                                                                    u5017 0472  
                                                                    u5300 090A  
                                                                    u5220 0786  
                                                                    u5037 0508  
                                                                    u5070 05AC  
                                                                    u4520 75A6  
                                                                    u5400 78AE  
                                                                    u5218 072C  
                                                                    u4620 7492  
                                                                    u5148 062E  
                                                                    u5340 3E48  
                                                                    u6060 3BF0  
                                                                    u6300 3FFA  
                                                                    u5190 0706  
                                                                    u6070 3BFC  
                                                                    u4527 759C  
                                                                    u5280 08CE  
                                                                    u4650 3EC6  
                                                                    u4730 3FB2  
                                                                    u5290 0900  
                                                                    u5258 07B8  
                                                                    u5178 06A8  
                                                                    u5610 32AC  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u4590 75F8  
                                                                    u5278 087A  
                                                                    u5470 702A  
                                                                    u4920 0326  
                                                                    u4760 7100  
                                                                    u6280 7148  
                                                                    u5297 08F6  
                                                                    u4930 032C  
                                                                    u4850 01DA  
                                                                    u4860 0202  
                                                                    u7270 098E  
                                                                    u8310 1348  
                                                                    u4927 031C  
                                                                    u4775 7104  
                                                                    u4880 0260  
                                                                    u4848 0150  
                                                                    u5840 25AA  
                                                                    u4857 01D0  
                                                                    u9017 3A72  
                                                                    u4890 029C  
                                                                    u7370 0BD6  
                                                                    u8410 1458  
                                                                    u4867 01F8  
                                                                    u9027 7264  
                                                                    u6900 2A9A  
                                                                    u9037 7278  
                                                                    u6750 79B0  
                                                                    u7390 0BF6  
                                                                    u7710 3A42  
                                                                    u6910 2AB2  
                                                                    u9047 6F9C  
                                                                    u4887 0256  
                                                                    u4968 0378  
                                                                    u8440 14C0  
                                                                    u7720 3A58  
                                                                    u6920 2AC2  
                                                                    u9057 78FE  
                                                                    u4897 0292  
                                                                    u8370 13DC  
                                                                    u6930 2ADA  
                                                                    u7650 2F96  
                                                                    u9067 791A  
                                                                    u6940 2AEA  
                                                                    u7820 2376  
                                                                    u9077 7934  
                                                                    u4998 03FC  
                                                                    u5990 17FA  
                                                                    u7670 3046  
                                                                    u9087 6E82  
                                                                    u4999 0436  
                                                                    u8480 153C  
                                                                    u6880 2A72  
                                                                    u7770 3B00  
                                                                    u6890 2A8A  
                                                                    u7690 3078  
                                                                    u7780 3B08  
                                                                    u8735 765E  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                           _enviaSMS$1221 00BF  
                                                           _enviaSMS$1222 00C1  
                                                           _enviaSMS$1223 00C3  
                                                            __CFG_WRT1$ON 000000  
                                                           _enviaSMS$1208 00BD  
                                                           _enviaSMS$1228 00C5  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00EB  
                                                                    __ano 00E9  
                                                                    __hor 00EC  
                                                                    __mes 00EA  
                                                                    __min 00ED  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00EE  
                                                          ?_drenarPressao 0001  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 35D8  
                                                                    _main 0DC8  
                                             __end_ofi2_getDS1307TimeDate 34E0  
                                                                    _tel1 01B0  
                                                                    _tel2 01A4  
                                                            ___ftpack@arg 0001  
                                                            ___ftpack@exp 0004  
                                                        __end_of_I2C_Read 7114  
                                              __end_of_configuraTelefones 15B6  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    fsr2l 000FD9  
                                                                    btemp 007D  
                                                        __end_of_I2C_Wait 6D8C  
                                                        __end_of_I2C_Stop 6CE8  
                                                 __size_of_tela_ajusteRTC 0236  
                                                        _etapaComunicacao 0051  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 6EF2  
                                                                    start 0118  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 0234  
                                            partidaBombaEstacionaria@acao 0083  
                                                        __end_of_BCDtoDEC 6DA6  
                                                         __end_of_Lcd_Cmd 6E94  
                                                  __size_ofi2_I2C_Restart 000C  
                                                          clearShiftREG@i 0080  
                                                           ?_atualizarLCD 0088  
                                                            ___ftmul@cntr 0019  
                                                            ___param_bank 000000  
                                                            ___ftmul@sign 001A  
                                                        __end_of_DECtoBCD 72C6  
                                               __size_of_tela_testeBombas 01D0  
                                                     _timerVerificarSinal 00FE  
                                                           _lerParametros 2F58  
                                                            ___fttol@exp1 0029  
                                                         _executandoTeste 00F1  
                                                            ___fttol@lval 0025  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1463 00C1  
                                                             ?i2_RTC_Init 0001  
                                                                   ?_atoi 00BF  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3E90  
                                                         __end_of___ftadd 2992  
                                                                   STR_10 7ED9  
                                                                   STR_11 7FFA  
                                                                   STR_20 7ED9  
                                                                   STR_12 7D5F  
                                                                   STR_13 7FFD  
                                                                   STR_21 7FAA  
                                                                   STR_30 7FD2  
                                                                   STR_22 7FFA  
                                                                   STR_14 7AD7  
                                                                   STR_23 7D5F  
                                                                   STR_31 7FFA  
                                                                   STR_15 7EE5  
                                                                   STR_24 7FFD  
                                                                   STR_32 7FD2  
                                                                   STR_16 7FFA  
                                                                   STR_40 7E0B  
                                                                   STR_33 7FFA  
                                                                   STR_17 7FD8  
                                                                   STR_41 7D00  
                                                                   STR_25 7BBD  
                                                                   STR_18 7FDE  
                                                                   STR_50 7FE3  
                                                                   STR_34 7FD8  
                                                                   STR_42 7D13  
                                                                   STR_26 7B55  
                                                                   STR_27 7FFA  
                                                                   STR_19 7FFA  
                                                                   STR_35 7F15  
                                                                   STR_51 7E67  
                                                                   STR_43 7DFB  
                                                                   STR_36 7FAA  
                                                                   STR_52 7FFA  
                                                                   STR_28 7FD2  
                                                                   STR_44 7DA7  
                                                                   STR_60 7C4A  
                                                         __end_of___awmod 78EE  
                                                                   STR_29 7FFA  
                                                                   STR_53 7FE3  
                                                                   STR_45 7F41  
                                                                   STR_61 7C88  
                                                                   STR_37 7C74  
                                                                   STR_46 7FFA  
                                                                   STR_38 7E76  
                                                                   STR_54 7DEB  
                                                                   STR_62 7D4C  
                                                                   STR_70 7CB0  
                                                                   STR_63 7E2B  
                                                                   STR_47 7FE3  
                                                                   STR_39 7E2B  
                                                                   STR_71 7CC4  
                                                                   STR_55 7C1B  
                                                                   STR_72 7F4C  
                                                                   STR_80 7EB0  
                                                                   STR_48 7E58  
                                                                   STR_56 7DC9  
                                                                   STR_64 7CEC  
                                                                   STR_81 7FFA  
                                                                   STR_49 7FFA  
                                                                   STR_73 7FF6  
                                                                   STR_65 7FCC  
                                                                   STR_57 7C9C  
                                                                   STR_90 7EE5  
                                                                   STR_82 7FE3  
                                                                   STR_74 7FF2  
                                                                   STR_66 7E3A  
                                                                   STR_58 7D95  
                                                                   STR_67 7FC6  
                                                                   STR_91 7FB8  
                                                                   STR_83 7EBE  
                                                                   STR_59 7C35  
                                                                   STR_75 7BFC  
                                                                   STR_84 7FFA  
                                                                   STR_92 7FBF  
                                                                   STR_76 7F7F  
                                                                   STR_68 7E49  
                                                                   STR_77 7FFA  
                                                                   STR_85 7FE3  
                                                                   STR_93 7F12  
                                                                   STR_69 7C5F  
                                                                   STR_78 7FE3  
                                                                   STR_86 7F9B  
                                                                   STR_94 7ECC  
                                                                   STR_79 7F2B  
                                                                   STR_95 7DDA  
                                                                   STR_87 7CD8  
                                                                   STR_88 7DB8  
                                                                   STR_96 7D39  
                                                                   STR_89 7F09  
                                                                   STR_97 7EA2  
                                                                   STR_98 7FED  
                                                                   STR_99 7EF1  
                                                         __end_of___ftdiv 3892  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 7A08  
                                                         __end_of___ftmul 35D8  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___fttol 37AC  
                                                         __end_of___lwdiv 7630  
                                                         __end_of___lwmod 74C2  
                                                                   i2l230 1FF6  
                                                                   i2l232 20CE  
                                                                   i2l225 6DFC  
                                                                   i2l234 2102  
                                                                   i2l236 21F8  
                                                                   i2l237 21C2  
                                                                   i2l452 77F4  
                                                                   i2l453 7808  
                                                                   i2l454 7812  
                                                                   i2l455 7826  
                                                                   i2l456 7830  
                                                                   i2l457 7844  
                                                                   i2l458 784E  
                                                                   i2l570 2B4C  
                                                                   i2l459 7862  
                                                                   i2l580 2B9E  
                                                                   i2l572 2B56  
                                                                   i2l582 2BB0  
                                                                   i2l574 2B6C  
                                                                   i2l584 2BBA  
                                                                   i2l576 2B76  
                                                                   i2l594 2C34  
                                                                   i2l586 2BD0  
                                                                   i2l578 2B94  
                                                                   i2l595 2CB0  
                                                                   i2l596 2C58  
                                                                   i2l588 2BDA  
                                                                   i2l597 2C96  
                                                                   i2l589 2BFC  
                                                                   i2l891 008C  
                                                         ___awdiv@counter 0084  
                                                                   i2l893 00BC  
                                                                   i2l894 00C8  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 091A  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 734C  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 7704  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 005E  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                         __end_of_readADC 6E18  
                                                                   _delay 6F8E  
                                                                   _blink 3FC2  
                                                         __end_of_dpowers 7AD7  
                                                                   _line1 017B  
                                                                   _line2 0166  
                                                                   _line3 0151  
                                                                   _line4 013C  
                                                         __end_of_isdigit 6E40  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _shift 0044  
                                                           ___ftpack@sign 0005  
                                                                   _timer 2B38  
                                                                   atoi@a 00C4  
                                                        __end_of_RTC_Init 7068  
                                                                   atoi@s 00BF  
                                                                   _putch 6D30  
                                                       __end_of_I2C_Start 6CDC  
                                                  _flagEstacionariaLigada 00F0  
                                                       __end_of_I2C_Write 6D10  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0094  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 2410  
                                                                   wtemp6 007E  
                                                         __end_of_sprintf 73DA  
                                                          _comunicarTeste 2410  
                                                         __end_of_strncmp 3F2A  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 7976  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 734C  
                                                     __size_ofi2_I2C_Read 0036  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 7704  
                                                           _dtl_principal 0057  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 36C4  
                                                            __end_of_main 1230  
                                                   __end_of_aguardaBuffer 71C6  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                                  ??_atoi 00C1  
                                                                  ??_main 00D9  
                                                           ___fttol@sign1 0024  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FD  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                                           __activetblptr 000002  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 1FCA  
                                                   __end_of_clearShiftREG 7030  
                                                           i2_I2C_Restart 6CC4  
                                                    _tempo_limite_partida 006C  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0043  
                                                            ?_setShiftREG 0001  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7FED  
                                                                  STR_101 7D26  
                                                                  STR_110 7F9B  
                                                                  STR_102 7F36  
                                                                  STR_103 7F41  
                                                                  STR_111 7CD8  
                                                                  STR_104 7E58  
                                                                  STR_120 7F61  
                                                                  STR_112 7E94  
                                                                  STR_113 7F12  
                                                                  STR_105 7E67  
                                                                  STR_121 7EFD  
                                                                  STR_114 7EE5  
                                                                  STR_122 7E85  
                                                                  _ADRESH 000FC4  
                                                                  STR_123 7FA3  
                                                                  STR_107 7F92  
                                                                  STR_115 7F57  
                                                                  STR_108 7F20  
                                                                  STR_116 7E1B  
                                                                  STR_109 7F75  
                                                                  STR_117 7D71  
                                                                  STR_118 7F6B  
                                                                  _ADRESL 000FC3  
                                                                  STR_119 7D83  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                        __end_of___ftpack 3D5A  
                                                          lerTransdutor@i 002A  
                                                         ??_drenarPressao 00B5  
                                                               ??i2_delay 0003  
                                                  __end_of_comunicarTeste 25F2  
                                                                  i2l1002 6EDA  
                                                                  i2l1003 6EC4  
                                                                  i2l1402 37F2  
                                                                  i2l1403 3832  
                                                                  i2l1340 3CE4  
                                                                  i2l1404 385A  
                                                                  i2l1421 3586  
                                                                  i2l1342 3D28  
                                                                  i2l1422 3598  
                                                                  i2l1343 3D1C  
                                                                  i2l1336 3CC4  
                                                                  i2l1408 3D8C  
                                                                  i2l1337 3CB8  
                                                                  i2l1409 3DBE  
                                                                  i2l1417 3526  
                                                                  i2l1418 355A  
                                                                  i2l1339 3CFC  
                                                                  i2l1371 2846  
                                                                  i2l1419 356C  
                                                                  i2l1444 3774  
                                                                  i2l1381 28A8  
                                                                  i2l1445 3766  
                                                                  i2l1390 28EE  
                                                                  i2l1382 289C  
                                                                  i2l1438 374A  
                                                                  i2l1391 28E2  
                                                                  i2l1367 2818  
                                                                  i2l1447 3794  
                                                                  i2l1439 3738  
                                                                  i2l1376 28B4  
                                                                  i2l1393 2916  
                                                                  i2l1394 2934  
                                                                  i2l1395 2966  
                                                                  i2l5300 6EC6  
                                                                  i2l6104 298C  
                                                                  i2l6150 388C  
                                                                  i2l5428 3D54  
                                                                  i2l6262 37A6  
                                                                  i2l4832 3DEC  
                                                                  _INTCON 000FF2  
                                                                  i2l4834 3DF0  
                                                                  i2l6198 35D2  
                                                                  i2l6374 1FEC  
                                                        __end_of___lwtoft 6DF0  
                                                                  u631_41 27D4  
                                                                  u632_41 27E8  
                                                                  u652_41 37BE  
                                                                  u654_41 37D8  
                                                               ??_Lcd_Cmd 0081  
                                                                  u657_41 34F2  
                                                                  u666_41 36D6  
                                                                  u659_41 350C  
                                                                  _TMR0IF 007F92  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 00E4  
                                                 __size_of_Lcd_Write_Char 0042  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C2  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00E7  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 0064  
                                                                  ___ftge 3D5A  
                                                          _readEEPROM_ext 74C2  
                                                                  ___wmul 6E94  
                                                        __end_of_enviaSMS 1902  
                                                               ??___awdiv 0084  
                                                            enviaSMS@tipo 00C7  
                                                               ??___ftadd 0021  
                                                               ??___awmod 0084  
                                                               ??___ftdiv 0021  
                                                         _getSinalSIM800L 2992  
                                                               ??___lldiv 0088  
                                                               ??___ftmul 0012  
                                                               ??___fttol 001F  
                                                                  _blinkk 0067  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                 _habilitaTesteAutomatico 00EF  
                                   __end_of_verificarIntervaloTesteBombas 7308  
                                  __size_of_verificarIntervaloTesteBombas 0042  
                                           _verificarIntervaloTesteBombas 72C6  
                                                 __end_of_writeEEPROM_ext 7392  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 70A0  
                                                                  delay@x 0080  
                                                                  clear_0 774A  
                                                                  clear_1 7756  
                                                                  clear_2 7762  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 7A08  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 71C6  
                                                            __doprnt@prec 0096  
                                                                  _strchr 7202  
                                                                  _strlen 756E  
                                                                  _strstr 3F2A  
                                                          ?_lerTransdutor 0001  
                                                   ___ftmul@f3_as_product 0016  
                                                           dataLoger@logs 00C0  
                                                               ??_readADC 0003  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7A9C  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00AF  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 7768  
                                                              ___ftadd@f1 001B  
                                                              ___ftadd@f2 001E  
                                                          _tela_ajusteRTC 1D94  
                                                              ___ftge@ff1 0001  
                                                              ___ftge@ff2 0004  
                                                       __end_of_Lcd_Clear 6D30  
                                                        _etapaTesteBombas 0072  
                                                           ___rparam_used 000001  
                                                              ___ftdiv@f1 001B  
                                                              ___ftdiv@f2 001E  
                                                              ___ftdiv@f3 0025  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 0118  
                                                              _acaoBombas 307E  
                                                  __end_of_readEEPROM_ext 7518  
                                                     _telefoneSelecionado 00F7  
                                                              ___ftmul@f1 000C  
                                                              ___ftmul@f2 000F  
                                                    __size_ofi2_I2C_Start 000C  
                                                              ___fttol@f1 001B  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 25F2  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FC  
                                                            __pidataBANK0 6CA4  
                                                            __pidataBANK1 6CA0  
                                                      __size_of_dataLoger 0238  
                                                           __end_of_delay 6FC4  
                                                           __end_of_blink 4000  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 04AE  
                                                           __end_of_timer 2CB6  
                                                           __end_of_putch 6D44  
                                                          ?_intToFloatStr 00B5  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00BB  
                                                              ___lwtoft@c 0009  
                                                          _tela_menu_posi 0069  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 007E  
                                                          _Lcd_Set_Cursor 3B0E  
                                                                 ??_TIMER 0031  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0074  
                                                            __sec_partida 0070  
                                                    __end_of_atualizarLCD 3A48  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 0009  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00D9  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 1FCA  
                                                              __menu_posi 00DD  
                                                 __end_of_getSinalSIM800L 2B38  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                                __size_of_resetParametros 0028  
                                                      __end_ofi2_I2C_Read 6F8E  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 6D72  
                                                                 ?___ftge 0001  
                                                      __end_ofi2_I2C_Stop 6CC4  
                                         __size_of_configuraRegistradores 0056  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 6DA6  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 6D5A  
                                                              _flag_b_esc 0065  
                                                              _codigoErro 00F3  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 1230  
                                                        ?_writeEEPROM_ext 008C  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 002A  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                               ?___ftpack 0001  
                                                  __end_of_Lcd_Set_Cursor 3BD2  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                               ?___lwtoft 0009  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                          ?_verificarIntervaloTesteBombas 0001  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                              ??_Lcd_Init 0083  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 1D94  
                                                                 _SSPSTAT 000FC7  
                                                    __size_of_setShiftREG 0048  
                                                                 i2_delay 6EC0  
                                                               ?_enviaSMS 0001  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 0063  
                                                          _Lcd_Write_Char 7242  
                                                                 _Lcd_Cmd 6E68  
                                                              _dtl_jockey 0058  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 6F24  
                                                               _I2C_Start 6CD0  
                                                              _gsmOcupado 00F4  
                                                               _I2C_Write 6D02  
                                                         _timerReenvioSMS 00F6  
                                                    ??_configuraTelefones 00BF  
                                                             ?_acaoBombas 0001  
                                                       __end_of_getSerial 32BC  
                                                                 __Hparam 0000  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 6DC8  
                                                         _sp_estacionaria 00E0  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                         __size_of___ftge 009C  
                                                                 __b_mais 0060  
                                                         ??_intToFloatStr 00B7  
                                                                 ___awdiv 3DF6  
                                                                 ___ftadd 27C2  
                                                                 ___awmod 7868  
                                                                 ___ftdiv 37AC  
                                                                 ___lldiv 7976  
                                                         __size_of___wmul 002C  
                                                                 ___ftmul 34E0  
                                                                 ___fttol 36C4  
                                                                 ___lwdiv 75CE  
                                                                 ___lwmod 7470  
                                                           atualizarLCD@i 0090  
                                                                 __doprnt 011C  
                                                                 __pcinit 7704  
                                                              ??___ftpack 0006  
                                                         __size_of_memset 003A  
                                                                 _btPress 7694  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __tensao 004C  
                                                                 __ptext0 0DC8  
                                                                 __ptext1 72C6  
                                                                 __ptext2 25F2  
                                                                 __ptext3 1D94  
                                                                 __ptext4 7422  
                                                                 __ptext5 32BC  
                                                                 __ptext6 7284  
                                                                 __ptext7 21FE  
                                                                 __ptext8 6E40  
                                                                 __ptext9 73DA  
                                               criarCaracteresCGRAM@F2956 7A9D  
                                                         __size_of_printf 003C  
                                                              ??___lwtoft 000C  
                                                                 _dtl_dia 005D  
                                                                 _dtl_ano 005B  
                                                         __size_of_strchr 0040  
                                                                 _readADC 6DF0  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 005C  
                                                                 _dtl_min 0059  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7ACD  
                                                    readEEPROM16_ext@data 0091  
                                                                 _isdigit 6E18  
                                                       ??_acaoTesteBombas 00C8  
                                                        ___awmod@dividend 0080  
                                                         _ajusteSP_Bombas 1902  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 0055  
                                                  _configuraRegistradores 7518  
                                                                 _pressao 00F8  
                                                                 _sprintf 7392  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 6CF4  
                                                  __end_of_Lcd_Write_Char 7284  
                                                                 _strncmp 3E90  
                                                    end_of_initialization 7768  
                                                       __end_of_salvarLOG 3C96  
                                                              ??_enviaSMS 00BB  
                                                    __end_of_limparBuffer 6FFA  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 7470  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7A9C  
                                                     _timerTrocarTextoLcd 0075  
                                                              _timer$1321 0009  
                                                              _timer$1322 000B  
                                                              _timer$1323 000D  
                                                              _timer$1324 000F  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 0100  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1313 00D3  
                                                    _acaoTesteBombas$1308 00D1  
                                                    _acaoTesteBombas$1318 00D5  
                                                    _acaoTesteBombas$1292 00CF  
                                                    _acaoTesteBombas$2376 00CD  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00B5  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                                 strlen@s 0080  
                                                       ??_resetParametros 0081  
                                                              getSerial@i 00BC  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 00D2  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 6D1E  
                                                  __size_of_telaPrincipal 0212  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 0122  
                                                __end_of_tela_testeBombas 27C2  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                                         ?_Lcd_Write_Char 0001  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                  __size_of_aguardaBuffer 003C  
                                                       __size_of_BCDtoDEC 001A  
                                                   __end_of_drenarPressao 6F58  
                                                       __size_of_DECtoBCD 0042  
                                                             ___ftdiv@exp 0028  
                                                               _TXSTAbits 000FAC  
                                              __size_of_writeEEPROM16_ext 0022  
                                                  __size_of_clearShiftREG 0036  
                                                        _intensidadeSinal 00FF  
                                                             ___ftmul@exp 0015  
                                                         getSerial@length 00BA  
                                                            _atualizarLCD 3976  
                                                               _Lcd_Clear 6D1E  
                                                          __end_of___ftge 3DF6  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 6EC0  
                                                      intToFloatStr@F2544 01BC  
                                                        _Lcd_Write_String 7114  
                                                 __end_of_ajusteSP_Bombas 1B5C  
                                                          __end_of_memset 70DA  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 7202  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 6CE8  
                                                          __end_of_strchr 7242  
                                                          __end_of_strlen 75CE  
                                                          __end_of_strstr 3FC2  
                                                      _flagErroTransdutor 0073  
                                                     start_initialization 7704  
                                                             i2I2C_Read@a 0002  
                                                acaoTesteBombas@intervalo 00D7  
                                                   _tela_testeBombas$1418 00B7  
                                                      intToFloatStr@valor 00BF  
                                                _partidaBombaEstacionaria 3892  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                       ??_I2C_Master_Init 0091  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 21FE  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 307E  
                                                              ?_Lcd_Clear 0001  
                                                                ??___ftge 0007  
                                         __size_of_configurarEstacionaria 016E  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00F8  
                                                             __pdataBANK1 01BC  
                                                           _aguardaBuffer 718A  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                           ??_informacoes 00B5  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                       __size_of___ftpack 00C4  
                                                             __pbssCOMRAM 0044  
                                                       __size_of___lwtoft 0028  
                                                           _clearShiftREG 6FFA  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00B5  
                                                   lerTransdutor@_pressao 002B  
                                                     i2_getDS1307TimeDate 33CE  
                                                            _isdigit$1866 0081  
                                                        intToFloatStr@end 00B7  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                         ??_verificarIntervaloTesteBombas 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 1B5C  
                                                       __size_of_enviaSMS 034C  
                                                            ??_acaoBombas 00C8  
                                                        ___lwdiv@dividend 0080  
                                                     lerTransdutor@tensao 002E  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7A9C  
                                                         _acaoTesteBombas 091A  
                                                               _flagTexto 0074  
                                                               _flag_b_ok 005F  
                                                     configuraTelefones@i 00C3  
                                                                ?___awdiv 0080  
                                                                ?___ftadd 001B  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                                ?___ftdiv 001B  
                                                     __end_ofi2_I2C_Start 6CB8  
                                                                ?___lldiv 0080  
                                                                ?___ftmul 000C  
                                                                ?___fttol 001B  
                                                     __end_ofi2_I2C_Write 6D02  
                                                               _getSerial 31A0  
                                                   _timerEtapaComunicacao 00F5  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 0190  
                                                               _ajust_tel 00DB  
                                                            _limparBuffer 6FC4  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                        ?_ajusteSP_Bombas 0001  
                                                   __end_of_lerTransdutor 21FE  
                                                                ?_readADC 0001  
                                                             _flag_b_mais 0061  
                                                 ?_configuraRegistradores 0001  
                                                   __end_ofi2_I2C_Restart 6CD0  
                                                          __size_of_TIMER 0110  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 70DA  
                                                          ?_clearShiftREG 0001  
                                                                _I2C_Wait 6D72  
                                                                _I2C_Stop 6CDC  
                                                     __end_of_readButtons 7868  
                                                           ??_setShiftREG 0080  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 2CB6  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 6D8C  
                                                      __end_of_acaoBombas 31A0  
                                                     __end_of_informacoes 77EA  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003E  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 7284  
                                                          __size_of_timer 017E  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00DE  
                                                               _horimetro 004F  
                                       __end_ofcriarCaracteresCGRAM@F2956 7ACD  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                              ?_dataLoger 0001  
                                                               _salvarLOG 3BD2  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E3  
                                                               _validaRTC 7422  
                                                         _resetParametros 6E40  
                                                        _horario_de_teste 00E6  
                                             __size_of_configuraTelefones 0386  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                                i2u553_40 3D34  
                                                                i2u641_40 2878  
                                                                i2u635_40 2808  
                                                                i2u660_40 3516  
                                                                i2u556_40 6F7A  
                                                                i2u549_40 3CA8  
                                                                i2u645_40 28BE  
                                                                i2u557_45 6F7E  
                                                                i2u638_40 2836  
                                                                i2u910_47 6DF6  
                                                                i2u655_40 37E2  
                                                                i2u671_40 3752  
                                                                i2u648_40 28F8  
                                                                i2u672_40 377C  
                                                                i2u752_40 2BF4  
                                                                i2u753_40 2BF8  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u668_40 3700  
                                                                i2u668_45 36F6  
                                                                i2u909_47 6ECC  
                                                                i2u678_40 2050  
                                                             ??_Lcd_Clear 0083  
                                                               _sp_jockey 00E2  
                                                     _dtl_posi_visualizar 0053  
                                                              ?_getSerial 00B5  
                                                            setShiftREG@i 0081  
                                            __end_of_criarCaracteresCGRAM 3B0E  
                                                   __end_of_intToFloatStr 7A9C  
                                                                _RTC_Init 7030  
                                          __end_of_configuraRegistradores 756E  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               _totalLogs 0054  
                                                        _dtl_estacionaria 0056  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                               _tempo_limite_estacionaria 00E5  
                                                                _Lcd_Init 78EE  
                                                       i2_writeEEPROM_ext 714E  
                                                               _writeChar 6D10  
                                                                _Lcd_Port 7308  
                                                       ?_tela_testeBombas 0001  
                                                         _tel_selecionado 006B  
                                                               copy_data0 7718  
                                                               copy_data1 7738  
                                                        _readEEPROM16_ext 7068  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C2  
                                                      ??_tela_testeBombas 00B5  
                                                __end_of_Lcd_Write_String 714E  
                                                             _dtl_posicao 00FA  
                                                        __size_ofi2_delay 0032  
                                                     __end_of_setShiftREG 7422  
                                                 __end_of_acaoTesteBombas 0DC8  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 6CAC  
                                                             i2_I2C_Write 6CF4  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00E8  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                        __size_of___awdiv 009A  
                                                        __size_of___ftadd 01D0  
                                                        __size_of___awmod 0086  
                                                        __size_of___ftdiv 00E6  
                                                __size_of_getSinalSIM800L 01A6  
                                                        __size_of___lldiv 0092  
                                                        __size_of___ftmul 00F8  
                                                        __size_of___fttol 00E8  
                                                                __b_menos 0062  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 77EA  
                                                                ___ftpack 3C96  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                         ??_clearShiftREG 0080  
                                                        __size_of_btPress 0070  
                                              ??_partidaBombaEstacionaria 0083  
                                                         intToFloatStr@pr 00C0  
                                                                ___lwtoft 6DC8  
                                                             _informacoes 7776  
                                                    _ajusteSP_Bombas$2378 00C2  
                                                            ?_I2C_Restart 0001  
                                                                _base_sec 0071  
                                                         _I2C_Master_Init 7630  
                                                        __size_of_readADC 0028  
                                               __end_ofi2_writeEEPROM_ext 718A  
                                                          lerParametros@i 0095  
                                                                __sec_aux 006F  
                                                           _tempo_partida 006D  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 2F58  
                                                                __ptext11 7068  
                                                                __ptext20 2CB6  
                                                                __ptext12 7776  
                                                                __ptext21 1230  
                                                                __ptext13 2992  
                                                                __ptext30 091A  
                                                                __ptext22 2410  
                                                                __ptext14 31A0  
                                                                __ptext31 3BD2  
                                                                __ptext23 7518  
                                                                __ptext15 35D8  
                                                                __ptext40 7392  
                                                                __ptext32 734C  
                                                                __ptext24 3976  
                                                                __ptext16 2E24  
                                                                __ptext41 6FFA  
                                                                __ptext33 74C2  
                                                                __ptext25 7114  
                                                                __ptext17 6D8C  
                                                                __ptext50 6E18  
                                                                __ptext42 7694  
                                                                __ptext34 6CE8  
                                                                __ptext26 7242  
                                                                __ptext18 1B5C  
                                                                __ptext51 6E94  
                                                                __ptext43 307E  
                                                                __ptext35 70DA  
                                                                __ptext27 3B0E  
                                                                __ptext19 3A48  
                                                                __ptext60 7202  
                                                                __ptext52 7470  
                                                                __ptext44 3892  
                                                                __ptext36 7A08  
                                                                __ptext28 1902  
                                                                __ptext61 6F8E  
                                                                __ptext53 75CE  
                                                                __ptext45 15B6  
                                                                __ptext37 7868  
                                                                __ptext29 3FC2  
                                                                __ptext70 7308  
                                                                __ptext62 7030  
                                                                __ptext54 6FC4  
                                                                __ptext46 6D10  
                                                                __ptext38 3DF6  
                                                                __ptext71 7630  
                                                                __ptext63 6D02  
                                                                __ptext55 70A0  
                                                                __ptext47 71C6  
                                                                __ptext39 6F24  
                                                                __ptext80 6DA6  
                                                                __ptext72 7976  
                                                                __ptext64 6CDC  
                                                                __ptext56 718A  
                                                                __ptext48 011C  
                                                                __ptext81 714E  
                                                                __ptext65 6CD0  
                                                                __ptext57 3F2A  
                                                                __ptext49 6D30  
                                                                __ptext90 6DC8  
                                                                __ptext82 6EC0  
                                                                __ptext74 2B38  
                                                                __ptext66 6D72  
                                                                __ptext58 3E90  
                                                                __ptext91 36C4  
                                                                __ptext83 6CF4  
                                                                __ptext75 33CE  
                                                                __ptext67 78EE  
                                                                __ptext59 756E  
                                                                __ptext92 34E0  
                                                                __ptext84 6CB8  
                                                                __ptext76 6CC4  
                                                                __ptext68 6D1E  
                                                                __ptext93 3D5A  
                                                                __ptext85 6CAC  
                                                                __ptext77 6F58  
                                                                __ptext69 6E68  
                                                                __ptext94 37AC  
                                                                __ptext86 6D5A  
                                                                __ptext78 6D44  
                                                                __ptext95 27C2  
                                                                __ptext87 77EA  
                                                                __ptext79 6EF2  
                                                                __ptext96 3C96  
                                                                __ptext88 1FCA  
                                                                __ptext97 0000  
                                                                __ptext89 6DF0  
                                                                _ajst_rtc 0068  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00D8  
                                                    getSinalSIM800L@sinal 00C8  
                                                 __end_of_resetParametros 6E68  
                                                                _enviaSMS 15B6  
                                                                _dtl_hora 005A  
                                                        __size_of_strncmp 009A  
                                                     _comunicarTeste$1193 00BD  
                                                       ??_writeEEPROM_ext 008D  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 0468  
                                                             ??_dataLoger 00B5  
                                                     _status_estacionaria 00FB  
                                                              strncmp@len 008A  
                                                        _timerTesteBombas 00D9  
                                                                blink@end 0083  
                                                                _tel_posi 00DC  
                                               _criarCaracteresCGRAM$1375 00B7  
                                                                int$flags 007D  
                                                                atoi@sign 00C3  
                                                             ??_getSerial 00B8  
                                                      _telaPrincipal$2377 00C2  
                                                  __size_of_drenarPressao 0034  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 6F58  
                                                              i2_I2C_Wait 6D5A  
                                                              i2_I2C_Stop 6CB8  
                                                             _setShiftREG 73DA  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 6D44  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                                intlevel2 0006  
                                                               sprintf@ap 00AF  
                                                               sprintf@pb 00B1  
                                                               sprintf@wh 00A1  
                                                       _ocorrendoIncendio 00F2  
                                                    _criarCaracteresCGRAM 3A48  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 01E2  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1443 00BC  
                                                          _dataLoger$1437 00BA  
                                                          _dataLoger$1448 00BE  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 2E24  
                                                       _setDS1307TimeDate 32BC  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00B7  
                                                            getSerial@ret 00BD  
                                                            getSerial@str 00B5  
                                                 __end_of_I2C_Master_Init 7694  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 6EF2  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                             _qtd_leitura 006E  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00C6  
                                                            _sp_principal 00E1  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                  __size_of_lerParametros 0126  
                                                   ?_criarCaracteresCGRAM 0001  
                                                        ?_resetParametros 0001  
                                                           _sub_menu_posi 006A  
                                                             _option_posi 00DF  
                                                           _drenarPressao 6F24  
                                         _tempo_limite_teste_estacionaria 00E4  
                                               __end_of_getDS1307TimeDate 2F58  
                                               __end_of_setDS1307TimeDate 33CE  
