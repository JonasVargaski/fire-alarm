

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 25 14:05:56 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   116                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC18F452 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     
   153                           	psect	idataBANK0
   154  006C92                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _pressao
   158  006C92  0062               	dw	98
   159                           
   160                           ;initializer for _dtl_posicao
   161  006C94  3C                 	db	60
   162                           
   163                           ;initializer for _status_estacionaria
   164  006C95  01                 	db	1
   165                           
   166                           ;initializer for _status_principal
   167  006C96  01                 	db	1
   168                           
   169                           ;initializer for _status_jockey
   170  006C97  01                 	db	1
   171                           
   172                           ;initializer for _timerVerificarSinal
   173  006C98  05                 	db	5
   174                           
   175                           ;initializer for _intensidadeSinal
   176  006C99  20                 	db	32
   177                           
   178                           	psect	idataBANK1
   179  006C8E                     __pidataBANK1:
   180                           	opt stack 0
   181                           
   182                           ;initializer for intToFloatStr@F2544
   183  006C8E  20                 	db	32
   184  006C8F  20                 	db	32
   185  006C90  20                 	db	32
   186  006C91  20                 	db	32
   187                           
   188                           	psect	mediumconst
   189  007A9C                     __pmediumconst:
   190                           	opt stack 0
   191  007A9C  00                 	db	0
   192  007A9D                     criarCaracteresCGRAM@F2955:
   193                           	opt stack 0
   194  007A9D  00                 	db	0
   195  007A9E  1F                 	db	31
   196  007A9F  0E                 	db	14
   197  007AA0  04                 	db	4
   198  007AA1  04                 	db	4
   199  007AA2  04                 	db	4
   200  007AA3  04                 	db	4
   201  007AA4  04                 	db	4
   202  007AA5  00                 	db	0
   203  007AA6  00                 	db	0
   204  007AA7  00                 	db	0
   205  007AA8  00                 	db	0
   206  007AA9  00                 	db	0
   207  007AAA  10                 	db	16
   208  007AAB  10                 	db	16
   209  007AAC  10                 	db	16
   210  007AAD  00                 	db	0
   211  007AAE  00                 	db	0
   212  007AAF  00                 	db	0
   213  007AB0  04                 	db	4
   214  007AB1  04                 	db	4
   215  007AB2  14                 	db	20
   216  007AB3  14                 	db	20
   217  007AB4  14                 	db	20
   218  007AB5  00                 	db	0
   219  007AB6  01                 	db	1
   220  007AB7  01                 	db	1
   221  007AB8  05                 	db	5
   222  007AB9  05                 	db	5
   223  007ABA  15                 	db	21
   224  007ABB  15                 	db	21
   225  007ABC  15                 	db	21
   226  007ABD  0A                 	db	10
   227  007ABE  0A                 	db	10
   228  007ABF  1F                 	db	31
   229  007AC0  11                 	db	17
   230  007AC1  11                 	db	17
   231  007AC2  0E                 	db	14
   232  007AC3  04                 	db	4
   233  007AC4  04                 	db	4
   234  007AC5  00                 	db	0
   235  007AC6  00                 	db	0
   236  007AC7  00                 	db	0
   237  007AC8  00                 	db	0
   238  007AC9  00                 	db	0
   239  007ACA  00                 	db	0
   240  007ACB  00                 	db	0
   241  007ACC  00                 	db	0
   242  007ACD                     __end_ofcriarCaracteresCGRAM@F2955:
   243                           	opt stack 0
   244  007ACD                     _dpowers:
   245                           	opt stack 0
   246  007ACD  0001               	dw	1
   247  007ACF  000A               	dw	10
   248  007AD1  0064               	dw	100
   249  007AD3  03E8               	dw	1000
   250  007AD5  2710               	dw	10000
   251  007AD7                     __end_of_dpowers:
   252                           	opt stack 0
   253  0000                     _SSPBUF	set	4041
   254  0000                     _SSPSTAT	set	4039
   255  0000                     _SSPADD	set	4040
   256  0000                     _SSPCON2	set	4037
   257  0000                     _SSPCON1	set	4038
   258  0000                     _RCREG	set	4014
   259  0000                     _TMR0L	set	4054
   260  0000                     _TMR0H	set	4055
   261  0000                     _PORTCbits	set	3970
   262  0000                     _PORTDbits	set	3971
   263  0000                     _PORTBbits	set	3969
   264  0000                     _PORTEbits	set	3972
   265  0000                     _TXREG	set	4013
   266  0000                     _ADRESL	set	4035
   267  0000                     _ADRESH	set	4036
   268  0000                     _ADCON0bits	set	4034
   269  0000                     _TRISEbits	set	3990
   270  0000                     _TRISBbits	set	3987
   271  0000                     _PIE1bits	set	3997
   272  0000                     _PIR1bits	set	3998
   273  0000                     _INTCONbits	set	4082
   274  0000                     _SPBRG	set	4015
   275  0000                     _RCSTAbits	set	4011
   276  0000                     _TXSTAbits	set	4012
   277  0000                     _TRISCbits	set	3988
   278  0000                     _TRISDbits	set	3989
   279  0000                     _INTCON	set	4082
   280  0000                     _T0CON	set	4053
   281  0000                     _PORTAbits	set	3968
   282  0000                     _TRISAbits	set	3986
   283  0000                     _ADCON1	set	4033
   284  0000                     _ADCON0	set	4034
   285  0000                     _ACKEN	set	32300
   286  0000                     _ACKDT	set	32301
   287  0000                     _RCEN	set	32299
   288  0000                     _PEN	set	32298
   289  0000                     _RSEN	set	32297
   290  0000                     _SEN	set	32296
   291  0000                     _RCIF	set	31989
   292  0000                     _TMR0IF	set	32658
   293  007AD7                     STR_14:
   294  007AD7  54                 	db	84	;'T'
   295  007AD8  45                 	db	69	;'E'
   296  007AD9  43                 	db	67	;'C'
   297  007ADA  48                 	db	72	;'H'
   298  007ADB  4E                 	db	78	;'N'
   299  007ADC  4F                 	db	79	;'O'
   300  007ADD  57                 	db	87	;'W'
   301  007ADE  20                 	db	32
   302  007ADF  53                 	db	83	;'S'
   303  007AE0  69                 	db	105	;'i'
   304  007AE1  73                 	db	115	;'s'
   305  007AE2  74                 	db	116	;'t'
   306  007AE3  65                 	db	101	;'e'
   307  007AE4  6D                 	db	109	;'m'
   308  007AE5  61                 	db	97	;'a'
   309  007AE6  73                 	db	115	;'s'
   310  007AE7  20                 	db	32
   311  007AE8  65                 	db	101	;'e'
   312  007AE9  6D                 	db	109	;'m'
   313  007AEA  62                 	db	98	;'b'
   314  007AEB  61                 	db	97	;'a'
   315  007AEC  72                 	db	114	;'r'
   316  007AED  63                 	db	99	;'c'
   317  007AEE  61                 	db	97	;'a'
   318  007AEF  64                 	db	100	;'d'
   319  007AF0  6F                 	db	111	;'o'
   320  007AF1  73                 	db	115	;'s'
   321  007AF2  0D                 	db	13
   322  007AF3  0A                 	db	10
   323  007AF4  0D                 	db	13
   324  007AF5  0A                 	db	10
   325  007AF6  54                 	db	84	;'T'
   326  007AF7  65                 	db	101	;'e'
   327  007AF8  73                 	db	115	;'s'
   328  007AF9  74                 	db	116	;'t'
   329  007AFA  65                 	db	101	;'e'
   330  007AFB  20                 	db	32
   331  007AFC  6D                 	db	109	;'m'
   332  007AFD  61                 	db	97	;'a'
   333  007AFE  6E                 	db	110	;'n'
   334  007AFF  75                 	db	117	;'u'
   335  007B00  61                 	db	97	;'a'
   336  007B01  6C                 	db	108	;'l'
   337  007B02  20                 	db	32
   338  007B03  64                 	db	100	;'d'
   339  007B04  65                 	db	101	;'e'
   340  007B05  20                 	db	32
   341  007B06  63                 	db	99	;'c'
   342  007B07  6F                 	db	111	;'o'
   343  007B08  6D                 	db	109	;'m'
   344  007B09  75                 	db	117	;'u'
   345  007B0A  6E                 	db	110	;'n'
   346  007B0B  69                 	db	105	;'i'
   347  007B0C  63                 	db	99	;'c'
   348  007B0D  61                 	db	97	;'a'
   349  007B0E  63                 	db	99	;'c'
   350  007B0F  61                 	db	97	;'a'
   351  007B10  6F                 	db	111	;'o'
   352  007B11  2E                 	db	46
   353  007B12  0D                 	db	13
   354  007B13  0A                 	db	10
   355  007B14  44                 	db	68	;'D'
   356  007B15  61                 	db	97	;'a'
   357  007B16  74                 	db	116	;'t'
   358  007B17  61                 	db	97	;'a'
   359  007B18  3A                 	db	58	;':'
   360  007B19  20                 	db	32
   361  007B1A  25                 	db	37
   362  007B1B  30                 	db	48	;'0'
   363  007B1C  32                 	db	50	;'2'
   364  007B1D  64                 	db	100	;'d'
   365  007B1E  2F                 	db	47
   366  007B1F  25                 	db	37
   367  007B20  30                 	db	48	;'0'
   368  007B21  32                 	db	50	;'2'
   369  007B22  64                 	db	100	;'d'
   370  007B23  2F                 	db	47
   371  007B24  25                 	db	37
   372  007B25  30                 	db	48	;'0'
   373  007B26  32                 	db	50	;'2'
   374  007B27  64                 	db	100	;'d'
   375  007B28  20                 	db	32
   376  007B29  25                 	db	37
   377  007B2A  30                 	db	48	;'0'
   378  007B2B  32                 	db	50	;'2'
   379  007B2C  64                 	db	100	;'d'
   380  007B2D  3A                 	db	58	;':'
   381  007B2E  25                 	db	37
   382  007B2F  30                 	db	48	;'0'
   383  007B30  32                 	db	50	;'2'
   384  007B31  64                 	db	100	;'d'
   385  007B32  3A                 	db	58	;':'
   386  007B33  25                 	db	37
   387  007B34  30                 	db	48	;'0'
   388  007B35  32                 	db	50	;'2'
   389  007B36  64                 	db	100	;'d'
   390  007B37  0D                 	db	13
   391  007B38  0A                 	db	10
   392  007B39  0D                 	db	13
   393  007B3A  0A                 	db	10
   394  007B3B  0D                 	db	13
   395  007B3C  0A                 	db	10
   396  007B3D  56                 	db	86	;'V'
   397  007B3E  65                 	db	101	;'e'
   398  007B3F  72                 	db	114	;'r'
   399  007B40  73                 	db	115	;'s'
   400  007B41  61                 	db	97	;'a'
   401  007B42  6F                 	db	111	;'o'
   402  007B43  20                 	db	32
   403  007B44  64                 	db	100	;'d'
   404  007B45  6F                 	db	111	;'o'
   405  007B46  20                 	db	32
   406  007B47  73                 	db	115	;'s'
   407  007B48  69                 	db	105	;'i'
   408  007B49  73                 	db	115	;'s'
   409  007B4A  74                 	db	116	;'t'
   410  007B4B  65                 	db	101	;'e'
   411  007B4C  6D                 	db	109	;'m'
   412  007B4D  61                 	db	97	;'a'
   413  007B4E  3A                 	db	58	;':'
   414  007B4F  20                 	db	32
   415  007B50  25                 	db	37
   416  007B51  73                 	db	115	;'s'
   417  007B52  0D                 	db	13
   418  007B53  0A                 	db	10
   419  007B54  00                 	db	0
   420  007B55                     STR_26:
   421  007B55  54                 	db	84	;'T'
   422  007B56  45                 	db	69	;'E'
   423  007B57  53                 	db	83	;'S'
   424  007B58  54                 	db	84	;'T'
   425  007B59  45                 	db	69	;'E'
   426  007B5A  20                 	db	32
   427  007B5B  44                 	db	68	;'D'
   428  007B5C  45                 	db	69	;'E'
   429  007B5D  20                 	db	32
   430  007B5E  42                 	db	66	;'B'
   431  007B5F  4F                 	db	79	;'O'
   432  007B60  4D                 	db	77	;'M'
   433  007B61  42                 	db	66	;'B'
   434  007B62  41                 	db	65	;'A'
   435  007B63  53                 	db	83	;'S'
   436  007B64  20                 	db	32
   437  007B65  52                 	db	82	;'R'
   438  007B66  45                 	db	69	;'E'
   439  007B67  41                 	db	65	;'A'
   440  007B68  4C                 	db	76	;'L'
   441  007B69  49                 	db	73	;'I'
   442  007B6A  5A                 	db	90	;'Z'
   443  007B6B  41                 	db	65	;'A'
   444  007B6C  44                 	db	68	;'D'
   445  007B6D  4F                 	db	79	;'O'
   446  007B6E  0D                 	db	13
   447  007B6F  0A                 	db	10
   448  007B70  45                 	db	69	;'E'
   449  007B71  4D                 	db	77	;'M'
   450  007B72  20                 	db	32
   451  007B73  25                 	db	37
   452  007B74  30                 	db	48	;'0'
   453  007B75  32                 	db	50	;'2'
   454  007B76  64                 	db	100	;'d'
   455  007B77  3A                 	db	58	;':'
   456  007B78  25                 	db	37
   457  007B79  30                 	db	48	;'0'
   458  007B7A  32                 	db	50	;'2'
   459  007B7B  64                 	db	100	;'d'
   460  007B7C  3A                 	db	58	;':'
   461  007B7D  25                 	db	37
   462  007B7E  30                 	db	48	;'0'
   463  007B7F  32                 	db	50	;'2'
   464  007B80  64                 	db	100	;'d'
   465  007B81  20                 	db	32
   466  007B82  25                 	db	37
   467  007B83  30                 	db	48	;'0'
   468  007B84  32                 	db	50	;'2'
   469  007B85  64                 	db	100	;'d'
   470  007B86  2F                 	db	47
   471  007B87  25                 	db	37
   472  007B88  30                 	db	48	;'0'
   473  007B89  32                 	db	50	;'2'
   474  007B8A  64                 	db	100	;'d'
   475  007B8B  2F                 	db	47
   476  007B8C  25                 	db	37
   477  007B8D  30                 	db	48	;'0'
   478  007B8E  32                 	db	50	;'2'
   479  007B8F  64                 	db	100	;'d'
   480  007B90  0D                 	db	13
   481  007B91  0A                 	db	10
   482  007B92  4A                 	db	74	;'J'
   483  007B93  4F                 	db	79	;'O'
   484  007B94  43                 	db	67	;'C'
   485  007B95  4B                 	db	75	;'K'
   486  007B96  45                 	db	69	;'E'
   487  007B97  59                 	db	89	;'Y'
   488  007B98  3A                 	db	58	;':'
   489  007B99  20                 	db	32
   490  007B9A  25                 	db	37
   491  007B9B  73                 	db	115	;'s'
   492  007B9C  0D                 	db	13
   493  007B9D  0A                 	db	10
   494  007B9E  50                 	db	80	;'P'
   495  007B9F  52                 	db	82	;'R'
   496  007BA0  49                 	db	73	;'I'
   497  007BA1  4E                 	db	78	;'N'
   498  007BA2  43                 	db	67	;'C'
   499  007BA3  49                 	db	73	;'I'
   500  007BA4  50                 	db	80	;'P'
   501  007BA5  41                 	db	65	;'A'
   502  007BA6  4C                 	db	76	;'L'
   503  007BA7  3A                 	db	58	;':'
   504  007BA8  20                 	db	32
   505  007BA9  25                 	db	37
   506  007BAA  73                 	db	115	;'s'
   507  007BAB  0D                 	db	13
   508  007BAC  0A                 	db	10
   509  007BAD  43                 	db	67	;'C'
   510  007BAE  4F                 	db	79	;'O'
   511  007BAF  4D                 	db	77	;'M'
   512  007BB0  42                 	db	66	;'B'
   513  007BB1  55                 	db	85	;'U'
   514  007BB2  53                 	db	83	;'S'
   515  007BB3  54                 	db	84	;'T'
   516  007BB4  41                 	db	65	;'A'
   517  007BB5  4F                 	db	79	;'O'
   518  007BB6  3A                 	db	58	;':'
   519  007BB7  20                 	db	32
   520  007BB8  25                 	db	37
   521  007BB9  73                 	db	115	;'s'
   522  007BBA  0D                 	db	13
   523  007BBB  0A                 	db	10
   524  007BBC  00                 	db	0
   525  007BBD                     STR_25:
   526  007BBD  44                 	db	68	;'D'
   527  007BBE  49                 	db	73	;'I'
   528  007BBF  53                 	db	83	;'S'
   529  007BC0  50                 	db	80	;'P'
   530  007BC1  41                 	db	65	;'A'
   531  007BC2  52                 	db	82	;'R'
   532  007BC3  4F                 	db	79	;'O'
   533  007BC4  20                 	db	32
   534  007BC5  41                 	db	65	;'A'
   535  007BC6  4C                 	db	76	;'L'
   536  007BC7  41                 	db	65	;'A'
   537  007BC8  52                 	db	82	;'R'
   538  007BC9  4D                 	db	77	;'M'
   539  007BCA  45                 	db	69	;'E'
   540  007BCB  20                 	db	32
   541  007BCC  44                 	db	68	;'D'
   542  007BCD  45                 	db	69	;'E'
   543  007BCE  20                 	db	32
   544  007BCF  49                 	db	73	;'I'
   545  007BD0  4E                 	db	78	;'N'
   546  007BD1  43                 	db	67	;'C'
   547  007BD2  45                 	db	69	;'E'
   548  007BD3  4E                 	db	78	;'N'
   549  007BD4  44                 	db	68	;'D'
   550  007BD5  49                 	db	73	;'I'
   551  007BD6  4F                 	db	79	;'O'
   552  007BD7  0D                 	db	13
   553  007BD8  0A                 	db	10
   554  007BD9  45                 	db	69	;'E'
   555  007BDA  4D                 	db	77	;'M'
   556  007BDB  20                 	db	32
   557  007BDC  25                 	db	37
   558  007BDD  30                 	db	48	;'0'
   559  007BDE  32                 	db	50	;'2'
   560  007BDF  64                 	db	100	;'d'
   561  007BE0  3A                 	db	58	;':'
   562  007BE1  25                 	db	37
   563  007BE2  30                 	db	48	;'0'
   564  007BE3  32                 	db	50	;'2'
   565  007BE4  64                 	db	100	;'d'
   566  007BE5  3A                 	db	58	;':'
   567  007BE6  25                 	db	37
   568  007BE7  30                 	db	48	;'0'
   569  007BE8  32                 	db	50	;'2'
   570  007BE9  64                 	db	100	;'d'
   571  007BEA  20                 	db	32
   572  007BEB  25                 	db	37
   573  007BEC  30                 	db	48	;'0'
   574  007BED  32                 	db	50	;'2'
   575  007BEE  64                 	db	100	;'d'
   576  007BEF  2F                 	db	47
   577  007BF0  25                 	db	37
   578  007BF1  30                 	db	48	;'0'
   579  007BF2  32                 	db	50	;'2'
   580  007BF3  64                 	db	100	;'d'
   581  007BF4  2F                 	db	47
   582  007BF5  25                 	db	37
   583  007BF6  30                 	db	48	;'0'
   584  007BF7  32                 	db	50	;'2'
   585  007BF8  64                 	db	100	;'d'
   586  007BF9  0D                 	db	13
   587  007BFA  0A                 	db	10
   588  007BFB  00                 	db	0
   589  007BFC                     STR_75:
   590  007BFC  44                 	db	68	;'D'
   591  007BFD  61                 	db	97	;'a'
   592  007BFE  74                 	db	116	;'t'
   593  007BFF  61                 	db	97	;'a'
   594  007C00  3A                 	db	58	;':'
   595  007C01  20                 	db	32
   596  007C02  25                 	db	37
   597  007C03  30                 	db	48	;'0'
   598  007C04  32                 	db	50	;'2'
   599  007C05  64                 	db	100	;'d'
   600  007C06  2F                 	db	47
   601  007C07  25                 	db	37
   602  007C08  30                 	db	48	;'0'
   603  007C09  32                 	db	50	;'2'
   604  007C0A  64                 	db	100	;'d'
   605  007C0B  2F                 	db	47
   606  007C0C  25                 	db	37
   607  007C0D  30                 	db	48	;'0'
   608  007C0E  32                 	db	50	;'2'
   609  007C0F  64                 	db	100	;'d'
   610  007C10  20                 	db	32
   611  007C11  25                 	db	37
   612  007C12  30                 	db	48	;'0'
   613  007C13  32                 	db	50	;'2'
   614  007C14  64                 	db	100	;'d'
   615  007C15  3A                 	db	58	;':'
   616  007C16  25                 	db	37
   617  007C17  30                 	db	48	;'0'
   618  007C18  32                 	db	50	;'2'
   619  007C19  64                 	db	100	;'d'
   620  007C1A  00                 	db	0
   621  007C1B                     STR_55:
   622  007C1B  20                 	db	32
   623  007C1C  25                 	db	37
   624  007C1D  30                 	db	48	;'0'
   625  007C1E  32                 	db	50	;'2'
   626  007C1F  64                 	db	100	;'d'
   627  007C20  3A                 	db	58	;':'
   628  007C21  25                 	db	37
   629  007C22  30                 	db	48	;'0'
   630  007C23  32                 	db	50	;'2'
   631  007C24  64                 	db	100	;'d'
   632  007C25  3A                 	db	58	;':'
   633  007C26  25                 	db	37
   634  007C27  30                 	db	48	;'0'
   635  007C28  32                 	db	50	;'2'
   636  007C29  64                 	db	100	;'d'
   637  007C2A  20                 	db	32
   638  007C2B  25                 	db	37
   639  007C2C  30                 	db	48	;'0'
   640  007C2D  32                 	db	50	;'2'
   641  007C2E  64                 	db	100	;'d'
   642  007C2F  2F                 	db	47
   643  007C30  25                 	db	37
   644  007C31  30                 	db	48	;'0'
   645  007C32  32                 	db	50	;'2'
   646  007C33  64                 	db	100	;'d'
   647  007C34  00                 	db	0
   648  007C35                     STR_59:
   649  007C35  20                 	db	32
   650  007C36  2A                 	db	42
   651  007C37  66                 	db	102	;'f'
   652  007C38  61                 	db	97	;'a'
   653  007C39  6C                 	db	108	;'l'
   654  007C3A  68                 	db	104	;'h'
   655  007C3B  61                 	db	97	;'a'
   656  007C3C  20                 	db	32
   657  007C3D  42                 	db	66	;'B'
   658  007C3E  2E                 	db	46
   659  007C3F  20                 	db	32
   660  007C40  70                 	db	112	;'p'
   661  007C41  72                 	db	114	;'r'
   662  007C42  69                 	db	105	;'i'
   663  007C43  6E                 	db	110	;'n'
   664  007C44  63                 	db	99	;'c'
   665  007C45  69                 	db	105	;'i'
   666  007C46  70                 	db	112	;'p'
   667  007C47  61                 	db	97	;'a'
   668  007C48  6C                 	db	108	;'l'
   669  007C49  00                 	db	0
   670  007C4A                     STR_60:
   671  007C4A  20                 	db	32
   672  007C4B  2A                 	db	42
   673  007C4C  66                 	db	102	;'f'
   674  007C4D  61                 	db	97	;'a'
   675  007C4E  6C                 	db	108	;'l'
   676  007C4F  68                 	db	104	;'h'
   677  007C50  61                 	db	97	;'a'
   678  007C51  20                 	db	32
   679  007C52  42                 	db	66	;'B'
   680  007C53  2E                 	db	46
   681  007C54  20                 	db	32
   682  007C55  63                 	db	99	;'c'
   683  007C56  6F                 	db	111	;'o'
   684  007C57  6D                 	db	109	;'m'
   685  007C58  62                 	db	98	;'b'
   686  007C59  75                 	db	117	;'u'
   687  007C5A  73                 	db	115	;'s'
   688  007C5B  74                 	db	116	;'t'
   689  007C5C  61                 	db	97	;'a'
   690  007C5D  6F                 	db	111	;'o'
   691  007C5E  00                 	db	0
   692  007C5F                     STR_69:
   693  007C5F  23                 	db	35
   694  007C60  50                 	db	80	;'P'
   695  007C61  72                 	db	114	;'r'
   696  007C62  6F                 	db	111	;'o'
   697  007C63  78                 	db	120	;'x'
   698  007C64  69                 	db	105	;'i'
   699  007C65  6D                 	db	109	;'m'
   700  007C66  6F                 	db	111	;'o'
   701  007C67  20                 	db	32
   702  007C68  65                 	db	101	;'e'
   703  007C69  6D                 	db	109	;'m'
   704  007C6A  20                 	db	32
   705  007C6B  25                 	db	37
   706  007C6C  32                 	db	50	;'2'
   707  007C6D  64                 	db	100	;'d'
   708  007C6E  20                 	db	32
   709  007C6F  64                 	db	100	;'d'
   710  007C70  69                 	db	105	;'i'
   711  007C71  61                 	db	97	;'a'
   712  007C72  73                 	db	115	;'s'
   713  007C73  00                 	db	0
   714  007C74                     STR_37:
   715  007C74  44                 	db	68	;'D'
   716  007C75  65                 	db	101	;'e'
   717  007C76  73                 	db	115	;'s'
   718  007C77  70                 	db	112	;'p'
   719  007C78  72                 	db	114	;'r'
   720  007C79  65                 	db	101	;'e'
   721  007C7A  73                 	db	115	;'s'
   722  007C7B  73                 	db	115	;'s'
   723  007C7C  75                 	db	117	;'u'
   724  007C7D  72                 	db	114	;'r'
   725  007C7E  69                 	db	105	;'i'
   726  007C7F  7A                 	db	122	;'z'
   727  007C80  61                 	db	97	;'a'
   728  007C81  6E                 	db	110	;'n'
   729  007C82  64                 	db	100	;'d'
   730  007C83  6F                 	db	111	;'o'
   731  007C84  2E                 	db	46
   732  007C85  2E                 	db	46
   733  007C86  2E                 	db	46
   734  007C87  00                 	db	0
   735  007C88                     STR_61:
   736  007C88  20                 	db	32
   737  007C89  41                 	db	65	;'A'
   738  007C8A  4C                 	db	76	;'L'
   739  007C8B  45                 	db	69	;'E'
   740  007C8C  52                 	db	82	;'R'
   741  007C8D  54                 	db	84	;'T'
   742  007C8E  41                 	db	65	;'A'
   743  007C8F  20                 	db	32
   744  007C90  44                 	db	68	;'D'
   745  007C91  45                 	db	69	;'E'
   746  007C92  20                 	db	32
   747  007C93  49                 	db	73	;'I'
   748  007C94  4E                 	db	78	;'N'
   749  007C95  43                 	db	67	;'C'
   750  007C96  45                 	db	69	;'E'
   751  007C97  4E                 	db	78	;'N'
   752  007C98  44                 	db	68	;'D'
   753  007C99  49                 	db	73	;'I'
   754  007C9A  4F                 	db	79	;'O'
   755  007C9B  00                 	db	0
   756  007C9C                     STR_57:
   757  007C9C  20                 	db	32
   758  007C9D  2A                 	db	42
   759  007C9E  66                 	db	102	;'f'
   760  007C9F  61                 	db	97	;'a'
   761  007CA0  6C                 	db	108	;'l'
   762  007CA1  68                 	db	104	;'h'
   763  007CA2  61                 	db	97	;'a'
   764  007CA3  20                 	db	32
   765  007CA4  76                 	db	118	;'v'
   766  007CA5  61                 	db	97	;'a'
   767  007CA6  6C                 	db	108	;'l'
   768  007CA7  2E                 	db	46
   769  007CA8  20                 	db	32
   770  007CA9  6C                 	db	108	;'l'
   771  007CAA  61                 	db	97	;'a'
   772  007CAB  64                 	db	100	;'d'
   773  007CAC  72                 	db	114	;'r'
   774  007CAD  61                 	db	97	;'a'
   775  007CAE  6F                 	db	111	;'o'
   776  007CAF  00                 	db	0
   777  007CB0                     STR_70:
   778  007CB0  49                 	db	73	;'I'
   779  007CB1  4E                 	db	78	;'N'
   780  007CB2  54                 	db	84	;'T'
   781  007CB3  45                 	db	69	;'E'
   782  007CB4  52                 	db	82	;'R'
   783  007CB5  56                 	db	86	;'V'
   784  007CB6  41                 	db	65	;'A'
   785  007CB7  4C                 	db	76	;'L'
   786  007CB8  4F                 	db	79	;'O'
   787  007CB9  3A                 	db	58	;':'
   788  007CBA  20                 	db	32
   789  007CBB  25                 	db	37
   790  007CBC  32                 	db	50	;'2'
   791  007CBD  64                 	db	100	;'d'
   792  007CBE  20                 	db	32
   793  007CBF  64                 	db	100	;'d'
   794  007CC0  69                 	db	105	;'i'
   795  007CC1  61                 	db	97	;'a'
   796  007CC2  73                 	db	115	;'s'
   797  007CC3  00                 	db	0
   798  007CC4                     STR_71:
   799  007CC4  48                 	db	72	;'H'
   800  007CC5  4F                 	db	79	;'O'
   801  007CC6  52                 	db	82	;'R'
   802  007CC7  41                 	db	65	;'A'
   803  007CC8  52                 	db	82	;'R'
   804  007CC9  49                 	db	73	;'I'
   805  007CCA  4F                 	db	79	;'O'
   806  007CCB  3A                 	db	58	;':'
   807  007CCC  20                 	db	32
   808  007CCD  25                 	db	37
   809  007CCE  30                 	db	48	;'0'
   810  007CCF  32                 	db	50	;'2'
   811  007CD0  64                 	db	100	;'d'
   812  007CD1  20                 	db	32
   813  007CD2  68                 	db	104	;'h'
   814  007CD3  6F                 	db	111	;'o'
   815  007CD4  72                 	db	114	;'r'
   816  007CD5  61                 	db	97	;'a'
   817  007CD6  73                 	db	115	;'s'
   818  007CD7  00                 	db	0
   819  007CD8                     STR_87:
   820  007CD8  53                 	db	83	;'S'
   821  007CD9  69                 	db	105	;'i'
   822  007CDA  73                 	db	115	;'s'
   823  007CDB  74                 	db	116	;'t'
   824  007CDC  65                 	db	101	;'e'
   825  007CDD  6D                 	db	109	;'m'
   826  007CDE  61                 	db	97	;'a'
   827  007CDF  73                 	db	115	;'s'
   828  007CE0  20                 	db	32
   829  007CE1  65                 	db	101	;'e'
   830  007CE2  6D                 	db	109	;'m'
   831  007CE3  62                 	db	98	;'b'
   832  007CE4  61                 	db	97	;'a'
   833  007CE5  72                 	db	114	;'r'
   834  007CE6  63                 	db	99	;'c'
   835  007CE7  61                 	db	97	;'a'
   836  007CE8  64                 	db	100	;'d'
   837  007CE9  6F                 	db	111	;'o'
   838  007CEA  73                 	db	115	;'s'
   839  007CEB  00                 	db	0
   840  007CEC                     STR_64:
   841  007CEC  20                 	db	32
   842  007CED  50                 	db	80	;'P'
   843  007CEE  72                 	db	114	;'r'
   844  007CEF  65                 	db	101	;'e'
   845  007CF0  73                 	db	115	;'s'
   846  007CF1  73                 	db	115	;'s'
   847  007CF2  20                 	db	32
   848  007CF3  45                 	db	69	;'E'
   849  007CF4  53                 	db	83	;'S'
   850  007CF5  43                 	db	67	;'C'
   851  007CF6  20                 	db	32
   852  007CF7  70                 	db	112	;'p'
   853  007CF8  2F                 	db	47
   854  007CF9  20                 	db	32
   855  007CFA  52                 	db	82	;'R'
   856  007CFB  65                 	db	101	;'e'
   857  007CFC  73                 	db	115	;'s'
   858  007CFD  65                 	db	101	;'e'
   859  007CFE  74                 	db	116	;'t'
   860  007CFF  00                 	db	0
   861  007D00                     STR_41:
   862  007D00  42                 	db	66	;'B'
   863  007D01  6F                 	db	111	;'o'
   864  007D02  6D                 	db	109	;'m'
   865  007D03  62                 	db	98	;'b'
   866  007D04  61                 	db	97	;'a'
   867  007D05  20                 	db	32
   868  007D06  50                 	db	80	;'P'
   869  007D07  72                 	db	114	;'r'
   870  007D08  69                 	db	105	;'i'
   871  007D09  6E                 	db	110	;'n'
   872  007D0A  63                 	db	99	;'c'
   873  007D0B  69                 	db	105	;'i'
   874  007D0C  70                 	db	112	;'p'
   875  007D0D  61                 	db	97	;'a'
   876  007D0E  6C                 	db	108	;'l'
   877  007D0F  2E                 	db	46
   878  007D10  2E                 	db	46
   879  007D11  2E                 	db	46
   880  007D12  00                 	db	0
   881  007D13                     STR_42:
   882  007D13  42                 	db	66	;'B'
   883  007D14  6F                 	db	111	;'o'
   884  007D15  6D                 	db	109	;'m'
   885  007D16  62                 	db	98	;'b'
   886  007D17  61                 	db	97	;'a'
   887  007D18  20                 	db	32
   888  007D19  43                 	db	67	;'C'
   889  007D1A  6F                 	db	111	;'o'
   890  007D1B  6D                 	db	109	;'m'
   891  007D1C  62                 	db	98	;'b'
   892  007D1D  75                 	db	117	;'u'
   893  007D1E  73                 	db	115	;'s'
   894  007D1F  74                 	db	116	;'t'
   895  007D20  61                 	db	97	;'a'
   896  007D21  6F                 	db	111	;'o'
   897  007D22  2E                 	db	46
   898  007D23  2E                 	db	46
   899  007D24  2E                 	db	46
   900  007D25  00                 	db	0
   901  007D26                     STR_101:
   902  007D26  23                 	db	35
   903  007D27  68                 	db	104	;'h'
   904  007D28  6F                 	db	111	;'o'
   905  007D29  72                 	db	114	;'r'
   906  007D2A  69                 	db	105	;'i'
   907  007D2B  6D                 	db	109	;'m'
   908  007D2C  65                 	db	101	;'e'
   909  007D2D  74                 	db	116	;'t'
   910  007D2E  72                 	db	114	;'r'
   911  007D2F  6F                 	db	111	;'o'
   912  007D30  3A                 	db	58	;':'
   913  007D31  25                 	db	37
   914  007D32  35                 	db	53	;'5'
   915  007D33  64                 	db	100	;'d'
   916  007D34  20                 	db	32
   917  007D35  6D                 	db	109	;'m'
   918  007D36  69                 	db	105	;'i'
   919  007D37  6E                 	db	110	;'n'
   920  007D38  00                 	db	0
   921  007D39                     STR_96:
   922  007D39  43                 	db	67	;'C'
   923  007D3A  6F                 	db	111	;'o'
   924  007D3B  6E                 	db	110	;'n'
   925  007D3C  66                 	db	102	;'f'
   926  007D3D  69                 	db	105	;'i'
   927  007D3E  67                 	db	103	;'g'
   928  007D3F  75                 	db	117	;'u'
   929  007D40  72                 	db	114	;'r'
   930  007D41  61                 	db	97	;'a'
   931  007D42  63                 	db	99	;'c'
   932  007D43  61                 	db	97	;'a'
   933  007D44  6F                 	db	111	;'o'
   934  007D45  20                 	db	32
   935  007D46  74                 	db	116	;'t'
   936  007D47  65                 	db	101	;'e'
   937  007D48  6D                 	db	109	;'m'
   938  007D49  70                 	db	112	;'p'
   939  007D4A  6F                 	db	111	;'o'
   940  007D4B  00                 	db	0
   941  007D4C                     STR_62:
   942  007D4C  45                 	db	69	;'E'
   943  007D4D  72                 	db	114	;'r'
   944  007D4E  72                 	db	114	;'r'
   945  007D4F  6F                 	db	111	;'o'
   946  007D50  20                 	db	32
   947  007D51  6E                 	db	110	;'n'
   948  007D52  6F                 	db	111	;'o'
   949  007D53  20                 	db	32
   950  007D54  54                 	db	84	;'T'
   951  007D55  72                 	db	114	;'r'
   952  007D56  61                 	db	97	;'a'
   953  007D57  6E                 	db	110	;'n'
   954  007D58  73                 	db	115	;'s'
   955  007D59  64                 	db	100	;'d'
   956  007D5A  75                 	db	117	;'u'
   957  007D5B  74                 	db	116	;'t'
   958  007D5C  6F                 	db	111	;'o'
   959  007D5D  72                 	db	114	;'r'
   960  007D5E  00                 	db	0
   961  007D5F                     STR_12:
   962  007D5F  41                 	db	65	;'A'
   963  007D60  54                 	db	84	;'T'
   964  007D61  2B                 	db	43
   965  007D62  43                 	db	67	;'C'
   966  007D63  4D                 	db	77	;'M'
   967  007D64  47                 	db	71	;'G'
   968  007D65  53                 	db	83	;'S'
   969  007D66  3D                 	db	61	;'='
   970  007D67  22                 	db	34
   971  007D68  2B                 	db	43
   972  007D69  35                 	db	53	;'5'
   973  007D6A  35                 	db	53	;'5'
   974  007D6B  25                 	db	37
   975  007D6C  73                 	db	115	;'s'
   976  007D6D  22                 	db	34
   977  007D6E  0D                 	db	13
   978  007D6F  0A                 	db	10
   979  007D70  00                 	db	0
   980  007D71                     STR_117:
   981  007D71  50                 	db	80	;'P'
   982  007D72  41                 	db	65	;'A'
   983  007D73  52                 	db	82	;'R'
   984  007D74  54                 	db	84	;'T'
   985  007D75  49                 	db	73	;'I'
   986  007D76  44                 	db	68	;'D'
   987  007D77  41                 	db	65	;'A'
   988  007D78  20                 	db	32
   989  007D79  43                 	db	67	;'C'
   990  007D7A  4F                 	db	79	;'O'
   991  007D7B  4D                 	db	77	;'M'
   992  007D7C  42                 	db	66	;'B'
   993  007D7D  55                 	db	85	;'U'
   994  007D7E  53                 	db	83	;'S'
   995  007D7F  54                 	db	84	;'T'
   996  007D80  41                 	db	65	;'A'
   997  007D81  4F                 	db	79	;'O'
   998  007D82  00                 	db	0
   999  007D83                     STR_119:
  1000  007D83  50                 	db	80	;'P'
  1001  007D84  45                 	db	69	;'E'
  1002  007D85  52                 	db	82	;'R'
  1003  007D86  49                 	db	73	;'I'
  1004  007D87  4F                 	db	79	;'O'
  1005  007D88  44                 	db	68	;'D'
  1006  007D89  4F                 	db	79	;'O'
  1007  007D8A  20                 	db	32
  1008  007D8B  44                 	db	68	;'D'
  1009  007D8C  45                 	db	69	;'E'
  1010  007D8D  20                 	db	32
  1011  007D8E  54                 	db	84	;'T'
  1012  007D8F  45                 	db	69	;'E'
  1013  007D90  53                 	db	83	;'S'
  1014  007D91  54                 	db	84	;'T'
  1015  007D92  45                 	db	69	;'E'
  1016  007D93  53                 	db	83	;'S'
  1017  007D94  00                 	db	0
  1018  007D95                     STR_58:
  1019  007D95  20                 	db	32
  1020  007D96  2A                 	db	42
  1021  007D97  66                 	db	102	;'f'
  1022  007D98  61                 	db	97	;'a'
  1023  007D99  6C                 	db	108	;'l'
  1024  007D9A  68                 	db	104	;'h'
  1025  007D9B  61                 	db	97	;'a'
  1026  007D9C  20                 	db	32
  1027  007D9D  42                 	db	66	;'B'
  1028  007D9E  2E                 	db	46
  1029  007D9F  20                 	db	32
  1030  007DA0  6A                 	db	106	;'j'
  1031  007DA1  6F                 	db	111	;'o'
  1032  007DA2  63                 	db	99	;'c'
  1033  007DA3  6B                 	db	107	;'k'
  1034  007DA4  65                 	db	101	;'e'
  1035  007DA5  79                 	db	121	;'y'
  1036  007DA6  00                 	db	0
  1037  007DA7                     STR_44:
  1038  007DA7  54                 	db	84	;'T'
  1039  007DA8  65                 	db	101	;'e'
  1040  007DA9  73                 	db	115	;'s'
  1041  007DAA  74                 	db	116	;'t'
  1042  007DAB  65                 	db	101	;'e'
  1043  007DAC  20                 	db	32
  1044  007DAD  43                 	db	67	;'C'
  1045  007DAE  6F                 	db	111	;'o'
  1046  007DAF  6E                 	db	110	;'n'
  1047  007DB0  63                 	db	99	;'c'
  1048  007DB1  6C                 	db	108	;'l'
  1049  007DB2  75                 	db	117	;'u'
  1050  007DB3  69                 	db	105	;'i'
  1051  007DB4  64                 	db	100	;'d'
  1052  007DB5  6F                 	db	111	;'o'
  1053  007DB6  21                 	db	33
  1054  007DB7  00                 	db	0
  1055  007DB8                     STR_88:
  1056  007DB8  20                 	db	32
  1057  007DB9  20                 	db	32
  1058  007DBA  20                 	db	32
  1059  007DBB  34                 	db	52	;'4'
  1060  007DBC  38                 	db	56	;'8'
  1061  007DBD  20                 	db	32
  1062  007DBE  39                 	db	57	;'9'
  1063  007DBF  39                 	db	57	;'9'
  1064  007DC0  39                 	db	57	;'9'
  1065  007DC1  30                 	db	48	;'0'
  1066  007DC2  36                 	db	54	;'6'
  1067  007DC3  2D                 	db	45
  1068  007DC4  35                 	db	53	;'5'
  1069  007DC5  36                 	db	54	;'6'
  1070  007DC6  35                 	db	53	;'5'
  1071  007DC7  31                 	db	49	;'1'
  1072  007DC8  00                 	db	0
  1073  007DC9                     STR_56:
  1074  007DC9  20                 	db	32
  1075  007DCA  2A                 	db	42
  1076  007DCB  66                 	db	102	;'f'
  1077  007DCC  61                 	db	97	;'a'
  1078  007DCD  6C                 	db	108	;'l'
  1079  007DCE  68                 	db	104	;'h'
  1080  007DCF  61                 	db	97	;'a'
  1081  007DD0  20                 	db	32
  1082  007DD1  65                 	db	101	;'e'
  1083  007DD2  6C                 	db	108	;'l'
  1084  007DD3  65                 	db	101	;'e'
  1085  007DD4  74                 	db	116	;'t'
  1086  007DD5  72                 	db	114	;'r'
  1087  007DD6  69                 	db	105	;'i'
  1088  007DD7  63                 	db	99	;'c'
  1089  007DD8  61                 	db	97	;'a'
  1090  007DD9  00                 	db	0
  1091  007DDA                     STR_95:
  1092  007DDA  45                 	db	69	;'E'
  1093  007DDB  6E                 	db	110	;'n'
  1094  007DDC  76                 	db	118	;'v'
  1095  007DDD  69                 	db	105	;'i'
  1096  007DDE  61                 	db	97	;'a'
  1097  007DDF  72                 	db	114	;'r'
  1098  007DE0  20                 	db	32
  1099  007DE1  73                 	db	115	;'s'
  1100  007DE2  6D                 	db	109	;'m'
  1101  007DE3  73                 	db	115	;'s'
  1102  007DE4  20                 	db	32
  1103  007DE5  74                 	db	116	;'t'
  1104  007DE6  65                 	db	101	;'e'
  1105  007DE7  73                 	db	115	;'s'
  1106  007DE8  74                 	db	116	;'t'
  1107  007DE9  65                 	db	101	;'e'
  1108  007DEA  00                 	db	0
  1109  007DEB                     STR_54:
  1110  007DEB  65                 	db	101	;'e'
  1111  007DEC  6E                 	db	110	;'n'
  1112  007DED  76                 	db	118	;'v'
  1113  007DEE  69                 	db	105	;'i'
  1114  007DEF  61                 	db	97	;'a'
  1115  007DF0  6E                 	db	110	;'n'
  1116  007DF1  64                 	db	100	;'d'
  1117  007DF2  6F                 	db	111	;'o'
  1118  007DF3  20                 	db	32
  1119  007DF4  53                 	db	83	;'S'
  1120  007DF5  4D                 	db	77	;'M'
  1121  007DF6  53                 	db	83	;'S'
  1122  007DF7  2E                 	db	46
  1123  007DF8  2E                 	db	46
  1124  007DF9  2E                 	db	46
  1125  007DFA  00                 	db	0
  1126  007DFB                     STR_43:
  1127  007DFB  42                 	db	66	;'B'
  1128  007DFC  6F                 	db	111	;'o'
  1129  007DFD  6D                 	db	109	;'m'
  1130  007DFE  62                 	db	98	;'b'
  1131  007DFF  61                 	db	97	;'a'
  1132  007E00  20                 	db	32
  1133  007E01  4C                 	db	76	;'L'
  1134  007E02  69                 	db	105	;'i'
  1135  007E03  67                 	db	103	;'g'
  1136  007E04  61                 	db	97	;'a'
  1137  007E05  64                 	db	100	;'d'
  1138  007E06  61                 	db	97	;'a'
  1139  007E07  2E                 	db	46
  1140  007E08  2E                 	db	46
  1141  007E09  2E                 	db	46
  1142  007E0A  00                 	db	0
  1143  007E0B                     STR_40:
  1144  007E0B  42                 	db	66	;'B'
  1145  007E0C  6F                 	db	111	;'o'
  1146  007E0D  6D                 	db	109	;'m'
  1147  007E0E  62                 	db	98	;'b'
  1148  007E0F  61                 	db	97	;'a'
  1149  007E10  20                 	db	32
  1150  007E11  4A                 	db	74	;'J'
  1151  007E12  6F                 	db	111	;'o'
  1152  007E13  63                 	db	99	;'c'
  1153  007E14  6B                 	db	107	;'k'
  1154  007E15  65                 	db	101	;'e'
  1155  007E16  79                 	db	121	;'y'
  1156  007E17  2E                 	db	46
  1157  007E18  2E                 	db	46
  1158  007E19  2E                 	db	46
  1159  007E1A  00                 	db	0
  1160  007E1B                     STR_116:
  1161  007E1B  50                 	db	80	;'P'
  1162  007E1C  52                 	db	82	;'R'
  1163  007E1D  45                 	db	69	;'E'
  1164  007E1E  53                 	db	83	;'S'
  1165  007E1F  53                 	db	83	;'S'
  1166  007E20  41                 	db	65	;'A'
  1167  007E21  4F                 	db	79	;'O'
  1168  007E22  20                 	db	32
  1169  007E23  44                 	db	68	;'D'
  1170  007E24  41                 	db	65	;'A'
  1171  007E25  20                 	db	32
  1172  007E26  52                 	db	82	;'R'
  1173  007E27  45                 	db	69	;'E'
  1174  007E28  44                 	db	68	;'D'
  1175  007E29  45                 	db	69	;'E'
  1176  007E2A  00                 	db	0
  1177  007E2B                     STR_39:
  1178  007E2B  50                 	db	80	;'P'
  1179  007E2C  72                 	db	114	;'r'
  1180  007E2D  65                 	db	101	;'e'
  1181  007E2E  73                 	db	115	;'s'
  1182  007E2F  73                 	db	115	;'s'
  1183  007E30  61                 	db	97	;'a'
  1184  007E31  6F                 	db	111	;'o'
  1185  007E32  20                 	db	32
  1186  007E33  25                 	db	37
  1187  007E34  73                 	db	115	;'s'
  1188  007E35  20                 	db	32
  1189  007E36  42                 	db	66	;'B'
  1190  007E37  41                 	db	65	;'A'
  1191  007E38  52                 	db	82	;'R'
  1192  007E39  00                 	db	0
  1193  007E3A                     STR_66:
  1194  007E3A  25                 	db	37
  1195  007E3B  30                 	db	48	;'0'
  1196  007E3C  32                 	db	50	;'2'
  1197  007E3D  64                 	db	100	;'d'
  1198  007E3E  2F                 	db	47
  1199  007E3F  25                 	db	37
  1200  007E40  30                 	db	48	;'0'
  1201  007E41  32                 	db	50	;'2'
  1202  007E42  64                 	db	100	;'d'
  1203  007E43  2F                 	db	47
  1204  007E44  25                 	db	37
  1205  007E45  30                 	db	48	;'0'
  1206  007E46  32                 	db	50	;'2'
  1207  007E47  64                 	db	100	;'d'
  1208  007E48  00                 	db	0
  1209  007E49                     STR_68:
  1210  007E49  25                 	db	37
  1211  007E4A  30                 	db	48	;'0'
  1212  007E4B  32                 	db	50	;'2'
  1213  007E4C  64                 	db	100	;'d'
  1214  007E4D  3A                 	db	58	;':'
  1215  007E4E  25                 	db	37
  1216  007E4F  30                 	db	48	;'0'
  1217  007E50  32                 	db	50	;'2'
  1218  007E51  64                 	db	100	;'d'
  1219  007E52  3A                 	db	58	;':'
  1220  007E53  25                 	db	37
  1221  007E54  30                 	db	48	;'0'
  1222  007E55  32                 	db	50	;'2'
  1223  007E56  64                 	db	100	;'d'
  1224  007E57  00                 	db	0
  1225  007E58                     STR_48:
  1226  007E58  50                 	db	80	;'P'
  1227  007E59  52                 	db	82	;'R'
  1228  007E5A  49                 	db	73	;'I'
  1229  007E5B  4E                 	db	78	;'N'
  1230  007E5C  43                 	db	67	;'C'
  1231  007E5D  49                 	db	73	;'I'
  1232  007E5E  50                 	db	80	;'P'
  1233  007E5F  41                 	db	65	;'A'
  1234  007E60  4C                 	db	76	;'L'
  1235  007E61  20                 	db	32
  1236  007E62  3A                 	db	58	;':'
  1237  007E63  20                 	db	32
  1238  007E64  25                 	db	37
  1239  007E65  73                 	db	115	;'s'
  1240  007E66  00                 	db	0
  1241  007E67                     STR_51:
  1242  007E67  43                 	db	67	;'C'
  1243  007E68  4F                 	db	79	;'O'
  1244  007E69  4D                 	db	77	;'M'
  1245  007E6A  42                 	db	66	;'B'
  1246  007E6B  55                 	db	85	;'U'
  1247  007E6C  53                 	db	83	;'S'
  1248  007E6D  54                 	db	84	;'T'
  1249  007E6E  41                 	db	65	;'A'
  1250  007E6F  4F                 	db	79	;'O'
  1251  007E70  20                 	db	32
  1252  007E71  3A                 	db	58	;':'
  1253  007E72  20                 	db	32
  1254  007E73  25                 	db	37
  1255  007E74  73                 	db	115	;'s'
  1256  007E75  00                 	db	0
  1257  007E76                     STR_38:
  1258  007E76  41                 	db	65	;'A'
  1259  007E77  67                 	db	103	;'g'
  1260  007E78  75                 	db	117	;'u'
  1261  007E79  61                 	db	97	;'a'
  1262  007E7A  72                 	db	114	;'r'
  1263  007E7B  64                 	db	100	;'d'
  1264  007E7C  65                 	db	101	;'e'
  1265  007E7D  2E                 	db	46
  1266  007E7E  2E                 	db	46
  1267  007E7F  2E                 	db	46
  1268  007E80  20                 	db	32
  1269  007E81  25                 	db	37
  1270  007E82  64                 	db	100	;'d'
  1271  007E83  73                 	db	115	;'s'
  1272  007E84  00                 	db	0
  1273  007E85                     STR_122:
  1274  007E85  49                 	db	73	;'I'
  1275  007E86  6E                 	db	110	;'n'
  1276  007E87  69                 	db	105	;'i'
  1277  007E88  63                 	db	99	;'c'
  1278  007E89  69                 	db	105	;'i'
  1279  007E8A  61                 	db	97	;'a'
  1280  007E8B  72                 	db	114	;'r'
  1281  007E8C  20                 	db	32
  1282  007E8D  54                 	db	84	;'T'
  1283  007E8E  65                 	db	101	;'e'
  1284  007E8F  73                 	db	115	;'s'
  1285  007E90  74                 	db	116	;'t'
  1286  007E91  65                 	db	101	;'e'
  1287  007E92  73                 	db	115	;'s'
  1288  007E93  00                 	db	0
  1289  007E94                     STR_112:
  1290  007E94  56                 	db	86	;'V'
  1291  007E95  65                 	db	101	;'e'
  1292  007E96  72                 	db	114	;'r'
  1293  007E97  73                 	db	115	;'s'
  1294  007E98  61                 	db	97	;'a'
  1295  007E99  6F                 	db	111	;'o'
  1296  007E9A  20                 	db	32
  1297  007E9B  53                 	db	83	;'S'
  1298  007E9C  6F                 	db	111	;'o'
  1299  007E9D  66                 	db	102	;'f'
  1300  007E9E  74                 	db	116	;'t'
  1301  007E9F  2E                 	db	46
  1302  007EA0  3A                 	db	58	;':'
  1303  007EA1  00                 	db	0
  1304  007EA2                     STR_97:
  1305  007EA2  4D                 	db	77	;'M'
  1306  007EA3  61                 	db	97	;'a'
  1307  007EA4  78                 	db	120	;'x'
  1308  007EA5  2E                 	db	46
  1309  007EA6  20                 	db	32
  1310  007EA7  50                 	db	80	;'P'
  1311  007EA8  41                 	db	65	;'A'
  1312  007EA9  52                 	db	82	;'R'
  1313  007EAA  54                 	db	84	;'T'
  1314  007EAB  49                 	db	73	;'I'
  1315  007EAC  44                 	db	68	;'D'
  1316  007EAD  41                 	db	65	;'A'
  1317  007EAE  3A                 	db	58	;':'
  1318  007EAF  00                 	db	0
  1319  007EB0                     STR_80:
  1320  007EB0  50                 	db	80	;'P'
  1321  007EB1  72                 	db	114	;'r'
  1322  007EB2  69                 	db	105	;'i'
  1323  007EB3  6E                 	db	110	;'n'
  1324  007EB4  63                 	db	99	;'c'
  1325  007EB5  69                 	db	105	;'i'
  1326  007EB6  70                 	db	112	;'p'
  1327  007EB7  61                 	db	97	;'a'
  1328  007EB8  6C                 	db	108	;'l'
  1329  007EB9  3A                 	db	58	;':'
  1330  007EBA  20                 	db	32
  1331  007EBB  25                 	db	37
  1332  007EBC  73                 	db	115	;'s'
  1333  007EBD  00                 	db	0
  1334  007EBE                     STR_83:
  1335  007EBE  43                 	db	67	;'C'
  1336  007EBF  6F                 	db	111	;'o'
  1337  007EC0  6D                 	db	109	;'m'
  1338  007EC1  62                 	db	98	;'b'
  1339  007EC2  75                 	db	117	;'u'
  1340  007EC3  73                 	db	115	;'s'
  1341  007EC4  74                 	db	116	;'t'
  1342  007EC5  61                 	db	97	;'a'
  1343  007EC6  6F                 	db	111	;'o'
  1344  007EC7  3A                 	db	58	;':'
  1345  007EC8  20                 	db	32
  1346  007EC9  25                 	db	37
  1347  007ECA  73                 	db	115	;'s'
  1348  007ECB  00                 	db	0
  1349  007ECC                     STR_94:
  1350  007ECC  20                 	db	32
  1351  007ECD  61                 	db	97	;'a'
  1352  007ECE  67                 	db	103	;'g'
  1353  007ECF  75                 	db	117	;'u'
  1354  007ED0  61                 	db	97	;'a'
  1355  007ED1  72                 	db	114	;'r'
  1356  007ED2  64                 	db	100	;'d'
  1357  007ED3  65                 	db	101	;'e'
  1358  007ED4  2E                 	db	46
  1359  007ED5  2E                 	db	46
  1360  007ED6  2E                 	db	46
  1361  007ED7  20                 	db	32
  1362  007ED8  00                 	db	0
  1363  007ED9                     STR_10:
  1364  007ED9  41                 	db	65	;'A'
  1365  007EDA  54                 	db	84	;'T'
  1366  007EDB  2B                 	db	43
  1367  007EDC  43                 	db	67	;'C'
  1368  007EDD  4D                 	db	77	;'M'
  1369  007EDE  47                 	db	71	;'G'
  1370  007EDF  46                 	db	70	;'F'
  1371  007EE0  3D                 	db	61	;'='
  1372  007EE1  31                 	db	49	;'1'
  1373  007EE2  0D                 	db	13
  1374  007EE3  0A                 	db	10
  1375  007EE4  00                 	db	0
  1376  007EE5                     STR_15:
  1377  007EE5  41                 	db	65	;'A'
  1378  007EE6  75                 	db	117	;'u'
  1379  007EE7  67                 	db	103	;'g'
  1380  007EE8  20                 	db	32
  1381  007EE9  32                 	db	50	;'2'
  1382  007EEA  35                 	db	53	;'5'
  1383  007EEB  20                 	db	32
  1384  007EEC  32                 	db	50	;'2'
  1385  007EED  30                 	db	48	;'0'
  1386  007EEE  31                 	db	49	;'1'
  1387  007EEF  39                 	db	57	;'9'
  1388  007EF0  00                 	db	0
  1389  007EF1                     STR_99:
  1390  007EF1  4D                 	db	77	;'M'
  1391  007EF2  61                 	db	97	;'a'
  1392  007EF3  78                 	db	120	;'x'
  1393  007EF4  2E                 	db	46
  1394  007EF5  20                 	db	32
  1395  007EF6  54                 	db	84	;'T'
  1396  007EF7  45                 	db	69	;'E'
  1397  007EF8  53                 	db	83	;'S'
  1398  007EF9  54                 	db	84	;'T'
  1399  007EFA  45                 	db	69	;'E'
  1400  007EFB  3A                 	db	58	;':'
  1401  007EFC  00                 	db	0
  1402  007EFD                     STR_121:
  1403  007EFD  49                 	db	73	;'I'
  1404  007EFE  4E                 	db	78	;'N'
  1405  007EFF  46                 	db	70	;'F'
  1406  007F00  4F                 	db	79	;'O'
  1407  007F01  20                 	db	32
  1408  007F02  56                 	db	86	;'V'
  1409  007F03  45                 	db	69	;'E'
  1410  007F04  52                 	db	82	;'R'
  1411  007F05  53                 	db	83	;'S'
  1412  007F06  41                 	db	65	;'A'
  1413  007F07  4F                 	db	79	;'O'
  1414  007F08  00                 	db	0
  1415  007F09                     STR_89:
  1416  007F09  76                 	db	118	;'v'
  1417  007F0A  65                 	db	101	;'e'
  1418  007F0B  72                 	db	114	;'r'
  1419  007F0C  73                 	db	115	;'s'
  1420  007F0D  61                 	db	97	;'a'
  1421  007F0E  6F                 	db	111	;'o'
  1422  007F0F  20                 	db	32
  1423  007F10  2D                 	db	45
  1424  007F11  20                 	db	32
  1425  007F12  25                 	db	37
  1426  007F13  73                 	db	115	;'s'
  1427  007F14  00                 	db	0
  1428  007F15                     STR_35:
  1429  007F15  41                 	db	65	;'A'
  1430  007F16  54                 	db	84	;'T'
  1431  007F17  44                 	db	68	;'D'
  1432  007F18  20                 	db	32
  1433  007F19  30                 	db	48	;'0'
  1434  007F1A  25                 	db	37
  1435  007F1B  73                 	db	115	;'s'
  1436  007F1C  3B                 	db	59	;';'
  1437  007F1D  0D                 	db	13
  1438  007F1E  0A                 	db	10
  1439  007F1F  00                 	db	0
  1440  007F20  74                 	db	116	;'t'
  1441  007F21  65                 	db	101	;'e'
  1442  007F22  74                 	db	116	;'t'
  1443  007F23  61                 	db	97	;'a'
  1444  007F24  70                 	db	112	;'p'
  1445  007F25  61                 	db	97	;'a'
  1446  007F26  20                 	db	32
  1447  007F27  25                 	db	37
  1448  007F28  64                 	db	100	;'d'
  1449  007F29  20                 	db	32
  1450  007F2A  00                 	db	0
  1451  007F2B                     STR_79:
  1452  007F2B  23                 	db	35
  1453  007F2C  25                 	db	37
  1454  007F2D  30                 	db	48	;'0'
  1455  007F2E  32                 	db	50	;'2'
  1456  007F2F  64                 	db	100	;'d'
  1457  007F30  2F                 	db	47
  1458  007F31  25                 	db	37
  1459  007F32  30                 	db	48	;'0'
  1460  007F33  32                 	db	50	;'2'
  1461  007F34  64                 	db	100	;'d'
  1462  007F35  00                 	db	0
  1463  007F36                     STR_102:
  1464  007F36  47                 	db	71	;'G'
  1465  007F37  45                 	db	69	;'E'
  1466  007F38  52                 	db	82	;'R'
  1467  007F39  41                 	db	65	;'A'
  1468  007F3A  4C                 	db	76	;'L'
  1469  007F3B  20                 	db	32
  1470  007F3C  3A                 	db	58	;':'
  1471  007F3D  20                 	db	32
  1472  007F3E  25                 	db	37
  1473  007F3F  73                 	db	115	;'s'
  1474  007F40  00                 	db	0
  1475  007F41                     STR_45:
  1476  007F41  4A                 	db	74	;'J'
  1477  007F42  4F                 	db	79	;'O'
  1478  007F43  4B                 	db	75	;'K'
  1479  007F44  45                 	db	69	;'E'
  1480  007F45  59                 	db	89	;'Y'
  1481  007F46  20                 	db	32
  1482  007F47  3A                 	db	58	;':'
  1483  007F48  20                 	db	32
  1484  007F49  25                 	db	37
  1485  007F4A  73                 	db	115	;'s'
  1486  007F4B  00                 	db	0
  1487  007F4C                     STR_72:
  1488  007F4C  41                 	db	65	;'A'
  1489  007F4D  54                 	db	84	;'T'
  1490  007F4E  49                 	db	73	;'I'
  1491  007F4F  56                 	db	86	;'V'
  1492  007F50  41                 	db	65	;'A'
  1493  007F51  52                 	db	82	;'R'
  1494  007F52  3A                 	db	58	;':'
  1495  007F53  20                 	db	32
  1496  007F54  25                 	db	37
  1497  007F55  73                 	db	115	;'s'
  1498  007F56  00                 	db	0
  1499  007F57                     STR_115:
  1500  007F57  44                 	db	68	;'D'
  1501  007F58  41                 	db	65	;'A'
  1502  007F59  54                 	db	84	;'T'
  1503  007F5A  41                 	db	65	;'A'
  1504  007F5B  2F                 	db	47
  1505  007F5C  48                 	db	72	;'H'
  1506  007F5D  4F                 	db	79	;'O'
  1507  007F5E  52                 	db	82	;'R'
  1508  007F5F  41                 	db	65	;'A'
  1509  007F60  00                 	db	0
  1510  007F61                     STR_120:
  1511  007F61  44                 	db	68	;'D'
  1512  007F62  41                 	db	65	;'A'
  1513  007F63  54                 	db	84	;'T'
  1514  007F64  41                 	db	65	;'A'
  1515  007F65  4C                 	db	76	;'L'
  1516  007F66  4F                 	db	79	;'O'
  1517  007F67  47                 	db	71	;'G'
  1518  007F68  45                 	db	69	;'E'
  1519  007F69  52                 	db	82	;'R'
  1520  007F6A  00                 	db	0
  1521  007F6B                     STR_118:
  1522  007F6B  54                 	db	84	;'T'
  1523  007F6C  45                 	db	69	;'E'
  1524  007F6D  4C                 	db	76	;'L'
  1525  007F6E  45                 	db	69	;'E'
  1526  007F6F  46                 	db	70	;'F'
  1527  007F70  4F                 	db	79	;'O'
  1528  007F71  4E                 	db	78	;'N'
  1529  007F72  45                 	db	69	;'E'
  1530  007F73  53                 	db	83	;'S'
  1531  007F74  00                 	db	0
  1532  007F75  74                 	db	116	;'t'
  1533  007F76  73                 	db	115	;'s'
  1534  007F77  69                 	db	105	;'i'
  1535  007F78  6E                 	db	110	;'n'
  1536  007F79  61                 	db	97	;'a'
  1537  007F7A  6C                 	db	108	;'l'
  1538  007F7B  20                 	db	32
  1539  007F7C  25                 	db	37
  1540  007F7D  64                 	db	100	;'d'
  1541  007F7E  00                 	db	0
  1542  007F7F                     STR_76:
  1543  007F7F  4A                 	db	74	;'J'
  1544  007F80  6F                 	db	111	;'o'
  1545  007F81  6B                 	db	107	;'k'
  1546  007F82  65                 	db	101	;'e'
  1547  007F83  79                 	db	121	;'y'
  1548  007F84  3A                 	db	58	;':'
  1549  007F85  20                 	db	32
  1550  007F86  25                 	db	37
  1551  007F87  73                 	db	115	;'s'
  1552  007F88  00                 	db	0
  1553  007F89                     STR_3:
  1554  007F89  41                 	db	65	;'A'
  1555  007F8A  54                 	db	84	;'T'
  1556  007F8B  2B                 	db	43
  1557  007F8C  43                 	db	67	;'C'
  1558  007F8D  53                 	db	83	;'S'
  1559  007F8E  51                 	db	81	;'Q'
  1560  007F8F  0D                 	db	13
  1561  007F90  0A                 	db	10
  1562  007F91  00                 	db	0
  1563  007F92  65                 	db	101	;'e'
  1564  007F93  74                 	db	116	;'t'
  1565  007F94  61                 	db	97	;'a'
  1566  007F95  70                 	db	112	;'p'
  1567  007F96  61                 	db	97	;'a'
  1568  007F97  20                 	db	32
  1569  007F98  25                 	db	37
  1570  007F99  64                 	db	100	;'d'
  1571  007F9A  00                 	db	0
  1572  007F9B                     STR_86:
  1573  007F9B  54                 	db	84	;'T'
  1574  007F9C  45                 	db	69	;'E'
  1575  007F9D  43                 	db	67	;'C'
  1576  007F9E  48                 	db	72	;'H'
  1577  007F9F  4E                 	db	78	;'N'
  1578  007FA0  4F                 	db	79	;'O'
  1579  007FA1  57                 	db	87	;'W'
  1580  007FA2  00                 	db	0
  1581  007FA3                     STR_123:
  1582  007FA3  28                 	db	40
  1583  007FA4  6E                 	db	110	;'n'
  1584  007FA5  75                 	db	117	;'u'
  1585  007FA6  6C                 	db	108	;'l'
  1586  007FA7  6C                 	db	108	;'l'
  1587  007FA8  29                 	db	41
  1588  007FA9  00                 	db	0
  1589  007FAA                     STR_21:
  1590  007FAA  41                 	db	65	;'A'
  1591  007FAB  54                 	db	84	;'T'
  1592  007FAC  48                 	db	72	;'H'
  1593  007FAD  30                 	db	48	;'0'
  1594  007FAE  0D                 	db	13
  1595  007FAF  0A                 	db	10
  1596  007FB0  00                 	db	0
  1597  007FB1                     STR_6:
  1598  007FB1  2B                 	db	43
  1599  007FB2  43                 	db	67	;'C'
  1600  007FB3  53                 	db	83	;'S'
  1601  007FB4  51                 	db	81	;'Q'
  1602  007FB5  3A                 	db	58	;':'
  1603  007FB6  20                 	db	32
  1604  007FB7  00                 	db	0
  1605  007FB8                     STR_91:
  1606  007FB8  54                 	db	84	;'T'
  1607  007FB9  31                 	db	49	;'1'
  1608  007FBA  3A                 	db	58	;':'
  1609  007FBB  20                 	db	32
  1610  007FBC  25                 	db	37
  1611  007FBD  73                 	db	115	;'s'
  1612  007FBE  00                 	db	0
  1613  007FBF                     STR_92:
  1614  007FBF  54                 	db	84	;'T'
  1615  007FC0  32                 	db	50	;'2'
  1616  007FC1  3A                 	db	58	;':'
  1617  007FC2  20                 	db	32
  1618  007FC3  25                 	db	37
  1619  007FC4  73                 	db	115	;'s'
  1620  007FC5  00                 	db	0
  1621  007FC6                     STR_67:
  1622  007FC6  48                 	db	72	;'H'
  1623  007FC7  4F                 	db	79	;'O'
  1624  007FC8  52                 	db	82	;'R'
  1625  007FC9  41                 	db	65	;'A'
  1626  007FCA  3A                 	db	58	;':'
  1627  007FCB  00                 	db	0
  1628  007FCC                     STR_65:
  1629  007FCC  44                 	db	68	;'D'
  1630  007FCD  41                 	db	65	;'A'
  1631  007FCE  54                 	db	84	;'T'
  1632  007FCF  41                 	db	65	;'A'
  1633  007FD0  3A                 	db	58	;':'
  1634  007FD1  00                 	db	0
  1635  007FD2                     STR_28:
  1636  007FD2  46                 	db	70	;'F'
  1637  007FD3  41                 	db	65	;'A'
  1638  007FD4  4C                 	db	76	;'L'
  1639  007FD5  48                 	db	72	;'H'
  1640  007FD6  41                 	db	65	;'A'
  1641  007FD7  00                 	db	0
  1642  007FD8                     STR_17:
  1643  007FD8  45                 	db	69	;'E'
  1644  007FD9  52                 	db	82	;'R'
  1645  007FDA  52                 	db	82	;'R'
  1646  007FDB  4F                 	db	79	;'O'
  1647  007FDC  52                 	db	82	;'R'
  1648  007FDD  00                 	db	0
  1649  007FDE                     STR_4:
  1650  007FDE  41                 	db	65	;'A'
  1651  007FDF  54                 	db	84	;'T'
  1652  007FE0  0D                 	db	13
  1653  007FE1  0A                 	db	10
  1654  007FE2  00                 	db	0
  1655  007FE3                     STR_47:
  1656  007FE3  45                 	db	69	;'E'
  1657  007FE4  52                 	db	82	;'R'
  1658  007FE5  52                 	db	82	;'R'
  1659  007FE6  4F                 	db	79	;'O'
  1660  007FE7  00                 	db	0
  1661  007FE8                     STR_1:
  1662  007FE8  25                 	db	37
  1663  007FE9  73                 	db	115	;'s'
  1664  007FEA  25                 	db	37
  1665  007FEB  63                 	db	99	;'c'
  1666  007FEC  00                 	db	0
  1667  007FED                     STR_98:
  1668  007FED  25                 	db	37
  1669  007FEE  33                 	db	51	;'3'
  1670  007FEF  64                 	db	100	;'d'
  1671  007FF0  73                 	db	115	;'s'
  1672  007FF1  00                 	db	0
  1673  007FF2                     STR_74:
  1674  007FF2  53                 	db	83	;'S'
  1675  007FF3  69                 	db	105	;'i'
  1676  007FF4  6D                 	db	109	;'m'
  1677  007FF5  00                 	db	0
  1678  007FF6                     STR_73:
  1679  007FF6  4E                 	db	78	;'N'
  1680  007FF7  61                 	db	97	;'a'
  1681  007FF8  6F                 	db	111	;'o'
  1682  007FF9  00                 	db	0
  1683  007FFA                     STR_5:
  1684  007FFA  4F                 	db	79	;'O'
  1685  007FFB  4B                 	db	75	;'K'
  1686  007FFC  00                 	db	0
  1687  007FFD                     STR_13:
  1688  007FFD  3E                 	db	62	;'>'
  1689  007FFE  00                 	db	0
  1690  0000                     
  1691                           ; #config settings
  1692  007FFF  00                 	db	0	; dummy byte at the end
  1693  0000                     
  1694                           	psect	cinit
  1695  007704                     __pcinit:
  1696                           	opt stack 0
  1697  007704                     start_initialization:
  1698                           	opt stack 0
  1699  007704                     __initialization:
  1700                           	opt stack 0
  1701                           
  1702                           ; Initialize objects allocated to BANK1 (4 bytes)
  1703                           ; load TBLPTR registers with __pidataBANK1
  1704  007704  0E8E               	movlw	low __pidataBANK1
  1705  007706  6EF6               	movwf	tblptrl,c
  1706  007708  0E6C               	movlw	high __pidataBANK1
  1707  00770A  6EF7               	movwf	tblptrh,c
  1708  00770C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1709  00770E  6EF8               	movwf	tblptru,c
  1710  007710  EE01  F0BC         	lfsr	0,__pdataBANK1
  1711  007714  EE10 F004          	lfsr	1,4
  1712  007718                     copy_data0:
  1713  007718  0009               	tblrd		*+
  1714  00771A  CFF5 FFEE          	movff	tablat,postinc0
  1715  00771E  50E5               	movf	postdec1,w,c
  1716  007720  50E1               	movf	fsr1l,w,c
  1717  007722  E1FA               	bnz	copy_data0
  1718                           
  1719                           ; Initialize objects allocated to BANK0 (8 bytes)
  1720                           ; load TBLPTR registers with __pidataBANK0
  1721  007724  0E92               	movlw	low __pidataBANK0
  1722  007726  6EF6               	movwf	tblptrl,c
  1723  007728  0E6C               	movlw	high __pidataBANK0
  1724  00772A  6EF7               	movwf	tblptrh,c
  1725  00772C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1726  00772E  6EF8               	movwf	tblptru,c
  1727  007730  EE00  F0F8         	lfsr	0,__pdataBANK0
  1728  007734  EE10 F008          	lfsr	1,8
  1729  007738                     copy_data1:
  1730  007738  0009               	tblrd		*+
  1731  00773A  CFF5 FFEE          	movff	tablat,postinc0
  1732  00773E  50E5               	movf	postdec1,w,c
  1733  007740  50E1               	movf	fsr1l,w,c
  1734  007742  E1FA               	bnz	copy_data1
  1735                           
  1736                           ; Clear objects allocated to BANK1 (188 bytes)
  1737  007744  EE01  F000         	lfsr	0,__pbssBANK1
  1738  007748  0EBC               	movlw	188
  1739  00774A                     clear_0:
  1740  00774A  6AEE               	clrf	postinc0,c
  1741  00774C  06E8               	decf	wreg,f,c
  1742  00774E  E1FD               	bnz	clear_0
  1743                           
  1744                           ; Clear objects allocated to BANK0 (31 bytes)
  1745  007750  EE00  F0D9         	lfsr	0,__pbssBANK0
  1746  007754  0E1F               	movlw	31
  1747  007756                     clear_1:
  1748  007756  6AEE               	clrf	postinc0,c
  1749  007758  06E8               	decf	wreg,f,c
  1750  00775A  E1FD               	bnz	clear_1
  1751                           
  1752                           ; Clear objects allocated to COMRAM (56 bytes)
  1753  00775C  EE00  F044         	lfsr	0,__pbssCOMRAM
  1754  007760  0E38               	movlw	56
  1755  007762                     clear_2:
  1756  007762  6AEE               	clrf	postinc0,c
  1757  007764  06E8               	decf	wreg,f,c
  1758  007766  E1FD               	bnz	clear_2
  1759  007768                     end_of_initialization:
  1760                           	opt stack 0
  1761  007768                     __end_of__initialization:
  1762                           	opt stack 0
  1763  007768  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1764  00776A  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1765  00776C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1766  00776E  6EF8               	movwf	tblptru,c
  1767  007770  0100               	movlb	0
  1768  007772  EFE6  F006         	goto	_main	;jump to C main() function
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           
  1778                           	psect	bssCOMRAM
  1779  000044                     __pbssCOMRAM:
  1780                           	opt stack 0
  1781  000044                     _shift:
  1782                           	opt stack 0
  1783  000044                     	ds	8
  1784  00004C                     __tensao:
  1785                           	opt stack 0
  1786  00004C                     	ds	3
  1787  00004F                     _horimetro:
  1788                           	opt stack 0
  1789  00004F                     	ds	2
  1790  000051                     _etapaComunicacao:
  1791                           	opt stack 0
  1792  000051                     	ds	2
  1793  000053                     _dtl_posi_visualizar:
  1794                           	opt stack 0
  1795  000053                     	ds	1
  1796  000054                     _totalLogs:
  1797                           	opt stack 0
  1798  000054                     	ds	1
  1799  000055                     _dtl_carregar_log:
  1800                           	opt stack 0
  1801  000055                     	ds	1
  1802  000056                     _dtl_estacionaria:
  1803                           	opt stack 0
  1804  000056                     	ds	1
  1805  000057                     _dtl_principal:
  1806                           	opt stack 0
  1807  000057                     	ds	1
  1808  000058                     _dtl_jockey:
  1809                           	opt stack 0
  1810  000058                     	ds	1
  1811  000059                     _dtl_min:
  1812                           	opt stack 0
  1813  000059                     	ds	1
  1814  00005A                     _dtl_hora:
  1815                           	opt stack 0
  1816  00005A                     	ds	1
  1817  00005B                     _dtl_ano:
  1818                           	opt stack 0
  1819  00005B                     	ds	1
  1820  00005C                     _dtl_mes:
  1821                           	opt stack 0
  1822  00005C                     	ds	1
  1823  00005D                     _dtl_dia:
  1824                           	opt stack 0
  1825  00005D                     	ds	1
  1826  00005E                     __b_ok:
  1827                           	opt stack 0
  1828  00005E                     	ds	1
  1829  00005F                     _flag_b_ok:
  1830                           	opt stack 0
  1831  00005F                     	ds	1
  1832  000060                     __b_mais:
  1833                           	opt stack 0
  1834  000060                     	ds	1
  1835  000061                     _flag_b_mais:
  1836                           	opt stack 0
  1837  000061                     	ds	1
  1838  000062                     __b_menos:
  1839                           	opt stack 0
  1840  000062                     	ds	1
  1841  000063                     _flag_b_menos:
  1842                           	opt stack 0
  1843  000063                     	ds	1
  1844  000064                     __b_esc:
  1845                           	opt stack 0
  1846  000064                     	ds	1
  1847  000065                     _flag_b_esc:
  1848                           	opt stack 0
  1849  000065                     	ds	1
  1850  000066                     _cbf:
  1851                           	opt stack 0
  1852  000066                     	ds	1
  1853  000067                     _blinkk:
  1854                           	opt stack 0
  1855  000067                     	ds	1
  1856  000068                     _ajst_rtc:
  1857                           	opt stack 0
  1858  000068                     	ds	1
  1859  000069                     _tela_menu_posi:
  1860                           	opt stack 0
  1861  000069                     	ds	1
  1862  00006A                     _sub_menu_posi:
  1863                           	opt stack 0
  1864  00006A                     	ds	1
  1865  00006B                     _tempo_limite_partida:
  1866                           	opt stack 0
  1867  00006B                     	ds	1
  1868  00006C                     _tempo_partida:
  1869                           	opt stack 0
  1870  00006C                     	ds	1
  1871  00006D                     _qtd_leitura:
  1872                           	opt stack 0
  1873  00006D                     	ds	1
  1874  00006E                     __sec_aux:
  1875                           	opt stack 0
  1876  00006E                     	ds	1
  1877  00006F                     __sec_partida:
  1878                           	opt stack 0
  1879  00006F                     	ds	1
  1880  000070                     _base_sec:
  1881                           	opt stack 0
  1882  000070                     	ds	1
  1883  000071                     _etapaTesteBombas:
  1884                           	opt stack 0
  1885  000071                     	ds	1
  1886  000072                     _flagErroTransdutor:
  1887                           	opt stack 0
  1888  000072                     	ds	1
  1889  000073                     _flagTexto:
  1890                           	opt stack 0
  1891  000073                     	ds	1
  1892  000074                     _timerTrocarTextoLcd:
  1893                           	opt stack 0
  1894  000074                     	ds	1
  1895  000075                     _rtc:
  1896                           	opt stack 0
  1897  000075                     	ds	7
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           postdec1	equ	0xFE5
  1905                           fsr1l	equ	0xFE1
  1906                           
  1907                           	psect	bssBANK0
  1908  0000D9                     __pbssBANK0:
  1909                           	opt stack 0
  1910  0000D9                     _timerTesteBombas:
  1911                           	opt stack 0
  1912  0000D9                     	ds	2
  1913  0000DB                     _ajust_tel:
  1914                           	opt stack 0
  1915  0000DB                     	ds	1
  1916  0000DC                     _tel_posi:
  1917                           	opt stack 0
  1918  0000DC                     	ds	1
  1919  0000DD                     __menu_posi:
  1920                           	opt stack 0
  1921  0000DD                     	ds	1
  1922  0000DE                     _menu_posi:
  1923                           	opt stack 0
  1924  0000DE                     	ds	1
  1925  0000DF                     _option_posi:
  1926                           	opt stack 0
  1927  0000DF                     	ds	1
  1928  0000E0                     _sp_estacionaria:
  1929                           	opt stack 0
  1930  0000E0                     	ds	1
  1931  0000E1                     _sp_principal:
  1932                           	opt stack 0
  1933  0000E1                     	ds	1
  1934  0000E2                     _sp_jockey:
  1935                           	opt stack 0
  1936  0000E2                     	ds	1
  1937  0000E3                     _sp_pressao_rede:
  1938                           	opt stack 0
  1939  0000E3                     	ds	1
  1940  0000E4                     _tempo_limite_teste_estacionaria:
  1941                           	opt stack 0
  1942  0000E4                     	ds	1
  1943  0000E5                     _tempo_limite_estacionaria:
  1944                           	opt stack 0
  1945  0000E5                     	ds	1
  1946  0000E6                     _horario_de_teste:
  1947                           	opt stack 0
  1948  0000E6                     	ds	1
  1949  0000E7                     _dias_restante_teste:
  1950                           	opt stack 0
  1951  0000E7                     	ds	1
  1952  0000E8                     _intervalo_teste_dia:
  1953                           	opt stack 0
  1954  0000E8                     	ds	1
  1955  0000E9                     __ano:
  1956                           	opt stack 0
  1957  0000E9                     	ds	1
  1958  0000EA                     __mes:
  1959                           	opt stack 0
  1960  0000EA                     	ds	1
  1961  0000EB                     __dia:
  1962                           	opt stack 0
  1963  0000EB                     	ds	1
  1964  0000EC                     __hor:
  1965                           	opt stack 0
  1966  0000EC                     	ds	1
  1967  0000ED                     __min:
  1968                           	opt stack 0
  1969  0000ED                     	ds	1
  1970  0000EE                     __sec:
  1971                           	opt stack 0
  1972  0000EE                     	ds	1
  1973  0000EF                     _habilitaTesteAutomatico:
  1974                           	opt stack 0
  1975  0000EF                     	ds	1
  1976  0000F0                     _flagEstacionariaLigada:
  1977                           	opt stack 0
  1978  0000F0                     	ds	1
  1979  0000F1                     _executandoTeste:
  1980                           	opt stack 0
  1981  0000F1                     	ds	1
  1982  0000F2                     _ocorrendoIncendio:
  1983                           	opt stack 0
  1984  0000F2                     	ds	1
  1985  0000F3                     _codigoErro:
  1986                           	opt stack 0
  1987  0000F3                     	ds	1
  1988  0000F4                     _gsmOcupado:
  1989                           	opt stack 0
  1990  0000F4                     	ds	1
  1991  0000F5                     _timerEtapaComunicacao:
  1992                           	opt stack 0
  1993  0000F5                     	ds	1
  1994  0000F6                     _timerReenvioSMS:
  1995                           	opt stack 0
  1996  0000F6                     	ds	1
  1997  0000F7                     _telefoneSelecionado:
  1998                           	opt stack 0
  1999  0000F7                     	ds	1
  2000                           tblptru	equ	0xFF8
  2001                           tblptrh	equ	0xFF7
  2002                           tblptrl	equ	0xFF6
  2003                           tablat	equ	0xFF5
  2004                           postinc0	equ	0xFEE
  2005                           wreg	equ	0xFE8
  2006                           postdec1	equ	0xFE5
  2007                           fsr1l	equ	0xFE1
  2008                           
  2009                           	psect	dataBANK0
  2010  0000F8                     __pdataBANK0:
  2011                           	opt stack 0
  2012  0000F8                     _pressao:
  2013                           	opt stack 0
  2014  0000F8                     	ds	2
  2015  0000FA                     _dtl_posicao:
  2016                           	opt stack 0
  2017  0000FA                     	ds	1
  2018  0000FB                     _status_estacionaria:
  2019                           	opt stack 0
  2020  0000FB                     	ds	1
  2021  0000FC                     _status_principal:
  2022                           	opt stack 0
  2023  0000FC                     	ds	1
  2024  0000FD                     _status_jockey:
  2025                           	opt stack 0
  2026  0000FD                     	ds	1
  2027  0000FE                     _timerVerificarSinal:
  2028                           	opt stack 0
  2029  0000FE                     	ds	1
  2030  0000FF                     _intensidadeSinal:
  2031                           	opt stack 0
  2032  0000FF                     	ds	1
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           postdec1	equ	0xFE5
  2040                           fsr1l	equ	0xFE1
  2041                           
  2042                           	psect	bssBANK1
  2043  000100                     __pbssBANK1:
  2044                           	opt stack 0
  2045  000100                     _bufferSerial:
  2046                           	opt stack 0
  2047  000100                     	ds	60
  2048  00013C                     _line4:
  2049                           	opt stack 0
  2050  00013C                     	ds	21
  2051  000151                     _line3:
  2052                           	opt stack 0
  2053  000151                     	ds	21
  2054  000166                     _line2:
  2055                           	opt stack 0
  2056  000166                     	ds	21
  2057  00017B                     _line1:
  2058                           	opt stack 0
  2059  00017B                     	ds	21
  2060  000190                     _bufferAUX:
  2061                           	opt stack 0
  2062  000190                     	ds	20
  2063  0001A4                     _tel2:
  2064                           	opt stack 0
  2065  0001A4                     	ds	12
  2066  0001B0                     _tel1:
  2067                           	opt stack 0
  2068  0001B0                     	ds	12
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           postinc0	equ	0xFEE
  2074                           wreg	equ	0xFE8
  2075                           postdec1	equ	0xFE5
  2076                           fsr1l	equ	0xFE1
  2077                           
  2078                           	psect	dataBANK1
  2079  0001BC                     __pdataBANK1:
  2080                           	opt stack 0
  2081  0001BC                     intToFloatStr@F2544:
  2082                           	opt stack 0
  2083  0001BC                     	ds	4
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           postdec1	equ	0xFE5
  2091                           fsr1l	equ	0xFE1
  2092                           
  2093                           	psect	cstackBANK0
  2094  000080                     __pcstackBANK0:
  2095                           	opt stack 0
  2096  000080                     ??_isdigit:
  2097  000080                     ??_setShiftREG:
  2098  000080                     ??_I2C_Wait:
  2099  000080                     ?_strlen:
  2100                           	opt stack 0
  2101  000080                     ?_strchr:
  2102                           	opt stack 0
  2103  000080                     ?___wmul:
  2104                           	opt stack 0
  2105  000080                     ?___awdiv:
  2106                           	opt stack 0
  2107  000080                     ?___awmod:
  2108                           	opt stack 0
  2109  000080                     ?___lwdiv:
  2110                           	opt stack 0
  2111  000080                     ?___lldiv:
  2112                           	opt stack 0
  2113  000080                     putch@c:
  2114                           	opt stack 0
  2115  000080                     clearShiftREG@i:
  2116                           	opt stack 0
  2117  000080                     btPress@bt:
  2118                           	opt stack 0
  2119  000080                     Lcd_Port@a:
  2120                           	opt stack 0
  2121  000080                     BCDtoDEC@val:
  2122                           	opt stack 0
  2123  000080                     writeChar@hex:
  2124                           	opt stack 0
  2125  000080                     blink@line:
  2126                           	opt stack 0
  2127  000080                     delay@x:
  2128                           	opt stack 0
  2129  000080                     ___wmul@multiplier:
  2130                           	opt stack 0
  2131  000080                     ___awdiv@dividend:
  2132                           	opt stack 0
  2133  000080                     ___awmod@dividend:
  2134                           	opt stack 0
  2135  000080                     ___lwdiv@dividend:
  2136                           	opt stack 0
  2137  000080                     memset@p1:
  2138                           	opt stack 0
  2139  000080                     strlen@s:
  2140                           	opt stack 0
  2141  000080                     strchr@ptr:
  2142                           	opt stack 0
  2143  000080                     ___lldiv@dividend:
  2144                           	opt stack 0
  2145                           
  2146                           ; 4 bytes @ 0x0
  2147  000080                     	ds	1
  2148  000081                     ??_Lcd_Cmd:
  2149  000081                     ?_I2C_Read:
  2150                           	opt stack 0
  2151  000081                     setShiftREG@i:
  2152                           	opt stack 0
  2153  000081                     Lcd_Write_Char@tempp:
  2154                           	opt stack 0
  2155  000081                     _isdigit$1865:
  2156                           	opt stack 0
  2157  000081                     I2C_Read@a:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x1
  2161  000081                     	ds	1
  2162  000082                     ??_delay:
  2163  000082                     ??_strlen:
  2164  000082                     Lcd_Cmd@a:
  2165                           	opt stack 0
  2166  000082                     Lcd_Write_Char@y:
  2167                           	opt stack 0
  2168  000082                     blink@start:
  2169                           	opt stack 0
  2170  000082                     isdigit@c:
  2171                           	opt stack 0
  2172  000082                     ___wmul@multiplicand:
  2173                           	opt stack 0
  2174  000082                     ___awdiv@divisor:
  2175                           	opt stack 0
  2176  000082                     ___awmod@divisor:
  2177                           	opt stack 0
  2178  000082                     ___lwdiv@divisor:
  2179                           	opt stack 0
  2180  000082                     memset@c:
  2181                           	opt stack 0
  2182  000082                     strchr@chr:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x2
  2186  000082                     	ds	1
  2187  000083                     ??_Lcd_Init:
  2188  000083                     partidaBombaEstacionaria@acao:
  2189                           	opt stack 0
  2190  000083                     Lcd_Set_Cursor@b:
  2191                           	opt stack 0
  2192  000083                     Lcd_Write_Char@a:
  2193                           	opt stack 0
  2194  000083                     blink@end:
  2195                           	opt stack 0
  2196  000083                     I2C_Read@temp:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0x3
  2200  000083                     	ds	1
  2201  000084                     ??_criarCaracteresCGRAM:
  2202  000084                     Lcd_Set_Cursor@a:
  2203                           	opt stack 0
  2204  000084                     blink@i:
  2205                           	opt stack 0
  2206  000084                     ___awdiv@counter:
  2207                           	opt stack 0
  2208  000084                     ___awmod@counter:
  2209                           	opt stack 0
  2210  000084                     Lcd_Write_String@a:
  2211                           	opt stack 0
  2212  000084                     ___wmul@product:
  2213                           	opt stack 0
  2214  000084                     ___lwdiv@quotient:
  2215                           	opt stack 0
  2216  000084                     memset@n:
  2217                           	opt stack 0
  2218  000084                     strlen@cp:
  2219                           	opt stack 0
  2220  000084                     ___lldiv@divisor:
  2221                           	opt stack 0
  2222                           
  2223                           ; 4 bytes @ 0x4
  2224  000084                     	ds	1
  2225  000085                     Lcd_Set_Cursor@z:
  2226                           	opt stack 0
  2227  000085                     ___awdiv@sign:
  2228                           	opt stack 0
  2229  000085                     ___awmod@sign:
  2230                           	opt stack 0
  2231                           
  2232                           ; 1 bytes @ 0x5
  2233  000085                     	ds	1
  2234  000086                     ?_strncmp:
  2235                           	opt stack 0
  2236  000086                     Lcd_Set_Cursor@y:
  2237                           	opt stack 0
  2238  000086                     Lcd_Write_String@i:
  2239                           	opt stack 0
  2240  000086                     ___lwdiv@counter:
  2241                           	opt stack 0
  2242  000086                     ___awdiv@quotient:
  2243                           	opt stack 0
  2244  000086                     memset@p:
  2245                           	opt stack 0
  2246  000086                     strncmp@s1:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x6
  2250  000086                     	ds	1
  2251  000087                     ?___lwmod:
  2252                           	opt stack 0
  2253  000087                     Lcd_Set_Cursor@temp:
  2254                           	opt stack 0
  2255  000087                     ___lwmod@dividend:
  2256                           	opt stack 0
  2257  000087                     criarCaracteresCGRAM@character:
  2258                           	opt stack 0
  2259                           
  2260                           ; 48 bytes @ 0x7
  2261  000087                     	ds	1
  2262  000088                     DECtoBCD@val:
  2263                           	opt stack 0
  2264  000088                     atualizarLCD@line1:
  2265                           	opt stack 0
  2266  000088                     strncmp@s2:
  2267                           	opt stack 0
  2268  000088                     ___lldiv@quotient:
  2269                           	opt stack 0
  2270                           
  2271                           ; 4 bytes @ 0x8
  2272  000088                     	ds	1
  2273  000089                     DECtoBCD@res:
  2274                           	opt stack 0
  2275  000089                     ___lwmod@divisor:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0x9
  2279  000089                     	ds	1
  2280  00008A                     atualizarLCD@line2:
  2281                           	opt stack 0
  2282  00008A                     I2C_Write@d:
  2283                           	opt stack 0
  2284  00008A                     strncmp@len:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0xA
  2288  00008A                     	ds	1
  2289  00008B                     ___lwmod@counter:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0xB
  2293  00008B                     	ds	1
  2294  00008C                     ??_strncmp:
  2295  00008C                     ?__doprnt:
  2296                           	opt stack 0
  2297  00008C                     writeEEPROM_ext@data:
  2298                           	opt stack 0
  2299  00008C                     readEEPROM_ext@adress:
  2300                           	opt stack 0
  2301  00008C                     ___lldiv@counter:
  2302                           	opt stack 0
  2303  00008C                     setDS1307TimeDate@ptrToUserVal:
  2304                           	opt stack 0
  2305  00008C                     getDS1307TimeDate@ptrToUserVal:
  2306                           	opt stack 0
  2307  00008C                     atualizarLCD@line3:
  2308                           	opt stack 0
  2309  00008C                     __doprnt@pb:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0xC
  2313  00008C                     	ds	1
  2314  00008D                     writeEEPROM_ext@adress:
  2315                           	opt stack 0
  2316  00008D                     readEEPROM_ext@data:
  2317                           	opt stack 0
  2318  00008D                     I2C_Master_Init@c:
  2319                           	opt stack 0
  2320                           
  2321                           ; 4 bytes @ 0xD
  2322  00008D                     	ds	1
  2323  00008E                     ??_setDS1307TimeDate:
  2324  00008E                     ??_salvarLOG:
  2325  00008E                     ?_readEEPROM16_ext:
  2326                           	opt stack 0
  2327  00008E                     atualizarLCD@line4:
  2328                           	opt stack 0
  2329  00008E                     __doprnt@f:
  2330                           	opt stack 0
  2331                           
  2332                           ; 2 bytes @ 0xE
  2333  00008E                     	ds	1
  2334  00008F                     ?_strstr:
  2335                           	opt stack 0
  2336  00008F                     salvarLOG@ultimoLogSalvo:
  2337                           	opt stack 0
  2338  00008F                     strstr@s1:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0xF
  2342  00008F                     	ds	1
  2343  000090                     ??_readEEPROM16_ext:
  2344  000090                     atualizarLCD@i:
  2345                           	opt stack 0
  2346  000090                     __doprnt@ap:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x10
  2350  000090                     	ds	1
  2351  000091                     ??_I2C_Master_Init:
  2352  000091                     readEEPROM16_ext@data:
  2353                           	opt stack 0
  2354  000091                     strstr@s2:
  2355                           	opt stack 0
  2356                           
  2357                           ; 2 bytes @ 0x11
  2358  000091                     	ds	1
  2359  000092                     ??__doprnt:
  2360                           
  2361                           ; 1 bytes @ 0x12
  2362  000092                     	ds	1
  2363  000093                     readEEPROM16_ext@adress:
  2364                           	opt stack 0
  2365  000093                     aguardaBuffer@str:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x13
  2369  000093                     	ds	1
  2370  000094                     lerParametros@verifica_memoria_nova:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x14
  2374  000094                     	ds	1
  2375  000095                     lerParametros@i:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x15
  2379  000095                     	ds	1
  2380  000096                     __doprnt@prec:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x16
  2384  000096                     	ds	1
  2385  000097                     __doprnt@val:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x17
  2389  000097                     	ds	2
  2390  000099                     __doprnt@len:
  2391                           	opt stack 0
  2392                           
  2393                           ; 2 bytes @ 0x19
  2394  000099                     	ds	2
  2395  00009B                     __doprnt@flag:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x1B
  2399  00009B                     	ds	1
  2400  00009C                     __doprnt@cp:
  2401                           	opt stack 0
  2402                           
  2403                           ; 2 bytes @ 0x1C
  2404  00009C                     	ds	2
  2405  00009E                     __doprnt@width:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x1E
  2409  00009E                     	ds	2
  2410  0000A0                     __doprnt@c:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x20
  2414  0000A0                     	ds	1
  2415  0000A1                     ?_sprintf:
  2416                           	opt stack 0
  2417  0000A1                     ?_printf:
  2418                           	opt stack 0
  2419  0000A1                     printf@f:
  2420                           	opt stack 0
  2421  0000A1                     sprintf@wh:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0x21
  2425  0000A1                     	ds	2
  2426  0000A3                     sprintf@f:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x23
  2430  0000A3                     	ds	12
  2431  0000AF                     sprintf@ap:
  2432                           	opt stack 0
  2433                           
  2434                           ; 2 bytes @ 0x2F
  2435  0000AF                     	ds	2
  2436  0000B1                     sprintf@pb:
  2437                           	opt stack 0
  2438                           
  2439                           ; 4 bytes @ 0x31
  2440  0000B1                     	ds	4
  2441  0000B5                     ??_tela_testeBombas:
  2442  0000B5                     ??_dataLoger:
  2443  0000B5                     ?_intToFloatStr:
  2444                           	opt stack 0
  2445  0000B5                     ?_getSerial:
  2446                           	opt stack 0
  2447  0000B5                     getSerial@str:
  2448                           	opt stack 0
  2449  0000B5                     printf@ap:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0x35
  2453  0000B5                     	ds	2
  2454  0000B7                     getSerial@end:
  2455                           	opt stack 0
  2456  0000B7                     _criarCaracteresCGRAM$1374:
  2457                           	opt stack 0
  2458  0000B7                     _tela_testeBombas$1417:
  2459                           	opt stack 0
  2460  0000B7                     intToFloatStr@end:
  2461                           	opt stack 0
  2462  0000B7                     printf@pb:
  2463                           	opt stack 0
  2464                           
  2465                           ; 4 bytes @ 0x37
  2466  0000B7                     	ds	1
  2467  0000B8                     ??_getSerial:
  2468                           
  2469                           ; 1 bytes @ 0x38
  2470  0000B8                     	ds	1
  2471  0000B9                     criarCaracteresCGRAM@k:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x39
  2475  0000B9                     	ds	1
  2476  0000BA                     criarCaracteresCGRAM@j:
  2477                           	opt stack 0
  2478  0000BA                     getSerial@length:
  2479                           	opt stack 0
  2480  0000BA                     _dataLoger$1436:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x3A
  2484  0000BA                     	ds	1
  2485  0000BB                     ??_comunicarTeste:
  2486  0000BB                     ??_enviaSMS:
  2487  0000BB                     criarCaracteresCGRAM@i:
  2488                           	opt stack 0
  2489  0000BB                     intToFloatStr@conv:
  2490                           	opt stack 0
  2491                           
  2492                           ; 4 bytes @ 0x3B
  2493  0000BB                     	ds	1
  2494  0000BC                     getSerial@i:
  2495                           	opt stack 0
  2496  0000BC                     _dataLoger$1442:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x3C
  2500  0000BC                     	ds	1
  2501  0000BD                     getSerial@ret:
  2502                           	opt stack 0
  2503  0000BD                     _comunicarTeste$1192:
  2504                           	opt stack 0
  2505  0000BD                     _enviaSMS$1207:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0x3D
  2509  0000BD                     	ds	1
  2510  0000BE                     _dataLoger$1447:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x3E
  2514  0000BE                     	ds	1
  2515  0000BF                     ??_configuraTelefones:
  2516  0000BF                     ?_atoi:
  2517                           	opt stack 0
  2518  0000BF                     intToFloatStr@valor:
  2519                           	opt stack 0
  2520  0000BF                     _enviaSMS$1220:
  2521                           	opt stack 0
  2522  0000BF                     atoi@s:
  2523                           	opt stack 0
  2524                           
  2525                           ; 2 bytes @ 0x3F
  2526  0000BF                     	ds	1
  2527  0000C0                     dataLoger@logs:
  2528                           	opt stack 0
  2529  0000C0                     intToFloatStr@pr:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x40
  2533  0000C0                     	ds	1
  2534  0000C1                     ??_atoi:
  2535  0000C1                     _enviaSMS$1221:
  2536                           	opt stack 0
  2537  0000C1                     _configuraTelefones$1462:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x41
  2541  0000C1                     	ds	1
  2542  0000C2                     _telaPrincipal$2376:
  2543                           	opt stack 0
  2544  0000C2                     _ajusteSP_Bombas$2377:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x42
  2548  0000C2                     	ds	1
  2549  0000C3                     configuraTelefones@i:
  2550                           	opt stack 0
  2551  0000C3                     atoi@sign:
  2552                           	opt stack 0
  2553  0000C3                     _enviaSMS$1222:
  2554                           	opt stack 0
  2555                           
  2556                           ; 2 bytes @ 0x43
  2557  0000C3                     	ds	1
  2558  0000C4                     atoi@a:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x44
  2562  0000C4                     	ds	1
  2563  0000C5                     _enviaSMS$1227:
  2564                           	opt stack 0
  2565                           
  2566                           ; 2 bytes @ 0x45
  2567  0000C5                     	ds	1
  2568  0000C6                     ??_getSinalSIM800L:
  2569                           
  2570                           ; 1 bytes @ 0x46
  2571  0000C6                     	ds	1
  2572  0000C7                     enviaSMS@tipo:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x47
  2576  0000C7                     	ds	1
  2577  0000C8                     ??_acaoBombas:
  2578  0000C8                     ??_acaoTesteBombas:
  2579  0000C8                     getSinalSIM800L@sinal:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x48
  2583  0000C8                     	ds	5
  2584  0000CD                     _acaoTesteBombas$2375:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x4D
  2588  0000CD                     	ds	2
  2589  0000CF                     _acaoTesteBombas$1291:
  2590                           	opt stack 0
  2591                           
  2592                           ; 2 bytes @ 0x4F
  2593  0000CF                     	ds	2
  2594  0000D1                     _acaoTesteBombas$1307:
  2595                           	opt stack 0
  2596                           
  2597                           ; 2 bytes @ 0x51
  2598  0000D1                     	ds	2
  2599  0000D3                     _acaoTesteBombas$1312:
  2600                           	opt stack 0
  2601                           
  2602                           ; 2 bytes @ 0x53
  2603  0000D3                     	ds	2
  2604  0000D5                     _acaoTesteBombas$1317:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x55
  2608  0000D5                     	ds	2
  2609  0000D7                     acaoTesteBombas@intervalo:
  2610                           	opt stack 0
  2611                           
  2612                           ; 1 bytes @ 0x57
  2613  0000D7                     	ds	1
  2614  0000D8                     acaoTesteBombas@i:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x58
  2618  0000D8                     	ds	1
  2619  0000D9                     tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           postinc0	equ	0xFEE
  2624                           wreg	equ	0xFE8
  2625                           postdec1	equ	0xFE5
  2626                           fsr1l	equ	0xFE1
  2627                           
  2628                           ; 1 bytes @ 0x59
  2629                           
  2630                           	psect	cstackCOMRAM
  2631  000001                     __pcstackCOMRAM:
  2632                           	opt stack 0
  2633  000001                     ??i2_I2C_Wait:
  2634  000001                     ?_readADC:
  2635                           	opt stack 0
  2636  000001                     ?___ftpack:
  2637                           	opt stack 0
  2638  000001                     i2BCDtoDEC@val:
  2639                           	opt stack 0
  2640  000001                     i2delay@x:
  2641                           	opt stack 0
  2642  000001                     ___ftpack@arg:
  2643                           	opt stack 0
  2644  000001                     ___ftge@ff1:
  2645                           	opt stack 0
  2646                           
  2647                           ; 3 bytes @ 0x0
  2648  000001                     	ds	1
  2649  000002                     ?i2_I2C_Read:
  2650                           	opt stack 0
  2651  000002                     i2I2C_Write@d:
  2652                           	opt stack 0
  2653  000002                     i2I2C_Read@a:
  2654                           	opt stack 0
  2655                           
  2656                           ; 2 bytes @ 0x1
  2657  000002                     	ds	1
  2658  000003                     ??_readADC:
  2659  000003                     ??i2_delay:
  2660                           
  2661                           ; 1 bytes @ 0x2
  2662  000003                     	ds	1
  2663  000004                     ___ftpack@exp:
  2664                           	opt stack 0
  2665  000004                     i2writeEEPROM_ext@data:
  2666                           	opt stack 0
  2667  000004                     i2I2C_Read@temp:
  2668                           	opt stack 0
  2669  000004                     ___ftge@ff2:
  2670                           	opt stack 0
  2671                           
  2672                           ; 3 bytes @ 0x3
  2673  000004                     	ds	1
  2674  000005                     ___ftpack@sign:
  2675                           	opt stack 0
  2676  000005                     i2writeEEPROM_ext@adress:
  2677                           	opt stack 0
  2678                           
  2679                           ; 1 bytes @ 0x4
  2680  000005                     	ds	1
  2681  000006                     ??___ftpack:
  2682  000006                     writeEEPROM16_ext@data:
  2683                           	opt stack 0
  2684  000006                     i2getDS1307TimeDate@ptrToUserVal:
  2685                           	opt stack 0
  2686                           
  2687                           ; 2 bytes @ 0x5
  2688  000006                     	ds	1
  2689  000007                     ??___ftge:
  2690                           
  2691                           ; 1 bytes @ 0x6
  2692  000007                     	ds	1
  2693  000008                     writeEEPROM16_ext@adress:
  2694                           	opt stack 0
  2695                           
  2696                           ; 1 bytes @ 0x7
  2697  000008                     	ds	1
  2698  000009                     ?___lwtoft:
  2699                           	opt stack 0
  2700  000009                     _timer$1320:
  2701                           	opt stack 0
  2702  000009                     ___lwtoft@c:
  2703                           	opt stack 0
  2704                           
  2705                           ; 2 bytes @ 0x8
  2706  000009                     	ds	2
  2707  00000B                     _timer$1321:
  2708                           	opt stack 0
  2709                           
  2710                           ; 2 bytes @ 0xA
  2711  00000B                     	ds	1
  2712  00000C                     ?___ftmul:
  2713                           	opt stack 0
  2714  00000C                     ___ftmul@f1:
  2715                           	opt stack 0
  2716                           
  2717                           ; 3 bytes @ 0xB
  2718  00000C                     	ds	1
  2719  00000D                     _timer$1322:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0xC
  2723  00000D                     	ds	2
  2724  00000F                     _timer$1323:
  2725                           	opt stack 0
  2726  00000F                     ___ftmul@f2:
  2727                           	opt stack 0
  2728                           
  2729                           ; 3 bytes @ 0xE
  2730  00000F                     	ds	3
  2731  000012                     ??___ftmul:
  2732                           
  2733                           ; 1 bytes @ 0x11
  2734  000012                     	ds	3
  2735  000015                     ___ftmul@exp:
  2736                           	opt stack 0
  2737                           
  2738                           ; 1 bytes @ 0x14
  2739  000015                     	ds	1
  2740  000016                     ___ftmul@f3_as_product:
  2741                           	opt stack 0
  2742                           
  2743                           ; 3 bytes @ 0x15
  2744  000016                     	ds	3
  2745  000019                     ___ftmul@cntr:
  2746                           	opt stack 0
  2747                           
  2748                           ; 1 bytes @ 0x18
  2749  000019                     	ds	1
  2750  00001A                     ___ftmul@sign:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0x19
  2754  00001A                     	ds	1
  2755  00001B                     ?___ftadd:
  2756                           	opt stack 0
  2757  00001B                     ?___ftdiv:
  2758                           	opt stack 0
  2759  00001B                     ?___fttol:
  2760                           	opt stack 0
  2761  00001B                     ___ftadd@f1:
  2762                           	opt stack 0
  2763  00001B                     ___ftdiv@f1:
  2764                           	opt stack 0
  2765  00001B                     ___fttol@f1:
  2766                           	opt stack 0
  2767                           
  2768                           ; 3 bytes @ 0x1A
  2769  00001B                     	ds	3
  2770  00001E                     ___ftadd@f2:
  2771                           	opt stack 0
  2772  00001E                     ___ftdiv@f2:
  2773                           	opt stack 0
  2774                           
  2775                           ; 3 bytes @ 0x1D
  2776  00001E                     	ds	1
  2777  00001F                     ??___fttol:
  2778                           
  2779                           ; 1 bytes @ 0x1E
  2780  00001F                     	ds	2
  2781  000021                     ??___ftadd:
  2782  000021                     ??___ftdiv:
  2783                           
  2784                           ; 1 bytes @ 0x20
  2785  000021                     	ds	3
  2786  000024                     ___ftadd@sign:
  2787                           	opt stack 0
  2788  000024                     ___ftdiv@cntr:
  2789                           	opt stack 0
  2790  000024                     ___fttol@sign1:
  2791                           	opt stack 0
  2792                           
  2793                           ; 1 bytes @ 0x23
  2794  000024                     	ds	1
  2795  000025                     ___ftadd@exp2:
  2796                           	opt stack 0
  2797  000025                     ___ftdiv@f3:
  2798                           	opt stack 0
  2799  000025                     ___fttol@lval:
  2800                           	opt stack 0
  2801                           
  2802                           ; 4 bytes @ 0x24
  2803  000025                     	ds	1
  2804  000026                     ___ftadd@exp1:
  2805                           	opt stack 0
  2806                           
  2807                           ; 1 bytes @ 0x25
  2808  000026                     	ds	2
  2809  000028                     ___ftdiv@exp:
  2810                           	opt stack 0
  2811                           
  2812                           ; 1 bytes @ 0x27
  2813  000028                     	ds	1
  2814  000029                     ___ftdiv@sign:
  2815                           	opt stack 0
  2816  000029                     ___fttol@exp1:
  2817                           	opt stack 0
  2818                           
  2819                           ; 1 bytes @ 0x28
  2820  000029                     	ds	1
  2821  00002A                     lerTransdutor@i:
  2822                           	opt stack 0
  2823                           
  2824                           ; 1 bytes @ 0x29
  2825  00002A                     	ds	1
  2826  00002B                     lerTransdutor@_pressao:
  2827                           	opt stack 0
  2828                           
  2829                           ; 3 bytes @ 0x2A
  2830  00002B                     	ds	3
  2831  00002E                     lerTransdutor@tensao:
  2832                           	opt stack 0
  2833                           
  2834                           ; 3 bytes @ 0x2D
  2835  00002E                     	ds	3
  2836  000031                     ??_TIMER:
  2837                           
  2838                           ; 1 bytes @ 0x30
  2839  000031                     	ds	18
  2840  000043                     TIMER@c:
  2841                           	opt stack 0
  2842                           
  2843                           ; 1 bytes @ 0x42
  2844  000043                     	ds	1
  2845                           tblptru	equ	0xFF8
  2846                           tblptrh	equ	0xFF7
  2847                           tblptrl	equ	0xFF6
  2848                           tablat	equ	0xFF5
  2849                           postinc0	equ	0xFEE
  2850                           wreg	equ	0xFE8
  2851                           postdec1	equ	0xFE5
  2852                           fsr1l	equ	0xFE1
  2853                           
  2854 ;;
  2855 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2856 ;;
  2857 ;; *************** function _main *****************
  2858 ;; Defined at:
  2859 ;;		line 66 in file "Main.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2873 ;;      Params:         0       0       0       0       0       0       0
  2874 ;;      Locals:         0       0       0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels required when called:   11
  2879 ;; This function calls:
  2880 ;;		_I2C_Master_Init
  2881 ;;		_Lcd_Clear
  2882 ;;		_Lcd_Init
  2883 ;;		_RTC_Init
  2884 ;;		_acaoBombas
  2885 ;;		_acaoTesteBombas
  2886 ;;		_ajusteSP_Bombas
  2887 ;;		_atualizarLCD
  2888 ;;		_btPress
  2889 ;;		_configuraRegistradores
  2890 ;;		_configuraTelefones
  2891 ;;		_configurarEstacionaria
  2892 ;;		_criarCaracteresCGRAM
  2893 ;;		_dataLoger
  2894 ;;		_delay
  2895 ;;		_getDS1307TimeDate
  2896 ;;		_getSinalSIM800L
  2897 ;;		_informacoes
  2898 ;;		_lerParametros
  2899 ;;		_setShiftREG
  2900 ;;		_sprintf
  2901 ;;		_telaPrincipal
  2902 ;;		_tela_ajusteRTC
  2903 ;;		_tela_testeBombas
  2904 ;;		_verificarIntervaloTesteBombas
  2905 ;; This function is called by:
  2906 ;;		Startup code after reset
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text0
  2911  000DCC                     __ptext0:
  2912                           	opt stack 0
  2913  000DCC                     _main:
  2914                           	opt stack 0
  2915  000DCC  FFFF               	dw	65535	; assembler added errata NOP
  2916                           
  2917                           ;Main.c: 68: configuraRegistradores();
  2918                           
  2919                           ;incstack = 0
  2920  000DCE  EC8C  F03A         	call	_configuraRegistradores	;wreg free
  2921                           
  2922                           ;Main.c: 69: I2C_Master_Init(100000);
  2923  000DD2  0EA0               	movlw	160
  2924  000DD4  0100               	movlb	0	; () banked
  2925  000DD6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2926  000DD8  0E86               	movlw	134
  2927  000DDA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2928  000DDC  0E01               	movlw	1
  2929  000DDE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2930  000DE0  0E00               	movlw	0
  2931  000DE2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2932  000DE4  EC18  F03B         	call	_I2C_Master_Init	;wreg free
  2933                           
  2934                           ;Main.c: 70: delay(200);
  2935  000DE8  0E00               	movlw	0
  2936  000DEA  0100               	movlb	0	; () banked
  2937  000DEC  6F81               	movwf	(delay@x+1)& (0+255),b
  2938  000DEE  0EC8               	movlw	200
  2939  000DF0  6F80               	movwf	delay@x& (0+255),b
  2940  000DF2  ECA8  F037         	call	_delay	;wreg free
  2941                           
  2942                           ;Main.c: 71: RTC_Init();
  2943  000DF6  ECF9  F037         	call	_RTC_Init	;wreg free
  2944                           
  2945                           ;Main.c: 72: delay(100);
  2946  000DFA  0E00               	movlw	0
  2947  000DFC  0100               	movlb	0	; () banked
  2948  000DFE  6F81               	movwf	(delay@x+1)& (0+255),b
  2949  000E00  0E64               	movlw	100
  2950  000E02  6F80               	movwf	delay@x& (0+255),b
  2951  000E04  ECA8  F037         	call	_delay	;wreg free
  2952                           
  2953                           ;Main.c: 73: getDS1307TimeDate(&rtc);
  2954  000E08  0E75               	movlw	low _rtc
  2955  000E0A  0100               	movlb	0	; () banked
  2956  000E0C  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  2957  000E0E  0E00               	movlw	high _rtc
  2958  000E10  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  2959  000E12  EC1A  F017         	call	_getDS1307TimeDate	;wreg free
  2960                           
  2961                           ;Main.c: 74: Lcd_Init();
  2962  000E16  EC77  F03C         	call	_Lcd_Init	;wreg free
  2963                           
  2964                           ;Main.c: 75: Lcd_Clear();
  2965  000E1A  EC86  F036         	call	_Lcd_Clear	;wreg free
  2966                           
  2967                           ;Main.c: 76: criarCaracteresCGRAM();
  2968  000E1E  EC2C  F01D         	call	_criarCaracteresCGRAM	;wreg free
  2969                           
  2970                           ;Main.c: 77: delay(100);
  2971  000E22  0E00               	movlw	0
  2972  000E24  0100               	movlb	0	; () banked
  2973  000E26  6F81               	movwf	(delay@x+1)& (0+255),b
  2974  000E28  0E64               	movlw	100
  2975  000E2A  6F80               	movwf	delay@x& (0+255),b
  2976  000E2C  ECA8  F037         	call	_delay	;wreg free
  2977                           
  2978                           ;Main.c: 78: lerParametros();
  2979  000E30  ECB4  F017         	call	_lerParametros	;wreg free
  2980                           
  2981                           ;Main.c: 79: sprintf(line1, "TECHNOW");
  2982  000E34  0E7B               	movlw	low _line1
  2983  000E36  0100               	movlb	0	; () banked
  2984  000E38  6FA1               	movwf	sprintf@wh& (0+255),b
  2985  000E3A  0E01               	movlw	high _line1
  2986  000E3C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2987  000E3E  0E9B               	movlw	low STR_86
  2988  000E40  6FA3               	movwf	sprintf@f& (0+255),b
  2989  000E42  0E7F               	movlw	high STR_86
  2990  000E44  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2991  000E46  ECC9  F039         	call	_sprintf	;wreg free
  2992                           
  2993                           ;Main.c: 80: sprintf(line2, "Sistemas embarcados");
  2994  000E4A  0E66               	movlw	low _line2
  2995  000E4C  0100               	movlb	0	; () banked
  2996  000E4E  6FA1               	movwf	sprintf@wh& (0+255),b
  2997  000E50  0E01               	movlw	high _line2
  2998  000E52  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2999  000E54  0ED8               	movlw	low STR_87
  3000  000E56  6FA3               	movwf	sprintf@f& (0+255),b
  3001  000E58  0E7C               	movlw	high STR_87
  3002  000E5A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3003  000E5C  ECC9  F039         	call	_sprintf	;wreg free
  3004                           
  3005                           ;Main.c: 81: sprintf(line3, "Versao Soft.:");
  3006  000E60  0E51               	movlw	low _line3
  3007  000E62  0100               	movlb	0	; () banked
  3008  000E64  6FA1               	movwf	sprintf@wh& (0+255),b
  3009  000E66  0E01               	movlw	high _line3
  3010  000E68  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3011  000E6A  0E94               	movlw	low STR_112
  3012  000E6C  6FA3               	movwf	sprintf@f& (0+255),b
  3013  000E6E  0E7E               	movlw	high STR_112
  3014  000E70  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3015  000E72  ECC9  F039         	call	_sprintf	;wreg free
  3016                           
  3017                           ;Main.c: 82: sprintf(&line4[9], "%s", "Aug 25 2019");
  3018  000E76  0E45               	movlw	low (_line4+9)
  3019  000E78  0100               	movlb	0	; () banked
  3020  000E7A  6FA1               	movwf	sprintf@wh& (0+255),b
  3021  000E7C  0E01               	movlw	high (_line4+9)
  3022  000E7E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3023  000E80  0E12               	movlw	low (STR_89+9)
  3024  000E82  6FA3               	movwf	sprintf@f& (0+255),b
  3025  000E84  0E7F               	movlw	high (STR_89+9)
  3026  000E86  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3027  000E88  0EE5               	movlw	low STR_15
  3028  000E8A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3029  000E8C  0E7E               	movlw	high STR_15
  3030  000E8E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3031  000E90  ECC9  F039         	call	_sprintf	;wreg free
  3032                           
  3033                           ;Main.c: 83: atualizarLCD(line1, line2, line3, line4);
  3034  000E94  0E7B               	movlw	low _line1
  3035  000E96  0100               	movlb	0	; () banked
  3036  000E98  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3037  000E9A  0E01               	movlw	high _line1
  3038  000E9C  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3039  000E9E  0E66               	movlw	low _line2
  3040  000EA0  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3041  000EA2  0E01               	movlw	high _line2
  3042  000EA4  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3043  000EA6  0E51               	movlw	low _line3
  3044  000EA8  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3045  000EAA  0E01               	movlw	high _line3
  3046  000EAC  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3047  000EAE  0E3C               	movlw	low _line4
  3048  000EB0  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3049  000EB2  0E01               	movlw	high _line4
  3050  000EB4  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3051  000EB6  ECC3  F01C         	call	_atualizarLCD	;wreg free
  3052                           
  3053                           ;Main.c: 84: delay(2500);
  3054  000EBA  0E09               	movlw	9
  3055  000EBC  0100               	movlb	0	; () banked
  3056  000EBE  6F81               	movwf	(delay@x+1)& (0+255),b
  3057  000EC0  0EC4               	movlw	196
  3058  000EC2  6F80               	movwf	delay@x& (0+255),b
  3059  000EC4  ECA8  F037         	call	_delay	;wreg free
  3060  000EC8                     l898:
  3061  000EC8  FFFF               	dw	65535	; assembler added errata NOP
  3062  000ECA  0004               	clrwdt		;# 
  3063                           
  3064                           ;Main.c: 90: if (!executandoTeste && !flagErroTransdutor) {
  3065  000ECC  0100               	movlb	0	; () banked
  3066  000ECE  51F1               	movf	_executandoTeste& (0+255),w,b
  3067  000ED0  A4D8               	btfss	status,2,c
  3068  000ED2  D004               	goto	l899
  3069                           
  3070                           ; BSR set to: 0
  3071  000ED4  5072               	movf	_flagErroTransdutor,w,c
  3072  000ED6  B4D8               	btfsc	status,2,c
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;Main.c: 91: acaoBombas();
  3076  000ED8  EC47  F018         	call	_acaoBombas	;wreg free
  3077  000EDC                     l899:
  3078  000EDC  FFFF               	dw	65535	; assembler added errata NOP
  3079                           
  3080                           ;Main.c: 92: }
  3081                           ;Main.c: 94: verificarIntervaloTesteBombas();
  3082  000EDE  EC63  F039         	call	_verificarIntervaloTesteBombas	;wreg free
  3083                           
  3084                           ;Main.c: 96: setShiftREG();
  3085  000EE2  ECED  F039         	call	_setShiftREG	;wreg free
  3086                           
  3087                           ;Main.c: 97: getSinalSIM800L();
  3088  000EE6  ECCF  F014         	call	_getSinalSIM800L	;wreg free
  3089                           
  3090                           ;Main.c: 100: switch (menu_posi) {
  3091  000EEA  D085               	goto	l900
  3092  000EEC  FFFF               	dw	65535	; assembler added errata NOP
  3093                           
  3094                           ;Main.c: 102: telaPrincipal();
  3095  000EEE  EC05  F011         	call	_telaPrincipal	;wreg free
  3096                           
  3097                           ;Main.c: 104: break;
  3098  000EF2  D0A6               	goto	l902
  3099  000EF4  FFFF               	dw	65535	; assembler added errata NOP
  3100                           
  3101                           ;Main.c: 106: sprintf(&line1[1], "DATA/HORA");
  3102  000EF6  0E7C               	movlw	low (_line1+1)
  3103  000EF8  0100               	movlb	0	; () banked
  3104  000EFA  6FA1               	movwf	sprintf@wh& (0+255),b
  3105  000EFC  0E01               	movlw	high (_line1+1)
  3106  000EFE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3107  000F00  0E57               	movlw	low STR_115
  3108  000F02  6FA3               	movwf	sprintf@f& (0+255),b
  3109  000F04  0E7F               	movlw	high STR_115
  3110  000F06  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3111  000F08  ECC9  F039         	call	_sprintf	;wreg free
  3112                           
  3113                           ;Main.c: 107: sprintf(&line2[1], "PRESSAO DA REDE");
  3114  000F0C  0E67               	movlw	low (_line2+1)
  3115  000F0E  0100               	movlb	0	; () banked
  3116  000F10  6FA1               	movwf	sprintf@wh& (0+255),b
  3117  000F12  0E01               	movlw	high (_line2+1)
  3118  000F14  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3119  000F16  0E1B               	movlw	low STR_116
  3120  000F18  6FA3               	movwf	sprintf@f& (0+255),b
  3121  000F1A  0E7E               	movlw	high STR_116
  3122  000F1C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3123  000F1E  ECC9  F039         	call	_sprintf	;wreg free
  3124                           
  3125                           ;Main.c: 108: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  3126  000F22  0E52               	movlw	low (_line3+1)
  3127  000F24  0100               	movlb	0	; () banked
  3128  000F26  6FA1               	movwf	sprintf@wh& (0+255),b
  3129  000F28  0E01               	movlw	high (_line3+1)
  3130  000F2A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3131  000F2C  0E71               	movlw	low STR_117
  3132  000F2E  6FA3               	movwf	sprintf@f& (0+255),b
  3133  000F30  0E7D               	movlw	high STR_117
  3134  000F32  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3135  000F34  ECC9  F039         	call	_sprintf	;wreg free
  3136                           
  3137                           ;Main.c: 109: sprintf(&line4[1], "TELEFONES");
  3138  000F38  0E3D               	movlw	low (_line4+1)
  3139  000F3A  0100               	movlb	0	; () banked
  3140  000F3C  6FA1               	movwf	sprintf@wh& (0+255),b
  3141  000F3E  0E01               	movlw	high (_line4+1)
  3142  000F40  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3143  000F42  0E6B               	movlw	low STR_118
  3144  000F44  6FA3               	movwf	sprintf@f& (0+255),b
  3145  000F46  0E7F               	movlw	high STR_118
  3146  000F48  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3147  000F4A  ECC9  F039         	call	_sprintf	;wreg free
  3148                           
  3149                           ;Main.c: 110: break;
  3150  000F4E  D078               	goto	l902
  3151  000F50  FFFF               	dw	65535	; assembler added errata NOP
  3152                           
  3153                           ;Main.c: 112: sprintf(&line1[1], "PERIODO DE TESTES");
  3154  000F52  0E7C               	movlw	low (_line1+1)
  3155  000F54  0100               	movlb	0	; () banked
  3156  000F56  6FA1               	movwf	sprintf@wh& (0+255),b
  3157  000F58  0E01               	movlw	high (_line1+1)
  3158  000F5A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3159  000F5C  0E83               	movlw	low STR_119
  3160  000F5E  6FA3               	movwf	sprintf@f& (0+255),b
  3161  000F60  0E7D               	movlw	high STR_119
  3162  000F62  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3163  000F64  ECC9  F039         	call	_sprintf	;wreg free
  3164                           
  3165                           ;Main.c: 113: sprintf(&line2[1], "DATALOGER");
  3166  000F68  0E67               	movlw	low (_line2+1)
  3167  000F6A  0100               	movlb	0	; () banked
  3168  000F6C  6FA1               	movwf	sprintf@wh& (0+255),b
  3169  000F6E  0E01               	movlw	high (_line2+1)
  3170  000F70  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3171  000F72  0E61               	movlw	low STR_120
  3172  000F74  6FA3               	movwf	sprintf@f& (0+255),b
  3173  000F76  0E7F               	movlw	high STR_120
  3174  000F78  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3175  000F7A  ECC9  F039         	call	_sprintf	;wreg free
  3176                           
  3177                           ;Main.c: 114: sprintf(&line3[1], "INFO VERSAO");
  3178  000F7E  0E52               	movlw	low (_line3+1)
  3179  000F80  0100               	movlb	0	; () banked
  3180  000F82  6FA1               	movwf	sprintf@wh& (0+255),b
  3181  000F84  0E01               	movlw	high (_line3+1)
  3182  000F86  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3183  000F88  0EFD               	movlw	low STR_121
  3184  000F8A  6FA3               	movwf	sprintf@f& (0+255),b
  3185  000F8C  0E7E               	movlw	high STR_121
  3186  000F8E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3187  000F90  ECC9  F039         	call	_sprintf	;wreg free
  3188                           
  3189                           ;Main.c: 115: sprintf(&line4[1], "Iniciar Testes");
  3190  000F94  0E3D               	movlw	low (_line4+1)
  3191  000F96  0100               	movlb	0	; () banked
  3192  000F98  6FA1               	movwf	sprintf@wh& (0+255),b
  3193  000F9A  0E01               	movlw	high (_line4+1)
  3194  000F9C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3195  000F9E  0E85               	movlw	low STR_122
  3196  000FA0  6FA3               	movwf	sprintf@f& (0+255),b
  3197  000FA2  0E7E               	movlw	high STR_122
  3198  000FA4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3199  000FA6  ECC9  F039         	call	_sprintf	;wreg free
  3200                           
  3201                           ;Main.c: 116: break;
  3202  000FAA  D04A               	goto	l902
  3203  000FAC  FFFF               	dw	65535	; assembler added errata NOP
  3204                           
  3205                           ;Main.c: 118: tela_ajusteRTC();
  3206  000FAE  ECD0  F00E         	call	_tela_ajusteRTC	;wreg free
  3207                           
  3208                           ;Main.c: 119: break;
  3209  000FB2  D046               	goto	l902
  3210  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  3211                           
  3212                           ;Main.c: 121: ajusteSP_Bombas();
  3213  000FB6  EC87  F00C         	call	_ajusteSP_Bombas	;wreg free
  3214                           
  3215                           ;Main.c: 122: break;
  3216  000FBA  D042               	goto	l902
  3217  000FBC  FFFF               	dw	65535	; assembler added errata NOP
  3218                           
  3219                           ;Main.c: 124: configurarEstacionaria();
  3220  000FBE  EC63  F016         	call	_configurarEstacionaria	;wreg free
  3221                           
  3222                           ;Main.c: 125: break;
  3223  000FC2  D03E               	goto	l902
  3224  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3225                           
  3226                           ;Main.c: 127: configuraTelefones();
  3227  000FC6  EC1A  F009         	call	_configuraTelefones	;wreg free
  3228                           
  3229                           ;Main.c: 128: break;
  3230  000FCA  D03A               	goto	l902
  3231  000FCC  FFFF               	dw	65535	; assembler added errata NOP
  3232                           
  3233                           ;Main.c: 130: tela_testeBombas();
  3234  000FCE  ECFF  F012         	call	_tela_testeBombas	;wreg free
  3235                           
  3236                           ;Main.c: 131: break;
  3237  000FD2  D036               	goto	l902
  3238  000FD4  FFFF               	dw	65535	; assembler added errata NOP
  3239                           
  3240                           ;Main.c: 133: dataLoger();
  3241  000FD6  ECB4  F00D         	call	_dataLoger	;wreg free
  3242                           
  3243                           ;Main.c: 134: break;
  3244  000FDA  D032               	goto	l902
  3245  000FDC  FFFF               	dw	65535	; assembler added errata NOP
  3246                           
  3247                           ;Main.c: 136: informacoes();
  3248  000FDE  ECBB  F03B         	call	_informacoes	;wreg free
  3249                           
  3250                           ;Main.c: 137: break;
  3251  000FE2  D02E               	goto	l902
  3252  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  3253                           
  3254                           ;Main.c: 139: acaoTesteBombas();
  3255  000FE6  EC8D  F004         	call	_acaoTesteBombas	;wreg free
  3256                           
  3257                           ;Main.c: 140: break;
  3258  000FEA  D02A               	goto	l902
  3259  000FEC  FFFF               	dw	65535	; assembler added errata NOP
  3260  000FEE  0E00               	movlw	0
  3261  000FF0  0100               	movlb	0	; () banked
  3262  000FF2  6FDE               	movwf	_menu_posi& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;Main.c: 144: }
  3266                           
  3267                           ;Main.c: 143: break;
  3268  000FF4  D025               	goto	l902
  3269  000FF6                     l900:
  3270  000FF6  FFFF               	dw	65535	; assembler added errata NOP
  3271                           
  3272                           ; BSR set to: 0
  3273  000FF8  0100               	movlb	0	; () banked
  3274  000FFA  51DE               	movf	_menu_posi& (0+255),w,b
  3275                           
  3276                           ; Switch size 1, requested type "space"
  3277                           ; Number of cases is 11, Range of values is 0 to 28
  3278                           ; switch strategies available:
  3279                           ; Name         Instructions Cycles
  3280                           ; simple_byte           34    18 (average)
  3281                           ;	Chosen strategy is simple_byte
  3282  000FFC  0A00               	xorlw	0	; case 0
  3283  000FFE  B4D8               	btfsc	status,2,c
  3284  001000  D775               	goto	l901
  3285  001002  0A01               	xorlw	1	; case 1
  3286  001004  B4D8               	btfsc	status,2,c
  3287  001006  D776               	goto	l903
  3288  001008  0A03               	xorlw	3	; case 2
  3289  00100A  B4D8               	btfsc	status,2,c
  3290  00100C  D7A1               	goto	l904
  3291  00100E  0A16               	xorlw	22	; case 20
  3292  001010  B4D8               	btfsc	status,2,c
  3293  001012  D7CC               	goto	l905
  3294  001014  0A01               	xorlw	1	; case 21
  3295  001016  B4D8               	btfsc	status,2,c
  3296  001018  D7CD               	goto	l906
  3297  00101A  0A03               	xorlw	3	; case 22
  3298  00101C  B4D8               	btfsc	status,2,c
  3299  00101E  D7CE               	goto	l907
  3300  001020  0A01               	xorlw	1	; case 23
  3301  001022  B4D8               	btfsc	status,2,c
  3302  001024  D7CF               	goto	l908
  3303  001026  0A0F               	xorlw	15	; case 24
  3304  001028  B4D8               	btfsc	status,2,c
  3305  00102A  D7D0               	goto	l909
  3306  00102C  0A01               	xorlw	1	; case 25
  3307  00102E  B4D8               	btfsc	status,2,c
  3308  001030  D7D1               	goto	l910
  3309  001032  0A02               	xorlw	2	; case 27
  3310  001034  B4D8               	btfsc	status,2,c
  3311  001036  D7D2               	goto	l911
  3312  001038  0A07               	xorlw	7	; case 28
  3313  00103A  B4D8               	btfsc	status,2,c
  3314  00103C  D7D3               	goto	l912
  3315  00103E  D7D6               	goto	l913
  3316  001040                     l902:
  3317  001040  FFFF               	dw	65535	; assembler added errata NOP
  3318                           
  3319                           ;Main.c: 146: if (menu_posi == 1 | menu_posi == 2) {
  3320                           
  3321                           ; BSR set to: 0
  3322  001042  0100               	movlb	0	; () banked
  3323  001044  05DE               	decf	_menu_posi& (0+255),w,b
  3324  001046  B4D8               	btfsc	status,2,c
  3325  001048  D09C               	goto	l917
  3326                           
  3327                           ; BSR set to: 0
  3328  00104A  0E02               	movlw	2
  3329  00104C  19DE               	xorwf	_menu_posi& (0+255),w,b
  3330  00104E  B4D8               	btfsc	status,2,c
  3331  001050  D098               	goto	l917
  3332  001052  D0D2               	goto	l941
  3333  001054  FFFF               	dw	65535	; assembler added errata NOP
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;Main.c: 150: menu_posi = 1;
  3337                           
  3338                           ; BSR set to: 0
  3339  001056  0E01               	movlw	1
  3340  001058  6FDE               	movwf	_menu_posi& (0+255),b
  3341                           
  3342                           ;Main.c: 151: line1[0] = '>';
  3343  00105A  0E3E               	movlw	62
  3344  00105C  0101               	movlb	1	; () banked
  3345  00105E  6F7B               	movwf	_line1& (0+255),b
  3346                           
  3347                           ; BSR set to: 1
  3348                           ;Main.c: 152: if (btPress(4)) {
  3349  001060  0E04               	movlw	4
  3350  001062  EC4A  F03B         	call	_btPress
  3351  001066  0900               	iorlw	0
  3352  001068  B4D8               	btfsc	status,2,c
  3353  00106A  D0A6               	goto	l920
  3354                           
  3355                           ;Main.c: 153: _menu_posi = menu_posi;
  3356  00106C  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3357                           
  3358                           ;Main.c: 154: menu_posi = 20;
  3359  001070  0E14               	movlw	20
  3360  001072  D065               	goto	L5
  3361  001074  FFFF               	dw	65535	; assembler added errata NOP
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;Main.c: 158: menu_posi = 1;
  3365                           
  3366                           ; BSR set to: 0
  3367  001076  0E01               	movlw	1
  3368  001078  6FDE               	movwf	_menu_posi& (0+255),b
  3369                           
  3370                           ;Main.c: 159: line2[0] = '>';
  3371  00107A  0E3E               	movlw	62
  3372  00107C  0101               	movlb	1	; () banked
  3373  00107E  6F66               	movwf	_line2& (0+255),b
  3374                           
  3375                           ; BSR set to: 1
  3376                           ;Main.c: 160: if (btPress(4)) {
  3377  001080  0E04               	movlw	4
  3378  001082  EC4A  F03B         	call	_btPress
  3379  001086  0900               	iorlw	0
  3380  001088  B4D8               	btfsc	status,2,c
  3381  00108A  D096               	goto	l920
  3382                           
  3383                           ;Main.c: 161: _menu_posi = menu_posi;
  3384  00108C  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3385                           
  3386                           ;Main.c: 162: menu_posi = 21;
  3387  001090  0E15               	movlw	21
  3388  001092  D055               	goto	L5
  3389  001094  FFFF               	dw	65535	; assembler added errata NOP
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;Main.c: 166: menu_posi = 1;
  3393                           
  3394                           ; BSR set to: 0
  3395  001096  0E01               	movlw	1
  3396  001098  6FDE               	movwf	_menu_posi& (0+255),b
  3397                           
  3398                           ;Main.c: 167: line3[0] = '>';
  3399  00109A  0E3E               	movlw	62
  3400  00109C  0101               	movlb	1	; () banked
  3401  00109E  6F51               	movwf	_line3& (0+255),b
  3402                           
  3403                           ; BSR set to: 1
  3404                           ;Main.c: 168: if (btPress(4)) {
  3405  0010A0  0E04               	movlw	4
  3406  0010A2  EC4A  F03B         	call	_btPress
  3407  0010A6  0900               	iorlw	0
  3408  0010A8  B4D8               	btfsc	status,2,c
  3409  0010AA  D086               	goto	l920
  3410                           
  3411                           ;Main.c: 169: _menu_posi = menu_posi;
  3412  0010AC  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3413                           
  3414                           ;Main.c: 170: menu_posi = 22;
  3415  0010B0  0E16               	movlw	22
  3416  0010B2  D045               	goto	L5
  3417  0010B4  FFFF               	dw	65535	; assembler added errata NOP
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;Main.c: 174: menu_posi = 1;
  3421                           
  3422                           ; BSR set to: 0
  3423  0010B6  0E01               	movlw	1
  3424  0010B8  6FDE               	movwf	_menu_posi& (0+255),b
  3425                           
  3426                           ;Main.c: 175: line4[0] = '>';
  3427  0010BA  0E3E               	movlw	62
  3428  0010BC  0101               	movlb	1	; () banked
  3429  0010BE  6F3C               	movwf	_line4& (0+255),b
  3430                           
  3431                           ; BSR set to: 1
  3432                           ;Main.c: 176: if (btPress(4)) {
  3433  0010C0  0E04               	movlw	4
  3434  0010C2  EC4A  F03B         	call	_btPress
  3435  0010C6  0900               	iorlw	0
  3436  0010C8  B4D8               	btfsc	status,2,c
  3437  0010CA  D076               	goto	l920
  3438                           
  3439                           ;Main.c: 177: _menu_posi = menu_posi;
  3440  0010CC  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3441                           
  3442                           ;Main.c: 178: menu_posi = 23;
  3443  0010D0  0E17               	movlw	23
  3444  0010D2  D035               	goto	L5
  3445  0010D4  FFFF               	dw	65535	; assembler added errata NOP
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;Main.c: 182: menu_posi = 2;
  3449                           
  3450                           ; BSR set to: 0
  3451  0010D6  0E02               	movlw	2
  3452  0010D8  6FDE               	movwf	_menu_posi& (0+255),b
  3453                           
  3454                           ;Main.c: 183: line1[0] = '>';
  3455  0010DA  0E3E               	movlw	62
  3456  0010DC  0101               	movlb	1	; () banked
  3457  0010DE  6F7B               	movwf	_line1& (0+255),b
  3458                           
  3459                           ; BSR set to: 1
  3460                           ;Main.c: 184: if (btPress(4)) {
  3461  0010E0  0E04               	movlw	4
  3462  0010E2  EC4A  F03B         	call	_btPress
  3463  0010E6  0900               	iorlw	0
  3464  0010E8  B4D8               	btfsc	status,2,c
  3465  0010EA  D066               	goto	l920
  3466                           
  3467                           ;Main.c: 185: _menu_posi = menu_posi;
  3468  0010EC  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3469                           
  3470                           ;Main.c: 186: menu_posi = 24;
  3471  0010F0  0E18               	movlw	24
  3472  0010F2  D025               	goto	L5
  3473  0010F4  FFFF               	dw	65535	; assembler added errata NOP
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;Main.c: 190: line2[0] = '>';
  3477                           
  3478                           ; BSR set to: 0
  3479  0010F6  0E3E               	movlw	62
  3480  0010F8  0101               	movlb	1	; () banked
  3481  0010FA  6F66               	movwf	_line2& (0+255),b
  3482                           
  3483                           ;Main.c: 191: menu_posi = 2;
  3484  0010FC  0E02               	movlw	2
  3485  0010FE  0100               	movlb	0	; () banked
  3486  001100  6FDE               	movwf	_menu_posi& (0+255),b
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;Main.c: 192: if (btPress(4)) {
  3490  001102  0E04               	movlw	4
  3491  001104  EC4A  F03B         	call	_btPress
  3492  001108  0900               	iorlw	0
  3493  00110A  B4D8               	btfsc	status,2,c
  3494  00110C  D055               	goto	l920
  3495                           
  3496                           ;Main.c: 193: _menu_posi = menu_posi;
  3497  00110E  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3498                           
  3499                           ;Main.c: 194: menu_posi = 25;
  3500  001112  0E19               	movlw	25
  3501  001114  0100               	movlb	0	; () banked
  3502  001116  6FDE               	movwf	_menu_posi& (0+255),b
  3503                           
  3504                           ;Main.c: 195: dtl_carregar_log = 1;
  3505  001118  0E01               	movlw	1
  3506  00111A  6E55               	movwf	_dtl_carregar_log,c
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;Main.c: 196: }
  3510                           ;Main.c: 197: break;
  3511  00111C  D04D               	goto	l920
  3512  00111E  FFFF               	dw	65535	; assembler added errata NOP
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;Main.c: 199: line3[0] = '>';
  3516                           
  3517                           ; BSR set to: 0
  3518  001120  0E3E               	movlw	62
  3519  001122  0101               	movlb	1	; () banked
  3520  001124  6F51               	movwf	_line3& (0+255),b
  3521                           
  3522                           ;Main.c: 200: menu_posi = 2;
  3523  001126  0E02               	movlw	2
  3524  001128  0100               	movlb	0	; () banked
  3525  00112A  6FDE               	movwf	_menu_posi& (0+255),b
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;Main.c: 201: if (btPress(4)) {
  3529  00112C  0E04               	movlw	4
  3530  00112E  EC4A  F03B         	call	_btPress
  3531  001132  0900               	iorlw	0
  3532  001134  B4D8               	btfsc	status,2,c
  3533  001136  D040               	goto	l920
  3534                           
  3535                           ;Main.c: 202: _menu_posi = menu_posi;
  3536  001138  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3537                           
  3538                           ;Main.c: 203: menu_posi = 27;
  3539  00113C  0E1B               	movlw	27
  3540  00113E                     L5:
  3541  00113E  FFFF               	dw	65535	; assembler added errata NOP
  3542  001140  0100               	movlb	0	; () banked
  3543  001142  D01C               	goto	L6
  3544  001144  FFFF               	dw	65535	; assembler added errata NOP
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;Main.c: 207: line4[0] = '>';
  3548                           
  3549                           ; BSR set to: 0
  3550  001146  0E3E               	movlw	62
  3551  001148  0101               	movlb	1	; () banked
  3552  00114A  6F3C               	movwf	_line4& (0+255),b
  3553                           
  3554                           ;Main.c: 208: menu_posi = 2;
  3555  00114C  0E02               	movlw	2
  3556  00114E  0100               	movlb	0	; () banked
  3557  001150  6FDE               	movwf	_menu_posi& (0+255),b
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;Main.c: 209: if (btPress(4)) {
  3561  001152  0E04               	movlw	4
  3562  001154  EC4A  F03B         	call	_btPress
  3563  001158  0900               	iorlw	0
  3564  00115A  B4D8               	btfsc	status,2,c
  3565  00115C  D02D               	goto	l920
  3566                           
  3567                           ;Main.c: 210: if (!ocorrendoIncendio) {
  3568  00115E  0100               	movlb	0	; () banked
  3569  001160  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  3570  001162  A4D8               	btfss	status,2,c
  3571  001164  D029               	goto	l920
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;Main.c: 211: menu_posi = 28;
  3575  001166  0E1C               	movlw	28
  3576  001168  6FDE               	movwf	_menu_posi& (0+255),b
  3577                           
  3578                           ;Main.c: 212: executandoTeste = 1;
  3579  00116A  0E01               	movlw	1
  3580  00116C  6FF1               	movwf	_executandoTeste& (0+255),b
  3581                           
  3582                           ;Main.c: 213: etapaTesteBombas = 0;
  3583  00116E  0E00               	movlw	0
  3584  001170  6E71               	movwf	_etapaTesteBombas,c
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;Main.c: 214: }
  3588                           ;Main.c: 215: }
  3589                           ;Main.c: 216: break;
  3590                           
  3591                           ; BSR set to: 0
  3592  001172  D022               	goto	l920
  3593  001174  FFFF               	dw	65535	; assembler added errata NOP
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;Main.c: 218: sub_menu_posi = 1;
  3597                           
  3598                           ; BSR set to: 0
  3599  001176  0E01               	movlw	1
  3600  001178  6E6A               	movwf	_sub_menu_posi,c
  3601                           
  3602                           ;Main.c: 219: menu_posi = 1;
  3603  00117A  0E01               	movlw	1
  3604  00117C                     L6:
  3605  00117C  FFFF               	dw	65535	; assembler added errata NOP
  3606  00117E  6FDE               	movwf	_menu_posi& (0+255),b
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;Main.c: 221: }
  3610                           
  3611                           ;Main.c: 220: break;
  3612  001180  D01B               	goto	l920
  3613  001182                     l917:
  3614  001182  FFFF               	dw	65535	; assembler added errata NOP
  3615                           
  3616                           ; BSR set to: 0
  3617                           
  3618                           ; BSR set to: 0
  3619  001184  506A               	movf	_sub_menu_posi,w,c
  3620                           
  3621                           ; Switch size 1, requested type "space"
  3622                           ; Number of cases is 8, Range of values is 1 to 8
  3623                           ; switch strategies available:
  3624                           ; Name         Instructions Cycles
  3625                           ; simple_byte           25    13 (average)
  3626                           ;	Chosen strategy is simple_byte
  3627  001186  0A01               	xorlw	1	; case 1
  3628  001188  B4D8               	btfsc	status,2,c
  3629  00118A  D764               	goto	l918
  3630  00118C  0A03               	xorlw	3	; case 2
  3631  00118E  B4D8               	btfsc	status,2,c
  3632  001190  D771               	goto	l921
  3633  001192  0A01               	xorlw	1	; case 3
  3634  001194  B4D8               	btfsc	status,2,c
  3635  001196  D77E               	goto	l923
  3636  001198  0A07               	xorlw	7	; case 4
  3637  00119A  B4D8               	btfsc	status,2,c
  3638  00119C  D78B               	goto	l925
  3639  00119E  0A01               	xorlw	1	; case 5
  3640  0011A0  B4D8               	btfsc	status,2,c
  3641  0011A2  D798               	goto	l927
  3642  0011A4  0A03               	xorlw	3	; case 6
  3643  0011A6  B4D8               	btfsc	status,2,c
  3644  0011A8  D7A5               	goto	l929
  3645  0011AA  0A01               	xorlw	1	; case 7
  3646  0011AC  B4D8               	btfsc	status,2,c
  3647  0011AE  D7B7               	goto	l931
  3648  0011B0  0A0F               	xorlw	15	; case 8
  3649  0011B2  B4D8               	btfsc	status,2,c
  3650  0011B4  D7C7               	goto	l933
  3651  0011B6  D7DE               	goto	l936
  3652  0011B8                     l920:
  3653  0011B8  FFFF               	dw	65535	; assembler added errata NOP
  3654                           
  3655                           ;Main.c: 223: if (btPress(3)) {
  3656                           
  3657                           ; BSR set to: 0
  3658  0011BA  0E03               	movlw	3
  3659  0011BC  EC4A  F03B         	call	_btPress
  3660  0011C0  0900               	iorlw	0
  3661  0011C2  B4D8               	btfsc	status,2,c
  3662  0011C4  D002               	goto	l937
  3663                           
  3664                           ;Main.c: 224: sub_menu_posi--;
  3665  0011C6  066A               	decf	_sub_menu_posi,f,c
  3666                           
  3667                           ;Main.c: 225: } else if (btPress(2)) {
  3668  0011C8  D017               	goto	l941
  3669  0011CA                     l937:
  3670  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  3671  0011CC  0E02               	movlw	2
  3672  0011CE  EC4A  F03B         	call	_btPress
  3673  0011D2  0900               	iorlw	0
  3674  0011D4  B4D8               	btfsc	status,2,c
  3675  0011D6  D002               	goto	l939
  3676                           
  3677                           ;Main.c: 226: sub_menu_posi++;
  3678  0011D8  2A6A               	incf	_sub_menu_posi,f,c
  3679                           
  3680                           ;Main.c: 227: } else if (btPress(1)) {
  3681  0011DA  D00E               	goto	l941
  3682  0011DC                     l939:
  3683  0011DC  FFFF               	dw	65535	; assembler added errata NOP
  3684  0011DE  0E01               	movlw	1
  3685  0011E0  EC4A  F03B         	call	_btPress
  3686  0011E4  0900               	iorlw	0
  3687  0011E6  B4D8               	btfsc	status,2,c
  3688  0011E8  D007               	goto	l941
  3689                           
  3690                           ;Main.c: 228: menu_posi = 0;
  3691  0011EA  0E00               	movlw	0
  3692  0011EC  0100               	movlb	0	; () banked
  3693  0011EE  6FDE               	movwf	_menu_posi& (0+255),b
  3694                           
  3695                           ;Main.c: 229: option_posi = 0;
  3696  0011F0  0E00               	movlw	0
  3697  0011F2  6FDF               	movwf	_option_posi& (0+255),b
  3698                           
  3699                           ;Main.c: 230: sub_menu_posi = 1;
  3700  0011F4  0E01               	movlw	1
  3701  0011F6  6E6A               	movwf	_sub_menu_posi,c
  3702  0011F8                     l941:
  3703  0011F8  FFFF               	dw	65535	; assembler added errata NOP
  3704                           
  3705                           ;Main.c: 231: }
  3706                           ;Main.c: 232: }
  3707                           ;Main.c: 234: if (menu_posi != 28) {
  3708                           
  3709                           ; BSR set to: 0
  3710                           
  3711                           ; BSR set to: 0
  3712                           
  3713                           ; BSR set to: 0
  3714                           
  3715                           ; BSR set to: 0
  3716  0011FA  0E1C               	movlw	28
  3717  0011FC  0100               	movlb	0	; () banked
  3718  0011FE  19DE               	xorwf	_menu_posi& (0+255),w,b
  3719  001200  B4D8               	btfsc	status,2,c
  3720  001202  D004               	goto	l942
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Main.c: 235: executandoTeste = 0;
  3724  001204  0E00               	movlw	0
  3725  001206  6FF1               	movwf	_executandoTeste& (0+255),b
  3726                           
  3727                           ;Main.c: 236: shift[2] = 0;
  3728  001208  0E00               	movlw	0
  3729  00120A  6E46               	movwf	_shift+2,c
  3730  00120C                     l942:
  3731  00120C  FFFF               	dw	65535	; assembler added errata NOP
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;Main.c: 237: }
  3735                           ;Main.c: 238: atualizarLCD(line1, line2, line3, line4);
  3736                           
  3737                           ; BSR set to: 0
  3738  00120E  0E7B               	movlw	low _line1
  3739  001210  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3740  001212  0E01               	movlw	high _line1
  3741  001214  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3742  001216  0E66               	movlw	low _line2
  3743  001218  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3744  00121A  0E01               	movlw	high _line2
  3745  00121C  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3746  00121E  0E51               	movlw	low _line3
  3747  001220  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3748  001222  0E01               	movlw	high _line3
  3749  001224  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3750  001226  0E3C               	movlw	low _line4
  3751  001228  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3752  00122A  0E01               	movlw	high _line4
  3753  00122C  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3754  00122E  ECC3  F01C         	call	_atualizarLCD	;wreg free
  3755  001232  D64A               	goto	l898
  3756  001234                     __end_of_main:
  3757                           	opt stack 0
  3758                           tblptru	equ	0xFF8
  3759                           tblptrh	equ	0xFF7
  3760                           tblptrl	equ	0xFF6
  3761                           tablat	equ	0xFF5
  3762                           postinc0	equ	0xFEE
  3763                           wreg	equ	0xFE8
  3764                           postdec1	equ	0xFE5
  3765                           fsr1l	equ	0xFE1
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function _verificarIntervaloTesteBombas *****************
  3769 ;; Defined at:
  3770 ;;		line 114 in file "controle.h"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;		None
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;		None
  3775 ;; Return value:  Size  Location     Type
  3776 ;;                  1    wreg      void 
  3777 ;; Registers used:
  3778 ;;		wreg, status,2, status,0, cstack
  3779 ;; Tracked objects:
  3780 ;;		On entry : 0/0
  3781 ;;		On exit  : 0/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3784 ;;      Params:         0       0       0       0       0       0       0
  3785 ;;      Locals:         0       0       0       0       0       0       0
  3786 ;;      Temps:          0       0       0       0       0       0       0
  3787 ;;      Totals:         0       0       0       0       0       0       0
  3788 ;;Total ram usage:        0 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; Hardware stack levels required when called:    9
  3791 ;; This function calls:
  3792 ;;		_writeEEPROM_ext
  3793 ;; This function is called by:
  3794 ;;		_main
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           	psect	text1
  3799  0072C6                     __ptext1:
  3800                           	opt stack 0
  3801  0072C6                     _verificarIntervaloTesteBombas:
  3802                           	opt stack 0
  3803  0072C6  FFFF               	dw	65535	; assembler added errata NOP
  3804                           
  3805                           ;controle.h: 115: if (dias_restante_teste >= intervalo_teste_dia && habilitaTesteAutomat
      +                          ico == 1 && !executandoTeste) {
  3806                           
  3807                           ;incstack = 0
  3808  0072C8  0100               	movlb	0	; () banked
  3809  0072CA  51E8               	movf	_intervalo_teste_dia& (0+255),w,b
  3810  0072CC  5DE7               	subwf	_dias_restante_teste& (0+255),w,b
  3811  0072CE  A0D8               	btfss	status,0,c
  3812  0072D0  D018               	goto	l504
  3813                           
  3814                           ; BSR set to: 0
  3815  0072D2  05EF               	decf	_habilitaTesteAutomatico& (0+255),w,b
  3816  0072D4  A4D8               	btfss	status,2,c
  3817  0072D6  D015               	goto	l504
  3818                           
  3819                           ; BSR set to: 0
  3820  0072D8  51F1               	movf	_executandoTeste& (0+255),w,b
  3821  0072DA  A4D8               	btfss	status,2,c
  3822  0072DC  D012               	goto	l504
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;controle.h: 116: if (_hor == horario_de_teste) {
  3826  0072DE  51E6               	movf	_horario_de_teste& (0+255),w,b
  3827  0072E0  19EC               	xorwf	__hor& (0+255),w,b
  3828  0072E2  A4D8               	btfss	status,2,c
  3829  0072E4  D00E               	goto	l504
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;controle.h: 117: dias_restante_teste = 0;
  3833  0072E6  0E00               	movlw	0
  3834  0072E8  6FE7               	movwf	_dias_restante_teste& (0+255),b
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;controle.h: 118: writeEEPROM_ext(10, dias_restante_teste);
  3838  0072EA  C0E7  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
  3839  0072EE  0E0A               	movlw	10
  3840  0072F0  ECA6  F039         	call	_writeEEPROM_ext
  3841                           
  3842                           ;controle.h: 119: etapaTesteBombas = 0;
  3843  0072F4  0E00               	movlw	0
  3844  0072F6  6E71               	movwf	_etapaTesteBombas,c
  3845                           
  3846                           ;controle.h: 120: executandoTeste = 1;
  3847  0072F8  0E01               	movlw	1
  3848  0072FA  0100               	movlb	0	; () banked
  3849  0072FC  6FF1               	movwf	_executandoTeste& (0+255),b
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;controle.h: 121: menu_posi = 28;
  3853  0072FE  0E1C               	movlw	28
  3854  007300  6FDE               	movwf	_menu_posi& (0+255),b
  3855  007302                     l504:
  3856  007302  FFFF               	dw	65535	; assembler added errata NOP
  3857                           
  3858                           ; BSR set to: 0
  3859                           
  3860                           ; BSR set to: 0
  3861                           
  3862                           ; BSR set to: 0
  3863  007304  0012               	return		;funcret
  3864  007306  FFFF               	dw	65535	; errata NOP
  3865  007308                     __end_of_verificarIntervaloTesteBombas:
  3866                           	opt stack 0
  3867                           tblptru	equ	0xFF8
  3868                           tblptrh	equ	0xFF7
  3869                           tblptrl	equ	0xFF6
  3870                           tablat	equ	0xFF5
  3871                           postinc0	equ	0xFEE
  3872                           wreg	equ	0xFE8
  3873                           postdec1	equ	0xFE5
  3874                           fsr1l	equ	0xFE1
  3875                           status	equ	0xFD8
  3876                           
  3877 ;; *************** function _tela_testeBombas *****************
  3878 ;; Defined at:
  3879 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;		None
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;		None
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3893 ;;      Params:         0       0       0       0       0       0       0
  3894 ;;      Locals:         0       2       0       0       0       0       0
  3895 ;;      Temps:          0       2       0       0       0       0       0
  3896 ;;      Totals:         0       4       0       0       0       0       0
  3897 ;;Total ram usage:        4 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:    9
  3900 ;; This function calls:
  3901 ;;		_blink
  3902 ;;		_btPress
  3903 ;;		_sprintf
  3904 ;;		_writeEEPROM_ext
  3905 ;; This function is called by:
  3906 ;;		_main
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           	psect	text2
  3911  0025FE                     __ptext2:
  3912                           	opt stack 0
  3913  0025FE                     _tela_testeBombas:
  3914                           	opt stack 0
  3915  0025FE  FFFF               	dw	65535	; assembler added errata NOP
  3916                           
  3917                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;incstack = 0
  3921  002600  0E7B               	movlw	low _line1
  3922  002602  0100               	movlb	0	; () banked
  3923  002604  6FA1               	movwf	sprintf@wh& (0+255),b
  3924  002606  0E01               	movlw	high _line1
  3925  002608  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3926  00260A  0E5F               	movlw	low STR_69
  3927  00260C  6FA3               	movwf	sprintf@f& (0+255),b
  3928  00260E  0E7C               	movlw	high STR_69
  3929  002610  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3930  002612  51E7               	movf	_dias_restante_teste& (0+255),w,b
  3931  002614  6FB5               	movwf	??_tela_testeBombas& (0+255),b
  3932  002616  6BB6               	clrf	(??_tela_testeBombas+1)& (0+255),b
  3933  002618  1FB5               	comf	??_tela_testeBombas& (0+255),f,b
  3934  00261A  1FB6               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  3935  00261C  4BB5               	infsnz	??_tela_testeBombas& (0+255),f,b
  3936  00261E  2BB6               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  3937  002620  51E8               	movf	_intervalo_teste_dia& (0+255),w,b
  3938  002622  25B5               	addwf	??_tela_testeBombas& (0+255),w,b
  3939  002624  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3940  002626  0E00               	movlw	0
  3941  002628  21B6               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  3942  00262A  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3943  00262C  ECC9  F039         	call	_sprintf	;wreg free
  3944                           
  3945                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  3946  002630  0E66               	movlw	low _line2
  3947  002632  0100               	movlb	0	; () banked
  3948  002634  6FA1               	movwf	sprintf@wh& (0+255),b
  3949  002636  0E01               	movlw	high _line2
  3950  002638  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3951  00263A  0EB0               	movlw	low STR_70
  3952  00263C  6FA3               	movwf	sprintf@f& (0+255),b
  3953  00263E  0E7C               	movlw	high STR_70
  3954  002640  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3955  002642  C0E8  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  3956  002646  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3957  002648  ECC9  F039         	call	_sprintf	;wreg free
  3958                           
  3959                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  3960  00264C  0E51               	movlw	low _line3
  3961  00264E  0100               	movlb	0	; () banked
  3962  002650  6FA1               	movwf	sprintf@wh& (0+255),b
  3963  002652  0E01               	movlw	high _line3
  3964  002654  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3965  002656  0EC4               	movlw	low STR_71
  3966  002658  6FA3               	movwf	sprintf@f& (0+255),b
  3967  00265A  0E7C               	movlw	high STR_71
  3968  00265C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3969  00265E  C0E6  F0A5         	movff	_horario_de_teste,?_sprintf+4
  3970  002662  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3971  002664  ECC9  F039         	call	_sprintf	;wreg free
  3972                           
  3973                           ;tela_TESTE_BOMBAS.h: 13: sprintf(line4, "ATIVAR: %s", habilitaTesteAutomatico == 0 ? "N
      +                          ao" : "Sim");
  3974  002668  0100               	movlb	0	; () banked
  3975  00266A  51EF               	movf	_habilitaTesteAutomatico& (0+255),w,b
  3976  00266C  B4D8               	btfsc	status,2,c
  3977  00266E  D004               	goto	l728
  3978                           
  3979                           ; BSR set to: 0
  3980  002670  0EF2               	movlw	low STR_74
  3981  002672  6FB7               	movwf	_tela_testeBombas$1417& (0+255),b
  3982  002674  0E7F               	movlw	high STR_74
  3983  002676  D004               	goto	L7
  3984  002678                     l728:
  3985  002678  FFFF               	dw	65535	; assembler added errata NOP
  3986                           
  3987                           ; BSR set to: 0
  3988                           
  3989                           ; BSR set to: 0
  3990  00267A  0EF6               	movlw	low STR_73
  3991  00267C  6FB7               	movwf	_tela_testeBombas$1417& (0+255),b
  3992  00267E  0E7F               	movlw	high STR_73
  3993  002680                     L7:
  3994  002680  FFFF               	dw	65535	; assembler added errata NOP
  3995  002682  6FB8               	movwf	(_tela_testeBombas$1417+1)& (0+255),b
  3996                           
  3997                           ; BSR set to: 0
  3998                           
  3999                           ; BSR set to: 0
  4000  002684  0E3C               	movlw	low _line4
  4001  002686  6FA1               	movwf	sprintf@wh& (0+255),b
  4002  002688  0E01               	movlw	high _line4
  4003  00268A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4004  00268C  0E4C               	movlw	low STR_72
  4005  00268E  6FA3               	movwf	sprintf@f& (0+255),b
  4006  002690  0E7F               	movlw	high STR_72
  4007  002692  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4008  002694  C0B7  F0A5         	movff	_tela_testeBombas$1417,?_sprintf+4
  4009  002698  C0B8  F0A6         	movff	_tela_testeBombas$1417+1,?_sprintf+5
  4010  00269C  ECC9  F039         	call	_sprintf	;wreg free
  4011                           
  4012                           ;tela_TESTE_BOMBAS.h: 15: if (btPress(1)) {
  4013  0026A0  0E01               	movlw	1
  4014  0026A2  EC4A  F03B         	call	_btPress
  4015  0026A6  0900               	iorlw	0
  4016  0026A8  B4D8               	btfsc	status,2,c
  4017  0026AA  D011               	goto	l731
  4018                           
  4019                           ;tela_TESTE_BOMBAS.h: 16: writeEEPROM_ext(6, intervalo_teste_dia);
  4020  0026AC  C0E8  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  4021  0026B0  0E06               	movlw	6
  4022  0026B2  ECA6  F039         	call	_writeEEPROM_ext
  4023                           
  4024                           ;tela_TESTE_BOMBAS.h: 17: writeEEPROM_ext(11, horario_de_teste);
  4025  0026B6  C0E6  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  4026  0026BA  0E0B               	movlw	11
  4027  0026BC  ECA6  F039         	call	_writeEEPROM_ext
  4028                           
  4029                           ;tela_TESTE_BOMBAS.h: 18: writeEEPROM_ext(15, habilitaTesteAutomatico);
  4030  0026C0  C0EF  F08C         	movff	_habilitaTesteAutomatico,writeEEPROM_ext@data
  4031  0026C4  0E0F               	movlw	15
  4032  0026C6  ECA6  F039         	call	_writeEEPROM_ext
  4033                           
  4034                           ;tela_TESTE_BOMBAS.h: 19: menu_posi = _menu_posi;
  4035  0026CA  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  4036  0026CE                     l731:
  4037  0026CE  FFFF               	dw	65535	; assembler added errata NOP
  4038                           
  4039                           ;tela_TESTE_BOMBAS.h: 20: }
  4040                           ;tela_TESTE_BOMBAS.h: 21: if (btPress(4)) {
  4041  0026D0  0E04               	movlw	4
  4042  0026D2  EC4A  F03B         	call	_btPress
  4043  0026D6  0900               	iorlw	0
  4044  0026D8  B4D8               	btfsc	status,2,c
  4045  0026DA  D069               	goto	l733
  4046                           
  4047                           ;tela_TESTE_BOMBAS.h: 22: option_posi++;
  4048  0026DC  0100               	movlb	0	; () banked
  4049  0026DE  2BDF               	incf	_option_posi& (0+255),f,b
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;tela_TESTE_BOMBAS.h: 23: }
  4053                           ;tela_TESTE_BOMBAS.h: 24: switch (option_posi) {
  4054  0026E0  D066               	goto	l733
  4055  0026E2  FFFF               	dw	65535	; assembler added errata NOP
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;tela_TESTE_BOMBAS.h: 26: blink(line2, 11, 14);
  4059                           
  4060                           ; BSR set to: 0
  4061  0026E4  0E66               	movlw	low _line2
  4062  0026E6  6F80               	movwf	blink@line& (0+255),b
  4063  0026E8  0E01               	movlw	high _line2
  4064  0026EA  6F81               	movwf	(blink@line+1)& (0+255),b
  4065  0026EC  0E0B               	movlw	11
  4066  0026EE  6F82               	movwf	blink@start& (0+255),b
  4067  0026F0  0E0E               	movlw	14
  4068  0026F2  6F83               	movwf	blink@end& (0+255),b
  4069  0026F4  ECE2  F038         	call	_blink	;wreg free
  4070                           
  4071                           ;tela_TESTE_BOMBAS.h: 27: if (btPress(3)) {
  4072  0026F8  0E03               	movlw	3
  4073  0026FA  EC4A  F03B         	call	_btPress
  4074  0026FE  0900               	iorlw	0
  4075  002700  B4D8               	btfsc	status,2,c
  4076  002702  D002               	goto	l735
  4077                           
  4078                           ;tela_TESTE_BOMBAS.h: 28: intervalo_teste_dia++;
  4079  002704  0100               	movlb	0	; () banked
  4080  002706  2BE8               	incf	_intervalo_teste_dia& (0+255),f,b
  4081  002708                     l735:
  4082  002708  FFFF               	dw	65535	; assembler added errata NOP
  4083                           
  4084                           ;tela_TESTE_BOMBAS.h: 29: }
  4085                           ;tela_TESTE_BOMBAS.h: 30: if (btPress(2)) {
  4086                           
  4087                           ; BSR set to: 0
  4088  00270A  0E02               	movlw	2
  4089  00270C  EC4A  F03B         	call	_btPress
  4090  002710  0900               	iorlw	0
  4091  002712  B4D8               	btfsc	status,2,c
  4092  002714  D059               	goto	l737
  4093                           
  4094                           ;tela_TESTE_BOMBAS.h: 31: intervalo_teste_dia--;
  4095  002716  0100               	movlb	0	; () banked
  4096  002718  07E8               	decf	_intervalo_teste_dia& (0+255),f,b
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;tela_TESTE_BOMBAS.h: 32: }
  4100                           ;tela_TESTE_BOMBAS.h: 33: break;
  4101  00271A  D056               	goto	l737
  4102  00271C  FFFF               	dw	65535	; assembler added errata NOP
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;tela_TESTE_BOMBAS.h: 35: blink(line3, 9, 11);
  4106                           
  4107                           ; BSR set to: 0
  4108  00271E  0E51               	movlw	low _line3
  4109  002720  6F80               	movwf	blink@line& (0+255),b
  4110  002722  0E01               	movlw	high _line3
  4111  002724  6F81               	movwf	(blink@line+1)& (0+255),b
  4112  002726  0E09               	movlw	9
  4113  002728  6F82               	movwf	blink@start& (0+255),b
  4114  00272A  0E0B               	movlw	11
  4115  00272C  6F83               	movwf	blink@end& (0+255),b
  4116  00272E  ECE2  F038         	call	_blink	;wreg free
  4117                           
  4118                           ;tela_TESTE_BOMBAS.h: 36: if (btPress(3)) {
  4119  002732  0E03               	movlw	3
  4120  002734  EC4A  F03B         	call	_btPress
  4121  002738  0900               	iorlw	0
  4122  00273A  B4D8               	btfsc	status,2,c
  4123  00273C  D002               	goto	l739
  4124                           
  4125                           ;tela_TESTE_BOMBAS.h: 37: horario_de_teste++;
  4126  00273E  0100               	movlb	0	; () banked
  4127  002740  2BE6               	incf	_horario_de_teste& (0+255),f,b
  4128  002742                     l739:
  4129  002742  FFFF               	dw	65535	; assembler added errata NOP
  4130                           
  4131                           ;tela_TESTE_BOMBAS.h: 38: }
  4132                           ;tela_TESTE_BOMBAS.h: 39: if (btPress(2)) {
  4133                           
  4134                           ; BSR set to: 0
  4135  002744  0E02               	movlw	2
  4136  002746  EC4A  F03B         	call	_btPress
  4137  00274A  0900               	iorlw	0
  4138  00274C  B4D8               	btfsc	status,2,c
  4139  00274E  D002               	goto	l740
  4140                           
  4141                           ;tela_TESTE_BOMBAS.h: 40: horario_de_teste--;
  4142  002750  0100               	movlb	0	; () banked
  4143  002752  07E6               	decf	_horario_de_teste& (0+255),f,b
  4144  002754                     l740:
  4145  002754  FFFF               	dw	65535	; assembler added errata NOP
  4146                           
  4147                           ;tela_TESTE_BOMBAS.h: 41: }
  4148                           ;tela_TESTE_BOMBAS.h: 42: if (horario_de_teste > 23 || horario_de_teste < 0) {
  4149                           
  4150                           ; BSR set to: 0
  4151  002756  0E18               	movlw	24
  4152  002758  0100               	movlb	0	; () banked
  4153  00275A  61E6               	cpfslt	_horario_de_teste& (0+255),b
  4154  00275C  D001               	goto	l743
  4155  00275E  D034               	goto	l737
  4156  002760                     l743:
  4157  002760  FFFF               	dw	65535	; assembler added errata NOP
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;tela_TESTE_BOMBAS.h: 43: horario_de_teste = 0;
  4161                           
  4162                           ; BSR set to: 0
  4163  002762  0E00               	movlw	0
  4164  002764  6FE6               	movwf	_horario_de_teste& (0+255),b
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;tela_TESTE_BOMBAS.h: 44: }
  4168                           ;tela_TESTE_BOMBAS.h: 45: break;
  4169  002766  D030               	goto	l737
  4170  002768  FFFF               	dw	65535	; assembler added errata NOP
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;tela_TESTE_BOMBAS.h: 47: blink(line4, 9, 11);
  4174                           
  4175                           ; BSR set to: 0
  4176  00276A  0E3C               	movlw	low _line4
  4177  00276C  6F80               	movwf	blink@line& (0+255),b
  4178  00276E  0E01               	movlw	high _line4
  4179  002770  6F81               	movwf	(blink@line+1)& (0+255),b
  4180  002772  0E09               	movlw	9
  4181  002774  6F82               	movwf	blink@start& (0+255),b
  4182  002776  0E0B               	movlw	11
  4183  002778  6F83               	movwf	blink@end& (0+255),b
  4184  00277A  ECE2  F038         	call	_blink	;wreg free
  4185                           
  4186                           ;tela_TESTE_BOMBAS.h: 48: if (btPress(3)) {
  4187  00277E  0E03               	movlw	3
  4188  002780  EC4A  F03B         	call	_btPress
  4189  002784  0900               	iorlw	0
  4190  002786  B4D8               	btfsc	status,2,c
  4191  002788  D003               	goto	l745
  4192                           
  4193                           ;tela_TESTE_BOMBAS.h: 49: habilitaTesteAutomatico = 1;
  4194  00278A  0E01               	movlw	1
  4195  00278C  0100               	movlb	0	; () banked
  4196  00278E  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  4197  002790                     l745:
  4198  002790  FFFF               	dw	65535	; assembler added errata NOP
  4199                           
  4200                           ;tela_TESTE_BOMBAS.h: 50: }
  4201                           ;tela_TESTE_BOMBAS.h: 51: if (btPress(2)) {
  4202                           
  4203                           ; BSR set to: 0
  4204  002792  0E02               	movlw	2
  4205  002794  EC4A  F03B         	call	_btPress
  4206  002798  0900               	iorlw	0
  4207  00279A  B4D8               	btfsc	status,2,c
  4208  00279C  D015               	goto	l737
  4209                           
  4210                           ;tela_TESTE_BOMBAS.h: 52: habilitaTesteAutomatico = 0;
  4211  00279E  0E00               	movlw	0
  4212  0027A0  0100               	movlb	0	; () banked
  4213  0027A2  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;tela_TESTE_BOMBAS.h: 53: }
  4217                           ;tela_TESTE_BOMBAS.h: 54: break;
  4218  0027A4  D011               	goto	l737
  4219  0027A6  FFFF               	dw	65535	; assembler added errata NOP
  4220                           
  4221                           ; BSR set to: 0
  4222                           
  4223                           ; BSR set to: 0
  4224  0027A8  0E00               	movlw	0
  4225  0027AA  6FDF               	movwf	_option_posi& (0+255),b
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;tela_TESTE_BOMBAS.h: 57: }
  4229                           
  4230                           ;tela_TESTE_BOMBAS.h: 56: break;
  4231  0027AC  D00D               	goto	l737
  4232  0027AE                     l733:
  4233  0027AE  FFFF               	dw	65535	; assembler added errata NOP
  4234                           
  4235                           ; BSR set to: 0
  4236  0027B0  0100               	movlb	0	; () banked
  4237  0027B2  51DF               	movf	_option_posi& (0+255),w,b
  4238                           
  4239                           ; Switch size 1, requested type "space"
  4240                           ; Number of cases is 3, Range of values is 0 to 2
  4241                           ; switch strategies available:
  4242                           ; Name         Instructions Cycles
  4243                           ; simple_byte           10     6 (average)
  4244                           ;	Chosen strategy is simple_byte
  4245  0027B4  0A00               	xorlw	0	; case 0
  4246  0027B6  B4D8               	btfsc	status,2,c
  4247  0027B8  D794               	goto	l734
  4248  0027BA  0A01               	xorlw	1	; case 1
  4249  0027BC  B4D8               	btfsc	status,2,c
  4250  0027BE  D7AE               	goto	l738
  4251  0027C0  0A03               	xorlw	3	; case 2
  4252  0027C2  B4D8               	btfsc	status,2,c
  4253  0027C4  D7D1               	goto	l744
  4254  0027C6  D7EF               	goto	l747
  4255  0027C8                     l737:
  4256  0027C8  FFFF               	dw	65535	; assembler added errata NOP
  4257                           
  4258                           ; BSR set to: 0
  4259  0027CA  0012               	return		;funcret
  4260  0027CC  FFFF               	dw	65535	; errata NOP
  4261  0027CE                     __end_of_tela_testeBombas:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           postinc0	equ	0xFEE
  4268                           wreg	equ	0xFE8
  4269                           postdec1	equ	0xFE5
  4270                           fsr1l	equ	0xFE1
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _tela_ajusteRTC *****************
  4274 ;; Defined at:
  4275 ;;		line 11 in file "tela_RELOGIO.h"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4289 ;;      Params:         0       0       0       0       0       0       0
  4290 ;;      Locals:         0       0       0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0
  4292 ;;      Totals:         0       0       0       0       0       0       0
  4293 ;;Total ram usage:        0 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    9
  4296 ;; This function calls:
  4297 ;;		_blink
  4298 ;;		_btPress
  4299 ;;		_setDS1307TimeDate
  4300 ;;		_sprintf
  4301 ;;		_validaRTC
  4302 ;; This function is called by:
  4303 ;;		_main
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text3
  4308  001DA0                     __ptext3:
  4309                           	opt stack 0
  4310  001DA0                     _tela_ajusteRTC:
  4311                           	opt stack 0
  4312  001DA0  FFFF               	dw	65535	; assembler added errata NOP
  4313                           
  4314                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  4315                           
  4316                           ;incstack = 0
  4317  001DA2  0E7B               	movlw	low _line1
  4318  001DA4  0100               	movlb	0	; () banked
  4319  001DA6  6FA1               	movwf	sprintf@wh& (0+255),b
  4320  001DA8  0E01               	movlw	high _line1
  4321  001DAA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4322  001DAC  0ECC               	movlw	low STR_65
  4323  001DAE  6FA3               	movwf	sprintf@f& (0+255),b
  4324  001DB0  0E7F               	movlw	high STR_65
  4325  001DB2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4326  001DB4  ECC9  F039         	call	_sprintf	;wreg free
  4327                           
  4328                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  4329  001DB8  0E66               	movlw	low _line2
  4330  001DBA  0100               	movlb	0	; () banked
  4331  001DBC  6FA1               	movwf	sprintf@wh& (0+255),b
  4332  001DBE  0E01               	movlw	high _line2
  4333  001DC0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4334  001DC2  0E3A               	movlw	low STR_66
  4335  001DC4  6FA3               	movwf	sprintf@f& (0+255),b
  4336  001DC6  0E7E               	movlw	high STR_66
  4337  001DC8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4338  001DCA  C079  F0A5         	movff	_rtc+4,?_sprintf+4
  4339  001DCE  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4340  001DD0  C07A  F0A7         	movff	_rtc+5,?_sprintf+6
  4341  001DD4  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4342  001DD6  C07B  F0A9         	movff	_rtc+6,?_sprintf+8
  4343  001DDA  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4344  001DDC  ECC9  F039         	call	_sprintf	;wreg free
  4345                           
  4346                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  4347  001DE0  0E86               	movlw	low (_line1+11)
  4348  001DE2  0100               	movlb	0	; () banked
  4349  001DE4  6FA1               	movwf	sprintf@wh& (0+255),b
  4350  001DE6  0E01               	movlw	high (_line1+11)
  4351  001DE8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4352  001DEA  0EC6               	movlw	low STR_67
  4353  001DEC  6FA3               	movwf	sprintf@f& (0+255),b
  4354  001DEE  0E7F               	movlw	high STR_67
  4355  001DF0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4356  001DF2  ECC9  F039         	call	_sprintf	;wreg free
  4357                           
  4358                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  4359  001DF6  0E71               	movlw	low (_line2+11)
  4360  001DF8  0100               	movlb	0	; () banked
  4361  001DFA  6FA1               	movwf	sprintf@wh& (0+255),b
  4362  001DFC  0E01               	movlw	high (_line2+11)
  4363  001DFE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4364  001E00  0E49               	movlw	low STR_68
  4365  001E02  6FA3               	movwf	sprintf@f& (0+255),b
  4366  001E04  0E7E               	movlw	high STR_68
  4367  001E06  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4368  001E08  C078  F0A5         	movff	_rtc+3,?_sprintf+4
  4369  001E0C  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4370  001E0E  C077  F0A7         	movff	_rtc+2,?_sprintf+6
  4371  001E12  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4372  001E14  C076  F0A9         	movff	_rtc+1,?_sprintf+8
  4373  001E18  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4374  001E1A  ECC9  F039         	call	_sprintf	;wreg free
  4375                           
  4376                           ;tela_RELOGIO.h: 17: if (btPress(4)) {
  4377  001E1E  0E04               	movlw	4
  4378  001E20  EC4A  F03B         	call	_btPress
  4379  001E24  0900               	iorlw	0
  4380  001E26  B4D8               	btfsc	status,2,c
  4381  001E28  D004               	goto	l701
  4382                           
  4383                           ;tela_RELOGIO.h: 18: ajst_rtc = 1;
  4384  001E2A  0E01               	movlw	1
  4385  001E2C  6E68               	movwf	_ajst_rtc,c
  4386                           
  4387                           ;tela_RELOGIO.h: 19: option_posi++;
  4388  001E2E  0100               	movlb	0	; () banked
  4389  001E30  2BDF               	incf	_option_posi& (0+255),f,b
  4390  001E32                     l701:
  4391  001E32  FFFF               	dw	65535	; assembler added errata NOP
  4392                           
  4393                           ;tela_RELOGIO.h: 20: }
  4394                           ;tela_RELOGIO.h: 21: if (btPress(1)) {
  4395                           
  4396                           ; BSR set to: 0
  4397  001E34  0E01               	movlw	1
  4398  001E36  EC4A  F03B         	call	_btPress
  4399  001E3A  0900               	iorlw	0
  4400  001E3C  B4D8               	btfsc	status,2,c
  4401  001E3E  D0B0               	goto	l703
  4402                           
  4403                           ;tela_RELOGIO.h: 22: ajst_rtc = 0;
  4404  001E40  0E00               	movlw	0
  4405  001E42  6E68               	movwf	_ajst_rtc,c
  4406                           
  4407                           ;tela_RELOGIO.h: 23: option_posi = 0;
  4408  001E44  0E00               	movlw	0
  4409  001E46  0100               	movlb	0	; () banked
  4410  001E48  6FDF               	movwf	_option_posi& (0+255),b
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;tela_RELOGIO.h: 24: setDS1307TimeDate(&rtc);
  4414  001E4A  0E75               	movlw	low _rtc
  4415  001E4C  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  4416  001E4E  0E00               	movlw	high _rtc
  4417  001E50  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  4418  001E52  EC66  F019         	call	_setDS1307TimeDate	;wreg free
  4419                           
  4420                           ;tela_RELOGIO.h: 25: menu_posi = _menu_posi;
  4421  001E56  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  4422                           
  4423                           ;tela_RELOGIO.h: 26: _min++;
  4424  001E5A  0100               	movlb	0	; () banked
  4425  001E5C  2BED               	incf	__min& (0+255),f,b
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;tela_RELOGIO.h: 27: }
  4429                           ;tela_RELOGIO.h: 28: switch (option_posi) {
  4430  001E5E  D0A0               	goto	l703
  4431  001E60  FFFF               	dw	65535	; assembler added errata NOP
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;tela_RELOGIO.h: 30: blink(line2, 1, 2);
  4435                           
  4436                           ; BSR set to: 0
  4437  001E62  0E66               	movlw	low _line2
  4438  001E64  6F80               	movwf	blink@line& (0+255),b
  4439  001E66  0E01               	movlw	high _line2
  4440  001E68  6F81               	movwf	(blink@line+1)& (0+255),b
  4441  001E6A  0E01               	movlw	1
  4442  001E6C  6F82               	movwf	blink@start& (0+255),b
  4443  001E6E  0E02               	movlw	2
  4444  001E70  6F83               	movwf	blink@end& (0+255),b
  4445  001E72  ECE2  F038         	call	_blink	;wreg free
  4446                           
  4447                           ;tela_RELOGIO.h: 31: if (btPress(3)) {
  4448  001E76  0E03               	movlw	3
  4449  001E78  EC4A  F03B         	call	_btPress
  4450  001E7C  0900               	iorlw	0
  4451  001E7E  A4D8               	btfss	status,2,c
  4452                           
  4453                           ;tela_RELOGIO.h: 32: rtc.date++;
  4454  001E80  2A79               	incf	_rtc+4,f,c
  4455                           
  4456                           ;tela_RELOGIO.h: 33: }
  4457                           ;tela_RELOGIO.h: 34: if (btPress(2)) {
  4458  001E82  0E02               	movlw	2
  4459  001E84  EC4A  F03B         	call	_btPress
  4460  001E88  0900               	iorlw	0
  4461  001E8A  B4D8               	btfsc	status,2,c
  4462  001E8C  D09F               	goto	l707
  4463                           
  4464                           ;tela_RELOGIO.h: 35: rtc.date--;
  4465  001E8E  0679               	decf	_rtc+4,f,c
  4466                           
  4467                           ;tela_RELOGIO.h: 36: }
  4468                           ;tela_RELOGIO.h: 37: break;
  4469  001E90  D09D               	goto	l707
  4470  001E92  FFFF               	dw	65535	; assembler added errata NOP
  4471                           
  4472                           ;tela_RELOGIO.h: 39: blink(line2, 4, 5);
  4473  001E94  0E66               	movlw	low _line2
  4474  001E96  0100               	movlb	0	; () banked
  4475  001E98  6F80               	movwf	blink@line& (0+255),b
  4476  001E9A  0E01               	movlw	high _line2
  4477  001E9C  6F81               	movwf	(blink@line+1)& (0+255),b
  4478  001E9E  0E04               	movlw	4
  4479  001EA0  6F82               	movwf	blink@start& (0+255),b
  4480  001EA2  0E05               	movlw	5
  4481  001EA4  6F83               	movwf	blink@end& (0+255),b
  4482  001EA6  ECE2  F038         	call	_blink	;wreg free
  4483                           
  4484                           ;tela_RELOGIO.h: 40: if (btPress(3)) {
  4485  001EAA  0E03               	movlw	3
  4486  001EAC  EC4A  F03B         	call	_btPress
  4487  001EB0  0900               	iorlw	0
  4488  001EB2  A4D8               	btfss	status,2,c
  4489                           
  4490                           ;tela_RELOGIO.h: 41: rtc.month++;
  4491  001EB4  2A7A               	incf	_rtc+5,f,c
  4492                           
  4493                           ;tela_RELOGIO.h: 42: }
  4494                           ;tela_RELOGIO.h: 43: if (btPress(2)) {
  4495  001EB6  0E02               	movlw	2
  4496  001EB8  EC4A  F03B         	call	_btPress
  4497  001EBC  0900               	iorlw	0
  4498  001EBE  B4D8               	btfsc	status,2,c
  4499  001EC0  D085               	goto	l707
  4500                           
  4501                           ;tela_RELOGIO.h: 44: rtc.month--;
  4502  001EC2  067A               	decf	_rtc+5,f,c
  4503                           
  4504                           ;tela_RELOGIO.h: 45: }
  4505                           ;tela_RELOGIO.h: 46: break;
  4506  001EC4  D083               	goto	l707
  4507  001EC6  FFFF               	dw	65535	; assembler added errata NOP
  4508                           
  4509                           ;tela_RELOGIO.h: 48: blink(line2, 7, 8);
  4510  001EC8  0E66               	movlw	low _line2
  4511  001ECA  0100               	movlb	0	; () banked
  4512  001ECC  6F80               	movwf	blink@line& (0+255),b
  4513  001ECE  0E01               	movlw	high _line2
  4514  001ED0  6F81               	movwf	(blink@line+1)& (0+255),b
  4515  001ED2  0E07               	movlw	7
  4516  001ED4  6F82               	movwf	blink@start& (0+255),b
  4517  001ED6  0E08               	movlw	8
  4518  001ED8  6F83               	movwf	blink@end& (0+255),b
  4519  001EDA  ECE2  F038         	call	_blink	;wreg free
  4520                           
  4521                           ;tela_RELOGIO.h: 49: if (btPress(3)) {
  4522  001EDE  0E03               	movlw	3
  4523  001EE0  EC4A  F03B         	call	_btPress
  4524  001EE4  0900               	iorlw	0
  4525  001EE6  A4D8               	btfss	status,2,c
  4526                           
  4527                           ;tela_RELOGIO.h: 50: rtc.year++;
  4528  001EE8  2A7B               	incf	_rtc+6,f,c
  4529                           
  4530                           ;tela_RELOGIO.h: 51: }
  4531                           ;tela_RELOGIO.h: 52: if (btPress(2)) {
  4532  001EEA  0E02               	movlw	2
  4533  001EEC  EC4A  F03B         	call	_btPress
  4534  001EF0  0900               	iorlw	0
  4535  001EF2  B4D8               	btfsc	status,2,c
  4536  001EF4  D06B               	goto	l707
  4537                           
  4538                           ;tela_RELOGIO.h: 53: rtc.year--;
  4539  001EF6  067B               	decf	_rtc+6,f,c
  4540                           
  4541                           ;tela_RELOGIO.h: 54: }
  4542                           ;tela_RELOGIO.h: 55: break;
  4543  001EF8  D069               	goto	l707
  4544  001EFA  FFFF               	dw	65535	; assembler added errata NOP
  4545                           
  4546                           ;tela_RELOGIO.h: 57: blink(line2, 12, 13);
  4547  001EFC  0E66               	movlw	low _line2
  4548  001EFE  0100               	movlb	0	; () banked
  4549  001F00  6F80               	movwf	blink@line& (0+255),b
  4550  001F02  0E01               	movlw	high _line2
  4551  001F04  6F81               	movwf	(blink@line+1)& (0+255),b
  4552  001F06  0E0C               	movlw	12
  4553  001F08  6F82               	movwf	blink@start& (0+255),b
  4554  001F0A  0E0D               	movlw	13
  4555  001F0C  6F83               	movwf	blink@end& (0+255),b
  4556  001F0E  ECE2  F038         	call	_blink	;wreg free
  4557                           
  4558                           ;tela_RELOGIO.h: 58: if (btPress(3)) {
  4559  001F12  0E03               	movlw	3
  4560  001F14  EC4A  F03B         	call	_btPress
  4561  001F18  0900               	iorlw	0
  4562  001F1A  A4D8               	btfss	status,2,c
  4563                           
  4564                           ;tela_RELOGIO.h: 59: rtc.hour++;
  4565  001F1C  2A78               	incf	_rtc+3,f,c
  4566                           
  4567                           ;tela_RELOGIO.h: 60: }
  4568                           ;tela_RELOGIO.h: 61: if (btPress(2)) {
  4569  001F1E  0E02               	movlw	2
  4570  001F20  EC4A  F03B         	call	_btPress
  4571  001F24  0900               	iorlw	0
  4572  001F26  B4D8               	btfsc	status,2,c
  4573  001F28  D051               	goto	l707
  4574                           
  4575                           ;tela_RELOGIO.h: 62: rtc.hour--;
  4576  001F2A  0678               	decf	_rtc+3,f,c
  4577                           
  4578                           ;tela_RELOGIO.h: 63: }
  4579                           ;tela_RELOGIO.h: 64: break;
  4580  001F2C  D04F               	goto	l707
  4581  001F2E  FFFF               	dw	65535	; assembler added errata NOP
  4582                           
  4583                           ;tela_RELOGIO.h: 66: blink(line2, 15, 16);
  4584  001F30  0E66               	movlw	low _line2
  4585  001F32  0100               	movlb	0	; () banked
  4586  001F34  6F80               	movwf	blink@line& (0+255),b
  4587  001F36  0E01               	movlw	high _line2
  4588  001F38  6F81               	movwf	(blink@line+1)& (0+255),b
  4589  001F3A  0E0F               	movlw	15
  4590  001F3C  6F82               	movwf	blink@start& (0+255),b
  4591  001F3E  0E10               	movlw	16
  4592  001F40  6F83               	movwf	blink@end& (0+255),b
  4593  001F42  ECE2  F038         	call	_blink	;wreg free
  4594                           
  4595                           ;tela_RELOGIO.h: 67: if (btPress(3)) {
  4596  001F46  0E03               	movlw	3
  4597  001F48  EC4A  F03B         	call	_btPress
  4598  001F4C  0900               	iorlw	0
  4599  001F4E  A4D8               	btfss	status,2,c
  4600                           
  4601                           ;tela_RELOGIO.h: 68: rtc.min++;
  4602  001F50  2A77               	incf	_rtc+2,f,c
  4603                           
  4604                           ;tela_RELOGIO.h: 69: }
  4605                           ;tela_RELOGIO.h: 70: if (btPress(2)) {
  4606  001F52  0E02               	movlw	2
  4607  001F54  EC4A  F03B         	call	_btPress
  4608  001F58  0900               	iorlw	0
  4609  001F5A  B4D8               	btfsc	status,2,c
  4610  001F5C  D037               	goto	l707
  4611                           
  4612                           ;tela_RELOGIO.h: 71: rtc.min--;
  4613  001F5E  0677               	decf	_rtc+2,f,c
  4614                           
  4615                           ;tela_RELOGIO.h: 72: }
  4616                           ;tela_RELOGIO.h: 73: break;
  4617  001F60  D035               	goto	l707
  4618  001F62  FFFF               	dw	65535	; assembler added errata NOP
  4619                           
  4620                           ;tela_RELOGIO.h: 75: blink(line2, 18, 19);
  4621  001F64  0E66               	movlw	low _line2
  4622  001F66  0100               	movlb	0	; () banked
  4623  001F68  6F80               	movwf	blink@line& (0+255),b
  4624  001F6A  0E01               	movlw	high _line2
  4625  001F6C  6F81               	movwf	(blink@line+1)& (0+255),b
  4626  001F6E  0E12               	movlw	18
  4627  001F70  6F82               	movwf	blink@start& (0+255),b
  4628  001F72  0E13               	movlw	19
  4629  001F74  6F83               	movwf	blink@end& (0+255),b
  4630  001F76  ECE2  F038         	call	_blink	;wreg free
  4631                           
  4632                           ;tela_RELOGIO.h: 76: if (btPress(3)) {
  4633  001F7A  0E03               	movlw	3
  4634  001F7C  EC4A  F03B         	call	_btPress
  4635  001F80  0900               	iorlw	0
  4636  001F82  A4D8               	btfss	status,2,c
  4637                           
  4638                           ;tela_RELOGIO.h: 77: rtc.sec++;
  4639  001F84  2A76               	incf	_rtc+1,f,c
  4640                           
  4641                           ;tela_RELOGIO.h: 78: }
  4642                           ;tela_RELOGIO.h: 79: if (btPress(2)) {
  4643  001F86  0E02               	movlw	2
  4644  001F88  EC4A  F03B         	call	_btPress
  4645  001F8C  0900               	iorlw	0
  4646  001F8E  B4D8               	btfsc	status,2,c
  4647  001F90  D01D               	goto	l707
  4648                           
  4649                           ;tela_RELOGIO.h: 80: rtc.sec--;
  4650  001F92  0676               	decf	_rtc+1,f,c
  4651                           
  4652                           ;tela_RELOGIO.h: 81: }
  4653                           ;tela_RELOGIO.h: 82: break;
  4654  001F94  D01B               	goto	l707
  4655  001F96  FFFF               	dw	65535	; assembler added errata NOP
  4656  001F98  0E01               	movlw	1
  4657  001F9A  0100               	movlb	0	; () banked
  4658  001F9C  6FDF               	movwf	_option_posi& (0+255),b
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;tela_RELOGIO.h: 85: }
  4662                           
  4663                           ;tela_RELOGIO.h: 84: break;
  4664  001F9E  D016               	goto	l707
  4665  001FA0                     l703:
  4666  001FA0  FFFF               	dw	65535	; assembler added errata NOP
  4667                           
  4668                           ; BSR set to: 0
  4669  001FA2  0100               	movlb	0	; () banked
  4670  001FA4  51DF               	movf	_option_posi& (0+255),w,b
  4671                           
  4672                           ; Switch size 1, requested type "space"
  4673                           ; Number of cases is 6, Range of values is 1 to 6
  4674                           ; switch strategies available:
  4675                           ; Name         Instructions Cycles
  4676                           ; simple_byte           19    10 (average)
  4677                           ;	Chosen strategy is simple_byte
  4678  001FA6  0A01               	xorlw	1	; case 1
  4679  001FA8  B4D8               	btfsc	status,2,c
  4680  001FAA  D75A               	goto	l704
  4681  001FAC  0A03               	xorlw	3	; case 2
  4682  001FAE  B4D8               	btfsc	status,2,c
  4683  001FB0  D770               	goto	l708
  4684  001FB2  0A01               	xorlw	1	; case 3
  4685  001FB4  B4D8               	btfsc	status,2,c
  4686  001FB6  D787               	goto	l711
  4687  001FB8  0A07               	xorlw	7	; case 4
  4688  001FBA  B4D8               	btfsc	status,2,c
  4689  001FBC  D79E               	goto	l714
  4690  001FBE  0A01               	xorlw	1	; case 5
  4691  001FC0  B4D8               	btfsc	status,2,c
  4692  001FC2  D7B5               	goto	l717
  4693  001FC4  0A03               	xorlw	3	; case 6
  4694  001FC6  B4D8               	btfsc	status,2,c
  4695  001FC8  D7CC               	goto	l720
  4696  001FCA  D7E5               	goto	l723
  4697  001FCC                     l707:
  4698  001FCC  FFFF               	dw	65535	; assembler added errata NOP
  4699                           
  4700                           ;tela_RELOGIO.h: 86: validaRTC();
  4701                           
  4702                           ; BSR set to: 0
  4703  001FCE  EC11  F03A         	call	_validaRTC	;wreg free
  4704  001FD2  0012               	return		;funcret
  4705  001FD4  FFFF               	dw	65535	; errata NOP
  4706  001FD6                     __end_of_tela_ajusteRTC:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           postinc0	equ	0xFEE
  4713                           wreg	equ	0xFE8
  4714                           postdec1	equ	0xFE5
  4715                           fsr1l	equ	0xFE1
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _validaRTC *****************
  4719 ;; Defined at:
  4720 ;;		line 108 in file "ds1307.h"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2  288[None  ] int 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4734 ;;      Params:         0       0       0       0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0
  4737 ;;      Totals:         0       0       0       0       0       0       0
  4738 ;;Total ram usage:        0 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    6
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		_tela_ajusteRTC
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           	psect	text4
  4749  007422                     __ptext4:
  4750                           	opt stack 0
  4751  007422                     _validaRTC:
  4752                           	opt stack 0
  4753  007422  FFFF               	dw	65535	; assembler added errata NOP
  4754                           
  4755                           ;ds1307.h: 109: if (rtc.date > 31) rtc.date = 0;
  4756                           
  4757                           ;incstack = 0
  4758  007424  0E1F               	movlw	31
  4759  007426  6479               	cpfsgt	_rtc+4,c
  4760  007428  D002               	goto	l289
  4761  00742A  0E00               	movlw	0
  4762  00742C  6E79               	movwf	_rtc+4,c
  4763  00742E                     l289:
  4764  00742E  FFFF               	dw	65535	; assembler added errata NOP
  4765                           
  4766                           ;ds1307.h: 110: if (rtc.hour > 23) rtc.hour = 0;
  4767  007430  0E17               	movlw	23
  4768  007432  6478               	cpfsgt	_rtc+3,c
  4769  007434  D002               	goto	l290
  4770  007436  0E00               	movlw	0
  4771  007438  6E78               	movwf	_rtc+3,c
  4772  00743A                     l290:
  4773  00743A  FFFF               	dw	65535	; assembler added errata NOP
  4774                           
  4775                           ;ds1307.h: 111: if (rtc.min > 59) rtc.min = 0;
  4776  00743C  0E3B               	movlw	59
  4777  00743E  6477               	cpfsgt	_rtc+2,c
  4778  007440  D002               	goto	l291
  4779  007442  0E00               	movlw	0
  4780  007444  6E77               	movwf	_rtc+2,c
  4781  007446                     l291:
  4782  007446  FFFF               	dw	65535	; assembler added errata NOP
  4783                           
  4784                           ;ds1307.h: 112: if (rtc.month > 12) rtc.month = 0;
  4785  007448  0E0C               	movlw	12
  4786  00744A  647A               	cpfsgt	_rtc+5,c
  4787  00744C  D002               	goto	l292
  4788  00744E  0E00               	movlw	0
  4789  007450  6E7A               	movwf	_rtc+5,c
  4790  007452                     l292:
  4791  007452  FFFF               	dw	65535	; assembler added errata NOP
  4792                           
  4793                           ;ds1307.h: 113: if (rtc.sec > 59) rtc.sec = 0;
  4794  007454  0E3B               	movlw	59
  4795  007456  6476               	cpfsgt	_rtc+1,c
  4796  007458  D002               	goto	l293
  4797  00745A  0E00               	movlw	0
  4798  00745C  6E76               	movwf	_rtc+1,c
  4799  00745E                     l293:
  4800  00745E  FFFF               	dw	65535	; assembler added errata NOP
  4801                           
  4802                           ;ds1307.h: 114: if (rtc.year > 99) rtc.year = 0;
  4803  007460  0E63               	movlw	99
  4804  007462  647B               	cpfsgt	_rtc+6,c
  4805  007464  D002               	goto	l294
  4806  007466  0E00               	movlw	0
  4807  007468  6E7B               	movwf	_rtc+6,c
  4808  00746A                     l294:
  4809  00746A  FFFF               	dw	65535	; assembler added errata NOP
  4810  00746C  0012               	return		;funcret
  4811  00746E  FFFF               	dw	65535	; errata NOP
  4812  007470                     __end_of_validaRTC:
  4813                           	opt stack 0
  4814                           tblptru	equ	0xFF8
  4815                           tblptrh	equ	0xFF7
  4816                           tblptrl	equ	0xFF6
  4817                           tablat	equ	0xFF5
  4818                           postinc0	equ	0xFEE
  4819                           wreg	equ	0xFE8
  4820                           postdec1	equ	0xFE5
  4821                           fsr1l	equ	0xFE1
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function _setDS1307TimeDate *****************
  4825 ;; Defined at:
  4826 ;;		line 36 in file "ds1307.h"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  4829 ;;		 -> rtc(7), 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      void 
  4834 ;; Registers used:
  4835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4841 ;;      Params:         0       2       0       0       0       0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0
  4843 ;;      Temps:          0       1       0       0       0       0       0
  4844 ;;      Totals:         0       3       0       0       0       0       0
  4845 ;;Total ram usage:        3 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    8
  4848 ;; This function calls:
  4849 ;;		_DECtoBCD
  4850 ;;		_I2C_Start
  4851 ;;		_I2C_Stop
  4852 ;;		_I2C_Write
  4853 ;; This function is called by:
  4854 ;;		_tela_ajusteRTC
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           	psect	text5
  4859  0032CC                     __ptext5:
  4860                           	opt stack 0
  4861  0032CC                     _setDS1307TimeDate:
  4862                           	opt stack 0
  4863  0032CC  FFFF               	dw	65535	; assembler added errata NOP
  4864                           
  4865                           ;ds1307.h: 38: I2C_Start();
  4866                           
  4867                           ;incstack = 0
  4868  0032CE  EC5F  F036         	call	_I2C_Start	;wreg free
  4869                           
  4870                           ;ds1307.h: 39: I2C_Write(0xD0);
  4871  0032D2  0E00               	movlw	0
  4872  0032D4  0100               	movlb	0	; () banked
  4873  0032D6  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4874  0032D8  0ED0               	movlw	208
  4875  0032DA  6F8A               	movwf	I2C_Write@d& (0+255),b
  4876  0032DC  EC78  F036         	call	_I2C_Write	;wreg free
  4877                           
  4878                           ;ds1307.h: 40: I2C_Write(0x00);
  4879  0032E0  0E00               	movlw	0
  4880  0032E2  0100               	movlb	0	; () banked
  4881  0032E4  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4882  0032E6  0E00               	movlw	0
  4883  0032E8  6F8A               	movwf	I2C_Write@d& (0+255),b
  4884  0032EA  EC78  F036         	call	_I2C_Write	;wreg free
  4885                           
  4886                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  4887  0032EE  0100               	movlb	0	; () banked
  4888  0032F0  EE20 F001          	lfsr	2,1
  4889  0032F4  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4890  0032F6  26D9               	addwf	fsr2l,f,c
  4891  0032F8  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4892  0032FA  22DA               	addwfc	fsr2h,f,c
  4893  0032FC  50DF               	movf	indf2,w,c
  4894  0032FE  EC42  F039         	call	_DECtoBCD
  4895  003302  0100               	movlb	0	; () banked
  4896  003304  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4897  003306  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4898  003308  6F8A               	movwf	I2C_Write@d& (0+255),b
  4899  00330A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4900  00330C  EC78  F036         	call	_I2C_Write	;wreg free
  4901                           
  4902                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  4903  003310  0100               	movlb	0	; () banked
  4904  003312  EE20 F002          	lfsr	2,2
  4905  003316  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4906  003318  26D9               	addwf	fsr2l,f,c
  4907  00331A  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4908  00331C  22DA               	addwfc	fsr2h,f,c
  4909  00331E  50DF               	movf	indf2,w,c
  4910  003320  EC42  F039         	call	_DECtoBCD
  4911  003324  0100               	movlb	0	; () banked
  4912  003326  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4913  003328  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4914  00332A  6F8A               	movwf	I2C_Write@d& (0+255),b
  4915  00332C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4916  00332E  EC78  F036         	call	_I2C_Write	;wreg free
  4917                           
  4918                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  4919  003332  0100               	movlb	0	; () banked
  4920  003334  EE20 F003          	lfsr	2,3
  4921  003338  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4922  00333A  26D9               	addwf	fsr2l,f,c
  4923  00333C  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4924  00333E  22DA               	addwfc	fsr2h,f,c
  4925  003340  50DF               	movf	indf2,w,c
  4926  003342  EC42  F039         	call	_DECtoBCD
  4927  003346  0100               	movlb	0	; () banked
  4928  003348  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4929  00334A  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4930  00334C  6F8A               	movwf	I2C_Write@d& (0+255),b
  4931  00334E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4932  003350  EC78  F036         	call	_I2C_Write	;wreg free
  4933                           
  4934                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  4935  003354  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  4936  003358  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  4937  00335C  50DF               	movf	indf2,w,c
  4938  00335E  EC42  F039         	call	_DECtoBCD
  4939  003362  0100               	movlb	0	; () banked
  4940  003364  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4941  003366  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4942  003368  6F8A               	movwf	I2C_Write@d& (0+255),b
  4943  00336A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4944  00336C  EC78  F036         	call	_I2C_Write	;wreg free
  4945                           
  4946                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  4947  003370  0100               	movlb	0	; () banked
  4948  003372  EE20 F004          	lfsr	2,4
  4949  003376  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4950  003378  26D9               	addwf	fsr2l,f,c
  4951  00337A  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4952  00337C  22DA               	addwfc	fsr2h,f,c
  4953  00337E  50DF               	movf	indf2,w,c
  4954  003380  EC42  F039         	call	_DECtoBCD
  4955  003384  0100               	movlb	0	; () banked
  4956  003386  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4957  003388  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4958  00338A  6F8A               	movwf	I2C_Write@d& (0+255),b
  4959  00338C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4960  00338E  EC78  F036         	call	_I2C_Write	;wreg free
  4961                           
  4962                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  4963  003392  0100               	movlb	0	; () banked
  4964  003394  EE20 F005          	lfsr	2,5
  4965  003398  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4966  00339A  26D9               	addwf	fsr2l,f,c
  4967  00339C  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4968  00339E  22DA               	addwfc	fsr2h,f,c
  4969  0033A0  50DF               	movf	indf2,w,c
  4970  0033A2  EC42  F039         	call	_DECtoBCD
  4971  0033A6  0100               	movlb	0	; () banked
  4972  0033A8  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4973  0033AA  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4974  0033AC  6F8A               	movwf	I2C_Write@d& (0+255),b
  4975  0033AE  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4976  0033B0  EC78  F036         	call	_I2C_Write	;wreg free
  4977                           
  4978                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  4979  0033B4  0100               	movlb	0	; () banked
  4980  0033B6  EE20 F006          	lfsr	2,6
  4981  0033BA  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4982  0033BC  26D9               	addwf	fsr2l,f,c
  4983  0033BE  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4984  0033C0  22DA               	addwfc	fsr2h,f,c
  4985  0033C2  50DF               	movf	indf2,w,c
  4986  0033C4  EC42  F039         	call	_DECtoBCD
  4987  0033C8  0100               	movlb	0	; () banked
  4988  0033CA  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4989  0033CC  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4990  0033CE  6F8A               	movwf	I2C_Write@d& (0+255),b
  4991  0033D0  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4992  0033D2  EC78  F036         	call	_I2C_Write	;wreg free
  4993                           
  4994                           ;ds1307.h: 48: I2C_Stop();
  4995  0033D6  EC65  F036         	call	_I2C_Stop	;wreg free
  4996  0033DA  0012               	return		;funcret
  4997  0033DC  FFFF               	dw	65535	; errata NOP
  4998  0033DE                     __end_of_setDS1307TimeDate:
  4999                           	opt stack 0
  5000                           tblptru	equ	0xFF8
  5001                           tblptrh	equ	0xFF7
  5002                           tblptrl	equ	0xFF6
  5003                           tablat	equ	0xFF5
  5004                           postinc0	equ	0xFEE
  5005                           wreg	equ	0xFE8
  5006                           postdec1	equ	0xFE5
  5007                           fsr1l	equ	0xFE1
  5008                           indf2	equ	0xFDF
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _DECtoBCD *****************
  5014 ;; Defined at:
  5015 ;;		line 25 in file "function.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  val             1    wreg     unsigned char 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  val             1    8[BANK0 ] unsigned char 
  5020 ;;  res             1    9[BANK0 ] unsigned char 
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      unsigned char 
  5023 ;; Registers used:
  5024 ;;		wreg, status,2, status,0, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5030 ;;      Params:         0       0       0       0       0       0       0
  5031 ;;      Locals:         0       2       0       0       0       0       0
  5032 ;;      Temps:          0       0       0       0       0       0       0
  5033 ;;      Totals:         0       2       0       0       0       0       0
  5034 ;;Total ram usage:        2 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    7
  5037 ;; This function calls:
  5038 ;;		___awdiv
  5039 ;;		___awmod
  5040 ;; This function is called by:
  5041 ;;		_setDS1307TimeDate
  5042 ;;		_setDS1307Time
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text6
  5047  007284                     __ptext6:
  5048                           	opt stack 0
  5049  007284                     _DECtoBCD:
  5050                           	opt stack 0
  5051  007284  FFFF               	dw	65535	; assembler added errata NOP
  5052                           
  5053                           ;incstack = 0
  5054                           ;DECtoBCD@val stored from wreg
  5055  007286  0100               	movlb	0	; () banked
  5056  007288  6F88               	movwf	DECtoBCD@val& (0+255),b
  5057                           
  5058                           ;function.c: 26: char res;
  5059                           ;function.c: 27: res = (val / 10) << 4;
  5060  00728A  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  5061  00728E  0100               	movlb	0	; () banked
  5062  007290  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5063  007292  0E00               	movlw	0
  5064  007294  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5065  007296  0E0A               	movlw	10
  5066  007298  6F82               	movwf	___awdiv@divisor& (0+255),b
  5067  00729A  EC03  F01F         	call	___awdiv	;wreg free
  5068  00729E  0100               	movlb	0	; () banked
  5069  0072A0  3980               	swapf	?___awdiv& (0+255),w,b
  5070  0072A2  0BF0               	andlw	240
  5071  0072A4  6F89               	movwf	DECtoBCD@res& (0+255),b
  5072                           
  5073                           ;function.c: 28: res = res | (val % 10);
  5074  0072A6  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  5075  0072AA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5076  0072AC  0E00               	movlw	0
  5077  0072AE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5078  0072B0  0E0A               	movlw	10
  5079  0072B2  6F82               	movwf	___awmod@divisor& (0+255),b
  5080  0072B4  EC34  F03C         	call	___awmod	;wreg free
  5081  0072B8  0100               	movlb	0	; () banked
  5082  0072BA  5180               	movf	?___awmod& (0+255),w,b
  5083  0072BC  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  5084  0072BE  6F89               	movwf	DECtoBCD@res& (0+255),b
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;function.c: 29: return res;
  5088  0072C0  5189               	movf	DECtoBCD@res& (0+255),w,b
  5089                           
  5090                           ; BSR set to: 0
  5091                           
  5092                           ; BSR set to: 0
  5093  0072C2  0012               	return		;funcret
  5094  0072C4  FFFF               	dw	65535	; errata NOP
  5095  0072C6                     __end_of_DECtoBCD:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           postdec1	equ	0xFE5
  5104                           fsr1l	equ	0xFE1
  5105                           indf2	equ	0xFDF
  5106                           fsr2h	equ	0xFDA
  5107                           fsr2l	equ	0xFD9
  5108                           status	equ	0xFD8
  5109                           
  5110 ;; *************** function _telaPrincipal *****************
  5111 ;; Defined at:
  5112 ;;		line 22 in file "tela_PRINCIPAL.h"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;		None
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;		None
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  1    wreg      void 
  5119 ;; Registers used:
  5120 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5126 ;;      Params:         0       0       0       0       0       0       0
  5127 ;;      Locals:         0       2       0       0       0       0       0
  5128 ;;      Temps:          0       0       0       0       0       0       0
  5129 ;;      Totals:         0       2       0       0       0       0       0
  5130 ;;Total ram usage:        2 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:   10
  5133 ;; This function calls:
  5134 ;;		_blink
  5135 ;;		_btPress
  5136 ;;		_clearShiftREG
  5137 ;;		_intToFloatStr
  5138 ;;		_resetParametros
  5139 ;;		_sprintf
  5140 ;; This function is called by:
  5141 ;;		_main
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text7
  5146  00220A                     __ptext7:
  5147                           	opt stack 0
  5148  00220A                     _telaPrincipal:
  5149                           	opt stack 0
  5150  00220A  FFFF               	dw	65535	; assembler added errata NOP
  5151                           
  5152                           ;tela_PRINCIPAL.h: 24: sprintf(&line1[2], " %02d:%02d:%02d %02d/%02d", _hor, _min, _sec,
      +                           _dia, _mes);
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;incstack = 0
  5156  00220C  0E7D               	movlw	low (_line1+2)
  5157  00220E  0100               	movlb	0	; () banked
  5158  002210  6FA1               	movwf	sprintf@wh& (0+255),b
  5159  002212  0E01               	movlw	high (_line1+2)
  5160  002214  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5161  002216  0E1B               	movlw	low STR_55
  5162  002218  6FA3               	movwf	sprintf@f& (0+255),b
  5163  00221A  0E7C               	movlw	high STR_55
  5164  00221C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5165  00221E  C0EC  F0A5         	movff	__hor,?_sprintf+4
  5166  002222  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  5167  002224  C0ED  F0A7         	movff	__min,?_sprintf+6
  5168  002228  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5169  00222A  C0EE  F0A9         	movff	__sec,?_sprintf+8
  5170  00222E  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  5171  002230  C0EB  F0AB         	movff	__dia,?_sprintf+10
  5172  002234  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  5173  002236  C0EA  F0AD         	movff	__mes,?_sprintf+12
  5174  00223A  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  5175  00223C  ECC9  F039         	call	_sprintf	;wreg free
  5176                           
  5177                           ;tela_PRINCIPAL.h: 26: line1[0] = 0x01;
  5178  002240  0E01               	movlw	1
  5179  002242  0101               	movlb	1	; () banked
  5180  002244  6F7B               	movwf	_line1& (0+255),b
  5181                           
  5182                           ; BSR set to: 1
  5183                           ;tela_PRINCIPAL.h: 27: line1[1] = intensidadeSinal;
  5184  002246  C0FF  F17C         	movff	_intensidadeSinal,_line1+1
  5185                           
  5186                           ; BSR set to: 1
  5187                           ;tela_PRINCIPAL.h: 28: line1[19] = 0x05;
  5188  00224A  0E05               	movlw	5
  5189  00224C  6F8E               	movwf	(_line1+19)& (0+255),b
  5190                           
  5191                           ;tela_PRINCIPAL.h: 30: switch (codigoErro) {
  5192  00224E  D041               	goto	l675
  5193  002250  FFFF               	dw	65535	; assembler added errata NOP
  5194                           
  5195                           ;tela_PRINCIPAL.h: 32: sprintf(line4, " *falha eletrica");
  5196                           
  5197                           ; BSR set to: 1
  5198  002252  0E3C               	movlw	low _line4
  5199  002254  0100               	movlb	0	; () banked
  5200  002256  6FA1               	movwf	sprintf@wh& (0+255),b
  5201  002258  0E01               	movlw	high _line4
  5202  00225A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5203  00225C  0EC9               	movlw	low STR_56
  5204  00225E  6FA3               	movwf	sprintf@f& (0+255),b
  5205  002260  0E7D               	movlw	high STR_56
  5206  002262  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5207  002264  ECC9  F039         	call	_sprintf	;wreg free
  5208                           
  5209                           ;tela_PRINCIPAL.h: 33: break;
  5210  002268  D046               	goto	l677
  5211  00226A  FFFF               	dw	65535	; assembler added errata NOP
  5212                           
  5213                           ;tela_PRINCIPAL.h: 35: sprintf(line4, " *falha val. ladrao");
  5214  00226C  0E3C               	movlw	low _line4
  5215  00226E  0100               	movlb	0	; () banked
  5216  002270  6FA1               	movwf	sprintf@wh& (0+255),b
  5217  002272  0E01               	movlw	high _line4
  5218  002274  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5219  002276  0E9C               	movlw	low STR_57
  5220  002278  6FA3               	movwf	sprintf@f& (0+255),b
  5221  00227A  0E7C               	movlw	high STR_57
  5222  00227C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5223  00227E  ECC9  F039         	call	_sprintf	;wreg free
  5224                           
  5225                           ;tela_PRINCIPAL.h: 36: break;
  5226  002282  D039               	goto	l677
  5227  002284  FFFF               	dw	65535	; assembler added errata NOP
  5228                           
  5229                           ;tela_PRINCIPAL.h: 38: sprintf(line4, " *falha B. jockey");
  5230  002286  0E3C               	movlw	low _line4
  5231  002288  0100               	movlb	0	; () banked
  5232  00228A  6FA1               	movwf	sprintf@wh& (0+255),b
  5233  00228C  0E01               	movlw	high _line4
  5234  00228E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5235  002290  0E95               	movlw	low STR_58
  5236  002292  6FA3               	movwf	sprintf@f& (0+255),b
  5237  002294  0E7D               	movlw	high STR_58
  5238  002296  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5239  002298  ECC9  F039         	call	_sprintf	;wreg free
  5240                           
  5241                           ;tela_PRINCIPAL.h: 39: break;
  5242  00229C  D02C               	goto	l677
  5243  00229E  FFFF               	dw	65535	; assembler added errata NOP
  5244                           
  5245                           ;tela_PRINCIPAL.h: 41: sprintf(line4, " *falha B. principal");
  5246  0022A0  0E3C               	movlw	low _line4
  5247  0022A2  0100               	movlb	0	; () banked
  5248  0022A4  6FA1               	movwf	sprintf@wh& (0+255),b
  5249  0022A6  0E01               	movlw	high _line4
  5250  0022A8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5251  0022AA  0E35               	movlw	low STR_59
  5252  0022AC  6FA3               	movwf	sprintf@f& (0+255),b
  5253  0022AE  0E7C               	movlw	high STR_59
  5254  0022B0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5255  0022B2  ECC9  F039         	call	_sprintf	;wreg free
  5256                           
  5257                           ;tela_PRINCIPAL.h: 42: break;
  5258  0022B6  D01F               	goto	l677
  5259  0022B8  FFFF               	dw	65535	; assembler added errata NOP
  5260                           
  5261                           ;tela_PRINCIPAL.h: 44: sprintf(line4, " *falha B. combustao");
  5262  0022BA  0E3C               	movlw	low _line4
  5263  0022BC  0100               	movlb	0	; () banked
  5264  0022BE  6FA1               	movwf	sprintf@wh& (0+255),b
  5265  0022C0  0E01               	movlw	high _line4
  5266  0022C2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5267  0022C4  0E4A               	movlw	low STR_60
  5268  0022C6  6FA3               	movwf	sprintf@f& (0+255),b
  5269  0022C8  0E7C               	movlw	high STR_60
  5270  0022CA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5271  0022CC  ECC9  F039         	call	_sprintf	;wreg free
  5272                           
  5273                           ;tela_PRINCIPAL.h: 46: }
  5274                           
  5275                           ;tela_PRINCIPAL.h: 45: break;
  5276  0022D0  D012               	goto	l677
  5277  0022D2                     l675:
  5278  0022D2  FFFF               	dw	65535	; assembler added errata NOP
  5279  0022D4  0100               	movlb	0	; () banked
  5280  0022D6  51F3               	movf	_codigoErro& (0+255),w,b
  5281                           
  5282                           ; Switch size 1, requested type "space"
  5283                           ; Number of cases is 5, Range of values is 1 to 6
  5284                           ; switch strategies available:
  5285                           ; Name         Instructions Cycles
  5286                           ; simple_byte           16     9 (average)
  5287                           ;	Chosen strategy is simple_byte
  5288  0022D8  0A01               	xorlw	1	; case 1
  5289  0022DA  B4D8               	btfsc	status,2,c
  5290  0022DC  D7B9               	goto	l676
  5291  0022DE  0A02               	xorlw	2	; case 3
  5292  0022E0  B4D8               	btfsc	status,2,c
  5293  0022E2  D7C3               	goto	l678
  5294  0022E4  0A07               	xorlw	7	; case 4
  5295  0022E6  B4D8               	btfsc	status,2,c
  5296  0022E8  D7CD               	goto	l679
  5297  0022EA  0A01               	xorlw	1	; case 5
  5298  0022EC  B4D8               	btfsc	status,2,c
  5299  0022EE  D7D7               	goto	l680
  5300  0022F0  0A03               	xorlw	3	; case 6
  5301  0022F2  B4D8               	btfsc	status,2,c
  5302  0022F4  D7E1               	goto	l681
  5303  0022F6                     l677:
  5304  0022F6  FFFF               	dw	65535	; assembler added errata NOP
  5305                           
  5306                           ;tela_PRINCIPAL.h: 48: if (ocorrendoIncendio) {
  5307                           
  5308                           ; BSR set to: 0
  5309  0022F8  0100               	movlb	0	; () banked
  5310  0022FA  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5311  0022FC  B4D8               	btfsc	status,2,c
  5312  0022FE  D00A               	goto	l682
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;tela_PRINCIPAL.h: 49: sprintf(line2, " ALERTA DE INCENDIO");
  5316  002300  0E66               	movlw	low _line2
  5317  002302  6FA1               	movwf	sprintf@wh& (0+255),b
  5318  002304  0E01               	movlw	high _line2
  5319  002306  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5320  002308  0E88               	movlw	low STR_61
  5321  00230A  6FA3               	movwf	sprintf@f& (0+255),b
  5322  00230C  0E7C               	movlw	high STR_61
  5323  00230E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5324  002310  ECC9  F039         	call	_sprintf	;wreg free
  5325  002314                     l682:
  5326  002314  FFFF               	dw	65535	; assembler added errata NOP
  5327                           
  5328                           ;tela_PRINCIPAL.h: 50: }
  5329                           ;tela_PRINCIPAL.h: 51: if (flagErroTransdutor) {
  5330  002316  5072               	movf	_flagErroTransdutor,w,c
  5331  002318  B4D8               	btfsc	status,2,c
  5332  00231A  D013               	goto	l683
  5333                           
  5334                           ;tela_PRINCIPAL.h: 52: clearShiftREG();
  5335  00231C  ECDE  F037         	call	_clearShiftREG	;wreg free
  5336                           
  5337                           ;tela_PRINCIPAL.h: 53: sprintf(&line3[1], "Erro no Transdutor");
  5338  002320  0E52               	movlw	low (_line3+1)
  5339  002322  0100               	movlb	0	; () banked
  5340  002324  6FA1               	movwf	sprintf@wh& (0+255),b
  5341  002326  0E01               	movlw	high (_line3+1)
  5342  002328  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5343  00232A  0E4C               	movlw	low STR_62
  5344  00232C  6FA3               	movwf	sprintf@f& (0+255),b
  5345  00232E  0E7D               	movlw	high STR_62
  5346  002330  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5347  002332  ECC9  F039         	call	_sprintf	;wreg free
  5348                           
  5349                           ;tela_PRINCIPAL.h: 54: ocorrendoIncendio = 0;
  5350  002336  0E00               	movlw	0
  5351  002338  0100               	movlb	0	; () banked
  5352  00233A  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;tela_PRINCIPAL.h: 55: shift[1] = 1;
  5356  00233C  0E01               	movlw	1
  5357  00233E  6E45               	movwf	_shift+1,c
  5358                           
  5359                           ;tela_PRINCIPAL.h: 56: } else {
  5360  002340  D018               	goto	l684
  5361  002342                     l683:
  5362  002342  FFFF               	dw	65535	; assembler added errata NOP
  5363                           
  5364                           ;tela_PRINCIPAL.h: 57: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5365                           
  5366                           ; BSR set to: 0
  5367  002344  0100               	movlb	0	; () banked
  5368  002346  51F8               	movf	_pressao& (0+255),w,b
  5369  002348  EC04  F03D         	call	_intToFloatStr
  5370  00234C  C0B5  F0C2         	movff	?_intToFloatStr,_telaPrincipal$2376
  5371  002350  C0B6  F0C3         	movff	?_intToFloatStr+1,_telaPrincipal$2376+1
  5372                           
  5373                           ;tela_PRINCIPAL.h: 57: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5374  002354  0E53               	movlw	low (_line3+2)
  5375  002356  0100               	movlb	0	; () banked
  5376  002358  6FA1               	movwf	sprintf@wh& (0+255),b
  5377  00235A  0E01               	movlw	high (_line3+2)
  5378  00235C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5379  00235E  0E2B               	movlw	low STR_39
  5380  002360  6FA3               	movwf	sprintf@f& (0+255),b
  5381  002362  0E7E               	movlw	high STR_39
  5382  002364  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5383  002366  C0C2  F0A5         	movff	_telaPrincipal$2376,?_sprintf+4
  5384  00236A  C0C3  F0A6         	movff	_telaPrincipal$2376+1,?_sprintf+5
  5385  00236E  ECC9  F039         	call	_sprintf	;wreg free
  5386  002372                     l684:
  5387  002372  FFFF               	dw	65535	; assembler added errata NOP
  5388                           
  5389                           ;tela_PRINCIPAL.h: 58: }
  5390                           ;tela_PRINCIPAL.h: 61: if (codigoErro > 1 || ocorrendoIncendio) {
  5391  002374  0E02               	movlw	2
  5392  002376  0100               	movlb	0	; () banked
  5393  002378  61F3               	cpfslt	_codigoErro& (0+255),b
  5394  00237A  D003               	goto	u7820
  5395                           
  5396                           ; BSR set to: 0
  5397  00237C  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5398  00237E  B4D8               	btfsc	status,2,c
  5399  002380  D016               	goto	l689
  5400  002382                     u7820:
  5401  002382  FFFF               	dw	65535	; assembler added errata NOP
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;tela_PRINCIPAL.h: 62: if (flagTexto) {
  5405                           
  5406                           ; BSR set to: 0
  5407  002384  5073               	movf	_flagTexto,w,c
  5408  002386  B4D8               	btfsc	status,2,c
  5409  002388  D00A               	goto	l688
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;tela_PRINCIPAL.h: 63: sprintf(line4, " Press ESC p/ Reset");
  5413  00238A  0E3C               	movlw	low _line4
  5414  00238C  6FA1               	movwf	sprintf@wh& (0+255),b
  5415  00238E  0E01               	movlw	high _line4
  5416  002390  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5417  002392  0EEC               	movlw	low STR_64
  5418  002394  6FA3               	movwf	sprintf@f& (0+255),b
  5419  002396  0E7C               	movlw	high STR_64
  5420  002398  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5421  00239A  ECC9  F039         	call	_sprintf	;wreg free
  5422  00239E                     l688:
  5423  00239E  FFFF               	dw	65535	; assembler added errata NOP
  5424                           
  5425                           ;tela_PRINCIPAL.h: 64: }
  5426                           ;tela_PRINCIPAL.h: 65: if (btPress(1)) {
  5427  0023A0  0E01               	movlw	1
  5428  0023A2  EC4A  F03B         	call	_btPress
  5429  0023A6  0900               	iorlw	0
  5430  0023A8  A4D8               	btfss	status,2,c
  5431                           
  5432                           ;tela_PRINCIPAL.h: 66: resetParametros();
  5433  0023AA  EC17  F037         	call	_resetParametros	;wreg free
  5434  0023AE                     l689:
  5435  0023AE  FFFF               	dw	65535	; assembler added errata NOP
  5436                           
  5437                           ;tela_PRINCIPAL.h: 67: }
  5438                           ;tela_PRINCIPAL.h: 68: }
  5439                           ;tela_PRINCIPAL.h: 70: if (btPress(4)) {
  5440  0023B0  0E04               	movlw	4
  5441  0023B2  EC4A  F03B         	call	_btPress
  5442  0023B6  0900               	iorlw	0
  5443  0023B8  B4D8               	btfsc	status,2,c
  5444  0023BA  D005               	goto	l690
  5445                           
  5446                           ;tela_PRINCIPAL.h: 71: menu_posi = 1;
  5447  0023BC  0E01               	movlw	1
  5448  0023BE  0100               	movlb	0	; () banked
  5449  0023C0  6FDE               	movwf	_menu_posi& (0+255),b
  5450                           
  5451                           ;tela_PRINCIPAL.h: 72: sub_menu_posi = 1;
  5452  0023C2  0E01               	movlw	1
  5453  0023C4  6E6A               	movwf	_sub_menu_posi,c
  5454  0023C6                     l690:
  5455  0023C6  FFFF               	dw	65535	; assembler added errata NOP
  5456                           
  5457                           ;tela_PRINCIPAL.h: 73: }
  5458                           ;tela_PRINCIPAL.h: 76: if (!PORTCbits.RC0) {
  5459                           
  5460                           ; BSR set to: 0
  5461  0023C8  B082               	btfsc	3970,0,c	;volatile
  5462  0023CA  D011               	goto	l692
  5463                           
  5464                           ;tela_PRINCIPAL.h: 77: blink(line1, 20, 20);
  5465  0023CC  0E7B               	movlw	low _line1
  5466  0023CE  0100               	movlb	0	; () banked
  5467  0023D0  6F80               	movwf	blink@line& (0+255),b
  5468  0023D2  0E01               	movlw	high _line1
  5469  0023D4  6F81               	movwf	(blink@line+1)& (0+255),b
  5470  0023D6  0E14               	movlw	20
  5471  0023D8  6F82               	movwf	blink@start& (0+255),b
  5472  0023DA  0E14               	movlw	20
  5473  0023DC  6F83               	movwf	blink@end& (0+255),b
  5474  0023DE  ECE2  F038         	call	_blink	;wreg free
  5475                           
  5476                           ;tela_PRINCIPAL.h: 78: if (codigoErro == 0) {
  5477  0023E2  0100               	movlb	0	; () banked
  5478  0023E4  51F3               	movf	_codigoErro& (0+255),w,b
  5479  0023E6  A4D8               	btfss	status,2,c
  5480  0023E8  D002               	goto	l692
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;tela_PRINCIPAL.h: 79: codigoErro = 1;
  5484  0023EA  0E01               	movlw	1
  5485  0023EC  6FF3               	movwf	_codigoErro& (0+255),b
  5486  0023EE                     l692:
  5487  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  5488                           
  5489                           ;tela_PRINCIPAL.h: 80: }
  5490                           ;tela_PRINCIPAL.h: 81: }
  5491                           ;tela_PRINCIPAL.h: 82: if (status_jockey == 0) {
  5492                           
  5493                           ; BSR set to: 0
  5494  0023F0  0100               	movlb	0	; () banked
  5495  0023F2  51FD               	movf	_status_jockey& (0+255),w,b
  5496  0023F4  A4D8               	btfss	status,2,c
  5497  0023F6  D002               	goto	l693
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;tela_PRINCIPAL.h: 83: codigoErro = 4;
  5501  0023F8  0E04               	movlw	4
  5502  0023FA  D00B               	goto	L9
  5503  0023FC                     l693:
  5504  0023FC  FFFF               	dw	65535	; assembler added errata NOP
  5505                           
  5506                           ; BSR set to: 0
  5507                           
  5508                           ; BSR set to: 0
  5509  0023FE  51FC               	movf	_status_principal& (0+255),w,b
  5510  002400  A4D8               	btfss	status,2,c
  5511  002402  D002               	goto	l695
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;tela_PRINCIPAL.h: 85: codigoErro = 5;
  5515  002404  0E05               	movlw	5
  5516  002406  D005               	goto	L9
  5517  002408                     l695:
  5518  002408  FFFF               	dw	65535	; assembler added errata NOP
  5519                           
  5520                           ; BSR set to: 0
  5521                           
  5522                           ; BSR set to: 0
  5523  00240A  51FB               	movf	_status_estacionaria& (0+255),w,b
  5524  00240C  A4D8               	btfss	status,2,c
  5525  00240E  D003               	goto	l697
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;tela_PRINCIPAL.h: 87: codigoErro = 6;
  5529  002410  0E06               	movlw	6
  5530  002412                     L9:
  5531  002412  FFFF               	dw	65535	; assembler added errata NOP
  5532  002414  6FF3               	movwf	_codigoErro& (0+255),b
  5533  002416                     l697:
  5534  002416  FFFF               	dw	65535	; assembler added errata NOP
  5535                           
  5536                           ; BSR set to: 0
  5537                           
  5538                           ; BSR set to: 0
  5539                           
  5540                           ; BSR set to: 0
  5541                           
  5542                           ; BSR set to: 0
  5543  002418  0012               	return		;funcret
  5544  00241A  FFFF               	dw	65535	; errata NOP
  5545  00241C                     __end_of_telaPrincipal:
  5546                           	opt stack 0
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           fsr2h	equ	0xFDA
  5557                           fsr2l	equ	0xFD9
  5558                           status	equ	0xFD8
  5559                           
  5560 ;; *************** function _resetParametros *****************
  5561 ;; Defined at:
  5562 ;;		line 11 in file "tela_PRINCIPAL.h"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      void 
  5569 ;; Registers used:
  5570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5576 ;;      Params:         0       0       0       0       0       0       0
  5577 ;;      Locals:         0       0       0       0       0       0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0
  5579 ;;      Totals:         0       0       0       0       0       0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    7
  5583 ;; This function calls:
  5584 ;;		_clearShiftREG
  5585 ;; This function is called by:
  5586 ;;		_telaPrincipal
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text8
  5591  006E2E                     __ptext8:
  5592                           	opt stack 0
  5593  006E2E                     _resetParametros:
  5594                           	opt stack 0
  5595  006E2E  FFFF               	dw	65535	; assembler added errata NOP
  5596                           
  5597                           ;tela_PRINCIPAL.h: 12: ocorrendoIncendio = 0;
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;incstack = 0
  5601  006E30  0E00               	movlw	0
  5602  006E32  0100               	movlb	0	; () banked
  5603  006E34  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5604                           
  5605                           ;tela_PRINCIPAL.h: 13: codigoErro = 0;
  5606  006E36  0E00               	movlw	0
  5607  006E38  6FF3               	movwf	_codigoErro& (0+255),b
  5608                           
  5609                           ;tela_PRINCIPAL.h: 14: status_estacionaria = 1;
  5610  006E3A  0E01               	movlw	1
  5611  006E3C  6FFB               	movwf	_status_estacionaria& (0+255),b
  5612                           
  5613                           ;tela_PRINCIPAL.h: 15: status_jockey = 1;
  5614  006E3E  0E01               	movlw	1
  5615  006E40  6FFD               	movwf	_status_jockey& (0+255),b
  5616                           
  5617                           ;tela_PRINCIPAL.h: 16: status_principal = 1;
  5618  006E42  0E01               	movlw	1
  5619  006E44  6FFC               	movwf	_status_principal& (0+255),b
  5620                           
  5621                           ;tela_PRINCIPAL.h: 17: tempo_limite_partida = 0;
  5622  006E46  0E00               	movlw	0
  5623  006E48  6E6B               	movwf	_tempo_limite_partida,c
  5624                           
  5625                           ;tela_PRINCIPAL.h: 18: tempo_partida = 0;
  5626  006E4A  0E00               	movlw	0
  5627  006E4C  6E6C               	movwf	_tempo_partida,c
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;tela_PRINCIPAL.h: 19: clearShiftREG();
  5631  006E4E  ECDE  F037         	call	_clearShiftREG	;wreg free
  5632  006E52  0012               	return		;funcret
  5633  006E54  FFFF               	dw	65535	; errata NOP
  5634  006E56                     __end_of_resetParametros:
  5635                           	opt stack 0
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           postinc0	equ	0xFEE
  5641                           wreg	equ	0xFE8
  5642                           postdec1	equ	0xFE5
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function _setShiftREG *****************
  5650 ;; Defined at:
  5651 ;;		line 37 in file "shift595.h"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;		None
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  i               1    1[BANK0 ] unsigned char 
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      void 
  5658 ;; Registers used:
  5659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5665 ;;      Params:         0       0       0       0       0       0       0
  5666 ;;      Locals:         0       1       0       0       0       0       0
  5667 ;;      Temps:          0       1       0       0       0       0       0
  5668 ;;      Totals:         0       2       0       0       0       0       0
  5669 ;;Total ram usage:        2 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    6
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		_main
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text9
  5680  0073DA                     __ptext9:
  5681                           	opt stack 0
  5682  0073DA                     _setShiftREG:
  5683                           	opt stack 0
  5684  0073DA  FFFF               	dw	65535	; assembler added errata NOP
  5685                           
  5686                           ;shift595.h: 38: unsigned char i = 0;
  5687                           
  5688                           ;incstack = 0
  5689  0073DC  0E00               	movlw	0
  5690  0073DE  0100               	movlb	0	; () banked
  5691  0073E0  6F81               	movwf	setShiftREG@i& (0+255),b
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;shift595.h: 39: PORTEbits.RE1 = 0;
  5695  0073E2  9284               	bcf	3972,1,c	;volatile
  5696                           
  5697                           ;shift595.h: 40: for (i = 0; i < 8; i++) {
  5698  0073E4  0E00               	movlw	0
  5699  0073E6  6F81               	movwf	setShiftREG@i& (0+255),b
  5700  0073E8  D015               	goto	l6512
  5701  0073EA                     l429:
  5702  0073EA  FFFF               	dw	65535	; assembler added errata NOP
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;shift595.h: 41: PORTEbits.RE0 = 0;
  5706  0073EC  9084               	bcf	3972,0,c	;volatile
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;shift595.h: 42: PORTEbits.RE2 = shift[i];
  5710  0073EE  5181               	movf	setShiftREG@i& (0+255),w,b
  5711  0073F0  0D01               	mullw	1
  5712  0073F2  0E44               	movlw	low _shift
  5713  0073F4  24F3               	addwf	prodl,w,c
  5714  0073F6  6ED9               	movwf	fsr2l,c
  5715  0073F8  0E00               	movlw	high _shift
  5716  0073FA  20F4               	addwfc	prodh,w,c
  5717  0073FC  6EDA               	movwf	fsr2h,c
  5718  0073FE  50DF               	movf	indf2,w,c
  5719  007400  6F80               	movwf	??_setShiftREG& (0+255),b
  5720  007402  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5721  007404  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5722  007406  5084               	movf	3972,w,c	;volatile
  5723  007408  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5724  00740A  0BFB               	andlw	-5
  5725  00740C  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5726  00740E  6E84               	movwf	3972,c	;volatile
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;shift595.h: 43: PORTEbits.RE0 = 1;
  5730  007410  8084               	bsf	3972,0,c	;volatile
  5731                           
  5732                           ; BSR set to: 0
  5733  007412  2B81               	incf	setShiftREG@i& (0+255),f,b
  5734  007414                     l6512:
  5735  007414  FFFF               	dw	65535	; assembler added errata NOP
  5736                           
  5737                           ; BSR set to: 0
  5738  007416  0E07               	movlw	7
  5739  007418  6581               	cpfsgt	setShiftREG@i& (0+255),b
  5740  00741A  D7E7               	goto	l429
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;shift595.h: 44: }
  5744                           ;shift595.h: 45: PORTEbits.RE1 = 1;
  5745  00741C  8284               	bsf	3972,1,c	;volatile
  5746                           
  5747                           ; BSR set to: 0
  5748  00741E  0012               	return		;funcret
  5749  007420  FFFF               	dw	65535	; errata NOP
  5750  007422                     __end_of_setShiftREG:
  5751                           	opt stack 0
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           postinc0	equ	0xFEE
  5759                           wreg	equ	0xFE8
  5760                           postdec1	equ	0xFE5
  5761                           fsr1l	equ	0xFE1
  5762                           indf2	equ	0xFDF
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function _lerParametros *****************
  5768 ;; Defined at:
  5769 ;;		line 9 in file "util.h"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  i               1   21[BANK0 ] unsigned char 
  5774 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  1    wreg      void 
  5777 ;; Registers used:
  5778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5784 ;;      Params:         0       0       0       0       0       0       0
  5785 ;;      Locals:         0       2       0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0
  5787 ;;      Totals:         0       2       0       0       0       0       0
  5788 ;;Total ram usage:        2 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:   10
  5791 ;; This function calls:
  5792 ;;		_readEEPROM16_ext
  5793 ;;		_readEEPROM_ext
  5794 ;;		_writeEEPROM_ext
  5795 ;; This function is called by:
  5796 ;;		_main
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text10
  5801  002F68                     __ptext10:
  5802                           	opt stack 0
  5803  002F68                     _lerParametros:
  5804                           	opt stack 0
  5805  002F68  FFFF               	dw	65535	; assembler added errata NOP
  5806                           
  5807                           ;util.h: 10: char i = 0;
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;incstack = 0
  5811  002F6A  0E00               	movlw	0
  5812  002F6C  0100               	movlb	0	; () banked
  5813  002F6E  6F95               	movwf	lerParametros@i& (0+255),b
  5814                           
  5815                           ;util.h: 11: char verifica_memoria_nova = 0;
  5816  002F70  0E00               	movlw	0
  5817  002F72  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  5821  002F74  0E0C               	movlw	12
  5822  002F76  EC61  F03A         	call	_readEEPROM_ext
  5823  002F7A  0100               	movlb	0	; () banked
  5824  002F7C  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  5828  002F7E  0E14               	movlw	20
  5829  002F80  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  5830  002F82  B4D8               	btfsc	status,2,c
  5831  002F84  D016               	goto	l598
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;util.h: 14: for (i = 0; i < 100; i++) {
  5835  002F86  0E00               	movlw	0
  5836  002F88  6F95               	movwf	lerParametros@i& (0+255),b
  5837  002F8A                     l6878:
  5838  002F8A  FFFF               	dw	65535	; assembler added errata NOP
  5839                           
  5840                           ; BSR set to: 0
  5841  002F8C  0E63               	movlw	99
  5842  002F8E  6595               	cpfsgt	lerParametros@i& (0+255),b
  5843  002F90  D001               	goto	l599
  5844  002F92  D009               	goto	u7650
  5845  002F94                     l599:
  5846  002F94  FFFF               	dw	65535	; assembler added errata NOP
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;util.h: 15: writeEEPROM_ext(i, 0);
  5850                           
  5851                           ; BSR set to: 0
  5852  002F96  0E00               	movlw	0
  5853  002F98  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5854  002F9A  5195               	movf	lerParametros@i& (0+255),w,b
  5855  002F9C  ECA6  F039         	call	_writeEEPROM_ext
  5856  002FA0  0100               	movlb	0	; () banked
  5857  002FA2  2B95               	incf	lerParametros@i& (0+255),f,b
  5858  002FA4  D7F2               	goto	l6878
  5859  002FA6                     u7650:
  5860  002FA6  FFFF               	dw	65535	; assembler added errata NOP
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;util.h: 16: }
  5864                           ;util.h: 17: writeEEPROM_ext(12, 20);
  5865                           
  5866                           ; BSR set to: 0
  5867  002FA8  0E14               	movlw	20
  5868  002FAA  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5869  002FAC  0E0C               	movlw	12
  5870  002FAE  ECA6  F039         	call	_writeEEPROM_ext
  5871  002FB2                     l598:
  5872  002FB2  FFFF               	dw	65535	; assembler added errata NOP
  5873                           
  5874                           ;util.h: 18: }
  5875                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  5876  002FB4  0E00               	movlw	0
  5877  002FB6  EC61  F03A         	call	_readEEPROM_ext
  5878  002FBA  0100               	movlb	0	; () banked
  5879  002FBC  6FE2               	movwf	_sp_jockey& (0+255),b
  5880                           
  5881                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  5882  002FBE  0E01               	movlw	1
  5883  002FC0  EC61  F03A         	call	_readEEPROM_ext
  5884  002FC4  0100               	movlb	0	; () banked
  5885  002FC6  6FE1               	movwf	_sp_principal& (0+255),b
  5886                           
  5887                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  5888  002FC8  0E02               	movlw	2
  5889  002FCA  EC61  F03A         	call	_readEEPROM_ext
  5890  002FCE  0100               	movlb	0	; () banked
  5891  002FD0  6FE0               	movwf	_sp_estacionaria& (0+255),b
  5892                           
  5893                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  5894  002FD2  0E08               	movlw	8
  5895  002FD4  EC15  F038         	call	_readEEPROM16_ext
  5896  002FD8  C08E  F04F         	movff	?_readEEPROM16_ext,_horimetro
  5897  002FDC  C08F  F050         	movff	?_readEEPROM16_ext+1,_horimetro+1
  5898                           
  5899                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  5900  002FE0  0E04               	movlw	4
  5901  002FE2  EC61  F03A         	call	_readEEPROM_ext
  5902  002FE6  0100               	movlb	0	; () banked
  5903  002FE8  6FE3               	movwf	_sp_pressao_rede& (0+255),b
  5904                           
  5905                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  5906  002FEA  0E06               	movlw	6
  5907  002FEC  EC61  F03A         	call	_readEEPROM_ext
  5908  002FF0  0100               	movlb	0	; () banked
  5909  002FF2  6FE8               	movwf	_intervalo_teste_dia& (0+255),b
  5910                           
  5911                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  5912  002FF4  0E07               	movlw	7
  5913  002FF6  EC61  F03A         	call	_readEEPROM_ext
  5914  002FFA  0100               	movlb	0	; () banked
  5915  002FFC  6FE5               	movwf	_tempo_limite_estacionaria& (0+255),b
  5916                           
  5917                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  5918  002FFE  0E0A               	movlw	10
  5919  003000  EC61  F03A         	call	_readEEPROM_ext
  5920  003004  0100               	movlb	0	; () banked
  5921  003006  6FE7               	movwf	_dias_restante_teste& (0+255),b
  5922                           
  5923                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  5924  003008  0E0B               	movlw	11
  5925  00300A  EC61  F03A         	call	_readEEPROM_ext
  5926  00300E  0100               	movlb	0	; () banked
  5927  003010  6FE6               	movwf	_horario_de_teste& (0+255),b
  5928                           
  5929                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  5930  003012  0E0D               	movlw	13
  5931  003014  EC61  F03A         	call	_readEEPROM_ext
  5932  003018  0100               	movlb	0	; () banked
  5933  00301A  6FE4               	movwf	_tempo_limite_teste_estacionaria& (0+255),b
  5934                           
  5935                           ;util.h: 31: habilitaTesteAutomatico = readEEPROM_ext(15);
  5936  00301C  0E0F               	movlw	15
  5937  00301E  EC61  F03A         	call	_readEEPROM_ext
  5938  003022  0100               	movlb	0	; () banked
  5939  003024  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;util.h: 33: for (i = 0; i < 11; i++) {
  5943  003026  0E00               	movlw	0
  5944  003028  6F95               	movwf	lerParametros@i& (0+255),b
  5945  00302A                     l6892:
  5946  00302A  FFFF               	dw	65535	; assembler added errata NOP
  5947                           
  5948                           ; BSR set to: 0
  5949  00302C  0E0A               	movlw	10
  5950  00302E  6595               	cpfsgt	lerParametros@i& (0+255),b
  5951  003030  D001               	goto	l601
  5952  003032  D011               	goto	u7670
  5953  003034                     l601:
  5954  003034  FFFF               	dw	65535	; assembler added errata NOP
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;util.h: 34: tel1[i] = readEEPROM_ext(20 + i);
  5958                           
  5959                           ; BSR set to: 0
  5960  003036  5195               	movf	lerParametros@i& (0+255),w,b
  5961  003038  0D01               	mullw	1
  5962  00303A  0EB0               	movlw	low _tel1
  5963  00303C  24F3               	addwf	prodl,w,c
  5964  00303E  6ED9               	movwf	fsr2l,c
  5965  003040  0E01               	movlw	high _tel1
  5966  003042  20F4               	addwfc	prodh,w,c
  5967  003044  6EDA               	movwf	fsr2h,c
  5968  003046  5195               	movf	lerParametros@i& (0+255),w,b
  5969  003048  0F14               	addlw	20
  5970  00304A  EC61  F03A         	call	_readEEPROM_ext
  5971  00304E  6EDF               	movwf	indf2,c
  5972  003050  0100               	movlb	0	; () banked
  5973  003052  2B95               	incf	lerParametros@i& (0+255),f,b
  5974  003054  D7EA               	goto	l6892
  5975  003056                     u7670:
  5976  003056  FFFF               	dw	65535	; assembler added errata NOP
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;util.h: 35: }
  5980                           ;util.h: 36: for (i = 0; i < 11; i++) {
  5981                           
  5982                           ; BSR set to: 0
  5983  003058  0E00               	movlw	0
  5984  00305A  6F95               	movwf	lerParametros@i& (0+255),b
  5985  00305C                     l6904:
  5986  00305C  FFFF               	dw	65535	; assembler added errata NOP
  5987                           
  5988                           ; BSR set to: 0
  5989  00305E  0E0A               	movlw	10
  5990  003060  6595               	cpfsgt	lerParametros@i& (0+255),b
  5991  003062  D001               	goto	l603
  5992  003064  D011               	goto	u7690
  5993  003066                     l603:
  5994  003066  FFFF               	dw	65535	; assembler added errata NOP
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;util.h: 37: tel2[i] = readEEPROM_ext(40 + i);
  5998                           
  5999                           ; BSR set to: 0
  6000  003068  5195               	movf	lerParametros@i& (0+255),w,b
  6001  00306A  0D01               	mullw	1
  6002  00306C  0EA4               	movlw	low _tel2
  6003  00306E  24F3               	addwf	prodl,w,c
  6004  003070  6ED9               	movwf	fsr2l,c
  6005  003072  0E01               	movlw	high _tel2
  6006  003074  20F4               	addwfc	prodh,w,c
  6007  003076  6EDA               	movwf	fsr2h,c
  6008  003078  5195               	movf	lerParametros@i& (0+255),w,b
  6009  00307A  0F28               	addlw	40
  6010  00307C  EC61  F03A         	call	_readEEPROM_ext
  6011  003080  6EDF               	movwf	indf2,c
  6012  003082  0100               	movlb	0	; () banked
  6013  003084  2B95               	incf	lerParametros@i& (0+255),f,b
  6014  003086  D7EA               	goto	l6904
  6015  003088                     u7690:
  6016  003088  FFFF               	dw	65535	; assembler added errata NOP
  6017                           
  6018                           ; BSR set to: 0
  6019                           
  6020                           ; BSR set to: 0
  6021  00308A  0012               	return		;funcret
  6022  00308C  FFFF               	dw	65535	; errata NOP
  6023  00308E                     __end_of_lerParametros:
  6024                           	opt stack 0
  6025                           tblptru	equ	0xFF8
  6026                           tblptrh	equ	0xFF7
  6027                           tblptrl	equ	0xFF6
  6028                           tablat	equ	0xFF5
  6029                           prodh	equ	0xFF4
  6030                           prodl	equ	0xFF3
  6031                           postinc0	equ	0xFEE
  6032                           wreg	equ	0xFE8
  6033                           postdec1	equ	0xFE5
  6034                           fsr1l	equ	0xFE1
  6035                           indf2	equ	0xFDF
  6036                           fsr2h	equ	0xFDA
  6037                           fsr2l	equ	0xFD9
  6038                           status	equ	0xFD8
  6039                           
  6040 ;; *************** function _readEEPROM16_ext *****************
  6041 ;; Defined at:
  6042 ;;		line 48 in file "eeprom.h"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;  adress          1    wreg     unsigned char 
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;  adress          1   19[BANK0 ] unsigned char 
  6047 ;;  data            2   17[BANK0 ] unsigned int 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  2   14[BANK0 ] unsigned int 
  6050 ;; Registers used:
  6051 ;;		wreg, status,2, status,0, cstack
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6057 ;;      Params:         0       2       0       0       0       0       0
  6058 ;;      Locals:         0       3       0       0       0       0       0
  6059 ;;      Temps:          0       1       0       0       0       0       0
  6060 ;;      Totals:         0       6       0       0       0       0       0
  6061 ;;Total ram usage:        6 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    9
  6064 ;; This function calls:
  6065 ;;		_readEEPROM_ext
  6066 ;; This function is called by:
  6067 ;;		_lerParametros
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           	psect	text11
  6072  00702A                     __ptext11:
  6073                           	opt stack 0
  6074  00702A                     _readEEPROM16_ext:
  6075                           	opt stack 0
  6076  00702A  FFFF               	dw	65535	; assembler added errata NOP
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;incstack = 0
  6080                           ;readEEPROM16_ext@adress stored from wreg
  6081  00702C  0100               	movlb	0	; () banked
  6082  00702E  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  6083                           
  6084                           ;eeprom.h: 49: unsigned int data;
  6085                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  6086  007030  0100               	movlb	0	; () banked
  6087  007032  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  6088  007034  EC61  F03A         	call	_readEEPROM_ext
  6089  007038  0100               	movlb	0	; () banked
  6090  00703A  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6091  00703C  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6092  00703E  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  6093  007040  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;eeprom.h: 51: data <<= 8;
  6097  007042  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  6098  007044  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  6099  007046  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  6103  007048  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  6104  00704A  EC61  F03A         	call	_readEEPROM_ext
  6105  00704E  0100               	movlb	0	; () banked
  6106  007050  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6107  007052  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6108  007054  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;eeprom.h: 53: return data;
  6112  007056  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  6113  00705A  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  6114                           
  6115                           ; BSR set to: 0
  6116                           
  6117                           ; BSR set to: 0
  6118  00705E  0012               	return		;funcret
  6119  007060  FFFF               	dw	65535	; errata NOP
  6120  007062                     __end_of_readEEPROM16_ext:
  6121                           	opt stack 0
  6122                           tblptru	equ	0xFF8
  6123                           tblptrh	equ	0xFF7
  6124                           tblptrl	equ	0xFF6
  6125                           tablat	equ	0xFF5
  6126                           prodh	equ	0xFF4
  6127                           prodl	equ	0xFF3
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           postdec1	equ	0xFE5
  6131                           fsr1l	equ	0xFE1
  6132                           indf2	equ	0xFDF
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _informacoes *****************
  6138 ;; Defined at:
  6139 ;;		line 7 in file "tela_INFORMACOES.h"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;		None
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;		None
  6144 ;; Return value:  Size  Location     Type
  6145 ;;                  1    wreg      void 
  6146 ;; Registers used:
  6147 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6153 ;;      Params:         0       0       0       0       0       0       0
  6154 ;;      Locals:         0       0       0       0       0       0       0
  6155 ;;      Temps:          0       0       0       0       0       0       0
  6156 ;;      Totals:         0       0       0       0       0       0       0
  6157 ;;Total ram usage:        0 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    9
  6160 ;; This function calls:
  6161 ;;		_btPress
  6162 ;;		_sprintf
  6163 ;; This function is called by:
  6164 ;;		_main
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           	psect	text12
  6169  007776                     __ptext12:
  6170                           	opt stack 0
  6171  007776                     _informacoes:
  6172                           	opt stack 0
  6173  007776  FFFF               	dw	65535	; assembler added errata NOP
  6174                           
  6175                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;incstack = 0
  6179  007778  0E7B               	movlw	low _line1
  6180  00777A  0100               	movlb	0	; () banked
  6181  00777C  6FA1               	movwf	sprintf@wh& (0+255),b
  6182  00777E  0E01               	movlw	high _line1
  6183  007780  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6184  007782  0E9B               	movlw	low STR_86
  6185  007784  6FA3               	movwf	sprintf@f& (0+255),b
  6186  007786  0E7F               	movlw	high STR_86
  6187  007788  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6188  00778A  ECC9  F039         	call	_sprintf	;wreg free
  6189                           
  6190                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  6191  00778E  0E66               	movlw	low _line2
  6192  007790  0100               	movlb	0	; () banked
  6193  007792  6FA1               	movwf	sprintf@wh& (0+255),b
  6194  007794  0E01               	movlw	high _line2
  6195  007796  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6196  007798  0ED8               	movlw	low STR_87
  6197  00779A  6FA3               	movwf	sprintf@f& (0+255),b
  6198  00779C  0E7C               	movlw	high STR_87
  6199  00779E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6200  0077A0  ECC9  F039         	call	_sprintf	;wreg free
  6201                           
  6202                           ;tela_INFORMACOES.h: 10: sprintf(line3, "   48 99906-5651");
  6203  0077A4  0E51               	movlw	low _line3
  6204  0077A6  0100               	movlb	0	; () banked
  6205  0077A8  6FA1               	movwf	sprintf@wh& (0+255),b
  6206  0077AA  0E01               	movlw	high _line3
  6207  0077AC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6208  0077AE  0EB8               	movlw	low STR_88
  6209  0077B0  6FA3               	movwf	sprintf@f& (0+255),b
  6210  0077B2  0E7D               	movlw	high STR_88
  6211  0077B4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6212  0077B6  ECC9  F039         	call	_sprintf	;wreg free
  6213                           
  6214                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Aug 25 2019");
  6215  0077BA  0E3C               	movlw	low _line4
  6216  0077BC  0100               	movlb	0	; () banked
  6217  0077BE  6FA1               	movwf	sprintf@wh& (0+255),b
  6218  0077C0  0E01               	movlw	high _line4
  6219  0077C2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6220  0077C4  0E09               	movlw	low STR_89
  6221  0077C6  6FA3               	movwf	sprintf@f& (0+255),b
  6222  0077C8  0E7F               	movlw	high STR_89
  6223  0077CA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6224  0077CC  0EE5               	movlw	low STR_15
  6225  0077CE  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6226  0077D0  0E7E               	movlw	high STR_15
  6227  0077D2  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6228  0077D4  ECC9  F039         	call	_sprintf	;wreg free
  6229                           
  6230                           ;tela_INFORMACOES.h: 12: if (btPress(1)) {
  6231  0077D8  0E01               	movlw	1
  6232  0077DA  EC4A  F03B         	call	_btPress
  6233  0077DE  0900               	iorlw	0
  6234  0077E0  A4D8               	btfss	status,2,c
  6235                           
  6236                           ;tela_INFORMACOES.h: 13: menu_posi = _menu_posi;
  6237  0077E2  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  6238  0077E6  0012               	return		;funcret
  6239  0077E8  FFFF               	dw	65535	; errata NOP
  6240  0077EA                     __end_of_informacoes:
  6241                           	opt stack 0
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           prodh	equ	0xFF4
  6247                           prodl	equ	0xFF3
  6248                           postinc0	equ	0xFEE
  6249                           wreg	equ	0xFE8
  6250                           postdec1	equ	0xFE5
  6251                           fsr1l	equ	0xFE1
  6252                           indf2	equ	0xFDF
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _getSinalSIM800L *****************
  6258 ;; Defined at:
  6259 ;;		line 13 in file "comunicacao.h"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;		None
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  sinal           2   72[BANK0 ] int 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6273 ;;      Params:         0       0       0       0       0       0       0
  6274 ;;      Locals:         0       2       0       0       0       0       0
  6275 ;;      Temps:          0       2       0       0       0       0       0
  6276 ;;      Totals:         0       4       0       0       0       0       0
  6277 ;;Total ram usage:        4 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:   10
  6280 ;; This function calls:
  6281 ;;		_aguardaBuffer
  6282 ;;		_atoi
  6283 ;;		_delay
  6284 ;;		_getSerial
  6285 ;;		_limparBuffer
  6286 ;;		_printf
  6287 ;;		_writeChar
  6288 ;; This function is called by:
  6289 ;;		_main
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           	psect	text13
  6294  00299E                     __ptext13:
  6295                           	opt stack 0
  6296  00299E                     _getSinalSIM800L:
  6297                           	opt stack 0
  6298  00299E  FFFF               	dw	65535	; assembler added errata NOP
  6299                           
  6300                           ;comunicacao.h: 14: if (!timerVerificarSinal) {
  6301                           
  6302                           ;incstack = 0
  6303  0029A0  0100               	movlb	0	; () banked
  6304  0029A2  51FE               	movf	_timerVerificarSinal& (0+255),w,b
  6305  0029A4  A4D8               	btfss	status,2,c
  6306  0029A6  D0CD               	goto	l302
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;comunicacao.h: 15: if (!gsmOcupado) {
  6310  0029A8  51F4               	movf	_gsmOcupado& (0+255),w,b
  6311  0029AA  B4D8               	btfsc	status,2,c
  6312  0029AC  D0B9               	goto	l300
  6313  0029AE  D0C9               	goto	l302
  6314  0029B0  FFFF               	dw	65535	; assembler added errata NOP
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;comunicacao.h: 18: limparBuffer();
  6318                           
  6319                           ; BSR set to: 0
  6320  0029B2  ECC3  F037         	call	_limparBuffer	;wreg free
  6321                           
  6322                           ;comunicacao.h: 19: printf("AT+CSQ\r\n");
  6323  0029B6  0E89               	movlw	low STR_3
  6324  0029B8  0100               	movlb	0	; () banked
  6325  0029BA  6FA1               	movwf	printf@f& (0+255),b
  6326  0029BC  0E7F               	movlw	high STR_3
  6327  0029BE  6FA2               	movwf	(printf@f+1)& (0+255),b
  6328  0029C0  ECC4  F038         	call	_printf	;wreg free
  6329                           
  6330                           ;comunicacao.h: 20: timerEtapaComunicacao = 10;
  6331  0029C4  0E0A               	movlw	10
  6332  0029C6  0100               	movlb	0	; () banked
  6333  0029C8  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;comunicacao.h: 21: etapaComunicacao = 1;
  6337  0029CA  0E00               	movlw	0
  6338  0029CC  6E52               	movwf	_etapaComunicacao+1,c
  6339  0029CE  0E01               	movlw	1
  6340  0029D0  6E51               	movwf	_etapaComunicacao,c
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;comunicacao.h: 22: telefoneSelecionado = 0;
  6344  0029D2  0E00               	movlw	0
  6345  0029D4  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  6346                           
  6347                           ;comunicacao.h: 23: break;
  6348  0029D6  D0B5               	goto	l302
  6349  0029D8  FFFF               	dw	65535	; assembler added errata NOP
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;comunicacao.h: 25: if (!timerEtapaComunicacao) {
  6353                           
  6354                           ; BSR set to: 0
  6355  0029DA  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  6356  0029DC  A4D8               	btfss	status,2,c
  6357  0029DE  D02B               	goto	l306
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;comunicacao.h: 26: printf("AT\r\n");
  6361  0029E0  0EDE               	movlw	low STR_4
  6362  0029E2  6FA1               	movwf	printf@f& (0+255),b
  6363  0029E4  0E7F               	movlw	high STR_4
  6364  0029E6  6FA2               	movwf	(printf@f+1)& (0+255),b
  6365  0029E8  ECC4  F038         	call	_printf	;wreg free
  6366                           
  6367                           ;comunicacao.h: 27: delay(100);
  6368  0029EC  0E00               	movlw	0
  6369  0029EE  0100               	movlb	0	; () banked
  6370  0029F0  6F81               	movwf	(delay@x+1)& (0+255),b
  6371  0029F2  0E64               	movlw	100
  6372  0029F4  6F80               	movwf	delay@x& (0+255),b
  6373  0029F6  ECA8  F037         	call	_delay	;wreg free
  6374                           
  6375                           ;comunicacao.h: 28: if (aguardaBuffer("OK")) {
  6376  0029FA  0EFA               	movlw	low STR_5
  6377  0029FC  0100               	movlb	0	; () banked
  6378  0029FE  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6379  002A00  0E7F               	movlw	high STR_5
  6380  002A02  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6381  002A04  ECA6  F038         	call	_aguardaBuffer	;wreg free
  6382  002A08  0900               	iorlw	0
  6383  002A0A  B4D8               	btfsc	status,2,c
  6384  002A0C  D005               	goto	l305
  6385                           
  6386                           ;comunicacao.h: 29: etapaComunicacao = 0;
  6387  002A0E  0E00               	movlw	0
  6388  002A10  6E52               	movwf	_etapaComunicacao+1,c
  6389  002A12  0E00               	movlw	0
  6390  002A14  6E51               	movwf	_etapaComunicacao,c
  6391                           
  6392                           ;comunicacao.h: 30: } else {
  6393  002A16  D00F               	goto	l306
  6394  002A18                     l305:
  6395  002A18  FFFF               	dw	65535	; assembler added errata NOP
  6396                           
  6397                           ;comunicacao.h: 31: etapaComunicacao = 0;
  6398  002A1A  0E00               	movlw	0
  6399  002A1C  6E52               	movwf	_etapaComunicacao+1,c
  6400  002A1E  0E00               	movlw	0
  6401  002A20  6E51               	movwf	_etapaComunicacao,c
  6402                           
  6403                           ;comunicacao.h: 32: writeChar(0x1A);
  6404  002A22  0E1A               	movlw	26
  6405  002A24  0100               	movlb	0	; () banked
  6406  002A26  6F80               	movwf	writeChar@hex& (0+255),b
  6407  002A28  0E00               	movlw	0
  6408  002A2A  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  6409  002A2C  EC7F  F036         	call	_writeChar	;wreg free
  6410                           
  6411                           ;comunicacao.h: 33: intensidadeSinal = 'x';
  6412  002A30  0E78               	movlw	120
  6413  002A32  0100               	movlb	0	; () banked
  6414  002A34  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6415  002A36                     l306:
  6416  002A36  FFFF               	dw	65535	; assembler added errata NOP
  6417                           
  6418                           ;comunicacao.h: 34: }
  6419                           ;comunicacao.h: 35: }
  6420                           ;comunicacao.h: 36: if (aguardaBuffer("+CSQ: ")) {
  6421                           
  6422                           ; BSR set to: 0
  6423                           
  6424                           ; BSR set to: 0
  6425  002A38  0EB1               	movlw	low STR_6
  6426  002A3A  0100               	movlb	0	; () banked
  6427  002A3C  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6428  002A3E  0E7F               	movlw	high STR_6
  6429  002A40  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6430  002A42  ECA6  F038         	call	_aguardaBuffer	;wreg free
  6431  002A46  0900               	iorlw	0
  6432  002A48  B4D8               	btfsc	status,2,c
  6433  002A4A  D07B               	goto	l302
  6434                           
  6435                           ;comunicacao.h: 37: int sinal = atoi(getSerial("+CSQ: ", ','));
  6436  002A4C  0EB1               	movlw	low STR_6
  6437  002A4E  0100               	movlb	0	; () banked
  6438  002A50  6FB5               	movwf	getSerial@str& (0+255),b
  6439  002A52  0E7F               	movlw	high STR_6
  6440  002A54  6FB6               	movwf	(getSerial@str+1)& (0+255),b
  6441  002A56  0E2C               	movlw	44
  6442  002A58  6FB7               	movwf	getSerial@end& (0+255),b
  6443  002A5A  ECD8  F018         	call	_getSerial	;wreg free
  6444  002A5E  C0B5  F0BF         	movff	?_getSerial,atoi@s
  6445  002A62  C0B6  F0C0         	movff	?_getSerial+1,atoi@s+1
  6446  002A66  ECF4  F01A         	call	_atoi	;wreg free
  6447  002A6A  C0BF  F0C8         	movff	?_atoi,getSinalSIM800L@sinal
  6448  002A6E  C0C0  F0C9         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  6449                           
  6450                           ;comunicacao.h: 38: if (sinal < 10) {
  6451  002A72  0100               	movlb	0	; () banked
  6452  002A74  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6453  002A76  D006               	goto	u6880
  6454  002A78  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6455  002A7A  E108               	bnz	l6470
  6456  002A7C  0E0A               	movlw	10
  6457  002A7E  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6458  002A80  B0D8               	btfsc	status,0,c
  6459  002A82  D003               	goto	l308
  6460  002A84                     u6880:
  6461  002A84  FFFF               	dw	65535	; assembler added errata NOP
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;comunicacao.h: 39: intensidadeSinal = ' ';
  6465  002A86  0E20               	movlw	32
  6466  002A88  D03B               	goto	L12
  6467  002A8A                     l308:
  6468  002A8A  FFFF               	dw	65535	; assembler added errata NOP
  6469  002A8C                     l6470:
  6470                           
  6471                           ; BSR set to: 0
  6472  002A8C  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6473  002A8E  D011               	goto	l310
  6474  002A90  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6475  002A92  E104               	bnz	u6890
  6476  002A94  0E0A               	movlw	10
  6477  002A96  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6478  002A98  A0D8               	btfss	status,0,c
  6479  002A9A  D00B               	goto	l310
  6480  002A9C                     u6890:
  6481                           
  6482                           ; BSR set to: 0
  6483  002A9C  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6484  002A9E  D006               	goto	u6900
  6485  002AA0  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6486  002AA2  E108               	bnz	l6476
  6487  002AA4  0E0F               	movlw	15
  6488  002AA6  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6489  002AA8  B0D8               	btfsc	status,0,c
  6490  002AAA  D003               	goto	l310
  6491  002AAC                     u6900:
  6492  002AAC  FFFF               	dw	65535	; assembler added errata NOP
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;comunicacao.h: 41: intensidadeSinal = 0x02;
  6496  002AAE  0E02               	movlw	2
  6497  002AB0  D027               	goto	L12
  6498  002AB2                     l310:
  6499  002AB2  FFFF               	dw	65535	; assembler added errata NOP
  6500  002AB4                     l6476:
  6501                           
  6502                           ; BSR set to: 0
  6503  002AB4  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6504  002AB6  D011               	goto	l312
  6505  002AB8  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6506  002ABA  E104               	bnz	u6910
  6507  002ABC  0E10               	movlw	16
  6508  002ABE  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6509  002AC0  A0D8               	btfss	status,0,c
  6510  002AC2  D00B               	goto	l312
  6511  002AC4                     u6910:
  6512                           
  6513                           ; BSR set to: 0
  6514  002AC4  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6515  002AC6  D006               	goto	u6920
  6516  002AC8  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6517  002ACA  E108               	bnz	l6482
  6518  002ACC  0E14               	movlw	20
  6519  002ACE  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6520  002AD0  B0D8               	btfsc	status,0,c
  6521  002AD2  D003               	goto	l312
  6522  002AD4                     u6920:
  6523  002AD4  FFFF               	dw	65535	; assembler added errata NOP
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;comunicacao.h: 43: intensidadeSinal = 0x03;
  6527  002AD6  0E03               	movlw	3
  6528  002AD8  D013               	goto	L12
  6529  002ADA                     l312:
  6530  002ADA  FFFF               	dw	65535	; assembler added errata NOP
  6531  002ADC                     l6482:
  6532                           
  6533                           ; BSR set to: 0
  6534  002ADC  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6535  002ADE  D012               	goto	l314
  6536  002AE0  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6537  002AE2  E104               	bnz	u6930
  6538  002AE4  0E14               	movlw	20
  6539  002AE6  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6540  002AE8  A0D8               	btfss	status,0,c
  6541  002AEA  D00C               	goto	l314
  6542  002AEC                     u6930:
  6543                           
  6544                           ; BSR set to: 0
  6545  002AEC  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6546  002AEE  D006               	goto	u6940
  6547  002AF0  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6548  002AF2  E109               	bnz	l309
  6549  002AF4  0E1F               	movlw	31
  6550  002AF6  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6551  002AF8  B0D8               	btfsc	status,0,c
  6552  002AFA  D004               	goto	l314
  6553  002AFC                     u6940:
  6554  002AFC  FFFF               	dw	65535	; assembler added errata NOP
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;comunicacao.h: 45: intensidadeSinal = 0x04;
  6558  002AFE  0E04               	movlw	4
  6559  002B00                     L12:
  6560  002B00  FFFF               	dw	65535	; assembler added errata NOP
  6561  002B02  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6562  002B04                     l314:
  6563  002B04  FFFF               	dw	65535	; assembler added errata NOP
  6564  002B06                     l309:
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;comunicacao.h: 46: }
  6568                           ;comunicacao.h: 47: etapaComunicacao = 0;
  6569  002B06  0E00               	movlw	0
  6570  002B08  6E52               	movwf	_etapaComunicacao+1,c
  6571  002B0A  0E00               	movlw	0
  6572  002B0C  6E51               	movwf	_etapaComunicacao,c
  6573                           
  6574                           ;comunicacao.h: 48: timerVerificarSinal = 6;
  6575  002B0E  0E06               	movlw	6
  6576  002B10  6FFE               	movwf	_timerVerificarSinal& (0+255),b
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;comunicacao.h: 49: }
  6580                           ;comunicacao.h: 50: break;
  6581  002B12  D017               	goto	l302
  6582  002B14  FFFF               	dw	65535	; assembler added errata NOP
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;comunicacao.h: 52: etapaComunicacao = 0;
  6586                           
  6587                           ; BSR set to: 0
  6588  002B16  0E00               	movlw	0
  6589  002B18  6E52               	movwf	_etapaComunicacao+1,c
  6590  002B1A  0E00               	movlw	0
  6591  002B1C  6E51               	movwf	_etapaComunicacao,c
  6592                           
  6593                           ;comunicacao.h: 53: }
  6594  002B1E  D011               	goto	l302
  6595  002B20                     l300:
  6596  002B20  FFFF               	dw	65535	; assembler added errata NOP
  6597                           
  6598                           ; BSR set to: 0
  6599                           
  6600                           ; BSR set to: 0
  6601  002B22  C051  F0C6         	movff	_etapaComunicacao,??_getSinalSIM800L
  6602  002B26  C052  F0C7         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  6603                           
  6604                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6605                           ; Switch size 1, requested type "space"
  6606                           ; Number of cases is 1, Range of values is 0 to 0
  6607                           ; switch strategies available:
  6608                           ; Name         Instructions Cycles
  6609                           ; simple_byte            4     3 (average)
  6610                           ;	Chosen strategy is simple_byte
  6611  002B2A  51C7               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  6612  002B2C  0A00               	xorlw	0	; case 0
  6613  002B2E  A4D8               	btfss	status,2,c
  6614  002B30  D7F1               	goto	l315
  6615                           
  6616                           ; BSR set to: 0
  6617                           ; Switch size 1, requested type "space"
  6618                           ; Number of cases is 2, Range of values is 0 to 1
  6619                           ; switch strategies available:
  6620                           ; Name         Instructions Cycles
  6621                           ; simple_byte            7     4 (average)
  6622                           ;	Chosen strategy is simple_byte
  6623  002B32  51C6               	movf	??_getSinalSIM800L& (0+255),w,b
  6624  002B34  0A00               	xorlw	0	; case 0
  6625  002B36  B4D8               	btfsc	status,2,c
  6626  002B38  D73B               	goto	l301
  6627  002B3A  0A01               	xorlw	1	; case 1
  6628  002B3C  B4D8               	btfsc	status,2,c
  6629  002B3E  D74C               	goto	l303
  6630  002B40  D7E9               	goto	l315
  6631  002B42                     l302:
  6632  002B42  FFFF               	dw	65535	; assembler added errata NOP
  6633                           
  6634                           ; BSR set to: 0
  6635                           
  6636                           ; BSR set to: 0
  6637                           
  6638                           ; BSR set to: 0
  6639  002B44  0012               	return		;funcret
  6640  002B46  FFFF               	dw	65535	; errata NOP
  6641  002B48                     __end_of_getSinalSIM800L:
  6642                           	opt stack 0
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           postinc0	equ	0xFEE
  6650                           wreg	equ	0xFE8
  6651                           postdec1	equ	0xFE5
  6652                           fsr1l	equ	0xFE1
  6653                           indf2	equ	0xFDF
  6654                           fsr2h	equ	0xFDA
  6655                           fsr2l	equ	0xFD9
  6656                           status	equ	0xFD8
  6657                           
  6658 ;; *************** function _getSerial *****************
  6659 ;; Defined at:
  6660 ;;		line 40 in file "serial.h"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  str             2   53[BANK0 ] PTR unsigned char 
  6663 ;;		 -> STR_7(7), 
  6664 ;;  end             1   55[BANK0 ] unsigned char 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  i               1   60[BANK0 ] unsigned char 
  6667 ;;  ret             2   61[BANK0 ] PTR unsigned char 
  6668 ;;		 -> NULL(0), bufferSerial(60), 
  6669 ;;  length          2   58[BANK0 ] unsigned int 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  2   53[BANK0 ] PTR unsigned char 
  6672 ;; Registers used:
  6673 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6679 ;;      Params:         0       3       0       0       0       0       0
  6680 ;;      Locals:         0       5       0       0       0       0       0
  6681 ;;      Temps:          0       2       0       0       0       0       0
  6682 ;;      Totals:         0      10       0       0       0       0       0
  6683 ;;Total ram usage:       10 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    9
  6686 ;; This function calls:
  6687 ;;		_memset
  6688 ;;		_sprintf
  6689 ;;		_strlen
  6690 ;;		_strstr
  6691 ;; This function is called by:
  6692 ;;		_getSinalSIM800L
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	text14
  6697  0031B0                     __ptext14:
  6698                           	opt stack 0
  6699  0031B0                     _getSerial:
  6700                           	opt stack 0
  6701  0031B0  FFFF               	dw	65535	; assembler added errata NOP
  6702                           
  6703                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  6704                           
  6705                           ;incstack = 0
  6706  0031B2  0E90               	movlw	low _bufferAUX
  6707  0031B4  0100               	movlb	0	; () banked
  6708  0031B6  6F80               	movwf	memset@p1& (0+255),b
  6709  0031B8  0E01               	movlw	high _bufferAUX
  6710  0031BA  6F81               	movwf	(memset@p1+1)& (0+255),b
  6711  0031BC  0E00               	movlw	0
  6712  0031BE  6F83               	movwf	(memset@c+1)& (0+255),b
  6713  0031C0  0E00               	movlw	0
  6714  0031C2  6F82               	movwf	memset@c& (0+255),b
  6715  0031C4  0E00               	movlw	0
  6716  0031C6  6F85               	movwf	(memset@n+1)& (0+255),b
  6717  0031C8  0E14               	movlw	20
  6718  0031CA  6F84               	movwf	memset@n& (0+255),b
  6719  0031CC  EC31  F038         	call	_memset	;wreg free
  6720                           
  6721                           ;serial.h: 42: unsigned int length = strlen(str);
  6722  0031D0  C0B5  F080         	movff	getSerial@str,strlen@s
  6723  0031D4  C0B6  F081         	movff	getSerial@str+1,strlen@s+1
  6724  0031D8  ECB7  F03A         	call	_strlen	;wreg free
  6725  0031DC  C080  F0BA         	movff	?_strlen,getSerial@length
  6726  0031E0  C081  F0BB         	movff	?_strlen+1,getSerial@length+1
  6727                           
  6728                           ;serial.h: 43: char* ret;
  6729                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  6730  0031E4  0E00               	movlw	low _bufferSerial
  6731  0031E6  0100               	movlb	0	; () banked
  6732  0031E8  6F8F               	movwf	strstr@s1& (0+255),b
  6733  0031EA  0E01               	movlw	high _bufferSerial
  6734  0031EC  6F90               	movwf	(strstr@s1+1)& (0+255),b
  6735  0031EE  C0B5  F091         	movff	getSerial@str,strstr@s2
  6736  0031F2  C0B6  F092         	movff	getSerial@str+1,strstr@s2+1
  6737  0031F6  EC9D  F01F         	call	_strstr	;wreg free
  6738  0031FA  C08F  F0BD         	movff	?_strstr,getSerial@ret
  6739  0031FE  C090  F0BE         	movff	?_strstr+1,getSerial@ret+1
  6740                           
  6741                           ;serial.h: 45: if (ret) {
  6742  003202  0100               	movlb	0	; () banked
  6743  003204  51BD               	movf	getSerial@ret& (0+255),w,b
  6744  003206  11BE               	iorwf	(getSerial@ret+1)& (0+255),w,b
  6745  003208  B4D8               	btfsc	status,2,c
  6746  00320A  D058               	goto	u5610
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;serial.h: 46: unsigned char i = 0;
  6750  00320C  0E00               	movlw	0
  6751  00320E  6FBC               	movwf	getSerial@i& (0+255),b
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  6755  003210  C0BA  F0BC         	movff	getSerial@length,getSerial@i
  6756  003214  D042               	goto	l265
  6757  003216  FFFF               	dw	65535	; assembler added errata NOP
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;serial.h: 48: if (ret[i] == end) {
  6761                           
  6762                           ; BSR set to: 0
  6763  003218  51BC               	movf	getSerial@i& (0+255),w,b
  6764  00321A  0D01               	mullw	1
  6765  00321C  50F3               	movf	prodl,w,c
  6766  00321E  25BD               	addwf	getSerial@ret& (0+255),w,b
  6767  003220  6ED9               	movwf	fsr2l,c
  6768  003222  50F4               	movf	prodh,w,c
  6769  003224  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6770  003226  6EDA               	movwf	fsr2h,c
  6771  003228  51B7               	movf	getSerial@end& (0+255),w,b
  6772  00322A  18DE               	xorwf	postinc2,w,c
  6773  00322C  A4D8               	btfss	status,2,c
  6774  00322E  D017               	goto	l267
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  6778  003230  0E90               	movlw	low _bufferAUX
  6779  003232  6FA1               	movwf	sprintf@wh& (0+255),b
  6780  003234  0E01               	movlw	high _bufferAUX
  6781  003236  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6782  003238  0EE8               	movlw	low STR_1
  6783  00323A  6FA3               	movwf	sprintf@f& (0+255),b
  6784  00323C  0E7F               	movlw	high STR_1
  6785  00323E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6786  003240  0E90               	movlw	low _bufferAUX
  6787  003242  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6788  003244  0E01               	movlw	high _bufferAUX
  6789  003246  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6790  003248  0E00               	movlw	0
  6791  00324A  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  6792  00324C  0E00               	movlw	0
  6793  00324E  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6794  003250  ECC9  F039         	call	_sprintf	;wreg free
  6795                           
  6796                           ;serial.h: 50: return bufferAUX;
  6797  003254  0E90               	movlw	low _bufferAUX
  6798  003256  0100               	movlb	0	; () banked
  6799  003258  6FB5               	movwf	?_getSerial& (0+255),b
  6800  00325A  0E01               	movlw	high _bufferAUX
  6801  00325C  D033               	goto	L13
  6802  00325E                     l267:
  6803  00325E  FFFF               	dw	65535	; assembler added errata NOP
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;serial.h: 51: }
  6807                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  6808                           
  6809                           ; BSR set to: 0
  6810  003260  0E90               	movlw	low _bufferAUX
  6811  003262  6FA1               	movwf	sprintf@wh& (0+255),b
  6812  003264  0E01               	movlw	high _bufferAUX
  6813  003266  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6814  003268  0EE8               	movlw	low STR_1
  6815  00326A  6FA3               	movwf	sprintf@f& (0+255),b
  6816  00326C  0E7F               	movlw	high STR_1
  6817  00326E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6818  003270  0E90               	movlw	low _bufferAUX
  6819  003272  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6820  003274  0E01               	movlw	high _bufferAUX
  6821  003276  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6822  003278  51BC               	movf	getSerial@i& (0+255),w,b
  6823  00327A  0D01               	mullw	1
  6824  00327C  50F3               	movf	prodl,w,c
  6825  00327E  25BD               	addwf	getSerial@ret& (0+255),w,b
  6826  003280  6ED9               	movwf	fsr2l,c
  6827  003282  50F4               	movf	prodh,w,c
  6828  003284  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6829  003286  6EDA               	movwf	fsr2h,c
  6830  003288  50DF               	movf	indf2,w,c
  6831  00328A  6FB8               	movwf	??_getSerial& (0+255),b
  6832  00328C  51B8               	movf	??_getSerial& (0+255),w,b
  6833  00328E  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6834  003290  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  6835  003292  ECC9  F039         	call	_sprintf	;wreg free
  6836  003296  0100               	movlb	0	; () banked
  6837  003298  2BBC               	incf	getSerial@i& (0+255),f,b
  6838  00329A                     l265:
  6839  00329A  FFFF               	dw	65535	; assembler added errata NOP
  6840                           
  6841                           ; BSR set to: 0
  6842                           
  6843                           ; BSR set to: 0
  6844  00329C  C0BD  F080         	movff	getSerial@ret,strlen@s
  6845  0032A0  C0BE  F081         	movff	getSerial@ret+1,strlen@s+1
  6846  0032A4  ECB7  F03A         	call	_strlen	;wreg free
  6847  0032A8  0100               	movlb	0	; () banked
  6848  0032AA  51BC               	movf	getSerial@i& (0+255),w,b
  6849  0032AC  6FB8               	movwf	??_getSerial& (0+255),b
  6850  0032AE  6BB9               	clrf	(??_getSerial+1)& (0+255),b
  6851  0032B0  5180               	movf	?_strlen& (0+255),w,b
  6852  0032B2  5DB8               	subwf	??_getSerial& (0+255),w,b
  6853  0032B4  5181               	movf	(?_strlen+1)& (0+255),w,b
  6854  0032B6  59B9               	subwfb	(??_getSerial+1)& (0+255),w,b
  6855  0032B8  A0D8               	btfss	status,0,c
  6856  0032BA  D7AD               	goto	l266
  6857  0032BC                     u5610:
  6858  0032BC  FFFF               	dw	65535	; assembler added errata NOP
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;serial.h: 53: }
  6862                           ;serial.h: 54: }
  6863                           ;serial.h: 55: return 0;
  6864                           
  6865                           ; BSR set to: 0
  6866                           
  6867                           ; BSR set to: 0
  6868  0032BE  0E00               	movlw	0
  6869  0032C0  6FB5               	movwf	?_getSerial& (0+255),b
  6870  0032C2  0E00               	movlw	0
  6871  0032C4                     L13:
  6872  0032C4  FFFF               	dw	65535	; assembler added errata NOP
  6873  0032C6  6FB6               	movwf	(?_getSerial+1)& (0+255),b
  6874                           
  6875                           ; BSR set to: 0
  6876                           
  6877                           ; BSR set to: 0
  6878  0032C8  0012               	return		;funcret
  6879  0032CA  FFFF               	dw	65535	; errata NOP
  6880  0032CC                     __end_of_getSerial:
  6881                           	opt stack 0
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           prodh	equ	0xFF4
  6887                           prodl	equ	0xFF3
  6888                           postinc0	equ	0xFEE
  6889                           wreg	equ	0xFE8
  6890                           postdec1	equ	0xFE5
  6891                           fsr1l	equ	0xFE1
  6892                           indf2	equ	0xFDF
  6893                           postinc2	equ	0xFDE
  6894                           fsr2h	equ	0xFDA
  6895                           fsr2l	equ	0xFD9
  6896                           status	equ	0xFD8
  6897                           
  6898 ;; *************** function _atoi *****************
  6899 ;; Defined at:
  6900 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;  s               2   63[BANK0 ] PTR const unsigned char 
  6903 ;;		 -> bufferAUX(20), NULL(0), 
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;  a               2   68[BANK0 ] int 
  6906 ;;  sign            1   67[BANK0 ] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  2   63[BANK0 ] int 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6916 ;;      Params:         0       2       0       0       0       0       0
  6917 ;;      Locals:         0       3       0       0       0       0       0
  6918 ;;      Temps:          0       2       0       0       0       0       0
  6919 ;;      Totals:         0       7       0       0       0       0       0
  6920 ;;Total ram usage:        7 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    7
  6923 ;; This function calls:
  6924 ;;		___wmul
  6925 ;;		_isdigit
  6926 ;; This function is called by:
  6927 ;;		_getSinalSIM800L
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text15
  6932  0035E8                     __ptext15:
  6933                           	opt stack 0
  6934  0035E8                     _atoi:
  6935                           	opt stack 0
  6936  0035E8  FFFF               	dw	65535	; assembler added errata NOP
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;incstack = 0
  6940  0035EA  D004               	goto	l1268
  6941  0035EC  FFFF               	dw	65535	; assembler added errata NOP
  6942  0035EE  0100               	movlb	0	; () banked
  6943  0035F0  4BBF               	infsnz	atoi@s& (0+255),f,b
  6944  0035F2  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  6945  0035F4                     l1268:
  6946  0035F4  FFFF               	dw	65535	; assembler added errata NOP
  6947                           
  6948                           ; BSR set to: 0
  6949  0035F6  C0BF  FFD9         	movff	atoi@s,fsr2l
  6950  0035FA  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6951  0035FE  0E20               	movlw	32
  6952  003600  18DE               	xorwf	postinc2,w,c
  6953  003602  B4D8               	btfsc	status,2,c
  6954  003604  D7F3               	goto	l1269
  6955  003606  C0BF  FFD9         	movff	atoi@s,fsr2l
  6956  00360A  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6957  00360E  0E09               	movlw	9
  6958  003610  18DE               	xorwf	postinc2,w,c
  6959  003612  B4D8               	btfsc	status,2,c
  6960  003614  D7EB               	goto	l1269
  6961  003616  0E00               	movlw	0
  6962  003618  0100               	movlb	0	; () banked
  6963  00361A  6FC5               	movwf	(atoi@a+1)& (0+255),b
  6964  00361C  0E00               	movlw	0
  6965  00361E  6FC4               	movwf	atoi@a& (0+255),b
  6966  003620  0E00               	movlw	0
  6967  003622  6FC3               	movwf	atoi@sign& (0+255),b
  6968                           
  6969                           ; BSR set to: 0
  6970  003624  C0BF  FFD9         	movff	atoi@s,fsr2l
  6971  003628  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6972  00362C  0E2D               	movlw	45
  6973  00362E  18DE               	xorwf	postinc2,w,c
  6974  003630  A4D8               	btfss	status,2,c
  6975  003632  D002               	goto	l1271
  6976                           
  6977                           ; BSR set to: 0
  6978  003634  2BC3               	incf	atoi@sign& (0+255),f,b
  6979  003636  D028               	goto	l5558
  6980  003638                     l1271:
  6981  003638  FFFF               	dw	65535	; assembler added errata NOP
  6982                           
  6983                           ; BSR set to: 0
  6984                           
  6985                           ; BSR set to: 0
  6986  00363A  C0BF  FFD9         	movff	atoi@s,fsr2l
  6987  00363E  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6988  003642  0E2B               	movlw	43
  6989  003644  18DE               	xorwf	postinc2,w,c
  6990  003646  A4D8               	btfss	status,2,c
  6991  003648  D022               	goto	l1274
  6992  00364A  D01E               	goto	l5558
  6993  00364C  FFFF               	dw	65535	; assembler added errata NOP
  6994                           
  6995                           ; BSR set to: 0
  6996  00364E  C0C4  F080         	movff	atoi@a,___wmul@multiplier
  6997  003652  C0C5  F081         	movff	atoi@a+1,___wmul@multiplier+1
  6998  003656  0E00               	movlw	0
  6999  003658  0100               	movlb	0	; () banked
  7000  00365A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7001  00365C  0E0A               	movlw	10
  7002  00365E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7003  003660  ECE9  F01F         	call	___wmul	;wreg free
  7004  003664  C0BF  FFD9         	movff	atoi@s,fsr2l
  7005  003668  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7006  00366C  50DF               	movf	indf2,w,c
  7007  00366E  0100               	movlb	0	; () banked
  7008  003670  6FC1               	movwf	??_atoi& (0+255),b
  7009  003672  6BC2               	clrf	(??_atoi+1)& (0+255),b
  7010  003674  5180               	movf	?___wmul& (0+255),w,b
  7011  003676  27C1               	addwf	??_atoi& (0+255),f,b
  7012  003678  5181               	movf	(?___wmul+1)& (0+255),w,b
  7013  00367A  23C2               	addwfc	(??_atoi+1)& (0+255),f,b
  7014  00367C  0ED0               	movlw	208
  7015  00367E  25C1               	addwf	??_atoi& (0+255),w,b
  7016  003680  6FC4               	movwf	atoi@a& (0+255),b
  7017  003682  0EFF               	movlw	255
  7018  003684  21C2               	addwfc	(??_atoi+1)& (0+255),w,b
  7019  003686  6FC5               	movwf	(atoi@a+1)& (0+255),b
  7020  003688                     l5558:
  7021  003688  FFFF               	dw	65535	; assembler added errata NOP
  7022                           
  7023                           ; BSR set to: 0
  7024  00368A  4BBF               	infsnz	atoi@s& (0+255),f,b
  7025  00368C  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  7026  00368E                     l1274:
  7027  00368E  FFFF               	dw	65535	; assembler added errata NOP
  7028                           
  7029                           ; BSR set to: 0
  7030                           
  7031                           ; BSR set to: 0
  7032  003690  C0BF  FFD9         	movff	atoi@s,fsr2l
  7033  003694  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7034  003698  50DF               	movf	indf2,w,c
  7035  00369A  EC03  F037         	call	_isdigit
  7036  00369E  B0D8               	btfsc	status,0,c
  7037  0036A0  D7D5               	goto	l1275
  7038  0036A2  0100               	movlb	0	; () banked
  7039  0036A4  51C3               	movf	atoi@sign& (0+255),w,b
  7040  0036A6  B4D8               	btfsc	status,2,c
  7041  0036A8  D00D               	goto	l1277
  7042                           
  7043                           ; BSR set to: 0
  7044  0036AA  C0C4  F0C1         	movff	atoi@a,??_atoi
  7045  0036AE  C0C5  F0C2         	movff	atoi@a+1,??_atoi+1
  7046  0036B2  1FC1               	comf	??_atoi& (0+255),f,b
  7047  0036B4  1FC2               	comf	(??_atoi+1)& (0+255),f,b
  7048  0036B6  4BC1               	infsnz	??_atoi& (0+255),f,b
  7049  0036B8  2BC2               	incf	(??_atoi+1)& (0+255),f,b
  7050  0036BA  C0C1  F0BF         	movff	??_atoi,?_atoi
  7051  0036BE  C0C2  F0C0         	movff	??_atoi+1,?_atoi+1
  7052  0036C2  D005               	goto	l1278
  7053  0036C4                     l1277:
  7054  0036C4  FFFF               	dw	65535	; assembler added errata NOP
  7055                           
  7056                           ; BSR set to: 0
  7057  0036C6  C0C4  F0BF         	movff	atoi@a,?_atoi
  7058  0036CA  C0C5  F0C0         	movff	atoi@a+1,?_atoi+1
  7059  0036CE                     l1278:
  7060  0036CE  FFFF               	dw	65535	; assembler added errata NOP
  7061                           
  7062                           ; BSR set to: 0
  7063  0036D0  0012               	return		;funcret
  7064  0036D2  FFFF               	dw	65535	; errata NOP
  7065  0036D4                     __end_of_atoi:
  7066                           	opt stack 0
  7067                           tblptru	equ	0xFF8
  7068                           tblptrh	equ	0xFF7
  7069                           tblptrl	equ	0xFF6
  7070                           tablat	equ	0xFF5
  7071                           prodh	equ	0xFF4
  7072                           prodl	equ	0xFF3
  7073                           postinc0	equ	0xFEE
  7074                           wreg	equ	0xFE8
  7075                           postdec1	equ	0xFE5
  7076                           fsr1l	equ	0xFE1
  7077                           indf2	equ	0xFDF
  7078                           postinc2	equ	0xFDE
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083 ;; *************** function _getDS1307TimeDate *****************
  7084 ;; Defined at:
  7085 ;;		line 52 in file "ds1307.h"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  7088 ;;		 -> rtc(7), 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;		None
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      void 
  7093 ;; Registers used:
  7094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7100 ;;      Params:         0       2       0       0       0       0       0
  7101 ;;      Locals:         0       0       0       0       0       0       0
  7102 ;;      Temps:          0       0       0       0       0       0       0
  7103 ;;      Totals:         0       2       0       0       0       0       0
  7104 ;;Total ram usage:        2 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; Hardware stack levels required when called:    8
  7107 ;; This function calls:
  7108 ;;		_BCDtoDEC
  7109 ;;		_I2C_Read
  7110 ;;		_I2C_Restart
  7111 ;;		_I2C_Start
  7112 ;;		_I2C_Stop
  7113 ;;		_I2C_Write
  7114 ;; This function is called by:
  7115 ;;		_main
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text16
  7120  002E34                     __ptext16:
  7121                           	opt stack 0
  7122  002E34                     _getDS1307TimeDate:
  7123                           	opt stack 0
  7124  002E34  FFFF               	dw	65535	; assembler added errata NOP
  7125                           
  7126                           ;ds1307.h: 54: I2C_Start();
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;incstack = 0
  7130  002E36  EC5F  F036         	call	_I2C_Start	;wreg free
  7131                           
  7132                           ;ds1307.h: 55: I2C_Write(0xD0);
  7133  002E3A  0E00               	movlw	0
  7134  002E3C  0100               	movlb	0	; () banked
  7135  002E3E  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7136  002E40  0ED0               	movlw	208
  7137  002E42  6F8A               	movwf	I2C_Write@d& (0+255),b
  7138  002E44  EC78  F036         	call	_I2C_Write	;wreg free
  7139                           
  7140                           ;ds1307.h: 56: I2C_Write(0x00);
  7141  002E48  0E00               	movlw	0
  7142  002E4A  0100               	movlb	0	; () banked
  7143  002E4C  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7144  002E4E  0E00               	movlw	0
  7145  002E50  6F8A               	movwf	I2C_Write@d& (0+255),b
  7146  002E52  EC78  F036         	call	_I2C_Write	;wreg free
  7147                           
  7148                           ;ds1307.h: 57: I2C_Restart();
  7149  002E56  EC6B  F036         	call	_I2C_Restart	;wreg free
  7150                           
  7151                           ;ds1307.h: 58: I2C_Write(0xD1);
  7152  002E5A  0E00               	movlw	0
  7153  002E5C  0100               	movlb	0	; () banked
  7154  002E5E  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7155  002E60  0ED1               	movlw	209
  7156  002E62  6F8A               	movwf	I2C_Write@d& (0+255),b
  7157  002E64  EC78  F036         	call	_I2C_Write	;wreg free
  7158                           
  7159                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  7160  002E68  0100               	movlb	0	; () banked
  7161  002E6A  EE20 F001          	lfsr	2,1
  7162  002E6E  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7163  002E70  26D9               	addwf	fsr2l,f,c
  7164  002E72  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7165  002E74  22DA               	addwfc	fsr2h,f,c
  7166  002E76  0E00               	movlw	0
  7167  002E78  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7168  002E7A  0E01               	movlw	1
  7169  002E7C  6F81               	movwf	I2C_Read@a& (0+255),b
  7170  002E7E  EC4E  F038         	call	_I2C_Read	;wreg free
  7171  002E82  0100               	movlb	0	; () banked
  7172  002E84  5181               	movf	?_I2C_Read& (0+255),w,b
  7173  002E86  ECBD  F036         	call	_BCDtoDEC
  7174  002E8A  6EDF               	movwf	indf2,c
  7175                           
  7176                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  7177  002E8C  0100               	movlb	0	; () banked
  7178  002E8E  EE20 F002          	lfsr	2,2
  7179  002E92  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7180  002E94  26D9               	addwf	fsr2l,f,c
  7181  002E96  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7182  002E98  22DA               	addwfc	fsr2h,f,c
  7183  002E9A  0E00               	movlw	0
  7184  002E9C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7185  002E9E  0E01               	movlw	1
  7186  002EA0  6F81               	movwf	I2C_Read@a& (0+255),b
  7187  002EA2  EC4E  F038         	call	_I2C_Read	;wreg free
  7188  002EA6  0100               	movlb	0	; () banked
  7189  002EA8  5181               	movf	?_I2C_Read& (0+255),w,b
  7190  002EAA  ECBD  F036         	call	_BCDtoDEC
  7191  002EAE  6EDF               	movwf	indf2,c
  7192                           
  7193                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  7194  002EB0  0100               	movlb	0	; () banked
  7195  002EB2  EE20 F003          	lfsr	2,3
  7196  002EB6  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7197  002EB8  26D9               	addwf	fsr2l,f,c
  7198  002EBA  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7199  002EBC  22DA               	addwfc	fsr2h,f,c
  7200  002EBE  0E00               	movlw	0
  7201  002EC0  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7202  002EC2  0E01               	movlw	1
  7203  002EC4  6F81               	movwf	I2C_Read@a& (0+255),b
  7204  002EC6  EC4E  F038         	call	_I2C_Read	;wreg free
  7205  002ECA  0100               	movlb	0	; () banked
  7206  002ECC  5181               	movf	?_I2C_Read& (0+255),w,b
  7207  002ECE  ECBD  F036         	call	_BCDtoDEC
  7208  002ED2  6EDF               	movwf	indf2,c
  7209                           
  7210                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  7211  002ED4  0E00               	movlw	0
  7212  002ED6  0100               	movlb	0	; () banked
  7213  002ED8  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7214  002EDA  0E01               	movlw	1
  7215  002EDC  6F81               	movwf	I2C_Read@a& (0+255),b
  7216  002EDE  EC4E  F038         	call	_I2C_Read	;wreg free
  7217  002EE2  0100               	movlb	0	; () banked
  7218  002EE4  5181               	movf	?_I2C_Read& (0+255),w,b
  7219  002EE6  ECBD  F036         	call	_BCDtoDEC
  7220  002EEA  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  7221  002EEE  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  7222  002EF2  6EDF               	movwf	indf2,c
  7223                           
  7224                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  7225  002EF4  0100               	movlb	0	; () banked
  7226  002EF6  EE20 F004          	lfsr	2,4
  7227  002EFA  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7228  002EFC  26D9               	addwf	fsr2l,f,c
  7229  002EFE  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7230  002F00  22DA               	addwfc	fsr2h,f,c
  7231  002F02  0E00               	movlw	0
  7232  002F04  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7233  002F06  0E01               	movlw	1
  7234  002F08  6F81               	movwf	I2C_Read@a& (0+255),b
  7235  002F0A  EC4E  F038         	call	_I2C_Read	;wreg free
  7236  002F0E  0100               	movlb	0	; () banked
  7237  002F10  5181               	movf	?_I2C_Read& (0+255),w,b
  7238  002F12  ECBD  F036         	call	_BCDtoDEC
  7239  002F16  6EDF               	movwf	indf2,c
  7240                           
  7241                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  7242  002F18  0100               	movlb	0	; () banked
  7243  002F1A  EE20 F005          	lfsr	2,5
  7244  002F1E  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7245  002F20  26D9               	addwf	fsr2l,f,c
  7246  002F22  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7247  002F24  22DA               	addwfc	fsr2h,f,c
  7248  002F26  0E00               	movlw	0
  7249  002F28  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7250  002F2A  0E01               	movlw	1
  7251  002F2C  6F81               	movwf	I2C_Read@a& (0+255),b
  7252  002F2E  EC4E  F038         	call	_I2C_Read	;wreg free
  7253  002F32  0100               	movlb	0	; () banked
  7254  002F34  5181               	movf	?_I2C_Read& (0+255),w,b
  7255  002F36  ECBD  F036         	call	_BCDtoDEC
  7256  002F3A  6EDF               	movwf	indf2,c
  7257                           
  7258                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  7259  002F3C  0100               	movlb	0	; () banked
  7260  002F3E  EE20 F006          	lfsr	2,6
  7261  002F42  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7262  002F44  26D9               	addwf	fsr2l,f,c
  7263  002F46  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7264  002F48  22DA               	addwfc	fsr2h,f,c
  7265  002F4A  0E00               	movlw	0
  7266  002F4C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7267  002F4E  0E00               	movlw	0
  7268  002F50  6F81               	movwf	I2C_Read@a& (0+255),b
  7269  002F52  EC4E  F038         	call	_I2C_Read	;wreg free
  7270  002F56  0100               	movlb	0	; () banked
  7271  002F58  5181               	movf	?_I2C_Read& (0+255),w,b
  7272  002F5A  ECBD  F036         	call	_BCDtoDEC
  7273  002F5E  6EDF               	movwf	indf2,c
  7274                           
  7275                           ;ds1307.h: 66: I2C_Stop();
  7276  002F60  EC65  F036         	call	_I2C_Stop	;wreg free
  7277  002F64  0012               	return		;funcret
  7278  002F66  FFFF               	dw	65535	; errata NOP
  7279  002F68                     __end_of_getDS1307TimeDate:
  7280                           	opt stack 0
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           prodh	equ	0xFF4
  7286                           prodl	equ	0xFF3
  7287                           postinc0	equ	0xFEE
  7288                           wreg	equ	0xFE8
  7289                           postdec1	equ	0xFE5
  7290                           fsr1l	equ	0xFE1
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           fsr2h	equ	0xFDA
  7294                           fsr2l	equ	0xFD9
  7295                           status	equ	0xFD8
  7296                           
  7297 ;; *************** function _BCDtoDEC *****************
  7298 ;; Defined at:
  7299 ;;		line 34 in file "function.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  val             1    wreg     unsigned char 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  val             1    0[BANK0 ] unsigned char 
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  1    wreg      unsigned char 
  7306 ;; Registers used:
  7307 ;;		wreg, status,2, status,0, prodl, prodh
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7313 ;;      Params:         0       0       0       0       0       0       0
  7314 ;;      Locals:         0       1       0       0       0       0       0
  7315 ;;      Temps:          0       0       0       0       0       0       0
  7316 ;;      Totals:         0       1       0       0       0       0       0
  7317 ;;Total ram usage:        1 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    6
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_getDS1307TimeDate
  7324 ;;		_getDS1307Time
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           	psect	text17
  7329  006D7A                     __ptext17:
  7330                           	opt stack 0
  7331  006D7A                     _BCDtoDEC:
  7332                           	opt stack 0
  7333  006D7A  FFFF               	dw	65535	; assembler added errata NOP
  7334                           
  7335                           ;incstack = 0
  7336                           ;BCDtoDEC@val stored from wreg
  7337  006D7C  0100               	movlb	0	; () banked
  7338  006D7E  6F80               	movwf	BCDtoDEC@val& (0+255),b
  7339                           
  7340                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  7341  006D80  0100               	movlb	0	; () banked
  7342  006D82  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  7343  006D84  0B0F               	andlw	15
  7344  006D86  0B0F               	andlw	15
  7345  006D88  0D0A               	mullw	10
  7346  006D8A  5180               	movf	BCDtoDEC@val& (0+255),w,b
  7347  006D8C  0B0F               	andlw	15
  7348  006D8E  24F3               	addwf	prodl,w,c
  7349                           
  7350                           ; BSR set to: 0
  7351                           
  7352                           ; BSR set to: 0
  7353  006D90  0012               	return		;funcret
  7354  006D92  FFFF               	dw	65535	; errata NOP
  7355  006D94                     __end_of_BCDtoDEC:
  7356                           	opt stack 0
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           postinc0	equ	0xFEE
  7364                           wreg	equ	0xFE8
  7365                           postdec1	equ	0xFE5
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           fsr2h	equ	0xFDA
  7370                           fsr2l	equ	0xFD9
  7371                           status	equ	0xFD8
  7372                           
  7373 ;; *************** function _dataLoger *****************
  7374 ;; Defined at:
  7375 ;;		line 12 in file "tela_DATALOGER.h"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;		None
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  logs            1   64[BANK0 ] unsigned char 
  7380 ;; Return value:  Size  Location     Type
  7381 ;;                  1    wreg      void 
  7382 ;; Registers used:
  7383 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7384 ;; Tracked objects:
  7385 ;;		On entry : 0/0
  7386 ;;		On exit  : 0/0
  7387 ;;		Unchanged: 0/0
  7388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7389 ;;      Params:         0       0       0       0       0       0       0
  7390 ;;      Locals:         0       7       0       0       0       0       0
  7391 ;;      Temps:          0       5       0       0       0       0       0
  7392 ;;      Totals:         0      12       0       0       0       0       0
  7393 ;;Total ram usage:       12 bytes
  7394 ;; Hardware stack levels used:    1
  7395 ;; Hardware stack levels required when called:    9
  7396 ;; This function calls:
  7397 ;;		___awdiv
  7398 ;;		_btPress
  7399 ;;		_readEEPROM_ext
  7400 ;;		_sprintf
  7401 ;; This function is called by:
  7402 ;;		_main
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           	psect	text18
  7407  001B68                     __ptext18:
  7408                           	opt stack 0
  7409  001B68                     _dataLoger:
  7410                           	opt stack 0
  7411  001B68  FFFF               	dw	65535	; assembler added errata NOP
  7412                           
  7413                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;incstack = 0
  7417  001B6A  0E7B               	movlw	low _line1
  7418  001B6C  0100               	movlb	0	; () banked
  7419  001B6E  6FA1               	movwf	sprintf@wh& (0+255),b
  7420  001B70  0E01               	movlw	high _line1
  7421  001B72  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7422  001B74  0EFC               	movlw	low STR_75
  7423  001B76  6FA3               	movwf	sprintf@f& (0+255),b
  7424  001B78  0E7B               	movlw	high STR_75
  7425  001B7A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7426  001B7C  C05D  F0A5         	movff	_dtl_dia,?_sprintf+4
  7427  001B80  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7428  001B82  C05C  F0A7         	movff	_dtl_mes,?_sprintf+6
  7429  001B86  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7430  001B88  C05B  F0A9         	movff	_dtl_ano,?_sprintf+8
  7431  001B8C  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  7432  001B8E  C05A  F0AB         	movff	_dtl_hora,?_sprintf+10
  7433  001B92  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  7434  001B94  C059  F0AD         	movff	_dtl_min,?_sprintf+12
  7435  001B98  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  7436  001B9A  ECC9  F039         	call	_sprintf	;wreg free
  7437                           
  7438                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  7439  001B9E  0458               	decf	_dtl_jockey,w,c
  7440  001BA0  B4D8               	btfsc	status,2,c
  7441  001BA2  D005               	goto	l776
  7442  001BA4  0EE3               	movlw	low STR_47
  7443  001BA6  0100               	movlb	0	; () banked
  7444  001BA8  6FBA               	movwf	_dataLoger$1436& (0+255),b
  7445  001BAA  0E7F               	movlw	high STR_47
  7446  001BAC  D005               	goto	L14
  7447  001BAE                     l776:
  7448  001BAE  FFFF               	dw	65535	; assembler added errata NOP
  7449                           
  7450                           ; BSR set to: 0
  7451  001BB0  0EFA               	movlw	low STR_5
  7452  001BB2  0100               	movlb	0	; () banked
  7453  001BB4  6FBA               	movwf	_dataLoger$1436& (0+255),b
  7454  001BB6  0E7F               	movlw	high STR_5
  7455  001BB8                     L14:
  7456  001BB8  FFFF               	dw	65535	; assembler added errata NOP
  7457  001BBA  6FBB               	movwf	(_dataLoger$1436+1)& (0+255),b
  7458                           
  7459                           ; BSR set to: 0
  7460                           
  7461                           ; BSR set to: 0
  7462  001BBC  0E66               	movlw	low _line2
  7463  001BBE  6FA1               	movwf	sprintf@wh& (0+255),b
  7464  001BC0  0E01               	movlw	high _line2
  7465  001BC2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7466  001BC4  0E7F               	movlw	low STR_76
  7467  001BC6  6FA3               	movwf	sprintf@f& (0+255),b
  7468  001BC8  0E7F               	movlw	high STR_76
  7469  001BCA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7470  001BCC  C0BA  F0A5         	movff	_dataLoger$1436,?_sprintf+4
  7471  001BD0  C0BB  F0A6         	movff	_dataLoger$1436+1,?_sprintf+5
  7472  001BD4  ECC9  F039         	call	_sprintf	;wreg free
  7473                           
  7474                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  7475  001BD8  0E74               	movlw	low (_line2+14)
  7476  001BDA  0100               	movlb	0	; () banked
  7477  001BDC  6FA1               	movwf	sprintf@wh& (0+255),b
  7478  001BDE  0E01               	movlw	high (_line2+14)
  7479  001BE0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7480  001BE2  0E2B               	movlw	low STR_79
  7481  001BE4  6FA3               	movwf	sprintf@f& (0+255),b
  7482  001BE6  0E7F               	movlw	high STR_79
  7483  001BE8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7484  001BEA  0E01               	movlw	1
  7485  001BEC  2453               	addwf	_dtl_posi_visualizar,w,c
  7486  001BEE  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7487  001BF0  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7488  001BF2  0E00               	movlw	0
  7489  001BF4  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  7490  001BF6  C054  F0A7         	movff	_totalLogs,?_sprintf+6
  7491  001BFA  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7492  001BFC  ECC9  F039         	call	_sprintf	;wreg free
  7493                           
  7494                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  7495  001C00  0457               	decf	_dtl_principal,w,c
  7496  001C02  B4D8               	btfsc	status,2,c
  7497  001C04  D005               	goto	l780
  7498  001C06  0EE3               	movlw	low STR_47
  7499  001C08  0100               	movlb	0	; () banked
  7500  001C0A  6FBC               	movwf	_dataLoger$1442& (0+255),b
  7501  001C0C  0E7F               	movlw	high STR_47
  7502  001C0E  D005               	goto	L15
  7503  001C10                     l780:
  7504  001C10  FFFF               	dw	65535	; assembler added errata NOP
  7505                           
  7506                           ; BSR set to: 0
  7507  001C12  0EFA               	movlw	low STR_5
  7508  001C14  0100               	movlb	0	; () banked
  7509  001C16  6FBC               	movwf	_dataLoger$1442& (0+255),b
  7510  001C18  0E7F               	movlw	high STR_5
  7511  001C1A                     L15:
  7512  001C1A  FFFF               	dw	65535	; assembler added errata NOP
  7513  001C1C  6FBD               	movwf	(_dataLoger$1442+1)& (0+255),b
  7514                           
  7515                           ; BSR set to: 0
  7516                           
  7517                           ; BSR set to: 0
  7518  001C1E  0E51               	movlw	low _line3
  7519  001C20  6FA1               	movwf	sprintf@wh& (0+255),b
  7520  001C22  0E01               	movlw	high _line3
  7521  001C24  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7522  001C26  0EB0               	movlw	low STR_80
  7523  001C28  6FA3               	movwf	sprintf@f& (0+255),b
  7524  001C2A  0E7E               	movlw	high STR_80
  7525  001C2C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7526  001C2E  C0BC  F0A5         	movff	_dataLoger$1442,?_sprintf+4
  7527  001C32  C0BD  F0A6         	movff	_dataLoger$1442+1,?_sprintf+5
  7528  001C36  ECC9  F039         	call	_sprintf	;wreg free
  7529                           
  7530                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  7531  001C3A  0456               	decf	_dtl_estacionaria,w,c
  7532  001C3C  B4D8               	btfsc	status,2,c
  7533  001C3E  D005               	goto	l784
  7534  001C40  0EE3               	movlw	low STR_47
  7535  001C42  0100               	movlb	0	; () banked
  7536  001C44  6FBE               	movwf	_dataLoger$1447& (0+255),b
  7537  001C46  0E7F               	movlw	high STR_47
  7538  001C48  D005               	goto	L16
  7539  001C4A                     l784:
  7540  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  7541                           
  7542                           ; BSR set to: 0
  7543  001C4C  0EFA               	movlw	low STR_5
  7544  001C4E  0100               	movlb	0	; () banked
  7545  001C50  6FBE               	movwf	_dataLoger$1447& (0+255),b
  7546  001C52  0E7F               	movlw	high STR_5
  7547  001C54                     L16:
  7548  001C54  FFFF               	dw	65535	; assembler added errata NOP
  7549  001C56  6FBF               	movwf	(_dataLoger$1447+1)& (0+255),b
  7550                           
  7551                           ; BSR set to: 0
  7552                           
  7553                           ; BSR set to: 0
  7554  001C58  0E3C               	movlw	low _line4
  7555  001C5A  6FA1               	movwf	sprintf@wh& (0+255),b
  7556  001C5C  0E01               	movlw	high _line4
  7557  001C5E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7558  001C60  0EBE               	movlw	low STR_83
  7559  001C62  6FA3               	movwf	sprintf@f& (0+255),b
  7560  001C64  0E7E               	movlw	high STR_83
  7561  001C66  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7562  001C68  C0BE  F0A5         	movff	_dataLoger$1447,?_sprintf+4
  7563  001C6C  C0BF  F0A6         	movff	_dataLoger$1447+1,?_sprintf+5
  7564  001C70  ECC9  F039         	call	_sprintf	;wreg free
  7565                           
  7566                           ;tela_DATALOGER.h: 19: if (btPress(1)) {
  7567  001C74  0E01               	movlw	1
  7568  001C76  EC4A  F03B         	call	_btPress
  7569  001C7A  0900               	iorlw	0
  7570  001C7C  B4D8               	btfsc	status,2,c
  7571  001C7E  D005               	goto	l787
  7572                           
  7573                           ;tela_DATALOGER.h: 20: option_posi = 0;
  7574  001C80  0E00               	movlw	0
  7575  001C82  0100               	movlb	0	; () banked
  7576  001C84  6FDF               	movwf	_option_posi& (0+255),b
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;tela_DATALOGER.h: 21: menu_posi = _menu_posi;
  7580  001C86  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  7581  001C8A                     l787:
  7582  001C8A  FFFF               	dw	65535	; assembler added errata NOP
  7583                           
  7584                           ;tela_DATALOGER.h: 22: }
  7585                           ;tela_DATALOGER.h: 27: if (btPress(2)) {
  7586                           
  7587                           ; BSR set to: 0
  7588  001C8C  0E02               	movlw	2
  7589  001C8E  EC4A  F03B         	call	_btPress
  7590  001C92  0900               	iorlw	0
  7591  001C94  B4D8               	btfsc	status,2,c
  7592  001C96  D00B               	goto	l788
  7593                           
  7594                           ;tela_DATALOGER.h: 28: dtl_posicao -= 8;
  7595  001C98  0E08               	movlw	8
  7596  001C9A  0100               	movlb	0	; () banked
  7597  001C9C  5FFA               	subwf	_dtl_posicao& (0+255),f,b
  7598                           
  7599                           ;tela_DATALOGER.h: 29: if (dtl_posicao < 60) {
  7600  001C9E  0E3C               	movlw	60
  7601  001CA0  61FA               	cpfslt	_dtl_posicao& (0+255),b
  7602  001CA2  D002               	goto	l789
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;tela_DATALOGER.h: 30: dtl_posicao = 60;
  7606  001CA4  0E3C               	movlw	60
  7607  001CA6  6FFA               	movwf	_dtl_posicao& (0+255),b
  7608  001CA8                     l789:
  7609  001CA8  FFFF               	dw	65535	; assembler added errata NOP
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;tela_DATALOGER.h: 31: }
  7613                           ;tela_DATALOGER.h: 32: dtl_carregar_log = 1;
  7614  001CAA  0E01               	movlw	1
  7615  001CAC  6E55               	movwf	_dtl_carregar_log,c
  7616  001CAE                     l788:
  7617  001CAE  FFFF               	dw	65535	; assembler added errata NOP
  7618                           
  7619                           ;tela_DATALOGER.h: 33: }
  7620                           ;tela_DATALOGER.h: 34: if (btPress(3)) {
  7621                           
  7622                           ; BSR set to: 0
  7623  001CB0  0E03               	movlw	3
  7624  001CB2  EC4A  F03B         	call	_btPress
  7625  001CB6  0900               	iorlw	0
  7626  001CB8  B4D8               	btfsc	status,2,c
  7627  001CBA  D019               	goto	l790
  7628                           
  7629                           ;tela_DATALOGER.h: 35: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  7630  001CBC  5054               	movf	_totalLogs,w,c
  7631  001CBE  0100               	movlb	0	; () banked
  7632  001CC0  6FB5               	movwf	??_dataLoger& (0+255),b
  7633  001CC2  6BB6               	clrf	(??_dataLoger+1)& (0+255),b
  7634  001CC4  5053               	movf	_dtl_posi_visualizar,w,c
  7635  001CC6  6FB7               	movwf	(??_dataLoger+2)& (0+255),b
  7636  001CC8  6BB8               	clrf	(??_dataLoger+3)& (0+255),b
  7637  001CCA  0E01               	movlw	1
  7638  001CCC  27B7               	addwf	(??_dataLoger+2)& (0+255),f,b
  7639  001CCE  0E00               	movlw	0
  7640  001CD0  23B8               	addwfc	(??_dataLoger+3)& (0+255),f,b
  7641  001CD2  51B5               	movf	??_dataLoger& (0+255),w,b
  7642  001CD4  5DB7               	subwf	(??_dataLoger+2)& (0+255),w,b
  7643  001CD6  51B8               	movf	(??_dataLoger+3)& (0+255),w,b
  7644  001CD8  0A80               	xorlw	128
  7645  001CDA  6FB9               	movwf	(??_dataLoger+4)& (0+255),b
  7646  001CDC  51B6               	movf	(??_dataLoger+1)& (0+255),w,b
  7647  001CDE  0A80               	xorlw	128
  7648  001CE0  59B9               	subwfb	(??_dataLoger+4)& (0+255),w,b
  7649  001CE2  B0D8               	btfsc	status,0,c
  7650  001CE4  D05A               	goto	l793
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;tela_DATALOGER.h: 37: }
  7654                           ;tela_DATALOGER.h: 38: dtl_posicao += 8;
  7655                           
  7656                           ; BSR set to: 0
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;tela_DATALOGER.h: 36: return;
  7660  001CE6  0E08               	movlw	8
  7661  001CE8  27FA               	addwf	_dtl_posicao& (0+255),f,b
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;tela_DATALOGER.h: 39: dtl_carregar_log = 1;
  7665  001CEA  0E01               	movlw	1
  7666  001CEC  6E55               	movwf	_dtl_carregar_log,c
  7667  001CEE                     l790:
  7668  001CEE  FFFF               	dw	65535	; assembler added errata NOP
  7669                           
  7670                           ;tela_DATALOGER.h: 40: }
  7671                           ;tela_DATALOGER.h: 42: if (dtl_carregar_log == 1) {
  7672                           
  7673                           ; BSR set to: 0
  7674  001CF0  0455               	decf	_dtl_carregar_log,w,c
  7675  001CF2  A4D8               	btfss	status,2,c
  7676  001CF4  D052               	goto	l793
  7677                           
  7678                           ;tela_DATALOGER.h: 43: char logs = readEEPROM_ext(14);
  7679  001CF6  0E0E               	movlw	14
  7680  001CF8  EC61  F03A         	call	_readEEPROM_ext
  7681  001CFC  0100               	movlb	0	; () banked
  7682  001CFE  6FC0               	movwf	dataLoger@logs& (0+255),b
  7683                           
  7684                           ;tela_DATALOGER.h: 44: totalLogs = (logs - 60) / 8;
  7685  001D00  0EC4               	movlw	196
  7686  001D02  25C0               	addwf	dataLoger@logs& (0+255),w,b
  7687  001D04  6F80               	movwf	___awdiv@dividend& (0+255),b
  7688  001D06  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7689  001D08  0EFF               	movlw	255
  7690  001D0A  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7691  001D0C  0E00               	movlw	0
  7692  001D0E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7693  001D10  0E08               	movlw	8
  7694  001D12  6F82               	movwf	___awdiv@divisor& (0+255),b
  7695  001D14  EC03  F01F         	call	___awdiv	;wreg free
  7696  001D18  0100               	movlb	0	; () banked
  7697  001D1A  5180               	movf	?___awdiv& (0+255),w,b
  7698  001D1C  6E54               	movwf	_totalLogs,c
  7699                           
  7700                           ;tela_DATALOGER.h: 46: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  7701  001D1E  0EC4               	movlw	196
  7702  001D20  25FA               	addwf	_dtl_posicao& (0+255),w,b
  7703  001D22  6F80               	movwf	___awdiv@dividend& (0+255),b
  7704  001D24  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7705  001D26  0EFF               	movlw	255
  7706  001D28  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7707  001D2A  0E00               	movlw	0
  7708  001D2C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7709  001D2E  0E08               	movlw	8
  7710  001D30  6F82               	movwf	___awdiv@divisor& (0+255),b
  7711  001D32  EC03  F01F         	call	___awdiv	;wreg free
  7712  001D36  0100               	movlb	0	; () banked
  7713  001D38  5180               	movf	?___awdiv& (0+255),w,b
  7714  001D3A  6E53               	movwf	_dtl_posi_visualizar,c
  7715                           
  7716                           ;tela_DATALOGER.h: 48: dtl_dia = readEEPROM_ext(dtl_posicao);
  7717  001D3C  51FA               	movf	_dtl_posicao& (0+255),w,b
  7718  001D3E  EC61  F03A         	call	_readEEPROM_ext
  7719  001D42  6E5D               	movwf	_dtl_dia,c
  7720                           
  7721                           ;tela_DATALOGER.h: 49: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  7722  001D44  0100               	movlb	0	; () banked
  7723  001D46  29FA               	incf	_dtl_posicao& (0+255),w,b
  7724  001D48  EC61  F03A         	call	_readEEPROM_ext
  7725  001D4C  6E5C               	movwf	_dtl_mes,c
  7726                           
  7727                           ;tela_DATALOGER.h: 50: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  7728  001D4E  0100               	movlb	0	; () banked
  7729  001D50  51FA               	movf	_dtl_posicao& (0+255),w,b
  7730  001D52  0F02               	addlw	2
  7731  001D54  EC61  F03A         	call	_readEEPROM_ext
  7732  001D58  6E5B               	movwf	_dtl_ano,c
  7733                           
  7734                           ;tela_DATALOGER.h: 51: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  7735  001D5A  0100               	movlb	0	; () banked
  7736  001D5C  51FA               	movf	_dtl_posicao& (0+255),w,b
  7737  001D5E  0F03               	addlw	3
  7738  001D60  EC61  F03A         	call	_readEEPROM_ext
  7739  001D64  6E5A               	movwf	_dtl_hora,c
  7740                           
  7741                           ;tela_DATALOGER.h: 52: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  7742  001D66  0100               	movlb	0	; () banked
  7743  001D68  51FA               	movf	_dtl_posicao& (0+255),w,b
  7744  001D6A  0F04               	addlw	4
  7745  001D6C  EC61  F03A         	call	_readEEPROM_ext
  7746  001D70  6E59               	movwf	_dtl_min,c
  7747                           
  7748                           ;tela_DATALOGER.h: 53: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  7749  001D72  0100               	movlb	0	; () banked
  7750  001D74  51FA               	movf	_dtl_posicao& (0+255),w,b
  7751  001D76  0F05               	addlw	5
  7752  001D78  EC61  F03A         	call	_readEEPROM_ext
  7753  001D7C  6E58               	movwf	_dtl_jockey,c
  7754                           
  7755                           ;tela_DATALOGER.h: 54: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  7756  001D7E  0100               	movlb	0	; () banked
  7757  001D80  51FA               	movf	_dtl_posicao& (0+255),w,b
  7758  001D82  0F06               	addlw	6
  7759  001D84  EC61  F03A         	call	_readEEPROM_ext
  7760  001D88  6E57               	movwf	_dtl_principal,c
  7761                           
  7762                           ;tela_DATALOGER.h: 55: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  7763  001D8A  0100               	movlb	0	; () banked
  7764  001D8C  51FA               	movf	_dtl_posicao& (0+255),w,b
  7765  001D8E  0F07               	addlw	7
  7766  001D90  EC61  F03A         	call	_readEEPROM_ext
  7767  001D94  6E56               	movwf	_dtl_estacionaria,c
  7768                           
  7769                           ;tela_DATALOGER.h: 56: dtl_carregar_log = 0;
  7770  001D96  0E00               	movlw	0
  7771  001D98  6E55               	movwf	_dtl_carregar_log,c
  7772  001D9A                     l793:
  7773  001D9A  FFFF               	dw	65535	; assembler added errata NOP
  7774  001D9C  0012               	return		;funcret
  7775  001D9E  FFFF               	dw	65535	; errata NOP
  7776  001DA0                     __end_of_dataLoger:
  7777                           	opt stack 0
  7778                           tblptru	equ	0xFF8
  7779                           tblptrh	equ	0xFF7
  7780                           tblptrl	equ	0xFF6
  7781                           tablat	equ	0xFF5
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           postinc0	equ	0xFEE
  7785                           wreg	equ	0xFE8
  7786                           postdec1	equ	0xFE5
  7787                           fsr1l	equ	0xFE1
  7788                           indf2	equ	0xFDF
  7789                           postinc2	equ	0xFDE
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function _criarCaracteresCGRAM *****************
  7795 ;; Defined at:
  7796 ;;		line 152 in file "lcd.h"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;		None
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  character      48    7[BANK0 ] const unsigned char [8][
  7801 ;;  i               1   59[BANK0 ] unsigned char 
  7802 ;;  j               1   58[BANK0 ] unsigned char 
  7803 ;;  k               1   57[BANK0 ] unsigned char 
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  1    wreg      void 
  7806 ;; Registers used:
  7807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7813 ;;      Params:         0       0       0       0       0       0       0
  7814 ;;      Locals:         0      53       0       0       0       0       0
  7815 ;;      Temps:          0       3       0       0       0       0       0
  7816 ;;      Totals:         0      56       0       0       0       0       0
  7817 ;;Total ram usage:       56 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; Hardware stack levels required when called:    8
  7820 ;; This function calls:
  7821 ;;		_Lcd_Cmd
  7822 ;;		_Lcd_Write_Char
  7823 ;; This function is called by:
  7824 ;;		_main
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           	psect	text19
  7829  003A58                     __ptext19:
  7830                           	opt stack 0
  7831  003A58                     _criarCaracteresCGRAM:
  7832                           	opt stack 0
  7833  003A58  FFFF               	dw	65535	; assembler added errata NOP
  7834                           
  7835                           ;lcd.h: 153: const char character[6][8] = {
  7836                           ;lcd.h: 154: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  7837                           ;lcd.h: 155: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  7838                           ;lcd.h: 156: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  7839                           ;lcd.h: 157: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  7840                           ;lcd.h: 158: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  7841                           ;lcd.h: 159: };
  7842                           
  7843                           ;incstack = 0
  7844  003A5A  0E9D               	movlw	low criarCaracteresCGRAM@F2955
  7845  003A5C  6EF6               	movwf	tblptrl,c
  7846  003A5E                     	if	1	;There is more than 1 active tblptr byte
  7847  003A5E  0E7A               	movlw	high criarCaracteresCGRAM@F2955
  7848  003A60  6EF7               	movwf	tblptrh,c
  7849  003A62                     	endif
  7850  003A62                     	if	0	;There are less than 3 active tblptr bytes
  7851  003A62                     	endif
  7852  003A62  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  7853  003A66  0E2F               	movlw	47
  7854  003A68                     u7720:
  7855  003A68  0009               	tblrd		*+
  7856  003A6A  FFFF               	dw	65535	; errata NOP
  7857  003A6C  CFF5 FFDE          	movff	tablat,postinc2
  7858  003A70  06E8               	decf	wreg,f,c
  7859  003A72  E2FA               	bc	u7720
  7860                           
  7861                           ;lcd.h: 160: Lcd_Cmd(0b0100);
  7862  003A74  0E04               	movlw	4
  7863  003A76  EC2B  F037         	call	_Lcd_Cmd
  7864                           
  7865                           ;lcd.h: 161: Lcd_Cmd(0b0000);
  7866  003A7A  0E00               	movlw	0
  7867  003A7C  EC2B  F037         	call	_Lcd_Cmd
  7868                           
  7869                           ;lcd.h: 162: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7870  003A80  0E32               	movlw	50
  7871  003A82                     u9017:
  7872  003A82  FFFF               	dw	65535	; errata NOP
  7873  003A84  2EE8               	decfsz	wreg,f,c
  7874  003A86  D7FD               	bra	u9017
  7875                           
  7876                           ;lcd.h: 163: char i = 0, j = 0, k = 0;
  7877  003A88  0E00               	movlw	0
  7878  003A8A  0100               	movlb	0	; () banked
  7879  003A8C  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7880                           
  7881                           ; BSR set to: 0
  7882  003A8E  0E00               	movlw	0
  7883  003A90  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7884                           
  7885                           ; BSR set to: 0
  7886  003A92  0E00               	movlw	0
  7887  003A94  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  7888                           
  7889                           ; BSR set to: 0
  7890                           ;lcd.h: 164: for (i = 0; i < 5; i++) {
  7891  003A96  0E00               	movlw	0
  7892  003A98  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7893  003A9A                     l6986:
  7894  003A9A  FFFF               	dw	65535	; assembler added errata NOP
  7895                           
  7896                           ; BSR set to: 0
  7897  003A9C  0E04               	movlw	4
  7898  003A9E  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  7899  003AA0  D001               	goto	l653
  7900  003AA2  D03A               	goto	u7780
  7901  003AA4                     l653:
  7902  003AA4  FFFF               	dw	65535	; assembler added errata NOP
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;lcd.h: 165: if (k == 1) i = 0;
  7906                           
  7907                           ; BSR set to: 0
  7908  003AA6  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  7909  003AA8  A4D8               	btfss	status,2,c
  7910  003AAA  D002               	goto	l655
  7911                           
  7912                           ; BSR set to: 0
  7913  003AAC  0E00               	movlw	0
  7914  003AAE  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7915  003AB0                     l655:
  7916  003AB0  FFFF               	dw	65535	; assembler added errata NOP
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;lcd.h: 166: for (j = 0; j < 8; j++) {
  7920  003AB2  0E00               	movlw	0
  7921  003AB4  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7922  003AB6                     l6994:
  7923  003AB6  FFFF               	dw	65535	; assembler added errata NOP
  7924                           
  7925                           ; BSR set to: 0
  7926  003AB8  0E07               	movlw	7
  7927  003ABA  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  7928  003ABC  D001               	goto	l656
  7929  003ABE  D028               	goto	u7770
  7930  003AC0                     l656:
  7931  003AC0  FFFF               	dw	65535	; assembler added errata NOP
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;lcd.h: 167: Lcd_Write_Char((k) ? character[i][j] : 0);
  7935                           
  7936                           ; BSR set to: 0
  7937  003AC2  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  7938  003AC4  A4D8               	btfss	status,2,c
  7939  003AC6  D005               	goto	l659
  7940                           
  7941                           ; BSR set to: 0
  7942  003AC8  0E00               	movlw	0
  7943  003ACA  6FB8               	movwf	(_criarCaracteresCGRAM$1374+1)& (0+255),b
  7944  003ACC  0E00               	movlw	0
  7945  003ACE  6FB7               	movwf	_criarCaracteresCGRAM$1374& (0+255),b
  7946  003AD0  D018               	goto	l661
  7947  003AD2                     l659:
  7948  003AD2  FFFF               	dw	65535	; assembler added errata NOP
  7949                           
  7950                           ; BSR set to: 0
  7951                           
  7952                           ; BSR set to: 0
  7953  003AD4  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  7954  003AD6  0D08               	mullw	8
  7955  003AD8  0E87               	movlw	low criarCaracteresCGRAM@character
  7956  003ADA  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  7957  003ADC  0E00               	movlw	high criarCaracteresCGRAM@character
  7958  003ADE  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  7959  003AE0  50F3               	movf	prodl,w,c
  7960  003AE2  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  7961  003AE4  50F4               	movf	prodh,w,c
  7962  003AE6  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  7963  003AE8  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  7964  003AEA  0D01               	mullw	1
  7965  003AEC  50F3               	movf	prodl,w,c
  7966  003AEE  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  7967  003AF0  6ED9               	movwf	fsr2l,c
  7968  003AF2  50F4               	movf	prodh,w,c
  7969  003AF4  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  7970  003AF6  6EDA               	movwf	fsr2h,c
  7971  003AF8  50DF               	movf	indf2,w,c
  7972  003AFA  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  7973  003AFC  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  7974  003AFE  6FB7               	movwf	_criarCaracteresCGRAM$1374& (0+255),b
  7975  003B00  6BB8               	clrf	(_criarCaracteresCGRAM$1374+1)& (0+255),b
  7976  003B02                     l661:
  7977  003B02  FFFF               	dw	65535	; assembler added errata NOP
  7978                           
  7979                           ; BSR set to: 0
  7980                           
  7981                           ; BSR set to: 0
  7982  003B04  51B7               	movf	_criarCaracteresCGRAM$1374& (0+255),w,b
  7983  003B06  EC21  F039         	call	_Lcd_Write_Char
  7984  003B0A  0100               	movlb	0	; () banked
  7985  003B0C  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  7986  003B0E  D7D3               	goto	l6994
  7987  003B10                     u7770:
  7988  003B10  FFFF               	dw	65535	; assembler added errata NOP
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;lcd.h: 168: }
  7992                           ;lcd.h: 169: k++;
  7993                           
  7994                           ; BSR set to: 0
  7995  003B12  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  7996  003B14  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  7997  003B16  D7C1               	goto	l6986
  7998  003B18                     u7780:
  7999  003B18  FFFF               	dw	65535	; assembler added errata NOP
  8000                           
  8001                           ; BSR set to: 0
  8002                           
  8003                           ; BSR set to: 0
  8004  003B1A  0012               	return		;funcret
  8005  003B1C  FFFF               	dw	65535	; errata NOP
  8006  003B1E                     __end_of_criarCaracteresCGRAM:
  8007                           	opt stack 0
  8008                           tblptru	equ	0xFF8
  8009                           tblptrh	equ	0xFF7
  8010                           tblptrl	equ	0xFF6
  8011                           tablat	equ	0xFF5
  8012                           prodh	equ	0xFF4
  8013                           prodl	equ	0xFF3
  8014                           postinc0	equ	0xFEE
  8015                           wreg	equ	0xFE8
  8016                           postdec1	equ	0xFE5
  8017                           fsr1l	equ	0xFE1
  8018                           indf2	equ	0xFDF
  8019                           postinc2	equ	0xFDE
  8020                           fsr2h	equ	0xFDA
  8021                           fsr2l	equ	0xFD9
  8022                           status	equ	0xFD8
  8023                           
  8024 ;; *************** function _configurarEstacionaria *****************
  8025 ;; Defined at:
  8026 ;;		line 7 in file "tela_ESTACIONARIA.h"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;		None
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;		None
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8040 ;;      Params:         0       0       0       0       0       0       0
  8041 ;;      Locals:         0       0       0       0       0       0       0
  8042 ;;      Temps:          0       0       0       0       0       0       0
  8043 ;;      Totals:         0       0       0       0       0       0       0
  8044 ;;Total ram usage:        0 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    9
  8047 ;; This function calls:
  8048 ;;		_blink
  8049 ;;		_btPress
  8050 ;;		_sprintf
  8051 ;;		_writeEEPROM_ext
  8052 ;; This function is called by:
  8053 ;;		_main
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           	psect	text20
  8058  002CC6                     __ptext20:
  8059                           	opt stack 0
  8060  002CC6                     _configurarEstacionaria:
  8061                           	opt stack 0
  8062  002CC6  FFFF               	dw	65535	; assembler added errata NOP
  8063                           
  8064                           ;tela_ESTACIONARIA.h: 9: sprintf(line1, "Configuracao tempo");
  8065                           
  8066                           ; BSR set to: 0
  8067                           ;incstack = 0
  8068  002CC8  0E7B               	movlw	low _line1
  8069  002CCA  0100               	movlb	0	; () banked
  8070  002CCC  6FA1               	movwf	sprintf@wh& (0+255),b
  8071  002CCE  0E01               	movlw	high _line1
  8072  002CD0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8073  002CD2  0E39               	movlw	low STR_96
  8074  002CD4  6FA3               	movwf	sprintf@f& (0+255),b
  8075  002CD6  0E7D               	movlw	high STR_96
  8076  002CD8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8077  002CDA  ECC9  F039         	call	_sprintf	;wreg free
  8078                           
  8079                           ;tela_ESTACIONARIA.h: 10: sprintf(line2, "Max. PARTIDA:");
  8080  002CDE  0E66               	movlw	low _line2
  8081  002CE0  0100               	movlb	0	; () banked
  8082  002CE2  6FA1               	movwf	sprintf@wh& (0+255),b
  8083  002CE4  0E01               	movlw	high _line2
  8084  002CE6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8085  002CE8  0EA2               	movlw	low STR_97
  8086  002CEA  6FA3               	movwf	sprintf@f& (0+255),b
  8087  002CEC  0E7E               	movlw	high STR_97
  8088  002CEE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8089  002CF0  ECC9  F039         	call	_sprintf	;wreg free
  8090                           
  8091                           ;tela_ESTACIONARIA.h: 11: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  8092  002CF4  0E76               	movlw	low (_line2+16)
  8093  002CF6  0100               	movlb	0	; () banked
  8094  002CF8  6FA1               	movwf	sprintf@wh& (0+255),b
  8095  002CFA  0E01               	movlw	high (_line2+16)
  8096  002CFC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8097  002CFE  0EED               	movlw	low STR_98
  8098  002D00  6FA3               	movwf	sprintf@f& (0+255),b
  8099  002D02  0E7F               	movlw	high STR_98
  8100  002D04  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8101  002D06  C0E5  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  8102  002D0A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8103  002D0C  ECC9  F039         	call	_sprintf	;wreg free
  8104                           
  8105                           ;tela_ESTACIONARIA.h: 12: sprintf(line3, "Max. TESTE:");
  8106  002D10  0E51               	movlw	low _line3
  8107  002D12  0100               	movlb	0	; () banked
  8108  002D14  6FA1               	movwf	sprintf@wh& (0+255),b
  8109  002D16  0E01               	movlw	high _line3
  8110  002D18  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8111  002D1A  0EF1               	movlw	low STR_99
  8112  002D1C  6FA3               	movwf	sprintf@f& (0+255),b
  8113  002D1E  0E7E               	movlw	high STR_99
  8114  002D20  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8115  002D22  ECC9  F039         	call	_sprintf	;wreg free
  8116                           
  8117                           ;tela_ESTACIONARIA.h: 13: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  8118  002D26  0E61               	movlw	low (_line3+16)
  8119  002D28  0100               	movlb	0	; () banked
  8120  002D2A  6FA1               	movwf	sprintf@wh& (0+255),b
  8121  002D2C  0E01               	movlw	high (_line3+16)
  8122  002D2E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8123  002D30  0EED               	movlw	low STR_98
  8124  002D32  6FA3               	movwf	sprintf@f& (0+255),b
  8125  002D34  0E7F               	movlw	high STR_98
  8126  002D36  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8127  002D38  C0E4  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  8128  002D3C  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8129  002D3E  ECC9  F039         	call	_sprintf	;wreg free
  8130                           
  8131                           ;tela_ESTACIONARIA.h: 14: sprintf(line4, "#horimetro:%5d min", horimetro);
  8132  002D42  0E3C               	movlw	low _line4
  8133  002D44  0100               	movlb	0	; () banked
  8134  002D46  6FA1               	movwf	sprintf@wh& (0+255),b
  8135  002D48  0E01               	movlw	high _line4
  8136  002D4A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8137  002D4C  0E26               	movlw	low STR_101
  8138  002D4E  6FA3               	movwf	sprintf@f& (0+255),b
  8139  002D50  0E7D               	movlw	high STR_101
  8140  002D52  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8141  002D54  C04F  F0A5         	movff	_horimetro,?_sprintf+4
  8142  002D58  C050  F0A6         	movff	_horimetro+1,?_sprintf+5
  8143  002D5C  ECC9  F039         	call	_sprintf	;wreg free
  8144                           
  8145                           ;tela_ESTACIONARIA.h: 16: if (btPress(4)) {
  8146  002D60  0E04               	movlw	4
  8147  002D62  EC4A  F03B         	call	_btPress
  8148  002D66  0900               	iorlw	0
  8149  002D68  B4D8               	btfsc	status,2,c
  8150  002D6A  D002               	goto	l843
  8151                           
  8152                           ;tela_ESTACIONARIA.h: 17: option_posi++;
  8153  002D6C  0100               	movlb	0	; () banked
  8154  002D6E  2BDF               	incf	_option_posi& (0+255),f,b
  8155  002D70                     l843:
  8156  002D70  FFFF               	dw	65535	; assembler added errata NOP
  8157                           
  8158                           ;tela_ESTACIONARIA.h: 18: }
  8159                           ;tela_ESTACIONARIA.h: 19: if (btPress(1)) {
  8160                           
  8161                           ; BSR set to: 0
  8162  002D72  0E01               	movlw	1
  8163  002D74  EC4A  F03B         	call	_btPress
  8164  002D78  0900               	iorlw	0
  8165  002D7A  B4D8               	btfsc	status,2,c
  8166  002D7C  D04E               	goto	l845
  8167                           
  8168                           ;tela_ESTACIONARIA.h: 20: writeEEPROM_ext(7, tempo_limite_estacionaria);
  8169  002D7E  C0E5  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
  8170  002D82  0E07               	movlw	7
  8171  002D84  ECA6  F039         	call	_writeEEPROM_ext
  8172                           
  8173                           ;tela_ESTACIONARIA.h: 21: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
  8174  002D88  C0E4  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
  8175  002D8C  0E0D               	movlw	13
  8176  002D8E  ECA6  F039         	call	_writeEEPROM_ext
  8177                           
  8178                           ;tela_ESTACIONARIA.h: 22: option_posi = 0;
  8179  002D92  0E00               	movlw	0
  8180  002D94  0100               	movlb	0	; () banked
  8181  002D96  6FDF               	movwf	_option_posi& (0+255),b
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;tela_ESTACIONARIA.h: 23: menu_posi = _menu_posi;
  8185  002D98  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;tela_ESTACIONARIA.h: 24: }
  8189                           ;tela_ESTACIONARIA.h: 25: switch (option_posi) {
  8190  002D9C  D03E               	goto	l845
  8191  002D9E  FFFF               	dw	65535	; assembler added errata NOP
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;tela_ESTACIONARIA.h: 27: blink(line2, 16,20 );
  8195                           
  8196                           ; BSR set to: 0
  8197  002DA0  0E66               	movlw	low _line2
  8198  002DA2  6F80               	movwf	blink@line& (0+255),b
  8199  002DA4  0E01               	movlw	high _line2
  8200  002DA6  6F81               	movwf	(blink@line+1)& (0+255),b
  8201  002DA8  0E10               	movlw	16
  8202  002DAA  6F82               	movwf	blink@start& (0+255),b
  8203  002DAC  0E14               	movlw	20
  8204  002DAE  6F83               	movwf	blink@end& (0+255),b
  8205  002DB0  ECE2  F038         	call	_blink	;wreg free
  8206                           
  8207                           ;tela_ESTACIONARIA.h: 28: if (btPress(3)) {
  8208  002DB4  0E03               	movlw	3
  8209  002DB6  EC4A  F03B         	call	_btPress
  8210  002DBA  0900               	iorlw	0
  8211  002DBC  B4D8               	btfsc	status,2,c
  8212  002DBE  D002               	goto	l847
  8213                           
  8214                           ;tela_ESTACIONARIA.h: 29: tempo_limite_estacionaria++;
  8215  002DC0  0100               	movlb	0	; () banked
  8216  002DC2  2BE5               	incf	_tempo_limite_estacionaria& (0+255),f,b
  8217  002DC4                     l847:
  8218  002DC4  FFFF               	dw	65535	; assembler added errata NOP
  8219                           
  8220                           ;tela_ESTACIONARIA.h: 30: }
  8221                           ;tela_ESTACIONARIA.h: 31: if (btPress(2)) {
  8222                           
  8223                           ; BSR set to: 0
  8224  002DC6  0E02               	movlw	2
  8225  002DC8  EC4A  F03B         	call	_btPress
  8226  002DCC  0900               	iorlw	0
  8227  002DCE  B4D8               	btfsc	status,2,c
  8228  002DD0  D02E               	goto	l849
  8229                           
  8230                           ;tela_ESTACIONARIA.h: 32: tempo_limite_estacionaria--;
  8231  002DD2  0100               	movlb	0	; () banked
  8232  002DD4  07E5               	decf	_tempo_limite_estacionaria& (0+255),f,b
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;tela_ESTACIONARIA.h: 33: }
  8236                           ;tela_ESTACIONARIA.h: 34: break;
  8237  002DD6  D02B               	goto	l849
  8238  002DD8  FFFF               	dw	65535	; assembler added errata NOP
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;tela_ESTACIONARIA.h: 36: blink(line3, 16,20 );
  8242                           
  8243                           ; BSR set to: 0
  8244  002DDA  0E51               	movlw	low _line3
  8245  002DDC  6F80               	movwf	blink@line& (0+255),b
  8246  002DDE  0E01               	movlw	high _line3
  8247  002DE0  6F81               	movwf	(blink@line+1)& (0+255),b
  8248  002DE2  0E10               	movlw	16
  8249  002DE4  6F82               	movwf	blink@start& (0+255),b
  8250  002DE6  0E14               	movlw	20
  8251  002DE8  6F83               	movwf	blink@end& (0+255),b
  8252  002DEA  ECE2  F038         	call	_blink	;wreg free
  8253                           
  8254                           ;tela_ESTACIONARIA.h: 37: if (btPress(3)) {
  8255  002DEE  0E03               	movlw	3
  8256  002DF0  EC4A  F03B         	call	_btPress
  8257  002DF4  0900               	iorlw	0
  8258  002DF6  B4D8               	btfsc	status,2,c
  8259  002DF8  D002               	goto	l851
  8260                           
  8261                           ;tela_ESTACIONARIA.h: 38: tempo_limite_teste_estacionaria++;
  8262  002DFA  0100               	movlb	0	; () banked
  8263  002DFC  2BE4               	incf	_tempo_limite_teste_estacionaria& (0+255),f,b
  8264  002DFE                     l851:
  8265  002DFE  FFFF               	dw	65535	; assembler added errata NOP
  8266                           
  8267                           ;tela_ESTACIONARIA.h: 39: }
  8268                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
  8269                           
  8270                           ; BSR set to: 0
  8271  002E00  0E02               	movlw	2
  8272  002E02  EC4A  F03B         	call	_btPress
  8273  002E06  0900               	iorlw	0
  8274  002E08  B4D8               	btfsc	status,2,c
  8275  002E0A  D011               	goto	l849
  8276                           
  8277                           ;tela_ESTACIONARIA.h: 41: tempo_limite_teste_estacionaria--;
  8278  002E0C  0100               	movlb	0	; () banked
  8279  002E0E  07E4               	decf	_tempo_limite_teste_estacionaria& (0+255),f,b
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;tela_ESTACIONARIA.h: 42: }
  8283                           ;tela_ESTACIONARIA.h: 43: break;
  8284  002E10  D00E               	goto	l849
  8285  002E12  FFFF               	dw	65535	; assembler added errata NOP
  8286                           
  8287                           ; BSR set to: 0
  8288                           
  8289                           ; BSR set to: 0
  8290  002E14  0E00               	movlw	0
  8291  002E16  6FDF               	movwf	_option_posi& (0+255),b
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;tela_ESTACIONARIA.h: 46: }
  8295                           
  8296                           ;tela_ESTACIONARIA.h: 45: break;
  8297  002E18  D00A               	goto	l849
  8298  002E1A                     l845:
  8299  002E1A  FFFF               	dw	65535	; assembler added errata NOP
  8300                           
  8301                           ; BSR set to: 0
  8302  002E1C  0100               	movlb	0	; () banked
  8303  002E1E  51DF               	movf	_option_posi& (0+255),w,b
  8304                           
  8305                           ; Switch size 1, requested type "space"
  8306                           ; Number of cases is 2, Range of values is 0 to 1
  8307                           ; switch strategies available:
  8308                           ; Name         Instructions Cycles
  8309                           ; simple_byte            7     4 (average)
  8310                           ;	Chosen strategy is simple_byte
  8311  002E20  0A00               	xorlw	0	; case 0
  8312  002E22  B4D8               	btfsc	status,2,c
  8313  002E24  D7BC               	goto	l846
  8314  002E26  0A01               	xorlw	1	; case 1
  8315  002E28  B4D8               	btfsc	status,2,c
  8316  002E2A  D7D6               	goto	l850
  8317  002E2C  D7F2               	goto	l853
  8318  002E2E                     l849:
  8319  002E2E  FFFF               	dw	65535	; assembler added errata NOP
  8320                           
  8321                           ; BSR set to: 0
  8322  002E30  0012               	return		;funcret
  8323  002E32  FFFF               	dw	65535	; errata NOP
  8324  002E34                     __end_of_configurarEstacionaria:
  8325                           	opt stack 0
  8326                           tblptru	equ	0xFF8
  8327                           tblptrh	equ	0xFF7
  8328                           tblptrl	equ	0xFF6
  8329                           tablat	equ	0xFF5
  8330                           prodh	equ	0xFF4
  8331                           prodl	equ	0xFF3
  8332                           postinc0	equ	0xFEE
  8333                           wreg	equ	0xFE8
  8334                           postdec1	equ	0xFE5
  8335                           fsr1l	equ	0xFE1
  8336                           indf2	equ	0xFDF
  8337                           postinc2	equ	0xFDE
  8338                           fsr2h	equ	0xFDA
  8339                           fsr2l	equ	0xFD9
  8340                           status	equ	0xFD8
  8341                           
  8342 ;; *************** function _configuraTelefones *****************
  8343 ;; Defined at:
  8344 ;;		line 9 in file "tela_TELEFONES.h"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;		None
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;  i               1   67[BANK0 ] unsigned char 
  8349 ;; Return value:  Size  Location     Type
  8350 ;;                  1    wreg      void 
  8351 ;; Registers used:
  8352 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8353 ;; Tracked objects:
  8354 ;;		On entry : 0/0
  8355 ;;		On exit  : 0/0
  8356 ;;		Unchanged: 0/0
  8357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8358 ;;      Params:         0       0       0       0       0       0       0
  8359 ;;      Locals:         0       3       0       0       0       0       0
  8360 ;;      Temps:          0       2       0       0       0       0       0
  8361 ;;      Totals:         0       5       0       0       0       0       0
  8362 ;;Total ram usage:        5 bytes
  8363 ;; Hardware stack levels used:    1
  8364 ;; Hardware stack levels required when called:   10
  8365 ;; This function calls:
  8366 ;;		_blink
  8367 ;;		_btPress
  8368 ;;		_comunicarTeste
  8369 ;;		_sprintf
  8370 ;;		_writeEEPROM_ext
  8371 ;; This function is called by:
  8372 ;;		_main
  8373 ;; This function uses a non-reentrant model
  8374 ;;
  8375                           
  8376                           	psect	text21
  8377  001234                     __ptext21:
  8378                           	opt stack 0
  8379  001234                     _configuraTelefones:
  8380                           	opt stack 0
  8381  001234  FFFF               	dw	65535	; assembler added errata NOP
  8382                           
  8383                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
  8384                           
  8385                           ;incstack = 0
  8386  001236  0E7C               	movlw	low (_line1+1)
  8387  001238  0100               	movlb	0	; () banked
  8388  00123A  6FA1               	movwf	sprintf@wh& (0+255),b
  8389  00123C  0E01               	movlw	high (_line1+1)
  8390  00123E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8391  001240  0EB8               	movlw	low STR_91
  8392  001242  6FA3               	movwf	sprintf@f& (0+255),b
  8393  001244  0E7F               	movlw	high STR_91
  8394  001246  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8395  001248  0EB0               	movlw	low _tel1
  8396  00124A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8397  00124C  0E01               	movlw	high _tel1
  8398  00124E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8399  001250  ECC9  F039         	call	_sprintf	;wreg free
  8400                           
  8401                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
  8402  001254  0E67               	movlw	low (_line2+1)
  8403  001256  0100               	movlb	0	; () banked
  8404  001258  6FA1               	movwf	sprintf@wh& (0+255),b
  8405  00125A  0E01               	movlw	high (_line2+1)
  8406  00125C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8407  00125E  0EBF               	movlw	low STR_92
  8408  001260  6FA3               	movwf	sprintf@f& (0+255),b
  8409  001262  0E7F               	movlw	high STR_92
  8410  001264  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8411  001266  0EA4               	movlw	low _tel2
  8412  001268  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8413  00126A  0E01               	movlw	high _tel2
  8414  00126C  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8415  00126E  ECC9  F039         	call	_sprintf	;wreg free
  8416                           
  8417                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? " aguarde... " : "Enviar sm
      +                          s teste");
  8418  001272  0100               	movlb	0	; () banked
  8419  001274  51F4               	movf	_gsmOcupado& (0+255),w,b
  8420  001276  A4D8               	btfss	status,2,c
  8421  001278  D004               	goto	l801
  8422                           
  8423                           ; BSR set to: 0
  8424  00127A  0EDA               	movlw	low STR_95
  8425  00127C  6FC1               	movwf	_configuraTelefones$1462& (0+255),b
  8426  00127E  0E7D               	movlw	high STR_95
  8427  001280  D004               	goto	L17
  8428  001282                     l801:
  8429  001282  FFFF               	dw	65535	; assembler added errata NOP
  8430                           
  8431                           ; BSR set to: 0
  8432                           
  8433                           ; BSR set to: 0
  8434  001284  0ECC               	movlw	low STR_94
  8435  001286  6FC1               	movwf	_configuraTelefones$1462& (0+255),b
  8436  001288  0E7E               	movlw	high STR_94
  8437  00128A                     L17:
  8438  00128A  FFFF               	dw	65535	; assembler added errata NOP
  8439  00128C  6FC2               	movwf	(_configuraTelefones$1462+1)& (0+255),b
  8440                           
  8441                           ; BSR set to: 0
  8442                           
  8443                           ; BSR set to: 0
  8444  00128E  0E52               	movlw	low (_line3+1)
  8445  001290  6FA1               	movwf	sprintf@wh& (0+255),b
  8446  001292  0E01               	movlw	high (_line3+1)
  8447  001294  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8448  001296  0E12               	movlw	low (STR_89+9)
  8449  001298  6FA3               	movwf	sprintf@f& (0+255),b
  8450  00129A  0E7F               	movlw	high (STR_89+9)
  8451  00129C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8452  00129E  C0C1  F0A5         	movff	_configuraTelefones$1462,?_sprintf+4
  8453  0012A2  C0C2  F0A6         	movff	_configuraTelefones$1462+1,?_sprintf+5
  8454  0012A6  ECC9  F039         	call	_sprintf	;wreg free
  8455                           
  8456                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
  8457  0012AA  0100               	movlb	0	; () banked
  8458  0012AC  51DB               	movf	_ajust_tel& (0+255),w,b
  8459  0012AE  A4D8               	btfss	status,2,c
  8460  0012B0  D050               	goto	l809
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
  8464  0012B2  0E03               	movlw	3
  8465  0012B4  EC4A  F03B         	call	_btPress
  8466  0012B8  0900               	iorlw	0
  8467  0012BA  B4D8               	btfsc	status,2,c
  8468  0012BC  D003               	goto	l805
  8469                           
  8470                           ;tela_TELEFONES.h: 16: option_posi--;
  8471  0012BE  0100               	movlb	0	; () banked
  8472  0012C0  07DF               	decf	_option_posi& (0+255),f,b
  8473                           
  8474                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
  8475  0012C2  D047               	goto	l809
  8476  0012C4                     l805:
  8477  0012C4  FFFF               	dw	65535	; assembler added errata NOP
  8478                           
  8479                           ; BSR set to: 0
  8480  0012C6  0E02               	movlw	2
  8481  0012C8  EC4A  F03B         	call	_btPress
  8482  0012CC  0900               	iorlw	0
  8483  0012CE  B4D8               	btfsc	status,2,c
  8484  0012D0  D003               	goto	l807
  8485                           
  8486                           ;tela_TELEFONES.h: 18: option_posi++;
  8487  0012D2  0100               	movlb	0	; () banked
  8488  0012D4  2BDF               	incf	_option_posi& (0+255),f,b
  8489                           
  8490                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
  8491  0012D6  D03D               	goto	l809
  8492  0012D8                     l807:
  8493  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  8494                           
  8495                           ; BSR set to: 0
  8496  0012DA  0E01               	movlw	1
  8497  0012DC  EC4A  F03B         	call	_btPress
  8498  0012E0  0900               	iorlw	0
  8499  0012E2  B4D8               	btfsc	status,2,c
  8500  0012E4  D036               	goto	l809
  8501                           
  8502                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
  8503  0012E6  0E00               	movlw	0
  8504  0012E8  0100               	movlb	0	; () banked
  8505  0012EA  6FF4               	movwf	_gsmOcupado& (0+255),b
  8506                           
  8507                           ;tela_TELEFONES.h: 21: option_posi = 0;
  8508  0012EC  0E00               	movlw	0
  8509  0012EE  6FDF               	movwf	_option_posi& (0+255),b
  8510                           
  8511                           ;tela_TELEFONES.h: 22: tel_posi = 0;
  8512  0012F0  0E00               	movlw	0
  8513  0012F2  6FDC               	movwf	_tel_posi& (0+255),b
  8514                           
  8515                           ;tela_TELEFONES.h: 23: ajust_tel = 0;
  8516  0012F4  0E00               	movlw	0
  8517  0012F6  6FDB               	movwf	_ajust_tel& (0+255),b
  8518                           
  8519                           ;tela_TELEFONES.h: 24: char i = 0;
  8520  0012F8  0E00               	movlw	0
  8521  0012FA  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8522                           
  8523                           ;tela_TELEFONES.h: 25: for (i = 0; i < 11; i++) {
  8524  0012FC  0E00               	movlw	0
  8525  0012FE  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8526  001300                     l7316:
  8527  001300  FFFF               	dw	65535	; assembler added errata NOP
  8528                           
  8529                           ; BSR set to: 0
  8530  001302  0E0A               	movlw	10
  8531  001304  65C3               	cpfsgt	configuraTelefones@i& (0+255),b
  8532  001306  D001               	goto	l810
  8533  001308  D021               	goto	u8310
  8534  00130A                     l810:
  8535  00130A  FFFF               	dw	65535	; assembler added errata NOP
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;tela_TELEFONES.h: 26: writeEEPROM_ext((20 + i), tel1[i]);
  8539                           
  8540                           ; BSR set to: 0
  8541  00130C  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8542  00130E  0D01               	mullw	1
  8543  001310  0EB0               	movlw	low _tel1
  8544  001312  24F3               	addwf	prodl,w,c
  8545  001314  6ED9               	movwf	fsr2l,c
  8546  001316  0E01               	movlw	high _tel1
  8547  001318  20F4               	addwfc	prodh,w,c
  8548  00131A  6EDA               	movwf	fsr2h,c
  8549  00131C  50DF               	movf	indf2,w,c
  8550  00131E  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8551  001320  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8552  001322  0F14               	addlw	20
  8553  001324  ECA6  F039         	call	_writeEEPROM_ext
  8554                           
  8555                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((40 + i), tel2[i]);
  8556  001328  0100               	movlb	0	; () banked
  8557  00132A  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8558  00132C  0D01               	mullw	1
  8559  00132E  0EA4               	movlw	low _tel2
  8560  001330  24F3               	addwf	prodl,w,c
  8561  001332  6ED9               	movwf	fsr2l,c
  8562  001334  0E01               	movlw	high _tel2
  8563  001336  20F4               	addwfc	prodh,w,c
  8564  001338  6EDA               	movwf	fsr2h,c
  8565  00133A  50DF               	movf	indf2,w,c
  8566  00133C  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8567  00133E  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8568  001340  0F28               	addlw	40
  8569  001342  ECA6  F039         	call	_writeEEPROM_ext
  8570  001346  0100               	movlb	0	; () banked
  8571  001348  2BC3               	incf	configuraTelefones@i& (0+255),f,b
  8572  00134A  D7DA               	goto	l7316
  8573  00134C                     u8310:
  8574  00134C  FFFF               	dw	65535	; assembler added errata NOP
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;tela_TELEFONES.h: 28: }
  8578                           ;tela_TELEFONES.h: 29: menu_posi = _menu_posi;
  8579  00134E  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  8580  001352                     l809:
  8581  001352  FFFF               	dw	65535	; assembler added errata NOP
  8582                           
  8583                           ;tela_TELEFONES.h: 30: }
  8584                           ;tela_TELEFONES.h: 31: }
  8585                           ;tela_TELEFONES.h: 32: if (ajust_tel == 1) {
  8586                           
  8587                           ; BSR set to: 0
  8588                           
  8589                           ; BSR set to: 0
  8590                           
  8591                           ; BSR set to: 0
  8592                           
  8593                           ; BSR set to: 0
  8594  001354  0100               	movlb	0	; () banked
  8595  001356  05DB               	decf	_ajust_tel& (0+255),w,b
  8596  001358  A4D8               	btfss	status,2,c
  8597  00135A  D11A               	goto	l816
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;tela_TELEFONES.h: 33: if (btPress(4)) {
  8601  00135C  0E04               	movlw	4
  8602  00135E  EC4A  F03B         	call	_btPress
  8603  001362  0900               	iorlw	0
  8604  001364  B4D8               	btfsc	status,2,c
  8605  001366  D003               	goto	l813
  8606                           
  8607                           ;tela_TELEFONES.h: 34: tel_posi++;
  8608  001368  0100               	movlb	0	; () banked
  8609  00136A  2BDC               	incf	_tel_posi& (0+255),f,b
  8610                           
  8611                           ;tela_TELEFONES.h: 35: } else if (btPress(1)) {
  8612  00136C  D111               	goto	l816
  8613  00136E                     l813:
  8614  00136E  FFFF               	dw	65535	; assembler added errata NOP
  8615                           
  8616                           ; BSR set to: 0
  8617  001370  0E01               	movlw	1
  8618  001372  EC4A  F03B         	call	_btPress
  8619  001376  0900               	iorlw	0
  8620  001378  B4D8               	btfsc	status,2,c
  8621  00137A  D10A               	goto	l816
  8622                           
  8623                           ;tela_TELEFONES.h: 36: tel_posi = 0;
  8624  00137C  0E00               	movlw	0
  8625  00137E  0100               	movlb	0	; () banked
  8626  001380  6FDC               	movwf	_tel_posi& (0+255),b
  8627                           
  8628                           ;tela_TELEFONES.h: 37: ajust_tel = 0;
  8629  001382  0E00               	movlw	0
  8630  001384  6FDB               	movwf	_ajust_tel& (0+255),b
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;tela_TELEFONES.h: 38: }
  8634                           ;tela_TELEFONES.h: 39: }
  8635                           ;tela_TELEFONES.h: 41: switch (option_posi) {
  8636                           
  8637                           ; BSR set to: 0
  8638                           
  8639                           ; BSR set to: 0
  8640  001386  D104               	goto	l816
  8641  001388  FFFF               	dw	65535	; assembler added errata NOP
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;tela_TELEFONES.h: 43: line1[0] = '>';
  8645                           
  8646                           ; BSR set to: 0
  8647  00138A  0E3E               	movlw	62
  8648  00138C  0101               	movlb	1	; () banked
  8649  00138E  6F7B               	movwf	_line1& (0+255),b
  8650                           
  8651                           ; BSR set to: 1
  8652                           ;tela_TELEFONES.h: 44: if (btPress(4)) {
  8653  001390  0E04               	movlw	4
  8654  001392  EC4A  F03B         	call	_btPress
  8655  001396  0900               	iorlw	0
  8656  001398  B4D8               	btfsc	status,2,c
  8657  00139A  D003               	goto	l818
  8658                           
  8659                           ;tela_TELEFONES.h: 45: ajust_tel = 1;
  8660  00139C  0E01               	movlw	1
  8661  00139E  0100               	movlb	0	; () banked
  8662  0013A0  6FDB               	movwf	_ajust_tel& (0+255),b
  8663  0013A2                     l818:
  8664  0013A2  FFFF               	dw	65535	; assembler added errata NOP
  8665                           
  8666                           ;tela_TELEFONES.h: 46: }
  8667                           ;tela_TELEFONES.h: 47: if (ajust_tel) {
  8668  0013A4  0100               	movlb	0	; () banked
  8669  0013A6  51DB               	movf	_ajust_tel& (0+255),w,b
  8670  0013A8  B4D8               	btfsc	status,2,c
  8671  0013AA  D0FF               	goto	l826
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;tela_TELEFONES.h: 48: blink(line1, (tel_posi + 6), (tel_posi + 6));
  8675  0013AC  0E7B               	movlw	low _line1
  8676  0013AE  6F80               	movwf	blink@line& (0+255),b
  8677  0013B0  0E01               	movlw	high _line1
  8678  0013B2  6F81               	movwf	(blink@line+1)& (0+255),b
  8679  0013B4  51DC               	movf	_tel_posi& (0+255),w,b
  8680  0013B6  0F06               	addlw	6
  8681  0013B8  6F82               	movwf	blink@start& (0+255),b
  8682  0013BA  51DC               	movf	_tel_posi& (0+255),w,b
  8683  0013BC  0F06               	addlw	6
  8684  0013BE  6F83               	movwf	blink@end& (0+255),b
  8685  0013C0  ECE2  F038         	call	_blink	;wreg free
  8686                           
  8687                           ;tela_TELEFONES.h: 49: if ((tel_posi + 2) > sizeof (tel1)) {
  8688  0013C4  0100               	movlb	0	; () banked
  8689  0013C6  51DC               	movf	_tel_posi& (0+255),w,b
  8690  0013C8  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8691  0013CA  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8692  0013CC  0E02               	movlw	2
  8693  0013CE  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8694  0013D0  0E00               	movlw	0
  8695  0013D2  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8696  0013D4  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8697  0013D6  E104               	bnz	u8370
  8698  0013D8  0E0D               	movlw	13
  8699  0013DA  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8700  0013DC  A0D8               	btfss	status,0,c
  8701  0013DE  D004               	goto	l820
  8702  0013E0                     u8370:
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;tela_TELEFONES.h: 50: tel_posi = 0;
  8706  0013E0  0E00               	movlw	0
  8707  0013E2  6FDC               	movwf	_tel_posi& (0+255),b
  8708                           
  8709                           ;tela_TELEFONES.h: 51: ajust_tel = 0;
  8710  0013E4  0E00               	movlw	0
  8711  0013E6  6FDB               	movwf	_ajust_tel& (0+255),b
  8712  0013E8                     l820:
  8713  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;tela_TELEFONES.h: 52: }
  8717                           ;tela_TELEFONES.h: 53: if (btPress(3)) {
  8718                           
  8719                           ; BSR set to: 0
  8720  0013EA  0E03               	movlw	3
  8721  0013EC  EC4A  F03B         	call	_btPress
  8722  0013F0  0900               	iorlw	0
  8723  0013F2  B4D8               	btfsc	status,2,c
  8724  0013F4  D00A               	goto	l821
  8725                           
  8726                           ;tela_TELEFONES.h: 54: tel1[tel_posi]++;
  8727  0013F6  0100               	movlb	0	; () banked
  8728  0013F8  51DC               	movf	_tel_posi& (0+255),w,b
  8729  0013FA  0D01               	mullw	1
  8730  0013FC  0EB0               	movlw	low _tel1
  8731  0013FE  24F3               	addwf	prodl,w,c
  8732  001400  6ED9               	movwf	fsr2l,c
  8733  001402  0E01               	movlw	high _tel1
  8734  001404  20F4               	addwfc	prodh,w,c
  8735  001406  6EDA               	movwf	fsr2h,c
  8736  001408  2ADF               	incf	indf2,f,c
  8737  00140A                     l821:
  8738  00140A  FFFF               	dw	65535	; assembler added errata NOP
  8739                           
  8740                           ;tela_TELEFONES.h: 55: }
  8741                           ;tela_TELEFONES.h: 56: if (btPress(2)) {
  8742                           
  8743                           ; BSR set to: 0
  8744  00140C  0E02               	movlw	2
  8745  00140E  EC4A  F03B         	call	_btPress
  8746  001412  0900               	iorlw	0
  8747  001414  B4D8               	btfsc	status,2,c
  8748  001416  D00A               	goto	l822
  8749                           
  8750                           ;tela_TELEFONES.h: 57: tel1[tel_posi]--;
  8751  001418  0100               	movlb	0	; () banked
  8752  00141A  51DC               	movf	_tel_posi& (0+255),w,b
  8753  00141C  0D01               	mullw	1
  8754  00141E  0EB0               	movlw	low _tel1
  8755  001420  24F3               	addwf	prodl,w,c
  8756  001422  6ED9               	movwf	fsr2l,c
  8757  001424  0E01               	movlw	high _tel1
  8758  001426  20F4               	addwfc	prodh,w,c
  8759  001428  6EDA               	movwf	fsr2h,c
  8760  00142A  06DF               	decf	indf2,f,c
  8761  00142C                     l822:
  8762  00142C  FFFF               	dw	65535	; assembler added errata NOP
  8763                           
  8764                           ;tela_TELEFONES.h: 58: }
  8765                           ;tela_TELEFONES.h: 59: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
  8766  00142E  0100               	movlb	0	; () banked
  8767  001430  51DC               	movf	_tel_posi& (0+255),w,b
  8768  001432  0D01               	mullw	1
  8769  001434  0EB0               	movlw	low _tel1
  8770  001436  24F3               	addwf	prodl,w,c
  8771  001438  6ED9               	movwf	fsr2l,c
  8772  00143A  0E01               	movlw	high _tel1
  8773  00143C  20F4               	addwfc	prodh,w,c
  8774  00143E  6EDA               	movwf	fsr2h,c
  8775  001440  0E3A               	movlw	58
  8776  001442  60DF               	cpfslt	indf2,c
  8777  001444  D00B               	goto	u8410
  8778                           
  8779                           ; BSR set to: 0
  8780  001446  51DC               	movf	_tel_posi& (0+255),w,b
  8781  001448  0D01               	mullw	1
  8782  00144A  0EB0               	movlw	low _tel1
  8783  00144C  24F3               	addwf	prodl,w,c
  8784  00144E  6ED9               	movwf	fsr2l,c
  8785  001450  0E01               	movlw	high _tel1
  8786  001452  20F4               	addwfc	prodh,w,c
  8787  001454  6EDA               	movwf	fsr2h,c
  8788  001456  0E30               	movlw	48
  8789  001458  60DF               	cpfslt	indf2,c
  8790  00145A  D0A7               	goto	l826
  8791  00145C                     u8410:
  8792  00145C  FFFF               	dw	65535	; assembler added errata NOP
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;tela_TELEFONES.h: 60: tel1[tel_posi] = 48;
  8796                           
  8797                           ; BSR set to: 0
  8798  00145E  51DC               	movf	_tel_posi& (0+255),w,b
  8799  001460  0D01               	mullw	1
  8800  001462  0EB0               	movlw	low _tel1
  8801  001464  24F3               	addwf	prodl,w,c
  8802  001466  6ED9               	movwf	fsr2l,c
  8803  001468  0E01               	movlw	high _tel1
  8804  00146A  D071               	goto	L18
  8805  00146C  FFFF               	dw	65535	; assembler added errata NOP
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;tela_TELEFONES.h: 65: line2[0] = '>';
  8809                           
  8810                           ; BSR set to: 0
  8811  00146E  0E3E               	movlw	62
  8812  001470  0101               	movlb	1	; () banked
  8813  001472  6F66               	movwf	_line2& (0+255),b
  8814                           
  8815                           ; BSR set to: 1
  8816                           ;tela_TELEFONES.h: 66: if (btPress(4)) {
  8817  001474  0E04               	movlw	4
  8818  001476  EC4A  F03B         	call	_btPress
  8819  00147A  0900               	iorlw	0
  8820  00147C  B4D8               	btfsc	status,2,c
  8821  00147E  D003               	goto	l828
  8822                           
  8823                           ;tela_TELEFONES.h: 67: ajust_tel = 1;
  8824  001480  0E01               	movlw	1
  8825  001482  0100               	movlb	0	; () banked
  8826  001484  6FDB               	movwf	_ajust_tel& (0+255),b
  8827  001486                     l828:
  8828  001486  FFFF               	dw	65535	; assembler added errata NOP
  8829                           
  8830                           ;tela_TELEFONES.h: 68: }
  8831                           ;tela_TELEFONES.h: 69: if (ajust_tel) {
  8832  001488  0100               	movlb	0	; () banked
  8833  00148A  51DB               	movf	_ajust_tel& (0+255),w,b
  8834  00148C  B4D8               	btfsc	status,2,c
  8835  00148E  D08D               	goto	l826
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;tela_TELEFONES.h: 70: blink(line2, (tel_posi + 6), (tel_posi + 6));
  8839  001490  0E66               	movlw	low _line2
  8840  001492  6F80               	movwf	blink@line& (0+255),b
  8841  001494  0E01               	movlw	high _line2
  8842  001496  6F81               	movwf	(blink@line+1)& (0+255),b
  8843  001498  51DC               	movf	_tel_posi& (0+255),w,b
  8844  00149A  0F06               	addlw	6
  8845  00149C  6F82               	movwf	blink@start& (0+255),b
  8846  00149E  51DC               	movf	_tel_posi& (0+255),w,b
  8847  0014A0  0F06               	addlw	6
  8848  0014A2  6F83               	movwf	blink@end& (0+255),b
  8849  0014A4  ECE2  F038         	call	_blink	;wreg free
  8850                           
  8851                           ;tela_TELEFONES.h: 71: if ((tel_posi + 2) > sizeof (tel2)) {
  8852  0014A8  0100               	movlb	0	; () banked
  8853  0014AA  51DC               	movf	_tel_posi& (0+255),w,b
  8854  0014AC  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8855  0014AE  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8856  0014B0  0E02               	movlw	2
  8857  0014B2  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8858  0014B4  0E00               	movlw	0
  8859  0014B6  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8860  0014B8  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8861  0014BA  E104               	bnz	u8440
  8862  0014BC  0E0D               	movlw	13
  8863  0014BE  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8864  0014C0  A0D8               	btfss	status,0,c
  8865  0014C2  D004               	goto	l830
  8866  0014C4                     u8440:
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;tela_TELEFONES.h: 72: tel_posi = 0;
  8870  0014C4  0E00               	movlw	0
  8871  0014C6  6FDC               	movwf	_tel_posi& (0+255),b
  8872                           
  8873                           ;tela_TELEFONES.h: 73: ajust_tel = 0;
  8874  0014C8  0E00               	movlw	0
  8875  0014CA  6FDB               	movwf	_ajust_tel& (0+255),b
  8876  0014CC                     l830:
  8877  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;tela_TELEFONES.h: 74: }
  8881                           ;tela_TELEFONES.h: 75: if (btPress(3)) {
  8882                           
  8883                           ; BSR set to: 0
  8884  0014CE  0E03               	movlw	3
  8885  0014D0  EC4A  F03B         	call	_btPress
  8886  0014D4  0900               	iorlw	0
  8887  0014D6  B4D8               	btfsc	status,2,c
  8888  0014D8  D00A               	goto	l831
  8889                           
  8890                           ;tela_TELEFONES.h: 76: tel2[tel_posi]++;
  8891  0014DA  0100               	movlb	0	; () banked
  8892  0014DC  51DC               	movf	_tel_posi& (0+255),w,b
  8893  0014DE  0D01               	mullw	1
  8894  0014E0  0EA4               	movlw	low _tel2
  8895  0014E2  24F3               	addwf	prodl,w,c
  8896  0014E4  6ED9               	movwf	fsr2l,c
  8897  0014E6  0E01               	movlw	high _tel2
  8898  0014E8  20F4               	addwfc	prodh,w,c
  8899  0014EA  6EDA               	movwf	fsr2h,c
  8900  0014EC  2ADF               	incf	indf2,f,c
  8901  0014EE                     l831:
  8902  0014EE  FFFF               	dw	65535	; assembler added errata NOP
  8903                           
  8904                           ;tela_TELEFONES.h: 77: }
  8905                           ;tela_TELEFONES.h: 78: if (btPress(2)) {
  8906                           
  8907                           ; BSR set to: 0
  8908  0014F0  0E02               	movlw	2
  8909  0014F2  EC4A  F03B         	call	_btPress
  8910  0014F6  0900               	iorlw	0
  8911  0014F8  B4D8               	btfsc	status,2,c
  8912  0014FA  D00A               	goto	l832
  8913                           
  8914                           ;tela_TELEFONES.h: 79: tel2[tel_posi]--;
  8915  0014FC  0100               	movlb	0	; () banked
  8916  0014FE  51DC               	movf	_tel_posi& (0+255),w,b
  8917  001500  0D01               	mullw	1
  8918  001502  0EA4               	movlw	low _tel2
  8919  001504  24F3               	addwf	prodl,w,c
  8920  001506  6ED9               	movwf	fsr2l,c
  8921  001508  0E01               	movlw	high _tel2
  8922  00150A  20F4               	addwfc	prodh,w,c
  8923  00150C  6EDA               	movwf	fsr2h,c
  8924  00150E  06DF               	decf	indf2,f,c
  8925  001510                     l832:
  8926  001510  FFFF               	dw	65535	; assembler added errata NOP
  8927                           
  8928                           ;tela_TELEFONES.h: 80: }
  8929                           ;tela_TELEFONES.h: 81: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
  8930  001512  0100               	movlb	0	; () banked
  8931  001514  51DC               	movf	_tel_posi& (0+255),w,b
  8932  001516  0D01               	mullw	1
  8933  001518  0EA4               	movlw	low _tel2
  8934  00151A  24F3               	addwf	prodl,w,c
  8935  00151C  6ED9               	movwf	fsr2l,c
  8936  00151E  0E01               	movlw	high _tel2
  8937  001520  20F4               	addwfc	prodh,w,c
  8938  001522  6EDA               	movwf	fsr2h,c
  8939  001524  0E3A               	movlw	58
  8940  001526  60DF               	cpfslt	indf2,c
  8941  001528  D00B               	goto	u8480
  8942                           
  8943                           ; BSR set to: 0
  8944  00152A  51DC               	movf	_tel_posi& (0+255),w,b
  8945  00152C  0D01               	mullw	1
  8946  00152E  0EA4               	movlw	low _tel2
  8947  001530  24F3               	addwf	prodl,w,c
  8948  001532  6ED9               	movwf	fsr2l,c
  8949  001534  0E01               	movlw	high _tel2
  8950  001536  20F4               	addwfc	prodh,w,c
  8951  001538  6EDA               	movwf	fsr2h,c
  8952  00153A  0E30               	movlw	48
  8953  00153C  60DF               	cpfslt	indf2,c
  8954  00153E  D035               	goto	l826
  8955  001540                     u8480:
  8956  001540  FFFF               	dw	65535	; assembler added errata NOP
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;tela_TELEFONES.h: 82: tel2[tel_posi] = 48;
  8960                           
  8961                           ; BSR set to: 0
  8962  001542  51DC               	movf	_tel_posi& (0+255),w,b
  8963  001544  0D01               	mullw	1
  8964  001546  0EA4               	movlw	low _tel2
  8965  001548  24F3               	addwf	prodl,w,c
  8966  00154A  6ED9               	movwf	fsr2l,c
  8967  00154C  0E01               	movlw	high _tel2
  8968  00154E                     L18:
  8969  00154E  FFFF               	dw	65535	; assembler added errata NOP
  8970  001550  20F4               	addwfc	prodh,w,c
  8971  001552  6EDA               	movwf	fsr2h,c
  8972  001554  0E30               	movlw	48
  8973  001556  6EDF               	movwf	indf2,c
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;tela_TELEFONES.h: 83: }
  8977                           ;tela_TELEFONES.h: 84: }
  8978                           ;tela_TELEFONES.h: 85: break;
  8979                           
  8980                           ; BSR set to: 0
  8981  001558  D028               	goto	l826
  8982  00155A  FFFF               	dw	65535	; assembler added errata NOP
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;tela_TELEFONES.h: 87: line3[0] = '>';
  8986                           
  8987                           ; BSR set to: 0
  8988  00155C  0E3E               	movlw	62
  8989  00155E  0101               	movlb	1	; () banked
  8990  001560  6F51               	movwf	_line3& (0+255),b
  8991                           
  8992                           ; BSR set to: 1
  8993                           ;tela_TELEFONES.h: 88: if (btPress(4) && intensidadeSinal != 'x' && !gsmOcupado) {
  8994  001562  0E04               	movlw	4
  8995  001564  EC4A  F03B         	call	_btPress
  8996  001568  0900               	iorlw	0
  8997  00156A  B4D8               	btfsc	status,2,c
  8998  00156C  D01E               	goto	l826
  8999  00156E  0E78               	movlw	120
  9000  001570  0100               	movlb	0	; () banked
  9001  001572  19FF               	xorwf	_intensidadeSinal& (0+255),w,b
  9002  001574  B4D8               	btfsc	status,2,c
  9003  001576  D019               	goto	l826
  9004                           
  9005                           ; BSR set to: 0
  9006  001578  51F4               	movf	_gsmOcupado& (0+255),w,b
  9007  00157A  A4D8               	btfss	status,2,c
  9008  00157C  D016               	goto	l826
  9009                           
  9010                           ; BSR set to: 0
  9011                           ;tela_TELEFONES.h: 89: gsmOcupado = 1;
  9012  00157E  0E01               	movlw	1
  9013  001580  6FF4               	movwf	_gsmOcupado& (0+255),b
  9014                           
  9015                           ;tela_TELEFONES.h: 90: telefoneSelecionado = 0;
  9016  001582  0E00               	movlw	0
  9017  001584  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9018                           
  9019                           ; BSR set to: 0
  9020                           ;tela_TELEFONES.h: 91: }
  9021                           ;tela_TELEFONES.h: 92: break;
  9022  001586  D011               	goto	l826
  9023  001588  FFFF               	dw	65535	; assembler added errata NOP
  9024                           
  9025                           ; BSR set to: 0
  9026                           
  9027                           ; BSR set to: 0
  9028  00158A  0E00               	movlw	0
  9029  00158C  6FDF               	movwf	_option_posi& (0+255),b
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;tela_TELEFONES.h: 96: }
  9033                           
  9034                           ;tela_TELEFONES.h: 95: break;
  9035  00158E  D00D               	goto	l826
  9036  001590                     l816:
  9037  001590  FFFF               	dw	65535	; assembler added errata NOP
  9038                           
  9039                           ; BSR set to: 0
  9040  001592  0100               	movlb	0	; () banked
  9041  001594  51DF               	movf	_option_posi& (0+255),w,b
  9042                           
  9043                           ; Switch size 1, requested type "space"
  9044                           ; Number of cases is 3, Range of values is 0 to 2
  9045                           ; switch strategies available:
  9046                           ; Name         Instructions Cycles
  9047                           ; simple_byte           10     6 (average)
  9048                           ;	Chosen strategy is simple_byte
  9049  001596  0A00               	xorlw	0	; case 0
  9050  001598  B4D8               	btfsc	status,2,c
  9051  00159A  D6F6               	goto	l817
  9052  00159C  0A01               	xorlw	1	; case 1
  9053  00159E  B4D8               	btfsc	status,2,c
  9054  0015A0  D765               	goto	l827
  9055  0015A2  0A03               	xorlw	3	; case 2
  9056  0015A4  B4D8               	btfsc	status,2,c
  9057  0015A6  D7D9               	goto	l836
  9058  0015A8  D7EF               	goto	l838
  9059  0015AA                     l826:
  9060  0015AA  FFFF               	dw	65535	; assembler added errata NOP
  9061                           
  9062                           ;tela_TELEFONES.h: 97: if (gsmOcupado) {
  9063                           
  9064                           ; BSR set to: 0
  9065  0015AC  0100               	movlb	0	; () banked
  9066  0015AE  51F4               	movf	_gsmOcupado& (0+255),w,b
  9067  0015B0  A4D8               	btfss	status,2,c
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;tela_TELEFONES.h: 98: comunicarTeste();
  9071  0015B2  EC0E  F012         	call	_comunicarTeste	;wreg free
  9072  0015B6  0012               	return		;funcret
  9073  0015B8  FFFF               	dw	65535	; errata NOP
  9074  0015BA                     __end_of_configuraTelefones:
  9075                           	opt stack 0
  9076                           tblptru	equ	0xFF8
  9077                           tblptrh	equ	0xFF7
  9078                           tblptrl	equ	0xFF6
  9079                           tablat	equ	0xFF5
  9080                           prodh	equ	0xFF4
  9081                           prodl	equ	0xFF3
  9082                           postinc0	equ	0xFEE
  9083                           wreg	equ	0xFE8
  9084                           postdec1	equ	0xFE5
  9085                           fsr1l	equ	0xFE1
  9086                           indf2	equ	0xFDF
  9087                           postinc2	equ	0xFDE
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           
  9092 ;; *************** function _comunicarTeste *****************
  9093 ;; Defined at:
  9094 ;;		line 58 in file "comunicacao.h"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      void 
  9101 ;; Registers used:
  9102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9108 ;;      Params:         0       0       0       0       0       0       0
  9109 ;;      Locals:         0       2       0       0       0       0       0
  9110 ;;      Temps:          0       2       0       0       0       0       0
  9111 ;;      Totals:         0       4       0       0       0       0       0
  9112 ;;Total ram usage:        4 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    9
  9115 ;; This function calls:
  9116 ;;		_aguardaBuffer
  9117 ;;		_delay
  9118 ;;		_limparBuffer
  9119 ;;		_printf
  9120 ;;		_writeChar
  9121 ;; This function is called by:
  9122 ;;		_configuraTelefones
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text22
  9127  00241C                     __ptext22:
  9128                           	opt stack 0
  9129  00241C                     _comunicarTeste:
  9130                           	opt stack 0
  9131  00241C  FFFF               	dw	65535	; assembler added errata NOP
  9132                           
  9133                           ;comunicacao.h: 59: switch (etapaComunicacao) {
  9134                           
  9135                           ;incstack = 0
  9136  00241E  D0D1               	goto	l319
  9137  002420  FFFF               	dw	65535	; assembler added errata NOP
  9138                           
  9139                           ;comunicacao.h: 61: limparBuffer();
  9140  002422  ECC3  F037         	call	_limparBuffer	;wreg free
  9141                           
  9142                           ;comunicacao.h: 62: printf("AT\r\n");
  9143  002426  0EDE               	movlw	low STR_4
  9144  002428  0100               	movlb	0	; () banked
  9145  00242A  6FA1               	movwf	printf@f& (0+255),b
  9146  00242C  0E7F               	movlw	high STR_4
  9147  00242E  6FA2               	movwf	(printf@f+1)& (0+255),b
  9148  002430  ECC4  F038         	call	_printf	;wreg free
  9149                           
  9150                           ;comunicacao.h: 63: etapaComunicacao++;
  9151  002434  4A51               	infsnz	_etapaComunicacao,f,c
  9152  002436  2A52               	incf	_etapaComunicacao+1,f,c
  9153                           
  9154                           ;comunicacao.h: 64: timerEtapaComunicacao = 5;
  9155  002438  0E05               	movlw	5
  9156  00243A  0100               	movlb	0	; () banked
  9157  00243C  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9158                           
  9159                           ;comunicacao.h: 65: break;
  9160  00243E  D0DC               	goto	l321
  9161  002440  FFFF               	dw	65535	; assembler added errata NOP
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;comunicacao.h: 67: if (aguardaBuffer("OK")) {
  9165                           
  9166                           ; BSR set to: 0
  9167  002442  0EFA               	movlw	low STR_5
  9168  002444  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9169  002446  0E7F               	movlw	high STR_5
  9170  002448  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9171  00244A  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9172  00244E  0900               	iorlw	0
  9173  002450  B4D8               	btfsc	status,2,c
  9174  002452  D00E               	goto	l323
  9175                           
  9176                           ;comunicacao.h: 68: limparBuffer();
  9177  002454  ECC3  F037         	call	_limparBuffer	;wreg free
  9178                           
  9179                           ;comunicacao.h: 69: printf("AT+CMGF=1\r\n");
  9180  002458  0ED9               	movlw	low STR_10
  9181  00245A  0100               	movlb	0	; () banked
  9182  00245C  6FA1               	movwf	printf@f& (0+255),b
  9183  00245E  0E7E               	movlw	high STR_10
  9184  002460  6FA2               	movwf	(printf@f+1)& (0+255),b
  9185  002462  ECC4  F038         	call	_printf	;wreg free
  9186                           
  9187                           ;comunicacao.h: 70: etapaComunicacao++;
  9188  002466  4A51               	infsnz	_etapaComunicacao,f,c
  9189  002468  2A52               	incf	_etapaComunicacao+1,f,c
  9190                           
  9191                           ;comunicacao.h: 71: timerEtapaComunicacao = 5;
  9192  00246A  0E05               	movlw	5
  9193  00246C  0100               	movlb	0	; () banked
  9194  00246E  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9195  002470                     l323:
  9196  002470  FFFF               	dw	65535	; assembler added errata NOP
  9197                           
  9198                           ;comunicacao.h: 72: }
  9199                           ;comunicacao.h: 73: if (!timerEtapaComunicacao) {
  9200                           
  9201                           ; BSR set to: 0
  9202  002472  0100               	movlb	0	; () banked
  9203  002474  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9204  002476  A4D8               	btfss	status,2,c
  9205  002478  D0BF               	goto	l321
  9206                           
  9207                           ; BSR set to: 0
  9208                           ;comunicacao.h: 74: etapaComunicacao = 0;
  9209  00247A  0E00               	movlw	0
  9210  00247C  6E52               	movwf	_etapaComunicacao+1,c
  9211  00247E  0E00               	movlw	0
  9212  002480  6E51               	movwf	_etapaComunicacao,c
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;comunicacao.h: 75: writeChar(0x1A);
  9216  002482  0E1A               	movlw	26
  9217  002484  6F80               	movwf	writeChar@hex& (0+255),b
  9218  002486  0E00               	movlw	0
  9219  002488  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9220  00248A  EC7F  F036         	call	_writeChar	;wreg free
  9221                           
  9222                           ;comunicacao.h: 76: }
  9223                           ;comunicacao.h: 77: break;
  9224  00248E  D0B4               	goto	l321
  9225  002490  FFFF               	dw	65535	; assembler added errata NOP
  9226                           
  9227                           ;comunicacao.h: 79: if (aguardaBuffer("OK")) {
  9228  002492  0EFA               	movlw	low STR_5
  9229  002494  0100               	movlb	0	; () banked
  9230  002496  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9231  002498  0E7F               	movlw	high STR_5
  9232  00249A  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9233  00249C  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9234  0024A0  0900               	iorlw	0
  9235  0024A2  B4D8               	btfsc	status,2,c
  9236  0024A4  D083               	goto	L43
  9237                           
  9238                           ;comunicacao.h: 80: limparBuffer();
  9239  0024A6  ECC3  F037         	call	_limparBuffer	;wreg free
  9240                           
  9241                           ;comunicacao.h: 81: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
  9242  0024AA  0100               	movlb	0	; () banked
  9243  0024AC  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9244  0024AE  B4D8               	btfsc	status,2,c
  9245  0024B0  D004               	goto	l328
  9246                           
  9247                           ; BSR set to: 0
  9248  0024B2  0EA4               	movlw	low _tel2
  9249  0024B4  6FBD               	movwf	_comunicarTeste$1192& (0+255),b
  9250  0024B6  0E01               	movlw	high _tel2
  9251  0024B8  D004               	goto	L19
  9252  0024BA                     l328:
  9253  0024BA  FFFF               	dw	65535	; assembler added errata NOP
  9254                           
  9255                           ; BSR set to: 0
  9256                           
  9257                           ; BSR set to: 0
  9258  0024BC  0EB0               	movlw	low _tel1
  9259  0024BE  6FBD               	movwf	_comunicarTeste$1192& (0+255),b
  9260  0024C0  0E01               	movlw	high _tel1
  9261  0024C2                     L19:
  9262  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  9263  0024C4  6FBE               	movwf	(_comunicarTeste$1192+1)& (0+255),b
  9264                           
  9265                           ; BSR set to: 0
  9266                           
  9267                           ; BSR set to: 0
  9268  0024C6  0E5F               	movlw	low STR_12
  9269  0024C8  6FA1               	movwf	printf@f& (0+255),b
  9270  0024CA  0E7D               	movlw	high STR_12
  9271  0024CC  6FA2               	movwf	(printf@f+1)& (0+255),b
  9272  0024CE  C0BD  F0A3         	movff	_comunicarTeste$1192,?_printf+2
  9273  0024D2  C0BE  F0A4         	movff	_comunicarTeste$1192+1,?_printf+3
  9274  0024D6  ECC4  F038         	call	_printf	;wreg free
  9275                           
  9276                           ;comunicacao.h: 82: timerEtapaComunicacao = 5;
  9277  0024DA  0E05               	movlw	5
  9278  0024DC  0100               	movlb	0	; () banked
  9279  0024DE  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;comunicacao.h: 83: etapaComunicacao++;
  9283  0024E0  4A51               	infsnz	_etapaComunicacao,f,c
  9284  0024E2  2A52               	incf	_etapaComunicacao+1,f,c
  9285                           
  9286                           ;comunicacao.h: 84: break;
  9287  0024E4  D089               	goto	l321
  9288  0024E6  FFFF               	dw	65535	; assembler added errata NOP
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;comunicacao.h: 91: if (aguardaBuffer(">")) {
  9292                           
  9293                           ; BSR set to: 0
  9294  0024E8  0EFD               	movlw	low STR_13
  9295  0024EA  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9296  0024EC  0E7F               	movlw	high STR_13
  9297  0024EE  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9298  0024F0  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9299  0024F4  0900               	iorlw	0
  9300  0024F6  B4D8               	btfsc	status,2,c
  9301  0024F8  D059               	goto	L43
  9302                           
  9303                           ;comunicacao.h: 92: limparBuffer();
  9304  0024FA  ECC3  F037         	call	_limparBuffer	;wreg free
  9305                           
  9306                           ;comunicacao.h: 93: printf("TECHNOW Sistemas embarcados\r\n\r\nTeste manual de comunicac
      +                          ao.\r\nData: %02d/%02d/%02d %02d:%02d:%02d\r\n\r\n\r\nVersao do sistema: %s\r\n",
  9307                           ;comunicacao.h: 94: _dia, _mes, _ano, _hor, _min, _sec, "Aug 25 2019");
  9308  0024FE  0ED7               	movlw	low STR_14
  9309  002500  0100               	movlb	0	; () banked
  9310  002502  6FA1               	movwf	printf@f& (0+255),b
  9311  002504  0E7A               	movlw	high STR_14
  9312  002506  6FA2               	movwf	(printf@f+1)& (0+255),b
  9313  002508  C0EB  F0A3         	movff	__dia,?_printf+2
  9314  00250C  6BA4               	clrf	(?_printf+3)& (0+255),b
  9315  00250E  C0EA  F0A5         	movff	__mes,?_printf+4
  9316  002512  6BA6               	clrf	(?_printf+5)& (0+255),b
  9317  002514  C0E9  F0A7         	movff	__ano,?_printf+6
  9318  002518  6BA8               	clrf	(?_printf+7)& (0+255),b
  9319  00251A  C0EC  F0A9         	movff	__hor,?_printf+8
  9320  00251E  6BAA               	clrf	(?_printf+9)& (0+255),b
  9321  002520  C0ED  F0AB         	movff	__min,?_printf+10
  9322  002524  6BAC               	clrf	(?_printf+11)& (0+255),b
  9323  002526  C0EE  F0AD         	movff	__sec,?_printf+12
  9324  00252A  6BAE               	clrf	(?_printf+13)& (0+255),b
  9325  00252C  0EE5               	movlw	low STR_15
  9326  00252E  6FAF               	movwf	(?_printf+14)& (0+255),b
  9327  002530  0E7E               	movlw	high STR_15
  9328  002532  6FB0               	movwf	(?_printf+15)& (0+255),b
  9329  002534  ECC4  F038         	call	_printf	;wreg free
  9330                           
  9331                           ;comunicacao.h: 95: delay(1000);
  9332  002538  0E03               	movlw	3
  9333  00253A  0100               	movlb	0	; () banked
  9334  00253C  6F81               	movwf	(delay@x+1)& (0+255),b
  9335  00253E  0EE8               	movlw	232
  9336  002540  6F80               	movwf	delay@x& (0+255),b
  9337  002542  ECA8  F037         	call	_delay	;wreg free
  9338                           
  9339                           ;comunicacao.h: 96: writeChar(0x1A);
  9340  002546  0E1A               	movlw	26
  9341  002548  0100               	movlb	0	; () banked
  9342  00254A  6F80               	movwf	writeChar@hex& (0+255),b
  9343  00254C  0E00               	movlw	0
  9344  00254E  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9345  002550  EC7F  F036         	call	_writeChar	;wreg free
  9346                           
  9347                           ;comunicacao.h: 97: etapaComunicacao++;
  9348  002554  4A51               	infsnz	_etapaComunicacao,f,c
  9349  002556  2A52               	incf	_etapaComunicacao+1,f,c
  9350                           
  9351                           ;comunicacao.h: 98: timerEtapaComunicacao = 30;
  9352  002558  0E1E               	movlw	30
  9353  00255A  0100               	movlb	0	; () banked
  9354  00255C  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9355                           
  9356                           ; BSR set to: 0
  9357  00255E  D026               	goto	L43
  9358  002560  FFFF               	dw	65535	; assembler added errata NOP
  9359                           
  9360                           ; BSR set to: 0
  9361                           ;comunicacao.h: 105: if (aguardaBuffer("OK")) {
  9362                           
  9363                           ; BSR set to: 0
  9364  002562  0EFA               	movlw	low STR_5
  9365  002564  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9366  002566  0E7F               	movlw	high STR_5
  9367  002568  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9368  00256A  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9369  00256E  0900               	iorlw	0
  9370  002570  B4D8               	btfsc	status,2,c
  9371  002572  D011               	goto	l336
  9372                           
  9373                           ;comunicacao.h: 106: if (telefoneSelecionado == 0) {
  9374  002574  0100               	movlb	0	; () banked
  9375  002576  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9376  002578  A4D8               	btfss	status,2,c
  9377  00257A  D003               	goto	l337
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;comunicacao.h: 107: telefoneSelecionado = 1;
  9381  00257C  0E01               	movlw	1
  9382  00257E  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9383                           
  9384                           ;comunicacao.h: 108: } else {
  9385  002580  D005               	goto	l338
  9386  002582                     l337:
  9387  002582  FFFF               	dw	65535	; assembler added errata NOP
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;comunicacao.h: 109: telefoneSelecionado = 0;
  9391                           
  9392                           ; BSR set to: 0
  9393  002584  0E00               	movlw	0
  9394  002586  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9395                           
  9396                           ;comunicacao.h: 110: gsmOcupado = 0;
  9397  002588  0E00               	movlw	0
  9398  00258A  6FF4               	movwf	_gsmOcupado& (0+255),b
  9399  00258C                     l338:
  9400  00258C  FFFF               	dw	65535	; assembler added errata NOP
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;comunicacao.h: 111: }
  9404                           ;comunicacao.h: 112: etapaComunicacao = 0;
  9405  00258E  0E00               	movlw	0
  9406  002590  6E52               	movwf	_etapaComunicacao+1,c
  9407  002592  0E00               	movlw	0
  9408  002594  6E51               	movwf	_etapaComunicacao,c
  9409  002596                     l336:
  9410  002596  FFFF               	dw	65535	; assembler added errata NOP
  9411                           
  9412                           ;comunicacao.h: 113: }
  9413                           ;comunicacao.h: 114: if (aguardaBuffer("ERROR") || !timerEtapaComunicacao) {
  9414                           
  9415                           ; BSR set to: 0
  9416  002598  0ED8               	movlw	low STR_17
  9417  00259A  0100               	movlb	0	; () banked
  9418  00259C  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9419  00259E  0E7F               	movlw	high STR_17
  9420  0025A0  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9421  0025A2  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9422  0025A6  0900               	iorlw	0
  9423  0025A8  A4D8               	btfss	status,2,c
  9424  0025AA  D005               	goto	u5840
  9425  0025AC                     L43:
  9426  0025AC  FFFF               	dw	65535	; assembler added errata NOP
  9427  0025AE  0100               	movlb	0	; () banked
  9428  0025B0  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9429  0025B2  A4D8               	btfss	status,2,c
  9430  0025B4  D021               	goto	l321
  9431  0025B6                     u5840:
  9432  0025B6  FFFF               	dw	65535	; assembler added errata NOP
  9433                           
  9434                           ;comunicacao.h: 119: etapaComunicacao = 0;
  9435                           
  9436                           ;comunicacao.h: 118: default:
  9437                           
  9438                           ;comunicacao.h: 116: }
  9439                           ;comunicacao.h: 117: break;
  9440                           
  9441                           ;comunicacao.h: 115: etapaComunicacao = 0;
  9442                           
  9443                           ; BSR set to: 0
  9444  0025B8  0E00               	movlw	0
  9445  0025BA  6E52               	movwf	_etapaComunicacao+1,c
  9446  0025BC  0E00               	movlw	0
  9447  0025BE  6E51               	movwf	_etapaComunicacao,c
  9448                           
  9449                           ;comunicacao.h: 122: }
  9450                           
  9451                           ;comunicacao.h: 120: break;
  9452  0025C0  D01B               	goto	l321
  9453  0025C2                     l319:
  9454  0025C2  FFFF               	dw	65535	; assembler added errata NOP
  9455  0025C4  C051  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
  9456  0025C8  C052  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
  9457                           
  9458                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9459                           ; Switch size 1, requested type "space"
  9460                           ; Number of cases is 1, Range of values is 0 to 0
  9461                           ; switch strategies available:
  9462                           ; Name         Instructions Cycles
  9463                           ; simple_byte            4     3 (average)
  9464                           ;	Chosen strategy is simple_byte
  9465  0025CC  0100               	movlb	0	; () banked
  9466  0025CE  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
  9467  0025D0  0A00               	xorlw	0	; case 0
  9468  0025D2  A4D8               	btfss	status,2,c
  9469  0025D4  D7F0               	goto	u5840
  9470                           
  9471                           ; BSR set to: 0
  9472                           ; Switch size 1, requested type "space"
  9473                           ; Number of cases is 5, Range of values is 0 to 4
  9474                           ; switch strategies available:
  9475                           ; Name         Instructions Cycles
  9476                           ; simple_byte           16     9 (average)
  9477                           ;	Chosen strategy is simple_byte
  9478  0025D6  51BB               	movf	??_comunicarTeste& (0+255),w,b
  9479  0025D8  0A00               	xorlw	0	; case 0
  9480  0025DA  B4D8               	btfsc	status,2,c
  9481  0025DC  D721               	goto	l320
  9482  0025DE  0A01               	xorlw	1	; case 1
  9483  0025E0  B4D8               	btfsc	status,2,c
  9484  0025E2  D72E               	goto	l322
  9485  0025E4  0A03               	xorlw	3	; case 2
  9486  0025E6  B4D8               	btfsc	status,2,c
  9487  0025E8  D753               	goto	l325
  9488  0025EA  0A01               	xorlw	1	; case 3
  9489  0025EC  B4D8               	btfsc	status,2,c
  9490  0025EE  D77B               	goto	l332
  9491  0025F0  0A07               	xorlw	7	; case 4
  9492  0025F2  B4D8               	btfsc	status,2,c
  9493  0025F4  D7B5               	goto	l335
  9494  0025F6  D7DF               	goto	u5840
  9495  0025F8                     l321:
  9496  0025F8  FFFF               	dw	65535	; assembler added errata NOP
  9497                           
  9498                           ; BSR set to: 0
  9499  0025FA  0012               	return		;funcret
  9500  0025FC  FFFF               	dw	65535	; errata NOP
  9501  0025FE                     __end_of_comunicarTeste:
  9502                           	opt stack 0
  9503                           tblptru	equ	0xFF8
  9504                           tblptrh	equ	0xFF7
  9505                           tblptrl	equ	0xFF6
  9506                           tablat	equ	0xFF5
  9507                           prodh	equ	0xFF4
  9508                           prodl	equ	0xFF3
  9509                           postinc0	equ	0xFEE
  9510                           wreg	equ	0xFE8
  9511                           postdec1	equ	0xFE5
  9512                           fsr1l	equ	0xFE1
  9513                           indf2	equ	0xFDF
  9514                           postinc2	equ	0xFDE
  9515                           fsr2h	equ	0xFDA
  9516                           fsr2l	equ	0xFD9
  9517                           status	equ	0xFD8
  9518                           
  9519 ;; *************** function _configuraRegistradores *****************
  9520 ;; Defined at:
  9521 ;;		line 7 in file "registradores.h"
  9522 ;; Parameters:    Size  Location     Type
  9523 ;;		None
  9524 ;; Auto vars:     Size  Location     Type
  9525 ;;		None
  9526 ;; Return value:  Size  Location     Type
  9527 ;;                  1    wreg      void 
  9528 ;; Registers used:
  9529 ;;		wreg, status,2
  9530 ;; Tracked objects:
  9531 ;;		On entry : 0/0
  9532 ;;		On exit  : 0/0
  9533 ;;		Unchanged: 0/0
  9534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9535 ;;      Params:         0       0       0       0       0       0       0
  9536 ;;      Locals:         0       0       0       0       0       0       0
  9537 ;;      Temps:          0       0       0       0       0       0       0
  9538 ;;      Totals:         0       0       0       0       0       0       0
  9539 ;;Total ram usage:        0 bytes
  9540 ;; Hardware stack levels used:    1
  9541 ;; Hardware stack levels required when called:    6
  9542 ;; This function calls:
  9543 ;;		Nothing
  9544 ;; This function is called by:
  9545 ;;		_main
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           	psect	text23
  9550  007518                     __ptext23:
  9551                           	opt stack 0
  9552  007518                     _configuraRegistradores:
  9553                           	opt stack 0
  9554  007518  FFFF               	dw	65535	; assembler added errata NOP
  9555                           
  9556                           ;registradores.h: 9: ADCON0 = 0b10000001;
  9557                           
  9558                           ;incstack = 0
  9559  00751A  0E81               	movlw	129
  9560  00751C  6EC2               	movwf	4034,c	;volatile
  9561                           
  9562                           ;registradores.h: 10: ADCON1 = 0b11001110;
  9563  00751E  0ECE               	movlw	206
  9564  007520  6EC1               	movwf	4033,c	;volatile
  9565                           
  9566                           ;registradores.h: 11: TRISAbits.RA0 = 1;
  9567  007522  8092               	bsf	3986,0,c	;volatile
  9568                           
  9569                           ;registradores.h: 12: PORTAbits.AN0 = 0;
  9570  007524  9080               	bcf	3968,0,c	;volatile
  9571                           
  9572                           ;registradores.h: 15: T0CON = 0x81;
  9573  007526  0E81               	movlw	129
  9574  007528  6ED5               	movwf	4053,c	;volatile
  9575                           
  9576                           ;registradores.h: 16: INTCON = 0xE4;
  9577  00752A  0EE4               	movlw	228
  9578  00752C  6EF2               	movwf	intcon,c	;volatile
  9579                           
  9580                           ;registradores.h: 19: TRISDbits.RD5 = 0;
  9581  00752E  9A95               	bcf	3989,5,c	;volatile
  9582                           
  9583                           ;registradores.h: 20: TRISDbits.RD4 = 0;
  9584  007530  9895               	bcf	3989,4,c	;volatile
  9585                           
  9586                           ;registradores.h: 21: TRISDbits.RD3 = 0;
  9587  007532  9695               	bcf	3989,3,c	;volatile
  9588                           
  9589                           ;registradores.h: 22: TRISDbits.RD2 = 0;
  9590  007534  9495               	bcf	3989,2,c	;volatile
  9591                           
  9592                           ;registradores.h: 23: TRISDbits.RD1 = 0;
  9593  007536  9295               	bcf	3989,1,c	;volatile
  9594                           
  9595                           ;registradores.h: 24: TRISDbits.RD0 = 0;
  9596  007538  9095               	bcf	3989,0,c	;volatile
  9597                           
  9598                           ;registradores.h: 27: TRISCbits.TRISC6 = 0;
  9599  00753A  9C94               	bcf	3988,6,c	;volatile
  9600                           
  9601                           ;registradores.h: 28: TRISCbits.TRISC7 = 1;
  9602  00753C  8E94               	bsf	3988,7,c	;volatile
  9603                           
  9604                           ;registradores.h: 29: TXSTAbits.TXEN = 1;
  9605  00753E  8AAC               	bsf	4012,5,c	;volatile
  9606                           
  9607                           ;registradores.h: 30: TXSTAbits.BRGH = 1;
  9608  007540  84AC               	bsf	4012,2,c	;volatile
  9609                           
  9610                           ;registradores.h: 31: TXSTAbits.SYNC = 0;
  9611  007542  98AC               	bcf	4012,4,c	;volatile
  9612                           
  9613                           ;registradores.h: 32: RCSTAbits.SPEN = 1;
  9614  007544  8EAB               	bsf	4011,7,c	;volatile
  9615                           
  9616                           ;registradores.h: 33: RCSTAbits.CREN = 1;
  9617  007546  88AB               	bsf	4011,4,c	;volatile
  9618                           
  9619                           ;registradores.h: 36: SPBRG = 25;
  9620  007548  0E19               	movlw	25
  9621  00754A  6EAF               	movwf	4015,c	;volatile
  9622                           
  9623                           ;registradores.h: 37: INTCONbits.GIE = 1;
  9624  00754C  8EF2               	bsf	intcon,7,c	;volatile
  9625                           
  9626                           ;registradores.h: 38: INTCONbits.PEIE = 1;
  9627  00754E  8CF2               	bsf	intcon,6,c	;volatile
  9628                           
  9629                           ;registradores.h: 39: PIR1bits.RCIF = 0;
  9630  007550  9A9E               	bcf	3998,5,c	;volatile
  9631                           
  9632                           ;registradores.h: 40: PIE1bits.RCIE = 1;
  9633  007552  8A9D               	bsf	3997,5,c	;volatile
  9634                           
  9635                           ;registradores.h: 43: INTCONbits.RBIE = 0;
  9636  007554  96F2               	bcf	intcon,3,c	;volatile
  9637                           
  9638                           ;registradores.h: 44: TRISAbits.RA2 = 1;
  9639  007556  8492               	bsf	3986,2,c	;volatile
  9640                           
  9641                           ;registradores.h: 45: TRISAbits.RA5 = 1;
  9642  007558  8A92               	bsf	3986,5,c	;volatile
  9643                           
  9644                           ;registradores.h: 46: TRISCbits.RC0 = 1;
  9645  00755A  8094               	bsf	3988,0,c	;volatile
  9646                           
  9647                           ;registradores.h: 49: TRISBbits.RB2 = 1;
  9648  00755C  8493               	bsf	3987,2,c	;volatile
  9649                           
  9650                           ;registradores.h: 50: TRISBbits.RB3 = 1;
  9651  00755E  8693               	bsf	3987,3,c	;volatile
  9652                           
  9653                           ;registradores.h: 51: TRISBbits.RB4 = 1;
  9654  007560  8893               	bsf	3987,4,c	;volatile
  9655                           
  9656                           ;registradores.h: 52: TRISBbits.RB5 = 1;
  9657  007562  8A93               	bsf	3987,5,c	;volatile
  9658                           
  9659                           ;registradores.h: 55: TRISEbits.RE0 = 0;
  9660  007564  9096               	bcf	3990,0,c	;volatile
  9661                           
  9662                           ;registradores.h: 56: TRISEbits.RE1 = 0;
  9663  007566  9296               	bcf	3990,1,c	;volatile
  9664                           
  9665                           ;registradores.h: 57: TRISEbits.RE2 = 0;
  9666  007568  9496               	bcf	3990,2,c	;volatile
  9667  00756A  0012               	return		;funcret
  9668  00756C  FFFF               	dw	65535	; errata NOP
  9669  00756E                     __end_of_configuraRegistradores:
  9670                           	opt stack 0
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           prodh	equ	0xFF4
  9676                           prodl	equ	0xFF3
  9677                           intcon	equ	0xFF2
  9678                           postinc0	equ	0xFEE
  9679                           wreg	equ	0xFE8
  9680                           postdec1	equ	0xFE5
  9681                           fsr1l	equ	0xFE1
  9682                           indf2	equ	0xFDF
  9683                           postinc2	equ	0xFDE
  9684                           fsr2h	equ	0xFDA
  9685                           fsr2l	equ	0xFD9
  9686                           status	equ	0xFD8
  9687                           
  9688 ;; *************** function _atualizarLCD *****************
  9689 ;; Defined at:
  9690 ;;		line 132 in file "lcd.h"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;  line1           2    8[BANK0 ] PTR unsigned char 
  9693 ;;		 -> line1(21), 
  9694 ;;  line2           2   10[BANK0 ] PTR unsigned char 
  9695 ;;		 -> line2(21), 
  9696 ;;  line3           2   12[BANK0 ] PTR unsigned char 
  9697 ;;		 -> line3(21), 
  9698 ;;  line4           2   14[BANK0 ] PTR unsigned char 
  9699 ;;		 -> line4(21), 
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;  i               1   16[BANK0 ] unsigned char 
  9702 ;; Return value:  Size  Location     Type
  9703 ;;                  1    wreg      void 
  9704 ;; Registers used:
  9705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9706 ;; Tracked objects:
  9707 ;;		On entry : 0/0
  9708 ;;		On exit  : 0/0
  9709 ;;		Unchanged: 0/0
  9710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9711 ;;      Params:         0       8       0       0       0       0       0
  9712 ;;      Locals:         0       1       0       0       0       0       0
  9713 ;;      Temps:          0       0       0       0       0       0       0
  9714 ;;      Totals:         0       9       0       0       0       0       0
  9715 ;;Total ram usage:        9 bytes
  9716 ;; Hardware stack levels used:    1
  9717 ;; Hardware stack levels required when called:    9
  9718 ;; This function calls:
  9719 ;;		_Lcd_Set_Cursor
  9720 ;;		_Lcd_Write_String
  9721 ;; This function is called by:
  9722 ;;		_main
  9723 ;; This function uses a non-reentrant model
  9724 ;;
  9725                           
  9726                           	psect	text24
  9727  003986                     __ptext24:
  9728                           	opt stack 0
  9729  003986                     _atualizarLCD:
  9730                           	opt stack 0
  9731  003986  FFFF               	dw	65535	; assembler added errata NOP
  9732                           
  9733                           ;lcd.h: 134: Lcd_Set_Cursor(1, 1);
  9734                           
  9735                           ;incstack = 0
  9736  003988  0E01               	movlw	1
  9737  00398A  0100               	movlb	0	; () banked
  9738  00398C  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9739  00398E  0E01               	movlw	1
  9740  003990  EC8F  F01D         	call	_Lcd_Set_Cursor
  9741                           
  9742                           ;lcd.h: 135: Lcd_Write_String(line1);
  9743  003994  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
  9744  003998  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
  9745  00399C  EC6B  F038         	call	_Lcd_Write_String	;wreg free
  9746                           
  9747                           ;lcd.h: 136: Lcd_Set_Cursor(2, 1);
  9748  0039A0  0E01               	movlw	1
  9749  0039A2  0100               	movlb	0	; () banked
  9750  0039A4  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9751  0039A6  0E02               	movlw	2
  9752  0039A8  EC8F  F01D         	call	_Lcd_Set_Cursor
  9753                           
  9754                           ;lcd.h: 137: Lcd_Write_String(line2);
  9755  0039AC  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
  9756  0039B0  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
  9757  0039B4  EC6B  F038         	call	_Lcd_Write_String	;wreg free
  9758                           
  9759                           ;lcd.h: 138: Lcd_Set_Cursor(3, 0);
  9760  0039B8  0E00               	movlw	0
  9761  0039BA  0100               	movlb	0	; () banked
  9762  0039BC  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9763  0039BE  0E03               	movlw	3
  9764  0039C0  EC8F  F01D         	call	_Lcd_Set_Cursor
  9765                           
  9766                           ;lcd.h: 139: Lcd_Write_String(line3);
  9767  0039C4  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
  9768  0039C8  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
  9769  0039CC  EC6B  F038         	call	_Lcd_Write_String	;wreg free
  9770                           
  9771                           ;lcd.h: 140: Lcd_Set_Cursor(4, 0);
  9772  0039D0  0E00               	movlw	0
  9773  0039D2  0100               	movlb	0	; () banked
  9774  0039D4  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9775  0039D6  0E04               	movlw	4
  9776  0039D8  EC8F  F01D         	call	_Lcd_Set_Cursor
  9777                           
  9778                           ;lcd.h: 141: Lcd_Write_String(line4);
  9779  0039DC  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
  9780  0039E0  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
  9781  0039E4  EC6B  F038         	call	_Lcd_Write_String	;wreg free
  9782                           
  9783                           ;lcd.h: 143: char i = 0;
  9784  0039E8  0E00               	movlw	0
  9785  0039EA  0100               	movlb	0	; () banked
  9786  0039EC  6F90               	movwf	atualizarLCD@i& (0+255),b
  9787                           
  9788                           ; BSR set to: 0
  9789                           ;lcd.h: 144: for (i = 0; i < 20; i++) {
  9790  0039EE  0E00               	movlw	0
  9791  0039F0  6F90               	movwf	atualizarLCD@i& (0+255),b
  9792  0039F2                     l6960:
  9793  0039F2  FFFF               	dw	65535	; assembler added errata NOP
  9794                           
  9795                           ; BSR set to: 0
  9796  0039F4  0E13               	movlw	19
  9797  0039F6  6590               	cpfsgt	atualizarLCD@i& (0+255),b
  9798  0039F8  D001               	goto	l646
  9799  0039FA  D02B               	goto	u7710
  9800  0039FC                     l646:
  9801  0039FC  FFFF               	dw	65535	; assembler added errata NOP
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;lcd.h: 145: line1[i] = ' ';
  9805                           
  9806                           ; BSR set to: 0
  9807  0039FE  5190               	movf	atualizarLCD@i& (0+255),w,b
  9808  003A00  0D01               	mullw	1
  9809  003A02  50F3               	movf	prodl,w,c
  9810  003A04  2588               	addwf	atualizarLCD@line1& (0+255),w,b
  9811  003A06  6ED9               	movwf	fsr2l,c
  9812  003A08  50F4               	movf	prodh,w,c
  9813  003A0A  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
  9814  003A0C  6EDA               	movwf	fsr2h,c
  9815  003A0E  0E20               	movlw	32
  9816  003A10  6EDF               	movwf	indf2,c
  9817                           
  9818                           ;lcd.h: 146: line2[i] = ' ';
  9819  003A12  5190               	movf	atualizarLCD@i& (0+255),w,b
  9820  003A14  0D01               	mullw	1
  9821  003A16  50F3               	movf	prodl,w,c
  9822  003A18  258A               	addwf	atualizarLCD@line2& (0+255),w,b
  9823  003A1A  6ED9               	movwf	fsr2l,c
  9824  003A1C  50F4               	movf	prodh,w,c
  9825  003A1E  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
  9826  003A20  6EDA               	movwf	fsr2h,c
  9827  003A22  0E20               	movlw	32
  9828  003A24  6EDF               	movwf	indf2,c
  9829                           
  9830                           ;lcd.h: 147: line3[i] = ' ';
  9831  003A26  5190               	movf	atualizarLCD@i& (0+255),w,b
  9832  003A28  0D01               	mullw	1
  9833  003A2A  50F3               	movf	prodl,w,c
  9834  003A2C  258C               	addwf	atualizarLCD@line3& (0+255),w,b
  9835  003A2E  6ED9               	movwf	fsr2l,c
  9836  003A30  50F4               	movf	prodh,w,c
  9837  003A32  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
  9838  003A34  6EDA               	movwf	fsr2h,c
  9839  003A36  0E20               	movlw	32
  9840  003A38  6EDF               	movwf	indf2,c
  9841                           
  9842                           ;lcd.h: 148: line4[i] = ' ';
  9843  003A3A  5190               	movf	atualizarLCD@i& (0+255),w,b
  9844  003A3C  0D01               	mullw	1
  9845  003A3E  50F3               	movf	prodl,w,c
  9846  003A40  258E               	addwf	atualizarLCD@line4& (0+255),w,b
  9847  003A42  6ED9               	movwf	fsr2l,c
  9848  003A44  50F4               	movf	prodh,w,c
  9849  003A46  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
  9850  003A48  6EDA               	movwf	fsr2h,c
  9851  003A4A  0E20               	movlw	32
  9852  003A4C  6EDF               	movwf	indf2,c
  9853                           
  9854                           ; BSR set to: 0
  9855  003A4E  2B90               	incf	atualizarLCD@i& (0+255),f,b
  9856  003A50  D7D0               	goto	l6960
  9857  003A52                     u7710:
  9858  003A52  FFFF               	dw	65535	; assembler added errata NOP
  9859                           
  9860                           ; BSR set to: 0
  9861                           
  9862                           ; BSR set to: 0
  9863  003A54  0012               	return		;funcret
  9864  003A56  FFFF               	dw	65535	; errata NOP
  9865  003A58                     __end_of_atualizarLCD:
  9866                           	opt stack 0
  9867                           tblptru	equ	0xFF8
  9868                           tblptrh	equ	0xFF7
  9869                           tblptrl	equ	0xFF6
  9870                           tablat	equ	0xFF5
  9871                           prodh	equ	0xFF4
  9872                           prodl	equ	0xFF3
  9873                           intcon	equ	0xFF2
  9874                           postinc0	equ	0xFEE
  9875                           wreg	equ	0xFE8
  9876                           postdec1	equ	0xFE5
  9877                           fsr1l	equ	0xFE1
  9878                           indf2	equ	0xFDF
  9879                           postinc2	equ	0xFDE
  9880                           fsr2h	equ	0xFDA
  9881                           fsr2l	equ	0xFD9
  9882                           status	equ	0xFD8
  9883                           
  9884 ;; *************** function _Lcd_Write_String *****************
  9885 ;; Defined at:
  9886 ;;		line 123 in file "lcd.h"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;  a               2    4[BANK0 ] PTR unsigned char 
  9889 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;  i               1    6[BANK0 ] unsigned char 
  9892 ;; Return value:  Size  Location     Type
  9893 ;;                  1    wreg      void 
  9894 ;; Registers used:
  9895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9896 ;; Tracked objects:
  9897 ;;		On entry : 0/0
  9898 ;;		On exit  : 0/0
  9899 ;;		Unchanged: 0/0
  9900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9901 ;;      Params:         0       2       0       0       0       0       0
  9902 ;;      Locals:         0       1       0       0       0       0       0
  9903 ;;      Temps:          0       0       0       0       0       0       0
  9904 ;;      Totals:         0       3       0       0       0       0       0
  9905 ;;Total ram usage:        3 bytes
  9906 ;; Hardware stack levels used:    1
  9907 ;; Hardware stack levels required when called:    8
  9908 ;; This function calls:
  9909 ;;		_Lcd_Write_Char
  9910 ;; This function is called by:
  9911 ;;		_atualizarLCD
  9912 ;; This function uses a non-reentrant model
  9913 ;;
  9914                           
  9915                           	psect	text25
  9916  0070D6                     __ptext25:
  9917                           	opt stack 0
  9918  0070D6                     _Lcd_Write_String:
  9919                           	opt stack 0
  9920  0070D6  FFFF               	dw	65535	; assembler added errata NOP
  9921                           
  9922                           ;lcd.h: 124: unsigned char i = 0;
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;incstack = 0
  9926  0070D8  0E00               	movlw	0
  9927  0070DA  0100               	movlb	0	; () banked
  9928  0070DC  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9929                           
  9930                           ;lcd.h: 126: for (i = 0; i < 20; i++) {
  9931  0070DE  0E00               	movlw	0
  9932  0070E0  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9933  0070E2                     l6010:
  9934  0070E2  FFFF               	dw	65535	; assembler added errata NOP
  9935                           
  9936                           ; BSR set to: 0
  9937  0070E4  0E13               	movlw	19
  9938  0070E6  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
  9939  0070E8  D001               	goto	l641
  9940  0070EA  D00F               	goto	u6280
  9941  0070EC                     l641:
  9942  0070EC  FFFF               	dw	65535	; assembler added errata NOP
  9943                           
  9944                           ; BSR set to: 0
  9945                           ;lcd.h: 127: Lcd_Write_Char(a[i]);
  9946                           
  9947                           ; BSR set to: 0
  9948  0070EE  5186               	movf	Lcd_Write_String@i& (0+255),w,b
  9949  0070F0  0D01               	mullw	1
  9950  0070F2  50F3               	movf	prodl,w,c
  9951  0070F4  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
  9952  0070F6  6ED9               	movwf	fsr2l,c
  9953  0070F8  50F4               	movf	prodh,w,c
  9954  0070FA  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  9955  0070FC  6EDA               	movwf	fsr2h,c
  9956  0070FE  50DF               	movf	indf2,w,c
  9957  007100  EC21  F039         	call	_Lcd_Write_Char
  9958  007104  0100               	movlb	0	; () banked
  9959  007106  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
  9960  007108  D7EC               	goto	l6010
  9961  00710A                     u6280:
  9962  00710A  FFFF               	dw	65535	; assembler added errata NOP
  9963                           
  9964                           ; BSR set to: 0
  9965                           
  9966                           ; BSR set to: 0
  9967  00710C  0012               	return		;funcret
  9968  00710E  FFFF               	dw	65535	; errata NOP
  9969  007110                     __end_of_Lcd_Write_String:
  9970                           	opt stack 0
  9971                           tblptru	equ	0xFF8
  9972                           tblptrh	equ	0xFF7
  9973                           tblptrl	equ	0xFF6
  9974                           tablat	equ	0xFF5
  9975                           prodh	equ	0xFF4
  9976                           prodl	equ	0xFF3
  9977                           intcon	equ	0xFF2
  9978                           postinc0	equ	0xFEE
  9979                           wreg	equ	0xFE8
  9980                           postdec1	equ	0xFE5
  9981                           fsr1l	equ	0xFE1
  9982                           indf2	equ	0xFDF
  9983                           postinc2	equ	0xFDE
  9984                           fsr2h	equ	0xFDA
  9985                           fsr2l	equ	0xFD9
  9986                           status	equ	0xFD8
  9987                           
  9988 ;; *************** function _Lcd_Write_Char *****************
  9989 ;; Defined at:
  9990 ;;		line 108 in file "lcd.h"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;  a               1    wreg     unsigned char 
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;  a               1    3[BANK0 ] unsigned char 
  9995 ;;  y               1    2[BANK0 ] unsigned char 
  9996 ;;  tempp           1    1[BANK0 ] unsigned char 
  9997 ;; Return value:  Size  Location     Type
  9998 ;;                  1    wreg      void 
  9999 ;; Registers used:
 10000 ;;		wreg, status,2, status,0, cstack
 10001 ;; Tracked objects:
 10002 ;;		On entry : 0/0
 10003 ;;		On exit  : 0/0
 10004 ;;		Unchanged: 0/0
 10005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10006 ;;      Params:         0       0       0       0       0       0       0
 10007 ;;      Locals:         0       3       0       0       0       0       0
 10008 ;;      Temps:          0       0       0       0       0       0       0
 10009 ;;      Totals:         0       3       0       0       0       0       0
 10010 ;;Total ram usage:        3 bytes
 10011 ;; Hardware stack levels used:    1
 10012 ;; Hardware stack levels required when called:    7
 10013 ;; This function calls:
 10014 ;;		_Lcd_Port
 10015 ;; This function is called by:
 10016 ;;		_Lcd_Write_String
 10017 ;;		_criarCaracteresCGRAM
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           	psect	text26
 10022  007242                     __ptext26:
 10023                           	opt stack 0
 10024  007242                     _Lcd_Write_Char:
 10025                           	opt stack 0
 10026  007242  FFFF               	dw	65535	; assembler added errata NOP
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;incstack = 0
 10030                           ;Lcd_Write_Char@a stored from wreg
 10031  007244  0100               	movlb	0	; () banked
 10032  007246  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
 10033                           
 10034                           ;lcd.h: 109: char tempp, y;
 10035                           ;lcd.h: 110: tempp = a & 0x0F;
 10036  007248  0100               	movlb	0	; () banked
 10037  00724A  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10038  00724C  0B0F               	andlw	15
 10039  00724E  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
 10040                           
 10041                           ;lcd.h: 111: y = a & 0xF0;
 10042  007250  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10043  007252  0BF0               	andlw	240
 10044  007254  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;lcd.h: 112: PORTDbits.RD1 = 1;
 10048  007256  8283               	bsf	3971,1,c	;volatile
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;lcd.h: 113: Lcd_Port(y >> 4);
 10052  007258  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
 10053  00725A  0B0F               	andlw	15
 10054  00725C  EC84  F039         	call	_Lcd_Port
 10055                           
 10056                           ;lcd.h: 114: PORTDbits.RD0 = 1;
 10057  007260  8083               	bsf	3971,0,c	;volatile
 10058                           
 10059                           ;lcd.h: 115: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10060  007262  0E4B               	movlw	75
 10061  007264                     u9027:
 10062  007264  FFFF               	dw	65535	; errata NOP
 10063  007266  2EE8               	decfsz	wreg,f,c
 10064  007268  D7FD               	bra	u9027
 10065                           
 10066                           ;lcd.h: 116: PORTDbits.RD0 = 0;
 10067  00726A  9083               	bcf	3971,0,c	;volatile
 10068                           
 10069                           ;lcd.h: 117: Lcd_Port(tempp);
 10070  00726C  0100               	movlb	0	; () banked
 10071  00726E  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
 10072  007270  EC84  F039         	call	_Lcd_Port
 10073                           
 10074                           ;lcd.h: 118: PORTDbits.RD0 = 1;
 10075  007274  8083               	bsf	3971,0,c	;volatile
 10076                           
 10077                           ;lcd.h: 119: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10078  007276  0E4B               	movlw	75
 10079  007278                     u9037:
 10080  007278  FFFF               	dw	65535	; errata NOP
 10081  00727A  2EE8               	decfsz	wreg,f,c
 10082  00727C  D7FD               	bra	u9037
 10083                           
 10084                           ;lcd.h: 120: PORTDbits.RD0 = 0;
 10085  00727E  9083               	bcf	3971,0,c	;volatile
 10086  007280  0012               	return		;funcret
 10087  007282  FFFF               	dw	65535	; errata NOP
 10088  007284                     __end_of_Lcd_Write_Char:
 10089                           	opt stack 0
 10090                           tblptru	equ	0xFF8
 10091                           tblptrh	equ	0xFF7
 10092                           tblptrl	equ	0xFF6
 10093                           tablat	equ	0xFF5
 10094                           prodh	equ	0xFF4
 10095                           prodl	equ	0xFF3
 10096                           intcon	equ	0xFF2
 10097                           postinc0	equ	0xFEE
 10098                           wreg	equ	0xFE8
 10099                           postdec1	equ	0xFE5
 10100                           fsr1l	equ	0xFE1
 10101                           indf2	equ	0xFDF
 10102                           postinc2	equ	0xFDE
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8
 10106                           
 10107 ;; *************** function _Lcd_Set_Cursor *****************
 10108 ;; Defined at:
 10109 ;;		line 73 in file "lcd.h"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;  a               1    wreg     unsigned char 
 10112 ;;  b               1    3[BANK0 ] unsigned char 
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  a               1    4[BANK0 ] unsigned char 
 10115 ;;  temp            1    7[BANK0 ] unsigned char 
 10116 ;;  y               1    6[BANK0 ] unsigned char 
 10117 ;;  z               1    5[BANK0 ] unsigned char 
 10118 ;; Return value:  Size  Location     Type
 10119 ;;                  1    wreg      void 
 10120 ;; Registers used:
 10121 ;;		wreg, status,2, status,0, cstack
 10122 ;; Tracked objects:
 10123 ;;		On entry : 0/0
 10124 ;;		On exit  : 0/0
 10125 ;;		Unchanged: 0/0
 10126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10127 ;;      Params:         0       1       0       0       0       0       0
 10128 ;;      Locals:         0       4       0       0       0       0       0
 10129 ;;      Temps:          0       0       0       0       0       0       0
 10130 ;;      Totals:         0       5       0       0       0       0       0
 10131 ;;Total ram usage:        5 bytes
 10132 ;; Hardware stack levels used:    1
 10133 ;; Hardware stack levels required when called:    8
 10134 ;; This function calls:
 10135 ;;		_Lcd_Cmd
 10136 ;; This function is called by:
 10137 ;;		_atualizarLCD
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           	psect	text27
 10142  003B1E                     __ptext27:
 10143                           	opt stack 0
 10144  003B1E                     _Lcd_Set_Cursor:
 10145                           	opt stack 0
 10146  003B1E  FFFF               	dw	65535	; assembler added errata NOP
 10147                           
 10148                           ;incstack = 0
 10149                           ;Lcd_Set_Cursor@a stored from wreg
 10150  003B20  0100               	movlb	0	; () banked
 10151  003B22  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
 10152                           
 10153                           ;lcd.h: 74: char temp, z, y;
 10154                           ;lcd.h: 75: switch (a) {
 10155  003B24  D04C               	goto	l628
 10156  003B26  FFFF               	dw	65535	; assembler added errata NOP
 10157                           
 10158                           ;lcd.h: 77: temp = 0x80 + b - 1;
 10159  003B28  0100               	movlb	0	; () banked
 10160  003B2A  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10161  003B2C  0F7F               	addlw	127
 10162  003B2E  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10163                           
 10164                           ;lcd.h: 78: z = temp >> 4;
 10165  003B30  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10166  003B32  0B0F               	andlw	15
 10167  003B34  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10168                           
 10169                           ;lcd.h: 79: y = temp & 0x0F;
 10170  003B36  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10171  003B38  0B0F               	andlw	15
 10172  003B3A  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10173                           
 10174                           ; BSR set to: 0
 10175                           ;lcd.h: 80: Lcd_Cmd(z);
 10176  003B3C  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10177  003B3E  EC2B  F037         	call	_Lcd_Cmd
 10178                           
 10179                           ;lcd.h: 81: Lcd_Cmd(y);
 10180  003B42  0100               	movlb	0	; () banked
 10181  003B44  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10182  003B46  EC2B  F037         	call	_Lcd_Cmd
 10183                           
 10184                           ;lcd.h: 82: break;
 10185  003B4A  D048               	goto	l630
 10186  003B4C  FFFF               	dw	65535	; assembler added errata NOP
 10187                           
 10188                           ;lcd.h: 84: temp = 0xC0 + b - 1;
 10189  003B4E  0100               	movlb	0	; () banked
 10190  003B50  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10191  003B52  0FBF               	addlw	191
 10192  003B54  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10193                           
 10194                           ;lcd.h: 85: z = temp >> 4;
 10195  003B56  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10196  003B58  0B0F               	andlw	15
 10197  003B5A  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10198                           
 10199                           ;lcd.h: 86: y = temp & 0x0F;
 10200  003B5C  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10201  003B5E  0B0F               	andlw	15
 10202  003B60  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;lcd.h: 87: Lcd_Cmd(z);
 10206  003B62  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10207  003B64  EC2B  F037         	call	_Lcd_Cmd
 10208                           
 10209                           ;lcd.h: 88: Lcd_Cmd(y);
 10210  003B68  0100               	movlb	0	; () banked
 10211  003B6A  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10212  003B6C  EC2B  F037         	call	_Lcd_Cmd
 10213                           
 10214                           ;lcd.h: 89: break;
 10215  003B70  D035               	goto	l630
 10216  003B72  FFFF               	dw	65535	; assembler added errata NOP
 10217                           
 10218                           ;lcd.h: 91: temp = 0x94 + b;
 10219  003B74  0100               	movlb	0	; () banked
 10220  003B76  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10221  003B78  0F94               	addlw	148
 10222  003B7A  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10223                           
 10224                           ;lcd.h: 92: z = temp >> 4;
 10225  003B7C  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10226  003B7E  0B0F               	andlw	15
 10227  003B80  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10228                           
 10229                           ;lcd.h: 93: y = temp & 0x0F;
 10230  003B82  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10231  003B84  0B0F               	andlw	15
 10232  003B86  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;lcd.h: 94: Lcd_Cmd(z);
 10236  003B88  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10237  003B8A  EC2B  F037         	call	_Lcd_Cmd
 10238                           
 10239                           ;lcd.h: 95: Lcd_Cmd(y);
 10240  003B8E  0100               	movlb	0	; () banked
 10241  003B90  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10242  003B92  EC2B  F037         	call	_Lcd_Cmd
 10243                           
 10244                           ;lcd.h: 96: break;
 10245  003B96  D022               	goto	l630
 10246  003B98  FFFF               	dw	65535	; assembler added errata NOP
 10247                           
 10248                           ;lcd.h: 98: temp = 0xD4 + b;
 10249  003B9A  0100               	movlb	0	; () banked
 10250  003B9C  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10251  003B9E  0FD4               	addlw	212
 10252  003BA0  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10253                           
 10254                           ;lcd.h: 99: z = temp >> 4;
 10255  003BA2  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10256  003BA4  0B0F               	andlw	15
 10257  003BA6  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10258                           
 10259                           ;lcd.h: 100: y = temp & 0x0F;
 10260  003BA8  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10261  003BAA  0B0F               	andlw	15
 10262  003BAC  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10263                           
 10264                           ; BSR set to: 0
 10265                           ;lcd.h: 101: Lcd_Cmd(z);
 10266  003BAE  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10267  003BB0  EC2B  F037         	call	_Lcd_Cmd
 10268                           
 10269                           ;lcd.h: 102: Lcd_Cmd(y);
 10270  003BB4  0100               	movlb	0	; () banked
 10271  003BB6  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10272  003BB8  EC2B  F037         	call	_Lcd_Cmd
 10273                           
 10274                           ;lcd.h: 105: }
 10275                           
 10276                           ;lcd.h: 104: default:return;
 10277                           
 10278                           ;lcd.h: 103: break;
 10279  003BBC  D00F               	goto	l630
 10280  003BBE                     l628:
 10281  003BBE  FFFF               	dw	65535	; assembler added errata NOP
 10282  003BC0  0100               	movlb	0	; () banked
 10283  003BC2  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 10284                           
 10285                           ; Switch size 1, requested type "space"
 10286                           ; Number of cases is 4, Range of values is 1 to 4
 10287                           ; switch strategies available:
 10288                           ; Name         Instructions Cycles
 10289                           ; simple_byte           13     7 (average)
 10290                           ;	Chosen strategy is simple_byte
 10291  003BC4  0A01               	xorlw	1	; case 1
 10292  003BC6  B4D8               	btfsc	status,2,c
 10293  003BC8  D7AE               	goto	l629
 10294  003BCA  0A03               	xorlw	3	; case 2
 10295  003BCC  B4D8               	btfsc	status,2,c
 10296  003BCE  D7BE               	goto	l631
 10297  003BD0  0A01               	xorlw	1	; case 3
 10298  003BD2  B4D8               	btfsc	status,2,c
 10299  003BD4  D7CE               	goto	l632
 10300  003BD6  0A07               	xorlw	7	; case 4
 10301  003BD8  B4D8               	btfsc	status,2,c
 10302  003BDA  D7DE               	goto	l633
 10303  003BDC                     l630:
 10304  003BDC  FFFF               	dw	65535	; assembler added errata NOP
 10305                           
 10306                           ; BSR set to: 0
 10307  003BDE  0012               	return		;funcret
 10308  003BE0  FFFF               	dw	65535	; errata NOP
 10309  003BE2                     __end_of_Lcd_Set_Cursor:
 10310                           	opt stack 0
 10311                           tblptru	equ	0xFF8
 10312                           tblptrh	equ	0xFF7
 10313                           tblptrl	equ	0xFF6
 10314                           tablat	equ	0xFF5
 10315                           prodh	equ	0xFF4
 10316                           prodl	equ	0xFF3
 10317                           intcon	equ	0xFF2
 10318                           postinc0	equ	0xFEE
 10319                           wreg	equ	0xFE8
 10320                           postdec1	equ	0xFE5
 10321                           fsr1l	equ	0xFE1
 10322                           indf2	equ	0xFDF
 10323                           postinc2	equ	0xFDE
 10324                           fsr2h	equ	0xFDA
 10325                           fsr2l	equ	0xFD9
 10326                           status	equ	0xFD8
 10327                           
 10328 ;; *************** function _ajusteSP_Bombas *****************
 10329 ;; Defined at:
 10330 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 10331 ;; Parameters:    Size  Location     Type
 10332 ;;		None
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;		None
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  1    wreg      void 
 10337 ;; Registers used:
 10338 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10344 ;;      Params:         0       0       0       0       0       0       0
 10345 ;;      Locals:         0       2       0       0       0       0       0
 10346 ;;      Temps:          0       0       0       0       0       0       0
 10347 ;;      Totals:         0       2       0       0       0       0       0
 10348 ;;Total ram usage:        2 bytes
 10349 ;; Hardware stack levels used:    1
 10350 ;; Hardware stack levels required when called:   10
 10351 ;; This function calls:
 10352 ;;		_blink
 10353 ;;		_btPress
 10354 ;;		_intToFloatStr
 10355 ;;		_sprintf
 10356 ;;		_writeEEPROM_ext
 10357 ;; This function is called by:
 10358 ;;		_main
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           	psect	text28
 10363  00190E                     __ptext28:
 10364                           	opt stack 0
 10365  00190E                     _ajusteSP_Bombas:
 10366                           	opt stack 0
 10367  00190E  FFFF               	dw	65535	; assembler added errata NOP
 10368                           
 10369                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10370                           
 10371                           ;incstack = 0
 10372  001910  0100               	movlb	0	; () banked
 10373  001912  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 10374  001914  EC04  F03D         	call	_intToFloatStr
 10375  001918  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2377
 10376  00191C  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2377+1
 10377                           
 10378                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10379  001920  0E7B               	movlw	low _line1
 10380  001922  0100               	movlb	0	; () banked
 10381  001924  6FA1               	movwf	sprintf@wh& (0+255),b
 10382  001926  0E01               	movlw	high _line1
 10383  001928  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10384  00192A  0E36               	movlw	low STR_102
 10385  00192C  6FA3               	movwf	sprintf@f& (0+255),b
 10386  00192E  0E7F               	movlw	high STR_102
 10387  001930  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10388  001932  C0C2  F0A5         	movff	_ajusteSP_Bombas$2377,?_sprintf+4
 10389  001936  C0C3  F0A6         	movff	_ajusteSP_Bombas$2377+1,?_sprintf+5
 10390  00193A  ECC9  F039         	call	_sprintf	;wreg free
 10391                           
 10392                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10393  00193E  0100               	movlb	0	; () banked
 10394  001940  51E2               	movf	_sp_jockey& (0+255),w,b
 10395  001942  EC04  F03D         	call	_intToFloatStr
 10396  001946  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2377
 10397  00194A  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2377+1
 10398                           
 10399                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10400  00194E  0E66               	movlw	low _line2
 10401  001950  0100               	movlb	0	; () banked
 10402  001952  6FA1               	movwf	sprintf@wh& (0+255),b
 10403  001954  0E01               	movlw	high _line2
 10404  001956  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10405  001958  0E41               	movlw	low STR_45
 10406  00195A  6FA3               	movwf	sprintf@f& (0+255),b
 10407  00195C  0E7F               	movlw	high STR_45
 10408  00195E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10409  001960  C0C2  F0A5         	movff	_ajusteSP_Bombas$2377,?_sprintf+4
 10410  001964  C0C3  F0A6         	movff	_ajusteSP_Bombas$2377+1,?_sprintf+5
 10411  001968  ECC9  F039         	call	_sprintf	;wreg free
 10412                           
 10413                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10414  00196C  0100               	movlb	0	; () banked
 10415  00196E  51E1               	movf	_sp_principal& (0+255),w,b
 10416  001970  EC04  F03D         	call	_intToFloatStr
 10417  001974  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2377
 10418  001978  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2377+1
 10419                           
 10420                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10421  00197C  0E51               	movlw	low _line3
 10422  00197E  0100               	movlb	0	; () banked
 10423  001980  6FA1               	movwf	sprintf@wh& (0+255),b
 10424  001982  0E01               	movlw	high _line3
 10425  001984  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10426  001986  0E58               	movlw	low STR_48
 10427  001988  6FA3               	movwf	sprintf@f& (0+255),b
 10428  00198A  0E7E               	movlw	high STR_48
 10429  00198C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10430  00198E  C0C2  F0A5         	movff	_ajusteSP_Bombas$2377,?_sprintf+4
 10431  001992  C0C3  F0A6         	movff	_ajusteSP_Bombas$2377+1,?_sprintf+5
 10432  001996  ECC9  F039         	call	_sprintf	;wreg free
 10433                           
 10434                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10435  00199A  0100               	movlb	0	; () banked
 10436  00199C  51E0               	movf	_sp_estacionaria& (0+255),w,b
 10437  00199E  EC04  F03D         	call	_intToFloatStr
 10438  0019A2  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2377
 10439  0019A6  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2377+1
 10440                           
 10441                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10442  0019AA  0E3C               	movlw	low _line4
 10443  0019AC  0100               	movlb	0	; () banked
 10444  0019AE  6FA1               	movwf	sprintf@wh& (0+255),b
 10445  0019B0  0E01               	movlw	high _line4
 10446  0019B2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10447  0019B4  0E67               	movlw	low STR_51
 10448  0019B6  6FA3               	movwf	sprintf@f& (0+255),b
 10449  0019B8  0E7E               	movlw	high STR_51
 10450  0019BA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10451  0019BC  C0C2  F0A5         	movff	_ajusteSP_Bombas$2377,?_sprintf+4
 10452  0019C0  C0C3  F0A6         	movff	_ajusteSP_Bombas$2377+1,?_sprintf+5
 10453  0019C4  ECC9  F039         	call	_sprintf	;wreg free
 10454                           
 10455                           ;tela_CONFIG_PRESSAO.h: 14: if (btPress(1)) {
 10456  0019C8  0E01               	movlw	1
 10457  0019CA  EC4A  F03B         	call	_btPress
 10458  0019CE  0900               	iorlw	0
 10459  0019D0  B4D8               	btfsc	status,2,c
 10460  0019D2  D019               	goto	l857
 10461                           
 10462                           ;tela_CONFIG_PRESSAO.h: 15: writeEEPROM_ext(0, sp_jockey);
 10463  0019D4  C0E2  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 10464  0019D8  0E00               	movlw	0
 10465  0019DA  ECA6  F039         	call	_writeEEPROM_ext
 10466                           
 10467                           ;tela_CONFIG_PRESSAO.h: 16: writeEEPROM_ext(1, sp_principal);
 10468  0019DE  C0E1  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 10469  0019E2  0E01               	movlw	1
 10470  0019E4  ECA6  F039         	call	_writeEEPROM_ext
 10471                           
 10472                           ;tela_CONFIG_PRESSAO.h: 17: writeEEPROM_ext(2, sp_estacionaria);
 10473  0019E8  C0E0  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 10474  0019EC  0E02               	movlw	2
 10475  0019EE  ECA6  F039         	call	_writeEEPROM_ext
 10476                           
 10477                           ;tela_CONFIG_PRESSAO.h: 18: writeEEPROM_ext(4, sp_pressao_rede);
 10478  0019F2  C0E3  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 10479  0019F6  0E04               	movlw	4
 10480  0019F8  ECA6  F039         	call	_writeEEPROM_ext
 10481                           
 10482                           ;tela_CONFIG_PRESSAO.h: 19: option_posi = 0;
 10483  0019FC  0E00               	movlw	0
 10484  0019FE  0100               	movlb	0	; () banked
 10485  001A00  6FDF               	movwf	_option_posi& (0+255),b
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;tela_CONFIG_PRESSAO.h: 20: menu_posi = _menu_posi;
 10489  001A02  C0DD  F0DE         	movff	__menu_posi,_menu_posi
 10490  001A06                     l857:
 10491  001A06  FFFF               	dw	65535	; assembler added errata NOP
 10492                           
 10493                           ;tela_CONFIG_PRESSAO.h: 21: }
 10494                           ;tela_CONFIG_PRESSAO.h: 23: if (btPress(4)) {
 10495                           
 10496                           ; BSR set to: 0
 10497  001A08  0E04               	movlw	4
 10498  001A0A  EC4A  F03B         	call	_btPress
 10499  001A0E  0900               	iorlw	0
 10500  001A10  B4D8               	btfsc	status,2,c
 10501  001A12  D097               	goto	l859
 10502                           
 10503                           ;tela_CONFIG_PRESSAO.h: 24: option_posi++;
 10504  001A14  0100               	movlb	0	; () banked
 10505  001A16  2BDF               	incf	_option_posi& (0+255),f,b
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;tela_CONFIG_PRESSAO.h: 25: }
 10509                           ;tela_CONFIG_PRESSAO.h: 27: switch (option_posi) {
 10510  001A18  D094               	goto	l859
 10511  001A1A  FFFF               	dw	65535	; assembler added errata NOP
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;tela_CONFIG_PRESSAO.h: 29: blink(line1, 8, 15);
 10515                           
 10516                           ; BSR set to: 0
 10517  001A1C  0E7B               	movlw	low _line1
 10518  001A1E  6F80               	movwf	blink@line& (0+255),b
 10519  001A20  0E01               	movlw	high _line1
 10520  001A22  6F81               	movwf	(blink@line+1)& (0+255),b
 10521  001A24  0E08               	movlw	8
 10522  001A26  6F82               	movwf	blink@start& (0+255),b
 10523  001A28  0E0F               	movlw	15
 10524  001A2A  6F83               	movwf	blink@end& (0+255),b
 10525  001A2C  ECE2  F038         	call	_blink	;wreg free
 10526                           
 10527                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 10528  001A30  0E03               	movlw	3
 10529  001A32  EC4A  F03B         	call	_btPress
 10530  001A36  0900               	iorlw	0
 10531  001A38  B4D8               	btfsc	status,2,c
 10532  001A3A  D002               	goto	l861
 10533                           
 10534                           ;tela_CONFIG_PRESSAO.h: 31: sp_pressao_rede++;
 10535  001A3C  0100               	movlb	0	; () banked
 10536  001A3E  2BE3               	incf	_sp_pressao_rede& (0+255),f,b
 10537  001A40                     l861:
 10538  001A40  FFFF               	dw	65535	; assembler added errata NOP
 10539                           
 10540                           ;tela_CONFIG_PRESSAO.h: 32: }
 10541                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 10542                           
 10543                           ; BSR set to: 0
 10544  001A42  0E02               	movlw	2
 10545  001A44  EC4A  F03B         	call	_btPress
 10546  001A48  0900               	iorlw	0
 10547  001A4A  B4D8               	btfsc	status,2,c
 10548  001A4C  D002               	goto	l862
 10549                           
 10550                           ;tela_CONFIG_PRESSAO.h: 34: sp_pressao_rede--;
 10551  001A4E  0100               	movlb	0	; () banked
 10552  001A50  07E3               	decf	_sp_pressao_rede& (0+255),f,b
 10553  001A52                     l862:
 10554  001A52  FFFF               	dw	65535	; assembler added errata NOP
 10555                           
 10556                           ;tela_CONFIG_PRESSAO.h: 35: }
 10557                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_pressao_rede > 99) {
 10558                           
 10559                           ; BSR set to: 0
 10560  001A54  0E63               	movlw	99
 10561  001A56  0100               	movlb	0	; () banked
 10562  001A58  65E3               	cpfsgt	_sp_pressao_rede& (0+255),b
 10563  001A5A  D083               	goto	l864
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;tela_CONFIG_PRESSAO.h: 37: sp_pressao_rede = 0;
 10567  001A5C  0E00               	movlw	0
 10568  001A5E  6FE3               	movwf	_sp_pressao_rede& (0+255),b
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;tela_CONFIG_PRESSAO.h: 38: }
 10572                           ;tela_CONFIG_PRESSAO.h: 39: break;
 10573  001A60  D080               	goto	l864
 10574  001A62  FFFF               	dw	65535	; assembler added errata NOP
 10575                           
 10576                           ; BSR set to: 0
 10577                           ;tela_CONFIG_PRESSAO.h: 41: blink(line2, 8, 15);
 10578                           
 10579                           ; BSR set to: 0
 10580  001A64  0E66               	movlw	low _line2
 10581  001A66  6F80               	movwf	blink@line& (0+255),b
 10582  001A68  0E01               	movlw	high _line2
 10583  001A6A  6F81               	movwf	(blink@line+1)& (0+255),b
 10584  001A6C  0E08               	movlw	8
 10585  001A6E  6F82               	movwf	blink@start& (0+255),b
 10586  001A70  0E0F               	movlw	15
 10587  001A72  6F83               	movwf	blink@end& (0+255),b
 10588  001A74  ECE2  F038         	call	_blink	;wreg free
 10589                           
 10590                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 10591  001A78  0E03               	movlw	3
 10592  001A7A  EC4A  F03B         	call	_btPress
 10593  001A7E  0900               	iorlw	0
 10594  001A80  B4D8               	btfsc	status,2,c
 10595  001A82  D002               	goto	l866
 10596                           
 10597                           ;tela_CONFIG_PRESSAO.h: 43: sp_jockey++;
 10598  001A84  0100               	movlb	0	; () banked
 10599  001A86  2BE2               	incf	_sp_jockey& (0+255),f,b
 10600  001A88                     l866:
 10601  001A88  FFFF               	dw	65535	; assembler added errata NOP
 10602                           
 10603                           ;tela_CONFIG_PRESSAO.h: 44: }
 10604                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 10605                           
 10606                           ; BSR set to: 0
 10607  001A8A  0E02               	movlw	2
 10608  001A8C  EC4A  F03B         	call	_btPress
 10609  001A90  0900               	iorlw	0
 10610  001A92  B4D8               	btfsc	status,2,c
 10611  001A94  D002               	goto	l867
 10612                           
 10613                           ;tela_CONFIG_PRESSAO.h: 46: sp_jockey--;
 10614  001A96  0100               	movlb	0	; () banked
 10615  001A98  07E2               	decf	_sp_jockey& (0+255),f,b
 10616  001A9A                     l867:
 10617  001A9A  FFFF               	dw	65535	; assembler added errata NOP
 10618                           
 10619                           ;tela_CONFIG_PRESSAO.h: 47: }
 10620                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_jockey > 99) {
 10621                           
 10622                           ; BSR set to: 0
 10623  001A9C  0E63               	movlw	99
 10624  001A9E  0100               	movlb	0	; () banked
 10625  001AA0  65E2               	cpfsgt	_sp_jockey& (0+255),b
 10626  001AA2  D05F               	goto	l864
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;tela_CONFIG_PRESSAO.h: 49: sp_jockey = 0;
 10630  001AA4  0E00               	movlw	0
 10631  001AA6  6FE2               	movwf	_sp_jockey& (0+255),b
 10632                           
 10633                           ; BSR set to: 0
 10634                           ;tela_CONFIG_PRESSAO.h: 50: }
 10635                           ;tela_CONFIG_PRESSAO.h: 51: break;
 10636  001AA8  D05C               	goto	l864
 10637  001AAA  FFFF               	dw	65535	; assembler added errata NOP
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;tela_CONFIG_PRESSAO.h: 53: blink(line3, 12, 18);
 10641                           
 10642                           ; BSR set to: 0
 10643  001AAC  0E51               	movlw	low _line3
 10644  001AAE  6F80               	movwf	blink@line& (0+255),b
 10645  001AB0  0E01               	movlw	high _line3
 10646  001AB2  6F81               	movwf	(blink@line+1)& (0+255),b
 10647  001AB4  0E0C               	movlw	12
 10648  001AB6  6F82               	movwf	blink@start& (0+255),b
 10649  001AB8  0E12               	movlw	18
 10650  001ABA  6F83               	movwf	blink@end& (0+255),b
 10651  001ABC  ECE2  F038         	call	_blink	;wreg free
 10652                           
 10653                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 10654  001AC0  0E03               	movlw	3
 10655  001AC2  EC4A  F03B         	call	_btPress
 10656  001AC6  0900               	iorlw	0
 10657  001AC8  B4D8               	btfsc	status,2,c
 10658  001ACA  D002               	goto	l870
 10659                           
 10660                           ;tela_CONFIG_PRESSAO.h: 55: sp_principal++;
 10661  001ACC  0100               	movlb	0	; () banked
 10662  001ACE  2BE1               	incf	_sp_principal& (0+255),f,b
 10663  001AD0                     l870:
 10664  001AD0  FFFF               	dw	65535	; assembler added errata NOP
 10665                           
 10666                           ;tela_CONFIG_PRESSAO.h: 56: }
 10667                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 10668                           
 10669                           ; BSR set to: 0
 10670  001AD2  0E02               	movlw	2
 10671  001AD4  EC4A  F03B         	call	_btPress
 10672  001AD8  0900               	iorlw	0
 10673  001ADA  B4D8               	btfsc	status,2,c
 10674  001ADC  D002               	goto	l871
 10675                           
 10676                           ;tela_CONFIG_PRESSAO.h: 58: sp_principal--;
 10677  001ADE  0100               	movlb	0	; () banked
 10678  001AE0  07E1               	decf	_sp_principal& (0+255),f,b
 10679  001AE2                     l871:
 10680  001AE2  FFFF               	dw	65535	; assembler added errata NOP
 10681                           
 10682                           ;tela_CONFIG_PRESSAO.h: 59: }
 10683                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_principal > 99) {
 10684                           
 10685                           ; BSR set to: 0
 10686  001AE4  0E63               	movlw	99
 10687  001AE6  0100               	movlb	0	; () banked
 10688  001AE8  65E1               	cpfsgt	_sp_principal& (0+255),b
 10689  001AEA  D03B               	goto	l864
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;tela_CONFIG_PRESSAO.h: 61: sp_principal = 0;
 10693  001AEC  0E00               	movlw	0
 10694  001AEE  6FE1               	movwf	_sp_principal& (0+255),b
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;tela_CONFIG_PRESSAO.h: 62: }
 10698                           ;tela_CONFIG_PRESSAO.h: 63: break;
 10699  001AF0  D038               	goto	l864
 10700  001AF2  FFFF               	dw	65535	; assembler added errata NOP
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;tela_CONFIG_PRESSAO.h: 65: blink(line4, 12, 18);
 10704                           
 10705                           ; BSR set to: 0
 10706  001AF4  0E3C               	movlw	low _line4
 10707  001AF6  6F80               	movwf	blink@line& (0+255),b
 10708  001AF8  0E01               	movlw	high _line4
 10709  001AFA  6F81               	movwf	(blink@line+1)& (0+255),b
 10710  001AFC  0E0C               	movlw	12
 10711  001AFE  6F82               	movwf	blink@start& (0+255),b
 10712  001B00  0E12               	movlw	18
 10713  001B02  6F83               	movwf	blink@end& (0+255),b
 10714  001B04  ECE2  F038         	call	_blink	;wreg free
 10715                           
 10716                           ;tela_CONFIG_PRESSAO.h: 66: if (btPress(3)) {
 10717  001B08  0E03               	movlw	3
 10718  001B0A  EC4A  F03B         	call	_btPress
 10719  001B0E  0900               	iorlw	0
 10720  001B10  B4D8               	btfsc	status,2,c
 10721  001B12  D002               	goto	l874
 10722                           
 10723                           ;tela_CONFIG_PRESSAO.h: 67: sp_estacionaria++;
 10724  001B14  0100               	movlb	0	; () banked
 10725  001B16  2BE0               	incf	_sp_estacionaria& (0+255),f,b
 10726  001B18                     l874:
 10727  001B18  FFFF               	dw	65535	; assembler added errata NOP
 10728                           
 10729                           ;tela_CONFIG_PRESSAO.h: 68: }
 10730                           ;tela_CONFIG_PRESSAO.h: 69: if (btPress(2)) {
 10731                           
 10732                           ; BSR set to: 0
 10733  001B1A  0E02               	movlw	2
 10734  001B1C  EC4A  F03B         	call	_btPress
 10735  001B20  0900               	iorlw	0
 10736  001B22  B4D8               	btfsc	status,2,c
 10737  001B24  D002               	goto	l875
 10738                           
 10739                           ;tela_CONFIG_PRESSAO.h: 70: sp_estacionaria--;
 10740  001B26  0100               	movlb	0	; () banked
 10741  001B28  07E0               	decf	_sp_estacionaria& (0+255),f,b
 10742  001B2A                     l875:
 10743  001B2A  FFFF               	dw	65535	; assembler added errata NOP
 10744                           
 10745                           ;tela_CONFIG_PRESSAO.h: 71: }
 10746                           ;tela_CONFIG_PRESSAO.h: 72: if (sp_estacionaria > 99) {
 10747                           
 10748                           ; BSR set to: 0
 10749  001B2C  0E63               	movlw	99
 10750  001B2E  0100               	movlb	0	; () banked
 10751  001B30  65E0               	cpfsgt	_sp_estacionaria& (0+255),b
 10752  001B32  D017               	goto	l864
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;tela_CONFIG_PRESSAO.h: 73: sp_estacionaria = 0;
 10756  001B34  0E00               	movlw	0
 10757  001B36  6FE0               	movwf	_sp_estacionaria& (0+255),b
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;tela_CONFIG_PRESSAO.h: 74: }
 10761                           ;tela_CONFIG_PRESSAO.h: 75: break;
 10762  001B38  D014               	goto	l864
 10763  001B3A  FFFF               	dw	65535	; assembler added errata NOP
 10764                           
 10765                           ; BSR set to: 0
 10766                           
 10767                           ; BSR set to: 0
 10768  001B3C  0E00               	movlw	0
 10769  001B3E  6FDF               	movwf	_option_posi& (0+255),b
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;tela_CONFIG_PRESSAO.h: 78: }
 10773                           
 10774                           ;tela_CONFIG_PRESSAO.h: 77: break;
 10775  001B40  D010               	goto	l864
 10776  001B42                     l859:
 10777  001B42  FFFF               	dw	65535	; assembler added errata NOP
 10778                           
 10779                           ; BSR set to: 0
 10780  001B44  0100               	movlb	0	; () banked
 10781  001B46  51DF               	movf	_option_posi& (0+255),w,b
 10782                           
 10783                           ; Switch size 1, requested type "space"
 10784                           ; Number of cases is 4, Range of values is 0 to 3
 10785                           ; switch strategies available:
 10786                           ; Name         Instructions Cycles
 10787                           ; simple_byte           13     7 (average)
 10788                           ;	Chosen strategy is simple_byte
 10789  001B48  0A00               	xorlw	0	; case 0
 10790  001B4A  B4D8               	btfsc	status,2,c
 10791  001B4C  D766               	goto	l860
 10792  001B4E  0A01               	xorlw	1	; case 1
 10793  001B50  B4D8               	btfsc	status,2,c
 10794  001B52  D787               	goto	l865
 10795  001B54  0A03               	xorlw	3	; case 2
 10796  001B56  B4D8               	btfsc	status,2,c
 10797  001B58  D7A8               	goto	l869
 10798  001B5A  0A01               	xorlw	1	; case 3
 10799  001B5C  B4D8               	btfsc	status,2,c
 10800  001B5E  D7C9               	goto	l873
 10801  001B60  D7EC               	goto	l877
 10802  001B62                     l864:
 10803  001B62  FFFF               	dw	65535	; assembler added errata NOP
 10804                           
 10805                           ; BSR set to: 0
 10806                           
 10807                           ; BSR set to: 0
 10808  001B64  0012               	return		;funcret
 10809  001B66  FFFF               	dw	65535	; errata NOP
 10810  001B68                     __end_of_ajusteSP_Bombas:
 10811                           	opt stack 0
 10812                           tblptru	equ	0xFF8
 10813                           tblptrh	equ	0xFF7
 10814                           tblptrl	equ	0xFF6
 10815                           tablat	equ	0xFF5
 10816                           prodh	equ	0xFF4
 10817                           prodl	equ	0xFF3
 10818                           intcon	equ	0xFF2
 10819                           postinc0	equ	0xFEE
 10820                           wreg	equ	0xFE8
 10821                           postdec1	equ	0xFE5
 10822                           fsr1l	equ	0xFE1
 10823                           indf2	equ	0xFDF
 10824                           postinc2	equ	0xFDE
 10825                           fsr2h	equ	0xFDA
 10826                           fsr2l	equ	0xFD9
 10827                           status	equ	0xFD8
 10828                           
 10829 ;; *************** function _blink *****************
 10830 ;; Defined at:
 10831 ;;		line 173 in file "lcd.h"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;  line            2    0[BANK0 ] PTR unsigned char 
 10834 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 10835 ;;  start           1    2[BANK0 ] unsigned char 
 10836 ;;  end             1    3[BANK0 ] unsigned char 
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;  i               1    4[BANK0 ] unsigned char 
 10839 ;; Return value:  Size  Location     Type
 10840 ;;                  1    wreg      void 
 10841 ;; Registers used:
 10842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10848 ;;      Params:         0       4       0       0       0       0       0
 10849 ;;      Locals:         0       1       0       0       0       0       0
 10850 ;;      Temps:          0       0       0       0       0       0       0
 10851 ;;      Totals:         0       5       0       0       0       0       0
 10852 ;;Total ram usage:        5 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    6
 10855 ;; This function calls:
 10856 ;;		Nothing
 10857 ;; This function is called by:
 10858 ;;		_telaPrincipal
 10859 ;;		_tela_ajusteRTC
 10860 ;;		_tela_testeBombas
 10861 ;;		_configuraTelefones
 10862 ;;		_configurarEstacionaria
 10863 ;;		_ajusteSP_Bombas
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           	psect	text29
 10868  0071C4                     __ptext29:
 10869                           	opt stack 0
 10870  0071C4                     _blink:
 10871                           	opt stack 0
 10872  0071C4  FFFF               	dw	65535	; assembler added errata NOP
 10873                           
 10874                           ;lcd.h: 174: if (blinkk) {
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;incstack = 0
 10878  0071C6  5067               	movf	_blinkk,w,c
 10879  0071C8  B4D8               	btfsc	status,2,c
 10880  0071CA  D018               	goto	u6300
 10881                           
 10882                           ;lcd.h: 175: char i = 0;
 10883  0071CC  0E00               	movlw	0
 10884  0071CE  0100               	movlb	0	; () banked
 10885  0071D0  6F84               	movwf	blink@i& (0+255),b
 10886                           
 10887                           ; BSR set to: 0
 10888                           ;lcd.h: 176: for (i = (--start); i < end; i++) {
 10889  0071D2  0782               	decf	blink@start& (0+255),f,b
 10890  0071D4  C082  F084         	movff	blink@start,blink@i
 10891  0071D8  D00C               	goto	l666
 10892  0071DA  FFFF               	dw	65535	; assembler added errata NOP
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;lcd.h: 177: line[i] = ' ';
 10896                           
 10897                           ; BSR set to: 0
 10898  0071DC  5184               	movf	blink@i& (0+255),w,b
 10899  0071DE  0D01               	mullw	1
 10900  0071E0  50F3               	movf	prodl,w,c
 10901  0071E2  2580               	addwf	blink@line& (0+255),w,b
 10902  0071E4  6ED9               	movwf	fsr2l,c
 10903  0071E6  50F4               	movf	prodh,w,c
 10904  0071E8  2181               	addwfc	(blink@line+1)& (0+255),w,b
 10905  0071EA  6EDA               	movwf	fsr2h,c
 10906  0071EC  0E20               	movlw	32
 10907  0071EE  6EDF               	movwf	indf2,c
 10908                           
 10909                           ; BSR set to: 0
 10910  0071F0  2B84               	incf	blink@i& (0+255),f,b
 10911  0071F2                     l666:
 10912  0071F2  FFFF               	dw	65535	; assembler added errata NOP
 10913                           
 10914                           ; BSR set to: 0
 10915                           
 10916                           ; BSR set to: 0
 10917  0071F4  5183               	movf	blink@end& (0+255),w,b
 10918  0071F6  5D84               	subwf	blink@i& (0+255),w,b
 10919  0071F8  A0D8               	btfss	status,0,c
 10920  0071FA  D7EF               	goto	l667
 10921  0071FC                     u6300:
 10922  0071FC  FFFF               	dw	65535	; assembler added errata NOP
 10923                           
 10924                           ; BSR set to: 0
 10925                           
 10926                           ; BSR set to: 0
 10927  0071FE  0012               	return		;funcret
 10928  007200  FFFF               	dw	65535	; errata NOP
 10929  007202                     __end_of_blink:
 10930                           	opt stack 0
 10931                           tblptru	equ	0xFF8
 10932                           tblptrh	equ	0xFF7
 10933                           tblptrl	equ	0xFF6
 10934                           tablat	equ	0xFF5
 10935                           prodh	equ	0xFF4
 10936                           prodl	equ	0xFF3
 10937                           intcon	equ	0xFF2
 10938                           postinc0	equ	0xFEE
 10939                           wreg	equ	0xFE8
 10940                           postdec1	equ	0xFE5
 10941                           fsr1l	equ	0xFE1
 10942                           indf2	equ	0xFDF
 10943                           postinc2	equ	0xFDE
 10944                           fsr2h	equ	0xFDA
 10945                           fsr2l	equ	0xFD9
 10946                           status	equ	0xFD8
 10947                           
 10948 ;; *************** function _acaoTesteBombas *****************
 10949 ;; Defined at:
 10950 ;;		line 135 in file "controle.h"
 10951 ;; Parameters:    Size  Location     Type
 10952 ;;		None
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;  i               1   88[BANK0 ] unsigned char 
 10955 ;;  intervalo       1   87[BANK0 ] unsigned char 
 10956 ;; Return value:  Size  Location     Type
 10957 ;;                  1    wreg      void 
 10958 ;; Registers used:
 10959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10965 ;;      Params:         0       0       0       0       0       0       0
 10966 ;;      Locals:         0      12       0       0       0       0       0
 10967 ;;      Temps:          0       5       0       0       0       0       0
 10968 ;;      Totals:         0      17       0       0       0       0       0
 10969 ;;Total ram usage:       17 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:   10
 10972 ;; This function calls:
 10973 ;;		_btPress
 10974 ;;		_clearShiftREG
 10975 ;;		_drenarPressao
 10976 ;;		_enviaSMS
 10977 ;;		_intToFloatStr
 10978 ;;		_partidaBombaEstacionaria
 10979 ;;		_readEEPROM_ext
 10980 ;;		_salvarLOG
 10981 ;;		_sprintf
 10982 ;;		_writeEEPROM_ext
 10983 ;; This function is called by:
 10984 ;;		_main
 10985 ;; This function uses a non-reentrant model
 10986 ;;
 10987                           
 10988                           	psect	text30
 10989  00091A                     __ptext30:
 10990                           	opt stack 0
 10991  00091A                     _acaoTesteBombas:
 10992                           	opt stack 0
 10993  00091A  FFFF               	dw	65535	; assembler added errata NOP
 10994                           
 10995                           ;controle.h: 136: if (btPress(1)) {
 10996                           
 10997                           ;incstack = 0
 10998  00091C  0E01               	movlw	1
 10999  00091E  EC4A  F03B         	call	_btPress
 11000  000922  0900               	iorlw	0
 11001  000924  B4D8               	btfsc	status,2,c
 11002  000926  D033               	goto	u7270
 11003                           
 11004                           ;controle.h: 137: executandoTeste = 0;
 11005  000928  0E00               	movlw	0
 11006  00092A  0100               	movlb	0	; () banked
 11007  00092C  6FF1               	movwf	_executandoTeste& (0+255),b
 11008                           
 11009                           ;controle.h: 138: gsmOcupado = 0;
 11010  00092E  0E00               	movlw	0
 11011  000930  6FF4               	movwf	_gsmOcupado& (0+255),b
 11012                           
 11013                           ;controle.h: 139: etapaTesteBombas = 0;
 11014  000932  0E00               	movlw	0
 11015  000934  6E71               	movwf	_etapaTesteBombas,c
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;controle.h: 140: unsigned char intervalo = readEEPROM_ext(6);
 11019  000936  0E06               	movlw	6
 11020  000938  EC61  F03A         	call	_readEEPROM_ext
 11021  00093C  0100               	movlb	0	; () banked
 11022  00093E  6FD7               	movwf	acaoTesteBombas@intervalo& (0+255),b
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;controle.h: 141: intervalo_teste_dia = intervalo > 0 ? intervalo : 1;
 11026  000940  51D7               	movf	acaoTesteBombas@intervalo& (0+255),w,b
 11027  000942  A4D8               	btfss	status,2,c
 11028  000944  D005               	goto	l514
 11029                           
 11030                           ; BSR set to: 0
 11031  000946  0E00               	movlw	0
 11032  000948  6FD0               	movwf	(_acaoTesteBombas$1291+1)& (0+255),b
 11033  00094A  0E01               	movlw	1
 11034  00094C  6FCF               	movwf	_acaoTesteBombas$1291& (0+255),b
 11035  00094E  D004               	goto	l516
 11036  000950                     l514:
 11037  000950  FFFF               	dw	65535	; assembler added errata NOP
 11038                           
 11039                           ; BSR set to: 0
 11040  000952  C0D7  F0CF         	movff	acaoTesteBombas@intervalo,_acaoTesteBombas$1291
 11041  000956  6BD0               	clrf	(_acaoTesteBombas$1291+1)& (0+255),b
 11042  000958                     l516:
 11043  000958  FFFF               	dw	65535	; assembler added errata NOP
 11044                           
 11045                           ; BSR set to: 0
 11046  00095A  C0CF  F0E8         	movff	_acaoTesteBombas$1291,_intervalo_teste_dia
 11047                           
 11048                           ;controle.h: 142: menu_posi = _menu_posi;
 11049  00095E  C0DD  F0DE         	movff	__menu_posi,_menu_posi
 11050                           
 11051                           ; BSR set to: 0
 11052                           ;controle.h: 143: char i = 0;
 11053  000962  0E00               	movlw	0
 11054  000964  6FD8               	movwf	acaoTesteBombas@i& (0+255),b
 11055                           
 11056                           ;controle.h: 144: for (i = 0; i < 8; i++) {
 11057  000966  0E00               	movlw	0
 11058  000968  6FD8               	movwf	acaoTesteBombas@i& (0+255),b
 11059  00096A                     l6636:
 11060  00096A  FFFF               	dw	65535	; assembler added errata NOP
 11061                           
 11062                           ; BSR set to: 0
 11063  00096C  0E07               	movlw	7
 11064  00096E  65D8               	cpfsgt	acaoTesteBombas@i& (0+255),b
 11065  000970  D001               	goto	l517
 11066  000972  D00D               	goto	u7270
 11067  000974                     l517:
 11068  000974  FFFF               	dw	65535	; assembler added errata NOP
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;controle.h: 145: shift[i] = 0;
 11072                           
 11073                           ; BSR set to: 0
 11074  000976  51D8               	movf	acaoTesteBombas@i& (0+255),w,b
 11075  000978  0D01               	mullw	1
 11076  00097A  0E44               	movlw	low _shift
 11077  00097C  24F3               	addwf	prodl,w,c
 11078  00097E  6ED9               	movwf	fsr2l,c
 11079  000980  0E00               	movlw	high _shift
 11080  000982  20F4               	addwfc	prodh,w,c
 11081  000984  6EDA               	movwf	fsr2h,c
 11082  000986  0E00               	movlw	0
 11083  000988  6EDF               	movwf	indf2,c
 11084                           
 11085                           ; BSR set to: 0
 11086  00098A  2BD8               	incf	acaoTesteBombas@i& (0+255),f,b
 11087  00098C  D7EE               	goto	l6636
 11088  00098E                     u7270:
 11089  00098E  FFFF               	dw	65535	; assembler added errata NOP
 11090                           
 11091                           ;controle.h: 146: }
 11092                           ;controle.h: 147: }
 11093                           ;controle.h: 149: if (etapaTesteBombas < 10) {
 11094                           
 11095                           ; BSR set to: 0
 11096                           
 11097                           ; BSR set to: 0
 11098  000990  0E0A               	movlw	10
 11099  000992  6071               	cpfslt	_etapaTesteBombas,c
 11100  000994  D1EE               	goto	l520
 11101                           
 11102                           ;controle.h: 150: sprintf(&line1[3], "Aguarde... %ds", timerTesteBombas);
 11103  000996  0E7E               	movlw	low (_line1+3)
 11104  000998  0100               	movlb	0	; () banked
 11105  00099A  6FA1               	movwf	sprintf@wh& (0+255),b
 11106  00099C  0E01               	movlw	high (_line1+3)
 11107  00099E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11108  0009A0  0E76               	movlw	low STR_38
 11109  0009A2  6FA3               	movwf	sprintf@f& (0+255),b
 11110  0009A4  0E7E               	movlw	high STR_38
 11111  0009A6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11112  0009A8  C0D9  F0A5         	movff	_timerTesteBombas,?_sprintf+4
 11113  0009AC  C0DA  F0A6         	movff	_timerTesteBombas+1,?_sprintf+5
 11114  0009B0  ECC9  F039         	call	_sprintf	;wreg free
 11115                           
 11116                           ;controle.h: 151: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11117  0009B4  0100               	movlb	0	; () banked
 11118  0009B6  51F8               	movf	_pressao& (0+255),w,b
 11119  0009B8  EC04  F03D         	call	_intToFloatStr
 11120  0009BC  C0B5  F0CD         	movff	?_intToFloatStr,_acaoTesteBombas$2375
 11121  0009C0  C0B6  F0CE         	movff	?_intToFloatStr+1,_acaoTesteBombas$2375+1
 11122                           
 11123                           ;controle.h: 151: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11124  0009C4  0E68               	movlw	low (_line2+2)
 11125  0009C6  0100               	movlb	0	; () banked
 11126  0009C8  6FA1               	movwf	sprintf@wh& (0+255),b
 11127  0009CA  0E01               	movlw	high (_line2+2)
 11128  0009CC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11129  0009CE  0E2B               	movlw	low STR_39
 11130  0009D0  6FA3               	movwf	sprintf@f& (0+255),b
 11131  0009D2  0E7E               	movlw	high STR_39
 11132  0009D4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11133  0009D6  C0CD  F0A5         	movff	_acaoTesteBombas$2375,?_sprintf+4
 11134  0009DA  C0CE  F0A6         	movff	_acaoTesteBombas$2375+1,?_sprintf+5
 11135  0009DE  ECC9  F039         	call	_sprintf	;wreg free
 11136                           
 11137                           ;controle.h: 152: }
 11138                           ;controle.h: 154: switch (etapaTesteBombas) {
 11139  0009E2  D1C7               	goto	l520
 11140  0009E4  FFFF               	dw	65535	; assembler added errata NOP
 11141                           
 11142                           ;controle.h: 156: dias_restante_teste = 0;
 11143  0009E6  0E00               	movlw	0
 11144  0009E8  0100               	movlb	0	; () banked
 11145  0009EA  6FE7               	movwf	_dias_restante_teste& (0+255),b
 11146                           
 11147                           ; BSR set to: 0
 11148                           ;controle.h: 157: writeEEPROM_ext(10, dias_restante_teste);
 11149  0009EC  C0E7  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 11150  0009F0  0E0A               	movlw	10
 11151  0009F2  ECA6  F039         	call	_writeEEPROM_ext
 11152                           
 11153                           ;controle.h: 158: shift[2] = 1;
 11154  0009F6  0E01               	movlw	1
 11155  0009F8  6E46               	movwf	_shift+2,c
 11156                           
 11157                           ;controle.h: 159: timerTesteBombas = 30;
 11158  0009FA  0E00               	movlw	0
 11159  0009FC  0100               	movlb	0	; () banked
 11160  0009FE  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11161  000A00  0E1E               	movlw	30
 11162  000A02  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;controle.h: 160: etapaTesteBombas = 1;
 11166  000A04  0E01               	movlw	1
 11167  000A06  D112               	goto	L25
 11168  000A08  FFFF               	dw	65535	; assembler added errata NOP
 11169                           
 11170                           ;controle.h: 163: drenarPressao();
 11171                           
 11172                           ; BSR set to: 0
 11173  000A0A  EC73  F037         	call	_drenarPressao	;wreg free
 11174                           
 11175                           ;controle.h: 164: if (pressao <= (sp_pressao_rede - 10)) {
 11176  000A0E  0EF6               	movlw	246
 11177  000A10  0100               	movlb	0	; () banked
 11178  000A12  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11179  000A14  0EFF               	movlw	255
 11180  000A16  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11181  000A18  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11182  000A1A  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11183  000A1C  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11184  000A1E  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11185  000A20  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11186  000A22  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11187  000A24  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11188  000A26  51F8               	movf	_pressao& (0+255),w,b
 11189  000A28  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11190  000A2A  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11191  000A2C  0A80               	xorlw	128
 11192  000A2E  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11193  000A30  51F9               	movf	(_pressao+1)& (0+255),w,b
 11194  000A32  0A80               	xorlw	128
 11195  000A34  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11196  000A36  A0D8               	btfss	status,0,c
 11197  000A38  D1C6               	goto	l522
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;controle.h: 165: shift[2] = 0;
 11201  000A3A  0E00               	movlw	0
 11202  000A3C  6E46               	movwf	_shift+2,c
 11203                           
 11204                           ;controle.h: 166: shift[6] = 1;
 11205  000A3E  0E01               	movlw	1
 11206  000A40  6E4A               	movwf	_shift+6,c
 11207                           
 11208                           ;controle.h: 167: etapaTesteBombas = 2;
 11209  000A42  0E02               	movlw	2
 11210  000A44  D04C               	goto	L30
 11211  000A46  FFFF               	dw	65535	; assembler added errata NOP
 11212                           
 11213                           ;controle.h: 172: sprintf(line4, "Bomba Jockey...");
 11214                           
 11215                           ; BSR set to: 0
 11216  000A48  0E3C               	movlw	low _line4
 11217  000A4A  0100               	movlb	0	; () banked
 11218  000A4C  6FA1               	movwf	sprintf@wh& (0+255),b
 11219  000A4E  0E01               	movlw	high _line4
 11220  000A50  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11221  000A52  0E0B               	movlw	low STR_40
 11222  000A54  6FA3               	movwf	sprintf@f& (0+255),b
 11223  000A56  0E7E               	movlw	high STR_40
 11224  000A58  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11225  000A5A  ECC9  F039         	call	_sprintf	;wreg free
 11226                           
 11227                           ;controle.h: 173: if (pressao >= sp_pressao_rede) {
 11228  000A5E  0100               	movlb	0	; () banked
 11229  000A60  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11230  000A62  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11231  000A64  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11232  000A66  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11233  000A68  5DF8               	subwf	_pressao& (0+255),w,b
 11234  000A6A  51F9               	movf	(_pressao+1)& (0+255),w,b
 11235  000A6C  0A80               	xorlw	128
 11236  000A6E  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11237  000A70  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11238  000A72  0A80               	xorlw	128
 11239  000A74  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11240  000A76  A0D8               	btfss	status,0,c
 11241  000A78  D006               	goto	l526
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;controle.h: 174: shift[6] = 0;
 11245  000A7A  0E00               	movlw	0
 11246  000A7C  6E4A               	movwf	_shift+6,c
 11247                           
 11248                           ;controle.h: 175: status_jockey = 1;
 11249  000A7E  0E01               	movlw	1
 11250  000A80  6FFD               	movwf	_status_jockey& (0+255),b
 11251                           
 11252                           ;controle.h: 176: etapaTesteBombas = 3;
 11253  000A82  0E03               	movlw	3
 11254  000A84  6E71               	movwf	_etapaTesteBombas,c
 11255  000A86                     l526:
 11256  000A86  FFFF               	dw	65535	; assembler added errata NOP
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;controle.h: 177: }
 11260                           ;controle.h: 178: if (!timerTesteBombas) {
 11261                           
 11262                           ; BSR set to: 0
 11263  000A88  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11264  000A8A  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11265  000A8C  A4D8               	btfss	status,2,c
 11266  000A8E  D19B               	goto	l522
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;controle.h: 179: status_jockey = 0;
 11270  000A90  0E00               	movlw	0
 11271  000A92  6FFD               	movwf	_status_jockey& (0+255),b
 11272                           
 11273                           ;controle.h: 180: etapaTesteBombas = 3;
 11274  000A94  0E03               	movlw	3
 11275  000A96  D051               	goto	L44
 11276  000A98  FFFF               	dw	65535	; assembler added errata NOP
 11277                           
 11278                           ;controle.h: 185: shift[2] = 1;
 11279                           
 11280                           ; BSR set to: 0
 11281  000A9A  0E01               	movlw	1
 11282  000A9C  6E46               	movwf	_shift+2,c
 11283                           
 11284                           ;controle.h: 186: etapaTesteBombas = 4;
 11285  000A9E  0E04               	movlw	4
 11286  000AA0  D0C5               	goto	L25
 11287  000AA2  FFFF               	dw	65535	; assembler added errata NOP
 11288                           
 11289                           ;controle.h: 189: drenarPressao();
 11290  000AA4  EC73  F037         	call	_drenarPressao	;wreg free
 11291                           
 11292                           ;controle.h: 190: if (pressao <= (sp_pressao_rede - 10)) {
 11293  000AA8  0EF6               	movlw	246
 11294  000AAA  0100               	movlb	0	; () banked
 11295  000AAC  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11296  000AAE  0EFF               	movlw	255
 11297  000AB0  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11298  000AB2  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11299  000AB4  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11300  000AB6  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11301  000AB8  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11302  000ABA  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11303  000ABC  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11304  000ABE  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11305  000AC0  51F8               	movf	_pressao& (0+255),w,b
 11306  000AC2  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11307  000AC4  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11308  000AC6  0A80               	xorlw	128
 11309  000AC8  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11310  000ACA  51F9               	movf	(_pressao+1)& (0+255),w,b
 11311  000ACC  0A80               	xorlw	128
 11312  000ACE  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11313  000AD0  A0D8               	btfss	status,0,c
 11314  000AD2  D179               	goto	l522
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;controle.h: 191: shift[5] = 1;
 11318  000AD4  0E01               	movlw	1
 11319  000AD6  6E49               	movwf	_shift+5,c
 11320                           
 11321                           ;controle.h: 192: shift[2] = 0;
 11322  000AD8  0E00               	movlw	0
 11323  000ADA  6E46               	movwf	_shift+2,c
 11324                           
 11325                           ;controle.h: 193: etapaTesteBombas = 5;
 11326  000ADC  0E05               	movlw	5
 11327  000ADE                     L30:
 11328  000ADE  FFFF               	dw	65535	; assembler added errata NOP
 11329  000AE0  6E71               	movwf	_etapaTesteBombas,c
 11330                           
 11331                           ;controle.h: 194: timerTesteBombas = 50;
 11332  000AE2  0E00               	movlw	0
 11333  000AE4  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11334  000AE6  0E32               	movlw	50
 11335  000AE8  D02D               	goto	L24
 11336  000AEA  FFFF               	dw	65535	; assembler added errata NOP
 11337                           
 11338                           ;controle.h: 198: sprintf(line4, "Bomba Principal...");
 11339                           
 11340                           ; BSR set to: 0
 11341  000AEC  0E3C               	movlw	low _line4
 11342  000AEE  0100               	movlb	0	; () banked
 11343  000AF0  6FA1               	movwf	sprintf@wh& (0+255),b
 11344  000AF2  0E01               	movlw	high _line4
 11345  000AF4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11346  000AF6  0E00               	movlw	low STR_41
 11347  000AF8  6FA3               	movwf	sprintf@f& (0+255),b
 11348  000AFA  0E7D               	movlw	high STR_41
 11349  000AFC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11350  000AFE  ECC9  F039         	call	_sprintf	;wreg free
 11351                           
 11352                           ;controle.h: 199: if (pressao >= sp_pressao_rede) {
 11353  000B02  0100               	movlb	0	; () banked
 11354  000B04  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11355  000B06  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11356  000B08  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11357  000B0A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11358  000B0C  5DF8               	subwf	_pressao& (0+255),w,b
 11359  000B0E  51F9               	movf	(_pressao+1)& (0+255),w,b
 11360  000B10  0A80               	xorlw	128
 11361  000B12  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11362  000B14  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11363  000B16  0A80               	xorlw	128
 11364  000B18  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11365  000B1A  A0D8               	btfss	status,0,c
 11366  000B1C  D006               	goto	l532
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;controle.h: 200: shift[5] = 0;
 11370  000B1E  0E00               	movlw	0
 11371  000B20  6E49               	movwf	_shift+5,c
 11372                           
 11373                           ;controle.h: 201: status_principal = 1;
 11374  000B22  0E01               	movlw	1
 11375  000B24  6FFC               	movwf	_status_principal& (0+255),b
 11376                           
 11377                           ;controle.h: 202: etapaTesteBombas = 6;
 11378  000B26  0E06               	movlw	6
 11379  000B28  6E71               	movwf	_etapaTesteBombas,c
 11380  000B2A                     l532:
 11381  000B2A  FFFF               	dw	65535	; assembler added errata NOP
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;controle.h: 203: }
 11385                           ;controle.h: 204: if (!timerTesteBombas) {
 11386                           
 11387                           ; BSR set to: 0
 11388  000B2C  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11389  000B2E  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11390  000B30  A4D8               	btfss	status,2,c
 11391  000B32  D149               	goto	l522
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;controle.h: 205: status_principal = 0;
 11395  000B34  0E00               	movlw	0
 11396  000B36  6FFC               	movwf	_status_principal& (0+255),b
 11397                           
 11398                           ;controle.h: 206: etapaTesteBombas = 6;
 11399  000B38  0E06               	movlw	6
 11400  000B3A                     L44:
 11401  000B3A  FFFF               	dw	65535	; assembler added errata NOP
 11402  000B3C  6E71               	movwf	_etapaTesteBombas,c
 11403                           
 11404                           ;controle.h: 207: timerTesteBombas = 30;
 11405  000B3E  0E00               	movlw	0
 11406  000B40  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11407  000B42  0E1E               	movlw	30
 11408  000B44                     L24:
 11409  000B44  FFFF               	dw	65535	; assembler added errata NOP
 11410  000B46  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;controle.h: 208: }
 11414                           ;controle.h: 209: break;
 11415  000B48  D13E               	goto	l522
 11416  000B4A  FFFF               	dw	65535	; assembler added errata NOP
 11417                           
 11418                           ;controle.h: 211: shift[2] = 1;
 11419                           
 11420                           ; BSR set to: 0
 11421  000B4C  0E01               	movlw	1
 11422  000B4E  6E46               	movwf	_shift+2,c
 11423                           
 11424                           ;controle.h: 212: etapaTesteBombas = 7;
 11425  000B50  0E07               	movlw	7
 11426  000B52  D06C               	goto	L25
 11427  000B54  FFFF               	dw	65535	; assembler added errata NOP
 11428                           
 11429                           ;controle.h: 215: drenarPressao();
 11430  000B56  EC73  F037         	call	_drenarPressao	;wreg free
 11431                           
 11432                           ;controle.h: 216: if (pressao <= (sp_pressao_rede - 10)) {
 11433  000B5A  0EF6               	movlw	246
 11434  000B5C  0100               	movlb	0	; () banked
 11435  000B5E  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11436  000B60  0EFF               	movlw	255
 11437  000B62  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11438  000B64  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11439  000B66  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11440  000B68  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11441  000B6A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11442  000B6C  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11443  000B6E  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11444  000B70  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11445  000B72  51F8               	movf	_pressao& (0+255),w,b
 11446  000B74  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11447  000B76  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11448  000B78  0A80               	xorlw	128
 11449  000B7A  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11450  000B7C  51F9               	movf	(_pressao+1)& (0+255),w,b
 11451  000B7E  0A80               	xorlw	128
 11452  000B80  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11453  000B82  A0D8               	btfss	status,0,c
 11454  000B84  D120               	goto	l522
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;controle.h: 217: shift[2] = 0;
 11458  000B86  0E00               	movlw	0
 11459  000B88  6E46               	movwf	_shift+2,c
 11460                           
 11461                           ;controle.h: 218: etapaTesteBombas = 8;
 11462  000B8A  0E08               	movlw	8
 11463  000B8C  6E71               	movwf	_etapaTesteBombas,c
 11464                           
 11465                           ; BSR set to: 0
 11466                           ;controle.h: 219: timerTesteBombas = tempo_limite_estacionaria;
 11467  000B8E  C0E5  F0D9         	movff	_tempo_limite_estacionaria,_timerTesteBombas
 11468  000B92  6BDA               	clrf	(_timerTesteBombas+1)& (0+255),b
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;controle.h: 220: }
 11472                           ;controle.h: 221: break;
 11473  000B94  D118               	goto	l522
 11474  000B96  FFFF               	dw	65535	; assembler added errata NOP
 11475                           
 11476                           ;controle.h: 223: sprintf(line4, "Bomba Combustao...");
 11477                           
 11478                           ; BSR set to: 0
 11479  000B98  0E3C               	movlw	low _line4
 11480  000B9A  0100               	movlb	0	; () banked
 11481  000B9C  6FA1               	movwf	sprintf@wh& (0+255),b
 11482  000B9E  0E01               	movlw	high _line4
 11483  000BA0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11484  000BA2  0E13               	movlw	low STR_42
 11485  000BA4  6FA3               	movwf	sprintf@f& (0+255),b
 11486  000BA6  0E7D               	movlw	high STR_42
 11487  000BA8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11488  000BAA  ECC9  F039         	call	_sprintf	;wreg free
 11489                           
 11490                           ;controle.h: 224: partidaBombaEstacionaria(1);
 11491  000BAE  0E01               	movlw	1
 11492  000BB0  EC51  F01C         	call	_partidaBombaEstacionaria
 11493                           
 11494                           ;controle.h: 226: if (flagEstacionariaLigada || pressao >= sp_pressao_rede) {
 11495  000BB4  0100               	movlb	0	; () banked
 11496  000BB6  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 11497  000BB8  A4D8               	btfss	status,2,c
 11498  000BBA  D00D               	goto	u7370
 11499                           
 11500                           ; BSR set to: 0
 11501  000BBC  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11502  000BBE  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11503  000BC0  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11504  000BC2  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11505  000BC4  5DF8               	subwf	_pressao& (0+255),w,b
 11506  000BC6  51F9               	movf	(_pressao+1)& (0+255),w,b
 11507  000BC8  0A80               	xorlw	128
 11508  000BCA  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11509  000BCC  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11510  000BCE  0A80               	xorlw	128
 11511  000BD0  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11512  000BD2  A0D8               	btfss	status,0,c
 11513  000BD4  D008               	goto	l538
 11514  000BD6                     u7370:
 11515  000BD6  FFFF               	dw	65535	; assembler added errata NOP
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;controle.h: 227: status_estacionaria = 1;
 11519                           
 11520                           ; BSR set to: 0
 11521  000BD8  0E01               	movlw	1
 11522  000BDA  6FFB               	movwf	_status_estacionaria& (0+255),b
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;controle.h: 228: timerTesteBombas = tempo_limite_teste_estacionaria;
 11526  000BDC  C0E4  F0D9         	movff	_tempo_limite_teste_estacionaria,_timerTesteBombas
 11527  000BE0  6BDA               	clrf	(_timerTesteBombas+1)& (0+255),b
 11528                           
 11529                           ;controle.h: 229: etapaTesteBombas = 9;
 11530  000BE2  0E09               	movlw	9
 11531  000BE4  6E71               	movwf	_etapaTesteBombas,c
 11532  000BE6                     l538:
 11533  000BE6  FFFF               	dw	65535	; assembler added errata NOP
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;controle.h: 230: }
 11537                           ;controle.h: 231: if (status_estacionaria == 0 || !timerTesteBombas) {
 11538  000BE8  51FB               	movf	_status_estacionaria& (0+255),w,b
 11539  000BEA  B4D8               	btfsc	status,2,c
 11540  000BEC  D004               	goto	u7390
 11541                           
 11542                           ; BSR set to: 0
 11543  000BEE  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11544  000BF0  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11545  000BF2  A4D8               	btfss	status,2,c
 11546  000BF4  D0E8               	goto	l522
 11547  000BF6                     u7390:
 11548  000BF6  FFFF               	dw	65535	; assembler added errata NOP
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;controle.h: 232: etapaTesteBombas = 10;
 11552                           
 11553                           ; BSR set to: 0
 11554  000BF8  0E0A               	movlw	10
 11555  000BFA  6E71               	movwf	_etapaTesteBombas,c
 11556                           
 11557                           ;controle.h: 233: status_estacionaria = 0;
 11558  000BFC  0E00               	movlw	0
 11559  000BFE  6FFB               	movwf	_status_estacionaria& (0+255),b
 11560                           
 11561                           ; BSR set to: 0
 11562                           ;controle.h: 234: }
 11563                           ;controle.h: 235: break;
 11564  000C00  D0E2               	goto	l522
 11565  000C02  FFFF               	dw	65535	; assembler added errata NOP
 11566                           
 11567                           ;controle.h: 237: sprintf(line4, "Bomba Ligada...");
 11568                           
 11569                           ; BSR set to: 0
 11570  000C04  0E3C               	movlw	low _line4
 11571  000C06  0100               	movlb	0	; () banked
 11572  000C08  6FA1               	movwf	sprintf@wh& (0+255),b
 11573  000C0A  0E01               	movlw	high _line4
 11574  000C0C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11575  000C0E  0EFB               	movlw	low STR_43
 11576  000C10  6FA3               	movwf	sprintf@f& (0+255),b
 11577  000C12  0E7D               	movlw	high STR_43
 11578  000C14  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11579  000C16  ECC9  F039         	call	_sprintf	;wreg free
 11580                           
 11581                           ;controle.h: 238: partidaBombaEstacionaria(1);
 11582  000C1A  0E01               	movlw	1
 11583  000C1C  EC51  F01C         	call	_partidaBombaEstacionaria
 11584                           
 11585                           ;controle.h: 239: if (!timerTesteBombas) {
 11586  000C20  0100               	movlb	0	; () banked
 11587  000C22  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11588  000C24  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11589  000C26  A4D8               	btfss	status,2,c
 11590  000C28  D0CE               	goto	l522
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;controle.h: 240: etapaTesteBombas = 10;
 11594  000C2A  0E0A               	movlw	10
 11595  000C2C                     L25:
 11596  000C2C  FFFF               	dw	65535	; assembler added errata NOP
 11597  000C2E  6E71               	movwf	_etapaTesteBombas,c
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;controle.h: 241: }
 11601                           ;controle.h: 242: break;
 11602  000C30  D0CA               	goto	l522
 11603  000C32  FFFF               	dw	65535	; assembler added errata NOP
 11604                           
 11605                           ;controle.h: 244: salvarLOG();
 11606                           
 11607                           ; BSR set to: 0
 11608  000C34  ECF1  F01D         	call	_salvarLOG	;wreg free
 11609                           
 11610                           ;controle.h: 245: partidaBombaEstacionaria(2);
 11611  000C38  0E02               	movlw	2
 11612  000C3A  EC51  F01C         	call	_partidaBombaEstacionaria
 11613                           
 11614                           ;controle.h: 246: clearShiftREG();
 11615  000C3E  ECDE  F037         	call	_clearShiftREG	;wreg free
 11616                           
 11617                           ;controle.h: 247: etapaTesteBombas = 11;
 11618  000C42  0E0B               	movlw	11
 11619  000C44  6E71               	movwf	_etapaTesteBombas,c
 11620                           
 11621                           ;controle.h: 248: timerTesteBombas = 10;
 11622  000C46  0E00               	movlw	0
 11623  000C48  0100               	movlb	0	; () banked
 11624  000C4A  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11625  000C4C  0E0A               	movlw	10
 11626  000C4E  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;controle.h: 249: executandoTeste = 0;
 11630  000C50  0E00               	movlw	0
 11631  000C52  6FF1               	movwf	_executandoTeste& (0+255),b
 11632                           
 11633                           ;controle.h: 250: break;
 11634  000C54  D0B8               	goto	l522
 11635  000C56  FFFF               	dw	65535	; assembler added errata NOP
 11636                           
 11637                           ;controle.h: 252: sprintf(&line1[2], "Teste Concluido!");
 11638                           
 11639                           ; BSR set to: 0
 11640  000C58  0E7D               	movlw	low (_line1+2)
 11641  000C5A  0100               	movlb	0	; () banked
 11642  000C5C  6FA1               	movwf	sprintf@wh& (0+255),b
 11643  000C5E  0E01               	movlw	high (_line1+2)
 11644  000C60  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11645  000C62  0EA7               	movlw	low STR_44
 11646  000C64  6FA3               	movwf	sprintf@f& (0+255),b
 11647  000C66  0E7D               	movlw	high STR_44
 11648  000C68  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11649  000C6A  ECC9  F039         	call	_sprintf	;wreg free
 11650                           
 11651                           ;controle.h: 253: sprintf(line2, "JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 11652  000C6E  0100               	movlb	0	; () banked
 11653  000C70  05FD               	decf	_status_jockey& (0+255),w,b
 11654  000C72  B4D8               	btfsc	status,2,c
 11655  000C74  D004               	goto	l549
 11656                           
 11657                           ; BSR set to: 0
 11658  000C76  0EE3               	movlw	low STR_47
 11659  000C78  6FD1               	movwf	_acaoTesteBombas$1307& (0+255),b
 11660  000C7A  0E7F               	movlw	high STR_47
 11661  000C7C  D004               	goto	L26
 11662  000C7E                     l549:
 11663  000C7E  FFFF               	dw	65535	; assembler added errata NOP
 11664                           
 11665                           ; BSR set to: 0
 11666                           
 11667                           ; BSR set to: 0
 11668  000C80  0EFA               	movlw	low STR_5
 11669  000C82  6FD1               	movwf	_acaoTesteBombas$1307& (0+255),b
 11670  000C84  0E7F               	movlw	high STR_5
 11671  000C86                     L26:
 11672  000C86  FFFF               	dw	65535	; assembler added errata NOP
 11673  000C88  6FD2               	movwf	(_acaoTesteBombas$1307+1)& (0+255),b
 11674                           
 11675                           ; BSR set to: 0
 11676                           
 11677                           ; BSR set to: 0
 11678  000C8A  0E66               	movlw	low _line2
 11679  000C8C  6FA1               	movwf	sprintf@wh& (0+255),b
 11680  000C8E  0E01               	movlw	high _line2
 11681  000C90  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11682  000C92  0E41               	movlw	low STR_45
 11683  000C94  6FA3               	movwf	sprintf@f& (0+255),b
 11684  000C96  0E7F               	movlw	high STR_45
 11685  000C98  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11686  000C9A  C0D1  F0A5         	movff	_acaoTesteBombas$1307,?_sprintf+4
 11687  000C9E  C0D2  F0A6         	movff	_acaoTesteBombas$1307+1,?_sprintf+5
 11688  000CA2  ECC9  F039         	call	_sprintf	;wreg free
 11689                           
 11690                           ;controle.h: 254: sprintf(line3, "PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO"
      +                          );
 11691  000CA6  0100               	movlb	0	; () banked
 11692  000CA8  05FC               	decf	_status_principal& (0+255),w,b
 11693  000CAA  B4D8               	btfsc	status,2,c
 11694  000CAC  D004               	goto	l553
 11695                           
 11696                           ; BSR set to: 0
 11697  000CAE  0EE3               	movlw	low STR_47
 11698  000CB0  6FD3               	movwf	_acaoTesteBombas$1312& (0+255),b
 11699  000CB2  0E7F               	movlw	high STR_47
 11700  000CB4  D004               	goto	L27
 11701  000CB6                     l553:
 11702  000CB6  FFFF               	dw	65535	; assembler added errata NOP
 11703                           
 11704                           ; BSR set to: 0
 11705                           
 11706                           ; BSR set to: 0
 11707  000CB8  0EFA               	movlw	low STR_5
 11708  000CBA  6FD3               	movwf	_acaoTesteBombas$1312& (0+255),b
 11709  000CBC  0E7F               	movlw	high STR_5
 11710  000CBE                     L27:
 11711  000CBE  FFFF               	dw	65535	; assembler added errata NOP
 11712  000CC0  6FD4               	movwf	(_acaoTesteBombas$1312+1)& (0+255),b
 11713                           
 11714                           ; BSR set to: 0
 11715                           
 11716                           ; BSR set to: 0
 11717  000CC2  0E51               	movlw	low _line3
 11718  000CC4  6FA1               	movwf	sprintf@wh& (0+255),b
 11719  000CC6  0E01               	movlw	high _line3
 11720  000CC8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11721  000CCA  0E58               	movlw	low STR_48
 11722  000CCC  6FA3               	movwf	sprintf@f& (0+255),b
 11723  000CCE  0E7E               	movlw	high STR_48
 11724  000CD0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11725  000CD2  C0D3  F0A5         	movff	_acaoTesteBombas$1312,?_sprintf+4
 11726  000CD6  C0D4  F0A6         	movff	_acaoTesteBombas$1312+1,?_sprintf+5
 11727  000CDA  ECC9  F039         	call	_sprintf	;wreg free
 11728                           
 11729                           ;controle.h: 255: sprintf(line4, "COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "ER
      +                          RO");
 11730  000CDE  0100               	movlb	0	; () banked
 11731  000CE0  05FB               	decf	_status_estacionaria& (0+255),w,b
 11732  000CE2  B4D8               	btfsc	status,2,c
 11733  000CE4  D004               	goto	l557
 11734                           
 11735                           ; BSR set to: 0
 11736  000CE6  0EE3               	movlw	low STR_47
 11737  000CE8  6FD5               	movwf	_acaoTesteBombas$1317& (0+255),b
 11738  000CEA  0E7F               	movlw	high STR_47
 11739  000CEC  D004               	goto	L28
 11740  000CEE                     l557:
 11741  000CEE  FFFF               	dw	65535	; assembler added errata NOP
 11742                           
 11743                           ; BSR set to: 0
 11744                           
 11745                           ; BSR set to: 0
 11746  000CF0  0EFA               	movlw	low STR_5
 11747  000CF2  6FD5               	movwf	_acaoTesteBombas$1317& (0+255),b
 11748  000CF4  0E7F               	movlw	high STR_5
 11749  000CF6                     L28:
 11750  000CF6  FFFF               	dw	65535	; assembler added errata NOP
 11751  000CF8  6FD6               	movwf	(_acaoTesteBombas$1317+1)& (0+255),b
 11752                           
 11753                           ; BSR set to: 0
 11754                           
 11755                           ; BSR set to: 0
 11756  000CFA  0E3C               	movlw	low _line4
 11757  000CFC  6FA1               	movwf	sprintf@wh& (0+255),b
 11758  000CFE  0E01               	movlw	high _line4
 11759  000D00  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11760  000D02  0E67               	movlw	low STR_51
 11761  000D04  6FA3               	movwf	sprintf@f& (0+255),b
 11762  000D06  0E7E               	movlw	high STR_51
 11763  000D08  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11764  000D0A  C0D5  F0A5         	movff	_acaoTesteBombas$1317,?_sprintf+4
 11765  000D0E  C0D6  F0A6         	movff	_acaoTesteBombas$1317+1,?_sprintf+5
 11766  000D12  ECC9  F039         	call	_sprintf	;wreg free
 11767                           
 11768                           ;controle.h: 256: if (!timerTesteBombas) {
 11769  000D16  0100               	movlb	0	; () banked
 11770  000D18  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11771  000D1A  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11772  000D1C  A4D8               	btfss	status,2,c
 11773  000D1E  D053               	goto	l522
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;controle.h: 257: etapaTesteBombas = 12;
 11777  000D20  0E0C               	movlw	12
 11778  000D22  6E71               	movwf	_etapaTesteBombas,c
 11779                           
 11780                           ;controle.h: 258: timerTesteBombas = 150;
 11781  000D24  0E00               	movlw	0
 11782  000D26  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11783  000D28  0E96               	movlw	150
 11784  000D2A  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11785                           
 11786                           ;controle.h: 259: gsmOcupado = 1;
 11787  000D2C  0E01               	movlw	1
 11788  000D2E  D017               	goto	L29
 11789  000D30  FFFF               	dw	65535	; assembler added errata NOP
 11790                           
 11791                           ;controle.h: 263: sprintf(&line4[2], "enviando SMS...");
 11792                           
 11793                           ; BSR set to: 0
 11794  000D32  0E3E               	movlw	low (_line4+2)
 11795  000D34  0100               	movlb	0	; () banked
 11796  000D36  6FA1               	movwf	sprintf@wh& (0+255),b
 11797  000D38  0E01               	movlw	high (_line4+2)
 11798  000D3A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11799  000D3C  0EEB               	movlw	low STR_54
 11800  000D3E  6FA3               	movwf	sprintf@f& (0+255),b
 11801  000D40  0E7D               	movlw	high STR_54
 11802  000D42  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11803  000D44  ECC9  F039         	call	_sprintf	;wreg free
 11804                           
 11805                           ;controle.h: 264: enviaSMS(2);
 11806  000D48  0E02               	movlw	2
 11807  000D4A  ECDD  F00A         	call	_enviaSMS
 11808                           
 11809                           ;controle.h: 265: if (!timerTesteBombas) {
 11810  000D4E  0100               	movlb	0	; () banked
 11811  000D50  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11812  000D52  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11813  000D54  A4D8               	btfss	status,2,c
 11814  000D56  D037               	goto	l522
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;controle.h: 266: menu_posi = 0;
 11818  000D58  0E00               	movlw	0
 11819  000D5A  6FDE               	movwf	_menu_posi& (0+255),b
 11820                           
 11821                           ;controle.h: 267: gsmOcupado = 0;
 11822  000D5C  0E00               	movlw	0
 11823  000D5E                     L29:
 11824  000D5E  FFFF               	dw	65535	; assembler added errata NOP
 11825  000D60  6FF4               	movwf	_gsmOcupado& (0+255),b
 11826                           
 11827                           ; BSR set to: 0
 11828                           ;controle.h: 268: }
 11829                           ;controle.h: 269: break;
 11830  000D62  D031               	goto	l522
 11831  000D64  FFFF               	dw	65535	; assembler added errata NOP
 11832                           
 11833                           ;controle.h: 271: etapaTesteBombas = 0;
 11834                           
 11835                           ; BSR set to: 0
 11836  000D66  0E00               	movlw	0
 11837  000D68  6E71               	movwf	_etapaTesteBombas,c
 11838                           
 11839                           ;controle.h: 272: menu_posi = 0;
 11840  000D6A  0E00               	movlw	0
 11841  000D6C  0100               	movlb	0	; () banked
 11842  000D6E  6FDE               	movwf	_menu_posi& (0+255),b
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;controle.h: 274: }
 11846                           
 11847                           ;controle.h: 273: break;
 11848  000D70  D02A               	goto	l522
 11849  000D72                     l520:
 11850  000D72  FFFF               	dw	65535	; assembler added errata NOP
 11851                           
 11852                           ; BSR set to: 0
 11853  000D74  5071               	movf	_etapaTesteBombas,w,c
 11854                           
 11855                           ; Switch size 1, requested type "space"
 11856                           ; Number of cases is 13, Range of values is 0 to 12
 11857                           ; switch strategies available:
 11858                           ; Name         Instructions Cycles
 11859                           ; simple_byte           40    21 (average)
 11860                           ;	Chosen strategy is simple_byte
 11861  000D76  0A00               	xorlw	0	; case 0
 11862  000D78  B4D8               	btfsc	status,2,c
 11863  000D7A  D634               	goto	l521
 11864  000D7C  0A01               	xorlw	1	; case 1
 11865  000D7E  B4D8               	btfsc	status,2,c
 11866  000D80  D643               	goto	l523
 11867  000D82  0A03               	xorlw	3	; case 2
 11868  000D84  B4D8               	btfsc	status,2,c
 11869  000D86  D65F               	goto	l525
 11870  000D88  0A01               	xorlw	1	; case 3
 11871  000D8A  B4D8               	btfsc	status,2,c
 11872  000D8C  D685               	goto	l528
 11873  000D8E  0A07               	xorlw	7	; case 4
 11874  000D90  B4D8               	btfsc	status,2,c
 11875  000D92  D687               	goto	l529
 11876  000D94  0A01               	xorlw	1	; case 5
 11877  000D96  B4D8               	btfsc	status,2,c
 11878  000D98  D6A8               	goto	l531
 11879  000D9A  0A03               	xorlw	3	; case 6
 11880  000D9C  B4D8               	btfsc	status,2,c
 11881  000D9E  D6D5               	goto	l534
 11882  000DA0  0A01               	xorlw	1	; case 7
 11883  000DA2  B4D8               	btfsc	status,2,c
 11884  000DA4  D6D7               	goto	l535
 11885  000DA6  0A0F               	xorlw	15	; case 8
 11886  000DA8  B4D8               	btfsc	status,2,c
 11887  000DAA  D6F5               	goto	l537
 11888  000DAC  0A01               	xorlw	1	; case 9
 11889  000DAE  B4D8               	btfsc	status,2,c
 11890  000DB0  D728               	goto	l544
 11891  000DB2  0A03               	xorlw	3	; case 10
 11892  000DB4  B4D8               	btfsc	status,2,c
 11893  000DB6  D73D               	goto	l546
 11894  000DB8  0A01               	xorlw	1	; case 11
 11895  000DBA  B4D8               	btfsc	status,2,c
 11896  000DBC  D74C               	goto	l547
 11897  000DBE  0A07               	xorlw	7	; case 12
 11898  000DC0  B4D8               	btfsc	status,2,c
 11899  000DC2  D7B6               	goto	l561
 11900  000DC4  D7CF               	goto	l563
 11901  000DC6                     l522:
 11902  000DC6  FFFF               	dw	65535	; assembler added errata NOP
 11903  000DC8  0012               	return		;funcret
 11904  000DCA  FFFF               	dw	65535	; errata NOP
 11905  000DCC                     __end_of_acaoTesteBombas:
 11906                           	opt stack 0
 11907                           tblptru	equ	0xFF8
 11908                           tblptrh	equ	0xFF7
 11909                           tblptrl	equ	0xFF6
 11910                           tablat	equ	0xFF5
 11911                           prodh	equ	0xFF4
 11912                           prodl	equ	0xFF3
 11913                           intcon	equ	0xFF2
 11914                           postinc0	equ	0xFEE
 11915                           wreg	equ	0xFE8
 11916                           postdec1	equ	0xFE5
 11917                           fsr1l	equ	0xFE1
 11918                           indf2	equ	0xFDF
 11919                           postinc2	equ	0xFDE
 11920                           fsr2h	equ	0xFDA
 11921                           fsr2l	equ	0xFD9
 11922                           status	equ	0xFD8
 11923                           
 11924 ;; *************** function _salvarLOG *****************
 11925 ;; Defined at:
 11926 ;;		line 9 in file "logs.h"
 11927 ;; Parameters:    Size  Location     Type
 11928 ;;		None
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 11931 ;; Return value:  Size  Location     Type
 11932 ;;                  1    wreg      void 
 11933 ;; Registers used:
 11934 ;;		wreg, status,2, status,0, cstack
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11940 ;;      Params:         0       0       0       0       0       0       0
 11941 ;;      Locals:         0       2       0       0       0       0       0
 11942 ;;      Temps:          0       1       0       0       0       0       0
 11943 ;;      Totals:         0       3       0       0       0       0       0
 11944 ;;Total ram usage:        3 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:    9
 11947 ;; This function calls:
 11948 ;;		_readEEPROM_ext
 11949 ;;		_writeEEPROM_ext
 11950 ;; This function is called by:
 11951 ;;		_acaoTesteBombas
 11952 ;; This function uses a non-reentrant model
 11953 ;;
 11954                           
 11955                           	psect	text31
 11956  003BE2                     __ptext31:
 11957                           	opt stack 0
 11958  003BE2                     _salvarLOG:
 11959                           	opt stack 0
 11960  003BE2  FFFF               	dw	65535	; assembler added errata NOP
 11961                           
 11962                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 11963                           
 11964                           ;incstack = 0
 11965  003BE4  0E0E               	movlw	14
 11966  003BE6  EC61  F03A         	call	_readEEPROM_ext
 11967  003BEA  0100               	movlb	0	; () banked
 11968  003BEC  6F8E               	movwf	??_salvarLOG& (0+255),b
 11969  003BEE  518E               	movf	??_salvarLOG& (0+255),w,b
 11970  003BF0  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 11971  003BF2  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 11975  003BF4  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 11976  003BF6  E104               	bnz	u6060
 11977  003BF8  0E3C               	movlw	60
 11978  003BFA  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11979  003BFC  A0D8               	btfss	status,0,c
 11980  003BFE  D006               	goto	u6070
 11981  003C00                     u6060:
 11982                           
 11983                           ; BSR set to: 0
 11984  003C00  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 11985  003C02  E105               	bnz	l5824
 11986  003C04  0EFB               	movlw	251
 11987  003C06  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11988  003C08  A0D8               	btfss	status,0,c
 11989  003C0A  D005               	goto	l411
 11990  003C0C                     u6070:
 11991  003C0C  FFFF               	dw	65535	; assembler added errata NOP
 11992  003C0E                     l5824:
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;logs.h: 12: ultimoLogSalvo = 60;
 11996  003C0E  0E00               	movlw	0
 11997  003C10  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 11998  003C12  0E3C               	movlw	60
 11999  003C14  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 12000  003C16                     l411:
 12001  003C16  FFFF               	dw	65535	; assembler added errata NOP
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;logs.h: 13: }
 12005                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 12006                           
 12007                           ; BSR set to: 0
 12008  003C18  C0EB  F08C         	movff	__dia,writeEEPROM_ext@data
 12009  003C1C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12010  003C1E  ECA6  F039         	call	_writeEEPROM_ext
 12011                           
 12012                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 12013  003C22  C0EA  F08C         	movff	__mes,writeEEPROM_ext@data
 12014  003C26  0100               	movlb	0	; () banked
 12015  003C28  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12016  003C2A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12017  003C2C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12018  003C2E  ECA6  F039         	call	_writeEEPROM_ext
 12019                           
 12020                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 12021  003C32  C0E9  F08C         	movff	__ano,writeEEPROM_ext@data
 12022  003C36  0100               	movlb	0	; () banked
 12023  003C38  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12024  003C3A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12025  003C3C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12026  003C3E  ECA6  F039         	call	_writeEEPROM_ext
 12027                           
 12028                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 12029  003C42  C0EC  F08C         	movff	__hor,writeEEPROM_ext@data
 12030  003C46  0100               	movlb	0	; () banked
 12031  003C48  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12032  003C4A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12033  003C4C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12034  003C4E  ECA6  F039         	call	_writeEEPROM_ext
 12035                           
 12036                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 12037  003C52  C0ED  F08C         	movff	__min,writeEEPROM_ext@data
 12038  003C56  0100               	movlb	0	; () banked
 12039  003C58  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12040  003C5A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12041  003C5C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12042  003C5E  ECA6  F039         	call	_writeEEPROM_ext
 12043                           
 12044                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 12045  003C62  C0FD  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 12046  003C66  0100               	movlb	0	; () banked
 12047  003C68  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12048  003C6A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12049  003C6C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12050  003C6E  ECA6  F039         	call	_writeEEPROM_ext
 12051                           
 12052                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 12053  003C72  C0FC  F08C         	movff	_status_principal,writeEEPROM_ext@data
 12054  003C76  0100               	movlb	0	; () banked
 12055  003C78  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12056  003C7A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12057  003C7C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12058  003C7E  ECA6  F039         	call	_writeEEPROM_ext
 12059                           
 12060                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 12061  003C82  C0FB  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 12062  003C86  0100               	movlb	0	; () banked
 12063  003C88  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12064  003C8A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12065  003C8C  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12066  003C8E  ECA6  F039         	call	_writeEEPROM_ext
 12067                           
 12068                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 12069  003C92  0100               	movlb	0	; () banked
 12070  003C94  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12071  003C96  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12072  003C98  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 12073  003C9C  0E0E               	movlw	14
 12074  003C9E  ECA6  F039         	call	_writeEEPROM_ext
 12075  003CA2  0012               	return		;funcret
 12076  003CA4  FFFF               	dw	65535	; errata NOP
 12077  003CA6                     __end_of_salvarLOG:
 12078                           	opt stack 0
 12079                           tblptru	equ	0xFF8
 12080                           tblptrh	equ	0xFF7
 12081                           tblptrl	equ	0xFF6
 12082                           tablat	equ	0xFF5
 12083                           prodh	equ	0xFF4
 12084                           prodl	equ	0xFF3
 12085                           intcon	equ	0xFF2
 12086                           postinc0	equ	0xFEE
 12087                           wreg	equ	0xFE8
 12088                           postdec1	equ	0xFE5
 12089                           fsr1l	equ	0xFE1
 12090                           indf2	equ	0xFDF
 12091                           postinc2	equ	0xFDE
 12092                           fsr2h	equ	0xFDA
 12093                           fsr2l	equ	0xFD9
 12094                           status	equ	0xFD8
 12095                           
 12096 ;; *************** function _writeEEPROM_ext *****************
 12097 ;; Defined at:
 12098 ;;		line 13 in file "eeprom.h"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;  adress          1    wreg     unsigned char 
 12101 ;;  data            1   12[BANK0 ] unsigned char 
 12102 ;; Auto vars:     Size  Location     Type
 12103 ;;  adress          1   13[BANK0 ] unsigned char 
 12104 ;; Return value:  Size  Location     Type
 12105 ;;                  1    wreg      void 
 12106 ;; Registers used:
 12107 ;;		wreg, status,2, status,0, cstack
 12108 ;; Tracked objects:
 12109 ;;		On entry : 0/0
 12110 ;;		On exit  : 0/0
 12111 ;;		Unchanged: 0/0
 12112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12113 ;;      Params:         0       1       0       0       0       0       0
 12114 ;;      Locals:         0       1       0       0       0       0       0
 12115 ;;      Temps:          0       0       0       0       0       0       0
 12116 ;;      Totals:         0       2       0       0       0       0       0
 12117 ;;Total ram usage:        2 bytes
 12118 ;; Hardware stack levels used:    1
 12119 ;; Hardware stack levels required when called:    8
 12120 ;; This function calls:
 12121 ;;		_I2C_Start
 12122 ;;		_I2C_Stop
 12123 ;;		_I2C_Write
 12124 ;;		_delay
 12125 ;; This function is called by:
 12126 ;;		_salvarLOG
 12127 ;;		_verificarIntervaloTesteBombas
 12128 ;;		_acaoTesteBombas
 12129 ;;		_lerParametros
 12130 ;;		_tela_testeBombas
 12131 ;;		_configuraTelefones
 12132 ;;		_configurarEstacionaria
 12133 ;;		_ajusteSP_Bombas
 12134 ;;		_apagarLOGS
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           	psect	text32
 12139  00734C                     __ptext32:
 12140                           	opt stack 0
 12141  00734C                     _writeEEPROM_ext:
 12142                           	opt stack 0
 12143  00734C  FFFF               	dw	65535	; assembler added errata NOP
 12144                           
 12145                           ;incstack = 0
 12146                           ;writeEEPROM_ext@adress stored from wreg
 12147  00734E  0100               	movlb	0	; () banked
 12148  007350  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 12149                           
 12150                           ;eeprom.h: 15: I2C_Start();
 12151  007352  EC5F  F036         	call	_I2C_Start	;wreg free
 12152                           
 12153                           ;eeprom.h: 16: I2C_Write(0xA0);
 12154  007356  0E00               	movlw	0
 12155  007358  0100               	movlb	0	; () banked
 12156  00735A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12157  00735C  0EA0               	movlw	160
 12158  00735E  6F8A               	movwf	I2C_Write@d& (0+255),b
 12159  007360  EC78  F036         	call	_I2C_Write	;wreg free
 12160                           
 12161                           ;eeprom.h: 18: I2C_Write(adress);
 12162  007364  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 12163  007368  0100               	movlb	0	; () banked
 12164  00736A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12165  00736C  EC78  F036         	call	_I2C_Write	;wreg free
 12166                           
 12167                           ;eeprom.h: 19: I2C_Write(data);
 12168  007370  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 12169  007374  0100               	movlb	0	; () banked
 12170  007376  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12171  007378  EC78  F036         	call	_I2C_Write	;wreg free
 12172                           
 12173                           ;eeprom.h: 20: I2C_Stop();
 12174  00737C  EC65  F036         	call	_I2C_Stop	;wreg free
 12175                           
 12176                           ;eeprom.h: 21: delay(15);
 12177  007380  0E00               	movlw	0
 12178  007382  0100               	movlb	0	; () banked
 12179  007384  6F81               	movwf	(delay@x+1)& (0+255),b
 12180  007386  0E0F               	movlw	15
 12181  007388  6F80               	movwf	delay@x& (0+255),b
 12182  00738A  ECA8  F037         	call	_delay	;wreg free
 12183  00738E  0012               	return		;funcret
 12184  007390  FFFF               	dw	65535	; errata NOP
 12185  007392                     __end_of_writeEEPROM_ext:
 12186                           	opt stack 0
 12187                           tblptru	equ	0xFF8
 12188                           tblptrh	equ	0xFF7
 12189                           tblptrl	equ	0xFF6
 12190                           tablat	equ	0xFF5
 12191                           prodh	equ	0xFF4
 12192                           prodl	equ	0xFF3
 12193                           intcon	equ	0xFF2
 12194                           postinc0	equ	0xFEE
 12195                           wreg	equ	0xFE8
 12196                           postdec1	equ	0xFE5
 12197                           fsr1l	equ	0xFE1
 12198                           indf2	equ	0xFDF
 12199                           postinc2	equ	0xFDE
 12200                           fsr2h	equ	0xFDA
 12201                           fsr2l	equ	0xFD9
 12202                           status	equ	0xFD8
 12203                           
 12204 ;; *************** function _readEEPROM_ext *****************
 12205 ;; Defined at:
 12206 ;;		line 26 in file "eeprom.h"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;  adress          1    wreg     unsigned char 
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;  adress          1   12[BANK0 ] unsigned char 
 12211 ;;  data            1   13[BANK0 ] unsigned char 
 12212 ;; Return value:  Size  Location     Type
 12213 ;;                  1    wreg      unsigned char 
 12214 ;; Registers used:
 12215 ;;		wreg, status,2, status,0, cstack
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12221 ;;      Params:         0       0       0       0       0       0       0
 12222 ;;      Locals:         0       2       0       0       0       0       0
 12223 ;;      Temps:          0       0       0       0       0       0       0
 12224 ;;      Totals:         0       2       0       0       0       0       0
 12225 ;;Total ram usage:        2 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; Hardware stack levels required when called:    8
 12228 ;; This function calls:
 12229 ;;		_I2C_Read
 12230 ;;		_I2C_Restart
 12231 ;;		_I2C_Start
 12232 ;;		_I2C_Stop
 12233 ;;		_I2C_Write
 12234 ;; This function is called by:
 12235 ;;		_readEEPROM16_ext
 12236 ;;		_salvarLOG
 12237 ;;		_acaoTesteBombas
 12238 ;;		_lerParametros
 12239 ;;		_dataLoger
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           	psect	text33
 12244  0074C2                     __ptext33:
 12245                           	opt stack 0
 12246  0074C2                     _readEEPROM_ext:
 12247                           	opt stack 0
 12248  0074C2  FFFF               	dw	65535	; assembler added errata NOP
 12249                           
 12250                           ;incstack = 0
 12251                           ;readEEPROM_ext@adress stored from wreg
 12252  0074C4  0100               	movlb	0	; () banked
 12253  0074C6  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 12254                           
 12255                           ;eeprom.h: 27: I2C_Start();
 12256  0074C8  EC5F  F036         	call	_I2C_Start	;wreg free
 12257                           
 12258                           ;eeprom.h: 28: I2C_Write(0xA0);
 12259  0074CC  0E00               	movlw	0
 12260  0074CE  0100               	movlb	0	; () banked
 12261  0074D0  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12262  0074D2  0EA0               	movlw	160
 12263  0074D4  6F8A               	movwf	I2C_Write@d& (0+255),b
 12264  0074D6  EC78  F036         	call	_I2C_Write	;wreg free
 12265                           
 12266                           ;eeprom.h: 30: I2C_Write(adress);
 12267  0074DA  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 12268  0074DE  0100               	movlb	0	; () banked
 12269  0074E0  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12270  0074E2  EC78  F036         	call	_I2C_Write	;wreg free
 12271                           
 12272                           ;eeprom.h: 31: I2C_Restart();
 12273  0074E6  EC6B  F036         	call	_I2C_Restart	;wreg free
 12274                           
 12275                           ;eeprom.h: 32: I2C_Write(0xA1);
 12276  0074EA  0E00               	movlw	0
 12277  0074EC  0100               	movlb	0	; () banked
 12278  0074EE  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12279  0074F0  0EA1               	movlw	161
 12280  0074F2  6F8A               	movwf	I2C_Write@d& (0+255),b
 12281  0074F4  EC78  F036         	call	_I2C_Write	;wreg free
 12282                           
 12283                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 12284  0074F8  0E00               	movlw	0
 12285  0074FA  0100               	movlb	0	; () banked
 12286  0074FC  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 12287  0074FE  0E00               	movlw	0
 12288  007500  6F81               	movwf	I2C_Read@a& (0+255),b
 12289  007502  EC4E  F038         	call	_I2C_Read	;wreg free
 12290  007506  0100               	movlb	0	; () banked
 12291  007508  5181               	movf	?_I2C_Read& (0+255),w,b
 12292  00750A  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 12293                           
 12294                           ;eeprom.h: 34: I2C_Stop();
 12295  00750C  EC65  F036         	call	_I2C_Stop	;wreg free
 12296                           
 12297                           ;eeprom.h: 35: return data;
 12298  007510  0100               	movlb	0	; () banked
 12299  007512  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 12300                           
 12301                           ; BSR set to: 0
 12302                           
 12303                           ; BSR set to: 0
 12304  007514  0012               	return		;funcret
 12305  007516  FFFF               	dw	65535	; errata NOP
 12306  007518                     __end_of_readEEPROM_ext:
 12307                           	opt stack 0
 12308                           tblptru	equ	0xFF8
 12309                           tblptrh	equ	0xFF7
 12310                           tblptrl	equ	0xFF6
 12311                           tablat	equ	0xFF5
 12312                           prodh	equ	0xFF4
 12313                           prodl	equ	0xFF3
 12314                           intcon	equ	0xFF2
 12315                           postinc0	equ	0xFEE
 12316                           wreg	equ	0xFE8
 12317                           postdec1	equ	0xFE5
 12318                           fsr1l	equ	0xFE1
 12319                           indf2	equ	0xFDF
 12320                           postinc2	equ	0xFDE
 12321                           fsr2h	equ	0xFDA
 12322                           fsr2l	equ	0xFD9
 12323                           status	equ	0xFD8
 12324                           
 12325 ;; *************** function _I2C_Restart *****************
 12326 ;; Defined at:
 12327 ;;		line 31 in file "I2C.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;		None
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;		None
 12332 ;; Return value:  Size  Location     Type
 12333 ;;                  1    wreg      void 
 12334 ;; Registers used:
 12335 ;;		wreg, status,2, status,0, cstack
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12341 ;;      Params:         0       0       0       0       0       0       0
 12342 ;;      Locals:         0       0       0       0       0       0       0
 12343 ;;      Temps:          0       0       0       0       0       0       0
 12344 ;;      Totals:         0       0       0       0       0       0       0
 12345 ;;Total ram usage:        0 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; Hardware stack levels required when called:    7
 12348 ;; This function calls:
 12349 ;;		_I2C_Wait
 12350 ;; This function is called by:
 12351 ;;		_getDS1307TimeDate
 12352 ;;		_readEEPROM_ext
 12353 ;;		_getDS1307Time
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           	psect	text34
 12358  006CD6                     __ptext34:
 12359                           	opt stack 0
 12360  006CD6                     _I2C_Restart:
 12361                           	opt stack 0
 12362  006CD6  FFFF               	dw	65535	; assembler added errata NOP
 12363                           
 12364                           ;I2C.c: 32: I2C_Wait();
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;incstack = 0
 12368  006CD8  ECB0  F036         	call	_I2C_Wait	;wreg free
 12369                           
 12370                           ;I2C.c: 33: RSEN = 1;
 12371  006CDC  82C5               	bsf	4037,1,c	;volatile
 12372  006CDE  0012               	return		;funcret
 12373  006CE0  FFFF               	dw	65535	; errata NOP
 12374  006CE2                     __end_of_I2C_Restart:
 12375                           	opt stack 0
 12376                           tblptru	equ	0xFF8
 12377                           tblptrh	equ	0xFF7
 12378                           tblptrl	equ	0xFF6
 12379                           tablat	equ	0xFF5
 12380                           prodh	equ	0xFF4
 12381                           prodl	equ	0xFF3
 12382                           intcon	equ	0xFF2
 12383                           postinc0	equ	0xFEE
 12384                           wreg	equ	0xFE8
 12385                           postdec1	equ	0xFE5
 12386                           fsr1l	equ	0xFE1
 12387                           indf2	equ	0xFDF
 12388                           postinc2	equ	0xFDE
 12389                           fsr2h	equ	0xFDA
 12390                           fsr2l	equ	0xFD9
 12391                           status	equ	0xFD8
 12392                           
 12393 ;; *************** function _I2C_Read *****************
 12394 ;; Defined at:
 12395 ;;		line 47 in file "I2C.c"
 12396 ;; Parameters:    Size  Location     Type
 12397 ;;  a               2    1[BANK0 ] unsigned short 
 12398 ;; Auto vars:     Size  Location     Type
 12399 ;;  temp            2    3[BANK0 ] unsigned short 
 12400 ;; Return value:  Size  Location     Type
 12401 ;;                  2    1[BANK0 ] unsigned short 
 12402 ;; Registers used:
 12403 ;;		wreg, status,2, status,0, cstack
 12404 ;; Tracked objects:
 12405 ;;		On entry : 0/0
 12406 ;;		On exit  : 0/0
 12407 ;;		Unchanged: 0/0
 12408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12409 ;;      Params:         0       2       0       0       0       0       0
 12410 ;;      Locals:         0       2       0       0       0       0       0
 12411 ;;      Temps:          0       0       0       0       0       0       0
 12412 ;;      Totals:         0       4       0       0       0       0       0
 12413 ;;Total ram usage:        4 bytes
 12414 ;; Hardware stack levels used:    1
 12415 ;; Hardware stack levels required when called:    7
 12416 ;; This function calls:
 12417 ;;		_I2C_Wait
 12418 ;; This function is called by:
 12419 ;;		_getDS1307TimeDate
 12420 ;;		_readEEPROM_ext
 12421 ;;		_getDS1307Time
 12422 ;; This function uses a non-reentrant model
 12423 ;;
 12424                           
 12425                           	psect	text35
 12426  00709C                     __ptext35:
 12427                           	opt stack 0
 12428  00709C                     _I2C_Read:
 12429                           	opt stack 0
 12430  00709C  FFFF               	dw	65535	; assembler added errata NOP
 12431                           
 12432                           ;I2C.c: 48: unsigned short temp;
 12433                           ;I2C.c: 49: I2C_Wait();
 12434                           
 12435                           ;incstack = 0
 12436  00709E  ECB0  F036         	call	_I2C_Wait	;wreg free
 12437                           
 12438                           ;I2C.c: 50: RCEN = 1;
 12439  0070A2  86C5               	bsf	4037,3,c	;volatile
 12440                           
 12441                           ;I2C.c: 51: I2C_Wait();
 12442  0070A4  ECB0  F036         	call	_I2C_Wait	;wreg free
 12443                           
 12444                           ;I2C.c: 52: temp = SSPBUF;
 12445  0070A8  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 12446  0070AC  0100               	movlb	0	; () banked
 12447  0070AE  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 12448                           
 12449                           ;I2C.c: 53: I2C_Wait();
 12450  0070B0  ECB0  F036         	call	_I2C_Wait	;wreg free
 12451                           
 12452                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 12453  0070B4  0100               	movlb	0	; () banked
 12454  0070B6  5181               	movf	I2C_Read@a& (0+255),w,b
 12455  0070B8  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 12456  0070BA  A4D8               	btfss	status,2,c
 12457  0070BC  D002               	goto	u4760
 12458  0070BE  8AC5               	bsf	4037,5,c	;volatile
 12459  0070C0  D002               	goto	u4775
 12460  0070C2                     u4760:
 12461  0070C2  FFFF               	dw	65535	; assembler added errata NOP
 12462  0070C4  9AC5               	bcf	4037,5,c	;volatile
 12463  0070C6                     u4775:
 12464  0070C6  FFFF               	dw	65535	; assembler added errata NOP
 12465                           
 12466                           ;I2C.c: 55: ACKEN = 1;
 12467  0070C8  88C5               	bsf	4037,4,c	;volatile
 12468                           
 12469                           ;I2C.c: 56: return temp;
 12470  0070CA  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 12471  0070CE  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 12472  0070D2  0012               	return		;funcret
 12473  0070D4  FFFF               	dw	65535	; errata NOP
 12474  0070D6                     __end_of_I2C_Read:
 12475                           	opt stack 0
 12476                           tblptru	equ	0xFF8
 12477                           tblptrh	equ	0xFF7
 12478                           tblptrl	equ	0xFF6
 12479                           tablat	equ	0xFF5
 12480                           prodh	equ	0xFF4
 12481                           prodl	equ	0xFF3
 12482                           intcon	equ	0xFF2
 12483                           postinc0	equ	0xFEE
 12484                           wreg	equ	0xFE8
 12485                           postdec1	equ	0xFE5
 12486                           fsr1l	equ	0xFE1
 12487                           indf2	equ	0xFDF
 12488                           postinc2	equ	0xFDE
 12489                           fsr2h	equ	0xFDA
 12490                           fsr2l	equ	0xFD9
 12491                           status	equ	0xFD8
 12492                           
 12493 ;; *************** function _intToFloatStr *****************
 12494 ;; Defined at:
 12495 ;;		line 48 in file "function.c"
 12496 ;; Parameters:    Size  Location     Type
 12497 ;;  valor           1    wreg     unsigned char 
 12498 ;; Auto vars:     Size  Location     Type
 12499 ;;  valor           1   63[BANK0 ] unsigned char 
 12500 ;;  conv            4   59[BANK0 ] unsigned char [4]
 12501 ;;  end             4   55[BANK0 ] unsigned char [4]
 12502 ;;  pr              2   64[BANK0 ] int 
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  2   53[BANK0 ] PTR unsigned char 
 12505 ;; Registers used:
 12506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12512 ;;      Params:         0       2       0       0       0       0       0
 12513 ;;      Locals:         0      11       0       0       0       0       0
 12514 ;;      Temps:          0       0       0       0       0       0       0
 12515 ;;      Totals:         0      13       0       0       0       0       0
 12516 ;;Total ram usage:       13 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    9
 12519 ;; This function calls:
 12520 ;;		___awdiv
 12521 ;;		___awmod
 12522 ;;		_sprintf
 12523 ;; This function is called by:
 12524 ;;		_acaoTesteBombas
 12525 ;;		_telaPrincipal
 12526 ;;		_ajusteSP_Bombas
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           	psect	text36
 12531  007A08                     __ptext36:
 12532                           	opt stack 0
 12533  007A08                     _intToFloatStr:
 12534                           	opt stack 0
 12535  007A08  FFFF               	dw	65535	; assembler added errata NOP
 12536                           
 12537                           ;incstack = 0
 12538                           ;intToFloatStr@valor stored from wreg
 12539  007A0A  0100               	movlb	0	; () banked
 12540  007A0C  6FBF               	movwf	intToFloatStr@valor& (0+255),b
 12541                           
 12542                           ;function.c: 49: int pr = valor >= 99 ? 99 : valor;
 12543  007A0E  0E63               	movlw	99
 12544  007A10  0100               	movlb	0	; () banked
 12545  007A12  61BF               	cpfslt	intToFloatStr@valor& (0+255),b
 12546  007A14  D004               	goto	l1016
 12547                           
 12548                           ; BSR set to: 0
 12549  007A16  C0BF  F0C0         	movff	intToFloatStr@valor,intToFloatStr@pr
 12550  007A1A  6BC1               	clrf	(intToFloatStr@pr+1)& (0+255),b
 12551  007A1C  D005               	goto	l1018
 12552  007A1E                     l1016:
 12553  007A1E  FFFF               	dw	65535	; assembler added errata NOP
 12554                           
 12555                           ; BSR set to: 0
 12556                           
 12557                           ; BSR set to: 0
 12558  007A20  0E00               	movlw	0
 12559  007A22  6FC1               	movwf	(intToFloatStr@pr+1)& (0+255),b
 12560  007A24  0E63               	movlw	99
 12561  007A26  6FC0               	movwf	intToFloatStr@pr& (0+255),b
 12562  007A28                     l1018:
 12563  007A28  FFFF               	dw	65535	; assembler added errata NOP
 12564                           
 12565                           ; BSR set to: 0
 12566                           ;function.c: 50: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 12567                           
 12568                           ; BSR set to: 0
 12569  007A2A  C1BC  F0BB         	movff	intToFloatStr@F2544,intToFloatStr@conv
 12570  007A2E  C1BD  F0BC         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 12571  007A32  C1BE  F0BD         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 12572  007A36  C1BF  F0BE         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 12573                           
 12574                           ; BSR set to: 0
 12575                           ;function.c: 51: conv[0] = (char) ((pr / 10) + 48);
 12576  007A3A  C0C0  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 12577  007A3E  C0C1  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 12578  007A42  0E00               	movlw	0
 12579  007A44  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 12580  007A46  0E0A               	movlw	10
 12581  007A48  6F82               	movwf	___awdiv@divisor& (0+255),b
 12582  007A4A  EC03  F01F         	call	___awdiv	;wreg free
 12583  007A4E  0100               	movlb	0	; () banked
 12584  007A50  5180               	movf	?___awdiv& (0+255),w,b
 12585  007A52  0F30               	addlw	48
 12586  007A54  6FBB               	movwf	intToFloatStr@conv& (0+255),b
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;function.c: 52: conv[1] = (char) '.';
 12590  007A56  0E2E               	movlw	46
 12591  007A58  6FBC               	movwf	(intToFloatStr@conv+1)& (0+255),b
 12592                           
 12593                           ;function.c: 53: conv[2] = (char) ((pr % 10) + 48);
 12594  007A5A  C0C0  F080         	movff	intToFloatStr@pr,___awmod@dividend
 12595  007A5E  C0C1  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 12596  007A62  0E00               	movlw	0
 12597  007A64  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 12598  007A66  0E0A               	movlw	10
 12599  007A68  6F82               	movwf	___awmod@divisor& (0+255),b
 12600  007A6A  EC34  F03C         	call	___awmod	;wreg free
 12601  007A6E  0100               	movlb	0	; () banked
 12602  007A70  5180               	movf	?___awmod& (0+255),w,b
 12603  007A72  0F30               	addlw	48
 12604  007A74  6FBD               	movwf	(intToFloatStr@conv+2)& (0+255),b
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;function.c: 54: conv[3] = '\0';
 12608  007A76  0E00               	movlw	0
 12609  007A78  6FBE               	movwf	(intToFloatStr@conv+3)& (0+255),b
 12610                           
 12611                           ; BSR set to: 0
 12612                           ;function.c: 55: char end[4];
 12613                           ;function.c: 56: sprintf(end , conv);
 12614  007A7A  0EB7               	movlw	low intToFloatStr@end
 12615  007A7C  6FA1               	movwf	sprintf@wh& (0+255),b
 12616  007A7E  0E00               	movlw	high intToFloatStr@end
 12617  007A80  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12618  007A82  0EBB               	movlw	low intToFloatStr@conv
 12619  007A84  6FA3               	movwf	sprintf@f& (0+255),b
 12620  007A86  0E00               	movlw	high intToFloatStr@conv
 12621  007A88  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12622  007A8A  ECC9  F039         	call	_sprintf	;wreg free
 12623                           
 12624                           ;function.c: 57: return end;
 12625  007A8E  0EB7               	movlw	low intToFloatStr@end
 12626  007A90  0100               	movlb	0	; () banked
 12627  007A92  6FB5               	movwf	?_intToFloatStr& (0+255),b
 12628  007A94  0E00               	movlw	high intToFloatStr@end
 12629  007A96  6FB6               	movwf	(?_intToFloatStr+1)& (0+255),b
 12630                           
 12631                           ; BSR set to: 0
 12632                           
 12633                           ; BSR set to: 0
 12634  007A98  0012               	return		;funcret
 12635  007A9A  FFFF               	dw	65535	; errata NOP
 12636  007A9C                     __end_of_intToFloatStr:
 12637                           	opt stack 0
 12638                           tblptru	equ	0xFF8
 12639                           tblptrh	equ	0xFF7
 12640                           tblptrl	equ	0xFF6
 12641                           tablat	equ	0xFF5
 12642                           prodh	equ	0xFF4
 12643                           prodl	equ	0xFF3
 12644                           intcon	equ	0xFF2
 12645                           postinc0	equ	0xFEE
 12646                           wreg	equ	0xFE8
 12647                           postdec1	equ	0xFE5
 12648                           fsr1l	equ	0xFE1
 12649                           indf2	equ	0xFDF
 12650                           postinc2	equ	0xFDE
 12651                           fsr2h	equ	0xFDA
 12652                           fsr2l	equ	0xFD9
 12653                           status	equ	0xFD8
 12654                           
 12655 ;; *************** function ___awmod *****************
 12656 ;; Defined at:
 12657 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 12658 ;; Parameters:    Size  Location     Type
 12659 ;;  dividend        2    0[BANK0 ] int 
 12660 ;;  divisor         2    2[BANK0 ] int 
 12661 ;; Auto vars:     Size  Location     Type
 12662 ;;  sign            1    5[BANK0 ] unsigned char 
 12663 ;;  counter         1    4[BANK0 ] unsigned char 
 12664 ;; Return value:  Size  Location     Type
 12665 ;;                  2    0[BANK0 ] int 
 12666 ;; Registers used:
 12667 ;;		wreg, status,2, status,0
 12668 ;; Tracked objects:
 12669 ;;		On entry : 0/0
 12670 ;;		On exit  : 0/0
 12671 ;;		Unchanged: 0/0
 12672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12673 ;;      Params:         0       4       0       0       0       0       0
 12674 ;;      Locals:         0       2       0       0       0       0       0
 12675 ;;      Temps:          0       0       0       0       0       0       0
 12676 ;;      Totals:         0       6       0       0       0       0       0
 12677 ;;Total ram usage:        6 bytes
 12678 ;; Hardware stack levels used:    1
 12679 ;; Hardware stack levels required when called:    6
 12680 ;; This function calls:
 12681 ;;		Nothing
 12682 ;; This function is called by:
 12683 ;;		_DECtoBCD
 12684 ;;		_intToFloatStr
 12685 ;;		_DECtoHEX
 12686 ;; This function uses a non-reentrant model
 12687 ;;
 12688                           
 12689                           	psect	text37
 12690  007868                     __ptext37:
 12691                           	opt stack 0
 12692  007868                     ___awmod:
 12693                           	opt stack 0
 12694  007868  FFFF               	dw	65535	; assembler added errata NOP
 12695                           
 12696                           ; BSR set to: 0
 12697                           ;incstack = 0
 12698  00786A  0E00               	movlw	0
 12699  00786C  0100               	movlb	0	; () banked
 12700  00786E  6F85               	movwf	___awmod@sign& (0+255),b
 12701                           
 12702                           ; BSR set to: 0
 12703  007870  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 12704  007872  D006               	goto	l1300
 12705                           
 12706                           ; BSR set to: 0
 12707  007874  6D80               	negf	___awmod@dividend& (0+255),b
 12708  007876  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12709  007878  B0D8               	btfsc	status,0,c
 12710  00787A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12711                           
 12712                           ; BSR set to: 0
 12713  00787C  0E01               	movlw	1
 12714  00787E  6F85               	movwf	___awmod@sign& (0+255),b
 12715  007880                     l1300:
 12716  007880  FFFF               	dw	65535	; assembler added errata NOP
 12717                           
 12718                           ; BSR set to: 0
 12719                           
 12720                           ; BSR set to: 0
 12721  007882  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12722  007884  D004               	goto	l1301
 12723                           
 12724                           ; BSR set to: 0
 12725  007886  6D82               	negf	___awmod@divisor& (0+255),b
 12726  007888  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12727  00788A  B0D8               	btfsc	status,0,c
 12728  00788C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12729  00788E                     l1301:
 12730  00788E  FFFF               	dw	65535	; assembler added errata NOP
 12731                           
 12732                           ; BSR set to: 0
 12733                           
 12734                           ; BSR set to: 0
 12735  007890  5182               	movf	___awmod@divisor& (0+255),w,b
 12736  007892  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12737  007894  B4D8               	btfsc	status,2,c
 12738  007896  D01C               	goto	l1308
 12739                           
 12740                           ; BSR set to: 0
 12741  007898  0E01               	movlw	1
 12742  00789A  6F84               	movwf	___awmod@counter& (0+255),b
 12743  00789C  D005               	goto	l1303
 12744  00789E  FFFF               	dw	65535	; assembler added errata NOP
 12745                           
 12746                           ; BSR set to: 0
 12747                           
 12748                           ; BSR set to: 0
 12749  0078A0  90D8               	bcf	status,0,c
 12750  0078A2  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12751  0078A4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12752  0078A6  2B84               	incf	___awmod@counter& (0+255),f,b
 12753  0078A8                     l1303:
 12754  0078A8  FFFF               	dw	65535	; assembler added errata NOP
 12755                           
 12756                           ; BSR set to: 0
 12757                           
 12758                           ; BSR set to: 0
 12759  0078AA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12760  0078AC  D7F8               	goto	l1304
 12761  0078AE                     u5400:
 12762  0078AE  FFFF               	dw	65535	; assembler added errata NOP
 12763                           
 12764                           ; BSR set to: 0
 12765                           
 12766                           ; BSR set to: 0
 12767                           
 12768                           ; BSR set to: 0
 12769  0078B0  5182               	movf	___awmod@divisor& (0+255),w,b
 12770  0078B2  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12771  0078B4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12772  0078B6  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12773  0078B8  A0D8               	btfss	status,0,c
 12774  0078BA  D004               	goto	l1307
 12775                           
 12776                           ; BSR set to: 0
 12777  0078BC  5182               	movf	___awmod@divisor& (0+255),w,b
 12778  0078BE  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12779  0078C0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12780  0078C2  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12781  0078C4                     l1307:
 12782  0078C4  FFFF               	dw	65535	; assembler added errata NOP
 12783                           
 12784                           ; BSR set to: 0
 12785                           
 12786                           ; BSR set to: 0
 12787  0078C6  90D8               	bcf	status,0,c
 12788  0078C8  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12789  0078CA  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12790                           
 12791                           ; BSR set to: 0
 12792  0078CC  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12793  0078CE  D7EF               	goto	u5400
 12794  0078D0                     l1308:
 12795  0078D0  FFFF               	dw	65535	; assembler added errata NOP
 12796                           
 12797                           ; BSR set to: 0
 12798                           
 12799                           ; BSR set to: 0
 12800                           
 12801                           ; BSR set to: 0
 12802  0078D2  5185               	movf	___awmod@sign& (0+255),w,b
 12803  0078D4  B4D8               	btfsc	status,2,c
 12804  0078D6  D004               	goto	l1309
 12805                           
 12806                           ; BSR set to: 0
 12807  0078D8  6D80               	negf	___awmod@dividend& (0+255),b
 12808  0078DA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12809  0078DC  B0D8               	btfsc	status,0,c
 12810  0078DE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12811  0078E0                     l1309:
 12812  0078E0  FFFF               	dw	65535	; assembler added errata NOP
 12813                           
 12814                           ; BSR set to: 0
 12815                           
 12816                           ; BSR set to: 0
 12817  0078E2  C080  F080         	movff	___awmod@dividend,?___awmod
 12818  0078E6  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12819                           
 12820                           ; BSR set to: 0
 12821                           
 12822                           ; BSR set to: 0
 12823  0078EA  0012               	return		;funcret
 12824  0078EC  FFFF               	dw	65535	; errata NOP
 12825  0078EE                     __end_of___awmod:
 12826                           	opt stack 0
 12827                           tblptru	equ	0xFF8
 12828                           tblptrh	equ	0xFF7
 12829                           tblptrl	equ	0xFF6
 12830                           tablat	equ	0xFF5
 12831                           prodh	equ	0xFF4
 12832                           prodl	equ	0xFF3
 12833                           intcon	equ	0xFF2
 12834                           postinc0	equ	0xFEE
 12835                           wreg	equ	0xFE8
 12836                           postdec1	equ	0xFE5
 12837                           fsr1l	equ	0xFE1
 12838                           indf2	equ	0xFDF
 12839                           postinc2	equ	0xFDE
 12840                           fsr2h	equ	0xFDA
 12841                           fsr2l	equ	0xFD9
 12842                           status	equ	0xFD8
 12843                           
 12844 ;; *************** function ___awdiv *****************
 12845 ;; Defined at:
 12846 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12847 ;; Parameters:    Size  Location     Type
 12848 ;;  dividend        2    0[BANK0 ] int 
 12849 ;;  divisor         2    2[BANK0 ] int 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  quotient        2    6[BANK0 ] int 
 12852 ;;  sign            1    5[BANK0 ] unsigned char 
 12853 ;;  counter         1    4[BANK0 ] unsigned char 
 12854 ;; Return value:  Size  Location     Type
 12855 ;;                  2    0[BANK0 ] int 
 12856 ;; Registers used:
 12857 ;;		wreg, status,2, status,0
 12858 ;; Tracked objects:
 12859 ;;		On entry : 0/0
 12860 ;;		On exit  : 0/0
 12861 ;;		Unchanged: 0/0
 12862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12863 ;;      Params:         0       4       0       0       0       0       0
 12864 ;;      Locals:         0       4       0       0       0       0       0
 12865 ;;      Temps:          0       0       0       0       0       0       0
 12866 ;;      Totals:         0       8       0       0       0       0       0
 12867 ;;Total ram usage:        8 bytes
 12868 ;; Hardware stack levels used:    1
 12869 ;; Hardware stack levels required when called:    6
 12870 ;; This function calls:
 12871 ;;		Nothing
 12872 ;; This function is called by:
 12873 ;;		_dataLoger
 12874 ;;		_DECtoBCD
 12875 ;;		_intToFloatStr
 12876 ;;		_DECtoHEX
 12877 ;; This function uses a non-reentrant model
 12878 ;;
 12879                           
 12880                           	psect	text38
 12881  003E06                     __ptext38:
 12882                           	opt stack 0
 12883  003E06                     ___awdiv:
 12884                           	opt stack 0
 12885  003E06  FFFF               	dw	65535	; assembler added errata NOP
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;incstack = 0
 12889  003E08  0E00               	movlw	0
 12890  003E0A  0100               	movlb	0	; () banked
 12891  003E0C  6F85               	movwf	___awdiv@sign& (0+255),b
 12892                           
 12893                           ; BSR set to: 0
 12894  003E0E  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12895  003E10  D006               	goto	l1287
 12896                           
 12897                           ; BSR set to: 0
 12898  003E12  6D82               	negf	___awdiv@divisor& (0+255),b
 12899  003E14  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12900  003E16  B0D8               	btfsc	status,0,c
 12901  003E18  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12902                           
 12903                           ; BSR set to: 0
 12904  003E1A  0E01               	movlw	1
 12905  003E1C  6F85               	movwf	___awdiv@sign& (0+255),b
 12906  003E1E                     l1287:
 12907  003E1E  FFFF               	dw	65535	; assembler added errata NOP
 12908                           
 12909                           ; BSR set to: 0
 12910                           
 12911                           ; BSR set to: 0
 12912  003E20  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12913  003E22  D006               	goto	l1288
 12914                           
 12915                           ; BSR set to: 0
 12916  003E24  6D80               	negf	___awdiv@dividend& (0+255),b
 12917  003E26  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12918  003E28  B0D8               	btfsc	status,0,c
 12919  003E2A  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12920                           
 12921                           ; BSR set to: 0
 12922  003E2C  0E01               	movlw	1
 12923  003E2E  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 12924  003E30                     l1288:
 12925  003E30  FFFF               	dw	65535	; assembler added errata NOP
 12926                           
 12927                           ; BSR set to: 0
 12928                           
 12929                           ; BSR set to: 0
 12930  003E32  0E00               	movlw	0
 12931  003E34  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 12932  003E36  0E00               	movlw	0
 12933  003E38  6F86               	movwf	___awdiv@quotient& (0+255),b
 12934                           
 12935                           ; BSR set to: 0
 12936  003E3A  5182               	movf	___awdiv@divisor& (0+255),w,b
 12937  003E3C  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12938  003E3E  B4D8               	btfsc	status,2,c
 12939  003E40  D020               	goto	l1295
 12940                           
 12941                           ; BSR set to: 0
 12942  003E42  0E01               	movlw	1
 12943  003E44  6F84               	movwf	___awdiv@counter& (0+255),b
 12944  003E46  D005               	goto	l1290
 12945  003E48  FFFF               	dw	65535	; assembler added errata NOP
 12946                           
 12947                           ; BSR set to: 0
 12948                           
 12949                           ; BSR set to: 0
 12950  003E4A  90D8               	bcf	status,0,c
 12951  003E4C  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 12952  003E4E  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12953  003E50  2B84               	incf	___awdiv@counter& (0+255),f,b
 12954  003E52                     l1290:
 12955  003E52  FFFF               	dw	65535	; assembler added errata NOP
 12956                           
 12957                           ; BSR set to: 0
 12958                           
 12959                           ; BSR set to: 0
 12960  003E54  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12961  003E56  D7F8               	goto	l1291
 12962  003E58                     u5340:
 12963  003E58  FFFF               	dw	65535	; assembler added errata NOP
 12964                           
 12965                           ; BSR set to: 0
 12966                           
 12967                           ; BSR set to: 0
 12968                           
 12969                           ; BSR set to: 0
 12970  003E5A  90D8               	bcf	status,0,c
 12971  003E5C  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 12972  003E5E  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12973                           
 12974                           ; BSR set to: 0
 12975  003E60  5182               	movf	___awdiv@divisor& (0+255),w,b
 12976  003E62  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 12977  003E64  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12978  003E66  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12979  003E68  A0D8               	btfss	status,0,c
 12980  003E6A  D005               	goto	l1294
 12981                           
 12982                           ; BSR set to: 0
 12983  003E6C  5182               	movf	___awdiv@divisor& (0+255),w,b
 12984  003E6E  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 12985  003E70  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12986  003E72  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12987                           
 12988                           ; BSR set to: 0
 12989  003E74  8186               	bsf	___awdiv@quotient& (0+255),0,b
 12990  003E76                     l1294:
 12991  003E76  FFFF               	dw	65535	; assembler added errata NOP
 12992                           
 12993                           ; BSR set to: 0
 12994                           
 12995                           ; BSR set to: 0
 12996  003E78  90D8               	bcf	status,0,c
 12997  003E7A  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12998  003E7C  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 12999                           
 13000                           ; BSR set to: 0
 13001  003E7E  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 13002  003E80  D7EB               	goto	u5340
 13003  003E82                     l1295:
 13004  003E82  FFFF               	dw	65535	; assembler added errata NOP
 13005                           
 13006                           ; BSR set to: 0
 13007                           
 13008                           ; BSR set to: 0
 13009                           
 13010                           ; BSR set to: 0
 13011  003E84  5185               	movf	___awdiv@sign& (0+255),w,b
 13012  003E86  B4D8               	btfsc	status,2,c
 13013  003E88  D004               	goto	l1296
 13014                           
 13015                           ; BSR set to: 0
 13016  003E8A  6D86               	negf	___awdiv@quotient& (0+255),b
 13017  003E8C  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 13018  003E8E  B0D8               	btfsc	status,0,c
 13019  003E90  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 13020  003E92                     l1296:
 13021  003E92  FFFF               	dw	65535	; assembler added errata NOP
 13022                           
 13023                           ; BSR set to: 0
 13024                           
 13025                           ; BSR set to: 0
 13026  003E94  C086  F080         	movff	___awdiv@quotient,?___awdiv
 13027  003E98  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 13028                           
 13029                           ; BSR set to: 0
 13030                           
 13031                           ; BSR set to: 0
 13032  003E9C  0012               	return		;funcret
 13033  003E9E  FFFF               	dw	65535	; errata NOP
 13034  003EA0                     __end_of___awdiv:
 13035                           	opt stack 0
 13036                           tblptru	equ	0xFF8
 13037                           tblptrh	equ	0xFF7
 13038                           tblptrl	equ	0xFF6
 13039                           tablat	equ	0xFF5
 13040                           prodh	equ	0xFF4
 13041                           prodl	equ	0xFF3
 13042                           intcon	equ	0xFF2
 13043                           postinc0	equ	0xFEE
 13044                           wreg	equ	0xFE8
 13045                           postdec1	equ	0xFE5
 13046                           fsr1l	equ	0xFE1
 13047                           indf2	equ	0xFDF
 13048                           postinc2	equ	0xFDE
 13049                           fsr2h	equ	0xFDA
 13050                           fsr2l	equ	0xFD9
 13051                           status	equ	0xFD8
 13052                           
 13053 ;; *************** function _drenarPressao *****************
 13054 ;; Defined at:
 13055 ;;		line 126 in file "controle.h"
 13056 ;; Parameters:    Size  Location     Type
 13057 ;;		None
 13058 ;; Auto vars:     Size  Location     Type
 13059 ;;		None
 13060 ;; Return value:  Size  Location     Type
 13061 ;;                  1    wreg      void 
 13062 ;; Registers used:
 13063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13064 ;; Tracked objects:
 13065 ;;		On entry : 0/0
 13066 ;;		On exit  : 0/0
 13067 ;;		Unchanged: 0/0
 13068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13069 ;;      Params:         0       0       0       0       0       0       0
 13070 ;;      Locals:         0       0       0       0       0       0       0
 13071 ;;      Temps:          0       0       0       0       0       0       0
 13072 ;;      Totals:         0       0       0       0       0       0       0
 13073 ;;Total ram usage:        0 bytes
 13074 ;; Hardware stack levels used:    1
 13075 ;; Hardware stack levels required when called:    9
 13076 ;; This function calls:
 13077 ;;		_sprintf
 13078 ;; This function is called by:
 13079 ;;		_acaoTesteBombas
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           	psect	text39
 13084  006EE6                     __ptext39:
 13085                           	opt stack 0
 13086  006EE6                     _drenarPressao:
 13087                           	opt stack 0
 13088  006EE6  FFFF               	dw	65535	; assembler added errata NOP
 13089                           
 13090                           ;controle.h: 127: sprintf(line4, "Despressurizando...");
 13091                           
 13092                           ; BSR set to: 0
 13093                           ;incstack = 0
 13094  006EE8  0E3C               	movlw	low _line4
 13095  006EEA  0100               	movlb	0	; () banked
 13096  006EEC  6FA1               	movwf	sprintf@wh& (0+255),b
 13097  006EEE  0E01               	movlw	high _line4
 13098  006EF0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13099  006EF2  0E74               	movlw	low STR_37
 13100  006EF4  6FA3               	movwf	sprintf@f& (0+255),b
 13101  006EF6  0E7C               	movlw	high STR_37
 13102  006EF8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13103  006EFA  ECC9  F039         	call	_sprintf	;wreg free
 13104                           
 13105                           ;controle.h: 128: if (!timerTesteBombas) {
 13106  006EFE  0100               	movlb	0	; () banked
 13107  006F00  51D9               	movf	_timerTesteBombas& (0+255),w,b
 13108  006F02  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13109  006F04  A4D8               	btfss	status,2,c
 13110  006F06  D006               	goto	l508
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;controle.h: 129: executandoTeste = 0;
 13114  006F08  0E00               	movlw	0
 13115  006F0A  6FF1               	movwf	_executandoTeste& (0+255),b
 13116                           
 13117                           ;controle.h: 130: codigoErro = 3;
 13118  006F0C  0E03               	movlw	3
 13119  006F0E  6FF3               	movwf	_codigoErro& (0+255),b
 13120                           
 13121                           ;controle.h: 131: menu_posi = 0;
 13122  006F10  0E00               	movlw	0
 13123  006F12  6FDE               	movwf	_menu_posi& (0+255),b
 13124  006F14                     l508:
 13125  006F14  FFFF               	dw	65535	; assembler added errata NOP
 13126                           
 13127                           ; BSR set to: 0
 13128                           
 13129                           ; BSR set to: 0
 13130  006F16  0012               	return		;funcret
 13131  006F18  FFFF               	dw	65535	; errata NOP
 13132  006F1A                     __end_of_drenarPressao:
 13133                           	opt stack 0
 13134                           tblptru	equ	0xFF8
 13135                           tblptrh	equ	0xFF7
 13136                           tblptrl	equ	0xFF6
 13137                           tablat	equ	0xFF5
 13138                           prodh	equ	0xFF4
 13139                           prodl	equ	0xFF3
 13140                           intcon	equ	0xFF2
 13141                           postinc0	equ	0xFEE
 13142                           wreg	equ	0xFE8
 13143                           postdec1	equ	0xFE5
 13144                           fsr1l	equ	0xFE1
 13145                           indf2	equ	0xFDF
 13146                           postinc2	equ	0xFDE
 13147                           fsr2h	equ	0xFDA
 13148                           fsr2l	equ	0xFD9
 13149                           status	equ	0xFD8
 13150                           
 13151 ;; *************** function _sprintf *****************
 13152 ;; Defined at:
 13153 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 13156 ;;		 -> intToFloatStr@end(4), line3(21), line2(21), line1(21), 
 13157 ;;		 -> line4(21), bufferAUX(20), 
 13158 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 13159 ;;		 -> intToFloatStr@conv(4), STR_122(15), STR_121(12), STR_120(10), 
 13160 ;;		 -> STR_119(18), STR_118(10), STR_117(18), STR_116(16), 
 13161 ;;		 -> STR_115(10), STR_113(3), STR_112(14), STR_111(20), 
 13162 ;;		 -> STR_110(8), STR_109(10), STR_108(11), STR_107(9), 
 13163 ;;		 -> STR_106(3), STR_105(15), STR_104(15), STR_103(11), 
 13164 ;;		 -> STR_102(11), STR_101(19), STR_100(5), STR_99(12), 
 13165 ;;		 -> STR_98(5), STR_97(14), STR_96(19), STR_93(3), 
 13166 ;;		 -> STR_92(7), STR_91(7), STR_89(12), STR_88(17), 
 13167 ;;		 -> STR_87(20), STR_86(8), STR_83(14), STR_80(14), 
 13168 ;;		 -> STR_79(11), STR_76(10), STR_75(31), STR_72(11), 
 13169 ;;		 -> STR_71(20), STR_70(20), STR_69(21), STR_68(15), 
 13170 ;;		 -> STR_67(6), STR_66(15), STR_65(6), STR_64(20), 
 13171 ;;		 -> STR_63(15), STR_62(19), STR_61(20), STR_60(21), 
 13172 ;;		 -> STR_59(21), STR_58(18), STR_57(20), STR_56(17), 
 13173 ;;		 -> STR_55(26), STR_54(16), STR_51(15), STR_48(15), 
 13174 ;;		 -> STR_45(11), STR_44(17), STR_43(16), STR_42(19), 
 13175 ;;		 -> STR_41(19), STR_40(16), STR_39(15), STR_38(15), 
 13176 ;;		 -> STR_37(20), STR_2(5), STR_1(5), 
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;  pb              4   49[BANK0 ] struct __prbuf
 13179 ;;  ap              2   47[BANK0 ] PTR void [1]
 13180 ;;		 -> ?_sprintf(2), ?_printf(2), 
 13181 ;; Return value:  Size  Location     Type
 13182 ;;                  2   33[BANK0 ] int 
 13183 ;; Registers used:
 13184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13185 ;; Tracked objects:
 13186 ;;		On entry : 0/0
 13187 ;;		On exit  : 0/0
 13188 ;;		Unchanged: 0/0
 13189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13190 ;;      Params:         0      14       0       0       0       0       0
 13191 ;;      Locals:         0       6       0       0       0       0       0
 13192 ;;      Temps:          0       0       0       0       0       0       0
 13193 ;;      Totals:         0      20       0       0       0       0       0
 13194 ;;Total ram usage:       20 bytes
 13195 ;; Hardware stack levels used:    1
 13196 ;; Hardware stack levels required when called:    8
 13197 ;; This function calls:
 13198 ;;		__doprnt
 13199 ;; This function is called by:
 13200 ;;		_getSerial
 13201 ;;		_drenarPressao
 13202 ;;		_acaoTesteBombas
 13203 ;;		_telaPrincipal
 13204 ;;		_tela_ajusteRTC
 13205 ;;		_tela_testeBombas
 13206 ;;		_dataLoger
 13207 ;;		_informacoes
 13208 ;;		_configuraTelefones
 13209 ;;		_configurarEstacionaria
 13210 ;;		_ajusteSP_Bombas
 13211 ;;		_main
 13212 ;;		_intToFloatStr
 13213 ;;		_telaTeste
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           	psect	text40
 13218  007392                     __ptext40:
 13219                           	opt stack 0
 13220  007392                     _sprintf:
 13221                           	opt stack 0
 13222  007392  FFFF               	dw	65535	; assembler added errata NOP
 13223                           
 13224                           ; BSR set to: 0
 13225                           ;incstack = 0
 13226  007394  C0A1  F0B1         	movff	sprintf@wh,sprintf@pb
 13227  007398  C0A2  F0B2         	movff	sprintf@wh+1,sprintf@pb+1
 13228  00739C  0E00               	movlw	0
 13229  00739E  0100               	movlb	0	; () banked
 13230  0073A0  6FB3               	movwf	(sprintf@pb+2)& (0+255),b
 13231  0073A2  0E00               	movlw	0
 13232  0073A4  6FB4               	movwf	(sprintf@pb+3)& (0+255),b
 13233  0073A6  0EA5               	movlw	low (?_sprintf+4)
 13234  0073A8  6FAF               	movwf	sprintf@ap& (0+255),b
 13235  0073AA  0E00               	movlw	high (?_sprintf+4)
 13236  0073AC  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
 13237                           
 13238                           ; BSR set to: 0
 13239  0073AE  0EB1               	movlw	low sprintf@pb
 13240  0073B0  6F8C               	movwf	__doprnt@pb& (0+255),b
 13241  0073B2  0E00               	movlw	high sprintf@pb
 13242  0073B4  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 13243  0073B6  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 13244  0073BA  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 13245  0073BE  0EAF               	movlw	low sprintf@ap
 13246  0073C0  6F90               	movwf	__doprnt@ap& (0+255),b
 13247  0073C2  0E00               	movlw	high sprintf@ap
 13248  0073C4  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 13249  0073C6  EC8E  F000         	call	__doprnt	;wreg free
 13250  0073CA  C0B1  FFD9         	movff	sprintf@pb,fsr2l
 13251  0073CE  C0B2  FFDA         	movff	sprintf@pb+1,fsr2h
 13252  0073D2  0E00               	movlw	0
 13253  0073D4  6EDF               	movwf	indf2,c
 13254                           
 13255                           ;	Return value of _sprintf is never used
 13256  0073D6  0012               	return		;funcret
 13257  0073D8  FFFF               	dw	65535	; errata NOP
 13258  0073DA                     __end_of_sprintf:
 13259                           	opt stack 0
 13260                           tblptru	equ	0xFF8
 13261                           tblptrh	equ	0xFF7
 13262                           tblptrl	equ	0xFF6
 13263                           tablat	equ	0xFF5
 13264                           prodh	equ	0xFF4
 13265                           prodl	equ	0xFF3
 13266                           intcon	equ	0xFF2
 13267                           postinc0	equ	0xFEE
 13268                           wreg	equ	0xFE8
 13269                           postdec1	equ	0xFE5
 13270                           fsr1l	equ	0xFE1
 13271                           indf2	equ	0xFDF
 13272                           postinc2	equ	0xFDE
 13273                           fsr2h	equ	0xFDA
 13274                           fsr2l	equ	0xFD9
 13275                           status	equ	0xFD8
 13276                           
 13277 ;; *************** function _clearShiftREG *****************
 13278 ;; Defined at:
 13279 ;;		line 30 in file "shift595.h"
 13280 ;; Parameters:    Size  Location     Type
 13281 ;;		None
 13282 ;; Auto vars:     Size  Location     Type
 13283 ;;  i               1    0[BANK0 ] unsigned char 
 13284 ;; Return value:  Size  Location     Type
 13285 ;;                  1    wreg      void 
 13286 ;; Registers used:
 13287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13288 ;; Tracked objects:
 13289 ;;		On entry : 0/0
 13290 ;;		On exit  : 0/0
 13291 ;;		Unchanged: 0/0
 13292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13293 ;;      Params:         0       0       0       0       0       0       0
 13294 ;;      Locals:         0       1       0       0       0       0       0
 13295 ;;      Temps:          0       0       0       0       0       0       0
 13296 ;;      Totals:         0       1       0       0       0       0       0
 13297 ;;Total ram usage:        1 bytes
 13298 ;; Hardware stack levels used:    1
 13299 ;; Hardware stack levels required when called:    6
 13300 ;; This function calls:
 13301 ;;		Nothing
 13302 ;; This function is called by:
 13303 ;;		_acaoTesteBombas
 13304 ;;		_resetParametros
 13305 ;;		_telaPrincipal
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           	psect	text41
 13310  006FBC                     __ptext41:
 13311                           	opt stack 0
 13312  006FBC                     _clearShiftREG:
 13313                           	opt stack 0
 13314  006FBC  FFFF               	dw	65535	; assembler added errata NOP
 13315                           
 13316                           ;shift595.h: 31: char i = 0;
 13317                           
 13318                           ;incstack = 0
 13319  006FBE  0E00               	movlw	0
 13320  006FC0  0100               	movlb	0	; () banked
 13321  006FC2  6F80               	movwf	clearShiftREG@i& (0+255),b
 13322                           
 13323                           ;shift595.h: 32: for (i = 0; i < 8; i++) {
 13324  006FC4  0E00               	movlw	0
 13325  006FC6  6F80               	movwf	clearShiftREG@i& (0+255),b
 13326  006FC8                     l5354:
 13327  006FC8  FFFF               	dw	65535	; assembler added errata NOP
 13328                           
 13329                           ; BSR set to: 0
 13330  006FCA  0E07               	movlw	7
 13331  006FCC  6580               	cpfsgt	clearShiftREG@i& (0+255),b
 13332  006FCE  D001               	goto	l424
 13333  006FD0  D00D               	goto	u5470
 13334  006FD2                     l424:
 13335  006FD2  FFFF               	dw	65535	; assembler added errata NOP
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;shift595.h: 33: shift[i] = 0;
 13339                           
 13340                           ; BSR set to: 0
 13341  006FD4  5180               	movf	clearShiftREG@i& (0+255),w,b
 13342  006FD6  0D01               	mullw	1
 13343  006FD8  0E44               	movlw	low _shift
 13344  006FDA  24F3               	addwf	prodl,w,c
 13345  006FDC  6ED9               	movwf	fsr2l,c
 13346  006FDE  0E00               	movlw	high _shift
 13347  006FE0  20F4               	addwfc	prodh,w,c
 13348  006FE2  6EDA               	movwf	fsr2h,c
 13349  006FE4  0E00               	movlw	0
 13350  006FE6  6EDF               	movwf	indf2,c
 13351                           
 13352                           ; BSR set to: 0
 13353  006FE8  2B80               	incf	clearShiftREG@i& (0+255),f,b
 13354  006FEA  D7EE               	goto	l5354
 13355  006FEC                     u5470:
 13356  006FEC  FFFF               	dw	65535	; assembler added errata NOP
 13357                           
 13358                           ; BSR set to: 0
 13359                           
 13360                           ; BSR set to: 0
 13361  006FEE  0012               	return		;funcret
 13362  006FF0  FFFF               	dw	65535	; errata NOP
 13363  006FF2                     __end_of_clearShiftREG:
 13364                           	opt stack 0
 13365                           tblptru	equ	0xFF8
 13366                           tblptrh	equ	0xFF7
 13367                           tblptrl	equ	0xFF6
 13368                           tablat	equ	0xFF5
 13369                           prodh	equ	0xFF4
 13370                           prodl	equ	0xFF3
 13371                           intcon	equ	0xFF2
 13372                           postinc0	equ	0xFEE
 13373                           wreg	equ	0xFE8
 13374                           postdec1	equ	0xFE5
 13375                           fsr1l	equ	0xFE1
 13376                           indf2	equ	0xFDF
 13377                           postinc2	equ	0xFDE
 13378                           fsr2h	equ	0xFDA
 13379                           fsr2l	equ	0xFD9
 13380                           status	equ	0xFD8
 13381                           
 13382 ;; *************** function _btPress *****************
 13383 ;; Defined at:
 13384 ;;		line 57 in file "teclado.h"
 13385 ;; Parameters:    Size  Location     Type
 13386 ;;  bt              1    wreg     unsigned char 
 13387 ;; Auto vars:     Size  Location     Type
 13388 ;;  bt              1    0[BANK0 ] unsigned char 
 13389 ;; Return value:  Size  Location     Type
 13390 ;;                  1    wreg      unsigned char 
 13391 ;; Registers used:
 13392 ;;		wreg, status,2, status,0
 13393 ;; Tracked objects:
 13394 ;;		On entry : 0/0
 13395 ;;		On exit  : 0/0
 13396 ;;		Unchanged: 0/0
 13397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13398 ;;      Params:         0       0       0       0       0       0       0
 13399 ;;      Locals:         0       1       0       0       0       0       0
 13400 ;;      Temps:          0       0       0       0       0       0       0
 13401 ;;      Totals:         0       1       0       0       0       0       0
 13402 ;;Total ram usage:        1 bytes
 13403 ;; Hardware stack levels used:    1
 13404 ;; Hardware stack levels required when called:    6
 13405 ;; This function calls:
 13406 ;;		Nothing
 13407 ;; This function is called by:
 13408 ;;		_acaoTesteBombas
 13409 ;;		_telaPrincipal
 13410 ;;		_tela_ajusteRTC
 13411 ;;		_tela_testeBombas
 13412 ;;		_dataLoger
 13413 ;;		_informacoes
 13414 ;;		_configuraTelefones
 13415 ;;		_configurarEstacionaria
 13416 ;;		_ajusteSP_Bombas
 13417 ;;		_main
 13418 ;; This function uses a non-reentrant model
 13419 ;;
 13420                           
 13421                           	psect	text42
 13422  007694                     __ptext42:
 13423                           	opt stack 0
 13424  007694                     _btPress:
 13425                           	opt stack 0
 13426  007694  FFFF               	dw	65535	; assembler added errata NOP
 13427                           
 13428                           ; BSR set to: 0
 13429                           ;incstack = 0
 13430                           ;btPress@bt stored from wreg
 13431  007696  0100               	movlb	0	; () banked
 13432  007698  6F80               	movwf	btPress@bt& (0+255),b
 13433                           
 13434                           ;teclado.h: 58: switch (bt) {
 13435  00769A  D021               	goto	l461
 13436  00769C  FFFF               	dw	65535	; assembler added errata NOP
 13437  00769E  5064               	movf	__b_esc,w,c
 13438  0076A0  B4D8               	btfsc	status,2,c
 13439  0076A2  D01A               	goto	l470
 13440                           
 13441                           ;teclado.h: 60: _b_esc = 0;
 13442  0076A4  0E00               	movlw	0
 13443  0076A6  6E64               	movwf	__b_esc,c
 13444  0076A8  D014               	goto	l5886
 13445  0076AA  FFFF               	dw	65535	; assembler added errata NOP
 13446                           
 13447                           ;teclado.h: 65: if (_b_mais) {
 13448  0076AC  5060               	movf	__b_mais,w,c
 13449  0076AE  B4D8               	btfsc	status,2,c
 13450  0076B0  D013               	goto	l470
 13451                           
 13452                           ;teclado.h: 66: _b_mais = 0;
 13453  0076B2  0E00               	movlw	0
 13454  0076B4  6E60               	movwf	__b_mais,c
 13455  0076B6  D00D               	goto	l5886
 13456  0076B8  FFFF               	dw	65535	; assembler added errata NOP
 13457  0076BA  5062               	movf	__b_menos,w,c
 13458  0076BC  B4D8               	btfsc	status,2,c
 13459  0076BE  D00C               	goto	l470
 13460                           
 13461                           ;teclado.h: 71: _b_menos = 0;
 13462  0076C0  0E00               	movlw	0
 13463  0076C2  6E62               	movwf	__b_menos,c
 13464  0076C4  D006               	goto	l5886
 13465  0076C6  FFFF               	dw	65535	; assembler added errata NOP
 13466  0076C8  505E               	movf	__b_ok,w,c
 13467  0076CA  B4D8               	btfsc	status,2,c
 13468  0076CC  D005               	goto	l470
 13469                           
 13470                           ;teclado.h: 76: _b_ok = 0;
 13471  0076CE  0E00               	movlw	0
 13472  0076D0  6E5E               	movwf	__b_ok,c
 13473  0076D2                     l5886:
 13474  0076D2  FFFF               	dw	65535	; assembler added errata NOP
 13475                           
 13476                           ;teclado.h: 77: return 1;
 13477  0076D4  0E01               	movlw	1
 13478  0076D6  D013               	goto	l472
 13479  0076D8                     l470:
 13480  0076D8  FFFF               	dw	65535	; assembler added errata NOP
 13481                           
 13482                           ;teclado.h: 80: default: return 0;
 13483                           
 13484                           ;teclado.h: 78: }
 13485                           ;teclado.h: 79: return 0;
 13486  0076DA  0E00               	movlw	0
 13487                           
 13488                           ;teclado.h: 81: }
 13489  0076DC  D010               	goto	l472
 13490  0076DE                     l461:
 13491  0076DE  FFFF               	dw	65535	; assembler added errata NOP
 13492  0076E0  0100               	movlb	0	; () banked
 13493  0076E2  5180               	movf	btPress@bt& (0+255),w,b
 13494                           
 13495                           ; Switch size 1, requested type "space"
 13496                           ; Number of cases is 4, Range of values is 1 to 4
 13497                           ; switch strategies available:
 13498                           ; Name         Instructions Cycles
 13499                           ; simple_byte           13     7 (average)
 13500                           ;	Chosen strategy is simple_byte
 13501  0076E4  0A01               	xorlw	1	; case 1
 13502  0076E6  B4D8               	btfsc	status,2,c
 13503  0076E8  D7D9               	goto	l462
 13504  0076EA  0A03               	xorlw	3	; case 2
 13505  0076EC  B4D8               	btfsc	status,2,c
 13506  0076EE  D7E4               	goto	l467
 13507  0076F0  0A01               	xorlw	1	; case 3
 13508  0076F2  B4D8               	btfsc	status,2,c
 13509  0076F4  D7DA               	goto	l465
 13510  0076F6  0A07               	xorlw	7	; case 4
 13511  0076F8  B4D8               	btfsc	status,2,c
 13512  0076FA  D7E5               	goto	l469
 13513  0076FC  D7ED               	goto	l470
 13514  0076FE                     l472:
 13515  0076FE  FFFF               	dw	65535	; assembler added errata NOP
 13516                           
 13517                           ; BSR set to: 0
 13518  007700  0012               	return		;funcret
 13519  007702  FFFF               	dw	65535	; errata NOP
 13520  007704                     __end_of_btPress:
 13521                           	opt stack 0
 13522                           tblptru	equ	0xFF8
 13523                           tblptrh	equ	0xFF7
 13524                           tblptrl	equ	0xFF6
 13525                           tablat	equ	0xFF5
 13526                           prodh	equ	0xFF4
 13527                           prodl	equ	0xFF3
 13528                           intcon	equ	0xFF2
 13529                           postinc0	equ	0xFEE
 13530                           wreg	equ	0xFE8
 13531                           postdec1	equ	0xFE5
 13532                           fsr1l	equ	0xFE1
 13533                           indf2	equ	0xFDF
 13534                           postinc2	equ	0xFDE
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function _acaoBombas *****************
 13540 ;; Defined at:
 13541 ;;		line 18 in file "controle.h"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;		None
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;		None
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  1    wreg      void 
 13548 ;; Registers used:
 13549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13550 ;; Tracked objects:
 13551 ;;		On entry : 0/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13555 ;;      Params:         0       0       0       0       0       0       0
 13556 ;;      Locals:         0       0       0       0       0       0       0
 13557 ;;      Temps:          0       3       0       0       0       0       0
 13558 ;;      Totals:         0       3       0       0       0       0       0
 13559 ;;Total ram usage:        3 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; Hardware stack levels required when called:   10
 13562 ;; This function calls:
 13563 ;;		_enviaSMS
 13564 ;;		_partidaBombaEstacionaria
 13565 ;; This function is called by:
 13566 ;;		_main
 13567 ;; This function uses a non-reentrant model
 13568 ;;
 13569                           
 13570                           	psect	text43
 13571  00308E                     __ptext43:
 13572                           	opt stack 0
 13573  00308E                     _acaoBombas:
 13574                           	opt stack 0
 13575  00308E  FFFF               	dw	65535	; assembler added errata NOP
 13576                           
 13577                           ;controle.h: 19: if (pressao >= sp_pressao_rede && !ocorrendoIncendio && !executandoTest
      +                          e) {
 13578                           
 13579                           ;incstack = 0
 13580  003090  0100               	movlb	0	; () banked
 13581  003092  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13582  003094  6FC8               	movwf	??_acaoBombas& (0+255),b
 13583  003096  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13584  003098  51C8               	movf	??_acaoBombas& (0+255),w,b
 13585  00309A  5DF8               	subwf	_pressao& (0+255),w,b
 13586  00309C  51F9               	movf	(_pressao+1)& (0+255),w,b
 13587  00309E  0A80               	xorlw	128
 13588  0030A0  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13589  0030A2  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13590  0030A4  0A80               	xorlw	128
 13591  0030A6  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13592  0030A8  A0D8               	btfss	status,0,c
 13593  0030AA  D00F               	goto	l475
 13594                           
 13595                           ; BSR set to: 0
 13596  0030AC  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13597  0030AE  A4D8               	btfss	status,2,c
 13598  0030B0  D00C               	goto	l475
 13599                           
 13600                           ; BSR set to: 0
 13601  0030B2  51F1               	movf	_executandoTeste& (0+255),w,b
 13602  0030B4  A4D8               	btfss	status,2,c
 13603  0030B6  D009               	goto	l475
 13604                           
 13605                           ; BSR set to: 0
 13606                           ;controle.h: 20: shift[6] = 0;
 13607  0030B8  0E00               	movlw	0
 13608  0030BA  6E4A               	movwf	_shift+6,c
 13609                           
 13610                           ;controle.h: 21: shift[5] = 0;
 13611  0030BC  0E00               	movlw	0
 13612  0030BE  6E49               	movwf	_shift+5,c
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;controle.h: 22: partidaBombaEstacionaria(0);
 13616  0030C0  0E00               	movlw	0
 13617  0030C2  EC51  F01C         	call	_partidaBombaEstacionaria
 13618                           
 13619                           ;controle.h: 23: shift[1] = 0;
 13620  0030C6  0E00               	movlw	0
 13621  0030C8  D06E               	goto	L31
 13622  0030CA                     l475:
 13623  0030CA  FFFF               	dw	65535	; assembler added errata NOP
 13624                           
 13625                           ;controle.h: 25: }
 13626                           ;controle.h: 27: shift[2] = 0;
 13627  0030CC  0E00               	movlw	0
 13628  0030CE  6E46               	movwf	_shift+2,c
 13629                           
 13630                           ;controle.h: 28: if (pressao <= sp_jockey) {
 13631  0030D0  0100               	movlb	0	; () banked
 13632  0030D2  51E2               	movf	_sp_jockey& (0+255),w,b
 13633  0030D4  6FC8               	movwf	??_acaoBombas& (0+255),b
 13634  0030D6  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13635  0030D8  51F8               	movf	_pressao& (0+255),w,b
 13636  0030DA  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13637  0030DC  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13638  0030DE  0A80               	xorlw	128
 13639  0030E0  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13640  0030E2  51F9               	movf	(_pressao+1)& (0+255),w,b
 13641  0030E4  0A80               	xorlw	128
 13642  0030E6  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13643  0030E8  A0D8               	btfss	status,0,c
 13644  0030EA  D002               	goto	l477
 13645                           
 13646                           ; BSR set to: 0
 13647                           ;controle.h: 29: shift[6] = 1;
 13648  0030EC  0E01               	movlw	1
 13649  0030EE  D012               	goto	L32
 13650  0030F0                     l477:
 13651  0030F0  FFFF               	dw	65535	; assembler added errata NOP
 13652                           
 13653                           ; BSR set to: 0
 13654                           
 13655                           ; BSR set to: 0
 13656  0030F2  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13657  0030F4  6FC8               	movwf	??_acaoBombas& (0+255),b
 13658  0030F6  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13659  0030F8  51C8               	movf	??_acaoBombas& (0+255),w,b
 13660  0030FA  5DF8               	subwf	_pressao& (0+255),w,b
 13661  0030FC  51F9               	movf	(_pressao+1)& (0+255),w,b
 13662  0030FE  0A80               	xorlw	128
 13663  003100  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13664  003102  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13665  003104  0A80               	xorlw	128
 13666  003106  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13667  003108  A0D8               	btfss	status,0,c
 13668  00310A  D006               	goto	l479
 13669                           
 13670                           ; BSR set to: 0
 13671  00310C  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13672  00310E  A4D8               	btfss	status,2,c
 13673  003110  D003               	goto	l479
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;controle.h: 31: shift[6] = 0;
 13677  003112  0E00               	movlw	0
 13678  003114                     L32:
 13679  003114  FFFF               	dw	65535	; assembler added errata NOP
 13680  003116  6E4A               	movwf	_shift+6,c
 13681  003118                     l479:
 13682  003118  FFFF               	dw	65535	; assembler added errata NOP
 13683                           
 13684                           ; BSR set to: 0
 13685                           ;controle.h: 32: }
 13686                           ;controle.h: 34: if (pressao <= sp_principal) {
 13687                           
 13688                           ; BSR set to: 0
 13689                           
 13690                           ; BSR set to: 0
 13691  00311A  51E1               	movf	_sp_principal& (0+255),w,b
 13692  00311C  6FC8               	movwf	??_acaoBombas& (0+255),b
 13693  00311E  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13694  003120  51F8               	movf	_pressao& (0+255),w,b
 13695  003122  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13696  003124  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13697  003126  0A80               	xorlw	128
 13698  003128  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13699  00312A  51F9               	movf	(_pressao+1)& (0+255),w,b
 13700  00312C  0A80               	xorlw	128
 13701  00312E  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13702  003130  A0D8               	btfss	status,0,c
 13703  003132  D004               	goto	l480
 13704                           
 13705                           ; BSR set to: 0
 13706                           ;controle.h: 35: ocorrendoIncendio = 1;
 13707  003134  0E01               	movlw	1
 13708  003136  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 13709                           
 13710                           ;controle.h: 36: shift[5] = 1;
 13711  003138  0E01               	movlw	1
 13712  00313A  6E49               	movwf	_shift+5,c
 13713  00313C                     l480:
 13714  00313C  FFFF               	dw	65535	; assembler added errata NOP
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;controle.h: 40: }
 13718                           ;controle.h: 41: if (pressao >= sp_pressao_rede && !ocorrendoIncendio) {
 13719                           
 13720                           ; BSR set to: 0
 13721  00313E  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13722  003140  6FC8               	movwf	??_acaoBombas& (0+255),b
 13723  003142  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13724  003144  51C8               	movf	??_acaoBombas& (0+255),w,b
 13725  003146  5DF8               	subwf	_pressao& (0+255),w,b
 13726  003148  51F9               	movf	(_pressao+1)& (0+255),w,b
 13727  00314A  0A80               	xorlw	128
 13728  00314C  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13729  00314E  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13730  003150  0A80               	xorlw	128
 13731  003152  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13732  003154  A0D8               	btfss	status,0,c
 13733  003156  D008               	goto	l481
 13734                           
 13735                           ; BSR set to: 0
 13736  003158  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13737  00315A  A4D8               	btfss	status,2,c
 13738  00315C  D005               	goto	l481
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;controle.h: 42: shift[5] = 0;
 13742  00315E  0E00               	movlw	0
 13743  003160  6E49               	movwf	_shift+5,c
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;controle.h: 43: partidaBombaEstacionaria(0);
 13747  003162  0E00               	movlw	0
 13748  003164  EC51  F01C         	call	_partidaBombaEstacionaria
 13749  003168                     l481:
 13750  003168  FFFF               	dw	65535	; assembler added errata NOP
 13751                           
 13752                           ;controle.h: 44: }
 13753                           ;controle.h: 46: if (pressao <= sp_estacionaria) {
 13754  00316A  0100               	movlb	0	; () banked
 13755  00316C  51E0               	movf	_sp_estacionaria& (0+255),w,b
 13756  00316E  6FC8               	movwf	??_acaoBombas& (0+255),b
 13757  003170  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13758  003172  51F8               	movf	_pressao& (0+255),w,b
 13759  003174  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13760  003176  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13761  003178  0A80               	xorlw	128
 13762  00317A  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13763  00317C  51F9               	movf	(_pressao+1)& (0+255),w,b
 13764  00317E  0A80               	xorlw	128
 13765  003180  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13766  003182  A0D8               	btfss	status,0,c
 13767  003184  D006               	goto	l482
 13768                           
 13769                           ; BSR set to: 0
 13770                           ;controle.h: 47: partidaBombaEstacionaria(1);
 13771  003186  0E01               	movlw	1
 13772  003188  EC51  F01C         	call	_partidaBombaEstacionaria
 13773                           
 13774                           ;controle.h: 48: ocorrendoIncendio = 1;
 13775  00318C  0E01               	movlw	1
 13776  00318E  0100               	movlb	0	; () banked
 13777  003190  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 13778  003192                     l482:
 13779  003192  FFFF               	dw	65535	; assembler added errata NOP
 13780                           
 13781                           ; BSR set to: 0
 13782                           ;controle.h: 49: }
 13783                           ;controle.h: 51: if (ocorrendoIncendio) {
 13784                           
 13785                           ; BSR set to: 0
 13786  003194  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13787  003196  B4D8               	btfsc	status,2,c
 13788  003198  D008               	goto	l483
 13789                           
 13790                           ; BSR set to: 0
 13791                           ;controle.h: 52: gsmOcupado = 1;
 13792  00319A  0E01               	movlw	1
 13793  00319C  6FF4               	movwf	_gsmOcupado& (0+255),b
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;controle.h: 53: enviaSMS(1);
 13797  00319E  0E01               	movlw	1
 13798  0031A0  ECDD  F00A         	call	_enviaSMS
 13799                           
 13800                           ;controle.h: 54: shift[1] = 1;
 13801  0031A4  0E01               	movlw	1
 13802  0031A6                     L31:
 13803  0031A6  FFFF               	dw	65535	; assembler added errata NOP
 13804  0031A8  6E45               	movwf	_shift+1,c
 13805  0031AA                     l483:
 13806  0031AA  FFFF               	dw	65535	; assembler added errata NOP
 13807  0031AC  0012               	return		;funcret
 13808  0031AE  FFFF               	dw	65535	; errata NOP
 13809  0031B0                     __end_of_acaoBombas:
 13810                           	opt stack 0
 13811                           tblptru	equ	0xFF8
 13812                           tblptrh	equ	0xFF7
 13813                           tblptrl	equ	0xFF6
 13814                           tablat	equ	0xFF5
 13815                           prodh	equ	0xFF4
 13816                           prodl	equ	0xFF3
 13817                           intcon	equ	0xFF2
 13818                           postinc0	equ	0xFEE
 13819                           wreg	equ	0xFE8
 13820                           postdec1	equ	0xFE5
 13821                           fsr1l	equ	0xFE1
 13822                           indf2	equ	0xFDF
 13823                           postinc2	equ	0xFDE
 13824                           fsr2h	equ	0xFDA
 13825                           fsr2l	equ	0xFD9
 13826                           status	equ	0xFD8
 13827                           
 13828 ;; *************** function _partidaBombaEstacionaria *****************
 13829 ;; Defined at:
 13830 ;;		line 58 in file "controle.h"
 13831 ;; Parameters:    Size  Location     Type
 13832 ;;  acao            1    wreg     unsigned char 
 13833 ;; Auto vars:     Size  Location     Type
 13834 ;;  acao            1    3[BANK0 ] unsigned char 
 13835 ;; Return value:  Size  Location     Type
 13836 ;;                  1    wreg      void 
 13837 ;; Registers used:
 13838 ;;		wreg, status,2, status,0, cstack
 13839 ;; Tracked objects:
 13840 ;;		On entry : 0/0
 13841 ;;		On exit  : 0/0
 13842 ;;		Unchanged: 0/0
 13843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13844 ;;      Params:         0       0       0       0       0       0       0
 13845 ;;      Locals:         0       1       0       0       0       0       0
 13846 ;;      Temps:          0       0       0       0       0       0       0
 13847 ;;      Totals:         0       1       0       0       0       0       0
 13848 ;;Total ram usage:        1 bytes
 13849 ;; Hardware stack levels used:    1
 13850 ;; Hardware stack levels required when called:    7
 13851 ;; This function calls:
 13852 ;;		_delay
 13853 ;; This function is called by:
 13854 ;;		_acaoBombas
 13855 ;;		_acaoTesteBombas
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           	psect	text44
 13860  0038A2                     __ptext44:
 13861                           	opt stack 0
 13862  0038A2                     _partidaBombaEstacionaria:
 13863                           	opt stack 0
 13864  0038A2  FFFF               	dw	65535	; assembler added errata NOP
 13865                           
 13866                           ;incstack = 0
 13867                           ;partidaBombaEstacionaria@acao stored from wreg
 13868  0038A4  0100               	movlb	0	; () banked
 13869  0038A6  6F83               	movwf	partidaBombaEstacionaria@acao& (0+255),b
 13870                           
 13871                           ;controle.h: 59: if (acao == 1 && !flagEstacionariaLigada) {
 13872  0038A8  0100               	movlb	0	; () banked
 13873  0038AA  0583               	decf	partidaBombaEstacionaria@acao& (0+255),w,b
 13874  0038AC  A4D8               	btfss	status,2,c
 13875  0038AE  D01A               	goto	l488
 13876                           
 13877                           ; BSR set to: 0
 13878  0038B0  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 13879  0038B2  A4D8               	btfss	status,2,c
 13880  0038B4  D017               	goto	l488
 13881                           
 13882                           ; BSR set to: 0
 13883                           ;controle.h: 60: if (_sec_partida != _sec) {
 13884  0038B6  51EE               	movf	__sec& (0+255),w,b
 13885  0038B8  186F               	xorwf	__sec_partida,w,c
 13886  0038BA  B4D8               	btfsc	status,2,c
 13887  0038BC  D013               	goto	l488
 13888                           
 13889                           ; BSR set to: 0
 13890                           ;controle.h: 61: _sec_partida = _sec;
 13891  0038BE  C0EE  F06F         	movff	__sec,__sec_partida
 13892                           
 13893                           ; BSR set to: 0
 13894                           ;controle.h: 62: tempo_limite_partida++;
 13895  0038C2  2A6B               	incf	_tempo_limite_partida,f,c
 13896                           
 13897                           ;controle.h: 63: tempo_partida++;
 13898  0038C4  2A6C               	incf	_tempo_partida,f,c
 13899                           
 13900                           ; BSR set to: 0
 13901                           ;controle.h: 64: if (!PORTAbits.RA5) {
 13902  0038C6  BA80               	btfsc	3968,5,c	;volatile
 13903  0038C8  D00D               	goto	l488
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;controle.h: 65: delay(700);
 13907  0038CA  0E02               	movlw	2
 13908  0038CC  6F81               	movwf	(delay@x+1)& (0+255),b
 13909  0038CE  0EBC               	movlw	188
 13910  0038D0  6F80               	movwf	delay@x& (0+255),b
 13911  0038D2  ECA8  F037         	call	_delay	;wreg free
 13912                           
 13913                           ;controle.h: 66: flagEstacionariaLigada = 1;
 13914  0038D6  0E01               	movlw	1
 13915  0038D8  0100               	movlb	0	; () banked
 13916  0038DA  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;controle.h: 67: tempo_partida = 0;
 13920  0038DC  0E00               	movlw	0
 13921  0038DE  6E6C               	movwf	_tempo_partida,c
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;controle.h: 68: shift[4] = 0;
 13925  0038E0  0E00               	movlw	0
 13926  0038E2  6E48               	movwf	_shift+4,c
 13927  0038E4                     l488:
 13928  0038E4  FFFF               	dw	65535	; assembler added errata NOP
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;controle.h: 69: }
 13932                           ;controle.h: 70: }
 13933                           ;controle.h: 71: }
 13934                           ;controle.h: 72: if (!flagEstacionariaLigada && status_estacionaria == 1) {
 13935                           
 13936                           ; BSR set to: 0
 13937                           
 13938                           ; BSR set to: 0
 13939                           
 13940                           ; BSR set to: 0
 13941  0038E6  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 13942  0038E8  A4D8               	btfss	status,2,c
 13943  0038EA  D015               	goto	l493
 13944                           
 13945                           ; BSR set to: 0
 13946  0038EC  05FB               	decf	_status_estacionaria& (0+255),w,b
 13947  0038EE  A4D8               	btfss	status,2,c
 13948  0038F0  D012               	goto	l493
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;controle.h: 73: shift[3] = 1;
 13952  0038F2  0E01               	movlw	1
 13953  0038F4  6E47               	movwf	_shift+3,c
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;controle.h: 74: if (tempo_partida <= 7) {
 13957  0038F6  0E08               	movlw	8
 13958  0038F8  606C               	cpfslt	_tempo_partida,c
 13959  0038FA  D002               	goto	l490
 13960                           
 13961                           ; BSR set to: 0
 13962                           ;controle.h: 75: shift[4] = 1;
 13963  0038FC  0E01               	movlw	1
 13964  0038FE  D005               	goto	L33
 13965  003900                     l490:
 13966  003900  FFFF               	dw	65535	; assembler added errata NOP
 13967                           
 13968                           ; BSR set to: 0
 13969                           
 13970                           ; BSR set to: 0
 13971  003902  0E10               	movlw	16
 13972  003904  606C               	cpfslt	_tempo_partida,c
 13973  003906  D004               	goto	l492
 13974                           
 13975                           ; BSR set to: 0
 13976                           ;controle.h: 77: shift[4] = 0;
 13977  003908  0E00               	movlw	0
 13978  00390A                     L33:
 13979  00390A  FFFF               	dw	65535	; assembler added errata NOP
 13980  00390C  6E48               	movwf	_shift+4,c
 13981                           
 13982                           ;controle.h: 78: } else {
 13983  00390E  D003               	goto	l493
 13984  003910                     l492:
 13985  003910  FFFF               	dw	65535	; assembler added errata NOP
 13986                           
 13987                           ; BSR set to: 0
 13988                           ;controle.h: 79: tempo_partida = 0;
 13989                           
 13990                           ; BSR set to: 0
 13991  003912  0E00               	movlw	0
 13992  003914  6E6C               	movwf	_tempo_partida,c
 13993  003916                     l493:
 13994  003916  FFFF               	dw	65535	; assembler added errata NOP
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;controle.h: 80: }
 13998                           ;controle.h: 81: }
 13999                           ;controle.h: 82: if (tempo_limite_partida > tempo_limite_estacionaria) {
 14000                           
 14001                           ; BSR set to: 0
 14002                           
 14003                           ; BSR set to: 0
 14004                           
 14005                           ; BSR set to: 0
 14006  003918  506B               	movf	_tempo_limite_partida,w,c
 14007  00391A  5DE5               	subwf	_tempo_limite_estacionaria& (0+255),w,b
 14008  00391C  B0D8               	btfsc	status,0,c
 14009  00391E  D00A               	goto	l494
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;controle.h: 83: tempo_limite_partida = 0;
 14013  003920  0E00               	movlw	0
 14014  003922  6E6B               	movwf	_tempo_limite_partida,c
 14015                           
 14016                           ;controle.h: 84: status_estacionaria = 0;
 14017  003924  0E00               	movlw	0
 14018  003926  6FFB               	movwf	_status_estacionaria& (0+255),b
 14019                           
 14020                           ;controle.h: 85: flagEstacionariaLigada = 0;
 14021  003928  0E00               	movlw	0
 14022  00392A  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14023                           
 14024                           ;controle.h: 86: shift[3] = 0;
 14025  00392C  0E00               	movlw	0
 14026  00392E  6E47               	movwf	_shift+3,c
 14027                           
 14028                           ;controle.h: 87: shift[4] = 0;
 14029  003930  0E00               	movlw	0
 14030  003932  6E48               	movwf	_shift+4,c
 14031  003934                     l494:
 14032  003934  FFFF               	dw	65535	; assembler added errata NOP
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;controle.h: 88: }
 14036                           ;controle.h: 91: if (acao == 0) {
 14037  003936  5183               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
 14038  003938  A4D8               	btfss	status,2,c
 14039  00393A  D00A               	goto	l495
 14040                           
 14041                           ; BSR set to: 0
 14042                           ;controle.h: 92: flagEstacionariaLigada = 0;
 14043  00393C  0E00               	movlw	0
 14044  00393E  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14045                           
 14046                           ;controle.h: 93: shift[4] = 0;
 14047  003940  0E00               	movlw	0
 14048  003942  6E48               	movwf	_shift+4,c
 14049                           
 14050                           ;controle.h: 94: shift[3] = 0;
 14051  003944  0E00               	movlw	0
 14052  003946  6E47               	movwf	_shift+3,c
 14053                           
 14054                           ;controle.h: 95: tempo_partida = 0;
 14055  003948  0E00               	movlw	0
 14056  00394A  6E6C               	movwf	_tempo_partida,c
 14057                           
 14058                           ;controle.h: 96: tempo_limite_partida = 0;
 14059  00394C  0E00               	movlw	0
 14060  00394E  6E6B               	movwf	_tempo_limite_partida,c
 14061  003950                     l495:
 14062  003950  FFFF               	dw	65535	; assembler added errata NOP
 14063                           
 14064                           ; BSR set to: 0
 14065                           ;controle.h: 97: }
 14066                           ;controle.h: 99: if (status_estacionaria == 0) {
 14067  003952  51FB               	movf	_status_estacionaria& (0+255),w,b
 14068  003954  A4D8               	btfss	status,2,c
 14069  003956  D006               	goto	l496
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;controle.h: 100: shift[3] = 0;
 14073  003958  0E00               	movlw	0
 14074  00395A  6E47               	movwf	_shift+3,c
 14075                           
 14076                           ;controle.h: 101: shift[4] = 0;
 14077  00395C  0E00               	movlw	0
 14078  00395E  6E48               	movwf	_shift+4,c
 14079                           
 14080                           ;controle.h: 102: tempo_partida = 0;
 14081  003960  0E00               	movlw	0
 14082  003962  6E6C               	movwf	_tempo_partida,c
 14083  003964                     l496:
 14084  003964  FFFF               	dw	65535	; assembler added errata NOP
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;controle.h: 103: }
 14088                           ;controle.h: 104: if (flagEstacionariaLigada) {
 14089  003966  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 14090  003968  B4D8               	btfsc	status,2,c
 14091  00396A  D00A               	goto	l499
 14092                           
 14093                           ; BSR set to: 0
 14094                           ;controle.h: 105: if (!PORTAbits.RA5) {
 14095  00396C  BA80               	btfsc	3968,5,c	;volatile
 14096  00396E  D005               	goto	l498
 14097                           
 14098                           ; BSR set to: 0
 14099                           ;controle.h: 106: shift[4] = 0;
 14100  003970  0E00               	movlw	0
 14101  003972  6E48               	movwf	_shift+4,c
 14102                           
 14103                           ;controle.h: 107: tempo_limite_partida = 0;
 14104  003974  0E00               	movlw	0
 14105  003976  6E6B               	movwf	_tempo_limite_partida,c
 14106                           
 14107                           ;controle.h: 108: } else {
 14108  003978  D003               	goto	l499
 14109  00397A                     l498:
 14110  00397A  FFFF               	dw	65535	; assembler added errata NOP
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;controle.h: 109: flagEstacionariaLigada = 0;
 14114                           
 14115                           ; BSR set to: 0
 14116  00397C  0E00               	movlw	0
 14117  00397E  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14118  003980                     l499:
 14119  003980  FFFF               	dw	65535	; assembler added errata NOP
 14120                           
 14121                           ; BSR set to: 0
 14122                           
 14123                           ; BSR set to: 0
 14124                           
 14125                           ; BSR set to: 0
 14126  003982  0012               	return		;funcret
 14127  003984  FFFF               	dw	65535	; errata NOP
 14128  003986                     __end_of_partidaBombaEstacionaria:
 14129                           	opt stack 0
 14130                           tblptru	equ	0xFF8
 14131                           tblptrh	equ	0xFF7
 14132                           tblptrl	equ	0xFF6
 14133                           tablat	equ	0xFF5
 14134                           prodh	equ	0xFF4
 14135                           prodl	equ	0xFF3
 14136                           intcon	equ	0xFF2
 14137                           postinc0	equ	0xFEE
 14138                           wreg	equ	0xFE8
 14139                           postdec1	equ	0xFE5
 14140                           fsr1l	equ	0xFE1
 14141                           indf2	equ	0xFDF
 14142                           postinc2	equ	0xFDE
 14143                           fsr2h	equ	0xFDA
 14144                           fsr2l	equ	0xFD9
 14145                           status	equ	0xFD8
 14146                           
 14147 ;; *************** function _enviaSMS *****************
 14148 ;; Defined at:
 14149 ;;		line 125 in file "comunicacao.h"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;  tipo            1    wreg     unsigned char 
 14152 ;; Auto vars:     Size  Location     Type
 14153 ;;  tipo            1   71[BANK0 ] unsigned char 
 14154 ;; Return value:  Size  Location     Type
 14155 ;;                  1    wreg      void 
 14156 ;; Registers used:
 14157 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14158 ;; Tracked objects:
 14159 ;;		On entry : 0/0
 14160 ;;		On exit  : 0/0
 14161 ;;		Unchanged: 0/0
 14162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14163 ;;      Params:         0       0       0       0       0       0       0
 14164 ;;      Locals:         0      11       0       0       0       0       0
 14165 ;;      Temps:          0       2       0       0       0       0       0
 14166 ;;      Totals:         0      13       0       0       0       0       0
 14167 ;;Total ram usage:       13 bytes
 14168 ;; Hardware stack levels used:    1
 14169 ;; Hardware stack levels required when called:    9
 14170 ;; This function calls:
 14171 ;;		_aguardaBuffer
 14172 ;;		_delay
 14173 ;;		_limparBuffer
 14174 ;;		_printf
 14175 ;;		_writeChar
 14176 ;; This function is called by:
 14177 ;;		_acaoBombas
 14178 ;;		_acaoTesteBombas
 14179 ;; This function uses a non-reentrant model
 14180 ;;
 14181                           
 14182                           	psect	text45
 14183  0015BA                     __ptext45:
 14184                           	opt stack 0
 14185  0015BA                     _enviaSMS:
 14186                           	opt stack 0
 14187  0015BA  FFFF               	dw	65535	; assembler added errata NOP
 14188                           
 14189                           ; BSR set to: 0
 14190                           ;incstack = 0
 14191                           ;enviaSMS@tipo stored from wreg
 14192  0015BC  0100               	movlb	0	; () banked
 14193  0015BE  6FC7               	movwf	enviaSMS@tipo& (0+255),b
 14194                           
 14195                           ;comunicacao.h: 126: if (timerReenvioSMS) return;
 14196  0015C0  0100               	movlb	0	; () banked
 14197  0015C2  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 14198  0015C4  A4D8               	btfss	status,2,c
 14199  0015C6  D1A0               	goto	l350
 14200  0015C8  D17F               	goto	l348
 14201  0015CA  FFFF               	dw	65535	; assembler added errata NOP
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;comunicacao.h: 130: limparBuffer();
 14205                           
 14206                           ; BSR set to: 0
 14207  0015CC  ECC3  F037         	call	_limparBuffer	;wreg free
 14208                           
 14209                           ;comunicacao.h: 131: printf("AT\r\n");
 14210  0015D0  0EDE               	movlw	low STR_4
 14211  0015D2  0100               	movlb	0	; () banked
 14212  0015D4  6FA1               	movwf	printf@f& (0+255),b
 14213  0015D6  0E7F               	movlw	high STR_4
 14214  0015D8  6FA2               	movwf	(printf@f+1)& (0+255),b
 14215  0015DA  ECC4  F038         	call	_printf	;wreg free
 14216                           
 14217                           ;comunicacao.h: 132: etapaComunicacao++;
 14218  0015DE  4A51               	infsnz	_etapaComunicacao,f,c
 14219  0015E0  2A52               	incf	_etapaComunicacao+1,f,c
 14220                           
 14221                           ;comunicacao.h: 133: timerEtapaComunicacao = 6;
 14222  0015E2  0E06               	movlw	6
 14223  0015E4  0100               	movlb	0	; () banked
 14224  0015E6  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14225                           
 14226                           ;comunicacao.h: 134: break;
 14227  0015E8  D18F               	goto	l350
 14228  0015EA  FFFF               	dw	65535	; assembler added errata NOP
 14229                           
 14230                           ; BSR set to: 0
 14231                           ;comunicacao.h: 136: if (aguardaBuffer("OK")) {
 14232                           
 14233                           ; BSR set to: 0
 14234  0015EC  0EFA               	movlw	low STR_5
 14235  0015EE  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14236  0015F0  0E7F               	movlw	high STR_5
 14237  0015F2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14238  0015F4  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14239  0015F8  0900               	iorlw	0
 14240  0015FA  B4D8               	btfsc	status,2,c
 14241  0015FC  D00E               	goto	l352
 14242                           
 14243                           ;comunicacao.h: 137: limparBuffer();
 14244  0015FE  ECC3  F037         	call	_limparBuffer	;wreg free
 14245                           
 14246                           ;comunicacao.h: 138: printf("AT+CMGF=1\r\n");
 14247  001602  0ED9               	movlw	low STR_10
 14248  001604  0100               	movlb	0	; () banked
 14249  001606  6FA1               	movwf	printf@f& (0+255),b
 14250  001608  0E7E               	movlw	high STR_10
 14251  00160A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14252  00160C  ECC4  F038         	call	_printf	;wreg free
 14253                           
 14254                           ;comunicacao.h: 139: etapaComunicacao++;
 14255  001610  4A51               	infsnz	_etapaComunicacao,f,c
 14256  001612  2A52               	incf	_etapaComunicacao+1,f,c
 14257                           
 14258                           ;comunicacao.h: 140: timerEtapaComunicacao = 6;
 14259  001614  0E06               	movlw	6
 14260  001616  0100               	movlb	0	; () banked
 14261  001618  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14262  00161A                     l352:
 14263  00161A  FFFF               	dw	65535	; assembler added errata NOP
 14264                           
 14265                           ;comunicacao.h: 141: }
 14266                           ;comunicacao.h: 142: if (!timerEtapaComunicacao) {
 14267                           
 14268                           ; BSR set to: 0
 14269  00161C  0100               	movlb	0	; () banked
 14270  00161E  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14271  001620  A4D8               	btfss	status,2,c
 14272  001622  D172               	goto	l350
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;comunicacao.h: 143: writeChar(0x1A);
 14276  001624  0E1A               	movlw	26
 14277  001626  6F80               	movwf	writeChar@hex& (0+255),b
 14278  001628  0E00               	movlw	0
 14279  00162A  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14280  00162C  EC7F  F036         	call	_writeChar	;wreg free
 14281                           
 14282                           ;comunicacao.h: 144: delay(15);
 14283  001630  0E00               	movlw	0
 14284  001632  0100               	movlb	0	; () banked
 14285  001634  6F81               	movwf	(delay@x+1)& (0+255),b
 14286  001636  0E0F               	movlw	15
 14287  001638  6F80               	movwf	delay@x& (0+255),b
 14288  00163A  ECA8  F037         	call	_delay	;wreg free
 14289                           
 14290                           ;comunicacao.h: 145: printf("ATH0\r\n");
 14291  00163E  0EAA               	movlw	low STR_21
 14292  001640  0100               	movlb	0	; () banked
 14293  001642  6FA1               	movwf	printf@f& (0+255),b
 14294  001644  0E7F               	movlw	high STR_21
 14295  001646  6FA2               	movwf	(printf@f+1)& (0+255),b
 14296  001648  ECC4  F038         	call	_printf	;wreg free
 14297  00164C  D137               	goto	l396
 14298  00164E  FFFF               	dw	65535	; assembler added errata NOP
 14299                           
 14300                           ;comunicacao.h: 150: if (aguardaBuffer("OK")) {
 14301  001650  0EFA               	movlw	low STR_5
 14302  001652  0100               	movlb	0	; () banked
 14303  001654  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14304  001656  0E7F               	movlw	high STR_5
 14305  001658  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14306  00165A  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14307  00165E  0900               	iorlw	0
 14308  001660  B4D8               	btfsc	status,2,c
 14309  001662  D0B2               	goto	l362
 14310                           
 14311                           ;comunicacao.h: 151: limparBuffer();
 14312  001664  ECC3  F037         	call	_limparBuffer	;wreg free
 14313                           
 14314                           ;comunicacao.h: 152: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : t
      +                          el2);
 14315  001668  0100               	movlb	0	; () banked
 14316  00166A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14317  00166C  B4D8               	btfsc	status,2,c
 14318  00166E  D004               	goto	l357
 14319                           
 14320                           ; BSR set to: 0
 14321  001670  0EA4               	movlw	low _tel2
 14322  001672  6FBD               	movwf	_enviaSMS$1207& (0+255),b
 14323  001674  0E01               	movlw	high _tel2
 14324  001676  D004               	goto	L36
 14325  001678                     l357:
 14326  001678  FFFF               	dw	65535	; assembler added errata NOP
 14327                           
 14328                           ; BSR set to: 0
 14329                           
 14330                           ; BSR set to: 0
 14331  00167A  0EB0               	movlw	low _tel1
 14332  00167C  6FBD               	movwf	_enviaSMS$1207& (0+255),b
 14333  00167E  0E01               	movlw	high _tel1
 14334  001680                     L36:
 14335  001680  FFFF               	dw	65535	; assembler added errata NOP
 14336  001682  6FBE               	movwf	(_enviaSMS$1207+1)& (0+255),b
 14337                           
 14338                           ; BSR set to: 0
 14339                           
 14340                           ; BSR set to: 0
 14341  001684  0E5F               	movlw	low STR_12
 14342  001686  6FA1               	movwf	printf@f& (0+255),b
 14343  001688  0E7D               	movlw	high STR_12
 14344  00168A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14345  00168C  C0BD  F0A3         	movff	_enviaSMS$1207,?_printf+2
 14346  001690  C0BE  F0A4         	movff	_enviaSMS$1207+1,?_printf+3
 14347  001694  ECC4  F038         	call	_printf	;wreg free
 14348                           
 14349                           ;comunicacao.h: 153: delay(120);
 14350  001698  0E00               	movlw	0
 14351  00169A  0100               	movlb	0	; () banked
 14352  00169C  6F81               	movwf	(delay@x+1)& (0+255),b
 14353  00169E  0E78               	movlw	120
 14354  0016A0  6F80               	movwf	delay@x& (0+255),b
 14355  0016A2  ECA8  F037         	call	_delay	;wreg free
 14356                           
 14357                           ;comunicacao.h: 154: timerEtapaComunicacao = 8;
 14358  0016A6  0E08               	movlw	8
 14359  0016A8  FFFF               	dw	65535	; assembler added errata NOP
 14360  0016AA  0100               	movlb	0	; () banked
 14361  0016AC  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14362                           
 14363                           ; BSR set to: 0
 14364                           ;comunicacao.h: 155: etapaComunicacao++;
 14365  0016AE  4A51               	infsnz	_etapaComunicacao,f,c
 14366  0016B0  2A52               	incf	_etapaComunicacao+1,f,c
 14367                           
 14368                           ; BSR set to: 0
 14369  0016B2  D08A               	goto	l362
 14370  0016B4  FFFF               	dw	65535	; assembler added errata NOP
 14371                           
 14372                           ; BSR set to: 0
 14373                           ;comunicacao.h: 163: if (aguardaBuffer(">")) {
 14374                           
 14375                           ; BSR set to: 0
 14376  0016B6  0EFD               	movlw	low STR_13
 14377  0016B8  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14378  0016BA  0E7F               	movlw	high STR_13
 14379  0016BC  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14380  0016BE  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14381  0016C2  0900               	iorlw	0
 14382  0016C4  B4D8               	btfsc	status,2,c
 14383  0016C6  D080               	goto	l362
 14384                           
 14385                           ;comunicacao.h: 164: limparBuffer();
 14386  0016C8  ECC3  F037         	call	_limparBuffer	;wreg free
 14387                           
 14388                           ;comunicacao.h: 165: if (tipo == 1) {
 14389  0016CC  0100               	movlb	0	; () banked
 14390  0016CE  05C7               	decf	enviaSMS@tipo& (0+255),w,b
 14391  0016D0  A4D8               	btfss	status,2,c
 14392  0016D2  D018               	goto	l363
 14393                           
 14394                           ; BSR set to: 0
 14395                           ;comunicacao.h: 166: printf("DISPARO ALARME DE INCENDIO\r\nEM %02d:%02d:%02d %02d/%02d/%
      +                          02d\r\n", _hor, _min, _sec, _dia, _mes, _ano);
 14396  0016D4  0EBD               	movlw	low STR_25
 14397  0016D6  6FA1               	movwf	printf@f& (0+255),b
 14398  0016D8  0E7B               	movlw	high STR_25
 14399  0016DA  6FA2               	movwf	(printf@f+1)& (0+255),b
 14400  0016DC  C0EC  F0A3         	movff	__hor,?_printf+2
 14401  0016E0  6BA4               	clrf	(?_printf+3)& (0+255),b
 14402  0016E2  C0ED  F0A5         	movff	__min,?_printf+4
 14403  0016E6  6BA6               	clrf	(?_printf+5)& (0+255),b
 14404  0016E8  C0EE  F0A7         	movff	__sec,?_printf+6
 14405  0016EC  6BA8               	clrf	(?_printf+7)& (0+255),b
 14406  0016EE  C0EB  F0A9         	movff	__dia,?_printf+8
 14407  0016F2  6BAA               	clrf	(?_printf+9)& (0+255),b
 14408  0016F4  C0EA  F0AB         	movff	__mes,?_printf+10
 14409  0016F8  6BAC               	clrf	(?_printf+11)& (0+255),b
 14410  0016FA  C0E9  F0AD         	movff	__ano,?_printf+12
 14411  0016FE  6BAE               	clrf	(?_printf+13)& (0+255),b
 14412  001700  ECC4  F038         	call	_printf	;wreg free
 14413  001704                     l363:
 14414  001704  FFFF               	dw	65535	; assembler added errata NOP
 14415                           
 14416                           ;comunicacao.h: 167: }
 14417                           ;comunicacao.h: 168: if (tipo == 2) {
 14418  001706  0E02               	movlw	2
 14419  001708  0100               	movlb	0	; () banked
 14420  00170A  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14421  00170C  A4D8               	btfss	status,2,c
 14422  00170E  D04B               	goto	l364
 14423                           
 14424                           ; BSR set to: 0
 14425                           ;comunicacao.h: 169: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%0
      +                          2d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
 14426                           ;comunicacao.h: 170: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FA
      +                          LHA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA")
      +                          ;
 14427  001710  05FB               	decf	_status_estacionaria& (0+255),w,b
 14428  001712  B4D8               	btfsc	status,2,c
 14429  001714  D004               	goto	l366
 14430                           
 14431                           ; BSR set to: 0
 14432  001716  0ED2               	movlw	low STR_28
 14433  001718  6FBF               	movwf	_enviaSMS$1220& (0+255),b
 14434  00171A  0E7F               	movlw	high STR_28
 14435  00171C  D004               	goto	L34
 14436  00171E                     l366:
 14437  00171E  FFFF               	dw	65535	; assembler added errata NOP
 14438                           
 14439                           ; BSR set to: 0
 14440                           
 14441                           ; BSR set to: 0
 14442  001720  0EFA               	movlw	low STR_5
 14443  001722  6FBF               	movwf	_enviaSMS$1220& (0+255),b
 14444  001724  0E7F               	movlw	high STR_5
 14445  001726                     L34:
 14446  001726  FFFF               	dw	65535	; assembler added errata NOP
 14447  001728  6FC0               	movwf	(_enviaSMS$1220+1)& (0+255),b
 14448                           
 14449                           ; BSR set to: 0
 14450  00172A  05FC               	decf	_status_principal& (0+255),w,b
 14451  00172C  B4D8               	btfsc	status,2,c
 14452  00172E  D004               	goto	l370
 14453                           
 14454                           ; BSR set to: 0
 14455  001730  0ED2               	movlw	low STR_28
 14456  001732  6FC1               	movwf	_enviaSMS$1221& (0+255),b
 14457  001734  0E7F               	movlw	high STR_28
 14458  001736  D004               	goto	L35
 14459  001738                     l370:
 14460  001738  FFFF               	dw	65535	; assembler added errata NOP
 14461                           
 14462                           ; BSR set to: 0
 14463                           
 14464                           ; BSR set to: 0
 14465  00173A  0EFA               	movlw	low STR_5
 14466  00173C  6FC1               	movwf	_enviaSMS$1221& (0+255),b
 14467  00173E  0E7F               	movlw	high STR_5
 14468  001740                     L35:
 14469  001740  FFFF               	dw	65535	; assembler added errata NOP
 14470  001742  6FC2               	movwf	(_enviaSMS$1221+1)& (0+255),b
 14471                           
 14472                           ; BSR set to: 0
 14473  001744  05FD               	decf	_status_jockey& (0+255),w,b
 14474  001746  B4D8               	btfsc	status,2,c
 14475  001748  D004               	goto	l374
 14476                           
 14477                           ; BSR set to: 0
 14478  00174A  0ED2               	movlw	low STR_28
 14479  00174C  6FC3               	movwf	_enviaSMS$1222& (0+255),b
 14480  00174E  0E7F               	movlw	high STR_28
 14481  001750  D004               	goto	L37
 14482  001752                     l374:
 14483  001752  FFFF               	dw	65535	; assembler added errata NOP
 14484                           
 14485                           ; BSR set to: 0
 14486                           
 14487                           ; BSR set to: 0
 14488  001754  0EFA               	movlw	low STR_5
 14489  001756  6FC3               	movwf	_enviaSMS$1222& (0+255),b
 14490  001758  0E7F               	movlw	high STR_5
 14491  00175A                     L37:
 14492  00175A  FFFF               	dw	65535	; assembler added errata NOP
 14493  00175C  6FC4               	movwf	(_enviaSMS$1222+1)& (0+255),b
 14494                           
 14495                           ; BSR set to: 0
 14496                           
 14497                           ; BSR set to: 0
 14498  00175E  0E55               	movlw	low STR_26
 14499  001760  6FA1               	movwf	printf@f& (0+255),b
 14500  001762  0E7B               	movlw	high STR_26
 14501  001764  6FA2               	movwf	(printf@f+1)& (0+255),b
 14502  001766  C0EC  F0A3         	movff	__hor,?_printf+2
 14503  00176A  6BA4               	clrf	(?_printf+3)& (0+255),b
 14504  00176C  C0ED  F0A5         	movff	__min,?_printf+4
 14505  001770  6BA6               	clrf	(?_printf+5)& (0+255),b
 14506  001772  C0EE  F0A7         	movff	__sec,?_printf+6
 14507  001776  6BA8               	clrf	(?_printf+7)& (0+255),b
 14508  001778  C0EB  F0A9         	movff	__dia,?_printf+8
 14509  00177C  6BAA               	clrf	(?_printf+9)& (0+255),b
 14510  00177E  C0EA  F0AB         	movff	__mes,?_printf+10
 14511  001782  6BAC               	clrf	(?_printf+11)& (0+255),b
 14512  001784  C0E9  F0AD         	movff	__ano,?_printf+12
 14513  001788  6BAE               	clrf	(?_printf+13)& (0+255),b
 14514  00178A  C0C3  F0AF         	movff	_enviaSMS$1222,?_printf+14
 14515  00178E  C0C4  F0B0         	movff	_enviaSMS$1222+1,?_printf+15
 14516  001792  C0C1  F0B1         	movff	_enviaSMS$1221,?_printf+16
 14517  001796  C0C2  F0B2         	movff	_enviaSMS$1221+1,?_printf+17
 14518  00179A  C0BF  F0B3         	movff	_enviaSMS$1220,?_printf+18
 14519  00179E  C0C0  F0B4         	movff	_enviaSMS$1220+1,?_printf+19
 14520  0017A2  ECC4  F038         	call	_printf	;wreg free
 14521  0017A6                     l364:
 14522  0017A6  FFFF               	dw	65535	; assembler added errata NOP
 14523                           
 14524                           ;comunicacao.h: 171: }
 14525                           ;comunicacao.h: 172: delay(150);
 14526  0017A8  0E00               	movlw	0
 14527  0017AA  0100               	movlb	0	; () banked
 14528  0017AC  6F81               	movwf	(delay@x+1)& (0+255),b
 14529  0017AE  0E96               	movlw	150
 14530  0017B0  6F80               	movwf	delay@x& (0+255),b
 14531  0017B2  ECA8  F037         	call	_delay	;wreg free
 14532                           
 14533                           ;comunicacao.h: 173: writeChar(0x1A);
 14534  0017B6  0E1A               	movlw	26
 14535  0017B8  0100               	movlb	0	; () banked
 14536  0017BA  6F80               	movwf	writeChar@hex& (0+255),b
 14537  0017BC  0E00               	movlw	0
 14538  0017BE  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14539  0017C0  EC7F  F036         	call	_writeChar	;wreg free
 14540                           
 14541                           ;comunicacao.h: 174: timerEtapaComunicacao = 30;
 14542  0017C4  0E1E               	movlw	30
 14543  0017C6  D770               	goto	L39
 14544  0017C8                     l362:
 14545  0017C8  FFFF               	dw	65535	; assembler added errata NOP
 14546                           
 14547                           ;comunicacao.h: 176: }
 14548                           ;comunicacao.h: 177: if (!timerEtapaComunicacao) {
 14549                           
 14550                           ; BSR set to: 0
 14551  0017CA  0100               	movlb	0	; () banked
 14552  0017CC  FFFF               	dw	65535	; assembler added errata NOP
 14553  0017CE  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14554  0017D0  A4D8               	btfss	status,2,c
 14555  0017D2  D09A               	goto	l350
 14556  0017D4  D073               	goto	l396
 14557  0017D6  FFFF               	dw	65535	; assembler added errata NOP
 14558                           
 14559                           ; BSR set to: 0
 14560                           ;comunicacao.h: 182: if (aguardaBuffer("OK") || aguardaBuffer("ERROR")) {
 14561                           
 14562                           ; BSR set to: 0
 14563  0017D8  0EFA               	movlw	low STR_5
 14564  0017DA  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14565  0017DC  0E7F               	movlw	high STR_5
 14566  0017DE  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14567  0017E0  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14568  0017E4  0900               	iorlw	0
 14569  0017E6  A4D8               	btfss	status,2,c
 14570  0017E8  D00A               	goto	u5990
 14571  0017EA  0ED8               	movlw	low STR_17
 14572  0017EC  0100               	movlb	0	; () banked
 14573  0017EE  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14574  0017F0  0E7F               	movlw	high STR_17
 14575  0017F2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14576  0017F4  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14577  0017F8  0900               	iorlw	0
 14578  0017FA  B4D8               	btfsc	status,2,c
 14579  0017FC  D085               	goto	l350
 14580  0017FE                     u5990:
 14581  0017FE  FFFF               	dw	65535	; assembler added errata NOP
 14582                           
 14583                           ;comunicacao.h: 183: if (tipo == 2) {
 14584  001800  0E02               	movlw	2
 14585  001802  0100               	movlb	0	; () banked
 14586  001804  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14587  001806  A4D8               	btfss	status,2,c
 14588  001808  D012               	goto	l382
 14589                           
 14590                           ; BSR set to: 0
 14591                           ;comunicacao.h: 184: if (telefoneSelecionado == 0) {
 14592  00180A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14593  00180C  A4D8               	btfss	status,2,c
 14594  00180E  D007               	goto	l383
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;comunicacao.h: 185: telefoneSelecionado = 1;
 14598  001810  0E01               	movlw	1
 14599  001812  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14600                           
 14601                           ;comunicacao.h: 186: etapaComunicacao = 0;
 14602  001814  0E00               	movlw	0
 14603  001816  6E52               	movwf	_etapaComunicacao+1,c
 14604  001818  0E00               	movlw	0
 14605  00181A  6E51               	movwf	_etapaComunicacao,c
 14606                           
 14607                           ;comunicacao.h: 187: } else {
 14608  00181C  D7D7               	goto	L41
 14609  00181E                     l383:
 14610  00181E  FFFF               	dw	65535	; assembler added errata NOP
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;comunicacao.h: 188: telefoneSelecionado = 0;
 14614                           
 14615                           ; BSR set to: 0
 14616  001820  0E00               	movlw	0
 14617  001822  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14618                           
 14619                           ;comunicacao.h: 189: gsmOcupado = 0;
 14620  001824  0E00               	movlw	0
 14621  001826  6FF4               	movwf	_gsmOcupado& (0+255),b
 14622                           
 14623                           ;comunicacao.h: 190: menu_posi = 0;
 14624  001828  0E00               	movlw	0
 14625  00182A  6FDE               	movwf	_menu_posi& (0+255),b
 14626                           
 14627                           ; BSR set to: 0
 14628                           ;comunicacao.h: 191: }
 14629                           ;comunicacao.h: 192: } else {
 14630  00182C  D7CF               	goto	L41
 14631  00182E                     l382:
 14632  00182E  FFFF               	dw	65535	; assembler added errata NOP
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;comunicacao.h: 193: etapaComunicacao++;
 14636                           
 14637                           ; BSR set to: 0
 14638  001830  4A51               	infsnz	_etapaComunicacao,f,c
 14639  001832  2A52               	incf	_etapaComunicacao+1,f,c
 14640                           
 14641                           ; BSR set to: 0
 14642  001834  D7CB               	goto	L41
 14643  001836  FFFF               	dw	65535	; assembler added errata NOP
 14644                           
 14645                           ; BSR set to: 0
 14646                           ;comunicacao.h: 201: limparBuffer();
 14647                           
 14648                           ; BSR set to: 0
 14649  001838  ECC3  F037         	call	_limparBuffer	;wreg free
 14650                           
 14651                           ;comunicacao.h: 202: printf("ATD 0%s;\r\n", telefoneSelecionado == 0 ? tel1 : tel2);
 14652  00183C  0100               	movlb	0	; () banked
 14653  00183E  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14654  001840  B4D8               	btfsc	status,2,c
 14655  001842  D004               	goto	l389
 14656                           
 14657                           ; BSR set to: 0
 14658  001844  0EA4               	movlw	low _tel2
 14659  001846  6FC5               	movwf	_enviaSMS$1227& (0+255),b
 14660  001848  0E01               	movlw	high _tel2
 14661  00184A  D004               	goto	L38
 14662  00184C                     l389:
 14663  00184C  FFFF               	dw	65535	; assembler added errata NOP
 14664                           
 14665                           ; BSR set to: 0
 14666                           
 14667                           ; BSR set to: 0
 14668  00184E  0EB0               	movlw	low _tel1
 14669  001850  6FC5               	movwf	_enviaSMS$1227& (0+255),b
 14670  001852  0E01               	movlw	high _tel1
 14671  001854                     L38:
 14672  001854  FFFF               	dw	65535	; assembler added errata NOP
 14673  001856  6FC6               	movwf	(_enviaSMS$1227+1)& (0+255),b
 14674                           
 14675                           ; BSR set to: 0
 14676                           
 14677                           ; BSR set to: 0
 14678  001858  0E15               	movlw	low STR_35
 14679  00185A  6FA1               	movwf	printf@f& (0+255),b
 14680  00185C  0E7F               	movlw	high STR_35
 14681  00185E  6FA2               	movwf	(printf@f+1)& (0+255),b
 14682  001860  C0C5  F0A3         	movff	_enviaSMS$1227,?_printf+2
 14683  001864  C0C6  F0A4         	movff	_enviaSMS$1227+1,?_printf+3
 14684  001868  ECC4  F038         	call	_printf	;wreg free
 14685                           
 14686                           ;comunicacao.h: 203: timerEtapaComunicacao = 30;
 14687  00186C  0E1E               	movlw	30
 14688  00186E  0100               	movlb	0	; () banked
 14689  001870  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;comunicacao.h: 204: etapaComunicacao++;
 14693  001872  4A51               	infsnz	_etapaComunicacao,f,c
 14694  001874  2A52               	incf	_etapaComunicacao+1,f,c
 14695                           
 14696                           ;comunicacao.h: 205: break;
 14697  001876  D048               	goto	l350
 14698  001878  FFFF               	dw	65535	; assembler added errata NOP
 14699                           
 14700                           ; BSR set to: 0
 14701                           ;comunicacao.h: 207: if (!timerEtapaComunicacao) {
 14702                           
 14703                           ; BSR set to: 0
 14704  00187A  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14705  00187C  A4D8               	btfss	status,2,c
 14706  00187E  D044               	goto	l350
 14707                           
 14708                           ; BSR set to: 0
 14709                           ;comunicacao.h: 208: limparBuffer();
 14710  001880  ECC3  F037         	call	_limparBuffer	;wreg free
 14711                           
 14712                           ;comunicacao.h: 209: printf("ATH0\r\n");
 14713  001884  0EAA               	movlw	low STR_21
 14714  001886  0100               	movlb	0	; () banked
 14715  001888  6FA1               	movwf	printf@f& (0+255),b
 14716  00188A  0E7F               	movlw	high STR_21
 14717  00188C  6FA2               	movwf	(printf@f+1)& (0+255),b
 14718  00188E  ECC4  F038         	call	_printf	;wreg free
 14719                           
 14720                           ;comunicacao.h: 210: delay(550);
 14721  001892  0E02               	movlw	2
 14722  001894  0100               	movlb	0	; () banked
 14723  001896  6F81               	movwf	(delay@x+1)& (0+255),b
 14724  001898  0E26               	movlw	38
 14725  00189A  6F80               	movwf	delay@x& (0+255),b
 14726  00189C  ECA8  F037         	call	_delay	;wreg free
 14727                           
 14728                           ;comunicacao.h: 211: if (telefoneSelecionado == 0) {
 14729  0018A0  0100               	movlb	0	; () banked
 14730  0018A2  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14731  0018A4  A4D8               	btfss	status,2,c
 14732  0018A6  D003               	goto	l394
 14733                           
 14734                           ; BSR set to: 0
 14735                           ;comunicacao.h: 212: telefoneSelecionado = 1;
 14736  0018A8  0E01               	movlw	1
 14737  0018AA  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14738                           
 14739                           ;comunicacao.h: 213: } else {
 14740  0018AC  D007               	goto	l396
 14741  0018AE                     l394:
 14742  0018AE  FFFF               	dw	65535	; assembler added errata NOP
 14743                           
 14744                           ; BSR set to: 0
 14745                           ;comunicacao.h: 214: telefoneSelecionado = 0;
 14746                           
 14747                           ; BSR set to: 0
 14748  0018B0  0E00               	movlw	0
 14749  0018B2  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14750                           
 14751                           ;comunicacao.h: 215: gsmOcupado = 0;
 14752  0018B4  0E00               	movlw	0
 14753  0018B6  6FF4               	movwf	_gsmOcupado& (0+255),b
 14754                           
 14755                           ;comunicacao.h: 216: timerReenvioSMS = 2;
 14756  0018B8  0E02               	movlw	2
 14757  0018BA  6FF6               	movwf	_timerReenvioSMS& (0+255),b
 14758  0018BC                     l396:
 14759  0018BC  FFFF               	dw	65535	; assembler added errata NOP
 14760                           
 14761                           ; BSR set to: 0
 14762                           
 14763                           ; BSR set to: 0
 14764  0018BE  0E00               	movlw	0
 14765  0018C0  6E52               	movwf	_etapaComunicacao+1,c
 14766  0018C2  0E00               	movlw	0
 14767  0018C4  6E51               	movwf	_etapaComunicacao,c
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;comunicacao.h: 224: }
 14771                           
 14772                           ;comunicacao.h: 223: break;
 14773  0018C6  D020               	goto	l350
 14774  0018C8                     l348:
 14775  0018C8  FFFF               	dw	65535	; assembler added errata NOP
 14776                           
 14777                           ; BSR set to: 0
 14778                           
 14779                           ; BSR set to: 0
 14780  0018CA  C051  F0BB         	movff	_etapaComunicacao,??_enviaSMS
 14781  0018CE  C052  F0BC         	movff	_etapaComunicacao+1,??_enviaSMS+1
 14782                           
 14783                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14784                           ; Switch size 1, requested type "space"
 14785                           ; Number of cases is 1, Range of values is 0 to 0
 14786                           ; switch strategies available:
 14787                           ; Name         Instructions Cycles
 14788                           ; simple_byte            4     3 (average)
 14789                           ;	Chosen strategy is simple_byte
 14790  0018D2  51BC               	movf	(??_enviaSMS+1)& (0+255),w,b
 14791  0018D4  0A00               	xorlw	0	; case 0
 14792  0018D6  A4D8               	btfss	status,2,c
 14793  0018D8  D7F1               	goto	l396
 14794                           
 14795                           ; BSR set to: 0
 14796                           ; Switch size 1, requested type "space"
 14797                           ; Number of cases is 7, Range of values is 0 to 6
 14798                           ; switch strategies available:
 14799                           ; Name         Instructions Cycles
 14800                           ; simple_byte           22    12 (average)
 14801                           ;	Chosen strategy is simple_byte
 14802  0018DA  51BB               	movf	??_enviaSMS& (0+255),w,b
 14803  0018DC  0A00               	xorlw	0	; case 0
 14804  0018DE  B4D8               	btfsc	status,2,c
 14805  0018E0  D674               	goto	l349
 14806  0018E2  0A01               	xorlw	1	; case 1
 14807  0018E4  B4D8               	btfsc	status,2,c
 14808  0018E6  D681               	goto	l351
 14809  0018E8  0A03               	xorlw	3	; case 2
 14810  0018EA  B4D8               	btfsc	status,2,c
 14811  0018EC  D6B0               	goto	l354
 14812  0018EE  0A01               	xorlw	1	; case 3
 14813  0018F0  B4D8               	btfsc	status,2,c
 14814  0018F2  D6E0               	goto	l361
 14815  0018F4  0A07               	xorlw	7	; case 4
 14816  0018F6  B4D8               	btfsc	status,2,c
 14817  0018F8  D76E               	goto	l378
 14818  0018FA  0A01               	xorlw	1	; case 5
 14819  0018FC  B4D8               	btfsc	status,2,c
 14820  0018FE  D79B               	goto	l387
 14821  001900  0A03               	xorlw	3	; case 6
 14822  001902  B4D8               	btfsc	status,2,c
 14823  001904  D7B9               	goto	l392
 14824  001906  D7DA               	goto	l396
 14825  001908                     l350:
 14826  001908  FFFF               	dw	65535	; assembler added errata NOP
 14827                           
 14828                           ; BSR set to: 0
 14829  00190A  0012               	return		;funcret
 14830  00190C  FFFF               	dw	65535	; errata NOP
 14831  00190E                     __end_of_enviaSMS:
 14832                           	opt stack 0
 14833                           tblptru	equ	0xFF8
 14834                           tblptrh	equ	0xFF7
 14835                           tblptrl	equ	0xFF6
 14836                           tablat	equ	0xFF5
 14837                           prodh	equ	0xFF4
 14838                           prodl	equ	0xFF3
 14839                           intcon	equ	0xFF2
 14840                           postinc0	equ	0xFEE
 14841                           wreg	equ	0xFE8
 14842                           postdec1	equ	0xFE5
 14843                           fsr1l	equ	0xFE1
 14844                           indf2	equ	0xFDF
 14845                           postinc2	equ	0xFDE
 14846                           fsr2h	equ	0xFDA
 14847                           fsr2l	equ	0xFD9
 14848                           status	equ	0xFD8
 14849                           
 14850 ;; *************** function _writeChar *****************
 14851 ;; Defined at:
 14852 ;;		line 21 in file "serial.h"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;  hex             2    0[BANK0 ] PTR unsigned char 
 14855 ;;		 -> RAM(1535), 
 14856 ;; Auto vars:     Size  Location     Type
 14857 ;;		None
 14858 ;; Return value:  Size  Location     Type
 14859 ;;                  1    wreg      void 
 14860 ;; Registers used:
 14861 ;;		None
 14862 ;; Tracked objects:
 14863 ;;		On entry : 0/0
 14864 ;;		On exit  : 0/0
 14865 ;;		Unchanged: 0/0
 14866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14867 ;;      Params:         0       2       0       0       0       0       0
 14868 ;;      Locals:         0       0       0       0       0       0       0
 14869 ;;      Temps:          0       0       0       0       0       0       0
 14870 ;;      Totals:         0       2       0       0       0       0       0
 14871 ;;Total ram usage:        2 bytes
 14872 ;; Hardware stack levels used:    1
 14873 ;; Hardware stack levels required when called:    6
 14874 ;; This function calls:
 14875 ;;		Nothing
 14876 ;; This function is called by:
 14877 ;;		_getSinalSIM800L
 14878 ;;		_comunicarTeste
 14879 ;;		_enviaSMS
 14880 ;; This function uses a non-reentrant model
 14881 ;;
 14882                           
 14883                           	psect	text46
 14884  006CFE                     __ptext46:
 14885                           	opt stack 0
 14886  006CFE                     _writeChar:
 14887                           	opt stack 0
 14888  006CFE  FFFF               	dw	65535	; assembler added errata NOP
 14889                           
 14890                           ;serial.h: 22: while (!TXSTAbits.TRMT);
 14891                           
 14892                           ;incstack = 0
 14893  006D00  A2AC               	btfss	4012,1,c	;volatile
 14894  006D02  D7FD               	goto	_writeChar
 14895                           
 14896                           ;serial.h: 23: TXREG = hex;
 14897  006D04  C080  FFAD         	movff	writeChar@hex,4013	;volatile
 14898  006D08  0012               	return		;funcret
 14899  006D0A  FFFF               	dw	65535	; errata NOP
 14900  006D0C                     __end_of_writeChar:
 14901                           	opt stack 0
 14902                           tblptru	equ	0xFF8
 14903                           tblptrh	equ	0xFF7
 14904                           tblptrl	equ	0xFF6
 14905                           tablat	equ	0xFF5
 14906                           prodh	equ	0xFF4
 14907                           prodl	equ	0xFF3
 14908                           intcon	equ	0xFF2
 14909                           postinc0	equ	0xFEE
 14910                           wreg	equ	0xFE8
 14911                           postdec1	equ	0xFE5
 14912                           fsr1l	equ	0xFE1
 14913                           indf2	equ	0xFDF
 14914                           postinc2	equ	0xFDE
 14915                           fsr2h	equ	0xFDA
 14916                           fsr2l	equ	0xFD9
 14917                           status	equ	0xFD8
 14918                           
 14919 ;; *************** function _printf *****************
 14920 ;; Defined at:
 14921 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
 14922 ;; Parameters:    Size  Location     Type
 14923 ;;  f               2   33[BANK0 ] PTR const unsigned char 
 14924 ;;		 -> STR_36(7), STR_35(11), STR_26(104), STR_25(63), 
 14925 ;;		 -> STR_23(18), STR_21(7), STR_20(12), STR_18(5), 
 14926 ;;		 -> STR_14(126), STR_12(18), STR_10(12), STR_8(5), 
 14927 ;;		 -> STR_4(5), STR_3(9), 
 14928 ;; Auto vars:     Size  Location     Type
 14929 ;;  pb              4   55[BANK0 ] struct __prbuf
 14930 ;;  ap              2   53[BANK0 ] PTR void [1]
 14931 ;;		 -> ?_sprintf(2), ?_printf(2), 
 14932 ;; Return value:  Size  Location     Type
 14933 ;;                  2   33[BANK0 ] int 
 14934 ;; Registers used:
 14935 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14936 ;; Tracked objects:
 14937 ;;		On entry : 0/0
 14938 ;;		On exit  : 0/0
 14939 ;;		Unchanged: 0/0
 14940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14941 ;;      Params:         0      20       0       0       0       0       0
 14942 ;;      Locals:         0       6       0       0       0       0       0
 14943 ;;      Temps:          0       0       0       0       0       0       0
 14944 ;;      Totals:         0      26       0       0       0       0       0
 14945 ;;Total ram usage:       26 bytes
 14946 ;; Hardware stack levels used:    1
 14947 ;; Hardware stack levels required when called:    8
 14948 ;; This function calls:
 14949 ;;		__doprnt
 14950 ;; This function is called by:
 14951 ;;		_getSinalSIM800L
 14952 ;;		_comunicarTeste
 14953 ;;		_enviaSMS
 14954 ;; This function uses a non-reentrant model
 14955 ;;
 14956                           
 14957                           	psect	text47
 14958  007188                     __ptext47:
 14959                           	opt stack 0
 14960  007188                     _printf:
 14961                           	opt stack 0
 14962  007188  FFFF               	dw	65535	; assembler added errata NOP
 14963                           
 14964                           ;incstack = 0
 14965  00718A  0E00               	movlw	0
 14966  00718C  0100               	movlb	0	; () banked
 14967  00718E  6FB7               	movwf	printf@pb& (0+255),b
 14968  007190  0E00               	movlw	0
 14969  007192  6FB8               	movwf	(printf@pb+1)& (0+255),b
 14970  007194  0E1E               	movlw	low _putch
 14971  007196  6FB9               	movwf	(printf@pb+2)& (0+255),b
 14972  007198  0E6D               	movlw	high _putch
 14973  00719A  6FBA               	movwf	(printf@pb+3)& (0+255),b
 14974  00719C  0EA3               	movlw	low (?_printf+2)
 14975  00719E  6FB5               	movwf	printf@ap& (0+255),b
 14976  0071A0  0E00               	movlw	high (?_printf+2)
 14977  0071A2  6FB6               	movwf	(printf@ap+1)& (0+255),b
 14978                           
 14979                           ; BSR set to: 0
 14980                           ;	Return value of _printf is never used
 14981  0071A4  0EB7               	movlw	low printf@pb
 14982  0071A6  6F8C               	movwf	__doprnt@pb& (0+255),b
 14983  0071A8  0E00               	movlw	high printf@pb
 14984  0071AA  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 14985  0071AC  C0A1  F08E         	movff	printf@f,__doprnt@f
 14986  0071B0  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
 14987  0071B4  0EB5               	movlw	low printf@ap
 14988  0071B6  6F90               	movwf	__doprnt@ap& (0+255),b
 14989  0071B8  0E00               	movlw	high printf@ap
 14990  0071BA  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 14991  0071BC  EC8E  F000         	call	__doprnt	;wreg free
 14992  0071C0  0012               	return		;funcret
 14993  0071C2  FFFF               	dw	65535	; errata NOP
 14994  0071C4                     __end_of_printf:
 14995                           	opt stack 0
 14996                           tblptru	equ	0xFF8
 14997                           tblptrh	equ	0xFF7
 14998                           tblptrl	equ	0xFF6
 14999                           tablat	equ	0xFF5
 15000                           prodh	equ	0xFF4
 15001                           prodl	equ	0xFF3
 15002                           intcon	equ	0xFF2
 15003                           postinc0	equ	0xFEE
 15004                           wreg	equ	0xFE8
 15005                           postdec1	equ	0xFE5
 15006                           fsr1l	equ	0xFE1
 15007                           indf2	equ	0xFDF
 15008                           postinc2	equ	0xFDE
 15009                           fsr2h	equ	0xFDA
 15010                           fsr2l	equ	0xFD9
 15011                           status	equ	0xFD8
 15012                           
 15013 ;; *************** function __doprnt *****************
 15014 ;; Defined at:
 15015 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 15016 ;; Parameters:    Size  Location     Type
 15017 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 15018 ;;		 -> sprintf@pb(4), printf@pb(4), 
 15019 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15020 ;;		 -> intToFloatStr@conv(4), STR_122(15), STR_121(12), STR_120(10), 
 15021 ;;		 -> STR_119(18), STR_118(10), STR_117(18), STR_116(16), 
 15022 ;;		 -> STR_115(10), STR_113(3), STR_112(14), STR_111(20), 
 15023 ;;		 -> STR_110(8), STR_109(10), STR_108(11), STR_107(9), 
 15024 ;;		 -> STR_106(3), STR_105(15), STR_104(15), STR_103(11), 
 15025 ;;		 -> STR_102(11), STR_101(19), STR_100(5), STR_99(12), 
 15026 ;;		 -> STR_98(5), STR_97(14), STR_96(19), STR_93(3), 
 15027 ;;		 -> STR_92(7), STR_91(7), STR_89(12), STR_88(17), 
 15028 ;;		 -> STR_87(20), STR_86(8), STR_83(14), STR_80(14), 
 15029 ;;		 -> STR_79(11), STR_76(10), STR_75(31), STR_72(11), 
 15030 ;;		 -> STR_71(20), STR_70(20), STR_69(21), STR_68(15), 
 15031 ;;		 -> STR_67(6), STR_66(15), STR_65(6), STR_64(20), 
 15032 ;;		 -> STR_63(15), STR_62(19), STR_61(20), STR_60(21), 
 15033 ;;		 -> STR_59(21), STR_58(18), STR_57(20), STR_56(17), 
 15034 ;;		 -> STR_55(26), STR_54(16), STR_51(15), STR_48(15), 
 15035 ;;		 -> STR_45(11), STR_44(17), STR_43(16), STR_42(19), 
 15036 ;;		 -> STR_41(19), STR_40(16), STR_39(15), STR_38(15), 
 15037 ;;		 -> STR_37(20), STR_36(7), STR_35(11), STR_26(104), 
 15038 ;;		 -> STR_25(63), STR_23(18), STR_21(7), STR_20(12), 
 15039 ;;		 -> STR_18(5), STR_14(126), STR_12(18), STR_10(12), 
 15040 ;;		 -> STR_8(5), STR_4(5), STR_3(9), STR_2(5), 
 15041 ;;		 -> STR_1(5), 
 15042 ;;  ap              2   16[BANK0 ] PTR PTR void 
 15043 ;;		 -> sprintf@ap(2), printf@ap(2), 
 15044 ;; Auto vars:     Size  Location     Type
 15045 ;;  tmpval          4    0        struct .
 15046 ;;  width           2   30[BANK0 ] int 
 15047 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 15048 ;;		 -> ?_sprintf(2), ?_printf(2), STR_123(7), _doprnt@c(1), 
 15049 ;;		 -> intToFloatStr@end(4), STR_114(12), STR_95(17), STR_94(13), 
 15050 ;;		 -> STR_90(12), STR_85(5), STR_84(3), STR_82(5), 
 15051 ;;		 -> STR_81(3), STR_78(5), STR_77(3), STR_74(4), 
 15052 ;;		 -> STR_73(4), STR_53(5), STR_52(3), STR_50(5), 
 15053 ;;		 -> STR_49(3), line3(21), STR_47(5), STR_46(3), 
 15054 ;;		 -> line2(21), line1(21), line4(21), STR_32(6), 
 15055 ;;		 -> STR_31(3), STR_30(6), STR_29(3), STR_28(6), 
 15056 ;;		 -> STR_27(3), STR_15(12), tel2(12), tel1(12), 
 15057 ;;		 -> bufferAUX(20), NULL(0), bufferSerial(60), 
 15058 ;;  len             2   25[BANK0 ] unsigned int 
 15059 ;;  val             2   23[BANK0 ] unsigned int 
 15060 ;;  c               1   32[BANK0 ] char 
 15061 ;;  flag            1   27[BANK0 ] unsigned char 
 15062 ;;  prec            1   22[BANK0 ] char 
 15063 ;; Return value:  Size  Location     Type
 15064 ;;                  2   12[BANK0 ] int 
 15065 ;; Registers used:
 15066 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15067 ;; Tracked objects:
 15068 ;;		On entry : 0/0
 15069 ;;		On exit  : 0/0
 15070 ;;		Unchanged: 0/0
 15071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15072 ;;      Params:         0       6       0       0       0       0       0
 15073 ;;      Locals:         0      11       0       0       0       0       0
 15074 ;;      Temps:          0       4       0       0       0       0       0
 15075 ;;      Totals:         0      21       0       0       0       0       0
 15076 ;;Total ram usage:       21 bytes
 15077 ;; Hardware stack levels used:    1
 15078 ;; Hardware stack levels required when called:    7
 15079 ;; This function calls:
 15080 ;;		Absolute function
 15081 ;;		___lwdiv
 15082 ;;		___lwmod
 15083 ;;		___wmul
 15084 ;;		_isdigit
 15085 ;;		_putch
 15086 ;; This function is called by:
 15087 ;;		_printf
 15088 ;;		_sprintf
 15089 ;; This function uses a non-reentrant model
 15090 ;;
 15091                           
 15092                           	psect	text48
 15093  00011C                     __ptext48:
 15094                           	opt stack 0
 15095  00011C                     __doprnt:
 15096                           	opt stack 0
 15097  00011C  FFFF               	dw	65535	; assembler added errata NOP
 15098                           
 15099                           ;doprnt.c: 499: signed char c;
 15100                           ;doprnt.c: 501: int width;
 15101                           ;doprnt.c: 506: signed char prec;
 15102                           ;doprnt.c: 508: unsigned char flag;
 15103                           ;doprnt.c: 523: union {
 15104                           ;doprnt.c: 524: unsigned long vd;
 15105                           ;doprnt.c: 525: double integ;
 15106                           ;doprnt.c: 526: } tmpval;
 15107                           ;doprnt.c: 528: unsigned int val;
 15108                           ;doprnt.c: 529: unsigned len;
 15109                           ;doprnt.c: 530: const char * cp;
 15110                           ;doprnt.c: 536: while(c = *f++) {
 15111                           
 15112                           ;incstack = 0
 15113  00011E  D3D7               	goto	u5280
 15114  000120  FFFF               	dw	65535	; assembler added errata NOP
 15115                           
 15116                           ;doprnt.c: 538: if(c != '%')
 15117  000122  0E25               	movlw	37
 15118  000124  0100               	movlb	0	; () banked
 15119  000126  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15120  000128  B4D8               	btfsc	status,2,c
 15121  00012A  D037               	goto	l1035
 15122                           
 15123                           ; BSR set to: 0
 15124                           ;doprnt.c: 540: {
 15125                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 15126  00012C  EE20 F002          	lfsr	2,2
 15127  000130  518C               	movf	__doprnt@pb& (0+255),w,b
 15128  000132  26D9               	addwf	fsr2l,f,c
 15129  000134  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15130  000136  22DA               	addwfc	fsr2h,f,c
 15131  000138  50DE               	movf	postinc2,w,c
 15132  00013A  10DE               	iorwf	postinc2,w,c
 15133  00013C  B4D8               	btfsc	status,2,c
 15134  00013E  D016               	goto	l1036
 15135                           
 15136                           ; BSR set to: 0
 15137  000140  EE20 F002          	lfsr	2,2
 15138  000144  518C               	movf	__doprnt@pb& (0+255),w,b
 15139  000146  26D9               	addwf	fsr2l,f,c
 15140  000148  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15141  00014A  22DA               	addwfc	fsr2h,f,c
 15142  00014C  D801               	call	u4848
 15143  00014E  D3BF               	goto	u5280
 15144  000150                     u4848:
 15145  000150  FFFF               	dw	65535	; assembler added errata NOP
 15146  000152  0005               	push	
 15147  000154  6EFA               	movwf	pclath,c
 15148  000156  50DE               	movf	postinc2,w,c
 15149  000158  6EFD               	movwf	tosl,c
 15150  00015A  50DE               	movf	postinc2,w,c
 15151  00015C  6EFE               	movwf	tosh,c
 15152  00015E  50F8               	movf	tblptru,w,c
 15153  000160  6EFF               	movwf	tosu,c
 15154  000162  50FA               	movf	pclath,w,c
 15155  000164  51A0               	movf	__doprnt@c& (0+255),w,b
 15156  000166  0012               	return		;indir
 15157  000168  FFFF               	dw	65535	; errata NOP
 15158  00016A  D3B1               	goto	u5280
 15159  00016C                     l1036:
 15160  00016C  FFFF               	dw	65535	; assembler added errata NOP
 15161  00016E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15162  000172  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15163  000176  CFDE F092          	movff	postinc2,??__doprnt
 15164  00017A  CFDD F093          	movff	postdec2,??__doprnt+1
 15165  00017E  C092  FFD9         	movff	??__doprnt,fsr2l
 15166  000182  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15167  000186  C0A0  FFDF         	movff	__doprnt@c,indf2
 15168  00018A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15169  00018E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15170  000192  2ADE               	incf	postinc2,f,c
 15171  000194  0E00               	movlw	0
 15172  000196  22DD               	addwfc	postdec2,f,c
 15173                           
 15174                           ;doprnt.c: 542: continue;
 15175  000198  D39A               	goto	u5280
 15176  00019A                     l1035:
 15177  00019A  FFFF               	dw	65535	; assembler added errata NOP
 15178                           
 15179                           ;doprnt.c: 543: }
 15180                           ;doprnt.c: 546: width = 0;
 15181  00019C  0E00               	movlw	0
 15182  00019E  0100               	movlb	0	; () banked
 15183  0001A0  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15184  0001A2  0E00               	movlw	0
 15185  0001A4  6F9E               	movwf	__doprnt@width& (0+255),b
 15186                           
 15187                           ;doprnt.c: 548: flag = 0;
 15188  0001A6  0E00               	movlw	0
 15189  0001A8  6F9B               	movwf	__doprnt@flag& (0+255),b
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;doprnt.c: 551: switch(*f) {
 15193                           
 15194                           ;doprnt.c: 550: for(;;) {
 15195  0001AA  D005               	goto	l1039
 15196  0001AC  FFFF               	dw	65535	; assembler added errata NOP
 15197                           
 15198                           ;doprnt.c: 580: flag |= 0x04;
 15199                           
 15200                           ; BSR set to: 0
 15201  0001AE  0100               	movlb	0	; () banked
 15202  0001B0  859B               	bsf	__doprnt@flag& (0+255),2,b
 15203                           
 15204                           ;doprnt.c: 581: f++;
 15205  0001B2  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15206  0001B4  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15207  0001B6                     l1039:
 15208  0001B6  FFFF               	dw	65535	; assembler added errata NOP
 15209                           
 15210                           ; BSR set to: 0
 15211  0001B8  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15212  0001BC  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15213  0001C0  6AF8               	clrf	tblptru,c
 15214  0001C2  0E05               	movlw	(high __ramtop+-1)
 15215  0001C4  64F7               	cpfsgt	tblptrh,c
 15216  0001C6  D004               	bra	u4857
 15217  0001C8  0008               	tblrd		*
 15218  0001CA  FFFF               	dw	65535	; errata NOP
 15219  0001CC  50F5               	movf	tablat,w,c
 15220  0001CE  D005               	bra	u4850
 15221  0001D0                     u4857:
 15222  0001D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15223  0001D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15224  0001D8  50EF               	movf	indf0,w,c
 15225  0001DA                     u4850:
 15226                           
 15227                           ; Switch size 1, requested type "space"
 15228                           ; Number of cases is 1, Range of values is 48 to 48
 15229                           ; switch strategies available:
 15230                           ; Name         Instructions Cycles
 15231                           ; simple_byte            4     3 (average)
 15232                           ;	Chosen strategy is simple_byte
 15233  0001DA  0A30               	xorlw	48	; case 48
 15234  0001DC  B4D8               	btfsc	status,2,c
 15235  0001DE  D7E6               	goto	l1040
 15236                           
 15237                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15238                           
 15239                           ;doprnt.c: 586: }
 15240                           
 15241                           ;doprnt.c: 585: break;
 15242  0001E0  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15243  0001E4  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15244  0001E8  6AF8               	clrf	tblptru,c
 15245  0001EA  0E05               	movlw	(high __ramtop+-1)
 15246  0001EC  64F7               	cpfsgt	tblptrh,c
 15247  0001EE  D004               	bra	u4867
 15248  0001F0  0008               	tblrd		*
 15249  0001F2  FFFF               	dw	65535	; errata NOP
 15250  0001F4  50F5               	movf	tablat,w,c
 15251  0001F6  D005               	bra	u4860
 15252  0001F8                     u4867:
 15253  0001F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15254  0001FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15255  000200  50EF               	movf	indf0,w,c
 15256  000202                     u4860:
 15257  000202  EC03  F037         	call	_isdigit
 15258  000206  A0D8               	btfss	status,0,c
 15259  000208  D16B               	goto	l1047
 15260                           
 15261                           ;doprnt.c: 598: width = 0;
 15262  00020A  0E00               	movlw	0
 15263  00020C  0100               	movlb	0	; () banked
 15264  00020E  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15265  000210  0E00               	movlw	0
 15266  000212  6F9E               	movwf	__doprnt@width& (0+255),b
 15267  000214  FFFF               	dw	65535	; assembler added errata NOP
 15268                           
 15269                           ;doprnt.c: 600: width *= 10;
 15270                           
 15271                           ; BSR set to: 0
 15272  000216  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 15273  00021A  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 15274  00021E  0E00               	movlw	0
 15275  000220  0100               	movlb	0	; () banked
 15276  000222  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15277  000224  0E0A               	movlw	10
 15278  000226  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15279  000228  ECE9  F01F         	call	___wmul	;wreg free
 15280  00022C  C080  F09E         	movff	?___wmul,__doprnt@width
 15281  000230  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 15282                           
 15283                           ;doprnt.c: 601: width += *f++ - '0';
 15284  000234  0ED0               	movlw	208
 15285  000236  0100               	movlb	0	; () banked
 15286  000238  6F92               	movwf	??__doprnt& (0+255),b
 15287  00023A  0EFF               	movlw	255
 15288  00023C  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15289  00023E  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15290  000242  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15291  000246  6AF8               	clrf	tblptru,c
 15292  000248  0E05               	movlw	(high __ramtop+-1)
 15293  00024A  64F7               	cpfsgt	tblptrh,c
 15294  00024C  D004               	bra	u4887
 15295  00024E  0008               	tblrd		*
 15296  000250  FFFF               	dw	65535	; errata NOP
 15297  000252  50F5               	movf	tablat,w,c
 15298  000254  D005               	bra	u4880
 15299  000256                     u4887:
 15300  000256  CFF6 FFE9          	movff	tblptrl,fsr0l
 15301  00025A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15302  00025E  50EF               	movf	indf0,w,c
 15303  000260                     u4880:
 15304  000260  0100               	movlb	0	; () banked
 15305  000262  6F94               	movwf	(??__doprnt+2)& (0+255),b
 15306  000264  6B95               	clrf	(??__doprnt+3)& (0+255),b
 15307  000266  5192               	movf	??__doprnt& (0+255),w,b
 15308  000268  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 15309  00026A  5193               	movf	(??__doprnt+1)& (0+255),w,b
 15310  00026C  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 15311  00026E  5194               	movf	(??__doprnt+2)& (0+255),w,b
 15312  000270  279E               	addwf	__doprnt@width& (0+255),f,b
 15313  000272  5195               	movf	(??__doprnt+3)& (0+255),w,b
 15314  000274  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 15315                           
 15316                           ; BSR set to: 0
 15317  000276  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15318  000278  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15319                           
 15320                           ; BSR set to: 0
 15321                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15322  00027A  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15323  00027E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15324  000282  6AF8               	clrf	tblptru,c
 15325  000284  0E05               	movlw	(high __ramtop+-1)
 15326  000286  64F7               	cpfsgt	tblptrh,c
 15327  000288  D004               	bra	u4897
 15328  00028A  0008               	tblrd		*
 15329  00028C  FFFF               	dw	65535	; errata NOP
 15330  00028E  50F5               	movf	tablat,w,c
 15331  000290  D005               	bra	u4890
 15332  000292                     u4897:
 15333  000292  CFF6 FFE9          	movff	tblptrl,fsr0l
 15334  000296  CFF7 FFEA          	movff	tblptrh,fsr0h
 15335  00029A  50EF               	movf	indf0,w,c
 15336  00029C                     u4890:
 15337  00029C  EC03  F037         	call	_isdigit
 15338  0002A0  A0D8               	btfss	status,0,c
 15339  0002A2  D11E               	goto	l1047
 15340  0002A4  D7B7               	goto	l1045
 15341  0002A6  FFFF               	dw	65535	; assembler added errata NOP
 15342                           
 15343                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15344  0002A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15345  0002AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15346  0002B0  CFDF F092          	movff	indf2,??__doprnt
 15347  0002B4  0E02               	movlw	2
 15348  0002B6  26DE               	addwf	postinc2,f,c
 15349  0002B8  CFDF F093          	movff	indf2,??__doprnt+1
 15350  0002BC  0E00               	movlw	0
 15351  0002BE  22DD               	addwfc	postdec2,f,c
 15352  0002C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15353  0002C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15354  0002C8  CFDE F09C          	movff	postinc2,__doprnt@cp
 15355  0002CC  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 15356                           
 15357                           ;doprnt.c: 740: if(!cp)
 15358  0002D0  0100               	movlb	0	; () banked
 15359  0002D2  519C               	movf	__doprnt@cp& (0+255),w,b
 15360  0002D4  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 15361  0002D6  A4D8               	btfss	status,2,c
 15362  0002D8  D004               	goto	l1054
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;doprnt.c: 741: cp = "(null)";
 15366  0002DA  0EA3               	movlw	low STR_123
 15367  0002DC  6F9C               	movwf	__doprnt@cp& (0+255),b
 15368  0002DE  0E7F               	movlw	high STR_123
 15369  0002E0  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15370  0002E2                     l1054:
 15371  0002E2  FFFF               	dw	65535	; assembler added errata NOP
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;doprnt.c: 745: len = 0;
 15375                           
 15376                           ; BSR set to: 0
 15377  0002E4  0E00               	movlw	0
 15378  0002E6  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15379  0002E8  0E00               	movlw	0
 15380  0002EA  6F99               	movwf	__doprnt@len& (0+255),b
 15381                           
 15382                           ;doprnt.c: 746: while(cp[len])
 15383  0002EC  D004               	goto	l1055
 15384  0002EE  FFFF               	dw	65535	; assembler added errata NOP
 15385                           
 15386                           ;doprnt.c: 747: len++;
 15387                           
 15388                           ; BSR set to: 0
 15389  0002F0  0100               	movlb	0	; () banked
 15390  0002F2  4B99               	infsnz	__doprnt@len& (0+255),f,b
 15391  0002F4  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 15392  0002F6                     l1055:
 15393  0002F6  FFFF               	dw	65535	; assembler added errata NOP
 15394                           
 15395                           ; BSR set to: 0
 15396                           
 15397                           ; BSR set to: 0
 15398  0002F8  5199               	movf	__doprnt@len& (0+255),w,b
 15399  0002FA  259C               	addwf	__doprnt@cp& (0+255),w,b
 15400  0002FC  6F92               	movwf	??__doprnt& (0+255),b
 15401  0002FE  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15402  000300  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 15403  000302  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15404  000304  C092  FFF6         	movff	??__doprnt,tblptrl
 15405  000308  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15406  00030C  6AF8               	clrf	tblptru,c
 15407  00030E  0E05               	movlw	(high __ramtop+-1)
 15408  000310  64F7               	cpfsgt	tblptrh,c
 15409  000312  D004               	bra	u4927
 15410  000314  0008               	tblrd		*
 15411  000316  FFFF               	dw	65535	; errata NOP
 15412  000318  50F5               	movf	tablat,w,c
 15413  00031A  D005               	bra	u4920
 15414  00031C                     u4927:
 15415  00031C  CFF6 FFE9          	movff	tblptrl,fsr0l
 15416  000320  CFF7 FFEA          	movff	tblptrh,fsr0h
 15417  000324  50EF               	movf	indf0,w,c
 15418  000326                     u4920:
 15419  000326  0900               	iorlw	0
 15420  000328  A4D8               	btfss	status,2,c
 15421  00032A  D7E1               	goto	l1056
 15422  00032C                     u4930:
 15423  00032C  FFFF               	dw	65535	; assembler added errata NOP
 15424                           
 15425                           ;doprnt.c: 757: if(width > len)
 15426                           
 15427                           ;doprnt.c: 750: dostring:
 15428  00032E  0100               	movlb	0	; () banked
 15429  000330  519E               	movf	__doprnt@width& (0+255),w,b
 15430  000332  5D99               	subwf	__doprnt@len& (0+255),w,b
 15431  000334  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15432  000336  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 15433  000338  B0D8               	btfsc	status,0,c
 15434  00033A  D005               	goto	l1059
 15435                           
 15436                           ; BSR set to: 0
 15437                           ;doprnt.c: 758: width -= len;
 15438  00033C  5199               	movf	__doprnt@len& (0+255),w,b
 15439  00033E  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15440  000340  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15441  000342  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15442  000344  D03D               	goto	l1064
 15443  000346                     l1059:
 15444  000346  FFFF               	dw	65535	; assembler added errata NOP
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;doprnt.c: 759: else
 15448                           ;doprnt.c: 760: width = 0;
 15449                           
 15450                           ; BSR set to: 0
 15451  000348  0E00               	movlw	0
 15452  00034A  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15453  00034C  0E00               	movlw	0
 15454  00034E  6F9E               	movwf	__doprnt@width& (0+255),b
 15455                           
 15456                           ; BSR set to: 0
 15457                           ;doprnt.c: 764: while(width--)
 15458  000350  D037               	goto	l1064
 15459  000352  FFFF               	dw	65535	; assembler added errata NOP
 15460  000354                     l5072:
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 15464  000354  EE20 F002          	lfsr	2,2
 15465  000358  518C               	movf	__doprnt@pb& (0+255),w,b
 15466  00035A  26D9               	addwf	fsr2l,f,c
 15467  00035C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15468  00035E  22DA               	addwfc	fsr2h,f,c
 15469  000360  50DE               	movf	postinc2,w,c
 15470  000362  10DE               	iorwf	postinc2,w,c
 15471  000364  B4D8               	btfsc	status,2,c
 15472  000366  D016               	goto	l1063
 15473                           
 15474                           ; BSR set to: 0
 15475  000368  EE20 F002          	lfsr	2,2
 15476  00036C  518C               	movf	__doprnt@pb& (0+255),w,b
 15477  00036E  26D9               	addwf	fsr2l,f,c
 15478  000370  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15479  000372  22DA               	addwfc	fsr2h,f,c
 15480  000374  D801               	call	u4968
 15481  000376  D024               	goto	l1064
 15482  000378                     u4968:
 15483  000378  FFFF               	dw	65535	; assembler added errata NOP
 15484  00037A  0005               	push	
 15485  00037C  6EFA               	movwf	pclath,c
 15486  00037E  50DE               	movf	postinc2,w,c
 15487  000380  6EFD               	movwf	tosl,c
 15488  000382  50DE               	movf	postinc2,w,c
 15489  000384  6EFE               	movwf	tosh,c
 15490  000386  50F8               	movf	tblptru,w,c
 15491  000388  6EFF               	movwf	tosu,c
 15492  00038A  50FA               	movf	pclath,w,c
 15493  00038C  0E20               	movlw	32
 15494  00038E  0012               	return		;indir
 15495  000390  FFFF               	dw	65535	; errata NOP
 15496  000392  D016               	goto	l1064
 15497  000394                     l1063:
 15498  000394  FFFF               	dw	65535	; assembler added errata NOP
 15499  000396  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15500  00039A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15501  00039E  CFDE F092          	movff	postinc2,??__doprnt
 15502  0003A2  CFDD F093          	movff	postdec2,??__doprnt+1
 15503  0003A6  C092  FFD9         	movff	??__doprnt,fsr2l
 15504  0003AA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15505  0003AE  0E20               	movlw	32
 15506  0003B0  6EDF               	movwf	indf2,c
 15507  0003B2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15508  0003B6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15509  0003BA  2ADE               	incf	postinc2,f,c
 15510  0003BC  0E00               	movlw	0
 15511  0003BE  22DD               	addwfc	postdec2,f,c
 15512  0003C0                     l1064:
 15513  0003C0  FFFF               	dw	65535	; assembler added errata NOP
 15514  0003C2  0100               	movlb	0	; () banked
 15515  0003C4  079E               	decf	__doprnt@width& (0+255),f,b
 15516  0003C6  A0D8               	btfss	status,0,c
 15517  0003C8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15518  0003CA  299E               	incf	__doprnt@width& (0+255),w,b
 15519  0003CC  E1C3               	bnz	l5072
 15520  0003CE  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 15521  0003D0  B4D8               	btfsc	status,2,c
 15522  0003D2  D05F               	goto	l1069
 15523  0003D4  D7BE               	goto	l1062
 15524  0003D6  FFFF               	dw	65535	; assembler added errata NOP
 15525  0003D8                     l5082:
 15526                           
 15527                           ; BSR set to: 0
 15528                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 15529  0003D8  EE20 F002          	lfsr	2,2
 15530  0003DC  518C               	movf	__doprnt@pb& (0+255),w,b
 15531  0003DE  26D9               	addwf	fsr2l,f,c
 15532  0003E0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15533  0003E2  22DA               	addwfc	fsr2h,f,c
 15534  0003E4  50DE               	movf	postinc2,w,c
 15535  0003E6  10DE               	iorwf	postinc2,w,c
 15536  0003E8  B4D8               	btfsc	status,2,c
 15537  0003EA  D02A               	goto	l1068
 15538                           
 15539                           ; BSR set to: 0
 15540  0003EC  EE20 F002          	lfsr	2,2
 15541  0003F0  518C               	movf	__doprnt@pb& (0+255),w,b
 15542  0003F2  26D9               	addwf	fsr2l,f,c
 15543  0003F4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15544  0003F6  22DA               	addwfc	fsr2h,f,c
 15545  0003F8  D801               	call	u4998
 15546  0003FA  D01D               	goto	u4999
 15547  0003FC                     u4998:
 15548  0003FC  FFFF               	dw	65535	; assembler added errata NOP
 15549  0003FE  0005               	push	
 15550  000400  6EFA               	movwf	pclath,c
 15551  000402  50DE               	movf	postinc2,w,c
 15552  000404  6EFD               	movwf	tosl,c
 15553  000406  50DE               	movf	postinc2,w,c
 15554  000408  6EFE               	movwf	tosh,c
 15555  00040A  50F8               	movf	tblptru,w,c
 15556  00040C  6EFF               	movwf	tosu,c
 15557  00040E  50FA               	movf	pclath,w,c
 15558  000410  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15559  000414  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15560  000418  6AF8               	clrf	tblptru,c
 15561  00041A  0E05               	movlw	(high __ramtop+-1)
 15562  00041C  64F7               	cpfsgt	tblptrh,c
 15563  00041E  D004               	bra	u5007
 15564  000420  0008               	tblrd		*
 15565  000422  FFFF               	dw	65535	; errata NOP
 15566  000424  50F5               	movf	tablat,w,c
 15567  000426  D005               	bra	u5000
 15568  000428                     u5007:
 15569  000428  CFF6 FFE9          	movff	tblptrl,fsr0l
 15570  00042C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15571  000430  50EF               	movf	indf0,w,c
 15572  000432                     u5000:
 15573  000432  0012               	return		;indir
 15574  000434  FFFF               	dw	65535	; errata NOP
 15575  000436                     u4999:
 15576  000436  FFFF               	dw	65535	; assembler added errata NOP
 15577  000438  0100               	movlb	0	; () banked
 15578  00043A  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15579  00043C  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15580  00043E  D029               	goto	l1069
 15581  000440                     l1068:
 15582  000440  FFFF               	dw	65535	; assembler added errata NOP
 15583                           
 15584                           ; BSR set to: 0
 15585                           
 15586                           ; BSR set to: 0
 15587  000442  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15588  000446  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15589  00044A  6AF8               	clrf	tblptru,c
 15590  00044C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15591  000450  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15592  000454  CFDE F092          	movff	postinc2,??__doprnt
 15593  000458  CFDD F093          	movff	postdec2,??__doprnt+1
 15594  00045C  C092  FFD9         	movff	??__doprnt,fsr2l
 15595  000460  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15596  000464  0E05               	movlw	(high __ramtop+-1)
 15597  000466  64F7               	cpfsgt	tblptrh,c
 15598  000468  D004               	bra	u5017
 15599  00046A  0008               	tblrd		*
 15600  00046C  FFFF               	dw	65535	; errata NOP
 15601  00046E  50F5               	movf	tablat,w,c
 15602  000470  D005               	bra	u5010
 15603  000472                     u5017:
 15604  000472  CFF6 FFE9          	movff	tblptrl,fsr0l
 15605  000476  CFF7 FFEA          	movff	tblptrh,fsr0h
 15606  00047A  50EF               	movf	indf0,w,c
 15607  00047C                     u5010:
 15608  00047C  6EDF               	movwf	indf2,c
 15609  00047E  0100               	movlb	0	; () banked
 15610  000480  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15611  000482  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15612                           
 15613                           ; BSR set to: 0
 15614  000484  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15615  000488  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15616  00048C  2ADE               	incf	postinc2,f,c
 15617  00048E  0E00               	movlw	0
 15618  000490  22DD               	addwfc	postdec2,f,c
 15619  000492                     l1069:
 15620  000492  FFFF               	dw	65535	; assembler added errata NOP
 15621                           
 15622                           ; BSR set to: 0
 15623                           
 15624                           ; BSR set to: 0
 15625                           
 15626                           ; BSR set to: 0
 15627  000494  0799               	decf	__doprnt@len& (0+255),f,b
 15628  000496  A0D8               	btfss	status,0,c
 15629  000498  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 15630  00049A  2999               	incf	__doprnt@len& (0+255),w,b
 15631  00049C  E19D               	bnz	l5082
 15632  00049E  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 15633  0004A0  B4D8               	btfsc	status,2,c
 15634  0004A2  D215               	goto	u5280
 15635  0004A4  D798               	goto	l1067
 15636  0004A6  FFFF               	dw	65535	; assembler added errata NOP
 15637                           
 15638                           ; BSR set to: 0
 15639                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 15640                           
 15641                           ; BSR set to: 0
 15642  0004A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15643  0004AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15644  0004B0  CFDF F092          	movff	indf2,??__doprnt
 15645  0004B4  0E02               	movlw	2
 15646  0004B6  26DE               	addwf	postinc2,f,c
 15647  0004B8  CFDF F093          	movff	indf2,??__doprnt+1
 15648  0004BC  0E00               	movlw	0
 15649  0004BE  22DD               	addwfc	postdec2,f,c
 15650  0004C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15651  0004C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15652  0004C8  50DF               	movf	indf2,w,c
 15653  0004CA  6FA0               	movwf	__doprnt@c& (0+255),b
 15654  0004CC  FFFF               	dw	65535	; assembler added errata NOP
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;doprnt.c: 805: cp = (char *)&c;
 15658                           
 15659                           ; BSR set to: 0
 15660  0004CE  0EA0               	movlw	low __doprnt@c
 15661  0004D0  6F9C               	movwf	__doprnt@cp& (0+255),b
 15662  0004D2  0E00               	movlw	high __doprnt@c
 15663  0004D4  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15664                           
 15665                           ; BSR set to: 0
 15666                           ;doprnt.c: 806: len = 1;
 15667  0004D6  0E00               	movlw	0
 15668  0004D8  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15669  0004DA  0E01               	movlw	1
 15670  0004DC  6F99               	movwf	__doprnt@len& (0+255),b
 15671                           
 15672                           ;doprnt.c: 807: goto dostring;
 15673  0004DE  D726               	goto	u4930
 15674  0004E0                     l1047:
 15675  0004E0  FFFF               	dw	65535	; assembler added errata NOP
 15676                           
 15677                           ; BSR set to: 0
 15678  0004E2  0100               	movlb	0	; () banked
 15679  0004E4  518E               	movf	__doprnt@f& (0+255),w,b
 15680  0004E6  6F92               	movwf	??__doprnt& (0+255),b
 15681  0004E8  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 15682  0004EA  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15683  0004EC  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15684  0004EE  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15685  0004F0  C092  FFF6         	movff	??__doprnt,tblptrl
 15686  0004F4  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15687  0004F8  6AF8               	clrf	tblptru,c
 15688  0004FA  0E05               	movlw	(high __ramtop+-1)
 15689  0004FC  64F7               	cpfsgt	tblptrh,c
 15690  0004FE  D004               	bra	u5037
 15691  000500  0008               	tblrd		*
 15692  000502  FFFF               	dw	65535	; errata NOP
 15693  000504  50F5               	movf	tablat,w,c
 15694  000506  D005               	bra	u5030
 15695  000508                     u5037:
 15696  000508  CFF6 FFE9          	movff	tblptrl,fsr0l
 15697  00050C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15698  000510  50EF               	movf	indf0,w,c
 15699  000512                     u5030:
 15700  000512  0100               	movlb	0	; () banked
 15701  000514  6FA0               	movwf	__doprnt@c& (0+255),b
 15702  000516  51A0               	movf	__doprnt@c& (0+255),w,b
 15703                           
 15704                           ; Switch size 1, requested type "space"
 15705                           ; Number of cases is 5, Range of values is 0 to 115
 15706                           ; switch strategies available:
 15707                           ; Name         Instructions Cycles
 15708                           ; simple_byte           16     9 (average)
 15709                           ;	Chosen strategy is simple_byte
 15710  000518  0A00               	xorlw	0	; case 0
 15711  00051A  B4D8               	btfsc	status,2,c
 15712  00051C  D1F6               	goto	u5300
 15713  00051E  0A63               	xorlw	99	; case 99
 15714  000520  B4D8               	btfsc	status,2,c
 15715  000522  D7C1               	goto	l1071
 15716  000524  0A07               	xorlw	7	; case 100
 15717  000526  B4D8               	btfsc	status,2,c
 15718  000528  D007               	goto	l1052
 15719  00052A  0A0D               	xorlw	13	; case 105
 15720  00052C  B4D8               	btfsc	status,2,c
 15721  00052E  D004               	goto	l1052
 15722  000530  0A1A               	xorlw	26	; case 115
 15723  000532  B4D8               	btfsc	status,2,c
 15724  000534  D6B8               	goto	l1053
 15725  000536  D7CA               	goto	l1072
 15726  000538                     l1052:
 15727  000538  FFFF               	dw	65535	; assembler added errata NOP
 15728                           
 15729                           ;doprnt.c: 1253: {
 15730                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15731                           
 15732                           ; BSR set to: 0
 15733  00053A  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15734  00053E  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15735  000542  CFDF F092          	movff	indf2,??__doprnt
 15736  000546  0E02               	movlw	2
 15737  000548  26DE               	addwf	postinc2,f,c
 15738  00054A  CFDF F093          	movff	indf2,??__doprnt+1
 15739  00054E  0E00               	movlw	0
 15740  000550  22DD               	addwfc	postdec2,f,c
 15741  000552  C092  FFD9         	movff	??__doprnt,fsr2l
 15742  000556  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15743  00055A  CFDE F097          	movff	postinc2,__doprnt@val
 15744  00055E  CFDD F098          	movff	postdec2,__doprnt@val+1
 15745                           
 15746                           ;doprnt.c: 1261: if((int)val < 0) {
 15747  000562  0100               	movlb	0	; () banked
 15748  000564  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 15749  000566  D006               	goto	l1073
 15750                           
 15751                           ; BSR set to: 0
 15752                           ;doprnt.c: 1262: flag |= 0x03;
 15753  000568  0E03               	movlw	3
 15754  00056A  139B               	iorwf	__doprnt@flag& (0+255),f,b
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;doprnt.c: 1263: val = -val;
 15758  00056C  6D97               	negf	__doprnt@val& (0+255),b
 15759  00056E  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 15760  000570  B0D8               	btfsc	status,0,c
 15761  000572  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 15762  000574                     l1073:
 15763  000574  FFFF               	dw	65535	; assembler added errata NOP
 15764                           
 15765                           ; BSR set to: 0
 15766                           ;doprnt.c: 1264: }
 15767                           ;doprnt.c: 1266: }
 15768                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15769                           
 15770                           ; BSR set to: 0
 15771  000576  0E01               	movlw	1
 15772  000578  6FA0               	movwf	__doprnt@c& (0+255),b
 15773  00057A                     l5116:
 15774  00057A  FFFF               	dw	65535	; assembler added errata NOP
 15775                           
 15776                           ; BSR set to: 0
 15777  00057C  0E05               	movlw	5
 15778  00057E  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15779  000580  B4D8               	btfsc	status,2,c
 15780  000582  D014               	goto	u5070
 15781                           
 15782                           ; BSR set to: 0
 15783                           ;doprnt.c: 1306: if(val < dpowers[c])
 15784                           
 15785                           ; BSR set to: 0
 15786                           
 15787                           ; BSR set to: 0
 15788  000584  51A0               	movf	__doprnt@c& (0+255),w,b
 15789  000586  0D02               	mullw	2
 15790  000588  0ECD               	movlw	low _dpowers
 15791  00058A  24F3               	addwf	prodl,w,c
 15792  00058C  6EF6               	movwf	tblptrl,c
 15793  00058E  0E7A               	movlw	high _dpowers
 15794  000590  20F4               	addwfc	prodh,w,c
 15795  000592  6EF7               	movwf	tblptrh,c
 15796  000594                     	if	0	;There are less than 3 active tblptr bytes
 15797  000594                     	endif
 15798  000594  0009               	tblrd		*+
 15799  000596  FFFF               	dw	65535	; errata NOP
 15800  000598  50F5               	movf	tablat,w,c
 15801  00059A  5D97               	subwf	__doprnt@val& (0+255),w,b
 15802  00059C  0009               	tblrd		*+
 15803  00059E  FFFF               	dw	65535	; errata NOP
 15804  0005A0  50F5               	movf	tablat,w,c
 15805  0005A2  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 15806  0005A4  A0D8               	btfss	status,0,c
 15807  0005A6  D002               	goto	u5070
 15808                           
 15809                           ; BSR set to: 0
 15810                           
 15811                           ; BSR set to: 0
 15812                           
 15813                           ; BSR set to: 0
 15814                           ;doprnt.c: 1307: break;
 15815  0005A8  2BA0               	incf	__doprnt@c& (0+255),f,b
 15816  0005AA  D7E7               	goto	l5116
 15817  0005AC                     u5070:
 15818  0005AC  FFFF               	dw	65535	; assembler added errata NOP
 15819                           
 15820                           ; BSR set to: 0
 15821                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15822                           
 15823                           ; BSR set to: 0
 15824  0005AE  519E               	movf	__doprnt@width& (0+255),w,b
 15825  0005B0  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15826  0005B2  B4D8               	btfsc	status,2,c
 15827  0005B4  D009               	goto	l1077
 15828                           
 15829                           ; BSR set to: 0
 15830  0005B6  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15831  0005BA  0E03               	movlw	3
 15832  0005BC  1792               	andwf	??__doprnt& (0+255),f,b
 15833  0005BE  B4D8               	btfsc	status,2,c
 15834  0005C0  D003               	goto	l1077
 15835                           
 15836                           ; BSR set to: 0
 15837                           ;doprnt.c: 1346: width--;
 15838  0005C2  079E               	decf	__doprnt@width& (0+255),f,b
 15839  0005C4  A0D8               	btfss	status,0,c
 15840  0005C6  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15841  0005C8                     l1077:
 15842  0005C8  FFFF               	dw	65535	; assembler added errata NOP
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;doprnt.c: 1381: if(width > c)
 15846                           
 15847                           ; BSR set to: 0
 15848  0005CA  0E80               	movlw	128
 15849  0005CC  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15850  0005CE  0E7F               	movlw	127
 15851  0005D0  6F92               	movwf	??__doprnt& (0+255),b
 15852  0005D2  519E               	movf	__doprnt@width& (0+255),w,b
 15853  0005D4  5DA0               	subwf	__doprnt@c& (0+255),w,b
 15854  0005D6  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15855  0005D8  0A80               	xorlw	128
 15856  0005DA  5992               	subwfb	??__doprnt& (0+255),w,b
 15857  0005DC  B0D8               	btfsc	status,0,c
 15858  0005DE  D007               	goto	l1078
 15859                           
 15860                           ; BSR set to: 0
 15861                           ;doprnt.c: 1382: width -= c;
 15862  0005E0  51A0               	movf	__doprnt@c& (0+255),w,b
 15863  0005E2  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15864  0005E4  0E00               	movlw	0
 15865  0005E6  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15866  0005E8  0EFF               	movlw	255
 15867  0005EA  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15868  0005EC  D005               	goto	l1079
 15869  0005EE                     l1078:
 15870  0005EE  FFFF               	dw	65535	; assembler added errata NOP
 15871                           
 15872                           ; BSR set to: 0
 15873                           ;doprnt.c: 1383: else
 15874                           ;doprnt.c: 1384: width = 0;
 15875                           
 15876                           ; BSR set to: 0
 15877  0005F0  0E00               	movlw	0
 15878  0005F2  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15879  0005F4  0E00               	movlw	0
 15880  0005F6  6F9E               	movwf	__doprnt@width& (0+255),b
 15881  0005F8                     l1079:
 15882  0005F8  FFFF               	dw	65535	; assembler added errata NOP
 15883                           
 15884                           ; BSR set to: 0
 15885                           ;doprnt.c: 1387: if(flag & 0x04) {
 15886                           
 15887                           ; BSR set to: 0
 15888  0005FA  A59B               	btfss	__doprnt@flag& (0+255),2,b
 15889  0005FC  D07F               	goto	l1080
 15890                           
 15891                           ; BSR set to: 0
 15892                           ;doprnt.c: 1392: if(flag & 0x03)
 15893  0005FE  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15894  000602  0E03               	movlw	3
 15895  000604  1792               	andwf	??__doprnt& (0+255),f,b
 15896  000606  B4D8               	btfsc	status,2,c
 15897  000608  D036               	goto	l1083
 15898                           
 15899                           ; BSR set to: 0
 15900                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 15901  00060A  EE20 F002          	lfsr	2,2
 15902  00060E  518C               	movf	__doprnt@pb& (0+255),w,b
 15903  000610  26D9               	addwf	fsr2l,f,c
 15904  000612  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15905  000614  22DA               	addwfc	fsr2h,f,c
 15906  000616  50DE               	movf	postinc2,w,c
 15907  000618  10DE               	iorwf	postinc2,w,c
 15908  00061A  B4D8               	btfsc	status,2,c
 15909  00061C  D016               	goto	l1082
 15910                           
 15911                           ; BSR set to: 0
 15912  00061E  EE20 F002          	lfsr	2,2
 15913  000622  518C               	movf	__doprnt@pb& (0+255),w,b
 15914  000624  26D9               	addwf	fsr2l,f,c
 15915  000626  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15916  000628  22DA               	addwfc	fsr2h,f,c
 15917  00062A  D801               	call	u5148
 15918  00062C  D024               	goto	l1083
 15919  00062E                     u5148:
 15920  00062E  FFFF               	dw	65535	; assembler added errata NOP
 15921  000630  0005               	push	
 15922  000632  6EFA               	movwf	pclath,c
 15923  000634  50DE               	movf	postinc2,w,c
 15924  000636  6EFD               	movwf	tosl,c
 15925  000638  50DE               	movf	postinc2,w,c
 15926  00063A  6EFE               	movwf	tosh,c
 15927  00063C  50F8               	movf	tblptru,w,c
 15928  00063E  6EFF               	movwf	tosu,c
 15929  000640  50FA               	movf	pclath,w,c
 15930  000642  0E2D               	movlw	45
 15931  000644  0012               	return		;indir
 15932  000646  FFFF               	dw	65535	; errata NOP
 15933  000648  D016               	goto	l1083
 15934  00064A                     l1082:
 15935  00064A  FFFF               	dw	65535	; assembler added errata NOP
 15936  00064C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15937  000650  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15938  000654  CFDE F092          	movff	postinc2,??__doprnt
 15939  000658  CFDD F093          	movff	postdec2,??__doprnt+1
 15940  00065C  C092  FFD9         	movff	??__doprnt,fsr2l
 15941  000660  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15942  000664  0E2D               	movlw	45
 15943  000666  6EDF               	movwf	indf2,c
 15944  000668  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15945  00066C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15946  000670  2ADE               	incf	postinc2,f,c
 15947  000672  0E00               	movlw	0
 15948  000674  22DD               	addwfc	postdec2,f,c
 15949  000676                     l1083:
 15950  000676  FFFF               	dw	65535	; assembler added errata NOP
 15951                           
 15952                           ;doprnt.c: 1415: if(width)
 15953  000678  0100               	movlb	0	; () banked
 15954  00067A  FFFF               	dw	65535	; assembler added errata NOP
 15955  00067C  519E               	movf	__doprnt@width& (0+255),w,b
 15956  00067E  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15957  000680  B4D8               	btfsc	status,2,c
 15958  000682  D0BE               	goto	l1097
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 15962                           
 15963                           ; BSR set to: 0
 15964                           
 15965                           ;doprnt.c: 1416: do
 15966  000684  EE20 F002          	lfsr	2,2
 15967  000688  518C               	movf	__doprnt@pb& (0+255),w,b
 15968  00068A  26D9               	addwf	fsr2l,f,c
 15969  00068C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15970  00068E  22DA               	addwfc	fsr2h,f,c
 15971  000690  50DE               	movf	postinc2,w,c
 15972  000692  10DE               	iorwf	postinc2,w,c
 15973  000694  B4D8               	btfsc	status,2,c
 15974  000696  D016               	goto	l1086
 15975                           
 15976                           ; BSR set to: 0
 15977  000698  EE20 F002          	lfsr	2,2
 15978  00069C  518C               	movf	__doprnt@pb& (0+255),w,b
 15979  00069E  26D9               	addwf	fsr2l,f,c
 15980  0006A0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15981  0006A2  22DA               	addwfc	fsr2h,f,c
 15982  0006A4  D801               	call	u5178
 15983  0006A6  D024               	goto	l1087
 15984  0006A8                     u5178:
 15985  0006A8  FFFF               	dw	65535	; assembler added errata NOP
 15986  0006AA  0005               	push	
 15987  0006AC  6EFA               	movwf	pclath,c
 15988  0006AE  50DE               	movf	postinc2,w,c
 15989  0006B0  6EFD               	movwf	tosl,c
 15990  0006B2  50DE               	movf	postinc2,w,c
 15991  0006B4  6EFE               	movwf	tosh,c
 15992  0006B6  50F8               	movf	tblptru,w,c
 15993  0006B8  6EFF               	movwf	tosu,c
 15994  0006BA  50FA               	movf	pclath,w,c
 15995  0006BC  0E30               	movlw	48
 15996  0006BE  0012               	return		;indir
 15997  0006C0  FFFF               	dw	65535	; errata NOP
 15998  0006C2  D016               	goto	l1087
 15999  0006C4                     l1086:
 16000  0006C4  FFFF               	dw	65535	; assembler added errata NOP
 16001  0006C6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16002  0006CA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16003  0006CE  CFDE F092          	movff	postinc2,??__doprnt
 16004  0006D2  CFDD F093          	movff	postdec2,??__doprnt+1
 16005  0006D6  C092  FFD9         	movff	??__doprnt,fsr2l
 16006  0006DA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16007  0006DE  0E30               	movlw	48
 16008  0006E0  6EDF               	movwf	indf2,c
 16009  0006E2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16010  0006E6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16011  0006EA  2ADE               	incf	postinc2,f,c
 16012  0006EC  0E00               	movlw	0
 16013  0006EE  22DD               	addwfc	postdec2,f,c
 16014  0006F0                     l1087:
 16015  0006F0  FFFF               	dw	65535	; assembler added errata NOP
 16016                           
 16017                           ;doprnt.c: 1418: while(--width);
 16018  0006F2  0100               	movlb	0	; () banked
 16019  0006F4  079E               	decf	__doprnt@width& (0+255),f,b
 16020  0006F6  A0D8               	btfss	status,0,c
 16021  0006F8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16022  0006FA  D7BF               	goto	L45
 16023  0006FC                     l1080:
 16024  0006FC  FFFF               	dw	65535	; assembler added errata NOP
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;doprnt.c: 1422: {
 16028                           ;doprnt.c: 1424: if(width
 16029                           ;doprnt.c: 1428: )
 16030                           
 16031                           ; BSR set to: 0
 16032  0006FE  519E               	movf	__doprnt@width& (0+255),w,b
 16033  000700  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16034  000702  B4D8               	btfsc	status,2,c
 16035  000704  D040               	goto	u5220
 16036  000706                     u5190:
 16037  000706  FFFF               	dw	65535	; assembler added errata NOP
 16038                           
 16039                           ; BSR set to: 0
 16040                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 16041                           
 16042                           ; BSR set to: 0
 16043                           
 16044                           ;doprnt.c: 1429: do
 16045  000708  EE20 F002          	lfsr	2,2
 16046  00070C  518C               	movf	__doprnt@pb& (0+255),w,b
 16047  00070E  26D9               	addwf	fsr2l,f,c
 16048  000710  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16049  000712  22DA               	addwfc	fsr2h,f,c
 16050  000714  50DE               	movf	postinc2,w,c
 16051  000716  10DE               	iorwf	postinc2,w,c
 16052  000718  B4D8               	btfsc	status,2,c
 16053  00071A  D016               	goto	l1092
 16054                           
 16055                           ; BSR set to: 0
 16056  00071C  EE20 F002          	lfsr	2,2
 16057  000720  518C               	movf	__doprnt@pb& (0+255),w,b
 16058  000722  26D9               	addwf	fsr2l,f,c
 16059  000724  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16060  000726  22DA               	addwfc	fsr2h,f,c
 16061  000728  D801               	call	u5218
 16062  00072A  D024               	goto	l1093
 16063  00072C                     u5218:
 16064  00072C  FFFF               	dw	65535	; assembler added errata NOP
 16065  00072E  0005               	push	
 16066  000730  6EFA               	movwf	pclath,c
 16067  000732  50DE               	movf	postinc2,w,c
 16068  000734  6EFD               	movwf	tosl,c
 16069  000736  50DE               	movf	postinc2,w,c
 16070  000738  6EFE               	movwf	tosh,c
 16071  00073A  50F8               	movf	tblptru,w,c
 16072  00073C  6EFF               	movwf	tosu,c
 16073  00073E  50FA               	movf	pclath,w,c
 16074  000740  0E20               	movlw	32
 16075  000742  0012               	return		;indir
 16076  000744  FFFF               	dw	65535	; errata NOP
 16077  000746  D016               	goto	l1093
 16078  000748                     l1092:
 16079  000748  FFFF               	dw	65535	; assembler added errata NOP
 16080  00074A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16081  00074E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16082  000752  CFDE F092          	movff	postinc2,??__doprnt
 16083  000756  CFDD F093          	movff	postdec2,??__doprnt+1
 16084  00075A  C092  FFD9         	movff	??__doprnt,fsr2l
 16085  00075E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16086  000762  0E20               	movlw	32
 16087  000764  6EDF               	movwf	indf2,c
 16088  000766  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16089  00076A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16090  00076E  2ADE               	incf	postinc2,f,c
 16091  000770  0E00               	movlw	0
 16092  000772  22DD               	addwfc	postdec2,f,c
 16093  000774                     l1093:
 16094  000774  FFFF               	dw	65535	; assembler added errata NOP
 16095                           
 16096                           ;doprnt.c: 1431: while(--width);
 16097  000776  0100               	movlb	0	; () banked
 16098  000778  079E               	decf	__doprnt@width& (0+255),f,b
 16099  00077A  A0D8               	btfss	status,0,c
 16100  00077C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16101  00077E  519E               	movf	__doprnt@width& (0+255),w,b
 16102  000780  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16103  000782  A4D8               	btfss	status,2,c
 16104  000784  D7C0               	goto	u5190
 16105  000786                     u5220:
 16106  000786  FFFF               	dw	65535	; assembler added errata NOP
 16107                           
 16108                           ; BSR set to: 0
 16109                           ;doprnt.c: 1438: if(flag & 0x03)
 16110                           
 16111                           ; BSR set to: 0
 16112                           
 16113                           ; BSR set to: 0
 16114  000788  C09B  F092         	movff	__doprnt@flag,??__doprnt
 16115  00078C  0E03               	movlw	3
 16116  00078E  1792               	andwf	??__doprnt& (0+255),f,b
 16117  000790  B4D8               	btfsc	status,2,c
 16118  000792  D036               	goto	l1097
 16119                           
 16120                           ; BSR set to: 0
 16121                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 16122  000794  EE20 F002          	lfsr	2,2
 16123  000798  518C               	movf	__doprnt@pb& (0+255),w,b
 16124  00079A  26D9               	addwf	fsr2l,f,c
 16125  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16126  00079E  22DA               	addwfc	fsr2h,f,c
 16127  0007A0  50DE               	movf	postinc2,w,c
 16128  0007A2  10DE               	iorwf	postinc2,w,c
 16129  0007A4  B4D8               	btfsc	status,2,c
 16130  0007A6  D016               	goto	l1096
 16131                           
 16132                           ; BSR set to: 0
 16133  0007A8  EE20 F002          	lfsr	2,2
 16134  0007AC  518C               	movf	__doprnt@pb& (0+255),w,b
 16135  0007AE  26D9               	addwf	fsr2l,f,c
 16136  0007B0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16137  0007B2  22DA               	addwfc	fsr2h,f,c
 16138  0007B4  D801               	call	u5258
 16139  0007B6  D024               	goto	l1097
 16140  0007B8                     u5258:
 16141  0007B8  FFFF               	dw	65535	; assembler added errata NOP
 16142  0007BA  0005               	push	
 16143  0007BC  6EFA               	movwf	pclath,c
 16144  0007BE  50DE               	movf	postinc2,w,c
 16145  0007C0  6EFD               	movwf	tosl,c
 16146  0007C2  50DE               	movf	postinc2,w,c
 16147  0007C4  6EFE               	movwf	tosh,c
 16148  0007C6  50F8               	movf	tblptru,w,c
 16149  0007C8  6EFF               	movwf	tosu,c
 16150  0007CA  50FA               	movf	pclath,w,c
 16151  0007CC  0E2D               	movlw	45
 16152  0007CE  0012               	return		;indir
 16153  0007D0  FFFF               	dw	65535	; errata NOP
 16154  0007D2  D016               	goto	l1097
 16155  0007D4                     l1096:
 16156  0007D4  FFFF               	dw	65535	; assembler added errata NOP
 16157  0007D6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16158  0007DA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16159  0007DE  CFDE F092          	movff	postinc2,??__doprnt
 16160  0007E2  CFDD F093          	movff	postdec2,??__doprnt+1
 16161  0007E6  C092  FFD9         	movff	??__doprnt,fsr2l
 16162  0007EA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16163  0007EE  0E2D               	movlw	45
 16164  0007F0  6EDF               	movwf	indf2,c
 16165  0007F2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16166  0007F6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16167  0007FA  2ADE               	incf	postinc2,f,c
 16168  0007FC  0E00               	movlw	0
 16169  0007FE  22DD               	addwfc	postdec2,f,c
 16170  000800                     l1097:
 16171  000800  FFFF               	dw	65535	; assembler added errata NOP
 16172                           
 16173                           ;doprnt.c: 1469: }
 16174                           ;doprnt.c: 1472: prec = c;
 16175  000802  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 16176                           
 16177                           ;doprnt.c: 1474: while(prec--) {
 16178  000806  D05D               	goto	l1101
 16179  000808  FFFF               	dw	65535	; assembler added errata NOP
 16180                           
 16181                           ;doprnt.c: 1478: {
 16182                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16183  00080A  0100               	movlb	0	; () banked
 16184  00080C  5196               	movf	__doprnt@prec& (0+255),w,b
 16185  00080E  0D02               	mullw	2
 16186  000810  0ECD               	movlw	low _dpowers
 16187  000812  24F3               	addwf	prodl,w,c
 16188  000814  6EF6               	movwf	tblptrl,c
 16189  000816  0E7A               	movlw	high _dpowers
 16190  000818  20F4               	addwfc	prodh,w,c
 16191  00081A  6EF7               	movwf	tblptrh,c
 16192  00081C                     	if	0	;There are less than 3 active tblptr bytes
 16193  00081C                     	endif
 16194  00081C  0009               	tblrd		*+
 16195  00081E  FFFF               	dw	65535	; errata NOP
 16196  000820  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16197  000824  000A               	tblrd		*-
 16198  000826  FFFF               	dw	65535	; errata NOP
 16199  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16200  00082C  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 16201  000830  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 16202  000834  ECE7  F03A         	call	___lwdiv
 16203  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16204  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16205  000840  0E00               	movlw	0
 16206  000842  0100               	movlb	0	; () banked
 16207  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16208  000846  0E0A               	movlw	10
 16209  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
 16210  00084A  EC38  F03A         	call	___lwmod	;wreg free
 16211  00084E  0100               	movlb	0	; () banked
 16212  000850  5187               	movf	?___lwmod& (0+255),w,b
 16213  000852  0F30               	addlw	48
 16214  000854  6FA0               	movwf	__doprnt@c& (0+255),b
 16215                           
 16216                           ; BSR set to: 0
 16217                           ;doprnt.c: 1523: }
 16218                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 16219  000856  EE20 F002          	lfsr	2,2
 16220  00085A  518C               	movf	__doprnt@pb& (0+255),w,b
 16221  00085C  26D9               	addwf	fsr2l,f,c
 16222  00085E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16223  000860  22DA               	addwfc	fsr2h,f,c
 16224  000862  50DE               	movf	postinc2,w,c
 16225  000864  10DE               	iorwf	postinc2,w,c
 16226  000866  B4D8               	btfsc	status,2,c
 16227  000868  D016               	goto	l1100
 16228                           
 16229                           ; BSR set to: 0
 16230  00086A  EE20 F002          	lfsr	2,2
 16231  00086E  518C               	movf	__doprnt@pb& (0+255),w,b
 16232  000870  26D9               	addwf	fsr2l,f,c
 16233  000872  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16234  000874  22DA               	addwfc	fsr2h,f,c
 16235  000876  D801               	call	u5278
 16236  000878  D024               	goto	l1101
 16237  00087A                     u5278:
 16238  00087A  FFFF               	dw	65535	; assembler added errata NOP
 16239  00087C  0005               	push	
 16240  00087E  6EFA               	movwf	pclath,c
 16241  000880  50DE               	movf	postinc2,w,c
 16242  000882  6EFD               	movwf	tosl,c
 16243  000884  50DE               	movf	postinc2,w,c
 16244  000886  6EFE               	movwf	tosh,c
 16245  000888  50F8               	movf	tblptru,w,c
 16246  00088A  6EFF               	movwf	tosu,c
 16247  00088C  50FA               	movf	pclath,w,c
 16248  00088E  51A0               	movf	__doprnt@c& (0+255),w,b
 16249  000890  0012               	return		;indir
 16250  000892  FFFF               	dw	65535	; errata NOP
 16251  000894  D016               	goto	l1101
 16252  000896                     l1100:
 16253  000896  FFFF               	dw	65535	; assembler added errata NOP
 16254  000898  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16255  00089C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16256  0008A0  CFDE F092          	movff	postinc2,??__doprnt
 16257  0008A4  CFDD F093          	movff	postdec2,??__doprnt+1
 16258  0008A8  C092  FFD9         	movff	??__doprnt,fsr2l
 16259  0008AC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16260  0008B0  C0A0  FFDF         	movff	__doprnt@c,indf2
 16261  0008B4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16262  0008B8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16263  0008BC  2ADE               	incf	postinc2,f,c
 16264  0008BE  0E00               	movlw	0
 16265  0008C0  22DD               	addwfc	postdec2,f,c
 16266  0008C2                     l1101:
 16267  0008C2  FFFF               	dw	65535	; assembler added errata NOP
 16268  0008C4  0100               	movlb	0	; () banked
 16269  0008C6  0796               	decf	__doprnt@prec& (0+255),f,b
 16270  0008C8  2996               	incf	__doprnt@prec& (0+255),w,b
 16271  0008CA  A4D8               	btfss	status,2,c
 16272  0008CC  D79D               	goto	l1099
 16273  0008CE                     u5280:
 16274  0008CE  FFFF               	dw	65535	; assembler added errata NOP
 16275                           
 16276                           ; BSR set to: 0
 16277                           
 16278                           ; BSR set to: 0
 16279  0008D0  0100               	movlb	0	; () banked
 16280  0008D2  518E               	movf	__doprnt@f& (0+255),w,b
 16281  0008D4  6F92               	movwf	??__doprnt& (0+255),b
 16282  0008D6  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 16283  0008D8  6F93               	movwf	(??__doprnt+1)& (0+255),b
 16284  0008DA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 16285  0008DC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 16286  0008DE  C092  FFF6         	movff	??__doprnt,tblptrl
 16287  0008E2  C093  FFF7         	movff	??__doprnt+1,tblptrh
 16288  0008E6  6AF8               	clrf	tblptru,c
 16289  0008E8  0E05               	movlw	(high __ramtop+-1)
 16290  0008EA  64F7               	cpfsgt	tblptrh,c
 16291  0008EC  D004               	bra	u5297
 16292  0008EE  0008               	tblrd		*
 16293  0008F0  FFFF               	dw	65535	; errata NOP
 16294  0008F2  50F5               	movf	tablat,w,c
 16295  0008F4  D005               	bra	u5290
 16296  0008F6                     u5297:
 16297  0008F6  CFF6 FFE9          	movff	tblptrl,fsr0l
 16298  0008FA  CFF7 FFEA          	movff	tblptrh,fsr0h
 16299  0008FE  50EF               	movf	indf0,w,c
 16300  000900                     u5290:
 16301  000900  0100               	movlb	0	; () banked
 16302  000902  6FA0               	movwf	__doprnt@c& (0+255),b
 16303  000904  51A0               	movf	__doprnt@c& (0+255),w,b
 16304  000906  A4D8               	btfss	status,2,c
 16305  000908  D40B               	goto	l1034
 16306  00090A                     u5300:
 16307  00090A  FFFF               	dw	65535	; assembler added errata NOP
 16308                           
 16309                           ;doprnt.c: 1540: return 0;
 16310                           
 16311                           ; BSR set to: 0
 16312                           
 16313                           ;doprnt.c: 1525: }
 16314                           ;doprnt.c: 1533: }
 16315                           ;doprnt.c: 1535: alldone:
 16316                           
 16317                           ; BSR set to: 0
 16318  00090C  0E00               	movlw	0
 16319  00090E  0100               	movlb	0	; () banked
 16320  000910  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 16321  000912  0E00               	movlw	0
 16322  000914  6F8C               	movwf	?__doprnt& (0+255),b
 16323                           
 16324                           ; BSR set to: 0
 16325                           
 16326                           ; BSR set to: 0
 16327  000916  0012               	return		;funcret
 16328  000918  FFFF               	dw	65535	; errata NOP
 16329  00091A                     __end_of__doprnt:
 16330                           	opt stack 0
 16331                           tosu	equ	0xFFF
 16332                           tosh	equ	0xFFE
 16333                           tosl	equ	0xFFD
 16334                           pclath	equ	0xFFA
 16335                           tblptru	equ	0xFF8
 16336                           tblptrh	equ	0xFF7
 16337                           tblptrl	equ	0xFF6
 16338                           tablat	equ	0xFF5
 16339                           prodh	equ	0xFF4
 16340                           prodl	equ	0xFF3
 16341                           intcon	equ	0xFF2
 16342                           indf0	equ	0xFEF
 16343                           postinc0	equ	0xFEE
 16344                           fsr0h	equ	0xFEA
 16345                           fsr0l	equ	0xFE9
 16346                           wreg	equ	0xFE8
 16347                           postdec1	equ	0xFE5
 16348                           fsr1l	equ	0xFE1
 16349                           indf2	equ	0xFDF
 16350                           postinc2	equ	0xFDE
 16351                           postdec2	equ	0xFDD
 16352                           fsr2h	equ	0xFDA
 16353                           fsr2l	equ	0xFD9
 16354                           status	equ	0xFD8
 16355                           
 16356 ;; *************** function _putch *****************
 16357 ;; Defined at:
 16358 ;;		line 16 in file "serial.h"
 16359 ;; Parameters:    Size  Location     Type
 16360 ;;  c               1    wreg     unsigned char 
 16361 ;; Auto vars:     Size  Location     Type
 16362 ;;  c               1    0[BANK0 ] unsigned char 
 16363 ;; Return value:  Size  Location     Type
 16364 ;;                  1    wreg      void 
 16365 ;; Registers used:
 16366 ;;		wreg
 16367 ;; Tracked objects:
 16368 ;;		On entry : 0/0
 16369 ;;		On exit  : 0/0
 16370 ;;		Unchanged: 0/0
 16371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16372 ;;      Params:         0       0       0       0       0       0       0
 16373 ;;      Locals:         0       1       0       0       0       0       0
 16374 ;;      Temps:          0       0       0       0       0       0       0
 16375 ;;      Totals:         0       1       0       0       0       0       0
 16376 ;;Total ram usage:        1 bytes
 16377 ;; Hardware stack levels used:    1
 16378 ;; Hardware stack levels required when called:    6
 16379 ;; This function calls:
 16380 ;;		Nothing
 16381 ;; This function is called by:
 16382 ;;		_printf
 16383 ;;		__doprnt
 16384 ;; This function uses a non-reentrant model
 16385 ;;
 16386                           
 16387                           	psect	text49
 16388  006D1E                     __ptext49:
 16389                           	opt stack 0
 16390  006D1E                     _putch:
 16391                           	opt stack 0
 16392  006D1E  FFFF               	dw	65535	; assembler added errata NOP
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;incstack = 0
 16396                           ;putch@c stored from wreg
 16397  006D20  0100               	movlb	0	; () banked
 16398  006D22  6F80               	movwf	putch@c& (0+255),b
 16399  006D24  FFFF               	dw	65535	; assembler added errata NOP
 16400                           
 16401                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 16402  006D26  A2AC               	btfss	4012,1,c	;volatile
 16403  006D28  D7FD               	goto	l4836
 16404                           
 16405                           ;serial.h: 18: TXREG = c;
 16406  006D2A  C080  FFAD         	movff	putch@c,4013	;volatile
 16407  006D2E  0012               	return		;funcret
 16408  006D30  FFFF               	dw	65535	; errata NOP
 16409  006D32                     __end_of_putch:
 16410                           	opt stack 0
 16411                           tosu	equ	0xFFF
 16412                           tosh	equ	0xFFE
 16413                           tosl	equ	0xFFD
 16414                           pclath	equ	0xFFA
 16415                           tblptru	equ	0xFF8
 16416                           tblptrh	equ	0xFF7
 16417                           tblptrl	equ	0xFF6
 16418                           tablat	equ	0xFF5
 16419                           prodh	equ	0xFF4
 16420                           prodl	equ	0xFF3
 16421                           intcon	equ	0xFF2
 16422                           indf0	equ	0xFEF
 16423                           postinc0	equ	0xFEE
 16424                           fsr0h	equ	0xFEA
 16425                           fsr0l	equ	0xFE9
 16426                           wreg	equ	0xFE8
 16427                           postdec1	equ	0xFE5
 16428                           fsr1l	equ	0xFE1
 16429                           indf2	equ	0xFDF
 16430                           postinc2	equ	0xFDE
 16431                           postdec2	equ	0xFDD
 16432                           fsr2h	equ	0xFDA
 16433                           fsr2l	equ	0xFD9
 16434                           status	equ	0xFD8
 16435                           
 16436 ;; *************** function _isdigit *****************
 16437 ;; Defined at:
 16438 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 16439 ;; Parameters:    Size  Location     Type
 16440 ;;  c               1    wreg     unsigned char 
 16441 ;; Auto vars:     Size  Location     Type
 16442 ;;  c               1    2[BANK0 ] unsigned char 
 16443 ;; Return value:  Size  Location     Type
 16444 ;;		None               void
 16445 ;; Registers used:
 16446 ;;		wreg, status,2, status,0
 16447 ;; Tracked objects:
 16448 ;;		On entry : 0/0
 16449 ;;		On exit  : 0/0
 16450 ;;		Unchanged: 0/0
 16451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16452 ;;      Params:         0       0       0       0       0       0       0
 16453 ;;      Locals:         0       2       0       0       0       0       0
 16454 ;;      Temps:          0       1       0       0       0       0       0
 16455 ;;      Totals:         0       3       0       0       0       0       0
 16456 ;;Total ram usage:        3 bytes
 16457 ;; Hardware stack levels used:    1
 16458 ;; Hardware stack levels required when called:    6
 16459 ;; This function calls:
 16460 ;;		Nothing
 16461 ;; This function is called by:
 16462 ;;		__doprnt
 16463 ;;		_atoi
 16464 ;; This function uses a non-reentrant model
 16465 ;;
 16466                           
 16467                           	psect	text50
 16468  006E06                     __ptext50:
 16469                           	opt stack 0
 16470  006E06                     _isdigit:
 16471                           	opt stack 0
 16472  006E06  FFFF               	dw	65535	; assembler added errata NOP
 16473                           
 16474                           ;incstack = 0
 16475                           ;isdigit@c stored from wreg
 16476  006E08  0100               	movlb	0	; () banked
 16477  006E0A  6F82               	movwf	isdigit@c& (0+255),b
 16478  006E0C  0E00               	movlw	0
 16479  006E0E  0100               	movlb	0	; () banked
 16480  006E10  6F81               	movwf	_isdigit$1865& (0+255),b
 16481                           
 16482                           ; BSR set to: 0
 16483  006E12  0E3A               	movlw	58
 16484  006E14  6182               	cpfslt	isdigit@c& (0+255),b
 16485  006E16  D005               	goto	l1449
 16486                           
 16487                           ; BSR set to: 0
 16488  006E18  0E2F               	movlw	47
 16489  006E1A  6582               	cpfsgt	isdigit@c& (0+255),b
 16490  006E1C  D002               	goto	l1449
 16491                           
 16492                           ; BSR set to: 0
 16493  006E1E  0E01               	movlw	1
 16494  006E20  6F81               	movwf	_isdigit$1865& (0+255),b
 16495  006E22                     l1449:
 16496  006E22  FFFF               	dw	65535	; assembler added errata NOP
 16497                           
 16498                           ; BSR set to: 0
 16499                           
 16500                           ; BSR set to: 0
 16501  006E24  C081  F080         	movff	_isdigit$1865,??_isdigit
 16502  006E28  3180               	rrcf	??_isdigit& (0+255),w,b
 16503                           
 16504                           ; BSR set to: 0
 16505                           
 16506                           ; BSR set to: 0
 16507  006E2A  0012               	return		;funcret
 16508  006E2C  FFFF               	dw	65535	; errata NOP
 16509  006E2E                     __end_of_isdigit:
 16510                           	opt stack 0
 16511                           tosu	equ	0xFFF
 16512                           tosh	equ	0xFFE
 16513                           tosl	equ	0xFFD
 16514                           pclath	equ	0xFFA
 16515                           tblptru	equ	0xFF8
 16516                           tblptrh	equ	0xFF7
 16517                           tblptrl	equ	0xFF6
 16518                           tablat	equ	0xFF5
 16519                           prodh	equ	0xFF4
 16520                           prodl	equ	0xFF3
 16521                           intcon	equ	0xFF2
 16522                           indf0	equ	0xFEF
 16523                           postinc0	equ	0xFEE
 16524                           fsr0h	equ	0xFEA
 16525                           fsr0l	equ	0xFE9
 16526                           wreg	equ	0xFE8
 16527                           postdec1	equ	0xFE5
 16528                           fsr1l	equ	0xFE1
 16529                           indf2	equ	0xFDF
 16530                           postinc2	equ	0xFDE
 16531                           postdec2	equ	0xFDD
 16532                           fsr2h	equ	0xFDA
 16533                           fsr2l	equ	0xFD9
 16534                           status	equ	0xFD8
 16535                           
 16536 ;; *************** function ___wmul *****************
 16537 ;; Defined at:
 16538 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16541 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16542 ;; Auto vars:     Size  Location     Type
 16543 ;;  product         2    4[BANK0 ] unsigned int 
 16544 ;; Return value:  Size  Location     Type
 16545 ;;                  2    0[BANK0 ] unsigned int 
 16546 ;; Registers used:
 16547 ;;		wreg, status,2, status,0, prodl, prodh
 16548 ;; Tracked objects:
 16549 ;;		On entry : 0/0
 16550 ;;		On exit  : 0/0
 16551 ;;		Unchanged: 0/0
 16552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16553 ;;      Params:         0       4       0       0       0       0       0
 16554 ;;      Locals:         0       2       0       0       0       0       0
 16555 ;;      Temps:          0       0       0       0       0       0       0
 16556 ;;      Totals:         0       6       0       0       0       0       0
 16557 ;;Total ram usage:        6 bytes
 16558 ;; Hardware stack levels used:    1
 16559 ;; Hardware stack levels required when called:    6
 16560 ;; This function calls:
 16561 ;;		Nothing
 16562 ;; This function is called by:
 16563 ;;		__doprnt
 16564 ;;		_atoi
 16565 ;; This function uses a non-reentrant model
 16566 ;;
 16567                           
 16568                           	psect	text51
 16569  003FD2                     __ptext51:
 16570                           	opt stack 0
 16571  003FD2                     ___wmul:
 16572                           	opt stack 0
 16573  003FD2  FFFF               	dw	65535	; assembler added errata NOP
 16574                           
 16575                           ; BSR set to: 0
 16576                           ;incstack = 0
 16577  003FD4  0100               	movlb	0	; () banked
 16578  003FD6  5180               	movf	___wmul@multiplier& (0+255),w,b
 16579  003FD8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16580  003FDA  CFF3 F084          	movff	prodl,___wmul@product
 16581  003FDE  CFF4 F085          	movff	prodh,___wmul@product+1
 16582  003FE2  5180               	movf	___wmul@multiplier& (0+255),w,b
 16583  003FE4  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16584  003FE6  50F3               	movf	prodl,w,c
 16585  003FE8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16586  003FEA  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16587  003FEC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16588  003FEE  50F3               	movf	prodl,w,c
 16589  003FF0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16590                           
 16591                           ; BSR set to: 0
 16592  003FF2  C084  F080         	movff	___wmul@product,?___wmul
 16593  003FF6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16594                           
 16595                           ; BSR set to: 0
 16596                           
 16597                           ; BSR set to: 0
 16598  003FFA  0012               	return		;funcret
 16599  003FFC  FFFF               	dw	65535	; errata NOP
 16600  003FFE                     __end_of___wmul:
 16601                           	opt stack 0
 16602                           tosu	equ	0xFFF
 16603                           tosh	equ	0xFFE
 16604                           tosl	equ	0xFFD
 16605                           pclath	equ	0xFFA
 16606                           tblptru	equ	0xFF8
 16607                           tblptrh	equ	0xFF7
 16608                           tblptrl	equ	0xFF6
 16609                           tablat	equ	0xFF5
 16610                           prodh	equ	0xFF4
 16611                           prodl	equ	0xFF3
 16612                           intcon	equ	0xFF2
 16613                           indf0	equ	0xFEF
 16614                           postinc0	equ	0xFEE
 16615                           fsr0h	equ	0xFEA
 16616                           fsr0l	equ	0xFE9
 16617                           wreg	equ	0xFE8
 16618                           postdec1	equ	0xFE5
 16619                           fsr1l	equ	0xFE1
 16620                           indf2	equ	0xFDF
 16621                           postinc2	equ	0xFDE
 16622                           postdec2	equ	0xFDD
 16623                           fsr2h	equ	0xFDA
 16624                           fsr2l	equ	0xFD9
 16625                           status	equ	0xFD8
 16626                           
 16627 ;; *************** function ___lwmod *****************
 16628 ;; Defined at:
 16629 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16630 ;; Parameters:    Size  Location     Type
 16631 ;;  dividend        2    7[BANK0 ] unsigned int 
 16632 ;;  divisor         2    9[BANK0 ] unsigned int 
 16633 ;; Auto vars:     Size  Location     Type
 16634 ;;  counter         1   11[BANK0 ] unsigned char 
 16635 ;; Return value:  Size  Location     Type
 16636 ;;                  2    7[BANK0 ] unsigned int 
 16637 ;; Registers used:
 16638 ;;		wreg, status,2, status,0
 16639 ;; Tracked objects:
 16640 ;;		On entry : 0/0
 16641 ;;		On exit  : 0/0
 16642 ;;		Unchanged: 0/0
 16643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16644 ;;      Params:         0       4       0       0       0       0       0
 16645 ;;      Locals:         0       1       0       0       0       0       0
 16646 ;;      Temps:          0       0       0       0       0       0       0
 16647 ;;      Totals:         0       5       0       0       0       0       0
 16648 ;;Total ram usage:        5 bytes
 16649 ;; Hardware stack levels used:    1
 16650 ;; Hardware stack levels required when called:    6
 16651 ;; This function calls:
 16652 ;;		Nothing
 16653 ;; This function is called by:
 16654 ;;		__doprnt
 16655 ;; This function uses a non-reentrant model
 16656 ;;
 16657                           
 16658                           	psect	text52
 16659  007470                     __ptext52:
 16660                           	opt stack 0
 16661  007470                     ___lwmod:
 16662                           	opt stack 0
 16663  007470  FFFF               	dw	65535	; assembler added errata NOP
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;incstack = 0
 16667  007472  0100               	movlb	0	; () banked
 16668  007474  5189               	movf	___lwmod@divisor& (0+255),w,b
 16669  007476  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16670  007478  B4D8               	btfsc	status,2,c
 16671  00747A  D01C               	goto	l1543
 16672                           
 16673                           ; BSR set to: 0
 16674  00747C  0E01               	movlw	1
 16675  00747E  6F8B               	movwf	___lwmod@counter& (0+255),b
 16676  007480  D005               	goto	l1538
 16677  007482  FFFF               	dw	65535	; assembler added errata NOP
 16678                           
 16679                           ; BSR set to: 0
 16680                           
 16681                           ; BSR set to: 0
 16682  007484  90D8               	bcf	status,0,c
 16683  007486  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16684  007488  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16685  00748A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16686  00748C                     l1538:
 16687  00748C  FFFF               	dw	65535	; assembler added errata NOP
 16688                           
 16689                           ; BSR set to: 0
 16690                           
 16691                           ; BSR set to: 0
 16692  00748E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16693  007490  D7F8               	goto	l1539
 16694  007492                     u4620:
 16695  007492  FFFF               	dw	65535	; assembler added errata NOP
 16696                           
 16697                           ; BSR set to: 0
 16698                           
 16699                           ; BSR set to: 0
 16700                           
 16701                           ; BSR set to: 0
 16702  007494  5189               	movf	___lwmod@divisor& (0+255),w,b
 16703  007496  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16704  007498  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16705  00749A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16706  00749C  A0D8               	btfss	status,0,c
 16707  00749E  D004               	goto	l1542
 16708                           
 16709                           ; BSR set to: 0
 16710  0074A0  5189               	movf	___lwmod@divisor& (0+255),w,b
 16711  0074A2  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16712  0074A4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16713  0074A6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16714  0074A8                     l1542:
 16715  0074A8  FFFF               	dw	65535	; assembler added errata NOP
 16716                           
 16717                           ; BSR set to: 0
 16718                           
 16719                           ; BSR set to: 0
 16720  0074AA  90D8               	bcf	status,0,c
 16721  0074AC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16722  0074AE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16723                           
 16724                           ; BSR set to: 0
 16725  0074B0  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16726  0074B2  D7EF               	goto	u4620
 16727  0074B4                     l1543:
 16728  0074B4  FFFF               	dw	65535	; assembler added errata NOP
 16729                           
 16730                           ; BSR set to: 0
 16731                           
 16732                           ; BSR set to: 0
 16733  0074B6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16734  0074BA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16735                           
 16736                           ; BSR set to: 0
 16737  0074BE  0012               	return		;funcret
 16738  0074C0  FFFF               	dw	65535	; errata NOP
 16739  0074C2                     __end_of___lwmod:
 16740                           	opt stack 0
 16741                           tosu	equ	0xFFF
 16742                           tosh	equ	0xFFE
 16743                           tosl	equ	0xFFD
 16744                           pclath	equ	0xFFA
 16745                           tblptru	equ	0xFF8
 16746                           tblptrh	equ	0xFF7
 16747                           tblptrl	equ	0xFF6
 16748                           tablat	equ	0xFF5
 16749                           prodh	equ	0xFF4
 16750                           prodl	equ	0xFF3
 16751                           intcon	equ	0xFF2
 16752                           indf0	equ	0xFEF
 16753                           postinc0	equ	0xFEE
 16754                           fsr0h	equ	0xFEA
 16755                           fsr0l	equ	0xFE9
 16756                           wreg	equ	0xFE8
 16757                           postdec1	equ	0xFE5
 16758                           fsr1l	equ	0xFE1
 16759                           indf2	equ	0xFDF
 16760                           postinc2	equ	0xFDE
 16761                           postdec2	equ	0xFDD
 16762                           fsr2h	equ	0xFDA
 16763                           fsr2l	equ	0xFD9
 16764                           status	equ	0xFD8
 16765                           
 16766 ;; *************** function ___lwdiv *****************
 16767 ;; Defined at:
 16768 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 16769 ;; Parameters:    Size  Location     Type
 16770 ;;  dividend        2    0[BANK0 ] unsigned int 
 16771 ;;  divisor         2    2[BANK0 ] unsigned int 
 16772 ;; Auto vars:     Size  Location     Type
 16773 ;;  quotient        2    4[BANK0 ] unsigned int 
 16774 ;;  counter         1    6[BANK0 ] unsigned char 
 16775 ;; Return value:  Size  Location     Type
 16776 ;;                  2    0[BANK0 ] unsigned int 
 16777 ;; Registers used:
 16778 ;;		wreg, status,2, status,0
 16779 ;; Tracked objects:
 16780 ;;		On entry : 0/0
 16781 ;;		On exit  : 0/0
 16782 ;;		Unchanged: 0/0
 16783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16784 ;;      Params:         0       4       0       0       0       0       0
 16785 ;;      Locals:         0       3       0       0       0       0       0
 16786 ;;      Temps:          0       0       0       0       0       0       0
 16787 ;;      Totals:         0       7       0       0       0       0       0
 16788 ;;Total ram usage:        7 bytes
 16789 ;; Hardware stack levels used:    1
 16790 ;; Hardware stack levels required when called:    6
 16791 ;; This function calls:
 16792 ;;		Nothing
 16793 ;; This function is called by:
 16794 ;;		__doprnt
 16795 ;; This function uses a non-reentrant model
 16796 ;;
 16797                           
 16798                           	psect	text53
 16799  0075CE                     __ptext53:
 16800                           	opt stack 0
 16801  0075CE                     ___lwdiv:
 16802                           	opt stack 0
 16803  0075CE  FFFF               	dw	65535	; assembler added errata NOP
 16804                           
 16805                           ; BSR set to: 0
 16806                           ;incstack = 0
 16807  0075D0  0E00               	movlw	0
 16808  0075D2  0100               	movlb	0	; () banked
 16809  0075D4  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16810  0075D6  0E00               	movlw	0
 16811  0075D8  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16812                           
 16813                           ; BSR set to: 0
 16814  0075DA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16815  0075DC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16816  0075DE  B4D8               	btfsc	status,2,c
 16817  0075E0  D020               	goto	l1533
 16818                           
 16819                           ; BSR set to: 0
 16820  0075E2  0E01               	movlw	1
 16821  0075E4  6F86               	movwf	___lwdiv@counter& (0+255),b
 16822  0075E6  D005               	goto	l1528
 16823  0075E8  FFFF               	dw	65535	; assembler added errata NOP
 16824                           
 16825                           ; BSR set to: 0
 16826                           
 16827                           ; BSR set to: 0
 16828  0075EA  90D8               	bcf	status,0,c
 16829  0075EC  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16830  0075EE  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16831  0075F0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16832  0075F2                     l1528:
 16833  0075F2  FFFF               	dw	65535	; assembler added errata NOP
 16834                           
 16835                           ; BSR set to: 0
 16836                           
 16837                           ; BSR set to: 0
 16838  0075F4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16839  0075F6  D7F8               	goto	l1529
 16840  0075F8                     u4590:
 16841  0075F8  FFFF               	dw	65535	; assembler added errata NOP
 16842                           
 16843                           ; BSR set to: 0
 16844                           
 16845                           ; BSR set to: 0
 16846                           
 16847                           ; BSR set to: 0
 16848  0075FA  90D8               	bcf	status,0,c
 16849  0075FC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16850  0075FE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16851                           
 16852                           ; BSR set to: 0
 16853  007600  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16854  007602  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16855  007604  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16856  007606  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16857  007608  A0D8               	btfss	status,0,c
 16858  00760A  D005               	goto	l1532
 16859                           
 16860                           ; BSR set to: 0
 16861  00760C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16862  00760E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16863  007610  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16864  007612  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16865                           
 16866                           ; BSR set to: 0
 16867  007614  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16868  007616                     l1532:
 16869  007616  FFFF               	dw	65535	; assembler added errata NOP
 16870                           
 16871                           ; BSR set to: 0
 16872                           
 16873                           ; BSR set to: 0
 16874  007618  90D8               	bcf	status,0,c
 16875  00761A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16876  00761C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16877                           
 16878                           ; BSR set to: 0
 16879  00761E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16880  007620  D7EB               	goto	u4590
 16881  007622                     l1533:
 16882  007622  FFFF               	dw	65535	; assembler added errata NOP
 16883                           
 16884                           ; BSR set to: 0
 16885                           
 16886                           ; BSR set to: 0
 16887  007624  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16888  007628  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16889                           
 16890                           ; BSR set to: 0
 16891  00762C  0012               	return		;funcret
 16892  00762E  FFFF               	dw	65535	; errata NOP
 16893  007630                     __end_of___lwdiv:
 16894                           	opt stack 0
 16895                           tosu	equ	0xFFF
 16896                           tosh	equ	0xFFE
 16897                           tosl	equ	0xFFD
 16898                           pclath	equ	0xFFA
 16899                           tblptru	equ	0xFF8
 16900                           tblptrh	equ	0xFF7
 16901                           tblptrl	equ	0xFF6
 16902                           tablat	equ	0xFF5
 16903                           prodh	equ	0xFF4
 16904                           prodl	equ	0xFF3
 16905                           intcon	equ	0xFF2
 16906                           indf0	equ	0xFEF
 16907                           postinc0	equ	0xFEE
 16908                           fsr0h	equ	0xFEA
 16909                           fsr0l	equ	0xFE9
 16910                           wreg	equ	0xFE8
 16911                           postdec1	equ	0xFE5
 16912                           fsr1l	equ	0xFE1
 16913                           indf2	equ	0xFDF
 16914                           postinc2	equ	0xFDE
 16915                           postdec2	equ	0xFDD
 16916                           fsr2h	equ	0xFDA
 16917                           fsr2l	equ	0xFD9
 16918                           status	equ	0xFD8
 16919                           
 16920 ;; *************** function _limparBuffer *****************
 16921 ;; Defined at:
 16922 ;;		line 34 in file "serial.h"
 16923 ;; Parameters:    Size  Location     Type
 16924 ;;		None
 16925 ;; Auto vars:     Size  Location     Type
 16926 ;;		None
 16927 ;; Return value:  Size  Location     Type
 16928 ;;                  1    wreg      void 
 16929 ;; Registers used:
 16930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16931 ;; Tracked objects:
 16932 ;;		On entry : 0/0
 16933 ;;		On exit  : 0/0
 16934 ;;		Unchanged: 0/0
 16935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16936 ;;      Params:         0       0       0       0       0       0       0
 16937 ;;      Locals:         0       0       0       0       0       0       0
 16938 ;;      Temps:          0       0       0       0       0       0       0
 16939 ;;      Totals:         0       0       0       0       0       0       0
 16940 ;;Total ram usage:        0 bytes
 16941 ;; Hardware stack levels used:    1
 16942 ;; Hardware stack levels required when called:    7
 16943 ;; This function calls:
 16944 ;;		_delay
 16945 ;;		_memset
 16946 ;; This function is called by:
 16947 ;;		_getSinalSIM800L
 16948 ;;		_comunicarTeste
 16949 ;;		_enviaSMS
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           	psect	text54
 16954  006F86                     __ptext54:
 16955                           	opt stack 0
 16956  006F86                     _limparBuffer:
 16957                           	opt stack 0
 16958  006F86  FFFF               	dw	65535	; assembler added errata NOP
 16959                           
 16960                           ;serial.h: 35: cbf = 0;
 16961                           
 16962                           ; BSR set to: 0
 16963                           ;incstack = 0
 16964  006F88  0E00               	movlw	0
 16965  006F8A  6E66               	movwf	_cbf,c
 16966                           
 16967                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
 16968  006F8C  0E00               	movlw	low _bufferSerial
 16969  006F8E  0100               	movlb	0	; () banked
 16970  006F90  6F80               	movwf	memset@p1& (0+255),b
 16971  006F92  0E01               	movlw	high _bufferSerial
 16972  006F94  6F81               	movwf	(memset@p1+1)& (0+255),b
 16973  006F96  0E00               	movlw	0
 16974  006F98  6F83               	movwf	(memset@c+1)& (0+255),b
 16975  006F9A  0E00               	movlw	0
 16976  006F9C  6F82               	movwf	memset@c& (0+255),b
 16977  006F9E  0E00               	movlw	0
 16978  006FA0  6F85               	movwf	(memset@n+1)& (0+255),b
 16979  006FA2  0E3C               	movlw	60
 16980  006FA4  6F84               	movwf	memset@n& (0+255),b
 16981  006FA6  EC31  F038         	call	_memset
 16982                           
 16983                           ;serial.h: 37: delay(150);
 16984  006FAA  0E00               	movlw	0
 16985  006FAC  0100               	movlb	0	; () banked
 16986  006FAE  6F81               	movwf	(delay@x+1)& (0+255),b
 16987  006FB0  0E96               	movlw	150
 16988  006FB2  6F80               	movwf	delay@x& (0+255),b
 16989  006FB4  ECA8  F037         	call	_delay	;wreg free
 16990  006FB8  0012               	return		;funcret
 16991  006FBA  FFFF               	dw	65535	; errata NOP
 16992  006FBC                     __end_of_limparBuffer:
 16993                           	opt stack 0
 16994                           tosu	equ	0xFFF
 16995                           tosh	equ	0xFFE
 16996                           tosl	equ	0xFFD
 16997                           pclath	equ	0xFFA
 16998                           tblptru	equ	0xFF8
 16999                           tblptrh	equ	0xFF7
 17000                           tblptrl	equ	0xFF6
 17001                           tablat	equ	0xFF5
 17002                           prodh	equ	0xFF4
 17003                           prodl	equ	0xFF3
 17004                           intcon	equ	0xFF2
 17005                           indf0	equ	0xFEF
 17006                           postinc0	equ	0xFEE
 17007                           fsr0h	equ	0xFEA
 17008                           fsr0l	equ	0xFE9
 17009                           wreg	equ	0xFE8
 17010                           postdec1	equ	0xFE5
 17011                           fsr1l	equ	0xFE1
 17012                           indf2	equ	0xFDF
 17013                           postinc2	equ	0xFDE
 17014                           postdec2	equ	0xFDD
 17015                           fsr2h	equ	0xFDA
 17016                           fsr2l	equ	0xFD9
 17017                           status	equ	0xFD8
 17018                           
 17019 ;; *************** function _memset *****************
 17020 ;; Defined at:
 17021 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 17022 ;; Parameters:    Size  Location     Type
 17023 ;;  p1              2    0[BANK0 ] PTR void 
 17024 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17025 ;;  c               2    2[BANK0 ] int 
 17026 ;;  n               2    4[BANK0 ] unsigned int 
 17027 ;; Auto vars:     Size  Location     Type
 17028 ;;  p               2    6[BANK0 ] PTR unsigned char 
 17029 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17030 ;; Return value:  Size  Location     Type
 17031 ;;                  2    0[BANK0 ] PTR void 
 17032 ;; Registers used:
 17033 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17034 ;; Tracked objects:
 17035 ;;		On entry : 0/0
 17036 ;;		On exit  : 0/0
 17037 ;;		Unchanged: 0/0
 17038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17039 ;;      Params:         0       6       0       0       0       0       0
 17040 ;;      Locals:         0       2       0       0       0       0       0
 17041 ;;      Temps:          0       0       0       0       0       0       0
 17042 ;;      Totals:         0       8       0       0       0       0       0
 17043 ;;Total ram usage:        8 bytes
 17044 ;; Hardware stack levels used:    1
 17045 ;; Hardware stack levels required when called:    6
 17046 ;; This function calls:
 17047 ;;		Nothing
 17048 ;; This function is called by:
 17049 ;;		_limparBuffer
 17050 ;;		_getSerial
 17051 ;; This function uses a non-reentrant model
 17052 ;;
 17053                           
 17054                           	psect	text55
 17055  007062                     __ptext55:
 17056                           	opt stack 0
 17057  007062                     _memset:
 17058                           	opt stack 0
 17059  007062  FFFF               	dw	65535	; assembler added errata NOP
 17060                           
 17061                           ;incstack = 0
 17062  007064  C080  F086         	movff	memset@p1,memset@p
 17063  007068  C081  F087         	movff	memset@p1+1,memset@p+1
 17064  00706C  D00A               	goto	l1552
 17065  00706E  FFFF               	dw	65535	; assembler added errata NOP
 17066  007070                     l4970:
 17067  007070  C086  FFD9         	movff	memset@p,fsr2l
 17068  007074  C087  FFDA         	movff	memset@p+1,fsr2h
 17069  007078  C082  FFDF         	movff	memset@c,indf2
 17070  00707C  0100               	movlb	0	; () banked
 17071  00707E  4B86               	infsnz	memset@p& (0+255),f,b
 17072  007080  2B87               	incf	(memset@p+1)& (0+255),f,b
 17073  007082                     l1552:
 17074  007082  FFFF               	dw	65535	; assembler added errata NOP
 17075                           
 17076                           ; BSR set to: 0
 17077  007084  0100               	movlb	0	; () banked
 17078  007086  0784               	decf	memset@n& (0+255),f,b
 17079  007088  A0D8               	btfss	status,0,c
 17080  00708A  0785               	decf	(memset@n+1)& (0+255),f,b
 17081  00708C  2984               	incf	memset@n& (0+255),w,b
 17082  00708E  E1F0               	bnz	l4970
 17083  007090  2985               	incf	(memset@n+1)& (0+255),w,b
 17084  007092  B4D8               	btfsc	status,2,c
 17085                           
 17086                           ; BSR set to: 0
 17087                           
 17088                           ; BSR set to: 0
 17089                           ;	Return value of _memset is never used
 17090  007094  0012               	return		;funcret
 17091  007096  FFFF               	dw	65535	; assembler added errata NOP
 17092  007098  D7EA               	goto	l1553
 17093  00709A  FFFF               	dw	65535	; errata NOP
 17094  00709C                     __end_of_memset:
 17095                           	opt stack 0
 17096                           tosu	equ	0xFFF
 17097                           tosh	equ	0xFFE
 17098                           tosl	equ	0xFFD
 17099                           pclath	equ	0xFFA
 17100                           tblptru	equ	0xFF8
 17101                           tblptrh	equ	0xFF7
 17102                           tblptrl	equ	0xFF6
 17103                           tablat	equ	0xFF5
 17104                           prodh	equ	0xFF4
 17105                           prodl	equ	0xFF3
 17106                           intcon	equ	0xFF2
 17107                           indf0	equ	0xFEF
 17108                           postinc0	equ	0xFEE
 17109                           fsr0h	equ	0xFEA
 17110                           fsr0l	equ	0xFE9
 17111                           wreg	equ	0xFE8
 17112                           postdec1	equ	0xFE5
 17113                           fsr1l	equ	0xFE1
 17114                           indf2	equ	0xFDF
 17115                           postinc2	equ	0xFDE
 17116                           postdec2	equ	0xFDD
 17117                           fsr2h	equ	0xFDA
 17118                           fsr2l	equ	0xFD9
 17119                           status	equ	0xFD8
 17120                           
 17121 ;; *************** function _aguardaBuffer *****************
 17122 ;; Defined at:
 17123 ;;		line 26 in file "serial.h"
 17124 ;; Parameters:    Size  Location     Type
 17125 ;;  str             2   19[BANK0 ] PTR unsigned char 
 17126 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17127 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17128 ;;		 -> STR_11(3), STR_9(3), STR_6(7), STR_5(3), 
 17129 ;; Auto vars:     Size  Location     Type
 17130 ;;		None
 17131 ;; Return value:  Size  Location     Type
 17132 ;;                  1    wreg      unsigned char 
 17133 ;; Registers used:
 17134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17135 ;; Tracked objects:
 17136 ;;		On entry : 0/0
 17137 ;;		On exit  : 0/0
 17138 ;;		Unchanged: 0/0
 17139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17140 ;;      Params:         0       2       0       0       0       0       0
 17141 ;;      Locals:         0       0       0       0       0       0       0
 17142 ;;      Temps:          0       0       0       0       0       0       0
 17143 ;;      Totals:         0       2       0       0       0       0       0
 17144 ;;Total ram usage:        2 bytes
 17145 ;; Hardware stack levels used:    1
 17146 ;; Hardware stack levels required when called:    8
 17147 ;; This function calls:
 17148 ;;		_delay
 17149 ;;		_strstr
 17150 ;; This function is called by:
 17151 ;;		_getSinalSIM800L
 17152 ;;		_comunicarTeste
 17153 ;;		_enviaSMS
 17154 ;; This function uses a non-reentrant model
 17155 ;;
 17156                           
 17157                           	psect	text56
 17158  00714C                     __ptext56:
 17159                           	opt stack 0
 17160  00714C                     _aguardaBuffer:
 17161                           	opt stack 0
 17162  00714C  FFFF               	dw	65535	; assembler added errata NOP
 17163                           
 17164                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
 17165                           
 17166                           ; BSR set to: 0
 17167                           ;incstack = 0
 17168  00714E  0E00               	movlw	low _bufferSerial
 17169  007150  0100               	movlb	0	; () banked
 17170  007152  6F8F               	movwf	strstr@s1& (0+255),b
 17171  007154  0E01               	movlw	high _bufferSerial
 17172  007156  6F90               	movwf	(strstr@s1+1)& (0+255),b
 17173  007158  C093  F091         	movff	aguardaBuffer@str,strstr@s2
 17174  00715C  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
 17175  007160  EC9D  F01F         	call	_strstr	;wreg free
 17176  007164  0100               	movlb	0	; () banked
 17177  007166  518F               	movf	?_strstr& (0+255),w,b
 17178  007168  1190               	iorwf	(?_strstr+1)& (0+255),w,b
 17179  00716A  B4D8               	btfsc	status,2,c
 17180  00716C  D008               	goto	l257
 17181                           
 17182                           ; BSR set to: 0
 17183                           ;serial.h: 28: delay(150);
 17184  00716E  0E00               	movlw	0
 17185  007170  6F81               	movwf	(delay@x+1)& (0+255),b
 17186  007172  0E96               	movlw	150
 17187  007174  6F80               	movwf	delay@x& (0+255),b
 17188  007176  ECA8  F037         	call	_delay	;wreg free
 17189                           
 17190                           ;serial.h: 29: return 1;
 17191  00717A  0E01               	movlw	1
 17192  00717C  D002               	goto	l5316
 17193  00717E                     l257:
 17194  00717E  FFFF               	dw	65535	; assembler added errata NOP
 17195                           
 17196                           ;serial.h: 30: }
 17197                           ;serial.h: 31: return 0;
 17198  007180  0E00               	movlw	0
 17199  007182                     l5316:
 17200  007182  FFFF               	dw	65535	; assembler added errata NOP
 17201  007184  0012               	return		;funcret
 17202  007186  FFFF               	dw	65535	; errata NOP
 17203  007188                     __end_of_aguardaBuffer:
 17204                           	opt stack 0
 17205                           tosu	equ	0xFFF
 17206                           tosh	equ	0xFFE
 17207                           tosl	equ	0xFFD
 17208                           pclath	equ	0xFFA
 17209                           tblptru	equ	0xFF8
 17210                           tblptrh	equ	0xFF7
 17211                           tblptrl	equ	0xFF6
 17212                           tablat	equ	0xFF5
 17213                           prodh	equ	0xFF4
 17214                           prodl	equ	0xFF3
 17215                           intcon	equ	0xFF2
 17216                           indf0	equ	0xFEF
 17217                           postinc0	equ	0xFEE
 17218                           fsr0h	equ	0xFEA
 17219                           fsr0l	equ	0xFE9
 17220                           wreg	equ	0xFE8
 17221                           postdec1	equ	0xFE5
 17222                           fsr1l	equ	0xFE1
 17223                           indf2	equ	0xFDF
 17224                           postinc2	equ	0xFDE
 17225                           postdec2	equ	0xFDD
 17226                           fsr2h	equ	0xFDA
 17227                           fsr2l	equ	0xFD9
 17228                           status	equ	0xFD8
 17229                           
 17230 ;; *************** function _strstr *****************
 17231 ;; Defined at:
 17232 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
 17233 ;; Parameters:    Size  Location     Type
 17234 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
 17235 ;;		 -> NULL(0), bufferSerial(60), 
 17236 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
 17237 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17238 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17239 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17240 ;;		 -> STR_5(3), 
 17241 ;; Auto vars:     Size  Location     Type
 17242 ;;		None
 17243 ;; Return value:  Size  Location     Type
 17244 ;;                  2   15[BANK0 ] PTR unsigned char 
 17245 ;; Registers used:
 17246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17247 ;; Tracked objects:
 17248 ;;		On entry : 0/0
 17249 ;;		On exit  : 0/0
 17250 ;;		Unchanged: 0/0
 17251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17252 ;;      Params:         0       4       0       0       0       0       0
 17253 ;;      Locals:         0       0       0       0       0       0       0
 17254 ;;      Temps:          0       0       0       0       0       0       0
 17255 ;;      Totals:         0       4       0       0       0       0       0
 17256 ;;Total ram usage:        4 bytes
 17257 ;; Hardware stack levels used:    1
 17258 ;; Hardware stack levels required when called:    7
 17259 ;; This function calls:
 17260 ;;		_strchr
 17261 ;;		_strlen
 17262 ;;		_strncmp
 17263 ;; This function is called by:
 17264 ;;		_aguardaBuffer
 17265 ;;		_getSerial
 17266 ;; This function uses a non-reentrant model
 17267 ;;
 17268                           
 17269                           	psect	text57
 17270  003F3A                     __ptext57:
 17271                           	opt stack 0
 17272  003F3A                     _strstr:
 17273                           	opt stack 0
 17274  003F3A  FFFF               	dw	65535	; assembler added errata NOP
 17275                           
 17276                           ;incstack = 0
 17277  003F3C  D035               	goto	l1706
 17278  003F3E  FFFF               	dw	65535	; assembler added errata NOP
 17279  003F40  C08F  F086         	movff	strstr@s1,strncmp@s1
 17280  003F44  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
 17281  003F48  C091  F088         	movff	strstr@s2,strncmp@s2
 17282  003F4C  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
 17283  003F50  C091  F080         	movff	strstr@s2,strlen@s
 17284  003F54  C092  F081         	movff	strstr@s2+1,strlen@s+1
 17285  003F58  ECB7  F03A         	call	_strlen	;wreg free
 17286  003F5C  C080  F08A         	movff	?_strlen,strncmp@len
 17287  003F60  C081  F08B         	movff	?_strlen+1,strncmp@len+1
 17288  003F64  EC50  F01F         	call	_strncmp	;wreg free
 17289  003F68  0100               	movlb	0	; () banked
 17290  003F6A  5186               	movf	?_strncmp& (0+255),w,b
 17291  003F6C  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
 17292  003F6E  A4D8               	btfss	status,2,c
 17293  003F70  D005               	goto	l1708
 17294                           
 17295                           ; BSR set to: 0
 17296  003F72  C08F  F08F         	movff	strstr@s1,?_strstr
 17297  003F76  C090  F090         	movff	strstr@s1+1,?_strstr+1
 17298                           
 17299                           ; BSR set to: 0
 17300  003F7A  D028               	goto	l4960
 17301  003F7C                     l1708:
 17302  003F7C  FFFF               	dw	65535	; assembler added errata NOP
 17303                           
 17304                           ; BSR set to: 0
 17305                           
 17306                           ; BSR set to: 0
 17307  003F7E  0E01               	movlw	1
 17308  003F80  258F               	addwf	strstr@s1& (0+255),w,b
 17309  003F82  6F80               	movwf	strchr@ptr& (0+255),b
 17310  003F84  0E00               	movlw	0
 17311  003F86  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
 17312  003F88  6F81               	movwf	(strchr@ptr+1)& (0+255),b
 17313  003F8A  C091  FFF6         	movff	strstr@s2,tblptrl
 17314  003F8E  C092  FFF7         	movff	strstr@s2+1,tblptrh
 17315  003F92                     	if	0	;tblptru may be non-zero
 17316  003F92                     	endif
 17317  003F92                     	if	0	;tblptru may be non-zero
 17318  003F92                     	endif
 17319  003F92  0008               	tblrd		*
 17320  003F94  FFFF               	dw	65535	; errata NOP
 17321  003F96  50F5               	movf	tablat,w,c
 17322  003F98  6F82               	movwf	strchr@chr& (0+255),b
 17323  003F9A  6B83               	clrf	(strchr@chr+1)& (0+255),b
 17324  003F9C  EC01  F039         	call	_strchr	;wreg free
 17325  003FA0  C080  F08F         	movff	?_strchr,strstr@s1
 17326  003FA4  C081  F090         	movff	?_strchr+1,strstr@s1+1
 17327  003FA8                     l1706:
 17328  003FA8  FFFF               	dw	65535	; assembler added errata NOP
 17329  003FAA  0100               	movlb	0	; () banked
 17330  003FAC  518F               	movf	strstr@s1& (0+255),w,b
 17331  003FAE  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
 17332  003FB0  B4D8               	btfsc	status,2,c
 17333  003FB2  D007               	goto	u4730
 17334                           
 17335                           ; BSR set to: 0
 17336  003FB4  C08F  FFD9         	movff	strstr@s1,fsr2l
 17337  003FB8  C090  FFDA         	movff	strstr@s1+1,fsr2h
 17338  003FBC  50DF               	movf	indf2,w,c
 17339  003FBE  A4D8               	btfss	status,2,c
 17340  003FC0  D7BE               	goto	l1707
 17341  003FC2                     u4730:
 17342  003FC2  FFFF               	dw	65535	; assembler added errata NOP
 17343                           
 17344                           ; BSR set to: 0
 17345                           
 17346                           ; BSR set to: 0
 17347                           
 17348                           ; BSR set to: 0
 17349  003FC4  0E00               	movlw	0
 17350  003FC6  6F8F               	movwf	?_strstr& (0+255),b
 17351  003FC8  0E00               	movlw	0
 17352  003FCA  6F90               	movwf	(?_strstr+1)& (0+255),b
 17353  003FCC                     l4960:
 17354  003FCC  FFFF               	dw	65535	; assembler added errata NOP
 17355                           
 17356                           ; BSR set to: 0
 17357                           
 17358                           ; BSR set to: 0
 17359  003FCE  0012               	return		;funcret
 17360  003FD0  FFFF               	dw	65535	; errata NOP
 17361  003FD2                     __end_of_strstr:
 17362                           	opt stack 0
 17363                           tosu	equ	0xFFF
 17364                           tosh	equ	0xFFE
 17365                           tosl	equ	0xFFD
 17366                           pclath	equ	0xFFA
 17367                           tblptru	equ	0xFF8
 17368                           tblptrh	equ	0xFF7
 17369                           tblptrl	equ	0xFF6
 17370                           tablat	equ	0xFF5
 17371                           prodh	equ	0xFF4
 17372                           prodl	equ	0xFF3
 17373                           intcon	equ	0xFF2
 17374                           indf0	equ	0xFEF
 17375                           postinc0	equ	0xFEE
 17376                           fsr0h	equ	0xFEA
 17377                           fsr0l	equ	0xFE9
 17378                           wreg	equ	0xFE8
 17379                           postdec1	equ	0xFE5
 17380                           fsr1l	equ	0xFE1
 17381                           indf2	equ	0xFDF
 17382                           postinc2	equ	0xFDE
 17383                           postdec2	equ	0xFDD
 17384                           fsr2h	equ	0xFDA
 17385                           fsr2l	equ	0xFD9
 17386                           status	equ	0xFD8
 17387                           
 17388 ;; *************** function _strncmp *****************
 17389 ;; Defined at:
 17390 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
 17391 ;; Parameters:    Size  Location     Type
 17392 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 17393 ;;		 -> NULL(0), bufferSerial(60), 
 17394 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 17395 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17396 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17397 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17398 ;;		 -> STR_5(3), 
 17399 ;;  len             2   10[BANK0 ] unsigned int 
 17400 ;; Auto vars:     Size  Location     Type
 17401 ;;		None
 17402 ;; Return value:  Size  Location     Type
 17403 ;;                  2    6[BANK0 ] int 
 17404 ;; Registers used:
 17405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17406 ;; Tracked objects:
 17407 ;;		On entry : 0/0
 17408 ;;		On exit  : 0/0
 17409 ;;		Unchanged: 0/0
 17410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17411 ;;      Params:         0       6       0       0       0       0       0
 17412 ;;      Locals:         0       0       0       0       0       0       0
 17413 ;;      Temps:          0       3       0       0       0       0       0
 17414 ;;      Totals:         0       9       0       0       0       0       0
 17415 ;;Total ram usage:        9 bytes
 17416 ;; Hardware stack levels used:    1
 17417 ;; Hardware stack levels required when called:    6
 17418 ;; This function calls:
 17419 ;;		Nothing
 17420 ;; This function is called by:
 17421 ;;		_strstr
 17422 ;; This function uses a non-reentrant model
 17423 ;;
 17424                           
 17425                           	psect	text58
 17426  003EA0                     __ptext58:
 17427                           	opt stack 0
 17428  003EA0                     _strncmp:
 17429                           	opt stack 0
 17430  003EA0  FFFF               	dw	65535	; assembler added errata NOP
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;incstack = 0
 17434  003EA2  D03A               	goto	l1740
 17435  003EA4  FFFF               	dw	65535	; assembler added errata NOP
 17436  003EA6                     l4912:
 17437  003EA6  C086  FFD9         	movff	strncmp@s1,fsr2l
 17438  003EAA  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17439  003EAE  50DF               	movf	indf2,w,c
 17440  003EB0  B4D8               	btfsc	status,2,c
 17441  003EB2  D011               	goto	u4650
 17442  003EB4  C086  FFD9         	movff	strncmp@s1,fsr2l
 17443  003EB8  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17444  003EBC  50DF               	movf	indf2,w,c
 17445  003EBE  0100               	movlb	0	; () banked
 17446  003EC0  6F8C               	movwf	??_strncmp& (0+255),b
 17447  003EC2  C088  FFF6         	movff	strncmp@s2,tblptrl
 17448  003EC6  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17449  003ECA                     	if	0	;tblptru may be non-zero
 17450  003ECA                     	endif
 17451  003ECA                     	if	0	;tblptru may be non-zero
 17452  003ECA                     	endif
 17453  003ECA  0008               	tblrd		*
 17454  003ECC  FFFF               	dw	65535	; errata NOP
 17455  003ECE  50F5               	movf	tablat,w,c
 17456  003ED0  198C               	xorwf	??_strncmp& (0+255),w,b
 17457  003ED2  B4D8               	btfsc	status,2,c
 17458  003ED4  D01C               	goto	l1742
 17459  003ED6                     u4650:
 17460  003ED6  FFFF               	dw	65535	; assembler added errata NOP
 17461                           
 17462                           ; BSR set to: 0
 17463  003ED8  C088  FFF6         	movff	strncmp@s2,tblptrl
 17464  003EDC  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17465  003EE0                     	if	0	;tblptru may be non-zero
 17466  003EE0                     	endif
 17467  003EE0                     	if	0	;tblptru may be non-zero
 17468  003EE0                     	endif
 17469  003EE0  0008               	tblrd		*
 17470  003EE2  FFFF               	dw	65535	; errata NOP
 17471  003EE4  50F5               	movf	tablat,w,c
 17472  003EE6  0100               	movlb	0	; () banked
 17473  003EE8  6F8C               	movwf	??_strncmp& (0+255),b
 17474  003EEA  6B8D               	clrf	(??_strncmp+1)& (0+255),b
 17475  003EEC  1F8C               	comf	??_strncmp& (0+255),f,b
 17476  003EEE  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
 17477  003EF0  4B8C               	infsnz	??_strncmp& (0+255),f,b
 17478  003EF2  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
 17479  003EF4  C086  FFD9         	movff	strncmp@s1,fsr2l
 17480  003EF8  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17481  003EFC  50DF               	movf	indf2,w,c
 17482  003EFE  6F8E               	movwf	(??_strncmp+2)& (0+255),b
 17483  003F00  518E               	movf	(??_strncmp+2)& (0+255),w,b
 17484  003F02  258C               	addwf	??_strncmp& (0+255),w,b
 17485  003F04  6F86               	movwf	?_strncmp& (0+255),b
 17486  003F06  0E00               	movlw	0
 17487  003F08  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
 17488  003F0A  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17489                           
 17490                           ; BSR set to: 0
 17491  003F0C  D013               	goto	l4926
 17492  003F0E                     l1742:
 17493  003F0E  FFFF               	dw	65535	; assembler added errata NOP
 17494                           
 17495                           ; BSR set to: 0
 17496                           
 17497                           ; BSR set to: 0
 17498  003F10  4B86               	infsnz	strncmp@s1& (0+255),f,b
 17499  003F12  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
 17500  003F14  4B88               	infsnz	strncmp@s2& (0+255),f,b
 17501  003F16  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
 17502  003F18                     l1740:
 17503  003F18  FFFF               	dw	65535	; assembler added errata NOP
 17504                           
 17505                           ; BSR set to: 0
 17506  003F1A  0100               	movlb	0	; () banked
 17507  003F1C  078A               	decf	strncmp@len& (0+255),f,b
 17508  003F1E  A0D8               	btfss	status,0,c
 17509  003F20  078B               	decf	(strncmp@len+1)& (0+255),f,b
 17510  003F22  298A               	incf	strncmp@len& (0+255),w,b
 17511  003F24  E1C0               	bnz	l4912
 17512  003F26  298B               	incf	(strncmp@len+1)& (0+255),w,b
 17513  003F28  A4D8               	btfss	status,2,c
 17514  003F2A  D7BC               	goto	l1741
 17515                           
 17516                           ; BSR set to: 0
 17517                           
 17518                           ; BSR set to: 0
 17519  003F2C  0E00               	movlw	0
 17520  003F2E  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17521  003F30  0E00               	movlw	0
 17522  003F32  6F86               	movwf	?_strncmp& (0+255),b
 17523  003F34                     l4926:
 17524  003F34  FFFF               	dw	65535	; assembler added errata NOP
 17525                           
 17526                           ; BSR set to: 0
 17527                           
 17528                           ; BSR set to: 0
 17529  003F36  0012               	return		;funcret
 17530  003F38  FFFF               	dw	65535	; errata NOP
 17531  003F3A                     __end_of_strncmp:
 17532                           	opt stack 0
 17533                           tosu	equ	0xFFF
 17534                           tosh	equ	0xFFE
 17535                           tosl	equ	0xFFD
 17536                           pclath	equ	0xFFA
 17537                           tblptru	equ	0xFF8
 17538                           tblptrh	equ	0xFF7
 17539                           tblptrl	equ	0xFF6
 17540                           tablat	equ	0xFF5
 17541                           prodh	equ	0xFF4
 17542                           prodl	equ	0xFF3
 17543                           intcon	equ	0xFF2
 17544                           indf0	equ	0xFEF
 17545                           postinc0	equ	0xFEE
 17546                           fsr0h	equ	0xFEA
 17547                           fsr0l	equ	0xFE9
 17548                           wreg	equ	0xFE8
 17549                           postdec1	equ	0xFE5
 17550                           fsr1l	equ	0xFE1
 17551                           indf2	equ	0xFDF
 17552                           postinc2	equ	0xFDE
 17553                           postdec2	equ	0xFDD
 17554                           fsr2h	equ	0xFDA
 17555                           fsr2l	equ	0xFD9
 17556                           status	equ	0xFD8
 17557                           
 17558 ;; *************** function _strlen *****************
 17559 ;; Defined at:
 17560 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 17561 ;; Parameters:    Size  Location     Type
 17562 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 17563 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17564 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17565 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17566 ;;		 -> STR_5(3), NULL(0), bufferSerial(60), 
 17567 ;; Auto vars:     Size  Location     Type
 17568 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 17569 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17570 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17571 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17572 ;;		 -> STR_5(3), NULL(0), bufferSerial(60), 
 17573 ;; Return value:  Size  Location     Type
 17574 ;;                  2    0[BANK0 ] unsigned int 
 17575 ;; Registers used:
 17576 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17577 ;; Tracked objects:
 17578 ;;		On entry : 0/0
 17579 ;;		On exit  : 0/0
 17580 ;;		Unchanged: 0/0
 17581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17582 ;;      Params:         0       2       0       0       0       0       0
 17583 ;;      Locals:         0       2       0       0       0       0       0
 17584 ;;      Temps:          0       2       0       0       0       0       0
 17585 ;;      Totals:         0       6       0       0       0       0       0
 17586 ;;Total ram usage:        6 bytes
 17587 ;; Hardware stack levels used:    1
 17588 ;; Hardware stack levels required when called:    6
 17589 ;; This function calls:
 17590 ;;		Nothing
 17591 ;; This function is called by:
 17592 ;;		_getSerial
 17593 ;;		_strstr
 17594 ;; This function uses a non-reentrant model
 17595 ;;
 17596                           
 17597                           	psect	text59
 17598  00756E                     __ptext59:
 17599                           	opt stack 0
 17600  00756E                     _strlen:
 17601                           	opt stack 0
 17602  00756E  FFFF               	dw	65535	; assembler added errata NOP
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;incstack = 0
 17606  007570  C080  F084         	movff	strlen@s,strlen@cp
 17607  007574  C081  F085         	movff	strlen@s+1,strlen@cp+1
 17608  007578  D004               	goto	l1694
 17609  00757A  FFFF               	dw	65535	; assembler added errata NOP
 17610  00757C  0100               	movlb	0	; () banked
 17611  00757E  4B84               	infsnz	strlen@cp& (0+255),f,b
 17612  007580  2B85               	incf	(strlen@cp+1)& (0+255),f,b
 17613  007582                     l1694:
 17614  007582  FFFF               	dw	65535	; assembler added errata NOP
 17615                           
 17616                           ; BSR set to: 0
 17617  007584  C084  FFF6         	movff	strlen@cp,tblptrl
 17618  007588  C085  FFF7         	movff	strlen@cp+1,tblptrh
 17619  00758C  6AF8               	clrf	tblptru,c
 17620  00758E  0E05               	movlw	(high __ramtop+-1)
 17621  007590  64F7               	cpfsgt	tblptrh,c
 17622  007592  D004               	bra	u4527
 17623  007594  0008               	tblrd		*
 17624  007596  FFFF               	dw	65535	; errata NOP
 17625  007598  50F5               	movf	tablat,w,c
 17626  00759A  D005               	bra	u4520
 17627  00759C                     u4527:
 17628  00759C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17629  0075A0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17630  0075A4  50EF               	movf	indf0,w,c
 17631  0075A6                     u4520:
 17632  0075A6  0900               	iorlw	0
 17633  0075A8  A4D8               	btfss	status,2,c
 17634  0075AA  D7E7               	goto	l1695
 17635  0075AC  C080  F082         	movff	strlen@s,??_strlen
 17636  0075B0  C081  F083         	movff	strlen@s+1,??_strlen+1
 17637  0075B4  0100               	movlb	0	; () banked
 17638  0075B6  1F82               	comf	??_strlen& (0+255),f,b
 17639  0075B8  1F83               	comf	(??_strlen+1)& (0+255),f,b
 17640  0075BA  4B82               	infsnz	??_strlen& (0+255),f,b
 17641  0075BC  2B83               	incf	(??_strlen+1)& (0+255),f,b
 17642  0075BE  5184               	movf	strlen@cp& (0+255),w,b
 17643  0075C0  2582               	addwf	??_strlen& (0+255),w,b
 17644  0075C2  6F80               	movwf	?_strlen& (0+255),b
 17645  0075C4  5185               	movf	(strlen@cp+1)& (0+255),w,b
 17646  0075C6  2183               	addwfc	(??_strlen+1)& (0+255),w,b
 17647  0075C8  6F81               	movwf	(?_strlen+1)& (0+255),b
 17648                           
 17649                           ; BSR set to: 0
 17650                           
 17651                           ; BSR set to: 0
 17652  0075CA  0012               	return		;funcret
 17653  0075CC  FFFF               	dw	65535	; errata NOP
 17654  0075CE                     __end_of_strlen:
 17655                           	opt stack 0
 17656                           tosu	equ	0xFFF
 17657                           tosh	equ	0xFFE
 17658                           tosl	equ	0xFFD
 17659                           pclath	equ	0xFFA
 17660                           tblptru	equ	0xFF8
 17661                           tblptrh	equ	0xFF7
 17662                           tblptrl	equ	0xFF6
 17663                           tablat	equ	0xFF5
 17664                           prodh	equ	0xFF4
 17665                           prodl	equ	0xFF3
 17666                           intcon	equ	0xFF2
 17667                           indf0	equ	0xFEF
 17668                           postinc0	equ	0xFEE
 17669                           fsr0h	equ	0xFEA
 17670                           fsr0l	equ	0xFE9
 17671                           wreg	equ	0xFE8
 17672                           postdec1	equ	0xFE5
 17673                           fsr1l	equ	0xFE1
 17674                           indf2	equ	0xFDF
 17675                           postinc2	equ	0xFDE
 17676                           postdec2	equ	0xFDD
 17677                           fsr2h	equ	0xFDA
 17678                           fsr2l	equ	0xFD9
 17679                           status	equ	0xFD8
 17680                           
 17681 ;; *************** function _strchr *****************
 17682 ;; Defined at:
 17683 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
 17684 ;; Parameters:    Size  Location     Type
 17685 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 17686 ;;		 -> NULL(0), bufferSerial(60), 
 17687 ;;  chr             2    2[BANK0 ] int 
 17688 ;; Auto vars:     Size  Location     Type
 17689 ;;		None
 17690 ;; Return value:  Size  Location     Type
 17691 ;;                  2    0[BANK0 ] PTR unsigned char 
 17692 ;; Registers used:
 17693 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17694 ;; Tracked objects:
 17695 ;;		On entry : 0/0
 17696 ;;		On exit  : 0/0
 17697 ;;		Unchanged: 0/0
 17698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17699 ;;      Params:         0       4       0       0       0       0       0
 17700 ;;      Locals:         0       0       0       0       0       0       0
 17701 ;;      Temps:          0       1       0       0       0       0       0
 17702 ;;      Totals:         0       5       0       0       0       0       0
 17703 ;;Total ram usage:        5 bytes
 17704 ;; Hardware stack levels used:    1
 17705 ;; Hardware stack levels required when called:    6
 17706 ;; This function calls:
 17707 ;;		Nothing
 17708 ;; This function is called by:
 17709 ;;		_strstr
 17710 ;; This function uses a non-reentrant model
 17711 ;;
 17712                           
 17713                           	psect	text60
 17714  007202                     __ptext60:
 17715                           	opt stack 0
 17716  007202                     _strchr:
 17717                           	opt stack 0
 17718  007202  FFFF               	dw	65535	; assembler added errata NOP
 17719                           
 17720                           ; BSR set to: 0
 17721                           ;incstack = 0
 17722  007204  C080  FFD9         	movff	strchr@ptr,fsr2l
 17723  007208  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17724  00720C  0100               	movlb	0	; () banked
 17725  00720E  5182               	movf	strchr@chr& (0+255),w,b
 17726  007210  18DE               	xorwf	postinc2,w,c
 17727  007212  A4D8               	btfss	status,2,c
 17728  007214  D005               	goto	l1735
 17729                           
 17730                           ; BSR set to: 0
 17731  007216  C080  F080         	movff	strchr@ptr,?_strchr
 17732  00721A  C081  F081         	movff	strchr@ptr+1,?_strchr+1
 17733                           
 17734                           ; BSR set to: 0
 17735  00721E  D00E               	goto	l4938
 17736  007220                     l1735:
 17737  007220  FFFF               	dw	65535	; assembler added errata NOP
 17738                           
 17739                           ; BSR set to: 0
 17740                           
 17741                           ; BSR set to: 0
 17742  007222  C080  FFD9         	movff	strchr@ptr,fsr2l
 17743  007226  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17744  00722A  4B80               	infsnz	strchr@ptr& (0+255),f,b
 17745  00722C  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
 17746  00722E  50DF               	movf	indf2,w,c
 17747  007230  A4D8               	btfss	status,2,c
 17748  007232  D7E7               	goto	_strchr
 17749                           
 17750                           ; BSR set to: 0
 17751                           
 17752                           ; BSR set to: 0
 17753  007234  0E00               	movlw	0
 17754  007236  6F80               	movwf	?_strchr& (0+255),b
 17755  007238  0E00               	movlw	0
 17756  00723A  6F81               	movwf	(?_strchr+1)& (0+255),b
 17757  00723C                     l4938:
 17758  00723C  FFFF               	dw	65535	; assembler added errata NOP
 17759                           
 17760                           ; BSR set to: 0
 17761                           
 17762                           ; BSR set to: 0
 17763  00723E  0012               	return		;funcret
 17764  007240  FFFF               	dw	65535	; errata NOP
 17765  007242                     __end_of_strchr:
 17766                           	opt stack 0
 17767                           tosu	equ	0xFFF
 17768                           tosh	equ	0xFFE
 17769                           tosl	equ	0xFFD
 17770                           pclath	equ	0xFFA
 17771                           tblptru	equ	0xFF8
 17772                           tblptrh	equ	0xFF7
 17773                           tblptrl	equ	0xFF6
 17774                           tablat	equ	0xFF5
 17775                           prodh	equ	0xFF4
 17776                           prodl	equ	0xFF3
 17777                           intcon	equ	0xFF2
 17778                           indf0	equ	0xFEF
 17779                           postinc0	equ	0xFEE
 17780                           fsr0h	equ	0xFEA
 17781                           fsr0l	equ	0xFE9
 17782                           wreg	equ	0xFE8
 17783                           postdec1	equ	0xFE5
 17784                           fsr1l	equ	0xFE1
 17785                           indf2	equ	0xFDF
 17786                           postinc2	equ	0xFDE
 17787                           postdec2	equ	0xFDD
 17788                           fsr2h	equ	0xFDA
 17789                           fsr2l	equ	0xFD9
 17790                           status	equ	0xFD8
 17791                           
 17792 ;; *************** function _delay *****************
 17793 ;; Defined at:
 17794 ;;		line 16 in file "function.c"
 17795 ;; Parameters:    Size  Location     Type
 17796 ;;  x               2    0[BANK0 ] int 
 17797 ;; Auto vars:     Size  Location     Type
 17798 ;;		None
 17799 ;; Return value:  Size  Location     Type
 17800 ;;                  1    wreg      void 
 17801 ;; Registers used:
 17802 ;;		wreg, status,2, status,0
 17803 ;; Tracked objects:
 17804 ;;		On entry : 0/0
 17805 ;;		On exit  : 0/0
 17806 ;;		Unchanged: 0/0
 17807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17808 ;;      Params:         0       2       0       0       0       0       0
 17809 ;;      Locals:         0       0       0       0       0       0       0
 17810 ;;      Temps:          0       1       0       0       0       0       0
 17811 ;;      Totals:         0       3       0       0       0       0       0
 17812 ;;Total ram usage:        3 bytes
 17813 ;; Hardware stack levels used:    1
 17814 ;; Hardware stack levels required when called:    6
 17815 ;; This function calls:
 17816 ;;		Nothing
 17817 ;; This function is called by:
 17818 ;;		_aguardaBuffer
 17819 ;;		_limparBuffer
 17820 ;;		_getSinalSIM800L
 17821 ;;		_comunicarTeste
 17822 ;;		_enviaSMS
 17823 ;;		_writeEEPROM_ext
 17824 ;;		_partidaBombaEstacionaria
 17825 ;;		_main
 17826 ;; This function uses a non-reentrant model
 17827 ;;
 17828                           
 17829                           	psect	text61
 17830  006F50                     __ptext61:
 17831                           	opt stack 0
 17832  006F50                     _delay:
 17833                           	opt stack 0
 17834  006F50  FFFF               	dw	65535	; assembler added errata NOP
 17835                           
 17836                           ;function.c: 17: while (x--) {
 17837                           
 17838                           ; BSR set to: 0
 17839                           ;incstack = 0
 17840  006F52  D00C               	goto	l1000
 17841  006F54  FFFF               	dw	65535	; assembler added errata NOP
 17842  006F56                     l4964:
 17843                           
 17844                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 17845  006F56  0E02               	movlw	2
 17846  006F58  0100               	movlb	0	; () banked
 17847  006F5A  6F82               	movwf	??_delay& (0+255),b
 17848  006F5C  0EF2               	movlw	242
 17849  006F5E                     u9047:
 17850  006F5E  FFFF               	dw	65535	; errata NOP
 17851  006F60  2EE8               	decfsz	wreg,f,c
 17852  006F62  D7FD               	bra	u9047
 17853  006F64  2F82               	decfsz	??_delay& (0+255),f,b
 17854  006F66  D7FB               	bra	u9047
 17855  006F68  F000               	nop	
 17856  006F6A  0004               	clrwdt		;# 
 17857  006F6C                     l1000:
 17858  006F6C  FFFF               	dw	65535	; assembler added errata NOP
 17859  006F6E  0100               	movlb	0	; () banked
 17860  006F70  0780               	decf	delay@x& (0+255),f,b
 17861  006F72  A0D8               	btfss	status,0,c
 17862  006F74  0781               	decf	(delay@x+1)& (0+255),f,b
 17863  006F76  2980               	incf	delay@x& (0+255),w,b
 17864  006F78  E1EE               	bnz	l4964
 17865  006F7A  2981               	incf	(delay@x+1)& (0+255),w,b
 17866  006F7C  B4D8               	btfsc	status,2,c
 17867                           
 17868                           ; BSR set to: 0
 17869                           
 17870                           ; BSR set to: 0
 17871  006F7E  0012               	return		;funcret
 17872  006F80  FFFF               	dw	65535	; assembler added errata NOP
 17873  006F82  D7E8               	goto	l1001
 17874  006F84  FFFF               	dw	65535	; errata NOP
 17875  006F86                     __end_of_delay:
 17876                           	opt stack 0
 17877                           tosu	equ	0xFFF
 17878                           tosh	equ	0xFFE
 17879                           tosl	equ	0xFFD
 17880                           pclath	equ	0xFFA
 17881                           tblptru	equ	0xFF8
 17882                           tblptrh	equ	0xFF7
 17883                           tblptrl	equ	0xFF6
 17884                           tablat	equ	0xFF5
 17885                           prodh	equ	0xFF4
 17886                           prodl	equ	0xFF3
 17887                           intcon	equ	0xFF2
 17888                           indf0	equ	0xFEF
 17889                           postinc0	equ	0xFEE
 17890                           fsr0h	equ	0xFEA
 17891                           fsr0l	equ	0xFE9
 17892                           wreg	equ	0xFE8
 17893                           postdec1	equ	0xFE5
 17894                           fsr1l	equ	0xFE1
 17895                           indf2	equ	0xFDF
 17896                           postinc2	equ	0xFDE
 17897                           postdec2	equ	0xFDD
 17898                           fsr2h	equ	0xFDA
 17899                           fsr2l	equ	0xFD9
 17900                           status	equ	0xFD8
 17901                           
 17902 ;; *************** function _RTC_Init *****************
 17903 ;; Defined at:
 17904 ;;		line 98 in file "ds1307.h"
 17905 ;; Parameters:    Size  Location     Type
 17906 ;;		None
 17907 ;; Auto vars:     Size  Location     Type
 17908 ;;		None
 17909 ;; Return value:  Size  Location     Type
 17910 ;;                  1    wreg      void 
 17911 ;; Registers used:
 17912 ;;		wreg, status,2, status,0, cstack
 17913 ;; Tracked objects:
 17914 ;;		On entry : 0/0
 17915 ;;		On exit  : 0/0
 17916 ;;		Unchanged: 0/0
 17917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17918 ;;      Params:         0       0       0       0       0       0       0
 17919 ;;      Locals:         0       0       0       0       0       0       0
 17920 ;;      Temps:          0       0       0       0       0       0       0
 17921 ;;      Totals:         0       0       0       0       0       0       0
 17922 ;;Total ram usage:        0 bytes
 17923 ;; Hardware stack levels used:    1
 17924 ;; Hardware stack levels required when called:    8
 17925 ;; This function calls:
 17926 ;;		_I2C_Start
 17927 ;;		_I2C_Stop
 17928 ;;		_I2C_Write
 17929 ;; This function is called by:
 17930 ;;		_main
 17931 ;; This function uses a non-reentrant model
 17932 ;;
 17933                           
 17934                           	psect	text62
 17935  006FF2                     __ptext62:
 17936                           	opt stack 0
 17937  006FF2                     _RTC_Init:
 17938                           	opt stack 0
 17939  006FF2  FFFF               	dw	65535	; assembler added errata NOP
 17940                           
 17941                           ;ds1307.h: 100: I2C_Start();
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;incstack = 0
 17945  006FF4  EC5F  F036         	call	_I2C_Start	;wreg free
 17946                           
 17947                           ;ds1307.h: 101: I2C_Write(0xD0);
 17948  006FF8  0E00               	movlw	0
 17949  006FFA  0100               	movlb	0	; () banked
 17950  006FFC  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17951  006FFE  0ED0               	movlw	208
 17952  007000  6F8A               	movwf	I2C_Write@d& (0+255),b
 17953  007002  EC78  F036         	call	_I2C_Write	;wreg free
 17954                           
 17955                           ;ds1307.h: 102: I2C_Write(0x07);
 17956  007006  0E00               	movlw	0
 17957  007008  0100               	movlb	0	; () banked
 17958  00700A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17959  00700C  0E07               	movlw	7
 17960  00700E  6F8A               	movwf	I2C_Write@d& (0+255),b
 17961  007010  EC78  F036         	call	_I2C_Write	;wreg free
 17962                           
 17963                           ;ds1307.h: 103: I2C_Write(0x00);
 17964  007014  0E00               	movlw	0
 17965  007016  0100               	movlb	0	; () banked
 17966  007018  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17967  00701A  0E00               	movlw	0
 17968  00701C  6F8A               	movwf	I2C_Write@d& (0+255),b
 17969  00701E  EC78  F036         	call	_I2C_Write	;wreg free
 17970                           
 17971                           ;ds1307.h: 104: I2C_Stop();
 17972  007022  EC65  F036         	call	_I2C_Stop	;wreg free
 17973  007026  0012               	return		;funcret
 17974  007028  FFFF               	dw	65535	; errata NOP
 17975  00702A                     __end_of_RTC_Init:
 17976                           	opt stack 0
 17977                           tosu	equ	0xFFF
 17978                           tosh	equ	0xFFE
 17979                           tosl	equ	0xFFD
 17980                           pclath	equ	0xFFA
 17981                           tblptru	equ	0xFF8
 17982                           tblptrh	equ	0xFF7
 17983                           tblptrl	equ	0xFF6
 17984                           tablat	equ	0xFF5
 17985                           prodh	equ	0xFF4
 17986                           prodl	equ	0xFF3
 17987                           intcon	equ	0xFF2
 17988                           indf0	equ	0xFEF
 17989                           postinc0	equ	0xFEE
 17990                           fsr0h	equ	0xFEA
 17991                           fsr0l	equ	0xFE9
 17992                           wreg	equ	0xFE8
 17993                           postdec1	equ	0xFE5
 17994                           fsr1l	equ	0xFE1
 17995                           indf2	equ	0xFDF
 17996                           postinc2	equ	0xFDE
 17997                           postdec2	equ	0xFDD
 17998                           fsr2h	equ	0xFDA
 17999                           fsr2l	equ	0xFD9
 18000                           status	equ	0xFD8
 18001                           
 18002 ;; *************** function _I2C_Write *****************
 18003 ;; Defined at:
 18004 ;;		line 42 in file "I2C.c"
 18005 ;; Parameters:    Size  Location     Type
 18006 ;;  d               2   10[BANK0 ] unsigned int 
 18007 ;; Auto vars:     Size  Location     Type
 18008 ;;		None
 18009 ;; Return value:  Size  Location     Type
 18010 ;;                  1    wreg      void 
 18011 ;; Registers used:
 18012 ;;		wreg, status,2, status,0, cstack
 18013 ;; Tracked objects:
 18014 ;;		On entry : 0/0
 18015 ;;		On exit  : 0/0
 18016 ;;		Unchanged: 0/0
 18017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18018 ;;      Params:         0       2       0       0       0       0       0
 18019 ;;      Locals:         0       0       0       0       0       0       0
 18020 ;;      Temps:          0       0       0       0       0       0       0
 18021 ;;      Totals:         0       2       0       0       0       0       0
 18022 ;;Total ram usage:        2 bytes
 18023 ;; Hardware stack levels used:    1
 18024 ;; Hardware stack levels required when called:    7
 18025 ;; This function calls:
 18026 ;;		_I2C_Wait
 18027 ;; This function is called by:
 18028 ;;		_setDS1307TimeDate
 18029 ;;		_getDS1307TimeDate
 18030 ;;		_RTC_Init
 18031 ;;		_writeEEPROM_ext
 18032 ;;		_readEEPROM_ext
 18033 ;;		_getDS1307Time
 18034 ;;		_setDS1307Time
 18035 ;; This function uses a non-reentrant model
 18036 ;;
 18037                           
 18038                           	psect	text63
 18039  006CF0                     __ptext63:
 18040                           	opt stack 0
 18041  006CF0                     _I2C_Write:
 18042                           	opt stack 0
 18043  006CF0  FFFF               	dw	65535	; assembler added errata NOP
 18044                           
 18045                           ;I2C.c: 43: I2C_Wait();
 18046                           
 18047                           ;incstack = 0
 18048  006CF2  ECB0  F036         	call	_I2C_Wait	;wreg free
 18049                           
 18050                           ;I2C.c: 44: SSPBUF = d;
 18051  006CF6  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 18052  006CFA  0012               	return		;funcret
 18053  006CFC  FFFF               	dw	65535	; errata NOP
 18054  006CFE                     __end_of_I2C_Write:
 18055                           	opt stack 0
 18056                           tosu	equ	0xFFF
 18057                           tosh	equ	0xFFE
 18058                           tosl	equ	0xFFD
 18059                           pclath	equ	0xFFA
 18060                           tblptru	equ	0xFF8
 18061                           tblptrh	equ	0xFF7
 18062                           tblptrl	equ	0xFF6
 18063                           tablat	equ	0xFF5
 18064                           prodh	equ	0xFF4
 18065                           prodl	equ	0xFF3
 18066                           intcon	equ	0xFF2
 18067                           indf0	equ	0xFEF
 18068                           postinc0	equ	0xFEE
 18069                           fsr0h	equ	0xFEA
 18070                           fsr0l	equ	0xFE9
 18071                           wreg	equ	0xFE8
 18072                           postdec1	equ	0xFE5
 18073                           fsr1l	equ	0xFE1
 18074                           indf2	equ	0xFDF
 18075                           postinc2	equ	0xFDE
 18076                           postdec2	equ	0xFDD
 18077                           fsr2h	equ	0xFDA
 18078                           fsr2l	equ	0xFD9
 18079                           status	equ	0xFD8
 18080                           
 18081 ;; *************** function _I2C_Stop *****************
 18082 ;; Defined at:
 18083 ;;		line 36 in file "I2C.c"
 18084 ;; Parameters:    Size  Location     Type
 18085 ;;		None
 18086 ;; Auto vars:     Size  Location     Type
 18087 ;;		None
 18088 ;; Return value:  Size  Location     Type
 18089 ;;                  1    wreg      void 
 18090 ;; Registers used:
 18091 ;;		wreg, status,2, status,0, cstack
 18092 ;; Tracked objects:
 18093 ;;		On entry : 0/0
 18094 ;;		On exit  : 0/0
 18095 ;;		Unchanged: 0/0
 18096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18097 ;;      Params:         0       0       0       0       0       0       0
 18098 ;;      Locals:         0       0       0       0       0       0       0
 18099 ;;      Temps:          0       0       0       0       0       0       0
 18100 ;;      Totals:         0       0       0       0       0       0       0
 18101 ;;Total ram usage:        0 bytes
 18102 ;; Hardware stack levels used:    1
 18103 ;; Hardware stack levels required when called:    7
 18104 ;; This function calls:
 18105 ;;		_I2C_Wait
 18106 ;; This function is called by:
 18107 ;;		_setDS1307TimeDate
 18108 ;;		_getDS1307TimeDate
 18109 ;;		_RTC_Init
 18110 ;;		_writeEEPROM_ext
 18111 ;;		_readEEPROM_ext
 18112 ;;		_getDS1307Time
 18113 ;;		_setDS1307Time
 18114 ;; This function uses a non-reentrant model
 18115 ;;
 18116                           
 18117                           	psect	text64
 18118  006CCA                     __ptext64:
 18119                           	opt stack 0
 18120  006CCA                     _I2C_Stop:
 18121                           	opt stack 0
 18122  006CCA  FFFF               	dw	65535	; assembler added errata NOP
 18123                           
 18124                           ;I2C.c: 37: I2C_Wait();
 18125                           
 18126                           ;incstack = 0
 18127  006CCC  ECB0  F036         	call	_I2C_Wait	;wreg free
 18128                           
 18129                           ;I2C.c: 38: PEN = 1;
 18130  006CD0  84C5               	bsf	4037,2,c	;volatile
 18131  006CD2  0012               	return		;funcret
 18132  006CD4  FFFF               	dw	65535	; errata NOP
 18133  006CD6                     __end_of_I2C_Stop:
 18134                           	opt stack 0
 18135                           tosu	equ	0xFFF
 18136                           tosh	equ	0xFFE
 18137                           tosl	equ	0xFFD
 18138                           pclath	equ	0xFFA
 18139                           tblptru	equ	0xFF8
 18140                           tblptrh	equ	0xFF7
 18141                           tblptrl	equ	0xFF6
 18142                           tablat	equ	0xFF5
 18143                           prodh	equ	0xFF4
 18144                           prodl	equ	0xFF3
 18145                           intcon	equ	0xFF2
 18146                           indf0	equ	0xFEF
 18147                           postinc0	equ	0xFEE
 18148                           fsr0h	equ	0xFEA
 18149                           fsr0l	equ	0xFE9
 18150                           wreg	equ	0xFE8
 18151                           postdec1	equ	0xFE5
 18152                           fsr1l	equ	0xFE1
 18153                           indf2	equ	0xFDF
 18154                           postinc2	equ	0xFDE
 18155                           postdec2	equ	0xFDD
 18156                           fsr2h	equ	0xFDA
 18157                           fsr2l	equ	0xFD9
 18158                           status	equ	0xFD8
 18159                           
 18160 ;; *************** function _I2C_Start *****************
 18161 ;; Defined at:
 18162 ;;		line 26 in file "I2C.c"
 18163 ;; Parameters:    Size  Location     Type
 18164 ;;		None
 18165 ;; Auto vars:     Size  Location     Type
 18166 ;;		None
 18167 ;; Return value:  Size  Location     Type
 18168 ;;                  1    wreg      void 
 18169 ;; Registers used:
 18170 ;;		wreg, status,2, status,0, cstack
 18171 ;; Tracked objects:
 18172 ;;		On entry : 0/0
 18173 ;;		On exit  : 0/0
 18174 ;;		Unchanged: 0/0
 18175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18176 ;;      Params:         0       0       0       0       0       0       0
 18177 ;;      Locals:         0       0       0       0       0       0       0
 18178 ;;      Temps:          0       0       0       0       0       0       0
 18179 ;;      Totals:         0       0       0       0       0       0       0
 18180 ;;Total ram usage:        0 bytes
 18181 ;; Hardware stack levels used:    1
 18182 ;; Hardware stack levels required when called:    7
 18183 ;; This function calls:
 18184 ;;		_I2C_Wait
 18185 ;; This function is called by:
 18186 ;;		_setDS1307TimeDate
 18187 ;;		_getDS1307TimeDate
 18188 ;;		_RTC_Init
 18189 ;;		_writeEEPROM_ext
 18190 ;;		_readEEPROM_ext
 18191 ;;		_getDS1307Time
 18192 ;;		_setDS1307Time
 18193 ;; This function uses a non-reentrant model
 18194 ;;
 18195                           
 18196                           	psect	text65
 18197  006CBE                     __ptext65:
 18198                           	opt stack 0
 18199  006CBE                     _I2C_Start:
 18200                           	opt stack 0
 18201  006CBE  FFFF               	dw	65535	; assembler added errata NOP
 18202                           
 18203                           ;I2C.c: 27: I2C_Wait();
 18204                           
 18205                           ;incstack = 0
 18206  006CC0  ECB0  F036         	call	_I2C_Wait	;wreg free
 18207                           
 18208                           ;I2C.c: 28: SEN = 1;
 18209  006CC4  80C5               	bsf	4037,0,c	;volatile
 18210  006CC6  0012               	return		;funcret
 18211  006CC8  FFFF               	dw	65535	; errata NOP
 18212  006CCA                     __end_of_I2C_Start:
 18213                           	opt stack 0
 18214                           tosu	equ	0xFFF
 18215                           tosh	equ	0xFFE
 18216                           tosl	equ	0xFFD
 18217                           pclath	equ	0xFFA
 18218                           tblptru	equ	0xFF8
 18219                           tblptrh	equ	0xFF7
 18220                           tblptrl	equ	0xFF6
 18221                           tablat	equ	0xFF5
 18222                           prodh	equ	0xFF4
 18223                           prodl	equ	0xFF3
 18224                           intcon	equ	0xFF2
 18225                           indf0	equ	0xFEF
 18226                           postinc0	equ	0xFEE
 18227                           fsr0h	equ	0xFEA
 18228                           fsr0l	equ	0xFE9
 18229                           wreg	equ	0xFE8
 18230                           postdec1	equ	0xFE5
 18231                           fsr1l	equ	0xFE1
 18232                           indf2	equ	0xFDF
 18233                           postinc2	equ	0xFDE
 18234                           postdec2	equ	0xFDD
 18235                           fsr2h	equ	0xFDA
 18236                           fsr2l	equ	0xFD9
 18237                           status	equ	0xFD8
 18238                           
 18239 ;; *************** function _I2C_Wait *****************
 18240 ;; Defined at:
 18241 ;;		line 22 in file "I2C.c"
 18242 ;; Parameters:    Size  Location     Type
 18243 ;;		None
 18244 ;; Auto vars:     Size  Location     Type
 18245 ;;		None
 18246 ;; Return value:  Size  Location     Type
 18247 ;;                  1    wreg      void 
 18248 ;; Registers used:
 18249 ;;		wreg, status,2, status,0
 18250 ;; Tracked objects:
 18251 ;;		On entry : 0/0
 18252 ;;		On exit  : 0/0
 18253 ;;		Unchanged: 0/0
 18254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18255 ;;      Params:         0       0       0       0       0       0       0
 18256 ;;      Locals:         0       0       0       0       0       0       0
 18257 ;;      Temps:          0       1       0       0       0       0       0
 18258 ;;      Totals:         0       1       0       0       0       0       0
 18259 ;;Total ram usage:        1 bytes
 18260 ;; Hardware stack levels used:    1
 18261 ;; Hardware stack levels required when called:    6
 18262 ;; This function calls:
 18263 ;;		Nothing
 18264 ;; This function is called by:
 18265 ;;		_I2C_Start
 18266 ;;		_I2C_Restart
 18267 ;;		_I2C_Stop
 18268 ;;		_I2C_Write
 18269 ;;		_I2C_Read
 18270 ;; This function uses a non-reentrant model
 18271 ;;
 18272                           
 18273                           	psect	text66
 18274  006D60                     __ptext66:
 18275                           	opt stack 0
 18276  006D60                     _I2C_Wait:
 18277                           	opt stack 0
 18278  006D60  FFFF               	dw	65535	; assembler added errata NOP
 18279                           
 18280                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 18281                           
 18282                           ;incstack = 0
 18283  006D62  B4C7               	btfsc	4039,2,c	;volatile
 18284  006D64  D7FD               	goto	_I2C_Wait
 18285  006D66  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 18286  006D6A  0E1F               	movlw	31
 18287  006D6C  0100               	movlb	0	; () banked
 18288  006D6E  1780               	andwf	??_I2C_Wait& (0+255),f,b
 18289  006D70  B4D8               	btfsc	status,2,c
 18290                           
 18291                           ; BSR set to: 0
 18292                           
 18293                           ; BSR set to: 0
 18294  006D72  0012               	return		;funcret
 18295  006D74  FFFF               	dw	65535	; assembler added errata NOP
 18296  006D76  D7F4               	goto	_I2C_Wait
 18297  006D78  FFFF               	dw	65535	; errata NOP
 18298  006D7A                     __end_of_I2C_Wait:
 18299                           	opt stack 0
 18300                           tosu	equ	0xFFF
 18301                           tosh	equ	0xFFE
 18302                           tosl	equ	0xFFD
 18303                           pclath	equ	0xFFA
 18304                           tblptru	equ	0xFF8
 18305                           tblptrh	equ	0xFF7
 18306                           tblptrl	equ	0xFF6
 18307                           tablat	equ	0xFF5
 18308                           prodh	equ	0xFF4
 18309                           prodl	equ	0xFF3
 18310                           intcon	equ	0xFF2
 18311                           indf0	equ	0xFEF
 18312                           postinc0	equ	0xFEE
 18313                           fsr0h	equ	0xFEA
 18314                           fsr0l	equ	0xFE9
 18315                           wreg	equ	0xFE8
 18316                           postdec1	equ	0xFE5
 18317                           fsr1l	equ	0xFE1
 18318                           indf2	equ	0xFDF
 18319                           postinc2	equ	0xFDE
 18320                           postdec2	equ	0xFDD
 18321                           fsr2h	equ	0xFDA
 18322                           fsr2l	equ	0xFD9
 18323                           status	equ	0xFD8
 18324                           
 18325 ;; *************** function _Lcd_Init *****************
 18326 ;; Defined at:
 18327 ;;		line 12 in file "lcd.h"
 18328 ;; Parameters:    Size  Location     Type
 18329 ;;		None
 18330 ;; Auto vars:     Size  Location     Type
 18331 ;;		None
 18332 ;; Return value:  Size  Location     Type
 18333 ;;                  1    wreg      void 
 18334 ;; Registers used:
 18335 ;;		wreg, status,2, cstack
 18336 ;; Tracked objects:
 18337 ;;		On entry : 0/0
 18338 ;;		On exit  : 0/0
 18339 ;;		Unchanged: 0/0
 18340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18341 ;;      Params:         0       0       0       0       0       0       0
 18342 ;;      Locals:         0       0       0       0       0       0       0
 18343 ;;      Temps:          0       1       0       0       0       0       0
 18344 ;;      Totals:         0       1       0       0       0       0       0
 18345 ;;Total ram usage:        1 bytes
 18346 ;; Hardware stack levels used:    1
 18347 ;; Hardware stack levels required when called:    8
 18348 ;; This function calls:
 18349 ;;		_Lcd_Cmd
 18350 ;;		_Lcd_Port
 18351 ;; This function is called by:
 18352 ;;		_main
 18353 ;; This function uses a non-reentrant model
 18354 ;;
 18355                           
 18356                           	psect	text67
 18357  0078EE                     __ptext67:
 18358                           	opt stack 0
 18359  0078EE                     _Lcd_Init:
 18360                           	opt stack 0
 18361  0078EE  FFFF               	dw	65535	; assembler added errata NOP
 18362                           
 18363                           ;lcd.h: 21: Lcd_Port(0x00);
 18364                           
 18365                           ; BSR set to: 0
 18366                           ;incstack = 0
 18367  0078F0  0E00               	movlw	0
 18368  0078F2  EC84  F039         	call	_Lcd_Port
 18369                           
 18370                           ;lcd.h: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
 18371  0078F6  0E3B               	movlw	59
 18372  0078F8  0100               	movlb	0	; () banked
 18373  0078FA  6F83               	movwf	??_Lcd_Init& (0+255),b
 18374  0078FC  0E79               	movlw	121
 18375  0078FE                     u9057:
 18376  0078FE  FFFF               	dw	65535	; errata NOP
 18377  007900  2EE8               	decfsz	wreg,f,c
 18378  007902  D7FD               	bra	u9057
 18379  007904  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18380  007906  D7FB               	bra	u9057
 18381  007908  D000               	nop2	
 18382  00790A  F000               	nop	
 18383                           
 18384                           ;lcd.h: 23: Lcd_Cmd(0x03);
 18385  00790C  0E03               	movlw	3
 18386  00790E  EC2B  F037         	call	_Lcd_Cmd
 18387                           
 18388                           ;lcd.h: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
 18389  007912  0E1E               	movlw	30
 18390  007914  0100               	movlb	0	; () banked
 18391  007916  6F83               	movwf	??_Lcd_Init& (0+255),b
 18392  007918  0E3C               	movlw	60
 18393  00791A                     u9067:
 18394  00791A  FFFF               	dw	65535	; errata NOP
 18395  00791C  2EE8               	decfsz	wreg,f,c
 18396  00791E  D7FD               	bra	u9067
 18397  007920  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18398  007922  D7FB               	bra	u9067
 18399  007924  F000               	nop	
 18400                           
 18401                           ;lcd.h: 25: Lcd_Cmd(0x03);
 18402  007926  0E03               	movlw	3
 18403  007928  EC2B  F037         	call	_Lcd_Cmd
 18404                           
 18405                           ;lcd.h: 26: _delay((unsigned long)((20)*(8000000/4000.0)));
 18406  00792C  0E27               	movlw	39
 18407  00792E  0100               	movlb	0	; () banked
 18408  007930  6F83               	movwf	??_Lcd_Init& (0+255),b
 18409  007932  0EFB               	movlw	251
 18410  007934                     u9077:
 18411  007934  FFFF               	dw	65535	; errata NOP
 18412  007936  2EE8               	decfsz	wreg,f,c
 18413  007938  D7FD               	bra	u9077
 18414  00793A  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18415  00793C  D7FB               	bra	u9077
 18416  00793E  D000               	nop2	
 18417  007940  F000               	nop	
 18418                           
 18419                           ;lcd.h: 27: Lcd_Cmd(0x03);
 18420  007942  0E03               	movlw	3
 18421  007944  EC2B  F037         	call	_Lcd_Cmd
 18422                           
 18423                           ;lcd.h: 29: Lcd_Cmd(0x02);
 18424  007948  0E02               	movlw	2
 18425  00794A  EC2B  F037         	call	_Lcd_Cmd
 18426                           
 18427                           ;lcd.h: 30: Lcd_Cmd(0x02);
 18428  00794E  0E02               	movlw	2
 18429  007950  EC2B  F037         	call	_Lcd_Cmd
 18430                           
 18431                           ;lcd.h: 31: Lcd_Cmd(0x08);
 18432  007954  0E08               	movlw	8
 18433  007956  EC2B  F037         	call	_Lcd_Cmd
 18434                           
 18435                           ;lcd.h: 32: Lcd_Cmd(0x00);
 18436  00795A  0E00               	movlw	0
 18437  00795C  EC2B  F037         	call	_Lcd_Cmd
 18438                           
 18439                           ;lcd.h: 33: Lcd_Cmd(0x0C);
 18440  007960  0E0C               	movlw	12
 18441  007962  EC2B  F037         	call	_Lcd_Cmd
 18442                           
 18443                           ;lcd.h: 34: Lcd_Cmd(0x00);
 18444  007966  0E00               	movlw	0
 18445  007968  EC2B  F037         	call	_Lcd_Cmd
 18446                           
 18447                           ;lcd.h: 35: Lcd_Cmd(0x06);
 18448  00796C  0E06               	movlw	6
 18449  00796E  EC2B  F037         	call	_Lcd_Cmd
 18450  007972  0012               	return		;funcret
 18451  007974  FFFF               	dw	65535	; errata NOP
 18452  007976                     __end_of_Lcd_Init:
 18453                           	opt stack 0
 18454                           tosu	equ	0xFFF
 18455                           tosh	equ	0xFFE
 18456                           tosl	equ	0xFFD
 18457                           pclath	equ	0xFFA
 18458                           tblptru	equ	0xFF8
 18459                           tblptrh	equ	0xFF7
 18460                           tblptrl	equ	0xFF6
 18461                           tablat	equ	0xFF5
 18462                           prodh	equ	0xFF4
 18463                           prodl	equ	0xFF3
 18464                           intcon	equ	0xFF2
 18465                           indf0	equ	0xFEF
 18466                           postinc0	equ	0xFEE
 18467                           fsr0h	equ	0xFEA
 18468                           fsr0l	equ	0xFE9
 18469                           wreg	equ	0xFE8
 18470                           postdec1	equ	0xFE5
 18471                           fsr1l	equ	0xFE1
 18472                           indf2	equ	0xFDF
 18473                           postinc2	equ	0xFDE
 18474                           postdec2	equ	0xFDD
 18475                           fsr2h	equ	0xFDA
 18476                           fsr2l	equ	0xFD9
 18477                           status	equ	0xFD8
 18478                           
 18479 ;; *************** function _Lcd_Clear *****************
 18480 ;; Defined at:
 18481 ;;		line 68 in file "lcd.h"
 18482 ;; Parameters:    Size  Location     Type
 18483 ;;		None
 18484 ;; Auto vars:     Size  Location     Type
 18485 ;;		None
 18486 ;; Return value:  Size  Location     Type
 18487 ;;                  1    wreg      void 
 18488 ;; Registers used:
 18489 ;;		wreg, status,2, cstack
 18490 ;; Tracked objects:
 18491 ;;		On entry : 0/0
 18492 ;;		On exit  : 0/0
 18493 ;;		Unchanged: 0/0
 18494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18495 ;;      Params:         0       0       0       0       0       0       0
 18496 ;;      Locals:         0       0       0       0       0       0       0
 18497 ;;      Temps:          0       0       0       0       0       0       0
 18498 ;;      Totals:         0       0       0       0       0       0       0
 18499 ;;Total ram usage:        0 bytes
 18500 ;; Hardware stack levels used:    1
 18501 ;; Hardware stack levels required when called:    8
 18502 ;; This function calls:
 18503 ;;		_Lcd_Cmd
 18504 ;; This function is called by:
 18505 ;;		_main
 18506 ;; This function uses a non-reentrant model
 18507 ;;
 18508                           
 18509                           	psect	text68
 18510  006D0C                     __ptext68:
 18511                           	opt stack 0
 18512  006D0C                     _Lcd_Clear:
 18513                           	opt stack 0
 18514  006D0C  FFFF               	dw	65535	; assembler added errata NOP
 18515                           
 18516                           ;lcd.h: 69: Lcd_Cmd(0);
 18517                           
 18518                           ;incstack = 0
 18519  006D0E  0E00               	movlw	0
 18520  006D10  EC2B  F037         	call	_Lcd_Cmd
 18521                           
 18522                           ;lcd.h: 70: Lcd_Cmd(1);
 18523  006D14  0E01               	movlw	1
 18524  006D16  EC2B  F037         	call	_Lcd_Cmd
 18525  006D1A  0012               	return		;funcret
 18526  006D1C  FFFF               	dw	65535	; errata NOP
 18527  006D1E                     __end_of_Lcd_Clear:
 18528                           	opt stack 0
 18529                           tosu	equ	0xFFF
 18530                           tosh	equ	0xFFE
 18531                           tosl	equ	0xFFD
 18532                           pclath	equ	0xFFA
 18533                           tblptru	equ	0xFF8
 18534                           tblptrh	equ	0xFF7
 18535                           tblptrl	equ	0xFF6
 18536                           tablat	equ	0xFF5
 18537                           prodh	equ	0xFF4
 18538                           prodl	equ	0xFF3
 18539                           intcon	equ	0xFF2
 18540                           indf0	equ	0xFEF
 18541                           postinc0	equ	0xFEE
 18542                           fsr0h	equ	0xFEA
 18543                           fsr0l	equ	0xFE9
 18544                           wreg	equ	0xFE8
 18545                           postdec1	equ	0xFE5
 18546                           fsr1l	equ	0xFE1
 18547                           indf2	equ	0xFDF
 18548                           postinc2	equ	0xFDE
 18549                           postdec2	equ	0xFDD
 18550                           fsr2h	equ	0xFDA
 18551                           fsr2l	equ	0xFD9
 18552                           status	equ	0xFD8
 18553                           
 18554 ;; *************** function _Lcd_Cmd *****************
 18555 ;; Defined at:
 18556 ;;		line 60 in file "lcd.h"
 18557 ;; Parameters:    Size  Location     Type
 18558 ;;  a               1    wreg     unsigned char 
 18559 ;; Auto vars:     Size  Location     Type
 18560 ;;  a               1    2[BANK0 ] unsigned char 
 18561 ;; Return value:  Size  Location     Type
 18562 ;;                  1    wreg      void 
 18563 ;; Registers used:
 18564 ;;		wreg, status,2, cstack
 18565 ;; Tracked objects:
 18566 ;;		On entry : 0/0
 18567 ;;		On exit  : 0/0
 18568 ;;		Unchanged: 0/0
 18569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18570 ;;      Params:         0       0       0       0       0       0       0
 18571 ;;      Locals:         0       1       0       0       0       0       0
 18572 ;;      Temps:          0       1       0       0       0       0       0
 18573 ;;      Totals:         0       2       0       0       0       0       0
 18574 ;;Total ram usage:        2 bytes
 18575 ;; Hardware stack levels used:    1
 18576 ;; Hardware stack levels required when called:    7
 18577 ;; This function calls:
 18578 ;;		_Lcd_Port
 18579 ;; This function is called by:
 18580 ;;		_Lcd_Init
 18581 ;;		_Lcd_Clear
 18582 ;;		_Lcd_Set_Cursor
 18583 ;;		_criarCaracteresCGRAM
 18584 ;; This function uses a non-reentrant model
 18585 ;;
 18586                           
 18587                           	psect	text69
 18588  006E56                     __ptext69:
 18589                           	opt stack 0
 18590  006E56                     _Lcd_Cmd:
 18591                           	opt stack 0
 18592  006E56  FFFF               	dw	65535	; assembler added errata NOP
 18593                           
 18594                           ;incstack = 0
 18595                           ;Lcd_Cmd@a stored from wreg
 18596  006E58  0100               	movlb	0	; () banked
 18597  006E5A  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 18598                           
 18599                           ;lcd.h: 61: PORTDbits.RD1 = 0;
 18600  006E5C  9283               	bcf	3971,1,c	;volatile
 18601                           
 18602                           ;lcd.h: 62: Lcd_Port(a);
 18603  006E5E  0100               	movlb	0	; () banked
 18604  006E60  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 18605  006E62  EC84  F039         	call	_Lcd_Port
 18606                           
 18607                           ;lcd.h: 63: PORTDbits.RD0 = 1;
 18608  006E66  8083               	bsf	3971,0,c	;volatile
 18609                           
 18610                           ;lcd.h: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
 18611  006E68  0E1E               	movlw	30
 18612  006E6A  0100               	movlb	0	; () banked
 18613  006E6C  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 18614  006E6E  0E3C               	movlw	60
 18615  006E70                     u9087:
 18616  006E70  FFFF               	dw	65535	; errata NOP
 18617  006E72  2EE8               	decfsz	wreg,f,c
 18618  006E74  D7FD               	bra	u9087
 18619  006E76  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 18620  006E78  D7FB               	bra	u9087
 18621  006E7A  F000               	nop	
 18622                           
 18623                           ;lcd.h: 65: PORTDbits.RD0 = 0;
 18624  006E7C  9083               	bcf	3971,0,c	;volatile
 18625  006E7E  0012               	return		;funcret
 18626  006E80  FFFF               	dw	65535	; errata NOP
 18627  006E82                     __end_of_Lcd_Cmd:
 18628                           	opt stack 0
 18629                           tosu	equ	0xFFF
 18630                           tosh	equ	0xFFE
 18631                           tosl	equ	0xFFD
 18632                           pclath	equ	0xFFA
 18633                           tblptru	equ	0xFF8
 18634                           tblptrh	equ	0xFF7
 18635                           tblptrl	equ	0xFF6
 18636                           tablat	equ	0xFF5
 18637                           prodh	equ	0xFF4
 18638                           prodl	equ	0xFF3
 18639                           intcon	equ	0xFF2
 18640                           indf0	equ	0xFEF
 18641                           postinc0	equ	0xFEE
 18642                           fsr0h	equ	0xFEA
 18643                           fsr0l	equ	0xFE9
 18644                           wreg	equ	0xFE8
 18645                           postdec1	equ	0xFE5
 18646                           fsr1l	equ	0xFE1
 18647                           indf2	equ	0xFDF
 18648                           postinc2	equ	0xFDE
 18649                           postdec2	equ	0xFDD
 18650                           fsr2h	equ	0xFDA
 18651                           fsr2l	equ	0xFD9
 18652                           status	equ	0xFD8
 18653                           
 18654 ;; *************** function _Lcd_Port *****************
 18655 ;; Defined at:
 18656 ;;		line 38 in file "lcd.h"
 18657 ;; Parameters:    Size  Location     Type
 18658 ;;  a               1    wreg     unsigned char 
 18659 ;; Auto vars:     Size  Location     Type
 18660 ;;  a               1    0[BANK0 ] unsigned char 
 18661 ;; Return value:  Size  Location     Type
 18662 ;;                  1    wreg      void 
 18663 ;; Registers used:
 18664 ;;		wreg
 18665 ;; Tracked objects:
 18666 ;;		On entry : 0/0
 18667 ;;		On exit  : 0/0
 18668 ;;		Unchanged: 0/0
 18669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18670 ;;      Params:         0       0       0       0       0       0       0
 18671 ;;      Locals:         0       1       0       0       0       0       0
 18672 ;;      Temps:          0       0       0       0       0       0       0
 18673 ;;      Totals:         0       1       0       0       0       0       0
 18674 ;;Total ram usage:        1 bytes
 18675 ;; Hardware stack levels used:    1
 18676 ;; Hardware stack levels required when called:    6
 18677 ;; This function calls:
 18678 ;;		Nothing
 18679 ;; This function is called by:
 18680 ;;		_Lcd_Init
 18681 ;;		_Lcd_Cmd
 18682 ;;		_Lcd_Write_Char
 18683 ;; This function uses a non-reentrant model
 18684 ;;
 18685                           
 18686                           	psect	text70
 18687  007308                     __ptext70:
 18688                           	opt stack 0
 18689  007308                     _Lcd_Port:
 18690                           	opt stack 0
 18691  007308  FFFF               	dw	65535	; assembler added errata NOP
 18692                           
 18693                           ;incstack = 0
 18694                           ;Lcd_Port@a stored from wreg
 18695  00730A  0100               	movlb	0	; () banked
 18696  00730C  6F80               	movwf	Lcd_Port@a& (0+255),b
 18697                           
 18698                           ;lcd.h: 39: if (a & 1)
 18699  00730E  0100               	movlb	0	; () banked
 18700  007310  A180               	btfss	Lcd_Port@a& (0+255),0,b
 18701  007312  D002               	goto	l611
 18702                           
 18703                           ; BSR set to: 0
 18704                           ;lcd.h: 40: PORTDbits.RD2 = 1;
 18705  007314  8483               	bsf	3971,2,c	;volatile
 18706  007316  D002               	goto	l612
 18707  007318                     l611:
 18708  007318  FFFF               	dw	65535	; assembler added errata NOP
 18709                           
 18710                           ; BSR set to: 0
 18711                           ;lcd.h: 41: else
 18712                           ;lcd.h: 42: PORTDbits.RD2 = 0;
 18713  00731A  9483               	bcf	3971,2,c	;volatile
 18714  00731C                     l612:
 18715  00731C  FFFF               	dw	65535	; assembler added errata NOP
 18716                           
 18717                           ; BSR set to: 0
 18718                           ;lcd.h: 44: if (a & 2)
 18719                           
 18720                           ; BSR set to: 0
 18721  00731E  A380               	btfss	Lcd_Port@a& (0+255),1,b
 18722  007320  D002               	goto	l613
 18723                           
 18724                           ; BSR set to: 0
 18725                           ;lcd.h: 45: PORTDbits.RD3 = 1;
 18726  007322  8683               	bsf	3971,3,c	;volatile
 18727  007324  D002               	goto	l614
 18728  007326                     l613:
 18729  007326  FFFF               	dw	65535	; assembler added errata NOP
 18730                           
 18731                           ; BSR set to: 0
 18732                           ;lcd.h: 46: else
 18733                           ;lcd.h: 47: PORTDbits.RD3 = 0;
 18734  007328  9683               	bcf	3971,3,c	;volatile
 18735  00732A                     l614:
 18736  00732A  FFFF               	dw	65535	; assembler added errata NOP
 18737                           
 18738                           ; BSR set to: 0
 18739                           ;lcd.h: 49: if (a & 4)
 18740                           
 18741                           ; BSR set to: 0
 18742  00732C  A580               	btfss	Lcd_Port@a& (0+255),2,b
 18743  00732E  D002               	goto	l615
 18744                           
 18745                           ; BSR set to: 0
 18746                           ;lcd.h: 50: PORTDbits.RD4 = 1;
 18747  007330  8883               	bsf	3971,4,c	;volatile
 18748  007332  D002               	goto	l616
 18749  007334                     l615:
 18750  007334  FFFF               	dw	65535	; assembler added errata NOP
 18751                           
 18752                           ; BSR set to: 0
 18753                           ;lcd.h: 51: else
 18754                           ;lcd.h: 52: PORTDbits.RD4 = 0;
 18755  007336  9883               	bcf	3971,4,c	;volatile
 18756  007338                     l616:
 18757  007338  FFFF               	dw	65535	; assembler added errata NOP
 18758                           
 18759                           ; BSR set to: 0
 18760                           ;lcd.h: 54: if (a & 8)
 18761                           
 18762                           ; BSR set to: 0
 18763  00733A  A780               	btfss	Lcd_Port@a& (0+255),3,b
 18764  00733C  D002               	goto	l617
 18765                           
 18766                           ; BSR set to: 0
 18767                           ;lcd.h: 55: PORTDbits.RD5 = 1;
 18768  00733E  8A83               	bsf	3971,5,c	;volatile
 18769  007340  D002               	goto	l618
 18770  007342                     l617:
 18771  007342  FFFF               	dw	65535	; assembler added errata NOP
 18772                           
 18773                           ; BSR set to: 0
 18774                           ;lcd.h: 56: else
 18775                           ;lcd.h: 57: PORTDbits.RD5 = 0;
 18776  007344  9A83               	bcf	3971,5,c	;volatile
 18777  007346                     l618:
 18778  007346  FFFF               	dw	65535	; assembler added errata NOP
 18779                           
 18780                           ; BSR set to: 0
 18781                           
 18782                           ; BSR set to: 0
 18783  007348  0012               	return		;funcret
 18784  00734A  FFFF               	dw	65535	; errata NOP
 18785  00734C                     __end_of_Lcd_Port:
 18786                           	opt stack 0
 18787                           tosu	equ	0xFFF
 18788                           tosh	equ	0xFFE
 18789                           tosl	equ	0xFFD
 18790                           pclath	equ	0xFFA
 18791                           tblptru	equ	0xFF8
 18792                           tblptrh	equ	0xFF7
 18793                           tblptrl	equ	0xFF6
 18794                           tablat	equ	0xFF5
 18795                           prodh	equ	0xFF4
 18796                           prodl	equ	0xFF3
 18797                           intcon	equ	0xFF2
 18798                           indf0	equ	0xFEF
 18799                           postinc0	equ	0xFEE
 18800                           fsr0h	equ	0xFEA
 18801                           fsr0l	equ	0xFE9
 18802                           wreg	equ	0xFE8
 18803                           postdec1	equ	0xFE5
 18804                           fsr1l	equ	0xFE1
 18805                           indf2	equ	0xFDF
 18806                           postinc2	equ	0xFDE
 18807                           postdec2	equ	0xFDD
 18808                           fsr2h	equ	0xFDA
 18809                           fsr2l	equ	0xFD9
 18810                           status	equ	0xFD8
 18811                           
 18812 ;; *************** function _I2C_Master_Init *****************
 18813 ;; Defined at:
 18814 ;;		line 13 in file "I2C.c"
 18815 ;; Parameters:    Size  Location     Type
 18816 ;;  c               4   13[BANK0 ] const unsigned long 
 18817 ;; Auto vars:     Size  Location     Type
 18818 ;;		None
 18819 ;; Return value:  Size  Location     Type
 18820 ;;                  1    wreg      void 
 18821 ;; Registers used:
 18822 ;;		wreg, status,2, status,0, cstack
 18823 ;; Tracked objects:
 18824 ;;		On entry : 0/0
 18825 ;;		On exit  : 0/0
 18826 ;;		Unchanged: 0/0
 18827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18828 ;;      Params:         0       4       0       0       0       0       0
 18829 ;;      Locals:         0       0       0       0       0       0       0
 18830 ;;      Temps:          0       4       0       0       0       0       0
 18831 ;;      Totals:         0       8       0       0       0       0       0
 18832 ;;Total ram usage:        8 bytes
 18833 ;; Hardware stack levels used:    1
 18834 ;; Hardware stack levels required when called:    7
 18835 ;; This function calls:
 18836 ;;		___lldiv
 18837 ;; This function is called by:
 18838 ;;		_main
 18839 ;; This function uses a non-reentrant model
 18840 ;;
 18841                           
 18842                           	psect	text71
 18843  007630                     __ptext71:
 18844                           	opt stack 0
 18845  007630                     _I2C_Master_Init:
 18846                           	opt stack 0
 18847  007630  FFFF               	dw	65535	; assembler added errata NOP
 18848                           
 18849                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 18850                           
 18851                           ; BSR set to: 0
 18852                           ;incstack = 0
 18853  007632  0E28               	movlw	40
 18854  007634  6EC6               	movwf	4038,c	;volatile
 18855                           
 18856                           ;I2C.c: 15: SSPCON2 = 0;
 18857  007636  0E00               	movlw	0
 18858  007638  6EC5               	movwf	4037,c	;volatile
 18859                           
 18860                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 18861  00763A  0E00               	movlw	0
 18862  00763C  0100               	movlb	0	; () banked
 18863  00763E  6F80               	movwf	___lldiv@dividend& (0+255),b
 18864  007640  0E12               	movlw	18
 18865  007642  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 18866  007644  0E7A               	movlw	122
 18867  007646  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 18868  007648  0E00               	movlw	0
 18869  00764A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 18870  00764C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 18871  007650  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 18872  007654  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 18873  007658  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 18874  00765C  0E02               	movlw	2
 18875  00765E                     u8735:
 18876  00765E  FFFF               	dw	65535	; assembler added errata NOP
 18877  007660  90D8               	bcf	status,0,c
 18878  007662  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 18879  007664  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 18880  007666  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 18881  007668  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 18882  00766A  2EE8               	decfsz	wreg,f,c
 18883  00766C  D7F8               	goto	u8735
 18884  00766E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 18885  007672  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 18886  007676  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 18887  00767A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 18888  00767E  ECBB  F03C         	call	___lldiv	;wreg free
 18889  007682  0100               	movlb	0	; () banked
 18890  007684  0580               	decf	?___lldiv& (0+255),w,b
 18891  007686  6EC8               	movwf	4040,c	;volatile
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;I2C.c: 17: SSPSTAT = 0;
 18895  007688  0E00               	movlw	0
 18896  00768A  6EC7               	movwf	4039,c	;volatile
 18897                           
 18898                           ; BSR set to: 0
 18899                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 18900  00768C  8694               	bsf	3988,3,c	;volatile
 18901                           
 18902                           ; BSR set to: 0
 18903                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 18904  00768E  8894               	bsf	3988,4,c	;volatile
 18905                           
 18906                           ; BSR set to: 0
 18907  007690  0012               	return		;funcret
 18908  007692  FFFF               	dw	65535	; errata NOP
 18909  007694                     __end_of_I2C_Master_Init:
 18910                           	opt stack 0
 18911                           tosu	equ	0xFFF
 18912                           tosh	equ	0xFFE
 18913                           tosl	equ	0xFFD
 18914                           pclath	equ	0xFFA
 18915                           tblptru	equ	0xFF8
 18916                           tblptrh	equ	0xFF7
 18917                           tblptrl	equ	0xFF6
 18918                           tablat	equ	0xFF5
 18919                           prodh	equ	0xFF4
 18920                           prodl	equ	0xFF3
 18921                           intcon	equ	0xFF2
 18922                           indf0	equ	0xFEF
 18923                           postinc0	equ	0xFEE
 18924                           fsr0h	equ	0xFEA
 18925                           fsr0l	equ	0xFE9
 18926                           wreg	equ	0xFE8
 18927                           postdec1	equ	0xFE5
 18928                           fsr1l	equ	0xFE1
 18929                           indf2	equ	0xFDF
 18930                           postinc2	equ	0xFDE
 18931                           postdec2	equ	0xFDD
 18932                           fsr2h	equ	0xFDA
 18933                           fsr2l	equ	0xFD9
 18934                           status	equ	0xFD8
 18935                           
 18936 ;; *************** function ___lldiv *****************
 18937 ;; Defined at:
 18938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 18939 ;; Parameters:    Size  Location     Type
 18940 ;;  dividend        4    0[BANK0 ] unsigned long 
 18941 ;;  divisor         4    4[BANK0 ] unsigned long 
 18942 ;; Auto vars:     Size  Location     Type
 18943 ;;  quotient        4    8[BANK0 ] unsigned long 
 18944 ;;  counter         1   12[BANK0 ] unsigned char 
 18945 ;; Return value:  Size  Location     Type
 18946 ;;                  4    0[BANK0 ] unsigned long 
 18947 ;; Registers used:
 18948 ;;		wreg, status,2, status,0
 18949 ;; Tracked objects:
 18950 ;;		On entry : 0/0
 18951 ;;		On exit  : 0/0
 18952 ;;		Unchanged: 0/0
 18953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18954 ;;      Params:         0       8       0       0       0       0       0
 18955 ;;      Locals:         0       5       0       0       0       0       0
 18956 ;;      Temps:          0       0       0       0       0       0       0
 18957 ;;      Totals:         0      13       0       0       0       0       0
 18958 ;;Total ram usage:       13 bytes
 18959 ;; Hardware stack levels used:    1
 18960 ;; Hardware stack levels required when called:    6
 18961 ;; This function calls:
 18962 ;;		Nothing
 18963 ;; This function is called by:
 18964 ;;		_I2C_Master_Init
 18965 ;; This function uses a non-reentrant model
 18966 ;;
 18967                           
 18968                           	psect	text72
 18969  007976                     __ptext72:
 18970                           	opt stack 0
 18971  007976                     ___lldiv:
 18972                           	opt stack 0
 18973  007976  FFFF               	dw	65535	; assembler added errata NOP
 18974                           
 18975                           ; BSR set to: 0
 18976                           ;incstack = 0
 18977  007978  0E00               	movlw	0
 18978  00797A  0100               	movlb	0	; () banked
 18979  00797C  6F88               	movwf	___lldiv@quotient& (0+255),b
 18980  00797E  0E00               	movlw	0
 18981  007980  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 18982  007982  0E00               	movlw	0
 18983  007984  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 18984  007986  0E00               	movlw	0
 18985  007988  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 18986                           
 18987                           ; BSR set to: 0
 18988  00798A  5184               	movf	___lldiv@divisor& (0+255),w,b
 18989  00798C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 18990  00798E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 18991  007990  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 18992  007992  B4D8               	btfsc	status,2,c
 18993  007994  D02E               	goto	l1480
 18994                           
 18995                           ; BSR set to: 0
 18996  007996  0E01               	movlw	1
 18997  007998  6F8C               	movwf	___lldiv@counter& (0+255),b
 18998  00799A  D007               	goto	l1475
 18999  00799C  FFFF               	dw	65535	; assembler added errata NOP
 19000                           
 19001                           ; BSR set to: 0
 19002                           
 19003                           ; BSR set to: 0
 19004  00799E  90D8               	bcf	status,0,c
 19005  0079A0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 19006  0079A2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19007  0079A4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19008  0079A6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19009  0079A8  2B8C               	incf	___lldiv@counter& (0+255),f,b
 19010  0079AA                     l1475:
 19011  0079AA  FFFF               	dw	65535	; assembler added errata NOP
 19012                           
 19013                           ; BSR set to: 0
 19014                           
 19015                           ; BSR set to: 0
 19016  0079AC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19017  0079AE  D7F6               	goto	l1476
 19018  0079B0                     u6750:
 19019  0079B0  FFFF               	dw	65535	; assembler added errata NOP
 19020                           
 19021                           ; BSR set to: 0
 19022                           
 19023                           ; BSR set to: 0
 19024                           
 19025                           ; BSR set to: 0
 19026  0079B2  90D8               	bcf	status,0,c
 19027  0079B4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 19028  0079B6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19029  0079B8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19030  0079BA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19031                           
 19032                           ; BSR set to: 0
 19033  0079BC  5184               	movf	___lldiv@divisor& (0+255),w,b
 19034  0079BE  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 19035  0079C0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19036  0079C2  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19037  0079C4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19038  0079C6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19039  0079C8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19040  0079CA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19041  0079CC  A0D8               	btfss	status,0,c
 19042  0079CE  D009               	goto	l1479
 19043                           
 19044                           ; BSR set to: 0
 19045  0079D0  5184               	movf	___lldiv@divisor& (0+255),w,b
 19046  0079D2  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 19047  0079D4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19048  0079D6  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19049  0079D8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19050  0079DA  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19051  0079DC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19052  0079DE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19053                           
 19054                           ; BSR set to: 0
 19055  0079E0  8188               	bsf	___lldiv@quotient& (0+255),0,b
 19056  0079E2                     l1479:
 19057  0079E2  FFFF               	dw	65535	; assembler added errata NOP
 19058                           
 19059                           ; BSR set to: 0
 19060                           
 19061                           ; BSR set to: 0
 19062  0079E4  90D8               	bcf	status,0,c
 19063  0079E6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19064  0079E8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19065  0079EA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19066  0079EC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 19067                           
 19068                           ; BSR set to: 0
 19069  0079EE  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 19070  0079F0  D7DF               	goto	u6750
 19071  0079F2                     l1480:
 19072  0079F2  FFFF               	dw	65535	; assembler added errata NOP
 19073                           
 19074                           ; BSR set to: 0
 19075                           
 19076                           ; BSR set to: 0
 19077  0079F4  C088  F080         	movff	___lldiv@quotient,?___lldiv
 19078  0079F8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 19079  0079FC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 19080  007A00  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 19081                           
 19082                           ; BSR set to: 0
 19083  007A04  0012               	return		;funcret
 19084  007A06  FFFF               	dw	65535	; errata NOP
 19085  007A08                     __end_of___lldiv:
 19086                           	opt stack 0
 19087                           tosu	equ	0xFFF
 19088                           tosh	equ	0xFFE
 19089                           tosl	equ	0xFFD
 19090                           pclath	equ	0xFFA
 19091                           tblptru	equ	0xFF8
 19092                           tblptrh	equ	0xFF7
 19093                           tblptrl	equ	0xFF6
 19094                           tablat	equ	0xFF5
 19095                           prodh	equ	0xFF4
 19096                           prodl	equ	0xFF3
 19097                           intcon	equ	0xFF2
 19098                           indf0	equ	0xFEF
 19099                           postinc0	equ	0xFEE
 19100                           fsr0h	equ	0xFEA
 19101                           fsr0l	equ	0xFE9
 19102                           wreg	equ	0xFE8
 19103                           postdec1	equ	0xFE5
 19104                           fsr1l	equ	0xFE1
 19105                           indf2	equ	0xFDF
 19106                           postinc2	equ	0xFDE
 19107                           postdec2	equ	0xFDD
 19108                           fsr2h	equ	0xFDA
 19109                           fsr2l	equ	0xFD9
 19110                           status	equ	0xFD8
 19111                           
 19112 ;; *************** function _TIMER *****************
 19113 ;; Defined at:
 19114 ;;		line 32 in file "Main.c"
 19115 ;; Parameters:    Size  Location     Type
 19116 ;;		None
 19117 ;; Auto vars:     Size  Location     Type
 19118 ;;  c               1   66[COMRAM] unsigned char 
 19119 ;; Return value:  Size  Location     Type
 19120 ;;                  1    wreg      void 
 19121 ;; Registers used:
 19122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19123 ;; Tracked objects:
 19124 ;;		On entry : 0/0
 19125 ;;		On exit  : 0/0
 19126 ;;		Unchanged: 0/0
 19127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19128 ;;      Params:         0       0       0       0       0       0       0
 19129 ;;      Locals:         1       0       0       0       0       0       0
 19130 ;;      Temps:         18       0       0       0       0       0       0
 19131 ;;      Totals:        19       0       0       0       0       0       0
 19132 ;;Total ram usage:       19 bytes
 19133 ;; Hardware stack levels used:    1
 19134 ;; Hardware stack levels required when called:    5
 19135 ;; This function calls:
 19136 ;;		_lerTransdutor
 19137 ;;		_readButtons
 19138 ;;		_timer
 19139 ;; This function is called by:
 19140 ;;		Interrupt level 2
 19141 ;; This function uses a non-reentrant model
 19142 ;;
 19143                           
 19144                           	psect	intcode
 19145  000008                     __pintcode:
 19146                           	opt stack 0
 19147  000008                     _TIMER:
 19148                           	opt stack 0
 19149  000008  FFFF               	dw	65535	; assembler added errata NOP
 19150                           
 19151                           ; BSR set to: 0
 19152                           ;incstack = 0
 19153  00000A  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19154  00000C  CFFA F031          	movff	pclath,??_TIMER
 19155  000010  CFFB F032          	movff	pclatu,??_TIMER+1
 19156  000014  CFE9 F033          	movff	fsr0l,??_TIMER+2
 19157  000018  CFEA F034          	movff	fsr0h,??_TIMER+3
 19158  00001C  CFE1 F035          	movff	fsr1l,??_TIMER+4
 19159  000020  CFE2 F036          	movff	fsr1h,??_TIMER+5
 19160  000024  CFD9 F037          	movff	fsr2l,??_TIMER+6
 19161  000028  CFDA F038          	movff	fsr2h,??_TIMER+7
 19162  00002C  CFF3 F039          	movff	prodl,??_TIMER+8
 19163  000030  CFF4 F03A          	movff	prodh,??_TIMER+9
 19164  000034  CFF6 F03B          	movff	tblptrl,??_TIMER+10
 19165  000038  CFF7 F03C          	movff	tblptrh,??_TIMER+11
 19166  00003C  CFF8 F03D          	movff	tblptru,??_TIMER+12
 19167  000040  CFF5 F03E          	movff	tablat,??_TIMER+13
 19168  000044  C07C  F03F         	movff	btemp,??_TIMER+14
 19169  000048  C07D  F040         	movff	btemp+1,??_TIMER+15
 19170  00004C  C07E  F041         	movff	btemp+2,??_TIMER+16
 19171  000050  C07F  F042         	movff	btemp+3,??_TIMER+17
 19172                           
 19173                           ;Main.c: 33: if (TMR0IF) {
 19174  000054  A4F2               	btfss	intcon,2,c	;volatile
 19175  000056  D01A               	goto	i2l889
 19176                           
 19177                           ;Main.c: 34: TMR0IF = 0x00;
 19178  000058  94F2               	bcf	intcon,2,c	;volatile
 19179                           
 19180                           ;Main.c: 35: TMR0H = 0x3C;
 19181  00005A  0E3C               	movlw	60
 19182  00005C  6ED7               	movwf	4055,c	;volatile
 19183                           
 19184                           ;Main.c: 36: TMR0L = 0xB0;
 19185  00005E  0EB0               	movlw	176
 19186  000060  6ED6               	movwf	4054,c	;volatile
 19187                           
 19188                           ;Main.c: 38: base_sec++;
 19189  000062  2A70               	incf	_base_sec,f,c
 19190                           
 19191                           ;Main.c: 40: if (base_sec == 5) {
 19192  000064  0E05               	movlw	5
 19193  000066  1870               	xorwf	_base_sec,w,c
 19194  000068  B4D8               	btfsc	status,2,c
 19195                           
 19196                           ;Main.c: 41: blinkk = ~blinkk;
 19197  00006A  1E67               	comf	_blinkk,f,c
 19198                           
 19199                           ;Main.c: 42: }
 19200                           ;Main.c: 44: lerTransdutor();
 19201  00006C  ECEB  F00F         	call	_lerTransdutor	;wreg free
 19202                           
 19203                           ;Main.c: 45: readButtons();
 19204  000070  ECF5  F03B         	call	_readButtons	;wreg free
 19205                           
 19206                           ;Main.c: 47: if (base_sec > 9) {
 19207  000074  0E09               	movlw	9
 19208  000076  6470               	cpfsgt	_base_sec,c
 19209  000078  D009               	goto	i2l889
 19210                           
 19211                           ;Main.c: 48: base_sec = 0;
 19212  00007A  0E00               	movlw	0
 19213  00007C  6E70               	movwf	_base_sec,c
 19214                           
 19215                           ;Main.c: 49: blinkk = ~blinkk;
 19216  00007E  1E67               	comf	_blinkk,f,c
 19217                           
 19218                           ;Main.c: 50: timer();
 19219  000080  ECA4  F015         	call	_timer	;wreg free
 19220                           
 19221                           ;Main.c: 51: if (RCSTAbits.OERR) {
 19222  000084  A2AB               	btfss	4011,1,c	;volatile
 19223  000086  D002               	goto	i2l889
 19224                           
 19225                           ;Main.c: 52: RCSTAbits.CREN = 0;
 19226  000088  98AB               	bcf	4011,4,c	;volatile
 19227                           
 19228                           ;Main.c: 53: RCSTAbits.CREN = 1;
 19229  00008A  88AB               	bsf	4011,4,c	;volatile
 19230  00008C                     i2l889:
 19231  00008C  FFFF               	dw	65535	; assembler added errata NOP
 19232                           
 19233                           ;Main.c: 54: }
 19234                           ;Main.c: 55: }
 19235                           ;Main.c: 56: }
 19236                           ;Main.c: 57: if (RCIF) {
 19237  00008E  AA9E               	btfss	3998,5,c	;volatile
 19238  000090  D01B               	goto	i2l892
 19239                           
 19240                           ;Main.c: 58: char c = RCREG;
 19241  000092  CFAE F043          	movff	4014,TIMER@c	;volatile
 19242                           
 19243                           ;Main.c: 59: if (c != '\n' && c != '\r') {
 19244  000096  0E0A               	movlw	10
 19245  000098  1843               	xorwf	TIMER@c,w,c
 19246  00009A  B4D8               	btfsc	status,2,c
 19247  00009C  D00F               	goto	i2l891
 19248  00009E  0E0D               	movlw	13
 19249  0000A0  1843               	xorwf	TIMER@c,w,c
 19250  0000A2  B4D8               	btfsc	status,2,c
 19251  0000A4  D00B               	goto	i2l891
 19252                           
 19253                           ;Main.c: 60: bufferSerial[cbf++] = c;
 19254  0000A6  5066               	movf	_cbf,w,c
 19255  0000A8  0D01               	mullw	1
 19256  0000AA  0E00               	movlw	low _bufferSerial
 19257  0000AC  24F3               	addwf	prodl,w,c
 19258  0000AE  6ED9               	movwf	fsr2l,c
 19259  0000B0  0E01               	movlw	high _bufferSerial
 19260  0000B2  20F4               	addwfc	prodh,w,c
 19261  0000B4  6EDA               	movwf	fsr2h,c
 19262  0000B6  C043  FFDF         	movff	TIMER@c,indf2
 19263  0000BA  2A66               	incf	_cbf,f,c
 19264  0000BC                     i2l891:
 19265  0000BC  FFFF               	dw	65535	; assembler added errata NOP
 19266                           
 19267                           ;Main.c: 61: }
 19268                           ;Main.c: 62: if (cbf >= 60) cbf = 0;
 19269  0000BE  0E3B               	movlw	59
 19270  0000C0  6466               	cpfsgt	_cbf,c
 19271  0000C2  D002               	goto	i2l892
 19272  0000C4  0E00               	movlw	0
 19273  0000C6  6E66               	movwf	_cbf,c
 19274  0000C8                     i2l892:
 19275  0000C8  FFFF               	dw	65535	; assembler added errata NOP
 19276  0000CA  C042  F07F         	movff	??_TIMER+17,btemp+3
 19277  0000CE  C041  F07E         	movff	??_TIMER+16,btemp+2
 19278  0000D2  C040  F07D         	movff	??_TIMER+15,btemp+1
 19279  0000D6  C03F  F07C         	movff	??_TIMER+14,btemp
 19280  0000DA  C03E  FFF5         	movff	??_TIMER+13,tablat
 19281  0000DE  C03D  FFF8         	movff	??_TIMER+12,tblptru
 19282  0000E2  C03C  FFF7         	movff	??_TIMER+11,tblptrh
 19283  0000E6  C03B  FFF6         	movff	??_TIMER+10,tblptrl
 19284  0000EA  C03A  FFF4         	movff	??_TIMER+9,prodh
 19285  0000EE  C039  FFF3         	movff	??_TIMER+8,prodl
 19286  0000F2  C038  FFDA         	movff	??_TIMER+7,fsr2h
 19287  0000F6  C037  FFD9         	movff	??_TIMER+6,fsr2l
 19288  0000FA  C036  FFE2         	movff	??_TIMER+5,fsr1h
 19289  0000FE  C035  FFE1         	movff	??_TIMER+4,fsr1l
 19290  000102  C034  FFEA         	movff	??_TIMER+3,fsr0h
 19291  000106  C033  FFE9         	movff	??_TIMER+2,fsr0l
 19292  00010A  C032  FFFB         	movff	??_TIMER+1,pclatu
 19293  00010E  C031  FFFA         	movff	??_TIMER,pclath
 19294  000112  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19295  000114  0011               	retfie		f
 19296  000116  FFFF               	dw	65535	; errata NOP
 19297  000118                     __end_of_TIMER:
 19298                           	opt stack 0
 19299                           tosu	equ	0xFFF
 19300                           tosh	equ	0xFFE
 19301                           tosl	equ	0xFFD
 19302                           pclatu	equ	0xFFB
 19303                           pclath	equ	0xFFA
 19304                           tblptru	equ	0xFF8
 19305                           tblptrh	equ	0xFF7
 19306                           tblptrl	equ	0xFF6
 19307                           tablat	equ	0xFF5
 19308                           prodh	equ	0xFF4
 19309                           prodl	equ	0xFF3
 19310                           intcon	equ	0xFF2
 19311                           indf0	equ	0xFEF
 19312                           postinc0	equ	0xFEE
 19313                           fsr0h	equ	0xFEA
 19314                           fsr0l	equ	0xFE9
 19315                           wreg	equ	0xFE8
 19316                           postdec1	equ	0xFE5
 19317                           fsr1h	equ	0xFE2
 19318                           fsr1l	equ	0xFE1
 19319                           indf2	equ	0xFDF
 19320                           postinc2	equ	0xFDE
 19321                           postdec2	equ	0xFDD
 19322                           fsr2h	equ	0xFDA
 19323                           fsr2l	equ	0xFD9
 19324                           status	equ	0xFD8
 19325                           
 19326 ;; *************** function _timer *****************
 19327 ;; Defined at:
 19328 ;;		line 9 in file "temporizador.h"
 19329 ;; Parameters:    Size  Location     Type
 19330 ;;		None
 19331 ;; Auto vars:     Size  Location     Type
 19332 ;;		None
 19333 ;; Return value:  Size  Location     Type
 19334 ;;                  1    wreg      void 
 19335 ;; Registers used:
 19336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19337 ;; Tracked objects:
 19338 ;;		On entry : 0/0
 19339 ;;		On exit  : 0/0
 19340 ;;		Unchanged: 0/0
 19341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19342 ;;      Params:         0       0       0       0       0       0       0
 19343 ;;      Locals:         8       0       0       0       0       0       0
 19344 ;;      Temps:          0       0       0       0       0       0       0
 19345 ;;      Totals:         8       0       0       0       0       0       0
 19346 ;;Total ram usage:        8 bytes
 19347 ;; Hardware stack levels used:    1
 19348 ;; Hardware stack levels required when called:    4
 19349 ;; This function calls:
 19350 ;;		_writeEEPROM16_ext
 19351 ;;		i2_RTC_Init
 19352 ;;		i2_getDS1307TimeDate
 19353 ;;		i2_writeEEPROM_ext
 19354 ;; This function is called by:
 19355 ;;		_TIMER
 19356 ;; This function uses a non-reentrant model
 19357 ;;
 19358                           
 19359                           	psect	text74
 19360  002B48                     __ptext74:
 19361                           	opt stack 0
 19362  002B48                     _timer:
 19363                           	opt stack 0
 19364  002B48  FFFF               	dw	65535	; assembler added errata NOP
 19365                           
 19366                           ;temporizador.h: 11: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerifi
      +                          carSinal);
 19367                           
 19368                           ;incstack = 0
 19369  002B4A  0100               	movlb	0	; () banked
 19370  002B4C  51FE               	movf	_timerVerificarSinal& (0+255),w,b
 19371  002B4E  B4D8               	btfsc	status,2,c
 19372  002B50  D005               	goto	i2l568
 19373                           
 19374                           ; BSR set to: 0
 19375  002B52  07FE               	decf	_timerVerificarSinal& (0+255),f,b
 19376  002B54  C0FE  F009         	movff	_timerVerificarSinal,_timer$1320
 19377  002B58  6A0A               	clrf	_timer$1320+1,c
 19378  002B5A  D005               	goto	i2l570
 19379  002B5C                     i2l568:
 19380  002B5C  FFFF               	dw	65535	; assembler added errata NOP
 19381                           
 19382                           ; BSR set to: 0
 19383                           
 19384                           ; BSR set to: 0
 19385  002B5E  0E00               	movlw	0
 19386  002B60  6E0A               	movwf	_timer$1320+1,c
 19387  002B62  0E00               	movlw	0
 19388  002B64  6E09               	movwf	_timer$1320,c
 19389  002B66                     i2l570:
 19390  002B66  FFFF               	dw	65535	; assembler added errata NOP
 19391                           
 19392                           ; BSR set to: 0
 19393                           
 19394                           ; BSR set to: 0
 19395  002B68  C009  F0FE         	movff	_timer$1320,_timerVerificarSinal
 19396                           
 19397                           ;temporizador.h: 12: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEt
      +                          apaComunicacao);
 19398  002B6C  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 19399  002B6E  B4D8               	btfsc	status,2,c
 19400  002B70  D005               	goto	i2l572
 19401                           
 19402                           ; BSR set to: 0
 19403  002B72  07F5               	decf	_timerEtapaComunicacao& (0+255),f,b
 19404  002B74  C0F5  F00B         	movff	_timerEtapaComunicacao,_timer$1321
 19405  002B78  6A0C               	clrf	_timer$1321+1,c
 19406  002B7A  D005               	goto	i2l574
 19407  002B7C                     i2l572:
 19408  002B7C  FFFF               	dw	65535	; assembler added errata NOP
 19409                           
 19410                           ; BSR set to: 0
 19411                           
 19412                           ; BSR set to: 0
 19413  002B7E  0E00               	movlw	0
 19414  002B80  6E0C               	movwf	_timer$1321+1,c
 19415  002B82  0E00               	movlw	0
 19416  002B84  6E0B               	movwf	_timer$1321,c
 19417  002B86                     i2l574:
 19418  002B86  FFFF               	dw	65535	; assembler added errata NOP
 19419                           
 19420                           ; BSR set to: 0
 19421                           
 19422                           ; BSR set to: 0
 19423  002B88  C00B  F0F5         	movff	_timer$1321,_timerEtapaComunicacao
 19424                           
 19425                           ; BSR set to: 0
 19426                           ;temporizador.h: 13: timerTesteBombas = (timerTesteBombas <= 0 ? 0 : --timerTesteBombas)
      +                          ;
 19427  002B8C  51D9               	movf	_timerTesteBombas& (0+255),w,b
 19428  002B8E  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 19429  002B90  B4D8               	btfsc	status,2,c
 19430  002B92  D008               	goto	i2l576
 19431                           
 19432                           ; BSR set to: 0
 19433  002B94  07D9               	decf	_timerTesteBombas& (0+255),f,b
 19434  002B96  A0D8               	btfss	status,0,c
 19435  002B98  07DA               	decf	(_timerTesteBombas+1)& (0+255),f,b
 19436  002B9A  C0D9  F0D9         	movff	_timerTesteBombas,_timerTesteBombas
 19437  002B9E  C0DA  F0DA         	movff	_timerTesteBombas+1,_timerTesteBombas+1
 19438  002BA2  D005               	goto	i2l578
 19439  002BA4                     i2l576:
 19440  002BA4  FFFF               	dw	65535	; assembler added errata NOP
 19441                           
 19442                           ; BSR set to: 0
 19443                           
 19444                           ; BSR set to: 0
 19445  002BA6  0E00               	movlw	0
 19446  002BA8  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 19447  002BAA  0E00               	movlw	0
 19448  002BAC  6FD9               	movwf	_timerTesteBombas& (0+255),b
 19449  002BAE                     i2l578:
 19450  002BAE  FFFF               	dw	65535	; assembler added errata NOP
 19451                           
 19452                           ; BSR set to: 0
 19453                           ;temporizador.h: 14: timerReenvioSMS = (timerReenvioSMS <= 0 ? 0 : --timerReenvioSMS);
 19454  002BB0  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 19455  002BB2  B4D8               	btfsc	status,2,c
 19456  002BB4  D005               	goto	i2l580
 19457                           
 19458                           ; BSR set to: 0
 19459  002BB6  07F6               	decf	_timerReenvioSMS& (0+255),f,b
 19460  002BB8  C0F6  F00D         	movff	_timerReenvioSMS,_timer$1322
 19461  002BBC  6A0E               	clrf	_timer$1322+1,c
 19462  002BBE  D005               	goto	i2l582
 19463  002BC0                     i2l580:
 19464  002BC0  FFFF               	dw	65535	; assembler added errata NOP
 19465                           
 19466                           ; BSR set to: 0
 19467                           
 19468                           ; BSR set to: 0
 19469  002BC2  0E00               	movlw	0
 19470  002BC4  6E0E               	movwf	_timer$1322+1,c
 19471  002BC6  0E00               	movlw	0
 19472  002BC8  6E0D               	movwf	_timer$1322,c
 19473  002BCA                     i2l582:
 19474  002BCA  FFFF               	dw	65535	; assembler added errata NOP
 19475                           
 19476                           ; BSR set to: 0
 19477                           
 19478                           ; BSR set to: 0
 19479  002BCC  C00D  F0F6         	movff	_timer$1322,_timerReenvioSMS
 19480                           
 19481                           ;temporizador.h: 15: timerTrocarTextoLcd = (timerTrocarTextoLcd <= 0 ? 0 : --timerTrocar
      +                          TextoLcd);
 19482  002BD0  5074               	movf	_timerTrocarTextoLcd,w,c
 19483  002BD2  B4D8               	btfsc	status,2,c
 19484  002BD4  D005               	goto	i2l584
 19485                           
 19486                           ; BSR set to: 0
 19487  002BD6  0674               	decf	_timerTrocarTextoLcd,f,c
 19488  002BD8  C074  F00F         	movff	_timerTrocarTextoLcd,_timer$1323
 19489  002BDC  6A10               	clrf	_timer$1323+1,c
 19490  002BDE  D005               	goto	i2l586
 19491  002BE0                     i2l584:
 19492  002BE0  FFFF               	dw	65535	; assembler added errata NOP
 19493                           
 19494                           ; BSR set to: 0
 19495                           
 19496                           ; BSR set to: 0
 19497  002BE2  0E00               	movlw	0
 19498  002BE4  6E10               	movwf	_timer$1323+1,c
 19499  002BE6  0E00               	movlw	0
 19500  002BE8  6E0F               	movwf	_timer$1323,c
 19501  002BEA                     i2l586:
 19502  002BEA  FFFF               	dw	65535	; assembler added errata NOP
 19503                           
 19504                           ; BSR set to: 0
 19505                           
 19506                           ; BSR set to: 0
 19507  002BEC  C00F  F074         	movff	_timer$1323,_timerTrocarTextoLcd
 19508                           
 19509                           ;temporizador.h: 17: if(!timerTrocarTextoLcd){
 19510  002BF0  5074               	movf	_timerTrocarTextoLcd,w,c
 19511  002BF2  A4D8               	btfss	status,2,c
 19512  002BF4  D00B               	goto	i2l587
 19513                           
 19514                           ; BSR set to: 0
 19515                           ;temporizador.h: 18: timerTrocarTextoLcd = 3;
 19516  002BF6  0E03               	movlw	3
 19517  002BF8  6E74               	movwf	_timerTrocarTextoLcd,c
 19518                           
 19519                           ;temporizador.h: 19: flagTexto = !flagTexto;
 19520  002BFA  5073               	movf	_flagTexto,w,c
 19521  002BFC  A4D8               	btfss	status,2,c
 19522  002BFE  D002               	goto	i2u752_40
 19523  002C00  0E01               	movlw	1
 19524  002C02  D002               	goto	i2u753_40
 19525  002C04                     i2u752_40:
 19526  002C04  FFFF               	dw	65535	; assembler added errata NOP
 19527  002C06  0E00               	movlw	0
 19528  002C08                     i2u753_40:
 19529  002C08  FFFF               	dw	65535	; assembler added errata NOP
 19530  002C0A  6E73               	movwf	_flagTexto,c
 19531  002C0C                     i2l587:
 19532  002C0C  FFFF               	dw	65535	; assembler added errata NOP
 19533                           
 19534                           ; BSR set to: 0
 19535                           ;temporizador.h: 20: }
 19536                           ;temporizador.h: 22: if (ajst_rtc) {
 19537  002C0E  5068               	movf	_ajst_rtc,w,c
 19538  002C10  A4D8               	btfss	status,2,c
 19539  002C12  D056               	goto	i2l593
 19540                           
 19541                           ; BSR set to: 0
 19542                           ;temporizador.h: 24: }
 19543                           ;temporizador.h: 25: _sec++;
 19544                           
 19545                           ; BSR set to: 0
 19546                           
 19547                           ; BSR set to: 0
 19548                           ;temporizador.h: 23: return;
 19549  002C14  2BEE               	incf	__sec& (0+255),f,b
 19550                           
 19551                           ; BSR set to: 0
 19552                           ;temporizador.h: 26: if (_sec > 59) {
 19553  002C16  0E3B               	movlw	59
 19554  002C18  65EE               	cpfsgt	__sec& (0+255),b
 19555  002C1A  D014               	goto	i2l592
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;temporizador.h: 27: _sec = 0;
 19559  002C1C  0E00               	movlw	0
 19560  002C1E  6FEE               	movwf	__sec& (0+255),b
 19561                           
 19562                           ; BSR set to: 0
 19563                           ;temporizador.h: 28: _min++;
 19564  002C20  2BED               	incf	__min& (0+255),f,b
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;temporizador.h: 29: if (_min > 59) {
 19568  002C22  0E3B               	movlw	59
 19569  002C24  65ED               	cpfsgt	__min& (0+255),b
 19570  002C26  D00E               	goto	i2l592
 19571                           
 19572                           ; BSR set to: 0
 19573                           ;temporizador.h: 30: _min = 0;
 19574  002C28  0E00               	movlw	0
 19575  002C2A  6FED               	movwf	__min& (0+255),b
 19576                           
 19577                           ; BSR set to: 0
 19578                           ;temporizador.h: 31: _hor++;
 19579  002C2C  2BEC               	incf	__hor& (0+255),f,b
 19580                           
 19581                           ; BSR set to: 0
 19582                           ;temporizador.h: 32: if (_hor > 23) {
 19583  002C2E  0E17               	movlw	23
 19584  002C30  65EC               	cpfsgt	__hor& (0+255),b
 19585  002C32  D008               	goto	i2l592
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;temporizador.h: 33: _hor = 0;
 19589  002C34  0E00               	movlw	0
 19590  002C36  6FEC               	movwf	__hor& (0+255),b
 19591                           
 19592                           ; BSR set to: 0
 19593                           ;temporizador.h: 34: dias_restante_teste++;
 19594  002C38  2BE7               	incf	_dias_restante_teste& (0+255),f,b
 19595                           
 19596                           ; BSR set to: 0
 19597                           ;temporizador.h: 35: writeEEPROM_ext(10, dias_restante_teste);
 19598  002C3A  C0E7  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 19599  002C3E  0E0A               	movlw	10
 19600  002C40  EC88  F038         	call	i2_writeEEPROM_ext
 19601  002C44                     i2l592:
 19602  002C44  FFFF               	dw	65535	; assembler added errata NOP
 19603                           
 19604                           ;temporizador.h: 36: }
 19605                           ;temporizador.h: 37: }
 19606                           ;temporizador.h: 38: }
 19607                           ;temporizador.h: 40: if (rtc.min != _min) {
 19608  002C46  0100               	movlb	0	; () banked
 19609  002C48  51ED               	movf	__min& (0+255),w,b
 19610  002C4A  1877               	xorwf	_rtc+2,w,c
 19611  002C4C  B4D8               	btfsc	status,2,c
 19612  002C4E  D038               	goto	i2l593
 19613                           
 19614                           ; BSR set to: 0
 19615                           ;temporizador.h: 42: if (flagEstacionariaLigada) {
 19616  002C50  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 19617  002C52  B4D8               	btfsc	status,2,c
 19618  002C54  D009               	goto	i2l594
 19619                           
 19620                           ; BSR set to: 0
 19621                           ;temporizador.h: 43: horimetro++;
 19622  002C56  4A4F               	infsnz	_horimetro,f,c
 19623  002C58  2A50               	incf	_horimetro+1,f,c
 19624                           
 19625                           ; BSR set to: 0
 19626                           ;temporizador.h: 44: writeEEPROM16_ext(8, horimetro);
 19627  002C5A  C04F  F006         	movff	_horimetro,writeEEPROM16_ext@data
 19628  002C5E  C050  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 19629  002C62  0E08               	movlw	8
 19630  002C64  ECCA  F036         	call	_writeEEPROM16_ext
 19631  002C68                     i2l594:
 19632  002C68  FFFF               	dw	65535	; assembler added errata NOP
 19633                           
 19634                           ;temporizador.h: 45: }
 19635                           ;temporizador.h: 46: getDS1307TimeDate(&rtc);
 19636  002C6A  0E75               	movlw	low _rtc
 19637  002C6C  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 19638  002C6E  0E00               	movlw	high _rtc
 19639  002C70  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 19640  002C72  ECEF  F019         	call	i2_getDS1307TimeDate	;wreg free
 19641                           
 19642                           ;temporizador.h: 47: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 19643  002C76  0E3C               	movlw	60
 19644  002C78  6476               	cpfsgt	_rtc+1,c
 19645  002C7A  D015               	goto	i2l595
 19646  002C7C  0E3C               	movlw	60
 19647  002C7E  6477               	cpfsgt	_rtc+2,c
 19648  002C80  D012               	goto	i2l595
 19649  002C82  0E18               	movlw	24
 19650  002C84  6478               	cpfsgt	_rtc+3,c
 19651  002C86  D00F               	goto	i2l595
 19652                           
 19653                           ;temporizador.h: 49: RTC_Init();
 19654  002C88  EC5A  F037         	call	i2_RTC_Init	;wreg free
 19655                           
 19656                           ;temporizador.h: 50: rtc.sec = _sec;
 19657  002C8C  C0EE  F076         	movff	__sec,_rtc+1
 19658                           
 19659                           ;temporizador.h: 51: rtc.min = _min;
 19660  002C90  C0ED  F077         	movff	__min,_rtc+2
 19661                           
 19662                           ;temporizador.h: 52: rtc.hour = _hor;
 19663  002C94  C0EC  F078         	movff	__hor,_rtc+3
 19664                           
 19665                           ;temporizador.h: 53: rtc.date = _dia;
 19666  002C98  C0EB  F079         	movff	__dia,_rtc+4
 19667                           
 19668                           ;temporizador.h: 54: rtc.month = _mes;
 19669  002C9C  C0EA  F07A         	movff	__mes,_rtc+5
 19670                           
 19671                           ;temporizador.h: 55: rtc.year = _ano;
 19672  002CA0  C0E9  F07B         	movff	__ano,_rtc+6
 19673                           
 19674                           ;temporizador.h: 56: return;
 19675  002CA4  D00D               	goto	i2l593
 19676  002CA6                     i2l595:
 19677  002CA6  FFFF               	dw	65535	; assembler added errata NOP
 19678                           
 19679                           ;temporizador.h: 57: }
 19680                           ;temporizador.h: 58: _sec = rtc.sec;
 19681  002CA8  C076  F0EE         	movff	_rtc+1,__sec
 19682                           
 19683                           ;temporizador.h: 59: _min = rtc.min;
 19684  002CAC  C077  F0ED         	movff	_rtc+2,__min
 19685                           
 19686                           ;temporizador.h: 60: _hor = rtc.hour;
 19687  002CB0  C078  F0EC         	movff	_rtc+3,__hor
 19688                           
 19689                           ;temporizador.h: 61: _dia = rtc.date;
 19690  002CB4  C079  F0EB         	movff	_rtc+4,__dia
 19691                           
 19692                           ;temporizador.h: 62: _mes = rtc.month;
 19693  002CB8  C07A  F0EA         	movff	_rtc+5,__mes
 19694                           
 19695                           ;temporizador.h: 63: _ano = rtc.year;
 19696  002CBC  C07B  F0E9         	movff	_rtc+6,__ano
 19697  002CC0                     i2l593:
 19698  002CC0  FFFF               	dw	65535	; assembler added errata NOP
 19699  002CC2  0012               	return		;funcret
 19700  002CC4  FFFF               	dw	65535	; errata NOP
 19701  002CC6                     __end_of_timer:
 19702                           	opt stack 0
 19703                           tosu	equ	0xFFF
 19704                           tosh	equ	0xFFE
 19705                           tosl	equ	0xFFD
 19706                           pclatu	equ	0xFFB
 19707                           pclath	equ	0xFFA
 19708                           tblptru	equ	0xFF8
 19709                           tblptrh	equ	0xFF7
 19710                           tblptrl	equ	0xFF6
 19711                           tablat	equ	0xFF5
 19712                           prodh	equ	0xFF4
 19713                           prodl	equ	0xFF3
 19714                           intcon	equ	0xFF2
 19715                           indf0	equ	0xFEF
 19716                           postinc0	equ	0xFEE
 19717                           fsr0h	equ	0xFEA
 19718                           fsr0l	equ	0xFE9
 19719                           wreg	equ	0xFE8
 19720                           postdec1	equ	0xFE5
 19721                           fsr1h	equ	0xFE2
 19722                           fsr1l	equ	0xFE1
 19723                           indf2	equ	0xFDF
 19724                           postinc2	equ	0xFDE
 19725                           postdec2	equ	0xFDD
 19726                           fsr2h	equ	0xFDA
 19727                           fsr2l	equ	0xFD9
 19728                           status	equ	0xFD8
 19729                           
 19730 ;; *************** function i2_getDS1307TimeDate *****************
 19731 ;; Defined at:
 19732 ;;		line 52 in file "ds1307.h"
 19733 ;; Parameters:    Size  Location     Type
 19734 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 19735 ;;		 -> rtc(7), 
 19736 ;; Auto vars:     Size  Location     Type
 19737 ;;		None
 19738 ;; Return value:  Size  Location     Type
 19739 ;;                  1    wreg      void 
 19740 ;; Registers used:
 19741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19742 ;; Tracked objects:
 19743 ;;		On entry : 0/0
 19744 ;;		On exit  : 0/0
 19745 ;;		Unchanged: 0/0
 19746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19747 ;;      Params:         2       0       0       0       0       0       0
 19748 ;;      Locals:         0       0       0       0       0       0       0
 19749 ;;      Temps:          0       0       0       0       0       0       0
 19750 ;;      Totals:         2       0       0       0       0       0       0
 19751 ;;Total ram usage:        2 bytes
 19752 ;; Hardware stack levels used:    1
 19753 ;; Hardware stack levels required when called:    2
 19754 ;; This function calls:
 19755 ;;		i2_BCDtoDEC
 19756 ;;		i2_I2C_Read
 19757 ;;		i2_I2C_Restart
 19758 ;;		i2_I2C_Start
 19759 ;;		i2_I2C_Stop
 19760 ;;		i2_I2C_Write
 19761 ;; This function is called by:
 19762 ;;		_timer
 19763 ;; This function uses a non-reentrant model
 19764 ;;
 19765                           
 19766                           	psect	text75
 19767  0033DE                     __ptext75:
 19768                           	opt stack 0
 19769  0033DE                     i2_getDS1307TimeDate:
 19770                           	opt stack 0
 19771  0033DE  FFFF               	dw	65535	; assembler added errata NOP
 19772                           
 19773                           ;ds1307.h: 54: I2C_Start();
 19774                           
 19775                           ;incstack = 0
 19776  0033E0  EC4D  F036         	call	i2_I2C_Start	;wreg free
 19777                           
 19778                           ;ds1307.h: 55: I2C_Write(0xD0);
 19779  0033E4  0E00               	movlw	0
 19780  0033E6  6E03               	movwf	i2I2C_Write@d+1,c
 19781  0033E8  0ED0               	movlw	208
 19782  0033EA  6E02               	movwf	i2I2C_Write@d,c
 19783  0033EC  EC71  F036         	call	i2_I2C_Write	;wreg free
 19784                           
 19785                           ;ds1307.h: 56: I2C_Write(0x00);
 19786  0033F0  0E00               	movlw	0
 19787  0033F2  6E03               	movwf	i2I2C_Write@d+1,c
 19788  0033F4  0E00               	movlw	0
 19789  0033F6  6E02               	movwf	i2I2C_Write@d,c
 19790  0033F8  EC71  F036         	call	i2_I2C_Write	;wreg free
 19791                           
 19792                           ;ds1307.h: 57: I2C_Restart();
 19793  0033FC  EC59  F036         	call	i2_I2C_Restart	;wreg free
 19794                           
 19795                           ;ds1307.h: 58: I2C_Write(0xD1);
 19796  003400  0E00               	movlw	0
 19797  003402  6E03               	movwf	i2I2C_Write@d+1,c
 19798  003404  0ED1               	movlw	209
 19799  003406  6E02               	movwf	i2I2C_Write@d,c
 19800  003408  EC71  F036         	call	i2_I2C_Write	;wreg free
 19801                           
 19802                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 19803  00340C  EE20 F001          	lfsr	2,1
 19804  003410  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19805  003412  26D9               	addwf	fsr2l,f,c
 19806  003414  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19807  003416  22DA               	addwfc	fsr2h,f,c
 19808  003418  0E00               	movlw	0
 19809  00341A  6E03               	movwf	i2I2C_Read@a+1,c
 19810  00341C  0E01               	movlw	1
 19811  00341E  6E02               	movwf	i2I2C_Read@a,c
 19812  003420  EC8D  F037         	call	i2_I2C_Read	;wreg free
 19813  003424  5002               	movf	?i2_I2C_Read,w,c
 19814  003426  EC99  F036         	call	i2_BCDtoDEC
 19815  00342A  6EDF               	movwf	indf2,c
 19816                           
 19817                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 19818  00342C  EE20 F002          	lfsr	2,2
 19819  003430  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19820  003432  26D9               	addwf	fsr2l,f,c
 19821  003434  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19822  003436  22DA               	addwfc	fsr2h,f,c
 19823  003438  0E00               	movlw	0
 19824  00343A  6E03               	movwf	i2I2C_Read@a+1,c
 19825  00343C  0E01               	movlw	1
 19826  00343E  6E02               	movwf	i2I2C_Read@a,c
 19827  003440  EC8D  F037         	call	i2_I2C_Read	;wreg free
 19828  003444  5002               	movf	?i2_I2C_Read,w,c
 19829  003446  EC99  F036         	call	i2_BCDtoDEC
 19830  00344A  6EDF               	movwf	indf2,c
 19831                           
 19832                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 19833  00344C  EE20 F003          	lfsr	2,3
 19834  003450  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19835  003452  26D9               	addwf	fsr2l,f,c
 19836  003454  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19837  003456  22DA               	addwfc	fsr2h,f,c
 19838  003458  0E00               	movlw	0
 19839  00345A  6E03               	movwf	i2I2C_Read@a+1,c
 19840  00345C  0E01               	movlw	1
 19841  00345E  6E02               	movwf	i2I2C_Read@a,c
 19842  003460  EC8D  F037         	call	i2_I2C_Read	;wreg free
 19843  003464  5002               	movf	?i2_I2C_Read,w,c
 19844  003466  EC99  F036         	call	i2_BCDtoDEC
 19845  00346A  6EDF               	movwf	indf2,c
 19846                           
 19847                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 19848  00346C  0E00               	movlw	0
 19849  00346E  6E03               	movwf	i2I2C_Read@a+1,c
 19850  003470  0E01               	movlw	1
 19851  003472  6E02               	movwf	i2I2C_Read@a,c
 19852  003474  EC8D  F037         	call	i2_I2C_Read	;wreg free
 19853  003478  5002               	movf	?i2_I2C_Read,w,c
 19854  00347A  EC99  F036         	call	i2_BCDtoDEC
 19855  00347E  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 19856  003482  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 19857  003486  6EDF               	movwf	indf2,c
 19858                           
 19859                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 19860  003488  EE20 F004          	lfsr	2,4
 19861  00348C  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19862  00348E  26D9               	addwf	fsr2l,f,c
 19863  003490  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19864  003492  22DA               	addwfc	fsr2h,f,c
 19865  003494  0E00               	movlw	0
 19866  003496  6E03               	movwf	i2I2C_Read@a+1,c
 19867  003498  0E01               	movlw	1
 19868  00349A  6E02               	movwf	i2I2C_Read@a,c
 19869  00349C  EC8D  F037         	call	i2_I2C_Read	;wreg free
 19870  0034A0  5002               	movf	?i2_I2C_Read,w,c
 19871  0034A2  EC99  F036         	call	i2_BCDtoDEC
 19872  0034A6  6EDF               	movwf	indf2,c
 19873                           
 19874                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 19875  0034A8  EE20 F005          	lfsr	2,5
 19876  0034AC  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19877  0034AE  26D9               	addwf	fsr2l,f,c
 19878  0034B0  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19879  0034B2  22DA               	addwfc	fsr2h,f,c
 19880  0034B4  0E00               	movlw	0
 19881  0034B6  6E03               	movwf	i2I2C_Read@a+1,c
 19882  0034B8  0E01               	movlw	1
 19883  0034BA  6E02               	movwf	i2I2C_Read@a,c
 19884  0034BC  EC8D  F037         	call	i2_I2C_Read	;wreg free
 19885  0034C0  5002               	movf	?i2_I2C_Read,w,c
 19886  0034C2  EC99  F036         	call	i2_BCDtoDEC
 19887  0034C6  6EDF               	movwf	indf2,c
 19888                           
 19889                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 19890  0034C8  EE20 F006          	lfsr	2,6
 19891  0034CC  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19892  0034CE  26D9               	addwf	fsr2l,f,c
 19893  0034D0  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19894  0034D2  22DA               	addwfc	fsr2h,f,c
 19895  0034D4  0E00               	movlw	0
 19896  0034D6  6E03               	movwf	i2I2C_Read@a+1,c
 19897  0034D8  0E00               	movlw	0
 19898  0034DA  6E02               	movwf	i2I2C_Read@a,c
 19899  0034DC  EC8D  F037         	call	i2_I2C_Read	;wreg free
 19900  0034E0  5002               	movf	?i2_I2C_Read,w,c
 19901  0034E2  EC99  F036         	call	i2_BCDtoDEC
 19902  0034E6  6EDF               	movwf	indf2,c
 19903                           
 19904                           ;ds1307.h: 66: I2C_Stop();
 19905  0034E8  EC53  F036         	call	i2_I2C_Stop	;wreg free
 19906  0034EC  0012               	return		;funcret
 19907  0034EE  FFFF               	dw	65535	; errata NOP
 19908  0034F0                     __end_ofi2_getDS1307TimeDate:
 19909                           	opt stack 0
 19910                           tosu	equ	0xFFF
 19911                           tosh	equ	0xFFE
 19912                           tosl	equ	0xFFD
 19913                           pclatu	equ	0xFFB
 19914                           pclath	equ	0xFFA
 19915                           tblptru	equ	0xFF8
 19916                           tblptrh	equ	0xFF7
 19917                           tblptrl	equ	0xFF6
 19918                           tablat	equ	0xFF5
 19919                           prodh	equ	0xFF4
 19920                           prodl	equ	0xFF3
 19921                           intcon	equ	0xFF2
 19922                           indf0	equ	0xFEF
 19923                           postinc0	equ	0xFEE
 19924                           fsr0h	equ	0xFEA
 19925                           fsr0l	equ	0xFE9
 19926                           wreg	equ	0xFE8
 19927                           postdec1	equ	0xFE5
 19928                           fsr1h	equ	0xFE2
 19929                           fsr1l	equ	0xFE1
 19930                           indf2	equ	0xFDF
 19931                           postinc2	equ	0xFDE
 19932                           postdec2	equ	0xFDD
 19933                           fsr2h	equ	0xFDA
 19934                           fsr2l	equ	0xFD9
 19935                           status	equ	0xFD8
 19936                           
 19937 ;; *************** function i2_I2C_Restart *****************
 19938 ;; Defined at:
 19939 ;;		line 31 in file "I2C.c"
 19940 ;; Parameters:    Size  Location     Type
 19941 ;;		None
 19942 ;; Auto vars:     Size  Location     Type
 19943 ;;		None
 19944 ;; Return value:  Size  Location     Type
 19945 ;;                  1    wreg      void 
 19946 ;; Registers used:
 19947 ;;		wreg, status,2, status,0, cstack
 19948 ;; Tracked objects:
 19949 ;;		On entry : 0/0
 19950 ;;		On exit  : 0/0
 19951 ;;		Unchanged: 0/0
 19952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19953 ;;      Params:         0       0       0       0       0       0       0
 19954 ;;      Locals:         0       0       0       0       0       0       0
 19955 ;;      Temps:          0       0       0       0       0       0       0
 19956 ;;      Totals:         0       0       0       0       0       0       0
 19957 ;;Total ram usage:        0 bytes
 19958 ;; Hardware stack levels used:    1
 19959 ;; Hardware stack levels required when called:    1
 19960 ;; This function calls:
 19961 ;;		i2_I2C_Wait
 19962 ;; This function is called by:
 19963 ;;		i2_getDS1307TimeDate
 19964 ;; This function uses a non-reentrant model
 19965 ;;
 19966                           
 19967                           	psect	text76
 19968  006CB2                     __ptext76:
 19969                           	opt stack 0
 19970  006CB2                     i2_I2C_Restart:
 19971                           	opt stack 0
 19972  006CB2  FFFF               	dw	65535	; assembler added errata NOP
 19973                           
 19974                           ;I2C.c: 32: I2C_Wait();
 19975                           
 19976                           ;incstack = 0
 19977  006CB4  ECA4  F036         	call	i2_I2C_Wait	;wreg free
 19978                           
 19979                           ;I2C.c: 33: RSEN = 1;
 19980  006CB8  82C5               	bsf	4037,1,c	;volatile
 19981  006CBA  0012               	return		;funcret
 19982  006CBC  FFFF               	dw	65535	; errata NOP
 19983  006CBE                     __end_ofi2_I2C_Restart:
 19984                           	opt stack 0
 19985                           tosu	equ	0xFFF
 19986                           tosh	equ	0xFFE
 19987                           tosl	equ	0xFFD
 19988                           pclatu	equ	0xFFB
 19989                           pclath	equ	0xFFA
 19990                           tblptru	equ	0xFF8
 19991                           tblptrh	equ	0xFF7
 19992                           tblptrl	equ	0xFF6
 19993                           tablat	equ	0xFF5
 19994                           prodh	equ	0xFF4
 19995                           prodl	equ	0xFF3
 19996                           intcon	equ	0xFF2
 19997                           indf0	equ	0xFEF
 19998                           postinc0	equ	0xFEE
 19999                           fsr0h	equ	0xFEA
 20000                           fsr0l	equ	0xFE9
 20001                           wreg	equ	0xFE8
 20002                           postdec1	equ	0xFE5
 20003                           fsr1h	equ	0xFE2
 20004                           fsr1l	equ	0xFE1
 20005                           indf2	equ	0xFDF
 20006                           postinc2	equ	0xFDE
 20007                           postdec2	equ	0xFDD
 20008                           fsr2h	equ	0xFDA
 20009                           fsr2l	equ	0xFD9
 20010                           status	equ	0xFD8
 20011                           
 20012 ;; *************** function i2_I2C_Read *****************
 20013 ;; Defined at:
 20014 ;;		line 47 in file "I2C.c"
 20015 ;; Parameters:    Size  Location     Type
 20016 ;;  a               2    1[COMRAM] unsigned short 
 20017 ;; Auto vars:     Size  Location     Type
 20018 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 20019 ;; Return value:  Size  Location     Type
 20020 ;;                  2    1[COMRAM] unsigned short 
 20021 ;; Registers used:
 20022 ;;		wreg, status,2, status,0, cstack
 20023 ;; Tracked objects:
 20024 ;;		On entry : 0/0
 20025 ;;		On exit  : 0/0
 20026 ;;		Unchanged: 0/0
 20027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20028 ;;      Params:         2       0       0       0       0       0       0
 20029 ;;      Locals:         2       0       0       0       0       0       0
 20030 ;;      Temps:          0       0       0       0       0       0       0
 20031 ;;      Totals:         4       0       0       0       0       0       0
 20032 ;;Total ram usage:        4 bytes
 20033 ;; Hardware stack levels used:    1
 20034 ;; Hardware stack levels required when called:    1
 20035 ;; This function calls:
 20036 ;;		i2_I2C_Wait
 20037 ;; This function is called by:
 20038 ;;		i2_getDS1307TimeDate
 20039 ;; This function uses a non-reentrant model
 20040 ;;
 20041                           
 20042                           	psect	text77
 20043  006F1A                     __ptext77:
 20044                           	opt stack 0
 20045  006F1A                     i2_I2C_Read:
 20046                           	opt stack 0
 20047  006F1A  FFFF               	dw	65535	; assembler added errata NOP
 20048                           
 20049                           ;I2C.c: 48: unsigned short temp;
 20050                           ;I2C.c: 49: I2C_Wait();
 20051                           
 20052                           ;incstack = 0
 20053  006F1C  ECA4  F036         	call	i2_I2C_Wait	;wreg free
 20054                           
 20055                           ;I2C.c: 50: RCEN = 1;
 20056  006F20  86C5               	bsf	4037,3,c	;volatile
 20057                           
 20058                           ;I2C.c: 51: I2C_Wait();
 20059  006F22  ECA4  F036         	call	i2_I2C_Wait	;wreg free
 20060                           
 20061                           ;I2C.c: 52: temp = SSPBUF;
 20062  006F26  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 20063  006F2A  6A05               	clrf	i2I2C_Read@temp+1,c
 20064                           
 20065                           ;I2C.c: 53: I2C_Wait();
 20066  006F2C  ECA4  F036         	call	i2_I2C_Wait	;wreg free
 20067                           
 20068                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 20069  006F30  5002               	movf	i2I2C_Read@a,w,c
 20070  006F32  1003               	iorwf	i2I2C_Read@a+1,w,c
 20071  006F34  A4D8               	btfss	status,2,c
 20072  006F36  D002               	goto	i2u556_40
 20073  006F38  8AC5               	bsf	4037,5,c	;volatile
 20074  006F3A  D002               	goto	i2u557_45
 20075  006F3C                     i2u556_40:
 20076  006F3C  FFFF               	dw	65535	; assembler added errata NOP
 20077  006F3E  9AC5               	bcf	4037,5,c	;volatile
 20078  006F40                     i2u557_45:
 20079  006F40  FFFF               	dw	65535	; assembler added errata NOP
 20080                           
 20081                           ;I2C.c: 55: ACKEN = 1;
 20082  006F42  88C5               	bsf	4037,4,c	;volatile
 20083                           
 20084                           ;I2C.c: 56: return temp;
 20085  006F44  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 20086  006F48  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 20087  006F4C  0012               	return		;funcret
 20088  006F4E  FFFF               	dw	65535	; errata NOP
 20089  006F50                     __end_ofi2_I2C_Read:
 20090                           	opt stack 0
 20091                           tosu	equ	0xFFF
 20092                           tosh	equ	0xFFE
 20093                           tosl	equ	0xFFD
 20094                           pclatu	equ	0xFFB
 20095                           pclath	equ	0xFFA
 20096                           tblptru	equ	0xFF8
 20097                           tblptrh	equ	0xFF7
 20098                           tblptrl	equ	0xFF6
 20099                           tablat	equ	0xFF5
 20100                           prodh	equ	0xFF4
 20101                           prodl	equ	0xFF3
 20102                           intcon	equ	0xFF2
 20103                           indf0	equ	0xFEF
 20104                           postinc0	equ	0xFEE
 20105                           fsr0h	equ	0xFEA
 20106                           fsr0l	equ	0xFE9
 20107                           wreg	equ	0xFE8
 20108                           postdec1	equ	0xFE5
 20109                           fsr1h	equ	0xFE2
 20110                           fsr1l	equ	0xFE1
 20111                           indf2	equ	0xFDF
 20112                           postinc2	equ	0xFDE
 20113                           postdec2	equ	0xFDD
 20114                           fsr2h	equ	0xFDA
 20115                           fsr2l	equ	0xFD9
 20116                           status	equ	0xFD8
 20117                           
 20118 ;; *************** function i2_BCDtoDEC *****************
 20119 ;; Defined at:
 20120 ;;		line 34 in file "function.c"
 20121 ;; Parameters:    Size  Location     Type
 20122 ;;  val             1    wreg     unsigned char 
 20123 ;; Auto vars:     Size  Location     Type
 20124 ;;  val             1    0[COMRAM] unsigned char 
 20125 ;; Return value:  Size  Location     Type
 20126 ;;                  1    wreg      unsigned char 
 20127 ;; Registers used:
 20128 ;;		wreg, status,2, status,0, prodl, prodh
 20129 ;; Tracked objects:
 20130 ;;		On entry : 0/0
 20131 ;;		On exit  : 0/0
 20132 ;;		Unchanged: 0/0
 20133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20134 ;;      Params:         0       0       0       0       0       0       0
 20135 ;;      Locals:         1       0       0       0       0       0       0
 20136 ;;      Temps:          0       0       0       0       0       0       0
 20137 ;;      Totals:         1       0       0       0       0       0       0
 20138 ;;Total ram usage:        1 bytes
 20139 ;; Hardware stack levels used:    1
 20140 ;; This function calls:
 20141 ;;		Nothing
 20142 ;; This function is called by:
 20143 ;;		i2_getDS1307TimeDate
 20144 ;; This function uses a non-reentrant model
 20145 ;;
 20146                           
 20147                           	psect	text78
 20148  006D32                     __ptext78:
 20149                           	opt stack 0
 20150  006D32                     i2_BCDtoDEC:
 20151                           	opt stack 0
 20152  006D32  FFFF               	dw	65535	; assembler added errata NOP
 20153                           
 20154                           ;incstack = 0
 20155                           ;i2BCDtoDEC@val stored from wreg
 20156  006D34  6E01               	movwf	i2BCDtoDEC@val,c
 20157                           
 20158                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 20159  006D36  3801               	swapf	i2BCDtoDEC@val,w,c
 20160  006D38  0B0F               	andlw	15
 20161  006D3A  0B0F               	andlw	15
 20162  006D3C  0D0A               	mullw	10
 20163  006D3E  5001               	movf	i2BCDtoDEC@val,w,c
 20164  006D40  0B0F               	andlw	15
 20165  006D42  24F3               	addwf	prodl,w,c
 20166  006D44  0012               	return		;funcret
 20167  006D46  FFFF               	dw	65535	; errata NOP
 20168  006D48                     __end_ofi2_BCDtoDEC:
 20169                           	opt stack 0
 20170                           tosu	equ	0xFFF
 20171                           tosh	equ	0xFFE
 20172                           tosl	equ	0xFFD
 20173                           pclatu	equ	0xFFB
 20174                           pclath	equ	0xFFA
 20175                           tblptru	equ	0xFF8
 20176                           tblptrh	equ	0xFF7
 20177                           tblptrl	equ	0xFF6
 20178                           tablat	equ	0xFF5
 20179                           prodh	equ	0xFF4
 20180                           prodl	equ	0xFF3
 20181                           intcon	equ	0xFF2
 20182                           indf0	equ	0xFEF
 20183                           postinc0	equ	0xFEE
 20184                           fsr0h	equ	0xFEA
 20185                           fsr0l	equ	0xFE9
 20186                           wreg	equ	0xFE8
 20187                           postdec1	equ	0xFE5
 20188                           fsr1h	equ	0xFE2
 20189                           fsr1l	equ	0xFE1
 20190                           indf2	equ	0xFDF
 20191                           postinc2	equ	0xFDE
 20192                           postdec2	equ	0xFDD
 20193                           fsr2h	equ	0xFDA
 20194                           fsr2l	equ	0xFD9
 20195                           status	equ	0xFD8
 20196                           
 20197 ;; *************** function i2_RTC_Init *****************
 20198 ;; Defined at:
 20199 ;;		line 98 in file "ds1307.h"
 20200 ;; Parameters:    Size  Location     Type
 20201 ;;		None
 20202 ;; Auto vars:     Size  Location     Type
 20203 ;;		None
 20204 ;; Return value:  Size  Location     Type
 20205 ;;                  1    wreg      void 
 20206 ;; Registers used:
 20207 ;;		wreg, status,2, status,0, cstack
 20208 ;; Tracked objects:
 20209 ;;		On entry : 0/0
 20210 ;;		On exit  : 0/0
 20211 ;;		Unchanged: 0/0
 20212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20213 ;;      Params:         0       0       0       0       0       0       0
 20214 ;;      Locals:         0       0       0       0       0       0       0
 20215 ;;      Temps:          0       0       0       0       0       0       0
 20216 ;;      Totals:         0       0       0       0       0       0       0
 20217 ;;Total ram usage:        0 bytes
 20218 ;; Hardware stack levels used:    1
 20219 ;; Hardware stack levels required when called:    2
 20220 ;; This function calls:
 20221 ;;		i2_I2C_Start
 20222 ;;		i2_I2C_Stop
 20223 ;;		i2_I2C_Write
 20224 ;; This function is called by:
 20225 ;;		_timer
 20226 ;; This function uses a non-reentrant model
 20227 ;;
 20228                           
 20229                           	psect	text79
 20230  006EB4                     __ptext79:
 20231                           	opt stack 0
 20232  006EB4                     i2_RTC_Init:
 20233                           	opt stack 0
 20234  006EB4  FFFF               	dw	65535	; assembler added errata NOP
 20235                           
 20236                           ;ds1307.h: 100: I2C_Start();
 20237                           
 20238                           ;incstack = 0
 20239  006EB6  EC4D  F036         	call	i2_I2C_Start	;wreg free
 20240                           
 20241                           ;ds1307.h: 101: I2C_Write(0xD0);
 20242  006EBA  0E00               	movlw	0
 20243  006EBC  6E03               	movwf	i2I2C_Write@d+1,c
 20244  006EBE  0ED0               	movlw	208
 20245  006EC0  6E02               	movwf	i2I2C_Write@d,c
 20246  006EC2  EC71  F036         	call	i2_I2C_Write	;wreg free
 20247                           
 20248                           ;ds1307.h: 102: I2C_Write(0x07);
 20249  006EC6  0E00               	movlw	0
 20250  006EC8  6E03               	movwf	i2I2C_Write@d+1,c
 20251  006ECA  0E07               	movlw	7
 20252  006ECC  6E02               	movwf	i2I2C_Write@d,c
 20253  006ECE  EC71  F036         	call	i2_I2C_Write	;wreg free
 20254                           
 20255                           ;ds1307.h: 103: I2C_Write(0x00);
 20256  006ED2  0E00               	movlw	0
 20257  006ED4  6E03               	movwf	i2I2C_Write@d+1,c
 20258  006ED6  0E00               	movlw	0
 20259  006ED8  6E02               	movwf	i2I2C_Write@d,c
 20260  006EDA  EC71  F036         	call	i2_I2C_Write	;wreg free
 20261                           
 20262                           ;ds1307.h: 104: I2C_Stop();
 20263  006EDE  EC53  F036         	call	i2_I2C_Stop	;wreg free
 20264  006EE2  0012               	return		;funcret
 20265  006EE4  FFFF               	dw	65535	; errata NOP
 20266  006EE6                     __end_ofi2_RTC_Init:
 20267                           	opt stack 0
 20268                           tosu	equ	0xFFF
 20269                           tosh	equ	0xFFE
 20270                           tosl	equ	0xFFD
 20271                           pclatu	equ	0xFFB
 20272                           pclath	equ	0xFFA
 20273                           tblptru	equ	0xFF8
 20274                           tblptrh	equ	0xFF7
 20275                           tblptrl	equ	0xFF6
 20276                           tablat	equ	0xFF5
 20277                           prodh	equ	0xFF4
 20278                           prodl	equ	0xFF3
 20279                           intcon	equ	0xFF2
 20280                           indf0	equ	0xFEF
 20281                           postinc0	equ	0xFEE
 20282                           fsr0h	equ	0xFEA
 20283                           fsr0l	equ	0xFE9
 20284                           wreg	equ	0xFE8
 20285                           postdec1	equ	0xFE5
 20286                           fsr1h	equ	0xFE2
 20287                           fsr1l	equ	0xFE1
 20288                           indf2	equ	0xFDF
 20289                           postinc2	equ	0xFDE
 20290                           postdec2	equ	0xFDD
 20291                           fsr2h	equ	0xFDA
 20292                           fsr2l	equ	0xFD9
 20293                           status	equ	0xFD8
 20294                           
 20295 ;; *************** function _writeEEPROM16_ext *****************
 20296 ;; Defined at:
 20297 ;;		line 40 in file "eeprom.h"
 20298 ;; Parameters:    Size  Location     Type
 20299 ;;  adress          1    wreg     unsigned char 
 20300 ;;  data            2    5[COMRAM] unsigned int 
 20301 ;; Auto vars:     Size  Location     Type
 20302 ;;  adress          1    7[COMRAM] unsigned char 
 20303 ;; Return value:  Size  Location     Type
 20304 ;;                  1    wreg      void 
 20305 ;; Registers used:
 20306 ;;		wreg, status,2, status,0, cstack
 20307 ;; Tracked objects:
 20308 ;;		On entry : 0/0
 20309 ;;		On exit  : 0/0
 20310 ;;		Unchanged: 0/0
 20311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20312 ;;      Params:         2       0       0       0       0       0       0
 20313 ;;      Locals:         1       0       0       0       0       0       0
 20314 ;;      Temps:          0       0       0       0       0       0       0
 20315 ;;      Totals:         3       0       0       0       0       0       0
 20316 ;;Total ram usage:        3 bytes
 20317 ;; Hardware stack levels used:    1
 20318 ;; Hardware stack levels required when called:    3
 20319 ;; This function calls:
 20320 ;;		i2_writeEEPROM_ext
 20321 ;; This function is called by:
 20322 ;;		_timer
 20323 ;; This function uses a non-reentrant model
 20324 ;;
 20325                           
 20326                           	psect	text80
 20327  006D94                     __ptext80:
 20328                           	opt stack 0
 20329  006D94                     _writeEEPROM16_ext:
 20330                           	opt stack 0
 20331  006D94  FFFF               	dw	65535	; assembler added errata NOP
 20332                           
 20333                           ;incstack = 0
 20334                           ;writeEEPROM16_ext@adress stored from wreg
 20335  006D96  6E08               	movwf	writeEEPROM16_ext@adress,c
 20336                           
 20337                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 20338  006D98  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20339  006D9C  5008               	movf	writeEEPROM16_ext@adress,w,c
 20340  006D9E  EC88  F038         	call	i2_writeEEPROM_ext
 20341                           
 20342                           ;eeprom.h: 42: data>> = 8;
 20343  006DA2  5007               	movf	writeEEPROM16_ext@data+1,w,c
 20344  006DA4  6E06               	movwf	writeEEPROM16_ext@data,c
 20345  006DA6  6A07               	clrf	writeEEPROM16_ext@data+1,c
 20346                           
 20347                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 20348  006DA8  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20349  006DAC  2808               	incf	writeEEPROM16_ext@adress,w,c
 20350  006DAE  EC88  F038         	call	i2_writeEEPROM_ext
 20351  006DB2  0012               	return		;funcret
 20352  006DB4  FFFF               	dw	65535	; errata NOP
 20353  006DB6                     __end_of_writeEEPROM16_ext:
 20354                           	opt stack 0
 20355                           tosu	equ	0xFFF
 20356                           tosh	equ	0xFFE
 20357                           tosl	equ	0xFFD
 20358                           pclatu	equ	0xFFB
 20359                           pclath	equ	0xFFA
 20360                           tblptru	equ	0xFF8
 20361                           tblptrh	equ	0xFF7
 20362                           tblptrl	equ	0xFF6
 20363                           tablat	equ	0xFF5
 20364                           prodh	equ	0xFF4
 20365                           prodl	equ	0xFF3
 20366                           intcon	equ	0xFF2
 20367                           indf0	equ	0xFEF
 20368                           postinc0	equ	0xFEE
 20369                           fsr0h	equ	0xFEA
 20370                           fsr0l	equ	0xFE9
 20371                           wreg	equ	0xFE8
 20372                           postdec1	equ	0xFE5
 20373                           fsr1h	equ	0xFE2
 20374                           fsr1l	equ	0xFE1
 20375                           indf2	equ	0xFDF
 20376                           postinc2	equ	0xFDE
 20377                           postdec2	equ	0xFDD
 20378                           fsr2h	equ	0xFDA
 20379                           fsr2l	equ	0xFD9
 20380                           status	equ	0xFD8
 20381                           
 20382 ;; *************** function i2_writeEEPROM_ext *****************
 20383 ;; Defined at:
 20384 ;;		line 13 in file "eeprom.h"
 20385 ;; Parameters:    Size  Location     Type
 20386 ;;  adress          1    wreg     unsigned char 
 20387 ;;  data            1    3[COMRAM] unsigned char 
 20388 ;; Auto vars:     Size  Location     Type
 20389 ;;  adress          1    4[COMRAM] unsigned char 
 20390 ;; Return value:  Size  Location     Type
 20391 ;;                  1    wreg      void 
 20392 ;; Registers used:
 20393 ;;		wreg, status,2, status,0, cstack
 20394 ;; Tracked objects:
 20395 ;;		On entry : 0/0
 20396 ;;		On exit  : 0/0
 20397 ;;		Unchanged: 0/0
 20398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20399 ;;      Params:         1       0       0       0       0       0       0
 20400 ;;      Locals:         1       0       0       0       0       0       0
 20401 ;;      Temps:          0       0       0       0       0       0       0
 20402 ;;      Totals:         2       0       0       0       0       0       0
 20403 ;;Total ram usage:        2 bytes
 20404 ;; Hardware stack levels used:    1
 20405 ;; Hardware stack levels required when called:    2
 20406 ;; This function calls:
 20407 ;;		i2_I2C_Start
 20408 ;;		i2_I2C_Stop
 20409 ;;		i2_I2C_Write
 20410 ;;		i2_delay
 20411 ;; This function is called by:
 20412 ;;		_writeEEPROM16_ext
 20413 ;;		_timer
 20414 ;; This function uses a non-reentrant model
 20415 ;;
 20416                           
 20417                           	psect	text81
 20418  007110                     __ptext81:
 20419                           	opt stack 0
 20420  007110                     i2_writeEEPROM_ext:
 20421                           	opt stack 0
 20422  007110  FFFF               	dw	65535	; assembler added errata NOP
 20423                           
 20424                           ;incstack = 0
 20425                           ;i2writeEEPROM_ext@adress stored from wreg
 20426  007112  6E05               	movwf	i2writeEEPROM_ext@adress,c
 20427                           
 20428                           ;eeprom.h: 15: I2C_Start();
 20429  007114  EC4D  F036         	call	i2_I2C_Start	;wreg free
 20430                           
 20431                           ;eeprom.h: 16: I2C_Write(0xA0);
 20432  007118  0E00               	movlw	0
 20433  00711A  6E03               	movwf	i2I2C_Write@d+1,c
 20434  00711C  0EA0               	movlw	160
 20435  00711E  6E02               	movwf	i2I2C_Write@d,c
 20436  007120  EC71  F036         	call	i2_I2C_Write	;wreg free
 20437                           
 20438                           ;eeprom.h: 18: I2C_Write(adress);
 20439  007124  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 20440  007128  6A03               	clrf	i2I2C_Write@d+1,c
 20441  00712A  EC71  F036         	call	i2_I2C_Write	;wreg free
 20442                           
 20443                           ;eeprom.h: 19: I2C_Write(data);
 20444  00712E  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 20445  007132  6A03               	clrf	i2I2C_Write@d+1,c
 20446  007134  EC71  F036         	call	i2_I2C_Write	;wreg free
 20447                           
 20448                           ;eeprom.h: 20: I2C_Stop();
 20449  007138  EC53  F036         	call	i2_I2C_Stop	;wreg free
 20450                           
 20451                           ;eeprom.h: 21: delay(15);
 20452  00713C  0E00               	movlw	0
 20453  00713E  6E02               	movwf	i2delay@x+1,c
 20454  007140  0E0F               	movlw	15
 20455  007142  6E01               	movwf	i2delay@x,c
 20456  007144  EC41  F037         	call	i2_delay	;wreg free
 20457  007148  0012               	return		;funcret
 20458  00714A  FFFF               	dw	65535	; errata NOP
 20459  00714C                     __end_ofi2_writeEEPROM_ext:
 20460                           	opt stack 0
 20461                           tosu	equ	0xFFF
 20462                           tosh	equ	0xFFE
 20463                           tosl	equ	0xFFD
 20464                           pclatu	equ	0xFFB
 20465                           pclath	equ	0xFFA
 20466                           tblptru	equ	0xFF8
 20467                           tblptrh	equ	0xFF7
 20468                           tblptrl	equ	0xFF6
 20469                           tablat	equ	0xFF5
 20470                           prodh	equ	0xFF4
 20471                           prodl	equ	0xFF3
 20472                           intcon	equ	0xFF2
 20473                           indf0	equ	0xFEF
 20474                           postinc0	equ	0xFEE
 20475                           fsr0h	equ	0xFEA
 20476                           fsr0l	equ	0xFE9
 20477                           wreg	equ	0xFE8
 20478                           postdec1	equ	0xFE5
 20479                           fsr1h	equ	0xFE2
 20480                           fsr1l	equ	0xFE1
 20481                           indf2	equ	0xFDF
 20482                           postinc2	equ	0xFDE
 20483                           postdec2	equ	0xFDD
 20484                           fsr2h	equ	0xFDA
 20485                           fsr2l	equ	0xFD9
 20486                           status	equ	0xFD8
 20487                           
 20488 ;; *************** function i2_delay *****************
 20489 ;; Defined at:
 20490 ;;		line 16 in file "function.c"
 20491 ;; Parameters:    Size  Location     Type
 20492 ;;  x               2    0[COMRAM] int 
 20493 ;; Auto vars:     Size  Location     Type
 20494 ;;		None
 20495 ;; Return value:  Size  Location     Type
 20496 ;;                  1    wreg      void 
 20497 ;; Registers used:
 20498 ;;		wreg, status,2, status,0
 20499 ;; Tracked objects:
 20500 ;;		On entry : 0/0
 20501 ;;		On exit  : 0/0
 20502 ;;		Unchanged: 0/0
 20503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20504 ;;      Params:         2       0       0       0       0       0       0
 20505 ;;      Locals:         0       0       0       0       0       0       0
 20506 ;;      Temps:          1       0       0       0       0       0       0
 20507 ;;      Totals:         3       0       0       0       0       0       0
 20508 ;;Total ram usage:        3 bytes
 20509 ;; Hardware stack levels used:    1
 20510 ;; This function calls:
 20511 ;;		Nothing
 20512 ;; This function is called by:
 20513 ;;		i2_writeEEPROM_ext
 20514 ;; This function uses a non-reentrant model
 20515 ;;
 20516                           
 20517                           	psect	text82
 20518  006E82                     __ptext82:
 20519                           	opt stack 0
 20520  006E82                     i2_delay:
 20521                           	opt stack 0
 20522  006E82  FFFF               	dw	65535	; assembler added errata NOP
 20523                           
 20524                           ;function.c: 17: while (x--) {
 20525                           
 20526                           ;incstack = 0
 20527  006E84  D00B               	goto	i2l1000
 20528  006E86  FFFF               	dw	65535	; assembler added errata NOP
 20529  006E88                     i2l5300:
 20530                           
 20531                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 20532  006E88  0E02               	movlw	2
 20533  006E8A  6E03               	movwf	??i2_delay& (0+255),c
 20534  006E8C  0EF2               	movlw	242
 20535  006E8E                     i2u909_47:
 20536  006E8E  FFFF               	dw	65535	; errata NOP
 20537  006E90  2EE8               	decfsz	wreg,f,c
 20538  006E92  D7FD               	bra	i2u909_47
 20539  006E94  2E03               	decfsz	??i2_delay& (0+255),f,c
 20540  006E96  D7FB               	bra	i2u909_47
 20541  006E98  D000               	nop2	
 20542  006E9A  0004               	clrwdt		;# 
 20543  006E9C                     i2l1000:
 20544  006E9C  FFFF               	dw	65535	; assembler added errata NOP
 20545  006E9E  0601               	decf	i2delay@x,f,c
 20546  006EA0  A0D8               	btfss	status,0,c
 20547  006EA2  0602               	decf	i2delay@x+1,f,c
 20548  006EA4  2801               	incf	i2delay@x,w,c
 20549  006EA6  E1F0               	bnz	i2l5300
 20550  006EA8  2802               	incf	i2delay@x+1,w,c
 20551  006EAA  B4D8               	btfsc	status,2,c
 20552  006EAC  0012               	return		;funcret
 20553  006EAE  FFFF               	dw	65535	; assembler added errata NOP
 20554  006EB0  D7EA               	goto	i2l1001
 20555  006EB2  FFFF               	dw	65535	; errata NOP
 20556  006EB4                     __end_ofi2_delay:
 20557                           	opt stack 0
 20558                           tosu	equ	0xFFF
 20559                           tosh	equ	0xFFE
 20560                           tosl	equ	0xFFD
 20561                           pclatu	equ	0xFFB
 20562                           pclath	equ	0xFFA
 20563                           tblptru	equ	0xFF8
 20564                           tblptrh	equ	0xFF7
 20565                           tblptrl	equ	0xFF6
 20566                           tablat	equ	0xFF5
 20567                           prodh	equ	0xFF4
 20568                           prodl	equ	0xFF3
 20569                           intcon	equ	0xFF2
 20570                           indf0	equ	0xFEF
 20571                           postinc0	equ	0xFEE
 20572                           fsr0h	equ	0xFEA
 20573                           fsr0l	equ	0xFE9
 20574                           wreg	equ	0xFE8
 20575                           postdec1	equ	0xFE5
 20576                           fsr1h	equ	0xFE2
 20577                           fsr1l	equ	0xFE1
 20578                           indf2	equ	0xFDF
 20579                           postinc2	equ	0xFDE
 20580                           postdec2	equ	0xFDD
 20581                           fsr2h	equ	0xFDA
 20582                           fsr2l	equ	0xFD9
 20583                           status	equ	0xFD8
 20584                           
 20585 ;; *************** function i2_I2C_Write *****************
 20586 ;; Defined at:
 20587 ;;		line 42 in file "I2C.c"
 20588 ;; Parameters:    Size  Location     Type
 20589 ;;  d               2    1[COMRAM] unsigned int 
 20590 ;; Auto vars:     Size  Location     Type
 20591 ;;		None
 20592 ;; Return value:  Size  Location     Type
 20593 ;;                  1    wreg      void 
 20594 ;; Registers used:
 20595 ;;		wreg, status,2, status,0, cstack
 20596 ;; Tracked objects:
 20597 ;;		On entry : 0/0
 20598 ;;		On exit  : 0/0
 20599 ;;		Unchanged: 0/0
 20600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20601 ;;      Params:         2       0       0       0       0       0       0
 20602 ;;      Locals:         0       0       0       0       0       0       0
 20603 ;;      Temps:          0       0       0       0       0       0       0
 20604 ;;      Totals:         2       0       0       0       0       0       0
 20605 ;;Total ram usage:        2 bytes
 20606 ;; Hardware stack levels used:    1
 20607 ;; Hardware stack levels required when called:    1
 20608 ;; This function calls:
 20609 ;;		i2_I2C_Wait
 20610 ;; This function is called by:
 20611 ;;		i2_getDS1307TimeDate
 20612 ;;		i2_RTC_Init
 20613 ;;		i2_writeEEPROM_ext
 20614 ;; This function uses a non-reentrant model
 20615 ;;
 20616                           
 20617                           	psect	text83
 20618  006CE2                     __ptext83:
 20619                           	opt stack 0
 20620  006CE2                     i2_I2C_Write:
 20621                           	opt stack 0
 20622  006CE2  FFFF               	dw	65535	; assembler added errata NOP
 20623                           
 20624                           ;I2C.c: 43: I2C_Wait();
 20625                           
 20626                           ;incstack = 0
 20627  006CE4  ECA4  F036         	call	i2_I2C_Wait	;wreg free
 20628                           
 20629                           ;I2C.c: 44: SSPBUF = d;
 20630  006CE8  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 20631  006CEC  0012               	return		;funcret
 20632  006CEE  FFFF               	dw	65535	; errata NOP
 20633  006CF0                     __end_ofi2_I2C_Write:
 20634                           	opt stack 0
 20635                           tosu	equ	0xFFF
 20636                           tosh	equ	0xFFE
 20637                           tosl	equ	0xFFD
 20638                           pclatu	equ	0xFFB
 20639                           pclath	equ	0xFFA
 20640                           tblptru	equ	0xFF8
 20641                           tblptrh	equ	0xFF7
 20642                           tblptrl	equ	0xFF6
 20643                           tablat	equ	0xFF5
 20644                           prodh	equ	0xFF4
 20645                           prodl	equ	0xFF3
 20646                           intcon	equ	0xFF2
 20647                           indf0	equ	0xFEF
 20648                           postinc0	equ	0xFEE
 20649                           fsr0h	equ	0xFEA
 20650                           fsr0l	equ	0xFE9
 20651                           wreg	equ	0xFE8
 20652                           postdec1	equ	0xFE5
 20653                           fsr1h	equ	0xFE2
 20654                           fsr1l	equ	0xFE1
 20655                           indf2	equ	0xFDF
 20656                           postinc2	equ	0xFDE
 20657                           postdec2	equ	0xFDD
 20658                           fsr2h	equ	0xFDA
 20659                           fsr2l	equ	0xFD9
 20660                           status	equ	0xFD8
 20661                           
 20662 ;; *************** function i2_I2C_Stop *****************
 20663 ;; Defined at:
 20664 ;;		line 36 in file "I2C.c"
 20665 ;; Parameters:    Size  Location     Type
 20666 ;;		None
 20667 ;; Auto vars:     Size  Location     Type
 20668 ;;		None
 20669 ;; Return value:  Size  Location     Type
 20670 ;;                  1    wreg      void 
 20671 ;; Registers used:
 20672 ;;		wreg, status,2, status,0, cstack
 20673 ;; Tracked objects:
 20674 ;;		On entry : 0/0
 20675 ;;		On exit  : 0/0
 20676 ;;		Unchanged: 0/0
 20677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20678 ;;      Params:         0       0       0       0       0       0       0
 20679 ;;      Locals:         0       0       0       0       0       0       0
 20680 ;;      Temps:          0       0       0       0       0       0       0
 20681 ;;      Totals:         0       0       0       0       0       0       0
 20682 ;;Total ram usage:        0 bytes
 20683 ;; Hardware stack levels used:    1
 20684 ;; Hardware stack levels required when called:    1
 20685 ;; This function calls:
 20686 ;;		i2_I2C_Wait
 20687 ;; This function is called by:
 20688 ;;		i2_getDS1307TimeDate
 20689 ;;		i2_RTC_Init
 20690 ;;		i2_writeEEPROM_ext
 20691 ;; This function uses a non-reentrant model
 20692 ;;
 20693                           
 20694                           	psect	text84
 20695  006CA6                     __ptext84:
 20696                           	opt stack 0
 20697  006CA6                     i2_I2C_Stop:
 20698                           	opt stack 0
 20699  006CA6  FFFF               	dw	65535	; assembler added errata NOP
 20700                           
 20701                           ;I2C.c: 37: I2C_Wait();
 20702                           
 20703                           ;incstack = 0
 20704  006CA8  ECA4  F036         	call	i2_I2C_Wait	;wreg free
 20705                           
 20706                           ;I2C.c: 38: PEN = 1;
 20707  006CAC  84C5               	bsf	4037,2,c	;volatile
 20708  006CAE  0012               	return		;funcret
 20709  006CB0  FFFF               	dw	65535	; errata NOP
 20710  006CB2                     __end_ofi2_I2C_Stop:
 20711                           	opt stack 0
 20712                           tosu	equ	0xFFF
 20713                           tosh	equ	0xFFE
 20714                           tosl	equ	0xFFD
 20715                           pclatu	equ	0xFFB
 20716                           pclath	equ	0xFFA
 20717                           tblptru	equ	0xFF8
 20718                           tblptrh	equ	0xFF7
 20719                           tblptrl	equ	0xFF6
 20720                           tablat	equ	0xFF5
 20721                           prodh	equ	0xFF4
 20722                           prodl	equ	0xFF3
 20723                           intcon	equ	0xFF2
 20724                           indf0	equ	0xFEF
 20725                           postinc0	equ	0xFEE
 20726                           fsr0h	equ	0xFEA
 20727                           fsr0l	equ	0xFE9
 20728                           wreg	equ	0xFE8
 20729                           postdec1	equ	0xFE5
 20730                           fsr1h	equ	0xFE2
 20731                           fsr1l	equ	0xFE1
 20732                           indf2	equ	0xFDF
 20733                           postinc2	equ	0xFDE
 20734                           postdec2	equ	0xFDD
 20735                           fsr2h	equ	0xFDA
 20736                           fsr2l	equ	0xFD9
 20737                           status	equ	0xFD8
 20738                           
 20739 ;; *************** function i2_I2C_Start *****************
 20740 ;; Defined at:
 20741 ;;		line 26 in file "I2C.c"
 20742 ;; Parameters:    Size  Location     Type
 20743 ;;		None
 20744 ;; Auto vars:     Size  Location     Type
 20745 ;;		None
 20746 ;; Return value:  Size  Location     Type
 20747 ;;                  1    wreg      void 
 20748 ;; Registers used:
 20749 ;;		wreg, status,2, status,0, cstack
 20750 ;; Tracked objects:
 20751 ;;		On entry : 0/0
 20752 ;;		On exit  : 0/0
 20753 ;;		Unchanged: 0/0
 20754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20755 ;;      Params:         0       0       0       0       0       0       0
 20756 ;;      Locals:         0       0       0       0       0       0       0
 20757 ;;      Temps:          0       0       0       0       0       0       0
 20758 ;;      Totals:         0       0       0       0       0       0       0
 20759 ;;Total ram usage:        0 bytes
 20760 ;; Hardware stack levels used:    1
 20761 ;; Hardware stack levels required when called:    1
 20762 ;; This function calls:
 20763 ;;		i2_I2C_Wait
 20764 ;; This function is called by:
 20765 ;;		i2_getDS1307TimeDate
 20766 ;;		i2_RTC_Init
 20767 ;;		i2_writeEEPROM_ext
 20768 ;; This function uses a non-reentrant model
 20769 ;;
 20770                           
 20771                           	psect	text85
 20772  006C9A                     __ptext85:
 20773                           	opt stack 0
 20774  006C9A                     i2_I2C_Start:
 20775                           	opt stack 0
 20776  006C9A  FFFF               	dw	65535	; assembler added errata NOP
 20777                           
 20778                           ;I2C.c: 27: I2C_Wait();
 20779                           
 20780                           ;incstack = 0
 20781  006C9C  ECA4  F036         	call	i2_I2C_Wait	;wreg free
 20782                           
 20783                           ;I2C.c: 28: SEN = 1;
 20784  006CA0  80C5               	bsf	4037,0,c	;volatile
 20785  006CA2  0012               	return		;funcret
 20786  006CA4  FFFF               	dw	65535	; errata NOP
 20787  006CA6                     __end_ofi2_I2C_Start:
 20788                           	opt stack 0
 20789                           tosu	equ	0xFFF
 20790                           tosh	equ	0xFFE
 20791                           tosl	equ	0xFFD
 20792                           pclatu	equ	0xFFB
 20793                           pclath	equ	0xFFA
 20794                           tblptru	equ	0xFF8
 20795                           tblptrh	equ	0xFF7
 20796                           tblptrl	equ	0xFF6
 20797                           tablat	equ	0xFF5
 20798                           prodh	equ	0xFF4
 20799                           prodl	equ	0xFF3
 20800                           intcon	equ	0xFF2
 20801                           indf0	equ	0xFEF
 20802                           postinc0	equ	0xFEE
 20803                           fsr0h	equ	0xFEA
 20804                           fsr0l	equ	0xFE9
 20805                           wreg	equ	0xFE8
 20806                           postdec1	equ	0xFE5
 20807                           fsr1h	equ	0xFE2
 20808                           fsr1l	equ	0xFE1
 20809                           indf2	equ	0xFDF
 20810                           postinc2	equ	0xFDE
 20811                           postdec2	equ	0xFDD
 20812                           fsr2h	equ	0xFDA
 20813                           fsr2l	equ	0xFD9
 20814                           status	equ	0xFD8
 20815                           
 20816 ;; *************** function i2_I2C_Wait *****************
 20817 ;; Defined at:
 20818 ;;		line 22 in file "I2C.c"
 20819 ;; Parameters:    Size  Location     Type
 20820 ;;		None
 20821 ;; Auto vars:     Size  Location     Type
 20822 ;;		None
 20823 ;; Return value:  Size  Location     Type
 20824 ;;                  1    wreg      void 
 20825 ;; Registers used:
 20826 ;;		wreg, status,2, status,0
 20827 ;; Tracked objects:
 20828 ;;		On entry : 0/0
 20829 ;;		On exit  : 0/0
 20830 ;;		Unchanged: 0/0
 20831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20832 ;;      Params:         0       0       0       0       0       0       0
 20833 ;;      Locals:         0       0       0       0       0       0       0
 20834 ;;      Temps:          1       0       0       0       0       0       0
 20835 ;;      Totals:         1       0       0       0       0       0       0
 20836 ;;Total ram usage:        1 bytes
 20837 ;; Hardware stack levels used:    1
 20838 ;; This function calls:
 20839 ;;		Nothing
 20840 ;; This function is called by:
 20841 ;;		i2_I2C_Start
 20842 ;;		i2_I2C_Restart
 20843 ;;		i2_I2C_Stop
 20844 ;;		i2_I2C_Write
 20845 ;;		i2_I2C_Read
 20846 ;; This function uses a non-reentrant model
 20847 ;;
 20848                           
 20849                           	psect	text86
 20850  006D48                     __ptext86:
 20851                           	opt stack 0
 20852  006D48                     i2_I2C_Wait:
 20853                           	opt stack 0
 20854  006D48  FFFF               	dw	65535	; assembler added errata NOP
 20855                           
 20856                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 20857                           
 20858                           ;incstack = 0
 20859  006D4A  B4C7               	btfsc	4039,2,c	;volatile
 20860  006D4C  D7FD               	goto	i2_I2C_Wait
 20861  006D4E  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 20862  006D52  0E1F               	movlw	31
 20863  006D54  1601               	andwf	??i2_I2C_Wait,f,c
 20864  006D56  B4D8               	btfsc	status,2,c
 20865  006D58  0012               	return		;funcret
 20866  006D5A  FFFF               	dw	65535	; assembler added errata NOP
 20867  006D5C  D7F5               	goto	i2_I2C_Wait
 20868  006D5E  FFFF               	dw	65535	; errata NOP
 20869  006D60                     __end_ofi2_I2C_Wait:
 20870                           	opt stack 0
 20871                           tosu	equ	0xFFF
 20872                           tosh	equ	0xFFE
 20873                           tosl	equ	0xFFD
 20874                           pclatu	equ	0xFFB
 20875                           pclath	equ	0xFFA
 20876                           tblptru	equ	0xFF8
 20877                           tblptrh	equ	0xFF7
 20878                           tblptrl	equ	0xFF6
 20879                           tablat	equ	0xFF5
 20880                           prodh	equ	0xFF4
 20881                           prodl	equ	0xFF3
 20882                           intcon	equ	0xFF2
 20883                           indf0	equ	0xFEF
 20884                           postinc0	equ	0xFEE
 20885                           fsr0h	equ	0xFEA
 20886                           fsr0l	equ	0xFE9
 20887                           wreg	equ	0xFE8
 20888                           postdec1	equ	0xFE5
 20889                           fsr1h	equ	0xFE2
 20890                           fsr1l	equ	0xFE1
 20891                           indf2	equ	0xFDF
 20892                           postinc2	equ	0xFDE
 20893                           postdec2	equ	0xFDD
 20894                           fsr2h	equ	0xFDA
 20895                           fsr2l	equ	0xFD9
 20896                           status	equ	0xFD8
 20897                           
 20898 ;; *************** function _readButtons *****************
 20899 ;; Defined at:
 20900 ;;		line 23 in file "teclado.h"
 20901 ;; Parameters:    Size  Location     Type
 20902 ;;		None
 20903 ;; Auto vars:     Size  Location     Type
 20904 ;;		None
 20905 ;; Return value:  Size  Location     Type
 20906 ;;                  1    wreg      void 
 20907 ;; Registers used:
 20908 ;;		wreg, status,2
 20909 ;; Tracked objects:
 20910 ;;		On entry : 0/0
 20911 ;;		On exit  : 0/0
 20912 ;;		Unchanged: 0/0
 20913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20914 ;;      Params:         0       0       0       0       0       0       0
 20915 ;;      Locals:         0       0       0       0       0       0       0
 20916 ;;      Temps:          0       0       0       0       0       0       0
 20917 ;;      Totals:         0       0       0       0       0       0       0
 20918 ;;Total ram usage:        0 bytes
 20919 ;; Hardware stack levels used:    1
 20920 ;; This function calls:
 20921 ;;		Nothing
 20922 ;; This function is called by:
 20923 ;;		_TIMER
 20924 ;; This function uses a non-reentrant model
 20925 ;;
 20926                           
 20927                           	psect	text87
 20928  0077EA                     __ptext87:
 20929                           	opt stack 0
 20930  0077EA                     _readButtons:
 20931                           	opt stack 0
 20932  0077EA  FFFF               	dw	65535	; assembler added errata NOP
 20933                           
 20934                           ;teclado.h: 24: if (!PORTBbits.RB2) {
 20935                           
 20936                           ;incstack = 0
 20937  0077EC  B481               	btfsc	3969,2,c	;volatile
 20938  0077EE  D002               	goto	i2l450
 20939                           
 20940                           ;teclado.h: 25: flag_b_esc = 1;
 20941  0077F0  0E01               	movlw	1
 20942  0077F2  6E65               	movwf	_flag_b_esc,c
 20943  0077F4                     i2l450:
 20944  0077F4  FFFF               	dw	65535	; assembler added errata NOP
 20945                           
 20946                           ;teclado.h: 26: }
 20947                           ;teclado.h: 27: if (PORTBbits.RB2 && flag_b_esc) {
 20948  0077F6  A481               	btfss	3969,2,c	;volatile
 20949  0077F8  D007               	goto	i2l451
 20950  0077FA  5065               	movf	_flag_b_esc,w,c
 20951  0077FC  B4D8               	btfsc	status,2,c
 20952  0077FE  D004               	goto	i2l451
 20953                           
 20954                           ;teclado.h: 28: _b_esc = 1;
 20955  007800  0E01               	movlw	1
 20956  007802  6E64               	movwf	__b_esc,c
 20957                           
 20958                           ;teclado.h: 29: flag_b_esc = 0;
 20959  007804  0E00               	movlw	0
 20960  007806  6E65               	movwf	_flag_b_esc,c
 20961  007808                     i2l451:
 20962  007808  FFFF               	dw	65535	; assembler added errata NOP
 20963                           
 20964                           ;teclado.h: 30: }
 20965                           ;teclado.h: 32: if (!PORTBbits.RB4) {
 20966  00780A  B881               	btfsc	3969,4,c	;volatile
 20967  00780C  D002               	goto	i2l452
 20968                           
 20969                           ;teclado.h: 33: flag_b_menos = 1;
 20970  00780E  0E01               	movlw	1
 20971  007810  6E63               	movwf	_flag_b_menos,c
 20972  007812                     i2l452:
 20973  007812  FFFF               	dw	65535	; assembler added errata NOP
 20974                           
 20975                           ;teclado.h: 34: }
 20976                           ;teclado.h: 35: if (PORTBbits.RB4 && flag_b_menos) {
 20977  007814  A881               	btfss	3969,4,c	;volatile
 20978  007816  D007               	goto	i2l453
 20979  007818  5063               	movf	_flag_b_menos,w,c
 20980  00781A  B4D8               	btfsc	status,2,c
 20981  00781C  D004               	goto	i2l453
 20982                           
 20983                           ;teclado.h: 36: _b_menos = 1;
 20984  00781E  0E01               	movlw	1
 20985  007820  6E62               	movwf	__b_menos,c
 20986                           
 20987                           ;teclado.h: 37: flag_b_menos = 0;
 20988  007822  0E00               	movlw	0
 20989  007824  6E63               	movwf	_flag_b_menos,c
 20990  007826                     i2l453:
 20991  007826  FFFF               	dw	65535	; assembler added errata NOP
 20992                           
 20993                           ;teclado.h: 38: }
 20994                           ;teclado.h: 40: if (!PORTBbits.RB5) {
 20995  007828  BA81               	btfsc	3969,5,c	;volatile
 20996  00782A  D002               	goto	i2l454
 20997                           
 20998                           ;teclado.h: 41: flag_b_mais = 1;
 20999  00782C  0E01               	movlw	1
 21000  00782E  6E61               	movwf	_flag_b_mais,c
 21001  007830                     i2l454:
 21002  007830  FFFF               	dw	65535	; assembler added errata NOP
 21003                           
 21004                           ;teclado.h: 42: }
 21005                           ;teclado.h: 43: if (PORTBbits.RB5 && flag_b_mais) {
 21006  007832  AA81               	btfss	3969,5,c	;volatile
 21007  007834  D007               	goto	i2l455
 21008  007836  5061               	movf	_flag_b_mais,w,c
 21009  007838  B4D8               	btfsc	status,2,c
 21010  00783A  D004               	goto	i2l455
 21011                           
 21012                           ;teclado.h: 44: _b_mais = 1;
 21013  00783C  0E01               	movlw	1
 21014  00783E  6E60               	movwf	__b_mais,c
 21015                           
 21016                           ;teclado.h: 45: flag_b_mais = 0;
 21017  007840  0E00               	movlw	0
 21018  007842  6E61               	movwf	_flag_b_mais,c
 21019  007844                     i2l455:
 21020  007844  FFFF               	dw	65535	; assembler added errata NOP
 21021                           
 21022                           ;teclado.h: 46: }
 21023                           ;teclado.h: 48: if (!PORTBbits.RB3) {
 21024  007846  B681               	btfsc	3969,3,c	;volatile
 21025  007848  D002               	goto	i2l456
 21026                           
 21027                           ;teclado.h: 49: flag_b_ok = 1;
 21028  00784A  0E01               	movlw	1
 21029  00784C  6E5F               	movwf	_flag_b_ok,c
 21030  00784E                     i2l456:
 21031  00784E  FFFF               	dw	65535	; assembler added errata NOP
 21032                           
 21033                           ;teclado.h: 50: }
 21034                           ;teclado.h: 51: if (PORTBbits.RB3 && flag_b_ok) {
 21035  007850  A681               	btfss	3969,3,c	;volatile
 21036  007852  D007               	goto	i2l457
 21037  007854  505F               	movf	_flag_b_ok,w,c
 21038  007856  B4D8               	btfsc	status,2,c
 21039  007858  D004               	goto	i2l457
 21040                           
 21041                           ;teclado.h: 52: _b_ok = 1;
 21042  00785A  0E01               	movlw	1
 21043  00785C  6E5E               	movwf	__b_ok,c
 21044                           
 21045                           ;teclado.h: 53: flag_b_ok = 0;
 21046  00785E  0E00               	movlw	0
 21047  007860  6E5F               	movwf	_flag_b_ok,c
 21048  007862                     i2l457:
 21049  007862  FFFF               	dw	65535	; assembler added errata NOP
 21050  007864  0012               	return		;funcret
 21051  007866  FFFF               	dw	65535	; errata NOP
 21052  007868                     __end_of_readButtons:
 21053                           	opt stack 0
 21054                           tosu	equ	0xFFF
 21055                           tosh	equ	0xFFE
 21056                           tosl	equ	0xFFD
 21057                           pclatu	equ	0xFFB
 21058                           pclath	equ	0xFFA
 21059                           tblptru	equ	0xFF8
 21060                           tblptrh	equ	0xFF7
 21061                           tblptrl	equ	0xFF6
 21062                           tablat	equ	0xFF5
 21063                           prodh	equ	0xFF4
 21064                           prodl	equ	0xFF3
 21065                           intcon	equ	0xFF2
 21066                           indf0	equ	0xFEF
 21067                           postinc0	equ	0xFEE
 21068                           fsr0h	equ	0xFEA
 21069                           fsr0l	equ	0xFE9
 21070                           wreg	equ	0xFE8
 21071                           postdec1	equ	0xFE5
 21072                           fsr1h	equ	0xFE2
 21073                           fsr1l	equ	0xFE1
 21074                           indf2	equ	0xFDF
 21075                           postinc2	equ	0xFDE
 21076                           postdec2	equ	0xFDD
 21077                           fsr2h	equ	0xFDA
 21078                           fsr2l	equ	0xFD9
 21079                           status	equ	0xFD8
 21080                           
 21081 ;; *************** function _lerTransdutor *****************
 21082 ;; Defined at:
 21083 ;;		line 7 in file "transdutor.h"
 21084 ;; Parameters:    Size  Location     Type
 21085 ;;		None
 21086 ;; Auto vars:     Size  Location     Type
 21087 ;;  tensao          3   45[COMRAM] float 
 21088 ;;  _pressao        3   42[COMRAM] float 
 21089 ;;  i               1   41[COMRAM] unsigned char 
 21090 ;; Return value:  Size  Location     Type
 21091 ;;                  1    wreg      void 
 21092 ;; Registers used:
 21093 ;;		wreg, status,2, status,0, cstack
 21094 ;; Tracked objects:
 21095 ;;		On entry : 0/0
 21096 ;;		On exit  : 0/0
 21097 ;;		Unchanged: 0/0
 21098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21099 ;;      Params:         0       0       0       0       0       0       0
 21100 ;;      Locals:         7       0       0       0       0       0       0
 21101 ;;      Temps:          0       0       0       0       0       0       0
 21102 ;;      Totals:         7       0       0       0       0       0       0
 21103 ;;Total ram usage:        7 bytes
 21104 ;; Hardware stack levels used:    1
 21105 ;; Hardware stack levels required when called:    2
 21106 ;; This function calls:
 21107 ;;		___ftadd
 21108 ;;		___ftdiv
 21109 ;;		___ftge
 21110 ;;		___ftmul
 21111 ;;		___fttol
 21112 ;;		___lwtoft
 21113 ;;		_readADC
 21114 ;; This function is called by:
 21115 ;;		_TIMER
 21116 ;; This function uses a non-reentrant model
 21117 ;;
 21118                           
 21119                           	psect	text88
 21120  001FD6                     __ptext88:
 21121                           	opt stack 0
 21122  001FD6                     _lerTransdutor:
 21123                           	opt stack 0
 21124  001FD6  FFFF               	dw	65535	; assembler added errata NOP
 21125                           
 21126                           ;transdutor.h: 8: char i = 0;
 21127                           
 21128                           ;incstack = 0
 21129  001FD8  0E00               	movlw	0
 21130  001FDA  6E2A               	movwf	lerTransdutor@i,c
 21131                           
 21132                           ;transdutor.h: 9: float tensao = 0, _pressao = 0;
 21133  001FDC  0E00               	movlw	0
 21134  001FDE  6E2E               	movwf	lerTransdutor@tensao,c
 21135  001FE0  0E00               	movlw	0
 21136  001FE2  6E2F               	movwf	lerTransdutor@tensao+1,c
 21137  001FE4  0E00               	movlw	0
 21138  001FE6  6E30               	movwf	lerTransdutor@tensao+2,c
 21139  001FE8  0E00               	movlw	0
 21140  001FEA  6E2B               	movwf	lerTransdutor@_pressao,c
 21141  001FEC  0E00               	movlw	0
 21142  001FEE  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21143  001FF0  0E00               	movlw	0
 21144  001FF2  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21145                           
 21146                           ;transdutor.h: 10: for (i = 0; i < 9; i++) {
 21147  001FF4  0E00               	movlw	0
 21148  001FF6  6E2A               	movwf	lerTransdutor@i,c
 21149  001FF8                     i2l6374:
 21150  001FF8  FFFF               	dw	65535	; assembler added errata NOP
 21151  001FFA  0E08               	movlw	8
 21152  001FFC  642A               	cpfsgt	lerTransdutor@i,c
 21153  001FFE  D001               	goto	i2l228
 21154  002000  D02D               	goto	i2u678_40
 21155  002002                     i2l228:
 21156  002002  FFFF               	dw	65535	; assembler added errata NOP
 21157                           
 21158                           ;transdutor.h: 11: tensao += readADC()*0.004887586;
 21159  002004  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21160  002008  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21161  00200C  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21162  002010  0E28               	movlw	40
 21163  002012  6E0F               	movwf	___ftmul@f2,c
 21164  002014  0EA0               	movlw	160
 21165  002016  6E10               	movwf	___ftmul@f2+1,c
 21166  002018  0E3B               	movlw	59
 21167  00201A  6E11               	movwf	___ftmul@f2+2,c
 21168  00201C  ECEF  F036         	call	_readADC	;wreg free
 21169  002020  C001  F009         	movff	?_readADC,___lwtoft@c
 21170  002024  C002  F00A         	movff	?_readADC+1,___lwtoft@c+1
 21171  002028  ECDB  F036         	call	___lwtoft	;wreg free
 21172  00202C  C009  F00C         	movff	?___lwtoft,___ftmul@f1
 21173  002030  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
 21174  002034  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
 21175  002038  EC78  F01A         	call	___ftmul	;wreg free
 21176  00203C  C00C  F01E         	movff	?___ftmul,___ftadd@f2
 21177  002040  C00D  F01F         	movff	?___ftmul+1,___ftadd@f2+1
 21178  002044  C00E  F020         	movff	?___ftmul+2,___ftadd@f2+2
 21179  002048  ECE7  F013         	call	___ftadd	;wreg free
 21180  00204C  C01B  F02E         	movff	?___ftadd,lerTransdutor@tensao
 21181  002050  C01C  F02F         	movff	?___ftadd+1,lerTransdutor@tensao+1
 21182  002054  C01D  F030         	movff	?___ftadd+2,lerTransdutor@tensao+2
 21183  002058  2A2A               	incf	lerTransdutor@i,f,c
 21184  00205A  D7CE               	goto	i2l6374
 21185  00205C                     i2u678_40:
 21186  00205C  FFFF               	dw	65535	; assembler added errata NOP
 21187                           
 21188                           ;transdutor.h: 12: }
 21189                           ;transdutor.h: 13: tensao = tensao / 10;
 21190  00205E  C02E  F01B         	movff	lerTransdutor@tensao,___ftdiv@f1
 21191  002062  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftdiv@f1+1
 21192  002066  C030  F01D         	movff	lerTransdutor@tensao+2,___ftdiv@f1+2
 21193  00206A  0E00               	movlw	0
 21194  00206C  6E1E               	movwf	___ftdiv@f2,c
 21195  00206E  0E20               	movlw	32
 21196  002070  6E1F               	movwf	___ftdiv@f2+1,c
 21197  002072  0E41               	movlw	65
 21198  002074  6E20               	movwf	___ftdiv@f2+2,c
 21199  002076  ECDE  F01B         	call	___ftdiv	;wreg free
 21200  00207A  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21201  00207E  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21202  002082  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21203                           
 21204                           ;transdutor.h: 14: _tensao += (float) tensao;
 21205  002086  C04C  F01B         	movff	__tensao,___ftadd@f1
 21206  00208A  C04D  F01C         	movff	__tensao+1,___ftadd@f1+1
 21207  00208E  C04E  F01D         	movff	__tensao+2,___ftadd@f1+2
 21208  002092  C02E  F01E         	movff	lerTransdutor@tensao,___ftadd@f2
 21209  002096  C02F  F01F         	movff	lerTransdutor@tensao+1,___ftadd@f2+1
 21210  00209A  C030  F020         	movff	lerTransdutor@tensao+2,___ftadd@f2+2
 21211  00209E  ECE7  F013         	call	___ftadd	;wreg free
 21212  0020A2  C01B  F04C         	movff	?___ftadd,__tensao
 21213  0020A6  C01C  F04D         	movff	?___ftadd+1,__tensao+1
 21214  0020AA  C01D  F04E         	movff	?___ftadd+2,__tensao+2
 21215                           
 21216                           ;transdutor.h: 15: qtd_leitura++;
 21217  0020AE  2A6D               	incf	_qtd_leitura,f,c
 21218                           
 21219                           ;transdutor.h: 17: if (tensao < 0.4) {
 21220  0020B0  C02E  F001         	movff	lerTransdutor@tensao,___ftge@ff1
 21221  0020B4  C02F  F002         	movff	lerTransdutor@tensao+1,___ftge@ff1+1
 21222  0020B8  C030  F003         	movff	lerTransdutor@tensao+2,___ftge@ff1+2
 21223  0020BC  0ECD               	movlw	205
 21224  0020BE  6E04               	movwf	___ftge@ff2,c
 21225  0020C0  0ECC               	movlw	204
 21226  0020C2  6E05               	movwf	___ftge@ff2+1,c
 21227  0020C4  0E3E               	movlw	62
 21228  0020C6  6E06               	movwf	___ftge@ff2+2,c
 21229  0020C8  ECB5  F01E         	call	___ftge	;wreg free
 21230  0020CC  B0D8               	btfsc	status,0,c
 21231  0020CE  D005               	goto	i2l230
 21232                           
 21233                           ;transdutor.h: 18: pressao = -10;
 21234  0020D0  0EFF               	movlw	255
 21235  0020D2  0100               	movlb	0	; () banked
 21236  0020D4  6FF9               	movwf	(_pressao+1)& (0+255),b
 21237  0020D6  0EF6               	movlw	246
 21238  0020D8  D015               	goto	L42
 21239  0020DA                     i2l230:
 21240  0020DA  FFFF               	dw	65535	; assembler added errata NOP
 21241                           
 21242                           ; BSR set to: 0
 21243  0020DC  0E00               	movlw	0
 21244  0020DE  6E01               	movwf	___ftge@ff1,c
 21245  0020E0  0E90               	movlw	144
 21246  0020E2  6E02               	movwf	___ftge@ff1+1,c
 21247  0020E4  0E40               	movlw	64
 21248  0020E6  6E03               	movwf	___ftge@ff1+2,c
 21249  0020E8  C02E  F004         	movff	lerTransdutor@tensao,___ftge@ff2
 21250  0020EC  C02F  F005         	movff	lerTransdutor@tensao+1,___ftge@ff2+1
 21251  0020F0  C030  F006         	movff	lerTransdutor@tensao+2,___ftge@ff2+2
 21252  0020F4  ECB5  F01E         	call	___ftge	;wreg free
 21253  0020F8  B0D8               	btfsc	status,0,c
 21254  0020FA  D009               	goto	i2l232
 21255                           
 21256                           ;transdutor.h: 21: pressao = 99;
 21257  0020FC  0E00               	movlw	0
 21258  0020FE  0100               	movlb	0	; () banked
 21259  002100  6FF9               	movwf	(_pressao+1)& (0+255),b
 21260  002102  0E63               	movlw	99
 21261  002104                     L42:
 21262  002104  FFFF               	dw	65535	; assembler added errata NOP
 21263  002106  6FF8               	movwf	_pressao& (0+255),b
 21264                           
 21265                           ;transdutor.h: 22: flagErroTransdutor = 1;
 21266  002108  0E01               	movlw	1
 21267  00210A  6E72               	movwf	_flagErroTransdutor,c
 21268                           
 21269                           ;transdutor.h: 23: } else if (qtd_leitura >= 6) {
 21270  00210C  D07B               	goto	i2l234
 21271  00210E                     i2l232:
 21272  00210E  FFFF               	dw	65535	; assembler added errata NOP
 21273                           
 21274                           ; BSR set to: 0
 21275  002110  0E05               	movlw	5
 21276  002112  646D               	cpfsgt	_qtd_leitura,c
 21277  002114  D077               	goto	i2l234
 21278                           
 21279                           ;transdutor.h: 24: flagErroTransdutor = 0;
 21280  002116  0E00               	movlw	0
 21281  002118  6E72               	movwf	_flagErroTransdutor,c
 21282                           
 21283                           ;transdutor.h: 25: qtd_leitura = 0;
 21284  00211A  0E00               	movlw	0
 21285  00211C  6E6D               	movwf	_qtd_leitura,c
 21286                           
 21287                           ;transdutor.h: 26: tensao = (float) (_tensao / 6);
 21288  00211E  C04C  F01B         	movff	__tensao,___ftdiv@f1
 21289  002122  C04D  F01C         	movff	__tensao+1,___ftdiv@f1+1
 21290  002126  C04E  F01D         	movff	__tensao+2,___ftdiv@f1+2
 21291  00212A  0E00               	movlw	0
 21292  00212C  6E1E               	movwf	___ftdiv@f2,c
 21293  00212E  0EC0               	movlw	192
 21294  002130  6E1F               	movwf	___ftdiv@f2+1,c
 21295  002132  0E40               	movlw	64
 21296  002134  6E20               	movwf	___ftdiv@f2+2,c
 21297  002136  ECDE  F01B         	call	___ftdiv	;wreg free
 21298  00213A  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21299  00213E  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21300  002142  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21301                           
 21302                           ;transdutor.h: 27: _tensao = 0;
 21303  002146  0E00               	movlw	0
 21304  002148  6E4C               	movwf	__tensao,c
 21305  00214A  0E00               	movlw	0
 21306  00214C  6E4D               	movwf	__tensao+1,c
 21307  00214E  0E00               	movlw	0
 21308  002150  6E4E               	movwf	__tensao+2,c
 21309                           
 21310                           ;transdutor.h: 28: _pressao = tensao - 0.5;
 21311  002152  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21312  002156  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21313  00215A  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21314  00215E  0E00               	movlw	0
 21315  002160  6E1E               	movwf	___ftadd@f2,c
 21316  002162  0E00               	movlw	0
 21317  002164  6E1F               	movwf	___ftadd@f2+1,c
 21318  002166  0EBF               	movlw	191
 21319  002168  6E20               	movwf	___ftadd@f2+2,c
 21320  00216A  ECE7  F013         	call	___ftadd	;wreg free
 21321  00216E  C01B  F02B         	movff	?___ftadd,lerTransdutor@_pressao
 21322  002172  C01C  F02C         	movff	?___ftadd+1,lerTransdutor@_pressao+1
 21323  002176  C01D  F02D         	movff	?___ftadd+2,lerTransdutor@_pressao+2
 21324                           
 21325                           ;transdutor.h: 29: _pressao = _pressao * 10 / 4;
 21326  00217A  0E00               	movlw	0
 21327  00217C  6E0F               	movwf	___ftmul@f2,c
 21328  00217E  0E20               	movlw	32
 21329  002180  6E10               	movwf	___ftmul@f2+1,c
 21330  002182  0E41               	movlw	65
 21331  002184  6E11               	movwf	___ftmul@f2+2,c
 21332  002186  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21333  00218A  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21334  00218E  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21335  002192  EC78  F01A         	call	___ftmul	;wreg free
 21336  002196  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
 21337  00219A  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
 21338  00219E  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
 21339  0021A2  0E00               	movlw	0
 21340  0021A4  6E1E               	movwf	___ftdiv@f2,c
 21341  0021A6  0E80               	movlw	128
 21342  0021A8  6E1F               	movwf	___ftdiv@f2+1,c
 21343  0021AA  0E40               	movlw	64
 21344  0021AC  6E20               	movwf	___ftdiv@f2+2,c
 21345  0021AE  ECDE  F01B         	call	___ftdiv	;wreg free
 21346  0021B2  C01B  F02B         	movff	?___ftdiv,lerTransdutor@_pressao
 21347  0021B6  C01C  F02C         	movff	?___ftdiv+1,lerTransdutor@_pressao+1
 21348  0021BA  C01D  F02D         	movff	?___ftdiv+2,lerTransdutor@_pressao+2
 21349                           
 21350                           ;transdutor.h: 30: if (_pressao < 0) {
 21351  0021BE  AE2D               	btfss	lerTransdutor@_pressao+2,7,c
 21352  0021C0  D006               	goto	i2l235
 21353                           
 21354                           ;transdutor.h: 31: _pressao = 0;
 21355  0021C2  0E00               	movlw	0
 21356  0021C4  6E2B               	movwf	lerTransdutor@_pressao,c
 21357  0021C6  0E00               	movlw	0
 21358  0021C8  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21359  0021CA  0E00               	movlw	0
 21360  0021CC  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21361  0021CE                     i2l235:
 21362  0021CE  FFFF               	dw	65535	; assembler added errata NOP
 21363                           
 21364                           ;transdutor.h: 32: }
 21365                           ;transdutor.h: 33: pressao = _pressao * 10;
 21366  0021D0  0E00               	movlw	0
 21367  0021D2  6E0F               	movwf	___ftmul@f2,c
 21368  0021D4  0E20               	movlw	32
 21369  0021D6  6E10               	movwf	___ftmul@f2+1,c
 21370  0021D8  0E41               	movlw	65
 21371  0021DA  6E11               	movwf	___ftmul@f2+2,c
 21372  0021DC  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21373  0021E0  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21374  0021E4  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21375  0021E8  EC78  F01A         	call	___ftmul	;wreg free
 21376  0021EC  C00C  F01B         	movff	?___ftmul,___fttol@f1
 21377  0021F0  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
 21378  0021F4  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
 21379  0021F8  EC6A  F01B         	call	___fttol	;wreg free
 21380  0021FC  C01B  F0F8         	movff	?___fttol,_pressao
 21381  002200  C01C  F0F9         	movff	?___fttol+1,_pressao+1
 21382  002204                     i2l234:
 21383  002204  FFFF               	dw	65535	; assembler added errata NOP
 21384  002206  0012               	return		;funcret
 21385  002208  FFFF               	dw	65535	; errata NOP
 21386  00220A                     __end_of_lerTransdutor:
 21387                           	opt stack 0
 21388                           tosu	equ	0xFFF
 21389                           tosh	equ	0xFFE
 21390                           tosl	equ	0xFFD
 21391                           pclatu	equ	0xFFB
 21392                           pclath	equ	0xFFA
 21393                           tblptru	equ	0xFF8
 21394                           tblptrh	equ	0xFF7
 21395                           tblptrl	equ	0xFF6
 21396                           tablat	equ	0xFF5
 21397                           prodh	equ	0xFF4
 21398                           prodl	equ	0xFF3
 21399                           intcon	equ	0xFF2
 21400                           indf0	equ	0xFEF
 21401                           postinc0	equ	0xFEE
 21402                           fsr0h	equ	0xFEA
 21403                           fsr0l	equ	0xFE9
 21404                           wreg	equ	0xFE8
 21405                           postdec1	equ	0xFE5
 21406                           fsr1h	equ	0xFE2
 21407                           fsr1l	equ	0xFE1
 21408                           indf2	equ	0xFDF
 21409                           postinc2	equ	0xFDE
 21410                           postdec2	equ	0xFDD
 21411                           fsr2h	equ	0xFDA
 21412                           fsr2l	equ	0xFD9
 21413                           status	equ	0xFD8
 21414                           
 21415 ;; *************** function _readADC *****************
 21416 ;; Defined at:
 21417 ;;		line 8 in file "adc.h"
 21418 ;; Parameters:    Size  Location     Type
 21419 ;;		None
 21420 ;; Auto vars:     Size  Location     Type
 21421 ;;		None
 21422 ;; Return value:  Size  Location     Type
 21423 ;;                  2    0[COMRAM] unsigned int 
 21424 ;; Registers used:
 21425 ;;		wreg, status,2, status,0
 21426 ;; Tracked objects:
 21427 ;;		On entry : 0/0
 21428 ;;		On exit  : 0/0
 21429 ;;		Unchanged: 0/0
 21430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21431 ;;      Params:         2       0       0       0       0       0       0
 21432 ;;      Locals:         0       0       0       0       0       0       0
 21433 ;;      Temps:          2       0       0       0       0       0       0
 21434 ;;      Totals:         4       0       0       0       0       0       0
 21435 ;;Total ram usage:        4 bytes
 21436 ;; Hardware stack levels used:    1
 21437 ;; This function calls:
 21438 ;;		Nothing
 21439 ;; This function is called by:
 21440 ;;		_lerTransdutor
 21441 ;; This function uses a non-reentrant model
 21442 ;;
 21443                           
 21444                           	psect	text89
 21445  006DDE                     __ptext89:
 21446                           	opt stack 0
 21447  006DDE                     _readADC:
 21448                           	opt stack 0
 21449  006DDE  FFFF               	dw	65535	; assembler added errata NOP
 21450                           
 21451                           ;adc.h: 9: ADCON0bits.GO = 1;
 21452                           
 21453                           ;incstack = 0
 21454  006DE0  84C2               	bsf	4034,2,c	;volatile
 21455                           
 21456                           ;adc.h: 10: _delay((unsigned long)((50)*(8000000/4000000.0)));
 21457  006DE2  0E19               	movlw	25
 21458  006DE4                     i2u910_47:
 21459  006DE4  FFFF               	dw	65535	; errata NOP
 21460  006DE6  2EE8               	decfsz	wreg,f,c
 21461  006DE8  D7FD               	bra	i2u910_47
 21462  006DEA  FFFF               	dw	65535	; assembler added errata NOP
 21463  006DEC  A4C2               	btfss	4034,2,c	;volatile
 21464  006DEE  D7FD               	goto	i2l223
 21465                           
 21466                           ;adc.h: 12: }
 21467                           ;adc.h: 13: return((ADRESH<<8)+ ADRESL);
 21468  006DF0  50C4               	movf	4036,w,c	;volatile
 21469  006DF2  6E04               	movwf	(??_readADC+1)& (0+255),c
 21470  006DF4  6A03               	clrf	??_readADC& (0+255),c
 21471  006DF6  50C3               	movf	4035,w,c	;volatile
 21472  006DF8  2403               	addwf	??_readADC,w,c
 21473  006DFA  6E01               	movwf	?_readADC,c
 21474  006DFC  0E00               	movlw	0
 21475  006DFE  2004               	addwfc	??_readADC+1,w,c
 21476  006E00  6E02               	movwf	?_readADC+1,c
 21477  006E02  0012               	return		;funcret
 21478  006E04  FFFF               	dw	65535	; errata NOP
 21479  006E06                     __end_of_readADC:
 21480                           	opt stack 0
 21481                           tosu	equ	0xFFF
 21482                           tosh	equ	0xFFE
 21483                           tosl	equ	0xFFD
 21484                           pclatu	equ	0xFFB
 21485                           pclath	equ	0xFFA
 21486                           tblptru	equ	0xFF8
 21487                           tblptrh	equ	0xFF7
 21488                           tblptrl	equ	0xFF6
 21489                           tablat	equ	0xFF5
 21490                           prodh	equ	0xFF4
 21491                           prodl	equ	0xFF3
 21492                           intcon	equ	0xFF2
 21493                           indf0	equ	0xFEF
 21494                           postinc0	equ	0xFEE
 21495                           fsr0h	equ	0xFEA
 21496                           fsr0l	equ	0xFE9
 21497                           wreg	equ	0xFE8
 21498                           postdec1	equ	0xFE5
 21499                           fsr1h	equ	0xFE2
 21500                           fsr1l	equ	0xFE1
 21501                           indf2	equ	0xFDF
 21502                           postinc2	equ	0xFDE
 21503                           postdec2	equ	0xFDD
 21504                           fsr2h	equ	0xFDA
 21505                           fsr2l	equ	0xFD9
 21506                           status	equ	0xFD8
 21507                           
 21508 ;; *************** function ___lwtoft *****************
 21509 ;; Defined at:
 21510 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 21511 ;; Parameters:    Size  Location     Type
 21512 ;;  c               2    8[COMRAM] unsigned int 
 21513 ;; Auto vars:     Size  Location     Type
 21514 ;;		None
 21515 ;; Return value:  Size  Location     Type
 21516 ;;                  3    8[COMRAM] float 
 21517 ;; Registers used:
 21518 ;;		wreg, status,2, status,0, cstack
 21519 ;; Tracked objects:
 21520 ;;		On entry : 0/0
 21521 ;;		On exit  : 0/0
 21522 ;;		Unchanged: 0/0
 21523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21524 ;;      Params:         3       0       0       0       0       0       0
 21525 ;;      Locals:         0       0       0       0       0       0       0
 21526 ;;      Temps:          0       0       0       0       0       0       0
 21527 ;;      Totals:         3       0       0       0       0       0       0
 21528 ;;Total ram usage:        3 bytes
 21529 ;; Hardware stack levels used:    1
 21530 ;; Hardware stack levels required when called:    1
 21531 ;; This function calls:
 21532 ;;		___ftpack
 21533 ;; This function is called by:
 21534 ;;		_lerTransdutor
 21535 ;; This function uses a non-reentrant model
 21536 ;;
 21537                           
 21538                           	psect	text90
 21539  006DB6                     __ptext90:
 21540                           	opt stack 0
 21541  006DB6                     ___lwtoft:
 21542                           	opt stack 0
 21543  006DB6  FFFF               	dw	65535	; assembler added errata NOP
 21544                           
 21545                           ;incstack = 0
 21546  006DB8  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 21547  006DBC  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 21548  006DC0  6A03               	clrf	___ftpack@arg+2,c
 21549  006DC2  0E8E               	movlw	142
 21550  006DC4  6E04               	movwf	___ftpack@exp,c
 21551  006DC6  0E00               	movlw	0
 21552  006DC8  6E05               	movwf	___ftpack@sign,c
 21553  006DCA  EC53  F01E         	call	___ftpack	;wreg free
 21554  006DCE  C001  F009         	movff	?___ftpack,?___lwtoft
 21555  006DD2  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 21556  006DD6  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 21557  006DDA  0012               	return		;funcret
 21558  006DDC  FFFF               	dw	65535	; errata NOP
 21559  006DDE                     __end_of___lwtoft:
 21560                           	opt stack 0
 21561                           tosu	equ	0xFFF
 21562                           tosh	equ	0xFFE
 21563                           tosl	equ	0xFFD
 21564                           pclatu	equ	0xFFB
 21565                           pclath	equ	0xFFA
 21566                           tblptru	equ	0xFF8
 21567                           tblptrh	equ	0xFF7
 21568                           tblptrl	equ	0xFF6
 21569                           tablat	equ	0xFF5
 21570                           prodh	equ	0xFF4
 21571                           prodl	equ	0xFF3
 21572                           intcon	equ	0xFF2
 21573                           indf0	equ	0xFEF
 21574                           postinc0	equ	0xFEE
 21575                           fsr0h	equ	0xFEA
 21576                           fsr0l	equ	0xFE9
 21577                           wreg	equ	0xFE8
 21578                           postdec1	equ	0xFE5
 21579                           fsr1h	equ	0xFE2
 21580                           fsr1l	equ	0xFE1
 21581                           indf2	equ	0xFDF
 21582                           postinc2	equ	0xFDE
 21583                           postdec2	equ	0xFDD
 21584                           fsr2h	equ	0xFDA
 21585                           fsr2l	equ	0xFD9
 21586                           status	equ	0xFD8
 21587                           
 21588 ;; *************** function ___fttol *****************
 21589 ;; Defined at:
 21590 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 21591 ;; Parameters:    Size  Location     Type
 21592 ;;  f1              3   26[COMRAM] float 
 21593 ;; Auto vars:     Size  Location     Type
 21594 ;;  lval            4   36[COMRAM] unsigned long 
 21595 ;;  exp1            1   40[COMRAM] unsigned char 
 21596 ;;  sign1           1   35[COMRAM] unsigned char 
 21597 ;; Return value:  Size  Location     Type
 21598 ;;                  4   26[COMRAM] long 
 21599 ;; Registers used:
 21600 ;;		wreg, status,2, status,0
 21601 ;; Tracked objects:
 21602 ;;		On entry : 0/0
 21603 ;;		On exit  : 0/0
 21604 ;;		Unchanged: 0/0
 21605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21606 ;;      Params:         4       0       0       0       0       0       0
 21607 ;;      Locals:         6       0       0       0       0       0       0
 21608 ;;      Temps:          5       0       0       0       0       0       0
 21609 ;;      Totals:        15       0       0       0       0       0       0
 21610 ;;Total ram usage:       15 bytes
 21611 ;; Hardware stack levels used:    1
 21612 ;; This function calls:
 21613 ;;		Nothing
 21614 ;; This function is called by:
 21615 ;;		_lerTransdutor
 21616 ;; This function uses a non-reentrant model
 21617 ;;
 21618                           
 21619                           	psect	text91
 21620  0036D4                     __ptext91:
 21621                           	opt stack 0
 21622  0036D4                     ___fttol:
 21623                           	opt stack 0
 21624  0036D4  FFFF               	dw	65535	; assembler added errata NOP
 21625                           
 21626                           ;incstack = 0
 21627  0036D6  C01D  F01F         	movff	___fttol@f1+2,??___fttol
 21628  0036DA  6A20               	clrf	(??___fttol+1)& (0+255),c
 21629  0036DC  6A21               	clrf	(??___fttol+2)& (0+255),c
 21630  0036DE  341C               	rlcf	___fttol@f1+1,w,c
 21631  0036E0  361F               	rlcf	??___fttol& (0+255),f,c
 21632  0036E2  E301               	bnc	u666_41
 21633  0036E4  8020               	bsf	(??___fttol+1)& (0+255),0,c
 21634  0036E6                     u666_41:
 21635  0036E6  501F               	movf	??___fttol,w,c
 21636  0036E8  6E29               	movwf	___fttol@exp1,c
 21637  0036EA  5029               	movf	___fttol@exp1,w,c
 21638  0036EC  B4D8               	btfsc	status,2,c
 21639  0036EE  D039               	goto	i2u671_40
 21640  0036F0  0E17               	movlw	23
 21641  0036F2  6E1F               	movwf	??___fttol& (0+255),c
 21642  0036F4  C01B  F020         	movff	___fttol@f1,??___fttol+1
 21643  0036F8  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
 21644  0036FC  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
 21645  003700  281F               	incf	??___fttol,w,c
 21646  003702  6E23               	movwf	(??___fttol+4)& (0+255),c
 21647  003704  D005               	goto	i2u668_40
 21648  003706                     i2u668_45:
 21649  003706  FFFF               	dw	65535	; assembler added errata NOP
 21650  003708  90D8               	bcf	status,0,c
 21651  00370A  3222               	rrcf	??___fttol+3,f,c
 21652  00370C  3221               	rrcf	??___fttol+2,f,c
 21653  00370E  3220               	rrcf	??___fttol+1,f,c
 21654  003710                     i2u668_40:
 21655  003710  FFFF               	dw	65535	; assembler added errata NOP
 21656  003712  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
 21657  003714  D7F8               	goto	i2u668_45
 21658  003716  5020               	movf	??___fttol+1,w,c
 21659  003718  6E24               	movwf	___fttol@sign1,c
 21660  00371A  8E1C               	bsf	___fttol@f1+1,7,c
 21661  00371C  0EFF               	movlw	255
 21662  00371E  161B               	andwf	___fttol@f1,f,c
 21663  003720  0EFF               	movlw	255
 21664  003722  161C               	andwf	___fttol@f1+1,f,c
 21665  003724  0E00               	movlw	0
 21666  003726  161D               	andwf	___fttol@f1+2,f,c
 21667  003728  501B               	movf	___fttol@f1,w,c
 21668  00372A  6E25               	movwf	___fttol@lval,c
 21669  00372C  501C               	movf	___fttol@f1+1,w,c
 21670  00372E  6E26               	movwf	___fttol@lval+1,c
 21671  003730  501D               	movf	___fttol@f1+2,w,c
 21672  003732  6E27               	movwf	___fttol@lval+2,c
 21673  003734  6A28               	clrf	___fttol@lval+3,c
 21674  003736  0E8E               	movlw	142
 21675  003738  5E29               	subwf	___fttol@exp1,f,c
 21676  00373A  AE29               	btfss	___fttol@exp1,7,c
 21677  00373C  D00E               	goto	i2l1436
 21678  00373E  5029               	movf	___fttol@exp1,w,c
 21679  003740  0A80               	xorlw	128
 21680  003742  0F8F               	addlw	143
 21681  003744  A0D8               	btfss	status,0,c
 21682  003746  D00D               	goto	i2u671_40
 21683  003748  FFFF               	dw	65535	; assembler added errata NOP
 21684  00374A  90D8               	bcf	status,0,c
 21685  00374C  3228               	rrcf	___fttol@lval+3,f,c
 21686  00374E  3227               	rrcf	___fttol@lval+2,f,c
 21687  003750  3226               	rrcf	___fttol@lval+1,f,c
 21688  003752  3225               	rrcf	___fttol@lval,f,c
 21689  003754  3E29               	incfsz	___fttol@exp1,f,c
 21690  003756  D7F8               	goto	i2l1437
 21691  003758  D019               	goto	i2u672_40
 21692  00375A                     i2l1436:
 21693  00375A  FFFF               	dw	65535	; assembler added errata NOP
 21694  00375C  0E17               	movlw	23
 21695  00375E  6429               	cpfsgt	___fttol@exp1,c
 21696  003760  D011               	goto	i2l1442
 21697  003762                     i2u671_40:
 21698  003762  FFFF               	dw	65535	; assembler added errata NOP
 21699  003764  0E00               	movlw	0
 21700  003766  6E1B               	movwf	?___fttol,c
 21701  003768  0E00               	movlw	0
 21702  00376A  6E1C               	movwf	?___fttol+1,c
 21703  00376C  0E00               	movlw	0
 21704  00376E  6E1D               	movwf	?___fttol+2,c
 21705  003770  0E00               	movlw	0
 21706  003772  6E1E               	movwf	?___fttol+3,c
 21707  003774  D020               	goto	i2l6262
 21708  003776  FFFF               	dw	65535	; assembler added errata NOP
 21709  003778  90D8               	bcf	status,0,c
 21710  00377A  3625               	rlcf	___fttol@lval,f,c
 21711  00377C  3626               	rlcf	___fttol@lval+1,f,c
 21712  00377E  3627               	rlcf	___fttol@lval+2,f,c
 21713  003780  3628               	rlcf	___fttol@lval+3,f,c
 21714  003782  0629               	decf	___fttol@exp1,f,c
 21715  003784                     i2l1442:
 21716  003784  FFFF               	dw	65535	; assembler added errata NOP
 21717  003786  5029               	movf	___fttol@exp1,w,c
 21718  003788  A4D8               	btfss	status,2,c
 21719  00378A  D7F5               	goto	i2l1443
 21720  00378C                     i2u672_40:
 21721  00378C  FFFF               	dw	65535	; assembler added errata NOP
 21722  00378E  5024               	movf	___fttol@sign1,w,c
 21723  003790  B4D8               	btfsc	status,2,c
 21724  003792  D008               	goto	i2l1445
 21725  003794  1E28               	comf	___fttol@lval+3,f,c
 21726  003796  1E27               	comf	___fttol@lval+2,f,c
 21727  003798  1E26               	comf	___fttol@lval+1,f,c
 21728  00379A  6C25               	negf	___fttol@lval,c
 21729  00379C  0E00               	movlw	0
 21730  00379E  2226               	addwfc	___fttol@lval+1,f,c
 21731  0037A0  2227               	addwfc	___fttol@lval+2,f,c
 21732  0037A2  2228               	addwfc	___fttol@lval+3,f,c
 21733  0037A4                     i2l1445:
 21734  0037A4  FFFF               	dw	65535	; assembler added errata NOP
 21735  0037A6  C025  F01B         	movff	___fttol@lval,?___fttol
 21736  0037AA  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
 21737  0037AE  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
 21738  0037B2  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
 21739  0037B6                     i2l6262:
 21740  0037B6  FFFF               	dw	65535	; assembler added errata NOP
 21741  0037B8  0012               	return		;funcret
 21742  0037BA  FFFF               	dw	65535	; errata NOP
 21743  0037BC                     __end_of___fttol:
 21744                           	opt stack 0
 21745                           tosu	equ	0xFFF
 21746                           tosh	equ	0xFFE
 21747                           tosl	equ	0xFFD
 21748                           pclatu	equ	0xFFB
 21749                           pclath	equ	0xFFA
 21750                           tblptru	equ	0xFF8
 21751                           tblptrh	equ	0xFF7
 21752                           tblptrl	equ	0xFF6
 21753                           tablat	equ	0xFF5
 21754                           prodh	equ	0xFF4
 21755                           prodl	equ	0xFF3
 21756                           intcon	equ	0xFF2
 21757                           indf0	equ	0xFEF
 21758                           postinc0	equ	0xFEE
 21759                           fsr0h	equ	0xFEA
 21760                           fsr0l	equ	0xFE9
 21761                           wreg	equ	0xFE8
 21762                           postdec1	equ	0xFE5
 21763                           fsr1h	equ	0xFE2
 21764                           fsr1l	equ	0xFE1
 21765                           indf2	equ	0xFDF
 21766                           postinc2	equ	0xFDE
 21767                           postdec2	equ	0xFDD
 21768                           fsr2h	equ	0xFDA
 21769                           fsr2l	equ	0xFD9
 21770                           status	equ	0xFD8
 21771                           
 21772 ;; *************** function ___ftmul *****************
 21773 ;; Defined at:
 21774 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 21775 ;; Parameters:    Size  Location     Type
 21776 ;;  f1              3   11[COMRAM] float 
 21777 ;;  f2              3   14[COMRAM] float 
 21778 ;; Auto vars:     Size  Location     Type
 21779 ;;  f3_as_produc    3   21[COMRAM] unsigned um
 21780 ;;  sign            1   25[COMRAM] unsigned char 
 21781 ;;  cntr            1   24[COMRAM] unsigned char 
 21782 ;;  exp             1   20[COMRAM] unsigned char 
 21783 ;; Return value:  Size  Location     Type
 21784 ;;                  3   11[COMRAM] float 
 21785 ;; Registers used:
 21786 ;;		wreg, status,2, status,0, cstack
 21787 ;; Tracked objects:
 21788 ;;		On entry : 0/0
 21789 ;;		On exit  : 0/0
 21790 ;;		Unchanged: 0/0
 21791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21792 ;;      Params:         6       0       0       0       0       0       0
 21793 ;;      Locals:         6       0       0       0       0       0       0
 21794 ;;      Temps:          3       0       0       0       0       0       0
 21795 ;;      Totals:        15       0       0       0       0       0       0
 21796 ;;Total ram usage:       15 bytes
 21797 ;; Hardware stack levels used:    1
 21798 ;; Hardware stack levels required when called:    1
 21799 ;; This function calls:
 21800 ;;		___ftpack
 21801 ;; This function is called by:
 21802 ;;		_lerTransdutor
 21803 ;;		_map
 21804 ;; This function uses a non-reentrant model
 21805 ;;
 21806                           
 21807                           	psect	text92
 21808  0034F0                     __ptext92:
 21809                           	opt stack 0
 21810  0034F0                     ___ftmul:
 21811                           	opt stack 0
 21812  0034F0  FFFF               	dw	65535	; assembler added errata NOP
 21813                           
 21814                           ;incstack = 0
 21815  0034F2  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
 21816  0034F6  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21817  0034F8  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21818  0034FA  340D               	rlcf	___ftmul@f1+1,w,c
 21819  0034FC  3612               	rlcf	??___ftmul& (0+255),f,c
 21820  0034FE  E301               	bnc	u657_41
 21821  003500  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21822  003502                     u657_41:
 21823  003502  5012               	movf	??___ftmul,w,c
 21824  003504  6E15               	movwf	___ftmul@exp,c
 21825  003506  5015               	movf	___ftmul@exp,w,c
 21826  003508  B4D8               	btfsc	status,2,c
 21827  00350A  D00D               	goto	i2u660_40
 21828  00350C  C011  F012         	movff	___ftmul@f2+2,??___ftmul
 21829  003510  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21830  003512  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21831  003514  3410               	rlcf	___ftmul@f2+1,w,c
 21832  003516  3612               	rlcf	??___ftmul& (0+255),f,c
 21833  003518  E301               	bnc	u659_41
 21834  00351A  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21835  00351C                     u659_41:
 21836  00351C  5012               	movf	??___ftmul,w,c
 21837  00351E  6E1A               	movwf	___ftmul@sign,c
 21838  003520  501A               	movf	___ftmul@sign,w,c
 21839  003522  A4D8               	btfss	status,2,c
 21840  003524  D008               	goto	i2l1415
 21841  003526                     i2u660_40:
 21842  003526  FFFF               	dw	65535	; assembler added errata NOP
 21843  003528  0E00               	movlw	0
 21844  00352A  6E0C               	movwf	?___ftmul,c
 21845  00352C  0E00               	movlw	0
 21846  00352E  6E0D               	movwf	?___ftmul+1,c
 21847  003530  0E00               	movlw	0
 21848  003532  6E0E               	movwf	?___ftmul+2,c
 21849  003534  D056               	goto	i2l6198
 21850  003536                     i2l1415:
 21851  003536  FFFF               	dw	65535	; assembler added errata NOP
 21852  003538  501A               	movf	___ftmul@sign,w,c
 21853  00353A  0F7B               	addlw	123
 21854  00353C  2615               	addwf	___ftmul@exp,f,c
 21855  00353E  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
 21856  003542  5011               	movf	___ftmul@f2+2,w,c
 21857  003544  1A1A               	xorwf	___ftmul@sign,f,c
 21858  003546  0E80               	movlw	128
 21859  003548  161A               	andwf	___ftmul@sign,f,c
 21860  00354A  8E0D               	bsf	___ftmul@f1+1,7,c
 21861  00354C  8E10               	bsf	___ftmul@f2+1,7,c
 21862  00354E  0EFF               	movlw	255
 21863  003550  160F               	andwf	___ftmul@f2,f,c
 21864  003552  0EFF               	movlw	255
 21865  003554  1610               	andwf	___ftmul@f2+1,f,c
 21866  003556  0E00               	movlw	0
 21867  003558  1611               	andwf	___ftmul@f2+2,f,c
 21868  00355A  0E00               	movlw	0
 21869  00355C  6E16               	movwf	___ftmul@f3_as_product,c
 21870  00355E  0E00               	movlw	0
 21871  003560  6E17               	movwf	___ftmul@f3_as_product+1,c
 21872  003562  0E00               	movlw	0
 21873  003564  6E18               	movwf	___ftmul@f3_as_product+2,c
 21874  003566  0E07               	movlw	7
 21875  003568  6E19               	movwf	___ftmul@cntr,c
 21876  00356A  FFFF               	dw	65535	; assembler added errata NOP
 21877  00356C  A00C               	btfss	___ftmul@f1,0,c
 21878  00356E  D006               	goto	i2l1417
 21879  003570  500F               	movf	___ftmul@f2,w,c
 21880  003572  2616               	addwf	___ftmul@f3_as_product,f,c
 21881  003574  5010               	movf	___ftmul@f2+1,w,c
 21882  003576  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 21883  003578  5011               	movf	___ftmul@f2+2,w,c
 21884  00357A  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 21885  00357C                     i2l1417:
 21886  00357C  FFFF               	dw	65535	; assembler added errata NOP
 21887  00357E  90D8               	bcf	status,0,c
 21888  003580  320E               	rrcf	___ftmul@f1+2,f,c
 21889  003582  320D               	rrcf	___ftmul@f1+1,f,c
 21890  003584  320C               	rrcf	___ftmul@f1,f,c
 21891  003586  90D8               	bcf	status,0,c
 21892  003588  360F               	rlcf	___ftmul@f2,f,c
 21893  00358A  3610               	rlcf	___ftmul@f2+1,f,c
 21894  00358C  3611               	rlcf	___ftmul@f2+2,f,c
 21895  00358E  2E19               	decfsz	___ftmul@cntr,f,c
 21896  003590  D7EC               	goto	i2l1416
 21897  003592  0E09               	movlw	9
 21898  003594  6E19               	movwf	___ftmul@cntr,c
 21899  003596  FFFF               	dw	65535	; assembler added errata NOP
 21900  003598  A00C               	btfss	___ftmul@f1,0,c
 21901  00359A  D006               	goto	i2l1420
 21902  00359C  500F               	movf	___ftmul@f2,w,c
 21903  00359E  2616               	addwf	___ftmul@f3_as_product,f,c
 21904  0035A0  5010               	movf	___ftmul@f2+1,w,c
 21905  0035A2  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 21906  0035A4  5011               	movf	___ftmul@f2+2,w,c
 21907  0035A6  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 21908  0035A8                     i2l1420:
 21909  0035A8  FFFF               	dw	65535	; assembler added errata NOP
 21910  0035AA  90D8               	bcf	status,0,c
 21911  0035AC  320E               	rrcf	___ftmul@f1+2,f,c
 21912  0035AE  320D               	rrcf	___ftmul@f1+1,f,c
 21913  0035B0  320C               	rrcf	___ftmul@f1,f,c
 21914  0035B2  90D8               	bcf	status,0,c
 21915  0035B4  3218               	rrcf	___ftmul@f3_as_product+2,f,c
 21916  0035B6  3217               	rrcf	___ftmul@f3_as_product+1,f,c
 21917  0035B8  3216               	rrcf	___ftmul@f3_as_product,f,c
 21918  0035BA  2E19               	decfsz	___ftmul@cntr,f,c
 21919  0035BC  D7EC               	goto	i2l1419
 21920  0035BE  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 21921  0035C2  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 21922  0035C6  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 21923  0035CA  C015  F004         	movff	___ftmul@exp,___ftpack@exp
 21924  0035CE  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
 21925  0035D2  EC53  F01E         	call	___ftpack	;wreg free
 21926  0035D6  C001  F00C         	movff	?___ftpack,?___ftmul
 21927  0035DA  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
 21928  0035DE  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
 21929  0035E2                     i2l6198:
 21930  0035E2  FFFF               	dw	65535	; assembler added errata NOP
 21931  0035E4  0012               	return		;funcret
 21932  0035E6  FFFF               	dw	65535	; errata NOP
 21933  0035E8                     __end_of___ftmul:
 21934                           	opt stack 0
 21935                           tosu	equ	0xFFF
 21936                           tosh	equ	0xFFE
 21937                           tosl	equ	0xFFD
 21938                           pclatu	equ	0xFFB
 21939                           pclath	equ	0xFFA
 21940                           tblptru	equ	0xFF8
 21941                           tblptrh	equ	0xFF7
 21942                           tblptrl	equ	0xFF6
 21943                           tablat	equ	0xFF5
 21944                           prodh	equ	0xFF4
 21945                           prodl	equ	0xFF3
 21946                           intcon	equ	0xFF2
 21947                           indf0	equ	0xFEF
 21948                           postinc0	equ	0xFEE
 21949                           fsr0h	equ	0xFEA
 21950                           fsr0l	equ	0xFE9
 21951                           wreg	equ	0xFE8
 21952                           postdec1	equ	0xFE5
 21953                           fsr1h	equ	0xFE2
 21954                           fsr1l	equ	0xFE1
 21955                           indf2	equ	0xFDF
 21956                           postinc2	equ	0xFDE
 21957                           postdec2	equ	0xFDD
 21958                           fsr2h	equ	0xFDA
 21959                           fsr2l	equ	0xFD9
 21960                           status	equ	0xFD8
 21961                           
 21962 ;; *************** function ___ftge *****************
 21963 ;; Defined at:
 21964 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 21965 ;; Parameters:    Size  Location     Type
 21966 ;;  ff1             3    0[COMRAM] float 
 21967 ;;  ff2             3    3[COMRAM] float 
 21968 ;; Auto vars:     Size  Location     Type
 21969 ;;		None
 21970 ;; Return value:  Size  Location     Type
 21971 ;;		None               void
 21972 ;; Registers used:
 21973 ;;		wreg, status,2, status,0
 21974 ;; Tracked objects:
 21975 ;;		On entry : 0/0
 21976 ;;		On exit  : 0/0
 21977 ;;		Unchanged: 0/0
 21978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21979 ;;      Params:         6       0       0       0       0       0       0
 21980 ;;      Locals:         0       0       0       0       0       0       0
 21981 ;;      Temps:          3       0       0       0       0       0       0
 21982 ;;      Totals:         9       0       0       0       0       0       0
 21983 ;;Total ram usage:        9 bytes
 21984 ;; Hardware stack levels used:    1
 21985 ;; This function calls:
 21986 ;;		Nothing
 21987 ;; This function is called by:
 21988 ;;		_lerTransdutor
 21989 ;; This function uses a non-reentrant model
 21990 ;;
 21991                           
 21992                           	psect	text93
 21993  003D6A                     __ptext93:
 21994                           	opt stack 0
 21995  003D6A                     ___ftge:
 21996                           	opt stack 0
 21997  003D6A  FFFF               	dw	65535	; assembler added errata NOP
 21998                           
 21999                           ;incstack = 0
 22000  003D6C  AE03               	btfss	___ftge@ff1+2,7,c
 22001  003D6E  D016               	goto	i2l1406
 22002  003D70  C001  F007         	movff	___ftge@ff1,??___ftge
 22003  003D74  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 22004  003D78  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 22005  003D7C  1E07               	comf	??___ftge,f,c
 22006  003D7E  1E08               	comf	??___ftge+1,f,c
 22007  003D80  1E09               	comf	??___ftge+2,f,c
 22008  003D82  2A07               	incf	??___ftge,f,c
 22009  003D84  0E00               	movlw	0
 22010  003D86  2208               	addwfc	??___ftge+1,f,c
 22011  003D88  2209               	addwfc	??___ftge+2,f,c
 22012  003D8A  0E00               	movlw	0
 22013  003D8C  2407               	addwf	??___ftge,w,c
 22014  003D8E  6E01               	movwf	___ftge@ff1,c
 22015  003D90  0E00               	movlw	0
 22016  003D92  2008               	addwfc	??___ftge+1,w,c
 22017  003D94  6E02               	movwf	___ftge@ff1+1,c
 22018  003D96  0E80               	movlw	128
 22019  003D98  2009               	addwfc	??___ftge+2,w,c
 22020  003D9A  6E03               	movwf	___ftge@ff1+2,c
 22021  003D9C                     i2l1406:
 22022  003D9C  FFFF               	dw	65535	; assembler added errata NOP
 22023  003D9E  AE06               	btfss	___ftge@ff2+2,7,c
 22024  003DA0  D016               	goto	i2l1407
 22025  003DA2  C004  F007         	movff	___ftge@ff2,??___ftge
 22026  003DA6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 22027  003DAA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 22028  003DAE  1E07               	comf	??___ftge,f,c
 22029  003DB0  1E08               	comf	??___ftge+1,f,c
 22030  003DB2  1E09               	comf	??___ftge+2,f,c
 22031  003DB4  2A07               	incf	??___ftge,f,c
 22032  003DB6  0E00               	movlw	0
 22033  003DB8  2208               	addwfc	??___ftge+1,f,c
 22034  003DBA  2209               	addwfc	??___ftge+2,f,c
 22035  003DBC  0E00               	movlw	0
 22036  003DBE  2407               	addwf	??___ftge,w,c
 22037  003DC0  6E04               	movwf	___ftge@ff2,c
 22038  003DC2  0E00               	movlw	0
 22039  003DC4  2008               	addwfc	??___ftge+1,w,c
 22040  003DC6  6E05               	movwf	___ftge@ff2+1,c
 22041  003DC8  0E80               	movlw	128
 22042  003DCA  2009               	addwfc	??___ftge+2,w,c
 22043  003DCC  6E06               	movwf	___ftge@ff2+2,c
 22044  003DCE                     i2l1407:
 22045  003DCE  FFFF               	dw	65535	; assembler added errata NOP
 22046  003DD0  0E00               	movlw	0
 22047  003DD2  1A01               	xorwf	___ftge@ff1,f,c
 22048  003DD4  0E00               	movlw	0
 22049  003DD6  1A02               	xorwf	___ftge@ff1+1,f,c
 22050  003DD8  0E80               	movlw	128
 22051  003DDA  1A03               	xorwf	___ftge@ff1+2,f,c
 22052  003DDC  0E00               	movlw	0
 22053  003DDE  1A04               	xorwf	___ftge@ff2,f,c
 22054  003DE0  0E00               	movlw	0
 22055  003DE2  1A05               	xorwf	___ftge@ff2+1,f,c
 22056  003DE4  0E80               	movlw	128
 22057  003DE6  1A06               	xorwf	___ftge@ff2+2,f,c
 22058  003DE8  5004               	movf	___ftge@ff2,w,c
 22059  003DEA  5C01               	subwf	___ftge@ff1,w,c
 22060  003DEC  5005               	movf	___ftge@ff2+1,w,c
 22061  003DEE  5802               	subwfb	___ftge@ff1+1,w,c
 22062  003DF0  5006               	movf	___ftge@ff2+2,w,c
 22063  003DF2  5803               	subwfb	___ftge@ff1+2,w,c
 22064  003DF4  B0D8               	btfsc	status,0,c
 22065  003DF6  D002               	goto	i2l4832
 22066  003DF8  90D8               	bcf	status,0,c
 22067  003DFA  D002               	goto	i2l4834
 22068  003DFC                     i2l4832:
 22069  003DFC  FFFF               	dw	65535	; assembler added errata NOP
 22070  003DFE  80D8               	bsf	status,0,c
 22071  003E00                     i2l4834:
 22072  003E00  FFFF               	dw	65535	; assembler added errata NOP
 22073  003E02  0012               	return		;funcret
 22074  003E04  FFFF               	dw	65535	; errata NOP
 22075  003E06                     __end_of___ftge:
 22076                           	opt stack 0
 22077                           tosu	equ	0xFFF
 22078                           tosh	equ	0xFFE
 22079                           tosl	equ	0xFFD
 22080                           pclatu	equ	0xFFB
 22081                           pclath	equ	0xFFA
 22082                           tblptru	equ	0xFF8
 22083                           tblptrh	equ	0xFF7
 22084                           tblptrl	equ	0xFF6
 22085                           tablat	equ	0xFF5
 22086                           prodh	equ	0xFF4
 22087                           prodl	equ	0xFF3
 22088                           intcon	equ	0xFF2
 22089                           indf0	equ	0xFEF
 22090                           postinc0	equ	0xFEE
 22091                           fsr0h	equ	0xFEA
 22092                           fsr0l	equ	0xFE9
 22093                           wreg	equ	0xFE8
 22094                           postdec1	equ	0xFE5
 22095                           fsr1h	equ	0xFE2
 22096                           fsr1l	equ	0xFE1
 22097                           indf2	equ	0xFDF
 22098                           postinc2	equ	0xFDE
 22099                           postdec2	equ	0xFDD
 22100                           fsr2h	equ	0xFDA
 22101                           fsr2l	equ	0xFD9
 22102                           status	equ	0xFD8
 22103                           
 22104 ;; *************** function ___ftdiv *****************
 22105 ;; Defined at:
 22106 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 22107 ;; Parameters:    Size  Location     Type
 22108 ;;  f1              3   26[COMRAM] float 
 22109 ;;  f2              3   29[COMRAM] float 
 22110 ;; Auto vars:     Size  Location     Type
 22111 ;;  f3              3   36[COMRAM] float 
 22112 ;;  sign            1   40[COMRAM] unsigned char 
 22113 ;;  exp             1   39[COMRAM] unsigned char 
 22114 ;;  cntr            1   35[COMRAM] unsigned char 
 22115 ;; Return value:  Size  Location     Type
 22116 ;;                  3   26[COMRAM] float 
 22117 ;; Registers used:
 22118 ;;		wreg, status,2, status,0, cstack
 22119 ;; Tracked objects:
 22120 ;;		On entry : 0/0
 22121 ;;		On exit  : 0/0
 22122 ;;		Unchanged: 0/0
 22123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22124 ;;      Params:         6       0       0       0       0       0       0
 22125 ;;      Locals:         6       0       0       0       0       0       0
 22126 ;;      Temps:          3       0       0       0       0       0       0
 22127 ;;      Totals:        15       0       0       0       0       0       0
 22128 ;;Total ram usage:       15 bytes
 22129 ;; Hardware stack levels used:    1
 22130 ;; Hardware stack levels required when called:    1
 22131 ;; This function calls:
 22132 ;;		___ftpack
 22133 ;; This function is called by:
 22134 ;;		_lerTransdutor
 22135 ;;		_map
 22136 ;; This function uses a non-reentrant model
 22137 ;;
 22138                           
 22139                           	psect	text94
 22140  0037BC                     __ptext94:
 22141                           	opt stack 0
 22142  0037BC                     ___ftdiv:
 22143                           	opt stack 0
 22144  0037BC  FFFF               	dw	65535	; assembler added errata NOP
 22145                           
 22146                           ;incstack = 0
 22147  0037BE  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 22148  0037C2  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22149  0037C4  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22150  0037C6  341C               	rlcf	___ftdiv@f1+1,w,c
 22151  0037C8  3621               	rlcf	??___ftdiv& (0+255),f,c
 22152  0037CA  E301               	bnc	u652_41
 22153  0037CC  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22154  0037CE                     u652_41:
 22155  0037CE  5021               	movf	??___ftdiv,w,c
 22156  0037D0  6E28               	movwf	___ftdiv@exp,c
 22157  0037D2  5028               	movf	___ftdiv@exp,w,c
 22158  0037D4  B4D8               	btfsc	status,2,c
 22159  0037D6  D00D               	goto	i2u655_40
 22160  0037D8  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 22161  0037DC  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22162  0037DE  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22163  0037E0  341F               	rlcf	___ftdiv@f2+1,w,c
 22164  0037E2  3621               	rlcf	??___ftdiv& (0+255),f,c
 22165  0037E4  E301               	bnc	u654_41
 22166  0037E6  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22167  0037E8                     u654_41:
 22168  0037E8  5021               	movf	??___ftdiv,w,c
 22169  0037EA  6E29               	movwf	___ftdiv@sign,c
 22170  0037EC  5029               	movf	___ftdiv@sign,w,c
 22171  0037EE  A4D8               	btfss	status,2,c
 22172  0037F0  D008               	goto	i2l1400
 22173  0037F2                     i2u655_40:
 22174  0037F2  FFFF               	dw	65535	; assembler added errata NOP
 22175  0037F4  0E00               	movlw	0
 22176  0037F6  6E1B               	movwf	?___ftdiv,c
 22177  0037F8  0E00               	movlw	0
 22178  0037FA  6E1C               	movwf	?___ftdiv+1,c
 22179  0037FC  0E00               	movlw	0
 22180  0037FE  6E1D               	movwf	?___ftdiv+2,c
 22181  003800  D04D               	goto	i2l6150
 22182  003802                     i2l1400:
 22183  003802  FFFF               	dw	65535	; assembler added errata NOP
 22184  003804  0E00               	movlw	0
 22185  003806  6E25               	movwf	___ftdiv@f3,c
 22186  003808  0E00               	movlw	0
 22187  00380A  6E26               	movwf	___ftdiv@f3+1,c
 22188  00380C  0E00               	movlw	0
 22189  00380E  6E27               	movwf	___ftdiv@f3+2,c
 22190  003810  5029               	movf	___ftdiv@sign,w,c
 22191  003812  0F89               	addlw	137
 22192  003814  5E28               	subwf	___ftdiv@exp,f,c
 22193  003816  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 22194  00381A  5020               	movf	___ftdiv@f2+2,w,c
 22195  00381C  1A29               	xorwf	___ftdiv@sign,f,c
 22196  00381E  0E80               	movlw	128
 22197  003820  1629               	andwf	___ftdiv@sign,f,c
 22198  003822  8E1C               	bsf	___ftdiv@f1+1,7,c
 22199  003824  0EFF               	movlw	255
 22200  003826  161B               	andwf	___ftdiv@f1,f,c
 22201  003828  0EFF               	movlw	255
 22202  00382A  161C               	andwf	___ftdiv@f1+1,f,c
 22203  00382C  0E00               	movlw	0
 22204  00382E  161D               	andwf	___ftdiv@f1+2,f,c
 22205  003830  8E1F               	bsf	___ftdiv@f2+1,7,c
 22206  003832  0EFF               	movlw	255
 22207  003834  161E               	andwf	___ftdiv@f2,f,c
 22208  003836  0EFF               	movlw	255
 22209  003838  161F               	andwf	___ftdiv@f2+1,f,c
 22210  00383A  0E00               	movlw	0
 22211  00383C  1620               	andwf	___ftdiv@f2+2,f,c
 22212  00383E  0E18               	movlw	24
 22213  003840  6E24               	movwf	___ftdiv@cntr,c
 22214  003842  FFFF               	dw	65535	; assembler added errata NOP
 22215  003844  90D8               	bcf	status,0,c
 22216  003846  3625               	rlcf	___ftdiv@f3,f,c
 22217  003848  3626               	rlcf	___ftdiv@f3+1,f,c
 22218  00384A  3627               	rlcf	___ftdiv@f3+2,f,c
 22219  00384C  501E               	movf	___ftdiv@f2,w,c
 22220  00384E  5C1B               	subwf	___ftdiv@f1,w,c
 22221  003850  501F               	movf	___ftdiv@f2+1,w,c
 22222  003852  581C               	subwfb	___ftdiv@f1+1,w,c
 22223  003854  5020               	movf	___ftdiv@f2+2,w,c
 22224  003856  581D               	subwfb	___ftdiv@f1+2,w,c
 22225  003858  A0D8               	btfss	status,0,c
 22226  00385A  D007               	goto	i2l1402
 22227  00385C  501E               	movf	___ftdiv@f2,w,c
 22228  00385E  5E1B               	subwf	___ftdiv@f1,f,c
 22229  003860  501F               	movf	___ftdiv@f2+1,w,c
 22230  003862  5A1C               	subwfb	___ftdiv@f1+1,f,c
 22231  003864  5020               	movf	___ftdiv@f2+2,w,c
 22232  003866  5A1D               	subwfb	___ftdiv@f1+2,f,c
 22233  003868  8025               	bsf	___ftdiv@f3,0,c
 22234  00386A                     i2l1402:
 22235  00386A  FFFF               	dw	65535	; assembler added errata NOP
 22236  00386C  90D8               	bcf	status,0,c
 22237  00386E  361B               	rlcf	___ftdiv@f1,f,c
 22238  003870  361C               	rlcf	___ftdiv@f1+1,f,c
 22239  003872  361D               	rlcf	___ftdiv@f1+2,f,c
 22240  003874  2E24               	decfsz	___ftdiv@cntr,f,c
 22241  003876  D7E5               	goto	i2l1401
 22242  003878  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
 22243  00387C  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 22244  003880  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 22245  003884  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
 22246  003888  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
 22247  00388C  EC53  F01E         	call	___ftpack	;wreg free
 22248  003890  C001  F01B         	movff	?___ftpack,?___ftdiv
 22249  003894  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
 22250  003898  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
 22251  00389C                     i2l6150:
 22252  00389C  FFFF               	dw	65535	; assembler added errata NOP
 22253  00389E  0012               	return		;funcret
 22254  0038A0  FFFF               	dw	65535	; errata NOP
 22255  0038A2                     __end_of___ftdiv:
 22256                           	opt stack 0
 22257                           tosu	equ	0xFFF
 22258                           tosh	equ	0xFFE
 22259                           tosl	equ	0xFFD
 22260                           pclatu	equ	0xFFB
 22261                           pclath	equ	0xFFA
 22262                           tblptru	equ	0xFF8
 22263                           tblptrh	equ	0xFF7
 22264                           tblptrl	equ	0xFF6
 22265                           tablat	equ	0xFF5
 22266                           prodh	equ	0xFF4
 22267                           prodl	equ	0xFF3
 22268                           intcon	equ	0xFF2
 22269                           indf0	equ	0xFEF
 22270                           postinc0	equ	0xFEE
 22271                           fsr0h	equ	0xFEA
 22272                           fsr0l	equ	0xFE9
 22273                           wreg	equ	0xFE8
 22274                           postdec1	equ	0xFE5
 22275                           fsr1h	equ	0xFE2
 22276                           fsr1l	equ	0xFE1
 22277                           indf2	equ	0xFDF
 22278                           postinc2	equ	0xFDE
 22279                           postdec2	equ	0xFDD
 22280                           fsr2h	equ	0xFDA
 22281                           fsr2l	equ	0xFD9
 22282                           status	equ	0xFD8
 22283                           
 22284 ;; *************** function ___ftadd *****************
 22285 ;; Defined at:
 22286 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 22287 ;; Parameters:    Size  Location     Type
 22288 ;;  f1              3   26[COMRAM] float 
 22289 ;;  f2              3   29[COMRAM] float 
 22290 ;; Auto vars:     Size  Location     Type
 22291 ;;  exp1            1   37[COMRAM] unsigned char 
 22292 ;;  exp2            1   36[COMRAM] unsigned char 
 22293 ;;  sign            1   35[COMRAM] unsigned char 
 22294 ;; Return value:  Size  Location     Type
 22295 ;;                  3   26[COMRAM] float 
 22296 ;; Registers used:
 22297 ;;		wreg, status,2, status,0, cstack
 22298 ;; Tracked objects:
 22299 ;;		On entry : 0/0
 22300 ;;		On exit  : 0/0
 22301 ;;		Unchanged: 0/0
 22302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22303 ;;      Params:         6       0       0       0       0       0       0
 22304 ;;      Locals:         3       0       0       0       0       0       0
 22305 ;;      Temps:          3       0       0       0       0       0       0
 22306 ;;      Totals:        12       0       0       0       0       0       0
 22307 ;;Total ram usage:       12 bytes
 22308 ;; Hardware stack levels used:    1
 22309 ;; Hardware stack levels required when called:    1
 22310 ;; This function calls:
 22311 ;;		___ftpack
 22312 ;; This function is called by:
 22313 ;;		_lerTransdutor
 22314 ;;		_map
 22315 ;; This function uses a non-reentrant model
 22316 ;;
 22317                           
 22318                           	psect	text95
 22319  0027CE                     __ptext95:
 22320                           	opt stack 0
 22321  0027CE                     ___ftadd:
 22322                           	opt stack 0
 22323  0027CE  FFFF               	dw	65535	; assembler added errata NOP
 22324                           
 22325                           ;incstack = 0
 22326  0027D0  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
 22327  0027D4  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22328  0027D6  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22329  0027D8  341C               	rlcf	___ftadd@f1+1,w,c
 22330  0027DA  3621               	rlcf	??___ftadd& (0+255),f,c
 22331  0027DC  E301               	bnc	u631_41
 22332  0027DE  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22333  0027E0                     u631_41:
 22334  0027E0  5021               	movf	??___ftadd,w,c
 22335  0027E2  6E26               	movwf	___ftadd@exp1,c
 22336  0027E4  C020  F021         	movff	___ftadd@f2+2,??___ftadd
 22337  0027E8  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22338  0027EA  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22339  0027EC  341F               	rlcf	___ftadd@f2+1,w,c
 22340  0027EE  3621               	rlcf	??___ftadd& (0+255),f,c
 22341  0027F0  E301               	bnc	u632_41
 22342  0027F2  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22343  0027F4                     u632_41:
 22344  0027F4  5021               	movf	??___ftadd,w,c
 22345  0027F6  6E25               	movwf	___ftadd@exp2,c
 22346  0027F8  5026               	movf	___ftadd@exp1,w,c
 22347  0027FA  B4D8               	btfsc	status,2,c
 22348  0027FC  D00B               	goto	i2u635_40
 22349  0027FE  5025               	movf	___ftadd@exp2,w,c
 22350  002800  5C26               	subwf	___ftadd@exp1,w,c
 22351  002802  B0D8               	btfsc	status,0,c
 22352  002804  D00F               	goto	i2l1365
 22353  002806  5026               	movf	___ftadd@exp1,w,c
 22354  002808  0800               	sublw	0
 22355  00280A  2425               	addwf	___ftadd@exp2,w,c
 22356  00280C  6E21               	movwf	??___ftadd& (0+255),c
 22357  00280E  0E18               	movlw	24
 22358  002810  6421               	cpfsgt	??___ftadd,c
 22359  002812  D008               	goto	i2l1365
 22360  002814                     i2u635_40:
 22361  002814  FFFF               	dw	65535	; assembler added errata NOP
 22362  002816  C01E  F01B         	movff	___ftadd@f2,?___ftadd
 22363  00281A  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
 22364  00281E  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
 22365  002822  D0BA               	goto	i2l6104
 22366  002824                     i2l1365:
 22367  002824  FFFF               	dw	65535	; assembler added errata NOP
 22368  002826  5025               	movf	___ftadd@exp2,w,c
 22369  002828  B4D8               	btfsc	status,2,c
 22370  00282A  D00B               	goto	i2u638_40
 22371  00282C  5026               	movf	___ftadd@exp1,w,c
 22372  00282E  5C25               	subwf	___ftadd@exp2,w,c
 22373  002830  B0D8               	btfsc	status,0,c
 22374  002832  D00F               	goto	i2l1369
 22375  002834  5025               	movf	___ftadd@exp2,w,c
 22376  002836  0800               	sublw	0
 22377  002838  2426               	addwf	___ftadd@exp1,w,c
 22378  00283A  6E21               	movwf	??___ftadd& (0+255),c
 22379  00283C  0E18               	movlw	24
 22380  00283E  6421               	cpfsgt	??___ftadd,c
 22381  002840  D008               	goto	i2l1369
 22382  002842                     i2u638_40:
 22383  002842  FFFF               	dw	65535	; assembler added errata NOP
 22384  002844  C01B  F01B         	movff	___ftadd@f1,?___ftadd
 22385  002848  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
 22386  00284C  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
 22387  002850  D0A3               	goto	i2l6104
 22388  002852                     i2l1369:
 22389  002852  FFFF               	dw	65535	; assembler added errata NOP
 22390  002854  0E06               	movlw	6
 22391  002856  6E24               	movwf	___ftadd@sign,c
 22392  002858  BE1D               	btfsc	___ftadd@f1+2,7,c
 22393  00285A  8E24               	bsf	___ftadd@sign,7,c
 22394  00285C  BE20               	btfsc	___ftadd@f2+2,7,c
 22395  00285E  8C24               	bsf	___ftadd@sign,6,c
 22396  002860  8E1C               	bsf	___ftadd@f1+1,7,c
 22397  002862  0EFF               	movlw	255
 22398  002864  161B               	andwf	___ftadd@f1,f,c
 22399  002866  0EFF               	movlw	255
 22400  002868  161C               	andwf	___ftadd@f1+1,f,c
 22401  00286A  0E00               	movlw	0
 22402  00286C  161D               	andwf	___ftadd@f1+2,f,c
 22403  00286E  8E1F               	bsf	___ftadd@f2+1,7,c
 22404  002870  0EFF               	movlw	255
 22405  002872  161E               	andwf	___ftadd@f2,f,c
 22406  002874  0EFF               	movlw	255
 22407  002876  161F               	andwf	___ftadd@f2+1,f,c
 22408  002878  0E00               	movlw	0
 22409  00287A  1620               	andwf	___ftadd@f2+2,f,c
 22410  00287C  5025               	movf	___ftadd@exp2,w,c
 22411  00287E  5C26               	subwf	___ftadd@exp1,w,c
 22412  002880  B0D8               	btfsc	status,0,c
 22413  002882  D01E               	goto	i2l1374
 22414  002884                     i2u641_40:
 22415  002884  FFFF               	dw	65535	; assembler added errata NOP
 22416  002886  90D8               	bcf	status,0,c
 22417  002888  361E               	rlcf	___ftadd@f2,f,c
 22418  00288A  361F               	rlcf	___ftadd@f2+1,f,c
 22419  00288C  3620               	rlcf	___ftadd@f2+2,f,c
 22420  00288E  0625               	decf	___ftadd@exp2,f,c
 22421  002890  5026               	movf	___ftadd@exp1,w,c
 22422  002892  1825               	xorwf	___ftadd@exp2,w,c
 22423  002894  B4D8               	btfsc	status,2,c
 22424  002896  D00E               	goto	i2l1379
 22425  002898  0624               	decf	___ftadd@sign,f,c
 22426  00289A  C024  F021         	movff	___ftadd@sign,??___ftadd
 22427  00289E  0E07               	movlw	7
 22428  0028A0  1621               	andwf	??___ftadd,f,c
 22429  0028A2  B4D8               	btfsc	status,2,c
 22430  0028A4  D007               	goto	i2l1379
 22431  0028A6  D7EE               	goto	i2u641_40
 22432  0028A8  FFFF               	dw	65535	; assembler added errata NOP
 22433  0028AA  90D8               	bcf	status,0,c
 22434  0028AC  321D               	rrcf	___ftadd@f1+2,f,c
 22435  0028AE  321C               	rrcf	___ftadd@f1+1,f,c
 22436  0028B0  321B               	rrcf	___ftadd@f1,f,c
 22437  0028B2  2A26               	incf	___ftadd@exp1,f,c
 22438  0028B4                     i2l1379:
 22439  0028B4  FFFF               	dw	65535	; assembler added errata NOP
 22440  0028B6  5025               	movf	___ftadd@exp2,w,c
 22441  0028B8  1826               	xorwf	___ftadd@exp1,w,c
 22442  0028BA  B4D8               	btfsc	status,2,c
 22443  0028BC  D023               	goto	i2u648_40
 22444  0028BE  D7F4               	goto	i2l1380
 22445  0028C0                     i2l1374:
 22446  0028C0  FFFF               	dw	65535	; assembler added errata NOP
 22447  0028C2  5026               	movf	___ftadd@exp1,w,c
 22448  0028C4  5C25               	subwf	___ftadd@exp2,w,c
 22449  0028C6  B0D8               	btfsc	status,0,c
 22450  0028C8  D01D               	goto	i2u648_40
 22451  0028CA                     i2u645_40:
 22452  0028CA  FFFF               	dw	65535	; assembler added errata NOP
 22453  0028CC  90D8               	bcf	status,0,c
 22454  0028CE  361B               	rlcf	___ftadd@f1,f,c
 22455  0028D0  361C               	rlcf	___ftadd@f1+1,f,c
 22456  0028D2  361D               	rlcf	___ftadd@f1+2,f,c
 22457  0028D4  0626               	decf	___ftadd@exp1,f,c
 22458  0028D6  5026               	movf	___ftadd@exp1,w,c
 22459  0028D8  1825               	xorwf	___ftadd@exp2,w,c
 22460  0028DA  B4D8               	btfsc	status,2,c
 22461  0028DC  D00E               	goto	i2l1388
 22462  0028DE  0624               	decf	___ftadd@sign,f,c
 22463  0028E0  C024  F021         	movff	___ftadd@sign,??___ftadd
 22464  0028E4  0E07               	movlw	7
 22465  0028E6  1621               	andwf	??___ftadd,f,c
 22466  0028E8  B4D8               	btfsc	status,2,c
 22467  0028EA  D007               	goto	i2l1388
 22468  0028EC  D7EE               	goto	i2u645_40
 22469  0028EE  FFFF               	dw	65535	; assembler added errata NOP
 22470  0028F0  90D8               	bcf	status,0,c
 22471  0028F2  3220               	rrcf	___ftadd@f2+2,f,c
 22472  0028F4  321F               	rrcf	___ftadd@f2+1,f,c
 22473  0028F6  321E               	rrcf	___ftadd@f2,f,c
 22474  0028F8  2A25               	incf	___ftadd@exp2,f,c
 22475  0028FA                     i2l1388:
 22476  0028FA  FFFF               	dw	65535	; assembler added errata NOP
 22477  0028FC  5025               	movf	___ftadd@exp2,w,c
 22478  0028FE  1826               	xorwf	___ftadd@exp1,w,c
 22479  002900  A4D8               	btfss	status,2,c
 22480  002902  D7F5               	goto	i2l1389
 22481  002904                     i2u648_40:
 22482  002904  FFFF               	dw	65535	; assembler added errata NOP
 22483  002906  AE24               	btfss	___ftadd@sign,7,c
 22484  002908  D00C               	goto	i2l1391
 22485  00290A  0EFF               	movlw	255
 22486  00290C  1A1B               	xorwf	___ftadd@f1,f,c
 22487  00290E  0EFF               	movlw	255
 22488  002910  1A1C               	xorwf	___ftadd@f1+1,f,c
 22489  002912  0EFF               	movlw	255
 22490  002914  1A1D               	xorwf	___ftadd@f1+2,f,c
 22491  002916  0E01               	movlw	1
 22492  002918  261B               	addwf	___ftadd@f1,f,c
 22493  00291A  0E00               	movlw	0
 22494  00291C  221C               	addwfc	___ftadd@f1+1,f,c
 22495  00291E  0E00               	movlw	0
 22496  002920  221D               	addwfc	___ftadd@f1+2,f,c
 22497  002922                     i2l1391:
 22498  002922  FFFF               	dw	65535	; assembler added errata NOP
 22499  002924  AC24               	btfss	___ftadd@sign,6,c
 22500  002926  D00C               	goto	i2l1392
 22501  002928  0EFF               	movlw	255
 22502  00292A  1A1E               	xorwf	___ftadd@f2,f,c
 22503  00292C  0EFF               	movlw	255
 22504  00292E  1A1F               	xorwf	___ftadd@f2+1,f,c
 22505  002930  0EFF               	movlw	255
 22506  002932  1A20               	xorwf	___ftadd@f2+2,f,c
 22507  002934  0E01               	movlw	1
 22508  002936  261E               	addwf	___ftadd@f2,f,c
 22509  002938  0E00               	movlw	0
 22510  00293A  221F               	addwfc	___ftadd@f2+1,f,c
 22511  00293C  0E00               	movlw	0
 22512  00293E  2220               	addwfc	___ftadd@f2+2,f,c
 22513  002940                     i2l1392:
 22514  002940  FFFF               	dw	65535	; assembler added errata NOP
 22515  002942  0E00               	movlw	0
 22516  002944  6E24               	movwf	___ftadd@sign,c
 22517  002946  501B               	movf	___ftadd@f1,w,c
 22518  002948  261E               	addwf	___ftadd@f2,f,c
 22519  00294A  501C               	movf	___ftadd@f1+1,w,c
 22520  00294C  221F               	addwfc	___ftadd@f2+1,f,c
 22521  00294E  501D               	movf	___ftadd@f1+2,w,c
 22522  002950  2220               	addwfc	___ftadd@f2+2,f,c
 22523  002952  AE20               	btfss	___ftadd@f2+2,7,c
 22524  002954  D00E               	goto	i2l1393
 22525  002956  0EFF               	movlw	255
 22526  002958  1A1E               	xorwf	___ftadd@f2,f,c
 22527  00295A  0EFF               	movlw	255
 22528  00295C  1A1F               	xorwf	___ftadd@f2+1,f,c
 22529  00295E  0EFF               	movlw	255
 22530  002960  1A20               	xorwf	___ftadd@f2+2,f,c
 22531  002962  0E01               	movlw	1
 22532  002964  261E               	addwf	___ftadd@f2,f,c
 22533  002966  0E00               	movlw	0
 22534  002968  221F               	addwfc	___ftadd@f2+1,f,c
 22535  00296A  0E00               	movlw	0
 22536  00296C  2220               	addwfc	___ftadd@f2+2,f,c
 22537  00296E  0E01               	movlw	1
 22538  002970  6E24               	movwf	___ftadd@sign,c
 22539  002972                     i2l1393:
 22540  002972  FFFF               	dw	65535	; assembler added errata NOP
 22541  002974  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
 22542  002978  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22543  00297C  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22544  002980  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
 22545  002984  C024  F005         	movff	___ftadd@sign,___ftpack@sign
 22546  002988  EC53  F01E         	call	___ftpack	;wreg free
 22547  00298C  C001  F01B         	movff	?___ftpack,?___ftadd
 22548  002990  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
 22549  002994  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
 22550  002998                     i2l6104:
 22551  002998  FFFF               	dw	65535	; assembler added errata NOP
 22552  00299A  0012               	return		;funcret
 22553  00299C  FFFF               	dw	65535	; errata NOP
 22554  00299E                     __end_of___ftadd:
 22555                           	opt stack 0
 22556                           tosu	equ	0xFFF
 22557                           tosh	equ	0xFFE
 22558                           tosl	equ	0xFFD
 22559                           pclatu	equ	0xFFB
 22560                           pclath	equ	0xFFA
 22561                           tblptru	equ	0xFF8
 22562                           tblptrh	equ	0xFF7
 22563                           tblptrl	equ	0xFF6
 22564                           tablat	equ	0xFF5
 22565                           prodh	equ	0xFF4
 22566                           prodl	equ	0xFF3
 22567                           intcon	equ	0xFF2
 22568                           indf0	equ	0xFEF
 22569                           postinc0	equ	0xFEE
 22570                           fsr0h	equ	0xFEA
 22571                           fsr0l	equ	0xFE9
 22572                           wreg	equ	0xFE8
 22573                           postdec1	equ	0xFE5
 22574                           fsr1h	equ	0xFE2
 22575                           fsr1l	equ	0xFE1
 22576                           indf2	equ	0xFDF
 22577                           postinc2	equ	0xFDE
 22578                           postdec2	equ	0xFDD
 22579                           fsr2h	equ	0xFDA
 22580                           fsr2l	equ	0xFD9
 22581                           status	equ	0xFD8
 22582                           
 22583 ;; *************** function ___ftpack *****************
 22584 ;; Defined at:
 22585 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 22586 ;; Parameters:    Size  Location     Type
 22587 ;;  arg             3    0[COMRAM] unsigned um
 22588 ;;  exp             1    3[COMRAM] unsigned char 
 22589 ;;  sign            1    4[COMRAM] unsigned char 
 22590 ;; Auto vars:     Size  Location     Type
 22591 ;;		None
 22592 ;; Return value:  Size  Location     Type
 22593 ;;                  3    0[COMRAM] float 
 22594 ;; Registers used:
 22595 ;;		wreg, status,2, status,0
 22596 ;; Tracked objects:
 22597 ;;		On entry : 0/0
 22598 ;;		On exit  : 0/0
 22599 ;;		Unchanged: 0/0
 22600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22601 ;;      Params:         5       0       0       0       0       0       0
 22602 ;;      Locals:         0       0       0       0       0       0       0
 22603 ;;      Temps:          3       0       0       0       0       0       0
 22604 ;;      Totals:         8       0       0       0       0       0       0
 22605 ;;Total ram usage:        8 bytes
 22606 ;; Hardware stack levels used:    1
 22607 ;; This function calls:
 22608 ;;		Nothing
 22609 ;; This function is called by:
 22610 ;;		___ftadd
 22611 ;;		___ftdiv
 22612 ;;		___ftmul
 22613 ;;		___lwtoft
 22614 ;; This function uses a non-reentrant model
 22615 ;;
 22616                           
 22617                           	psect	text96
 22618  003CA6                     __ptext96:
 22619                           	opt stack 0
 22620  003CA6                     ___ftpack:
 22621                           	opt stack 0
 22622  003CA6  FFFF               	dw	65535	; assembler added errata NOP
 22623                           
 22624                           ;incstack = 0
 22625  003CA8  5004               	movf	___ftpack@exp,w,c
 22626  003CAA  B4D8               	btfsc	status,2,c
 22627  003CAC  D005               	goto	i2u549_40
 22628  003CAE  5001               	movf	___ftpack@arg,w,c
 22629  003CB0  1002               	iorwf	___ftpack@arg+1,w,c
 22630  003CB2  1003               	iorwf	___ftpack@arg+2,w,c
 22631  003CB4  A4D8               	btfss	status,2,c
 22632  003CB6  D00E               	goto	i2l1334
 22633  003CB8                     i2u549_40:
 22634  003CB8  FFFF               	dw	65535	; assembler added errata NOP
 22635  003CBA  0E00               	movlw	0
 22636  003CBC  6E01               	movwf	?___ftpack,c
 22637  003CBE  0E00               	movlw	0
 22638  003CC0  6E02               	movwf	?___ftpack+1,c
 22639  003CC2  0E00               	movlw	0
 22640  003CC4  6E03               	movwf	?___ftpack+2,c
 22641  003CC6  D04E               	goto	i2l5428
 22642  003CC8  FFFF               	dw	65535	; assembler added errata NOP
 22643  003CCA  2A04               	incf	___ftpack@exp,f,c
 22644  003CCC  90D8               	bcf	status,0,c
 22645  003CCE  3203               	rrcf	___ftpack@arg+2,f,c
 22646  003CD0  3202               	rrcf	___ftpack@arg+1,f,c
 22647  003CD2  3201               	rrcf	___ftpack@arg,f,c
 22648  003CD4                     i2l1334:
 22649  003CD4  FFFF               	dw	65535	; assembler added errata NOP
 22650  003CD6  0E00               	movlw	0
 22651  003CD8  1401               	andwf	___ftpack@arg,w,c
 22652  003CDA  6E06               	movwf	??___ftpack& (0+255),c
 22653  003CDC  0E00               	movlw	0
 22654  003CDE  1402               	andwf	___ftpack@arg+1,w,c
 22655  003CE0  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22656  003CE2  0EFE               	movlw	254
 22657  003CE4  1403               	andwf	___ftpack@arg+2,w,c
 22658  003CE6  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22659  003CE8  5006               	movf	??___ftpack,w,c
 22660  003CEA  1007               	iorwf	??___ftpack+1,w,c
 22661  003CEC  1008               	iorwf	??___ftpack+2,w,c
 22662  003CEE  B4D8               	btfsc	status,2,c
 22663  003CF0  D00D               	goto	i2l1337
 22664  003CF2  D7EA               	goto	i2l1335
 22665  003CF4  FFFF               	dw	65535	; assembler added errata NOP
 22666  003CF6  2A04               	incf	___ftpack@exp,f,c
 22667  003CF8  0E01               	movlw	1
 22668  003CFA  2601               	addwf	___ftpack@arg,f,c
 22669  003CFC  0E00               	movlw	0
 22670  003CFE  2202               	addwfc	___ftpack@arg+1,f,c
 22671  003D00  0E00               	movlw	0
 22672  003D02  2203               	addwfc	___ftpack@arg+2,f,c
 22673  003D04  90D8               	bcf	status,0,c
 22674  003D06  3203               	rrcf	___ftpack@arg+2,f,c
 22675  003D08  3202               	rrcf	___ftpack@arg+1,f,c
 22676  003D0A  3201               	rrcf	___ftpack@arg,f,c
 22677  003D0C                     i2l1337:
 22678  003D0C  FFFF               	dw	65535	; assembler added errata NOP
 22679  003D0E  0E00               	movlw	0
 22680  003D10  1401               	andwf	___ftpack@arg,w,c
 22681  003D12  6E06               	movwf	??___ftpack& (0+255),c
 22682  003D14  0E00               	movlw	0
 22683  003D16  1402               	andwf	___ftpack@arg+1,w,c
 22684  003D18  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22685  003D1A  0EFF               	movlw	255
 22686  003D1C  1403               	andwf	___ftpack@arg+2,w,c
 22687  003D1E  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22688  003D20  5006               	movf	??___ftpack,w,c
 22689  003D22  1007               	iorwf	??___ftpack+1,w,c
 22690  003D24  1008               	iorwf	??___ftpack+2,w,c
 22691  003D26  B4D8               	btfsc	status,2,c
 22692  003D28  D007               	goto	i2l1340
 22693  003D2A  D7E4               	goto	i2l1338
 22694  003D2C  FFFF               	dw	65535	; assembler added errata NOP
 22695  003D2E  0604               	decf	___ftpack@exp,f,c
 22696  003D30  90D8               	bcf	status,0,c
 22697  003D32  3601               	rlcf	___ftpack@arg,f,c
 22698  003D34  3602               	rlcf	___ftpack@arg+1,f,c
 22699  003D36  3603               	rlcf	___ftpack@arg+2,f,c
 22700  003D38                     i2l1340:
 22701  003D38  FFFF               	dw	65535	; assembler added errata NOP
 22702  003D3A  BE02               	btfsc	___ftpack@arg+1,7,c
 22703  003D3C  D003               	goto	i2u553_40
 22704  003D3E  0E02               	movlw	2
 22705  003D40  6004               	cpfslt	___ftpack@exp,c
 22706  003D42  D7F4               	goto	i2l1341
 22707  003D44                     i2u553_40:
 22708  003D44  FFFF               	dw	65535	; assembler added errata NOP
 22709  003D46  A004               	btfss	___ftpack@exp,0,c
 22710  003D48  9E02               	bcf	___ftpack@arg+1,7,c
 22711  003D4A  90D8               	bcf	status,0,c
 22712  003D4C  3204               	rrcf	___ftpack@exp,f,c
 22713  003D4E  5004               	movf	___ftpack@exp,w,c
 22714  003D50  1203               	iorwf	___ftpack@arg+2,f,c
 22715  003D52  5005               	movf	___ftpack@sign,w,c
 22716  003D54  A4D8               	btfss	status,2,c
 22717  003D56  8E03               	bsf	___ftpack@arg+2,7,c
 22718  003D58  C001  F001         	movff	___ftpack@arg,?___ftpack
 22719  003D5C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 22720  003D60  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 22721  003D64                     i2l5428:
 22722  003D64  FFFF               	dw	65535	; assembler added errata NOP
 22723  003D66  0012               	return		;funcret
 22724  003D68  FFFF               	dw	65535	; errata NOP
 22725  003D6A                     __end_of___ftpack:
 22726                           	opt stack 0
 22727                           tosu	equ	0xFFF
 22728                           tosh	equ	0xFFE
 22729                           tosl	equ	0xFFD
 22730                           pclatu	equ	0xFFB
 22731                           pclath	equ	0xFFA
 22732                           tblptru	equ	0xFF8
 22733                           tblptrh	equ	0xFF7
 22734                           tblptrl	equ	0xFF6
 22735                           tablat	equ	0xFF5
 22736                           prodh	equ	0xFF4
 22737                           prodl	equ	0xFF3
 22738                           intcon	equ	0xFF2
 22739                           indf0	equ	0xFEF
 22740                           postinc0	equ	0xFEE
 22741                           fsr0h	equ	0xFEA
 22742                           fsr0l	equ	0xFE9
 22743                           wreg	equ	0xFE8
 22744                           postdec1	equ	0xFE5
 22745                           fsr1h	equ	0xFE2
 22746                           fsr1l	equ	0xFE1
 22747                           indf2	equ	0xFDF
 22748                           postinc2	equ	0xFDE
 22749                           postdec2	equ	0xFDD
 22750                           fsr2h	equ	0xFDA
 22751                           fsr2l	equ	0xFD9
 22752                           status	equ	0xFD8
 22753                           tosu	equ	0xFFF
 22754                           tosh	equ	0xFFE
 22755                           tosl	equ	0xFFD
 22756                           pclatu	equ	0xFFB
 22757                           pclath	equ	0xFFA
 22758                           tblptru	equ	0xFF8
 22759                           tblptrh	equ	0xFF7
 22760                           tblptrl	equ	0xFF6
 22761                           tablat	equ	0xFF5
 22762                           prodh	equ	0xFF4
 22763                           prodl	equ	0xFF3
 22764                           intcon	equ	0xFF2
 22765                           indf0	equ	0xFEF
 22766                           postinc0	equ	0xFEE
 22767                           fsr0h	equ	0xFEA
 22768                           fsr0l	equ	0xFE9
 22769                           wreg	equ	0xFE8
 22770                           postdec1	equ	0xFE5
 22771                           fsr1h	equ	0xFE2
 22772                           fsr1l	equ	0xFE1
 22773                           indf2	equ	0xFDF
 22774                           postinc2	equ	0xFDE
 22775                           postdec2	equ	0xFDD
 22776                           fsr2h	equ	0xFDA
 22777                           fsr2l	equ	0xFD9
 22778                           status	equ	0xFD8
 22779                           
 22780                           	psect	text97
 22781  000000                     __ptext97:
 22782                           	opt stack 0
 22783                           tosu	equ	0xFFF
 22784                           tosh	equ	0xFFE
 22785                           tosl	equ	0xFFD
 22786                           pclatu	equ	0xFFB
 22787                           pclath	equ	0xFFA
 22788                           tblptru	equ	0xFF8
 22789                           tblptrh	equ	0xFF7
 22790                           tblptrl	equ	0xFF6
 22791                           tablat	equ	0xFF5
 22792                           prodh	equ	0xFF4
 22793                           prodl	equ	0xFF3
 22794                           intcon	equ	0xFF2
 22795                           indf0	equ	0xFEF
 22796                           postinc0	equ	0xFEE
 22797                           fsr0h	equ	0xFEA
 22798                           fsr0l	equ	0xFE9
 22799                           wreg	equ	0xFE8
 22800                           postdec1	equ	0xFE5
 22801                           fsr1h	equ	0xFE2
 22802                           fsr1l	equ	0xFE1
 22803                           indf2	equ	0xFDF
 22804                           postinc2	equ	0xFDE
 22805                           postdec2	equ	0xFDD
 22806                           fsr2h	equ	0xFDA
 22807                           fsr2l	equ	0xFD9
 22808                           status	equ	0xFD8
 22809                           
 22810                           	psect	rparam
 22811  0000                     tosu	equ	0xFFF
 22812                           tosh	equ	0xFFE
 22813                           tosl	equ	0xFFD
 22814                           pclatu	equ	0xFFB
 22815                           pclath	equ	0xFFA
 22816                           tblptru	equ	0xFF8
 22817                           tblptrh	equ	0xFF7
 22818                           tblptrl	equ	0xFF6
 22819                           tablat	equ	0xFF5
 22820                           prodh	equ	0xFF4
 22821                           prodl	equ	0xFF3
 22822                           intcon	equ	0xFF2
 22823                           indf0	equ	0xFEF
 22824                           postinc0	equ	0xFEE
 22825                           fsr0h	equ	0xFEA
 22826                           fsr0l	equ	0xFE9
 22827                           wreg	equ	0xFE8
 22828                           postdec1	equ	0xFE5
 22829                           fsr1h	equ	0xFE2
 22830                           fsr1l	equ	0xFE1
 22831                           indf2	equ	0xFDF
 22832                           postinc2	equ	0xFDE
 22833                           postdec2	equ	0xFDD
 22834                           fsr2h	equ	0xFDA
 22835                           fsr2l	equ	0xFD9
 22836                           status	equ	0xFD8
 22837                           
 22838                           	psect	temp
 22839  00007C                     btemp:
 22840                           	opt stack 0
 22841  00007C                     	ds	1
 22842  0000                     int$flags	set	btemp
 22843  0000                     wtemp6	set	btemp+1
 22844                           tosu	equ	0xFFF
 22845                           tosh	equ	0xFFE
 22846                           tosl	equ	0xFFD
 22847                           pclatu	equ	0xFFB
 22848                           pclath	equ	0xFFA
 22849                           tblptru	equ	0xFF8
 22850                           tblptrh	equ	0xFF7
 22851                           tblptrl	equ	0xFF6
 22852                           tablat	equ	0xFF5
 22853                           prodh	equ	0xFF4
 22854                           prodl	equ	0xFF3
 22855                           intcon	equ	0xFF2
 22856                           indf0	equ	0xFEF
 22857                           postinc0	equ	0xFEE
 22858                           fsr0h	equ	0xFEA
 22859                           fsr0l	equ	0xFE9
 22860                           wreg	equ	0xFE8
 22861                           postdec1	equ	0xFE5
 22862                           fsr1h	equ	0xFE2
 22863                           fsr1l	equ	0xFE1
 22864                           indf2	equ	0xFDF
 22865                           postinc2	equ	0xFDE
 22866                           postdec2	equ	0xFDD
 22867                           fsr2h	equ	0xFDA
 22868                           fsr2l	equ	0xFD9
 22869                           status	equ	0xFD8


Data Sizes:
    Strings     1320
    Constant    58
    Data        12
    BSS         275
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     123
    BANK0           128     89     128
    BANK1           256      0     192
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2377	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2376	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2375	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_122(CODE[15]), STR_121(CODE[12]), STR_120(CODE[10]), 
		 -> STR_119(CODE[18]), STR_118(CODE[10]), STR_117(CODE[18]), STR_116(CODE[16]), 
		 -> STR_115(CODE[10]), STR_113(CODE[3]), STR_112(CODE[14]), STR_111(CODE[20]), 
		 -> STR_110(CODE[8]), STR_109(CODE[10]), STR_108(CODE[11]), STR_107(CODE[9]), 
		 -> STR_106(CODE[3]), STR_105(CODE[15]), STR_104(CODE[15]), STR_103(CODE[11]), 
		 -> STR_102(CODE[11]), STR_101(CODE[19]), STR_100(CODE[5]), STR_99(CODE[12]), 
		 -> STR_98(CODE[5]), STR_97(CODE[14]), STR_96(CODE[19]), STR_93(CODE[3]), 
		 -> STR_92(CODE[7]), STR_91(CODE[7]), STR_89(CODE[12]), STR_88(CODE[17]), 
		 -> STR_87(CODE[20]), STR_86(CODE[8]), STR_83(CODE[14]), STR_80(CODE[14]), 
		 -> STR_79(CODE[11]), STR_76(CODE[10]), STR_75(CODE[31]), STR_72(CODE[11]), 
		 -> STR_71(CODE[20]), STR_70(CODE[20]), STR_69(CODE[21]), STR_68(CODE[15]), 
		 -> STR_67(CODE[6]), STR_66(CODE[15]), STR_65(CODE[6]), STR_64(CODE[20]), 
		 -> STR_63(CODE[15]), STR_62(CODE[19]), STR_61(CODE[20]), STR_60(CODE[21]), 
		 -> STR_59(CODE[21]), STR_58(CODE[18]), STR_57(CODE[20]), STR_56(CODE[17]), 
		 -> STR_55(CODE[26]), STR_54(CODE[16]), STR_51(CODE[15]), STR_48(CODE[15]), 
		 -> STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[16]), STR_42(CODE[19]), 
		 -> STR_41(CODE[19]), STR_40(CODE[16]), STR_39(CODE[15]), STR_38(CODE[15]), 
		 -> STR_37(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_36(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), STR_25(CODE[63]), 
		 -> STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), STR_18(CODE[5]), 
		 -> STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), STR_8(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_123(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_114(CODE[12]), STR_95(CODE[17]), STR_94(CODE[13]), 
		 -> STR_90(CODE[12]), STR_85(CODE[5]), STR_84(CODE[3]), STR_82(CODE[5]), 
		 -> STR_81(CODE[3]), STR_78(CODE[5]), STR_77(CODE[3]), STR_74(CODE[4]), 
		 -> STR_73(CODE[4]), STR_53(CODE[5]), STR_52(CODE[3]), STR_50(CODE[5]), 
		 -> STR_49(CODE[3]), line3(BANK1[21]), STR_47(CODE[5]), STR_46(CODE[3]), 
		 -> line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), STR_32(CODE[6]), 
		 -> STR_31(CODE[3]), STR_30(CODE[6]), STR_29(CODE[3]), STR_28(CODE[6]), 
		 -> STR_27(CODE[3]), STR_15(CODE[12]), tel2(BANK1[12]), tel1(BANK1[12]), 
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 126
		 -> intToFloatStr@conv(BANK0[4]), STR_122(CODE[15]), STR_121(CODE[12]), STR_120(CODE[10]), 
		 -> STR_119(CODE[18]), STR_118(CODE[10]), STR_117(CODE[18]), STR_116(CODE[16]), 
		 -> STR_115(CODE[10]), STR_113(CODE[3]), STR_112(CODE[14]), STR_111(CODE[20]), 
		 -> STR_110(CODE[8]), STR_109(CODE[10]), STR_108(CODE[11]), STR_107(CODE[9]), 
		 -> STR_106(CODE[3]), STR_105(CODE[15]), STR_104(CODE[15]), STR_103(CODE[11]), 
		 -> STR_102(CODE[11]), STR_101(CODE[19]), STR_100(CODE[5]), STR_99(CODE[12]), 
		 -> STR_98(CODE[5]), STR_97(CODE[14]), STR_96(CODE[19]), STR_93(CODE[3]), 
		 -> STR_92(CODE[7]), STR_91(CODE[7]), STR_89(CODE[12]), STR_88(CODE[17]), 
		 -> STR_87(CODE[20]), STR_86(CODE[8]), STR_83(CODE[14]), STR_80(CODE[14]), 
		 -> STR_79(CODE[11]), STR_76(CODE[10]), STR_75(CODE[31]), STR_72(CODE[11]), 
		 -> STR_71(CODE[20]), STR_70(CODE[20]), STR_69(CODE[21]), STR_68(CODE[15]), 
		 -> STR_67(CODE[6]), STR_66(CODE[15]), STR_65(CODE[6]), STR_64(CODE[20]), 
		 -> STR_63(CODE[15]), STR_62(CODE[19]), STR_61(CODE[20]), STR_60(CODE[21]), 
		 -> STR_59(CODE[21]), STR_58(CODE[18]), STR_57(CODE[20]), STR_56(CODE[17]), 
		 -> STR_55(CODE[26]), STR_54(CODE[16]), STR_51(CODE[15]), STR_48(CODE[15]), 
		 -> STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[16]), STR_42(CODE[19]), 
		 -> STR_41(CODE[19]), STR_40(CODE[16]), STR_39(CODE[15]), STR_38(CODE[15]), 
		 -> STR_37(CODE[20]), STR_36(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), 
		 -> STR_25(CODE[63]), STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), 
		 -> STR_18(CODE[5]), STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), 
		 -> STR_8(CODE[5]), STR_4(CODE[5]), STR_3(CODE[9]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    S1603__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1603__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1462	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_95(CODE[17]), STR_94(CODE[13]), 

    dataLoger$1447	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_85(CODE[5]), STR_84(CODE[3]), 

    dataLoger$1442	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_82(CODE[5]), STR_81(CODE[3]), 

    dataLoger$1436	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_78(CODE[5]), STR_77(CODE[3]), 

    tela_testeBombas$1417	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_74(CODE[4]), STR_73(CODE[4]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    acaoTesteBombas$1317	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[3]), 

    acaoTesteBombas$1312	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_50(CODE[5]), STR_49(CODE[3]), 

    acaoTesteBombas$1307	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_47(CODE[5]), STR_46(CODE[3]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    enviaSMS$1227	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    enviaSMS$1222	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_28(CODE[6]), STR_27(CODE[3]), 

    enviaSMS$1221	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), STR_29(CODE[3]), 

    enviaSMS$1220	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), STR_31(CODE[3]), 

    enviaSMS$1207	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    comunicarTeste$1192	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    _TIMER->_lerTransdutor
    _timer->_writeEEPROM16_ext
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait
    _lerTransdutor->___ftdiv
    _lerTransdutor->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _verificarIntervaloTesteBombas->_writeEEPROM_ext
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _resetParametros->_clearShiftREG
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBombas->_enviaSMS
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _drenarPressao->_sprintf
    _sprintf->__doprnt
    _acaoBombas->_enviaSMS
    _partidaBombaEstacionaria->_delay
    _enviaSMS->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  375852
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                        _setShiftREG
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
      _verificarIntervaloTesteBombas
 ---------------------------------------------------------------------------------
 (1) _verificarIntervaloTesteBombas                        0     0      0    5482
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     4     4      0   24159
                                             53 BANK0      4     4      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   23011
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4358
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    1902
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   35298
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
                    _resetParametros
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _resetParametros                                      0     0      0      69
                      _clearShiftREG
 ---------------------------------------------------------------------------------
 (1) _setShiftREG                                          2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   12128
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          0     0      0   14436
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   29251
                                             70 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   17084
                                             53 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             63 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   18743
                                             53 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _criarCaracteresCGRAM                                56    56      0     521
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   24135
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   35495
                                             63 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                       4     4      0   11201
                                             59 BANK0      4     4      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                         9     1      8    2380
                                              8 BANK0      9     1      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   40711
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    4217
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     17    17      0   75641
                                             72 BANK0     17    17      0
                            _btPress
                      _clearShiftREG
                      _drenarPressao
                           _enviaSMS
                      _intToFloatStr
           _partidaBombaEstacionaria
                     _readEEPROM_ext
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8878
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5482
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   16484
                                             53 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1060
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _drenarPressao                                        0     0      0   14414
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20     6     14   14414
                                             33 BANK0     20     6     14
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _clearShiftREG                                        1     1      0      69
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           3     3      0   12493
                                             72 BANK0      3     3      0
                           _enviaSMS
           _partidaBombaEstacionaria
 ---------------------------------------------------------------------------------
 (2) _partidaBombaEstacionaria                             1     1      0    1130
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _enviaSMS                                            13    13      0   11363
                                             59 BANK0     13    13      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     402
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4630
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1638
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3421
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2    1086
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TIMER                                               19    19      0   17356
                                             48 COMRAM    19    19      0
                      _lerTransdutor
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (7) _timer                                                8     8      0    2076
                                              8 COMRAM     8     8      0
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Restart                                        0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Read                                           4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_BCDtoDEC                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (8) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (9) i2_delay                                              3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Write                                          2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Stop                                           0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Start                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _lerTransdutor                                        7     7      0   15213
                                             41 COMRAM     7     7      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (8) _readADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     328
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3526
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             15     9      6    3480
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    4622
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _partidaBombaEstacionaria
       _delay
   _acaoTesteBombas
     _btPress
     _clearShiftREG
     _drenarPressao
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _partidaBombaEstacionaria
       _delay
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _setShiftREG
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _resetParametros
       _clearShiftREG
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _verificarIntervaloTesteBombas
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _lerTransdutor
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
     ___lwtoft
       ___ftpack
       _readADC (ARG)
     _readADC
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C0       7       75.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BB      15        0.0%
DATA                 0      0     1BB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 25 14:05:56 2019

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 7062  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2E34  
                                        __end_of_partidaBombaEstacionaria 3986  
                                                             __CFG_OSC$HS 000000  
                                                            ___ftadd@exp1 0026  
                                                            ___ftadd@exp2 0025  
                                                            ___ftadd@sign 0024  
                                                             __CFG_WDT$ON 000000  
                                                                     l300 2B20  
                                                                     l301 29B0  
                                                                     l302 2B42  
                                                                     l310 2AB2  
                                                                     l303 29D8  
                                                                     l320 2420  
                                                                     l312 2ADA  
                                                                     l321 25F8  
                                                                     l305 2A18  
                                                                     l322 2440  
                                                                     l314 2B04  
                                                                     l306 2A36  
                                                                     l411 3C16  
                                                                     l323 2470  
                                                                     l315 2B14  
                                                                     l332 24E6  
                                                                     l308 2A8A  
                                                                     l325 2490  
                                                                     l309 2B06  
                                                                     l350 1908  
                                                                     l351 15EA  
                                                                     l319 25C2  
                                                                     l335 2560  
                                                                     l352 161A  
                                                                     l424 6FD2  
                                                                     l520 0D72  
                                                                     l336 2596  
                                                                     l328 24BA  
                                                                     l504 7302  
                                                                     l257 717E  
                                                                     l361 16B4  
                                                                     l521 09E4  
                                                                     l337 2582  
                                                                     l265 329A  
                                                                     l601 3034  
                                                                     l362 17C8  
                                                                     l370 1738  
                                                                     l354 164E  
                                                                     l522 0DC6  
                                                                     l514 0950  
                                                                     l338 258C  
                                                                     l266 3216  
                                                                     l290 743A  
                                                                     l611 7318  
                                                                     l363 1704  
                                                                     l531 0AEA  
                                                                     l523 0A08  
                                                                     l267 325E  
                                                                     l603 3066  
                                                                     l291 7446  
                                                                     l612 731C  
                                                                     l348 18C8  
                                                                     l364 17A6  
                                                                     l508 6F14  
                                                                     l532 0B2A  
                                                                     l516 0958  
                                                                     l292 7452  
                                                                     l613 7326  
                                                                     l357 1678  
                                                                     l349 15CA  
                                                                     l461 76DE  
                                                                     l525 0A46  
                                                                     l517 0974  
                                                                     l429 73EA  
                                                                     l293 745E  
                                                                     l701 1E32  
                                                                     l614 732A  
                                                                     l382 182E  
                                                                     l374 1752  
                                                                     l366 171E  
                                                                     l470 76D8  
                                                                     l462 769C  
                                                                     l534 0B4A  
                                                                     l526 0A86  
                                                                     l630 3BDC  
                                                                     l294 746A  
                                                                     l615 7334  
                                                                     l383 181E  
                                                                     l535 0B54  
                                                                     l631 3B4C  
                                                                     l703 1FA0  
                                                                     l711 1EC6  
                                                                     l616 7338  
                                                                     l392 1878  
                                                                     l480 313C  
                                                                     l472 76FE  
                                                                     l544 0C02  
                                                                     l528 0A98  
                                                                     l632 3B72  
                                                                     l720 1F62  
                                                                     l704 1E60  
                                                                     l617 7342  
                                                                     l481 3168  
                                                                     l465 76AA  
                                                                     l561 0D30  
                                                                     l553 0CB6  
                                                                     l537 0B96  
                                                                     l529 0AA2  
                                                                     l633 3B98  
                                                                     l641 70EC  
                                                                     l801 1282  
                                                                     l289 742E  
                                                                     l618 7346  
                                                                     l394 18AE  
                                                                     l378 17D6  
                                                                     l490 3900  
                                                                     l482 3192  
                                                                     l546 0C32  
                                                                     l538 0BE6  
                                                                     l810 130A  
                                                                     l714 1EFA  
                                                                     l387 1836  
                                                                     l483 31AA  
                                                                     l475 30CA  
                                                                     l467 76B8  
                                                                     l563 0D64  
                                                                     l547 0C56  
                                                                     l707 1FCC  
                                                                     l723 1F96  
                                                                     l731 26CE  
                                                                     l396 18BC  
                                                                     l492 3910  
                                                                     l628 3BBE  
                                                                     l820 13E8  
                                                                     l708 1E92  
                                                                     l740 2754  
                                                                     l900 0FF6  
                                                                     l389 184C  
                                                                     l493 3916  
                                                                     l477 30F0  
                                                                     l469 76C6  
                                                                     l557 0CEE  
                                                                     l549 0C7E  
                                                                     l629 3B26  
                                                                     l821 140A  
                                                                     l813 136E  
                                                                     l805 12C4  
                                                                     l661 3B02  
                                                                     l653 3AA4  
                                                                     l717 1F2E  
                                                                     l733 27AE  
                                                                     l901 0EEC  
                                                                     l494 3934  
                                                                     l646 39FC  
                                                                     l830 14CC  
                                                                     l822 142C  
                                                                     l734 26E2  
                                                                     l902 1040  
                                                                     l910 0FD4  
                                                                     l495 3950  
                                                                     l479 3118  
                                                                     l831 14EE  
                                                                     l807 12D8  
                                                                     l655 3AB0  
                                                                     l743 2760  
                                                                     l735 2708  
                                                                     l911 0FDC  
                                                                     l903 0EF4  
                                                                     l496 3964  
                                                                     l488 38E4  
                                                                     l816 1590  
                                                                     l832 1510  
                                                                     l656 3AC0  
                                                                     l680 229E  
                                                                     l744 2768  
                                                                     l728 2678  
                                                                     l920 11B8  
                                                                     l912 0FE4  
                                                                     l904 0F50  
                                                                     l817 1388  
                                                                     l809 1352  
                                                                     l681 22B8  
                                                                     l737 27C8  
                                                                     l745 2790  
                                                                     l921 1074  
                                                                     l913 0FEC  
                                                                     l905 0FAC  
                                                                     l498 397A  
                                                                     l666 71F2  
                                                                     l826 15AA  
                                                                     l818 13A2  
                                                                     l850 2DD8  
                                                                     l690 23C6  
                                                                     l682 2314  
                                                                     l738 271C  
                                                                     l906 0FB4  
                                                                     l499 3980  
                                                                     l667 71DA  
                                                                     l827 146C  
                                                                     l851 2DFE  
                                                                     l843 2D70  
                                                                     l659 3AD2  
                                                                     l683 2342  
                                                                     l675 22D2  
                                                                     l747 27A6  
                                                                     l739 2742  
                                                                     l931 111E  
                                                                     l923 1094  
                                                                     l907 0FBC  
                                                                     l860 1A1A  
                                                                     l836 155A  
                                                                     l828 1486  
                                                                     l780 1C10  
                                                                     l692 23EE  
                                                                     l684 2372  
                                                                     l676 2250  
                                                                     l908 0FC4  
                                                                     l861 1A40  
                                                                     l845 2E1A  
                                                                     l853 2E12  
                                                                     l693 23FC  
                                                                     l677 22F6  
                                                                     l941 11F8  
                                                                     l917 1182  
                                                                     l933 1144  
                                                                     l925 10B4  
                                                                     l909 0FCC  
                                                                     l870 1AD0  
                                                                     l862 1A52  
                                                                     l838 1588  
                                                                     l846 2D9E  
                                                                     l790 1CEE  
                                                                     l598 2FB2  
                                                                     l678 226A  
                                                                     l942 120C  
                                                                     l918 1054  
                                                                     l871 1AE2  
                                                                     l847 2DC4  
                                                                     l599 2F94  
                                                                     l695 2408  
                                                                     l679 2284  
                                                                     l927 10D4  
                                                                     l864 1B62  
                                                                     l784 1C4A  
                                                                     l776 1BAE  
                                                                     l688 239E  
                                                                     l936 1174  
                                                                     l873 1AF2  
                                                                     l865 1A62  
                                                                     l857 1A06  
                                                                     l849 2E2E  
                                                                     l793 1D9A  
                                                                     l697 2416  
                                                                     l689 23AE  
                                                                     l937 11CA  
                                                                     l929 10F4  
                                                                     l874 1B18  
                                                                     l866 1A88  
                                                                     l859 1B42  
                                                                     l875 1B2A  
                                                                     l867 1A9A  
                                                                     l787 1C8A  
                                                                     l939 11DC  
                                                                     l788 1CAE  
                                                                     l877 1B3A  
                                                                     l869 1AAA  
                                                                     l789 1CA8  
                                                                     l898 0EC8  
                                                                     l899 0EDC  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                                     _cbf 0066  
                                                                     _rtc 0075  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 025A  
                                                            __CFG_LVP$OFF 000000  
                                                            ___ftdiv@cntr 0024  
                                                            ___ftdiv@sign 0029  
                                                                    l1000 6F6C  
                                                                    l1001 6F54  
                                                                    l1100 0896  
                                                                    l1101 08C2  
                                                                    l1040 01AC  
                                                                    l1016 7A1E  
                                                                    l1034 0120  
                                                                    l1018 7A28  
                                                                    l1035 019A  
                                                                    l1052 0538  
                                                                    l1036 016C  
                                                                    l1300 7880  
                                                                    l1053 02A6  
                                                                    l1045 0214  
                                                                    l1301 788E  
                                                                    l1062 0352  
                                                                    l1054 02E2  
                                                                    l1047 04E0  
                                                                    l1071 04A6  
                                                                    l1063 0394  
                                                                    l1055 02F6  
                                                                    l1039 01B6  
                                                                    l1303 78A8  
                                                                    l1080 06FC  
                                                                    l1072 04CC  
                                                                    l1064 03C0  
                                                                    l1056 02EE  
                                                                    l1304 789E  
                                                                    l1073 0574  
                                                                    l1082 064A  
                                                                    l1083 0676  
                                                                    l1067 03D6  
                                                                    l1059 0346  
                                                                    l1307 78C4  
                                                                    l1092 0748  
                                                                    l1068 0440  
                                                                    l1308 78D0  
                                                                    l1093 0774  
                                                                    l1077 05C8  
                                                                    l1069 0492  
                                                                    l1309 78E0  
                                                                    l1086 06C4  
                                                                    l1078 05EE  
                                                                    l1087 06F0  
                                                                    l1079 05F8  
                                                                    l1271 3638  
                                                                    l1096 07D4  
                                                                    l1097 0800  
                                                                    l1290 3E52  
                                                                    l1274 368E  
                                                                    l1099 0808  
                                                                    l1291 3E48  
                                                                    l1275 364C  
                                                                    l1532 7616  
                                                                    l1268 35F4  
                                                                    l1533 7622  
                                                                    l1277 36C4  
                                                                    l1269 35EC  
                                                                    l1542 74A8  
                                                                    l1294 3E76  
                                                                    l1278 36CE  
                                                                    l1543 74B4  
                                                                    l1295 3E82  
                                                                    l1287 3E1E  
                                                                    l1480 79F2  
                                                                    l1552 7082  
                                                                    l1528 75F2  
                                                                    l1296 3E92  
                                                                    l1288 3E30  
                                                                    l1553 706E  
                                                                    l1529 75E8  
                                                                    l1449 6E22  
                                                                    l1706 3FA8  
                                                                    l1538 748C  
                                                                    l1475 79AA  
                                                                    l1707 3F3E  
                                                                    l1539 7482  
                                                                    l1476 799C  
                                                                    l1740 3F18  
                                                                    l1708 3F7C  
                                                                    l1741 3EA4  
                                                                    l1742 3F0E  
                                                                    l1479 79E2  
                                                                    l1735 7220  
                                                                    l6010 70E2  
                                                                    l5116 057A  
                                                                    l1694 7582  
                                                                    l1695 757A  
                                                                    l5072 0354  
                                                                    l5082 03D8  
                                                                    l5316 7182  
                                                                    l5354 6FC8  
                                                                    l4912 3EA6  
                                                                    l6512 7414  
                                                                    l4836 6D24  
                                                                    l7316 1300  
                                                                    l4926 3F34  
                                                                    l5558 3688  
                                                                    l6470 2A8C  
                                                                    l4960 3FCC  
                                                                    l5824 3C0E  
                                                                    l4938 723C  
                                                                    l4970 7070  
                                                                    l6482 2ADC  
                                                                    l4964 6F56  
                                                                    l6636 096A  
                                                                    l6476 2AB4  
                                                                    l6904 305C  
                                                                    l5886 76D2  
                                                                    l6960 39F2  
                                                                    l6892 302A  
                                                                    l6878 2F8A  
                                                                    l6994 3AB6  
                                                                    l6986 3A9A  
                                                                    STR_1 7FE8  
                                                                    STR_2 7FE8  
                                                                    STR_3 7F89  
                                                                    STR_4 7FDE  
                                                                    STR_5 7FFA  
                                                                    STR_6 7FB1  
                                                                    STR_7 7FB1  
                                                                    STR_8 7FDE  
                                                                    STR_9 7FFA  
                                                                    u5000 0432  
                                                                    u5010 047C  
                                                                    u5030 0512  
                                                                    u5007 0428  
                                                                    u5017 0472  
                                                                    u5300 090A  
                                                                    u5220 0786  
                                                                    u5037 0508  
                                                                    u5070 05AC  
                                                                    u4520 75A6  
                                                                    u5400 78AE  
                                                                    u5218 072C  
                                                                    u4620 7492  
                                                                    u5148 062E  
                                                                    u5340 3E58  
                                                                    u6060 3C00  
                                                                    u6300 71FC  
                                                                    u5190 0706  
                                                                    u6070 3C0C  
                                                                    u4527 759C  
                                                                    u5280 08CE  
                                                                    u4650 3ED6  
                                                                    u4730 3FC2  
                                                                    u5290 0900  
                                                                    u5258 07B8  
                                                                    u5178 06A8  
                                                                    u5610 32BC  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u4590 75F8  
                                                                    u5278 087A  
                                                                    u5470 6FEC  
                                                                    u4920 0326  
                                                                    u4760 70C2  
                                                                    u6280 710A  
                                                                    u5297 08F6  
                                                                    u4930 032C  
                                                                    u4850 01DA  
                                                                    u4860 0202  
                                                                    u7270 098E  
                                                                    u8310 134C  
                                                                    u4927 031C  
                                                                    u4775 70C6  
                                                                    u4880 0260  
                                                                    u4848 0150  
                                                                    u5840 25B6  
                                                                    u4857 01D0  
                                                                    u9017 3A82  
                                                                    u4890 029C  
                                                                    u7370 0BD6  
                                                                    u8410 145C  
                                                                    u4867 01F8  
                                                                    u9027 7264  
                                                                    u6900 2AAC  
                                                                    u9037 7278  
                                                                    u6750 79B0  
                                                                    u7390 0BF6  
                                                                    u7710 3A52  
                                                                    u6910 2AC4  
                                                                    u9047 6F5E  
                                                                    u4887 0256  
                                                                    u4968 0378  
                                                                    u8440 14C4  
                                                                    u7720 3A68  
                                                                    u6920 2AD4  
                                                                    u9057 78FE  
                                                                    u4897 0292  
                                                                    u8370 13E0  
                                                                    u6930 2AEC  
                                                                    u7650 2FA6  
                                                                    u9067 791A  
                                                                    u6940 2AFC  
                                                                    u7820 2382  
                                                                    u9077 7934  
                                                                    u4998 03FC  
                                                                    u5990 17FE  
                                                                    u7670 3056  
                                                                    u9087 6E70  
                                                                    u4999 0436  
                                                                    u8480 1540  
                                                                    u6880 2A84  
                                                                    u7770 3B10  
                                                                    u6890 2A9C  
                                                                    u7690 3088  
                                                                    u7780 3B18  
                                                                    u8735 765E  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                           _enviaSMS$1220 00BF  
                                                           _enviaSMS$1221 00C1  
                                                           _enviaSMS$1222 00C3  
                                                           _enviaSMS$1207 00BD  
                                                            __CFG_WRT1$ON 000000  
                                                           _enviaSMS$1227 00C5  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00EB  
                                                                    __ano 00E9  
                                                                    __hor 00EC  
                                                                    __mes 00EA  
                                                                    __min 00ED  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00EE  
                                                          ?_drenarPressao 0001  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 35E8  
                                                                    _main 0DCC  
                                             __end_ofi2_getDS1307TimeDate 34F0  
                                                                    _tel1 01B0  
                                                                    _tel2 01A4  
                                                            ___ftpack@arg 0001  
                                                            ___ftpack@exp 0004  
                                                        __end_of_I2C_Read 70D6  
                                              __end_of_configuraTelefones 15BA  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    fsr2l 000FD9  
                                                                    btemp 007C  
                                                        __end_of_I2C_Wait 6D7A  
                                                        __end_of_I2C_Stop 6CD6  
                                                 __size_of_tela_ajusteRTC 0236  
                                                        _etapaComunicacao 0051  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 6EB4  
                                                                    start 0118  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 0234  
                                            partidaBombaEstacionaria@acao 0083  
                                                        __end_of_BCDtoDEC 6D94  
                                                         __end_of_Lcd_Cmd 6E82  
                                                  __size_ofi2_I2C_Restart 000C  
                                                          clearShiftREG@i 0080  
                                                           ?_atualizarLCD 0088  
                                                            ___ftmul@cntr 0019  
                                                            ___param_bank 000000  
                                                            ___ftmul@sign 001A  
                                                        __end_of_DECtoBCD 72C6  
                                               __size_of_tela_testeBombas 01D0  
                                                     _timerVerificarSinal 00FE  
                                                           _lerParametros 2F68  
                                                            ___fttol@exp1 0029  
                                                         _executandoTeste 00F1  
                                                            ___fttol@lval 0025  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1462 00C1  
                                                             ?i2_RTC_Init 0001  
                                                                   ?_atoi 00BF  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3EA0  
                                                         __end_of___ftadd 299E  
                                                                   STR_10 7ED9  
                                                                   STR_11 7FFA  
                                                                   STR_20 7ED9  
                                                                   STR_12 7D5F  
                                                                   STR_13 7FFD  
                                                                   STR_21 7FAA  
                                                                   STR_30 7FD2  
                                                                   STR_22 7FFA  
                                                                   STR_14 7AD7  
                                                                   STR_23 7D5F  
                                                                   STR_31 7FFA  
                                                                   STR_15 7EE5  
                                                                   STR_24 7FFD  
                                                                   STR_32 7FD2  
                                                                   STR_16 7FFA  
                                                                   STR_40 7E0B  
                                                                   STR_33 7FFA  
                                                                   STR_17 7FD8  
                                                                   STR_41 7D00  
                                                                   STR_25 7BBD  
                                                                   STR_18 7FDE  
                                                                   STR_50 7FE3  
                                                                   STR_34 7FD8  
                                                                   STR_42 7D13  
                                                                   STR_26 7B55  
                                                                   STR_27 7FFA  
                                                                   STR_19 7FFA  
                                                                   STR_35 7F15  
                                                                   STR_51 7E67  
                                                                   STR_43 7DFB  
                                                                   STR_36 7FAA  
                                                                   STR_52 7FFA  
                                                                   STR_28 7FD2  
                                                                   STR_44 7DA7  
                                                                   STR_60 7C4A  
                                                         __end_of___awmod 78EE  
                                                                   STR_29 7FFA  
                                                                   STR_53 7FE3  
                                                                   STR_45 7F41  
                                                                   STR_61 7C88  
                                                                   STR_37 7C74  
                                                                   STR_46 7FFA  
                                                                   STR_38 7E76  
                                                                   STR_54 7DEB  
                                                                   STR_62 7D4C  
                                                                   STR_70 7CB0  
                                                                   STR_63 7E2B  
                                                                   STR_47 7FE3  
                                                                   STR_39 7E2B  
                                                                   STR_71 7CC4  
                                                                   STR_55 7C1B  
                                                                   STR_72 7F4C  
                                                                   STR_80 7EB0  
                                                                   STR_48 7E58  
                                                                   STR_56 7DC9  
                                                                   STR_64 7CEC  
                                                                   STR_81 7FFA  
                                                                   STR_49 7FFA  
                                                                   STR_73 7FF6  
                                                                   STR_65 7FCC  
                                                                   STR_57 7C9C  
                                                                   STR_90 7EE5  
                                                                   STR_82 7FE3  
                                                                   STR_74 7FF2  
                                                                   STR_66 7E3A  
                                                                   STR_58 7D95  
                                                                   STR_67 7FC6  
                                                                   STR_91 7FB8  
                                                                   STR_83 7EBE  
                                                                   STR_59 7C35  
                                                                   STR_75 7BFC  
                                                                   STR_84 7FFA  
                                                                   STR_92 7FBF  
                                                                   STR_76 7F7F  
                                                                   STR_68 7E49  
                                                                   STR_77 7FFA  
                                                                   STR_85 7FE3  
                                                                   STR_93 7F12  
                                                                   STR_69 7C5F  
                                                                   STR_78 7FE3  
                                                                   STR_86 7F9B  
                                                                   STR_94 7ECC  
                                                                   STR_79 7F2B  
                                                                   STR_95 7DDA  
                                                                   STR_87 7CD8  
                                                                   STR_88 7DB8  
                                                                   STR_96 7D39  
                                                                   STR_89 7F09  
                                                                   STR_97 7EA2  
                                                                   STR_98 7FED  
                                                                   STR_99 7EF1  
                                                         __end_of___ftdiv 38A2  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 7A08  
                                                         __end_of___ftmul 35E8  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___fttol 37BC  
                                                         __end_of___lwdiv 7630  
                                                         __end_of___lwmod 74C2  
                                                                   i2l230 20DA  
                                                                   i2l223 6DEA  
                                                                   i2l232 210E  
                                                                   i2l234 2204  
                                                                   i2l235 21CE  
                                                                   i2l228 2002  
                                                                   i2l450 77F4  
                                                                   i2l451 7808  
                                                                   i2l452 7812  
                                                                   i2l453 7826  
                                                                   i2l454 7830  
                                                                   i2l455 7844  
                                                                   i2l456 784E  
                                                                   i2l457 7862  
                                                                   i2l570 2B66  
                                                                   i2l580 2BC0  
                                                                   i2l572 2B7C  
                                                                   i2l582 2BCA  
                                                                   i2l574 2B86  
                                                                   i2l592 2C44  
                                                                   i2l584 2BE0  
                                                                   i2l576 2BA4  
                                                                   i2l568 2B5C  
                                                                   i2l593 2CC0  
                                                                   i2l594 2C68  
                                                                   i2l586 2BEA  
                                                                   i2l578 2BAE  
                                                                   i2l595 2CA6  
                                                                   i2l587 2C0C  
                                                                   i2l891 00BC  
                                                                   i2l892 00C8  
                                                         ___awdiv@counter 0084  
                                                                   i2l889 008C  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 091A  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 734C  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 7704  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 005E  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                         __end_of_readADC 6E06  
                                                                   _delay 6F50  
                                                                   _blink 71C4  
                                                         __end_of_dpowers 7AD7  
                                                                   _line1 017B  
                                                                   _line2 0166  
                                                                   _line3 0151  
                                                                   _line4 013C  
                                                         __end_of_isdigit 6E2E  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _shift 0044  
                                                           ___ftpack@sign 0005  
                                                                   _timer 2B48  
                                                                   atoi@a 00C4  
                                                        __end_of_RTC_Init 702A  
                                                                   atoi@s 00BF  
                                                                   _putch 6D1E  
                                                       __end_of_I2C_Start 6CCA  
                                                  _flagEstacionariaLigada 00F0  
                                                       __end_of_I2C_Write 6CFE  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0094  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 241C  
                                                                   wtemp6 007D  
                                                         __end_of_sprintf 73DA  
                                                          _comunicarTeste 241C  
                                                         __end_of_strncmp 3F3A  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 7976  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 734C  
                                                     __size_ofi2_I2C_Read 0036  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 7704  
                                                           _dtl_principal 0057  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 36D4  
                                                            __end_of_main 1234  
                                                   __end_of_aguardaBuffer 7188  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                                  ??_atoi 00C1  
                                                                  ??_main 00D9  
                                                           ___fttol@sign1 0024  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FD  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                                           __activetblptr 000002  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 1FD6  
                                                   __end_of_clearShiftREG 6FF2  
                                                           i2_I2C_Restart 6CB2  
                                                    _tempo_limite_partida 006B  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0043  
                                                            ?_setShiftREG 0001  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7FED  
                                                                  STR_101 7D26  
                                                                  STR_110 7F9B  
                                                                  STR_102 7F36  
                                                                  STR_103 7F41  
                                                                  STR_111 7CD8  
                                                                  STR_104 7E58  
                                                                  STR_120 7F61  
                                                                  STR_112 7E94  
                                                                  STR_113 7F12  
                                                                  STR_105 7E67  
                                                                  STR_121 7EFD  
                                                                  STR_114 7EE5  
                                                                  STR_122 7E85  
                                                                  _ADRESH 000FC4  
                                                                  STR_123 7FA3  
                                                                  STR_107 7F92  
                                                                  STR_115 7F57  
                                                                  STR_108 7F20  
                                                                  STR_116 7E1B  
                                                                  STR_109 7F75  
                                                                  STR_117 7D71  
                                                                  STR_118 7F6B  
                                                                  _ADRESL 000FC3  
                                                                  STR_119 7D83  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                        __end_of___ftpack 3D6A  
                                                          lerTransdutor@i 002A  
                                                         ??_drenarPressao 00B5  
                                                               ??i2_delay 0003  
                                                                  i2l1000 6E9C  
                                                  __end_of_comunicarTeste 25FE  
                                                                  i2l1001 6E86  
                                                                  i2l1400 3802  
                                                                  i2l1401 3842  
                                                                  i2l1402 386A  
                                                                  i2l1340 3D38  
                                                                  i2l1420 35A8  
                                                                  i2l1341 3D2C  
                                                                  i2l1334 3CD4  
                                                                  i2l1406 3D9C  
                                                                  i2l1335 3CC8  
                                                                  i2l1407 3DCE  
                                                                  i2l1415 3536  
                                                                  i2l1416 356A  
                                                                  i2l1337 3D0C  
                                                                  i2l1417 357C  
                                                                  i2l1338 3CF4  
                                                                  i2l1442 3784  
                                                                  i2l1419 3596  
                                                                  i2l1443 3776  
                                                                  i2l1380 28A8  
                                                                  i2l1436 375A  
                                                                  i2l1365 2824  
                                                                  i2l1445 37A4  
                                                                  i2l1437 3748  
                                                                  i2l1374 28C0  
                                                                  i2l1391 2922  
                                                                  i2l1392 2940  
                                                                  i2l1393 2972  
                                                                  i2l1369 2852  
                                                                  i2l1379 28B4  
                                                                  i2l1388 28FA  
                                                                  i2l1389 28EE  
                                                                  i2l5300 6E88  
                                                                  i2l6104 2998  
                                                                  i2l6150 389C  
                                                                  i2l5428 3D64  
                                                                  i2l6262 37B6  
                                                                  i2l4832 3DFC  
                                                                  _INTCON 000FF2  
                                                                  i2l4834 3E00  
                                                                  i2l6198 35E2  
                                                                  i2l6374 1FF8  
                                                        __end_of___lwtoft 6DDE  
                                                                  u631_41 27E0  
                                                                  u632_41 27F4  
                                                                  u652_41 37CE  
                                                                  u654_41 37E8  
                                                               ??_Lcd_Cmd 0081  
                                                                  u657_41 3502  
                                                                  u666_41 36E6  
                                                                  u659_41 351C  
                                                                  _TMR0IF 007F92  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 00E4  
                                                 __size_of_Lcd_Write_Char 0042  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C2  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00E7  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 0064  
                                                                  ___ftge 3D6A  
                                                          _readEEPROM_ext 74C2  
                                                                  ___wmul 3FD2  
                                                        __end_of_enviaSMS 190E  
                                                               ??___awdiv 0084  
                                                            enviaSMS@tipo 00C7  
                                                               ??___ftadd 0021  
                                                               ??___awmod 0084  
                                                               ??___ftdiv 0021  
                                                         _getSinalSIM800L 299E  
                                                               ??___lldiv 0088  
                                                               ??___ftmul 0012  
                                                               ??___fttol 001F  
                                                                  _blinkk 0067  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                 _habilitaTesteAutomatico 00EF  
                                   __end_of_verificarIntervaloTesteBombas 7308  
                                  __size_of_verificarIntervaloTesteBombas 0042  
                                           _verificarIntervaloTesteBombas 72C6  
                                                 __end_of_writeEEPROM_ext 7392  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 7062  
                                                                  delay@x 0080  
                                                                  clear_0 774A  
                                                                  clear_1 7756  
                                                                  clear_2 7762  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 7A08  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 7188  
                                                            __doprnt@prec 0096  
                                                                  _strchr 7202  
                                                                  _strlen 756E  
                                                                  _strstr 3F3A  
                                                          ?_lerTransdutor 0001  
                                                   ___ftmul@f3_as_product 0016  
                                                           dataLoger@logs 00C0  
                                                               ??_readADC 0003  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7A9C  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00AF  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 7768  
                                                              ___ftadd@f1 001B  
                                                              ___ftadd@f2 001E  
                                                          _tela_ajusteRTC 1DA0  
                                                              ___ftge@ff1 0001  
                                                              ___ftge@ff2 0004  
                                                       __end_of_Lcd_Clear 6D1E  
                                                        _etapaTesteBombas 0071  
                                                           ___rparam_used 000001  
                                                              ___ftdiv@f1 001B  
                                                              ___ftdiv@f2 001E  
                                                              ___ftdiv@f3 0025  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 0118  
                                                              _acaoBombas 308E  
                                                  __end_of_readEEPROM_ext 7518  
                                                     _telefoneSelecionado 00F7  
                                                              ___ftmul@f1 000C  
                                                              ___ftmul@f2 000F  
                                                    __size_ofi2_I2C_Start 000C  
                                                              ___fttol@f1 001B  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 25FE  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FC  
                                                            __pidataBANK0 6C92  
                                                            __pidataBANK1 6C8E  
                                                      __size_of_dataLoger 0238  
                                                           __end_of_delay 6F86  
                                                           __end_of_blink 7202  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 04B2  
                                                           __end_of_timer 2CC6  
                                                           __end_of_putch 6D32  
                                                          ?_intToFloatStr 00B5  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00BB  
                                                              ___lwtoft@c 0009  
                                                          _tela_menu_posi 0069  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 007E  
                                                          _Lcd_Set_Cursor 3B1E  
                                                                 ??_TIMER 0031  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0074  
                                                            __sec_partida 006F  
                                                    __end_of_atualizarLCD 3A58  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 0009  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00D9  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 1FD6  
                                                              __menu_posi 00DD  
                                                 __end_of_getSinalSIM800L 2B48  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                                __size_of_resetParametros 0028  
                                                      __end_ofi2_I2C_Read 6F50  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 6D60  
                                                                 ?___ftge 0001  
                                                      __end_ofi2_I2C_Stop 6CB2  
                                         __size_of_configuraRegistradores 0056  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 6D94  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 6D48  
                                                              _flag_b_esc 0065  
                                                              _codigoErro 00F3  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 1234  
                                                        ?_writeEEPROM_ext 008C  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 002A  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                               ?___ftpack 0001  
                                                  __end_of_Lcd_Set_Cursor 3BE2  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                               ?___lwtoft 0009  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                          ?_verificarIntervaloTesteBombas 0001  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                              ??_Lcd_Init 0083  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 1DA0  
                                                                 _SSPSTAT 000FC7  
                                                    __size_of_setShiftREG 0048  
                                                                 i2_delay 6E82  
                                                               ?_enviaSMS 0001  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 0063  
                                                          _Lcd_Write_Char 7242  
                                                                 _Lcd_Cmd 6E56  
                                                              _dtl_jockey 0058  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 6EE6  
                                                               _I2C_Start 6CBE  
                                                              _gsmOcupado 00F4  
                                                               _I2C_Write 6CF0  
                                                         _timerReenvioSMS 00F6  
                                                    ??_configuraTelefones 00BF  
                                                             ?_acaoBombas 0001  
                                                       __end_of_getSerial 32CC  
                                                                 __Hparam 0000  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 6DB6  
                                                         _sp_estacionaria 00E0  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                         __size_of___ftge 009C  
                                                                 __b_mais 0060  
                                                         ??_intToFloatStr 00B7  
                                                                 ___awdiv 3E06  
                                                                 ___ftadd 27CE  
                                                                 ___awmod 7868  
                                                                 ___ftdiv 37BC  
                                                                 ___lldiv 7976  
                                                         __size_of___wmul 002C  
                                                                 ___ftmul 34F0  
                                                                 ___fttol 36D4  
                                                                 ___lwdiv 75CE  
                                                                 ___lwmod 7470  
                                                           atualizarLCD@i 0090  
                                                                 __doprnt 011C  
                                                                 __pcinit 7704  
                                                              ??___ftpack 0006  
                                                         __size_of_memset 003A  
                                                                 _btPress 7694  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __tensao 004C  
                                                                 __ptext0 0DCC  
                                                                 __ptext1 72C6  
                                                                 __ptext2 25FE  
                                                                 __ptext3 1DA0  
                                                                 __ptext4 7422  
                                                                 __ptext5 32CC  
                                                                 __ptext6 7284  
                                                                 __ptext7 220A  
                                                                 __ptext8 6E2E  
                                                                 __ptext9 73DA  
                                               criarCaracteresCGRAM@F2955 7A9D  
                                                         __size_of_printf 003C  
                                                              ??___lwtoft 000C  
                                                                 _dtl_dia 005D  
                                                                 _dtl_ano 005B  
                                                         __size_of_strchr 0040  
                                                                 _readADC 6DDE  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 005C  
                                                                 _dtl_min 0059  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7ACD  
                                                    readEEPROM16_ext@data 0091  
                                                                 _isdigit 6E06  
                                                       ??_acaoTesteBombas 00C8  
                                                        ___awmod@dividend 0080  
                                                         _ajusteSP_Bombas 190E  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 0055  
                                                  _configuraRegistradores 7518  
                                                                 _pressao 00F8  
                                                                 _sprintf 7392  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 6CE2  
                                                  __end_of_Lcd_Write_Char 7284  
                                                                 _strncmp 3EA0  
                                                    end_of_initialization 7768  
                                                       __end_of_salvarLOG 3CA6  
                                                              ??_enviaSMS 00BB  
                                                    __end_of_limparBuffer 6FBC  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 7470  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7A9C  
                                                     _timerTrocarTextoLcd 0074  
                                                              _timer$1320 0009  
                                                              _timer$1321 000B  
                                                              _timer$1322 000D  
                                                              _timer$1323 000F  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 0100  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1312 00D3  
                                                    _acaoTesteBombas$1307 00D1  
                                                    _acaoTesteBombas$1317 00D5  
                                                    _acaoTesteBombas$1291 00CF  
                                                    _acaoTesteBombas$2375 00CD  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00B5  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                                 strlen@s 0080  
                                                       ??_resetParametros 0081  
                                                              getSerial@i 00BC  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 00D2  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 6D0C  
                                                  __size_of_telaPrincipal 0212  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 0122  
                                                __end_of_tela_testeBombas 27CE  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                                         ?_Lcd_Write_Char 0001  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                  __size_of_aguardaBuffer 003C  
                                                       __size_of_BCDtoDEC 001A  
                                                   __end_of_drenarPressao 6F1A  
                                                       __size_of_DECtoBCD 0042  
                                                             ___ftdiv@exp 0028  
                                                               _TXSTAbits 000FAC  
                                              __size_of_writeEEPROM16_ext 0022  
                                                  __size_of_clearShiftREG 0036  
                                                        _intensidadeSinal 00FF  
                                                             ___ftmul@exp 0015  
                                                         getSerial@length 00BA  
                                                            _atualizarLCD 3986  
                                                               _Lcd_Clear 6D0C  
                                                          __end_of___ftge 3E06  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 3FFE  
                                                      intToFloatStr@F2544 01BC  
                                                        _Lcd_Write_String 70D6  
                                                 __end_of_ajusteSP_Bombas 1B68  
                                                          __end_of_memset 709C  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 71C4  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 6CD6  
                                                          __end_of_strchr 7242  
                                                          __end_of_strlen 75CE  
                                                          __end_of_strstr 3FD2  
                                                      _flagErroTransdutor 0072  
                                                     start_initialization 7704  
                                                             i2I2C_Read@a 0002  
                                                acaoTesteBombas@intervalo 00D7  
                                                   _tela_testeBombas$1417 00B7  
                                                      intToFloatStr@valor 00BF  
                                                _partidaBombaEstacionaria 38A2  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                       ??_I2C_Master_Init 0091  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 220A  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 308E  
                                                              ?_Lcd_Clear 0001  
                                                                ??___ftge 0007  
                                         __size_of_configurarEstacionaria 016E  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00F8  
                                                             __pdataBANK1 01BC  
                                                           _aguardaBuffer 714C  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                           ??_informacoes 00B5  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                       __size_of___ftpack 00C4  
                                                             __pbssCOMRAM 0044  
                                                       __size_of___lwtoft 0028  
                                                           _clearShiftREG 6FBC  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00B5  
                                                   lerTransdutor@_pressao 002B  
                                                     i2_getDS1307TimeDate 33DE  
                                                            _isdigit$1865 0081  
                                                        intToFloatStr@end 00B7  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                         ??_verificarIntervaloTesteBombas 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 1B68  
                                                       __size_of_enviaSMS 0354  
                                                            ??_acaoBombas 00C8  
                                                        ___lwdiv@dividend 0080  
                                                     lerTransdutor@tensao 002E  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7A9C  
                                                         _acaoTesteBombas 091A  
                                                               _flagTexto 0073  
                                                               _flag_b_ok 005F  
                                                     configuraTelefones@i 00C3  
                                                                ?___awdiv 0080  
                                                                ?___ftadd 001B  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                                ?___ftdiv 001B  
                                                     __end_ofi2_I2C_Start 6CA6  
                                                                ?___lldiv 0080  
                                                                ?___ftmul 000C  
                                                                ?___fttol 001B  
                                                     __end_ofi2_I2C_Write 6CF0  
                                                               _getSerial 31B0  
                                                   _timerEtapaComunicacao 00F5  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 0190  
                                                               _ajust_tel 00DB  
                                                            _limparBuffer 6F86  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                        ?_ajusteSP_Bombas 0001  
                                                   __end_of_lerTransdutor 220A  
                                                                ?_readADC 0001  
                                                             _flag_b_mais 0061  
                                                 ?_configuraRegistradores 0001  
                                                   __end_ofi2_I2C_Restart 6CBE  
                                                          __size_of_TIMER 0110  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 709C  
                                                          ?_clearShiftREG 0001  
                                                                _I2C_Wait 6D60  
                                                                _I2C_Stop 6CCA  
                                                     __end_of_readButtons 7868  
                                                           ??_setShiftREG 0080  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 2CC6  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 6D7A  
                                                      __end_of_acaoBombas 31B0  
                                                     __end_of_informacoes 77EA  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003E  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 7284  
                                                          __size_of_timer 017E  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00DE  
                                                               _horimetro 004F  
                                       __end_ofcriarCaracteresCGRAM@F2955 7ACD  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                              ?_dataLoger 0001  
                                                               _salvarLOG 3BE2  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E3  
                                                               _validaRTC 7422  
                                                         _resetParametros 6E2E  
                                                        _horario_de_teste 00E6  
                                             __size_of_configuraTelefones 0386  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                                i2u553_40 3D44  
                                                                i2u641_40 2884  
                                                                i2u635_40 2814  
                                                                i2u660_40 3526  
                                                                i2u556_40 6F3C  
                                                                i2u549_40 3CB8  
                                                                i2u645_40 28CA  
                                                                i2u557_45 6F40  
                                                                i2u638_40 2842  
                                                                i2u910_47 6DE4  
                                                                i2u655_40 37F2  
                                                                i2u671_40 3762  
                                                                i2u648_40 2904  
                                                                i2u672_40 378C  
                                                                i2u752_40 2C04  
                                                                i2u753_40 2C08  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u668_40 3710  
                                                                i2u668_45 3706  
                                                                i2u909_47 6E8E  
                                                                i2u678_40 205C  
                                                             ??_Lcd_Clear 0083  
                                                               _sp_jockey 00E2  
                                                     _dtl_posi_visualizar 0053  
                                                              ?_getSerial 00B5  
                                                            setShiftREG@i 0081  
                                            __end_of_criarCaracteresCGRAM 3B1E  
                                                   __end_of_intToFloatStr 7A9C  
                                                                _RTC_Init 6FF2  
                                          __end_of_configuraRegistradores 756E  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               _totalLogs 0054  
                                                        _dtl_estacionaria 0056  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                               _tempo_limite_estacionaria 00E5  
                                                                _Lcd_Init 78EE  
                                                       i2_writeEEPROM_ext 7110  
                                                               _writeChar 6CFE  
                                                                _Lcd_Port 7308  
                                                       ?_tela_testeBombas 0001  
                                                               copy_data0 7718  
                                                               copy_data1 7738  
                                                        _readEEPROM16_ext 702A  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C2  
                                                      ??_tela_testeBombas 00B5  
                                                __end_of_Lcd_Write_String 7110  
                                                             _dtl_posicao 00FA  
                                                        __size_ofi2_delay 0032  
                                                     __end_of_setShiftREG 7422  
                                                 __end_of_acaoTesteBombas 0DCC  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 6C9A  
                                                             i2_I2C_Write 6CE2  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00E8  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                        __size_of___awdiv 009A  
                                                        __size_of___ftadd 01D0  
                                                        __size_of___awmod 0086  
                                                        __size_of___ftdiv 00E6  
                                                __size_of_getSinalSIM800L 01AA  
                                                        __size_of___lldiv 0092  
                                                        __size_of___ftmul 00F8  
                                                        __size_of___fttol 00E8  
                                                                __b_menos 0062  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 77EA  
                                                                ___ftpack 3CA6  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                         ??_clearShiftREG 0080  
                                                        __size_of_btPress 0070  
                                              ??_partidaBombaEstacionaria 0083  
                                                         intToFloatStr@pr 00C0  
                                                                ___lwtoft 6DB6  
                                                             _informacoes 7776  
                                                    _ajusteSP_Bombas$2377 00C2  
                                                            ?_I2C_Restart 0001  
                                                                _base_sec 0070  
                                                         _I2C_Master_Init 7630  
                                                        __size_of_readADC 0028  
                                               __end_ofi2_writeEEPROM_ext 714C  
                                                          lerParametros@i 0095  
                                                                __sec_aux 006E  
                                                           _tempo_partida 006C  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 2F68  
                                                                __ptext11 702A  
                                                                __ptext20 2CC6  
                                                                __ptext12 7776  
                                                                __ptext21 1234  
                                                                __ptext13 299E  
                                                                __ptext30 091A  
                                                                __ptext22 241C  
                                                                __ptext14 31B0  
                                                                __ptext31 3BE2  
                                                                __ptext23 7518  
                                                                __ptext15 35E8  
                                                                __ptext40 7392  
                                                                __ptext32 734C  
                                                                __ptext24 3986  
                                                                __ptext16 2E34  
                                                                __ptext41 6FBC  
                                                                __ptext33 74C2  
                                                                __ptext25 70D6  
                                                                __ptext17 6D7A  
                                                                __ptext50 6E06  
                                                                __ptext42 7694  
                                                                __ptext34 6CD6  
                                                                __ptext26 7242  
                                                                __ptext18 1B68  
                                                                __ptext51 3FD2  
                                                                __ptext43 308E  
                                                                __ptext35 709C  
                                                                __ptext27 3B1E  
                                                                __ptext19 3A58  
                                                                __ptext60 7202  
                                                                __ptext52 7470  
                                                                __ptext44 38A2  
                                                                __ptext36 7A08  
                                                                __ptext28 190E  
                                                                __ptext61 6F50  
                                                                __ptext53 75CE  
                                                                __ptext45 15BA  
                                                                __ptext37 7868  
                                                                __ptext29 71C4  
                                                                __ptext70 7308  
                                                                __ptext62 6FF2  
                                                                __ptext54 6F86  
                                                                __ptext46 6CFE  
                                                                __ptext38 3E06  
                                                                __ptext71 7630  
                                                                __ptext63 6CF0  
                                                                __ptext55 7062  
                                                                __ptext47 7188  
                                                                __ptext39 6EE6  
                                                                __ptext80 6D94  
                                                                __ptext72 7976  
                                                                __ptext64 6CCA  
                                                                __ptext56 714C  
                                                                __ptext48 011C  
                                                                __ptext81 7110  
                                                                __ptext65 6CBE  
                                                                __ptext57 3F3A  
                                                                __ptext49 6D1E  
                                                                __ptext90 6DB6  
                                                                __ptext82 6E82  
                                                                __ptext74 2B48  
                                                                __ptext66 6D60  
                                                                __ptext58 3EA0  
                                                                __ptext91 36D4  
                                                                __ptext83 6CE2  
                                                                __ptext75 33DE  
                                                                __ptext67 78EE  
                                                                __ptext59 756E  
                                                                __ptext92 34F0  
                                                                __ptext84 6CA6  
                                                                __ptext76 6CB2  
                                                                __ptext68 6D0C  
                                                                __ptext93 3D6A  
                                                                __ptext85 6C9A  
                                                                __ptext77 6F1A  
                                                                __ptext69 6E56  
                                                                __ptext94 37BC  
                                                                __ptext86 6D48  
                                                                __ptext78 6D32  
                                                                __ptext95 27CE  
                                                                __ptext87 77EA  
                                                                __ptext79 6EB4  
                                                                __ptext96 3CA6  
                                                                __ptext88 1FD6  
                                                                __ptext97 0000  
                                                                __ptext89 6DDE  
                                                                _ajst_rtc 0068  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00D8  
                                                    getSinalSIM800L@sinal 00C8  
                                                 __end_of_resetParametros 6E56  
                                                                _enviaSMS 15BA  
                                                                _dtl_hora 005A  
                                                        __size_of_strncmp 009A  
                                                     _comunicarTeste$1192 00BD  
                                                       ??_writeEEPROM_ext 008D  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 0468  
                                                             ??_dataLoger 00B5  
                                                     _status_estacionaria 00FB  
                                                              strncmp@len 008A  
                                                        _timerTesteBombas 00D9  
                                                                blink@end 0083  
                                                                _tel_posi 00DC  
                                               _criarCaracteresCGRAM$1374 00B7  
                                                                int$flags 007C  
                                                                atoi@sign 00C3  
                                                             ??_getSerial 00B8  
                                                      _telaPrincipal$2376 00C2  
                                                  __size_of_drenarPressao 0034  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 6F1A  
                                                              i2_I2C_Wait 6D48  
                                                              i2_I2C_Stop 6CA6  
                                                             _setShiftREG 73DA  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 6D32  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                                intlevel2 3FFE  
                                                               sprintf@ap 00AF  
                                                               sprintf@pb 00B1  
                                                               sprintf@wh 00A1  
                                                       _ocorrendoIncendio 00F2  
                                                    _criarCaracteresCGRAM 3A58  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 01E2  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1442 00BC  
                                                          _dataLoger$1436 00BA  
                                                          _dataLoger$1447 00BE  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 2E34  
                                                       _setDS1307TimeDate 32CC  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00B7  
                                                            getSerial@ret 00BD  
                                                            getSerial@str 00B5  
                                                 __end_of_I2C_Master_Init 7694  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 6EB4  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                             _qtd_leitura 006D  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00C6  
                                                            _sp_principal 00E1  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                  __size_of_lerParametros 0126  
                                                   ?_criarCaracteresCGRAM 0001  
                                                        ?_resetParametros 0001  
                                                           _sub_menu_posi 006A  
                                                             _option_posi 00DF  
                                                           _drenarPressao 6EE6  
                                         _tempo_limite_teste_estacionaria 00E4  
                                               __end_of_getDS1307TimeDate 2F68  
                                               __end_of_setDS1307TimeDate 33DE  
